ifneq ($(V),1)
.SILENT:
endif

ifndef CROSSPLATFORM_MK
include crossplatform.mk
include default.cf
endif

renameEcereCOM = $(subst ecereCOM,eC,$(1))
#$(call renameEcereCOM,$(word $(1),$(BGEN_LIBS)))  $(call selectLib,$(1))
selectLib = $(word $(1),$(BGEN_LIBS))

ifndef BINDINGS_DIR
BINDINGS_DIR := bindings
endif
ifndef C_BINDINGS_DIR
C_BINDINGS_DIR := $(BINDINGS_DIR)/c
endif
ifndef CPP_BINDINGS_DIR
CPP_BINDINGS_DIR := $(BINDINGS_DIR)/cpp
endif
ifndef PY_BINDINGS_DIR
PY_BINDINGS_DIR := $(BINDINGS_DIR)/py
endif

ifndef BGEN_LIBS
BGEN_LIBS := obj/linux/lib/$(LP)ecereCOM$(SO) obj/linux/lib/$(LP)ecere$(SO) obj/linux/lib/$(LP)EDA$(SO) $(ADDITIONAL_BGEN_LIBS)
endif
BGEN_ARGS := -fren Log=__e_log,Logf=__e_logf,Sleep=__sleep,Print=printx
BGEN_QUIET := $(if $(SILENT_IS_ON),-quiet,)

_BGEN_OUTS := $(foreach _lib,$(BGEN_LIBS),$(call renameEcereCOM,$(call lib_path_to_name,$(_lib))))
_BGEN_C_OUTPUT := $(addsuffix .h,$(_BGEN_OUTS)) $(addsuffix .c,$(_BGEN_OUTS)) $(addsuffix _c.Makefile,$(_BGEN_OUTS))
_BGEN_CPP_OUTPUT := $(addsuffix .h,$(_BGEN_OUTS)) $(addsuffix .c,$(_BGEN_OUTS)) $(addsuffix _cpp.Makefile,$(_BGEN_OUTS))
_BGEN_PY_OUTPUT := $(addprefix cffi-,$(addsuffix .h,$(_BGEN_OUTS))) $(addsuffix .py,$(_BGEN_OUTS)) $(addprefix build_,$(addsuffix .py,$(_BGEN_OUTS)))

# note: this is needed because we chdir without the use of a makefile specifying a different _CF_DIR
#       and cannot call bgen with the usual relative path specified by $(BGEN)
#          i.e.: 	+cd $(C_BINDINGS_DIR) && $(BGEN) $(BGEN_ARGS) $(BGEN_QUIET) -c $(BGEN_LIBS)
#ROOT_ABSPATH = $(dir $(realpath $(firstword $(MAKEFILE_LIST))))
#BGEN := $(call sys_path,$(ROOT_ABSPATH)$(_CF_DIR)obj/$(HOST_PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/bin/bgen$(HOST_E))

ifdef WINDOWS_HOST
PYTHON := python
else
PYTHON := python3
endif
PY_VER := 3

BG_LANG_c := C
BG_LANG_cpp := C++
BG_LANG_py := Python $(PY_VER)

lib_path_to_name = $(basename $(if $(LP),$(patsubst $(LP)%$(SO),%$(SO),$(notdir $(1))),$(notdir $(1))))
get_binding_name = $(call renameEcereCOM,$(call lib_path_to_name,$(call selectLib,$(1))))

bg_src_file_c = $(call get_binding_name,$(1)).c
bg_src_file_cpp = $(call get_binding_name,$(1)).cpp
bg_src_file_py = $(call get_binding_name,$(1)).py

bg_hdr_file_c = $(call get_binding_name,$(1)).h
bg_hdr_file_cpp = $(call get_binding_name,$(1)).hpp
bg_hdr_file_py =

bg_mak_file_c = $(call get_binding_name,$(1))_c.Makefile
bg_mak_file_cpp = $(call get_binding_name,$(1))_cpp.Makefile
bg_mak_file_py = build_$(call get_binding_name,$(1)).py

bg_file_path_c = $(C_BINDINGS_DIR)/$(call bg_$(3)_file_$(2),$(1))
bg_file_path_cpp = $(CPP_BINDINGS_DIR)/$(call bg_$(3)_file_$(2),$(1))
bg_file_path_py = $(PY_BINDINGS_DIR)/$(call bg_$(3)_file_$(2),$(1))

bg_bld_cmd_c = $(_MAKE) -f $(call bg_mak_file_$(2),$(1)) $(3)
bg_bld_cmd_cpp = $(_MAKE) -f $(call bg_mak_file_$(2),$(1)) $(3)
bg_bld_cmd_py = $(PYTHON) $(call bg_mak_file_$(2),$(1))

bg_print_lib_name = $(call echo,$(call get_binding_name,$(1)))

bg_bind_____echo = $(call bg_bind_echo_,$(1),$(2))
bg_bind_echo_ = $(if $(call selectLib,$(1)),$(if $(wildcard $(call bg_file_path_$(2),$(1),$(2),mak)),@$(call echo,Building $(BG_LANG_$(2)) bindings for $(call get_binding_name,$(1)) ($(call selectLib,$(1)))...),),)

bg_bind_cd_build = $(if $(call selectLib,$(1)),$(if $(wildcard $(call bg_file_path_$(2),$(1),$(2),mak)),$(call _bg_bind_cd_build,$(1),$(2),$(3)),$(call echo,Error: $(call bg_file_path_$(2),$(1),$(2),mak) not found!)),)
_bg_bind_cd_build = +cd $(BINDINGS_DIR)/$(2) && $(call bg_bld_cmd_$(2),$(1),$(2),$(3))
# todo: make this an actual error?

bg_bind_any_gened_exists = $(wildcard $(call bg_file_path_$(2),$(1),$(2),src))$(wildcard $(call bg_file_path_$(2),$(1),$(2),hdr))$(wildcard $(call bg_file_path_$(2),$(1),$(2),mak))
bg_bind_rmr_gened = $(if $(call selectLib,$(1)),$(if $(2),$(if $(call bg_bind_any_gened_exists,$(1),$(2)),$(call rmr,$(call bg_file_path_$(2),$(1),$(2),src) $(call bg_file_path_$(2),$(1),$(2),hdr) $(call bg_file_path_$(2),$(1),$(2),mak)),),),)

# All
################################################################################################################################

.PHONY: bgentalk
bgentalk: bindings_build
	@$(call echo,"")
	@$(call echo,  have a great day!)
	@$(call echo,         -bgen)

.PHONY: list_bindings_name
list_bindings_name:
	$(call bg_print_lib_name,1)
	$(call bg_print_lib_name,2)
	$(call bg_print_lib_name,3)
	$(call bg_print_lib_name,4)
	$(call bg_print_lib_name,5)
	$(call bg_print_lib_name,6)
	$(call bg_print_lib_name,7)
	$(call bg_print_lib_name,8)
	$(call bg_print_lib_name,9)

.PHONY: bindings
.NOTPARALLEL: bindings
bindings: bgentalk

.PHONY: bindingsgen
.NOTPARALLEL: bindingsgen
bindingsgen: bindings_gen

.PHONY: bindings_gen
.NOTPARALLEL: bindings_gen
bindings_gen: c_bindings_gen cpp_bindings_gen py_bindings_gen

.PHONY: bindings_build
.NOTPARALLEL: bindings_build
bindings_build: c_bindings_build cpp_bindings_build py_bindings_build

.PHONY: bindings_clean
.NOTPARALLEL: bindings_clean
bindings_clean: c_bindings_clean cpp_bindings_clean py_bindings_clean

.PHONY: bindings_cleantarget
.NOTPARALLEL: bindings_cleantarget
bindings_cleantarget: c_bindings_cleantarget cpp_bindings_cleantarget py_bindings_cleantarget

.PHONY: bindings_realclean
.NOTPARALLEL: bindings_realclean
bindings_realclean: c_bindings_realclean cpp_bindings_realclean py_bindings_realclean

.PHONY: bindings_wipeclean
.NOTPARALLEL: bindings_wipeclean
bindings_wipeclean: c_bindings_wipeclean cpp_bindings_wipeclean py_bindings_wipeclean

.PHONY: bindings_distclean
.NOTPARALLEL: bindings_distclean
bindings_distclean:
	$(call rmr,$(BINDINGS_DIR)/)

# C
################################################################################################################################

.PHONY: c_bindings
.NOTPARALLEL: c_bindings
c_bindings: c_bindings_build

.PHONY: c_bindings_gen
.NOTPARALLEL: c_bindings_gen
c_bindings_gen: $(BINARIES)
	@$(call echo,Generating C bindings...)
	$(call mkdir,$(BINDINGS_DIR))
	$(call mkdir,$(C_BINDINGS_DIR))
	$(if $(BGEN_SKIP),,$(BGEN) -dir $(C_BINDINGS_DIR) $(BGEN_ARGS) $(BGEN_QUIET) -c $(BGEN_LIBS))

.PHONY: c_bindings_build
.NOTPARALLEL: c_bindings_build
c_bindings_build: c_bindings_gen
	$(call bg_bind_____echo,1,c)
	$(call bg_bind_cd_build,1,c,all)
	$(call bg_bind_____echo,2,c)
	$(call bg_bind_cd_build,2,c,all)
	$(call bg_bind_____echo,3,c)
	$(call bg_bind_cd_build,3,c,all)
	$(call bg_bind_____echo,4,c)
	$(call bg_bind_cd_build,4,c,all)
	$(call bg_bind_____echo,5,c)
	$(call bg_bind_cd_build,5,c,all)
	$(call bg_bind_____echo,6,c)
	$(call bg_bind_cd_build,6,c,all)
	$(call bg_bind_____echo,7,c)
	$(call bg_bind_cd_build,7,c,all)
	$(call bg_bind_____echo,8,c)
	$(call bg_bind_cd_build,8,c,all)
	$(call bg_bind_____echo,9,c)
	$(call bg_bind_cd_build,9,c,all)

.PHONY: c_bindings_install
.NOTPARALLEL: c_bindings_install
c_bindings_install:
	install $(INSTALL_FLAGS) $(OBJLIBDIR)$(LP)ecere_c$(SOV) $(DESTLIBDIR)/$(LP)ecere_c$(SOV)
	install $(INSTALL_FLAGS) $(OBJLIBDIR)$(LP)eC_c$(SOV) $(DESTLIBDIR)/$(LP)eC_c$(SOV)
	install $(INSTALL_FLAGS) $(OBJLIBDIR)$(LP)EDA_c$(SOV) $(DESTLIBDIR)/$(LP)EDA_c$(SOV)
	ln -sf $(LP)ecere_c$(SOV) $(DESTLIBDIR)/$(LP)ecere_c$(SO).0
	ln -sf $(LP)eC_c$(SOV) $(DESTLIBDIR)/$(LP)eC_c$(SO).0
	ln -sf $(LP)EDA_c$(SOV) $(DESTLIBDIR)/ec/$(LP)EDA_c$(SO).0

.PHONY: c_bindings_clean
.NOTPARALLEL: c_bindings_clean
c_bindings_clean:
	$(call bg_bind_cd_build,1,c,clean)
	$(call bg_bind_cd_build,2,c,clean)
	$(call bg_bind_cd_build,3,c,clean)
	$(call bg_bind_cd_build,4,c,clean)
	$(call bg_bind_cd_build,5,c,clean)
	$(call bg_bind_cd_build,6,c,clean)
	$(call bg_bind_cd_build,7,c,clean)
	$(call bg_bind_cd_build,8,c,clean)
	$(call bg_bind_cd_build,9,c,clean)
	$(call rmr,$(_BGEN_C_OUTPUT))

.PHONY: c_bindings_cleantarget
.NOTPARALLEL: c_bindings_cleantarget
c_bindings_cleantarget:
	$(call bg_bind_cd_build,1,c,cleantarget)
	$(call bg_bind_cd_build,2,c,cleantarget)
	$(call bg_bind_cd_build,3,c,cleantarget)
	$(call bg_bind_cd_build,4,c,cleantarget)
	$(call bg_bind_cd_build,5,c,cleantarget)
	$(call bg_bind_cd_build,6,c,cleantarget)
	$(call bg_bind_cd_build,7,c,cleantarget)
	$(call bg_bind_cd_build,8,c,cleantarget)
	$(call bg_bind_cd_build,9,c,cleantarget)

.PHONY: c_bindings_realclean
.NOTPARALLEL: c_bindings_realclean
c_bindings_realclean:
	$(call rmr,$(C_BINDINGS_DIR)/obj)
	$(call bg_bind_rmr_gened,1,c)
	$(call bg_bind_rmr_gened,2,c)
	$(call bg_bind_rmr_gened,3,c)
	$(call bg_bind_rmr_gened,4,c)
	$(call bg_bind_rmr_gened,5,c)
	$(call bg_bind_rmr_gened,6,c)
	$(call bg_bind_rmr_gened,7,c)
	$(call bg_bind_rmr_gened,8,c)
	$(call bg_bind_rmr_gened,9,c)

.PHONY: c_bindings_wipeclean
c_bindings_wipeclean:
	$(call rmr,$(C_BINDINGS_DIR))
	$(call bg_bind_rmr_gened,1,c)
	$(call bg_bind_rmr_gened,2,c)
	$(call bg_bind_rmr_gened,3,c)
	$(call bg_bind_rmr_gened,4,c)
	$(call bg_bind_rmr_gened,5,c)
	$(call bg_bind_rmr_gened,6,c)
	$(call bg_bind_rmr_gened,7,c)
	$(call bg_bind_rmr_gened,8,c)
	$(call bg_bind_rmr_gened,9,c)

# C++
################################################################################################################################

.PHONY: cpp_bindings
.NOTPARALLEL: cpp_bindings
cpp_bindings: cpp_bindings_build

.PHONY: cpp_bindings_gen
.NOTPARALLEL: cpp_bindings_gen
cpp_bindings_gen: $(BINARIES)
	@$(call echo,Generating C++ bindings...)
	$(call mkdir,$(BINDINGS_DIR))
	$(call mkdir,$(CPP_BINDINGS_DIR))
	$(if $(BGEN_SKIP),,$(BGEN) -dir $(CPP_BINDINGS_DIR) $(BGEN_ARGS) $(BGEN_QUIET) -cpp -bypassmacros $(BGEN_LIBS))

.PHONY: cpp_bindings_build
.NOTPARALLEL: cpp_bindings_build
cpp_bindings_build: cpp_bindings_gen
	$(call bg_bind_____echo,1,cpp)
	$(call bg_bind_cd_build,1,cpp,all)
	$(call bg_bind_____echo,2,cpp)
	$(call bg_bind_cd_build,2,cpp,all)
	$(call bg_bind_____echo,3,cpp)
	$(call bg_bind_cd_build,3,cpp,all)
	$(call bg_bind_____echo,4,cpp)
	$(call bg_bind_cd_build,4,cpp,all)
	$(call bg_bind_____echo,5,cpp)
	$(call bg_bind_cd_build,5,cpp,all)
	$(call bg_bind_____echo,6,cpp)
	$(call bg_bind_cd_build,6,cpp,all)
	$(call bg_bind_____echo,7,cpp)
	$(call bg_bind_cd_build,7,cpp,all)
	$(call bg_bind_____echo,8,cpp)
	$(call bg_bind_cd_build,8,cpp,all)
	$(call bg_bind_____echo,9,cpp)
	$(call bg_bind_cd_build,9,cpp,all)

.PHONY: cpp_bindings_clean
.NOTPARALLEL: cpp_bindings_clean
cpp_bindings_clean:
	$(call bg_bind_cd_build,1,cpp,clean)
	$(call bg_bind_cd_build,2,cpp,clean)
	$(call bg_bind_cd_build,3,cpp,clean)
	$(call bg_bind_cd_build,4,cpp,clean)
	$(call bg_bind_cd_build,5,cpp,clean)
	$(call bg_bind_cd_build,6,cpp,clean)
	$(call bg_bind_cd_build,7,cpp,clean)
	$(call bg_bind_cd_build,8,cpp,clean)
	$(call bg_bind_cd_build,9,cpp,clean)
	$(call rmr,$(_BGEN_CPP_OUTPUT))

.PHONY: cpp_bindings_cleantarget
.NOTPARALLEL: cpp_bindings_cleantarget
cpp_bindings_cleantarget:
	$(call bg_bind_cd_build,1,cpp,cleantarget)
	$(call bg_bind_cd_build,2,cpp,cleantarget)
	$(call bg_bind_cd_build,3,cpp,cleantarget)
	$(call bg_bind_cd_build,4,cpp,cleantarget)
	$(call bg_bind_cd_build,5,cpp,cleantarget)
	$(call bg_bind_cd_build,6,cpp,cleantarget)
	$(call bg_bind_cd_build,7,cpp,cleantarget)
	$(call bg_bind_cd_build,8,cpp,cleantarget)
	$(call bg_bind_cd_build,9,cpp,cleantarget)

.PHONY: cpp_bindings_realclean
.NOTPARALLEL: cpp_bindings_realclean
cpp_bindings_realclean:
	$(call rmr,$(CPP_BINDINGS_DIR)/obj)
	$(call bg_bind_rmr_gened,1,cpp)
	$(call bg_bind_rmr_gened,2,cpp)
	$(call bg_bind_rmr_gened,3,cpp)
	$(call bg_bind_rmr_gened,4,cpp)
	$(call bg_bind_rmr_gened,5,cpp)
	$(call bg_bind_rmr_gened,6,cpp)
	$(call bg_bind_rmr_gened,7,cpp)
	$(call bg_bind_rmr_gened,8,cpp)
	$(call bg_bind_rmr_gened,9,cpp)

.PHONY: cpp_bindings_wipeclean
.NOTPARALLEL: cpp_bindings_wipeclean
cpp_bindings_wipeclean:
	$(call rmr,$(CPP_BINDINGS_DIR))
	$(call bg_bind_rmr_gened,1,cpp)
	$(call bg_bind_rmr_gened,2,cpp)
	$(call bg_bind_rmr_gened,3,cpp)
	$(call bg_bind_rmr_gened,4,cpp)
	$(call bg_bind_rmr_gened,5,cpp)
	$(call bg_bind_rmr_gened,6,cpp)
	$(call bg_bind_rmr_gened,7,cpp)
	$(call bg_bind_rmr_gened,8,cpp)
	$(call bg_bind_rmr_gened,9,cpp)

# Python
################################################################################################################################

.PHONY: py_bindings
.NOTPARALLEL: py_bindings
py_bindings: py_bindings_build

.PHONY: py_bindings_gen
.NOTPARALLEL: py_bindings_gen
py_bindings_gen: $(BINARIES)
	@$(call echo,Generating Python bindings...)
	$(call mkdir,$(BINDINGS_DIR))
	$(call mkdir,$(PY_BINDINGS_DIR))
	$(if $(BGEN_SKIP),,$(BGEN) -dir $(PY_BINDINGS_DIR) $(BGEN_ARGS) $(BGEN_QUIET) -py $(BGEN_LIBS))

OBJLIBDIR := $(OBJDIR)$(PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/lib/

.PHONY: py_bindings_build
.NOTPARALLEL: py_bindings_build
py_bindings_build: c_bindings_build py_bindings_gen
	$(if $(wildcard $(ADDITIONAL_BGEN_LIBS)),$(call cp,$(wildcard $(ADDITIONAL_BGEN_LIBS)),$(OBJLIBDIR)),)
ifdef PY_NA
	$(error Using $(PYTHON) failed. Please set PYTHON to point to a valid python program name or location)
else
	$(call bg_bind_____echo,1,py)
	$(call bg_bind_cd_build,1,py)
	$(call bg_bind_____echo,2,py)
	$(call bg_bind_cd_build,2,py)
	$(call bg_bind_____echo,3,py)
	$(call bg_bind_cd_build,3,py)
	$(call bg_bind_____echo,4,py)
	$(call bg_bind_cd_build,4,py)
	$(call bg_bind_____echo,5,py)
	$(call bg_bind_cd_build,5,py)
	$(call bg_bind_____echo,6,py)
	$(call bg_bind_cd_build,6,py)
	$(call bg_bind_____echo,7,py)
	$(call bg_bind_cd_build,7,py)
	$(call bg_bind_____echo,8,py)
	$(call bg_bind_cd_build,8,py)
	$(call bg_bind_____echo,9,py)
	$(call bg_bind_cd_build,9,py)
endif

.PHONY: py_bindings_clean
.NOTPARALLEL: py_bindings_clean
py_bindings_clean:
	$(call rmr,$(_BGEN_PY_OUTPUT))

.PHONY: py_bindings_cleantarget
.NOTPARALLEL: py_bindings_cleantarget
py_bindings_cleantarget:
#	@$(call echo,todo: py_bindings_cleantarget)

.PHONY: py_bindings_realclean
.NOTPARALLEL: py_bindings_realclean
py_bindings_realclean:
	$(call rmr,$(PY_BINDINGS_DIR)/obj)
	$(call rmr,$(PY_BINDINGS_DIR)/__pycache__)
#	@$(call echo,todo: py_bindings_realclean -- _py*.c _py*.pyd)

.PHONY: py_bindings_wipeclean
.NOTPARALLEL: py_bindings_wipeclean
py_bindings_wipeclean:
	$(call rmr,$(PY_BINDINGS_DIR))
