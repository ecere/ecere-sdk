ifneq ($(V),1)
.SILENT:
endif

ifndef CROSSPLATFORM_MK
include crossplatform.mk
include default.cf
endif

renameEcereCOM = $(subst ecereCOM,eC,$(1))

ifndef BINDINGS_DIR
BINDINGS_DIR := bindings
endif
ifndef C_BINDINGS_DIR
C_BINDINGS_DIR := $(BINDINGS_DIR)/c
endif
ifndef CXX_BINDINGS_DIR
CXX_BINDINGS_DIR := $(BINDINGS_DIR)/cpp # todo: rename this to cxx soon
endif
ifndef PY_BINDINGS_DIR
PY_BINDINGS_DIR := $(BINDINGS_DIR)/py
endif

ifndef BGEN_LIBS
BGEN_LIBS := ecereCOM ecere EDA
endif
BGEN_ARGS := -fren Log=__e_log,Logf=__e_logf,Sleep=__sleep,Print=printx
BGEN_QUIET := $(if $(SILENT_IS_ON),-quiet,)

# note: this is needed because we chdir without the use of a makefile specifying a different _CF_DIR
#       and cannot call bgen with the usual relative path specified by $(BGEN)
#          i.e.: 	+cd $(C_BINDINGS_DIR) && $(BGEN) $(BGEN_ARGS) $(BGEN_QUIET) -c $(BGEN_LIBS)
#ROOT_ABSPATH = $(dir $(realpath $(firstword $(MAKEFILE_LIST))))
#BGEN := $(call sys_path,$(ROOT_ABSPATH)$(_CF_DIR)obj/$(HOST_PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/bin/bgen$(HOST_E))

ifdef WINDOWS_HOST
PYTHON := python
else
PYTHON := python3
endif
PY_VER := 3

BG_LANG_c := C
BG_LANG_py := Python $(PY_VER)

get_binding_name = $(basename $(notdir $(1)))

bg_bld_file_c = $(C_BINDINGS_DIR)/$(call get_binding_name,$(1)).Makefile
bg_bld_file_cxx = $(CXX_BINDINGS_DIR)/$(call get_binding_name,$(1)).Makefile
bg_bld_file_py = $(PY_BINDINGS_DIR)/build_$(call get_binding_name,$(1)).py

bg_bld_cmd_c = $(_MAKE) -f $(call get_binding_name,$(1)).Makefile $(2)
bg_bld_cmd_cxx = $(_MAKE) -f $(call get_binding_name,$(1)).Makefile $(2)
bg_bld_cmd_py = $(PYTHON) build_$(call get_binding_name,$(1)).py

bg_bind_____echo = $(call bg_bind_echo_,$(call renameEcereCOM,$(word $(1),$(BGEN_LIBS))),$(2))
bg_bind_echo_ = $(if $(1),$(if $(wildcard $(call bg_bld_file_$(2),$(1))),@$(call echo,Building $(BG_LANG_$(2)) bindings for $(1)...),),)

bg_bind_cxx_to_cpp = $(subst cxx,cpp,$(1)) # todo: get rid of this when we do the $(CXX_BINDINGS_DIR) rename
bg_bind_cd_build = $(call bg_bind_cd_build_,$(call renameEcereCOM,$(word $(1),$(BGEN_LIBS))),$(2),$(3))
bg_bind_cd_build_ = $(if $(1),$(if $(wildcard $(call bg_bld_file_$(2),$(1))),+cd $(BINDINGS_DIR)/$(call bg_bind_cxx_to_cpp,$(2)) && $(call bg_bld_cmd_$(2),$(1),$(3)),$(call echo,Error: $(call bg_bld_file_$(2),$(1)) not found!)),)
# todo: make this an actual error?

# All

.PHONY: bgentalk
bgentalk: bindings_build
	@$(call echo,  have a great day!)
	@$(call echo,         -bgen)

.PHONY: bindings
.NOTPARALLEL: bindings
bindings: bgentalk;

.PHONY: bindingsgen
.NOTPARALLEL: bindingsgen
bindingsgen: bindings_gen

.PHONY: bindings_gen
.NOTPARALLEL: bindings_gen
bindings_gen: c_bindings_gen cxx_bindings_gen py_bindings_gen;

.PHONY: bindings_build
.NOTPARALLEL: bindings_build
bindings_build: c_bindings_build cxx_bindings_build py_bindings_build;

.PHONY: bindings_clean
.NOTPARALLEL: bindings_clean
bindings_clean: c_bindings_clean cxx_bindings_clean py_bindings_clean;

.PHONY: bindings_cleantarget
.NOTPARALLEL: bindings_cleantarget
bindings_cleantarget: c_bindings_cleantarget cxx_bindings_cleantarget py_bindings_cleantarget;

.PHONY: bindings_realclean
.NOTPARALLEL: bindings_realclean
bindings_realclean: c_bindings_realclean cxx_bindings_realclean py_bindings_realclean;

.PHONY: bindings_wipeclean
.NOTPARALLEL: bindings_wipeclean
bindings_wipeclean: c_bindings_wipeclean cxx_bindings_wipeclean py_bindings_wipeclean;

.PHONY: bindings_distclean
.NOTPARALLEL: bindings_distclean
bindings_distclean:
	$(call rmr,$(BINDINGS_DIR)/)

# C

.PHONY: c_bindings
.NOTPARALLEL: c_bindings
c_bindings: c_bindings_build

.PHONY: c_bindings_gen
.NOTPARALLEL: c_bindings_gen
c_bindings_gen: $(BINARIES)
	@$(call echo,Generating C bindings...)
	$(call mkdir,$(BINDINGS_DIR))
	$(call mkdir,$(C_BINDINGS_DIR))
	$(BGEN) -dir $(C_BINDINGS_DIR) $(BGEN_ARGS) $(BGEN_QUIET) -c $(BGEN_LIBS)

.PHONY: c_bindings_build
.NOTPARALLEL: c_bindings_build
c_bindings_build: c_bindings_gen
	$(call bg_bind_____echo,1,c)
	$(call bg_bind_cd_build,1,c,all)
	$(call bg_bind_____echo,2,c)
	$(call bg_bind_cd_build,2,c,all)
	$(call bg_bind_____echo,3,c)
	$(call bg_bind_cd_build,3,c,all)
	$(call bg_bind_____echo,4,c)
	$(call bg_bind_cd_build,4,c,all)
	$(call bg_bind_____echo,5,c)
	$(call bg_bind_cd_build,5,c,all)
	$(call bg_bind_____echo,6,c)
	$(call bg_bind_cd_build,6,c,all)
	$(call bg_bind_____echo,7,c)
	$(call bg_bind_cd_build,7,c,all)
	$(call bg_bind_____echo,8,c)
	$(call bg_bind_cd_build,8,c,all)
	$(call bg_bind_____echo,9,c)
	$(call bg_bind_cd_build,9,c,all)

.PHONY: c_bindings_clean
.NOTPARALLEL: c_bindings_clean
c_bindings_clean:
# todo: missing bgen output cleaning
#_BGEN_OUTS = $(call renameEcereCOM,$(BGEN_LIBS))
#_BGEN_OUTPUT := $(addsuffix .h,$(_BGEN_OUTS)) $(addsuffix .c,$(_BGEN_OUTS))
	$(call bg_bind_cd_build,1,c,clean)
	$(call bg_bind_cd_build,2,c,clean)
	$(call bg_bind_cd_build,3,c,clean)
	$(call bg_bind_cd_build,4,c,clean)
	$(call bg_bind_cd_build,5,c,clean)
	$(call bg_bind_cd_build,6,c,clean)
	$(call bg_bind_cd_build,7,c,clean)
	$(call bg_bind_cd_build,8,c,clean)
	$(call bg_bind_cd_build,9,c,clean)

.PHONY: c_bindings_cleantarget
.NOTPARALLEL: c_bindings_cleantarget
c_bindings_cleantarget:
	$(call bg_bind_cd_build,1,c,cleantarget)
	$(call bg_bind_cd_build,2,c,cleantarget)
	$(call bg_bind_cd_build,3,c,cleantarget)
	$(call bg_bind_cd_build,4,c,cleantarget)
	$(call bg_bind_cd_build,5,c,cleantarget)
	$(call bg_bind_cd_build,6,c,cleantarget)
	$(call bg_bind_cd_build,7,c,cleantarget)
	$(call bg_bind_cd_build,8,c,cleantarget)
	$(call bg_bind_cd_build,9,c,cleantarget)

.PHONY: c_bindings_realclean
.NOTPARALLEL: c_bindings_realclean
c_bindings_realclean:
	$(call rmr,$(C_BINDINGS_DIR)/obj)

.PHONY: c_bindings_wipeclean
c_bindings_wipeclean:
	$(call rmr,$(C_BINDINGS_DIR))

# C++

.PHONY: cxx_bindings
.NOTPARALLEL: cxx_bindings
cxx_bindings: cxx_bindings_build

.PHONY: cxx_bindings_gen
.NOTPARALLEL: cxx_bindings_gen
cxx_bindings_gen: $(BINARIES)
	@$(call echo,Generating C++ bindings...)
	$(call mkdir,$(BINDINGS_DIR))
	$(call mkdir,$(CXX_BINDINGS_DIR))
	$(BGEN) -dir $(CXX_BINDINGS_DIR) $(BGEN_ARGS) $(BGEN_QUIET) -cxx $(BGEN_LIBS)

.PHONY: cxx_bindings_build
.NOTPARALLEL: cxx_bindings_build
cxx_bindings_build: cxx_bindings_gen
#	$(call bg_bind_____echo,1,cxx)
#	$(call bg_bind_cd_build,1,cxx,all)
#	$(call bg_bind_____echo,2,cxx)
#	$(call bg_bind_cd_build,2,cxx,all)
#	$(call bg_bind_____echo,3,cxx)
#	$(call bg_bind_cd_build,3,cxx,all)
#	$(call bg_bind_____echo,4,cxx)
#	$(call bg_bind_cd_build,4,cxx,all)
#	$(call bg_bind_____echo,5,cxx)
#	$(call bg_bind_cd_build,5,cxx,all)
#	$(call bg_bind_____echo,6,cxx)
#	$(call bg_bind_cd_build,6,cxx,all)
#	$(call bg_bind_____echo,7,cxx)
#	$(call bg_bind_cd_build,7,cxx,all)
#	$(call bg_bind_____echo,8,cxx)
#	$(call bg_bind_cd_build,8,cxx,all)
#	$(call bg_bind_____echo,9,cxx)
#	$(call bg_bind_cd_build,9,cxx,all)

.PHONY: cxx_bindings_clean
.NOTPARALLEL: cxx_bindings_clean
cxx_bindings_clean:
# todo: missing bgen output cleaning
#	$(call bg_bind_cd_build,1,cxx,clean)
#	$(call bg_bind_cd_build,2,cxx,clean)
#	$(call bg_bind_cd_build,3,cxx,clean)
#	$(call bg_bind_cd_build,4,cxx,clean)
#	$(call bg_bind_cd_build,5,cxx,clean)
#	$(call bg_bind_cd_build,6,cxx,clean)
#	$(call bg_bind_cd_build,7,cxx,clean)
#	$(call bg_bind_cd_build,8,cxx,clean)
#	$(call bg_bind_cd_build,9,cxx,clean)

.PHONY: cxx_bindings_cleantarget
.NOTPARALLEL: cxx_bindings_cleantarget
cxx_bindings_cleantarget:
# cxx has not makefile for building lib.
#	$(call bg_bind_cd_build,1,cxx,cleantarget)
#	$(call bg_bind_cd_build,2,cxx,cleantarget)
#	$(call bg_bind_cd_build,3,cxx,cleantarget)
#	$(call bg_bind_cd_build,4,cxx,cleantarget)
#	$(call bg_bind_cd_build,5,cxx,cleantarget)
#	$(call bg_bind_cd_build,6,cxx,cleantarget)
#	$(call bg_bind_cd_build,7,cxx,cleantarget)
#	$(call bg_bind_cd_build,8,cxx,cleantarget)
#	$(call bg_bind_cd_build,9,cxx,cleantarget)

.PHONY: cxx_bindings_realclean
.NOTPARALLEL: cxx_bindings_realclean
cxx_bindings_realclean:
	$(call rmr,$(CXX_BINDINGS_DIR)/obj)

.PHONY: cxx_bindings_wipeclean
.NOTPARALLEL: cxx_bindings_wipeclean
cxx_bindings_wipeclean:
	$(call rmr,$(CXX_BINDINGS_DIR))

# Python

.PHONY: py_bindings
.NOTPARALLEL: py_bindings
py_bindings: py_bindings_build;

.PHONY: py_bindings_gen
.NOTPARALLEL: py_bindings_gen
py_bindings_gen: $(BINARIES)
	@$(call echo,Generating Python bindings...)
	$(call mkdir,$(BINDINGS_DIR))
	$(call mkdir,$(PY_BINDINGS_DIR))
	$(BGEN) -dir $(PY_BINDINGS_DIR) $(BGEN_ARGS) $(BGEN_QUIET) -c -header-only -py $(BGEN_LIBS)

.PHONY: py_bindings_build
.NOTPARALLEL: py_bindings_build
py_bindings_build: c_bindings_build py_bindings_gen
ifdef PY_NA
	$(error Using $(PYTHON) failed. Please set PYTHON to point to a valid python program name or location)
else
	$(call bg_bind_____echo,1,py)
	$(call bg_bind_cd_build,1,py)
	$(call bg_bind_____echo,2,py)
	$(call bg_bind_cd_build,2,py)
	$(call bg_bind_____echo,3,py)
	$(call bg_bind_cd_build,3,py)
	$(call bg_bind_____echo,4,py)
	$(call bg_bind_cd_build,4,py)
	$(call bg_bind_____echo,5,py)
	$(call bg_bind_cd_build,5,py)
	$(call bg_bind_____echo,6,py)
	$(call bg_bind_cd_build,6,py)
	$(call bg_bind_____echo,7,py)
	$(call bg_bind_cd_build,7,py)
	$(call bg_bind_____echo,8,py)
	$(call bg_bind_cd_build,8,py)
	$(call bg_bind_____echo,9,py)
	$(call bg_bind_cd_build,9,py)
endif

.PHONY: py_bindings_clean
.NOTPARALLEL: py_bindings_clean
py_bindings_clean:
# todo: missing bgen output cleaning
#_BGEN_OUTS = $(call renameEcereCOM,$(BGEN_LIBS))
#_BGEN_OUTPUT := $(addsuffix .py,$(addprefix _build_,$(_BGEN_OUTS))) $(addsuffix .h,$(addprefix cffi-,$(_BGEN_OUTS))) $(addsuffix .py,$(addprefix py,$(_BGEN_OUTS)))
#	@$(call echo,todo: py_bindings_clean)

.PHONY: py_bindings_cleantarget
.NOTPARALLEL: py_bindings_cleantarget
py_bindings_cleantarget:
#	@$(call echo,todo: py_bindings_cleantarget)

.PHONY: py_bindings_realclean
.NOTPARALLEL: py_bindings_realclean
py_bindings_realclean:
	$(call rmr,$(PY_BINDINGS_DIR)/obj)
	$(call rmr,$(PY_BINDINGS_DIR)/__pycache__)
#	@$(call echo,todo: py_bindings_realclean -- _py*.c _py*.pyd)

.PHONY: py_bindings_wipeclean
.NOTPARALLEL: py_bindings_wipeclean
py_bindings_wipeclean:
	$(call rmr,$(PY_BINDINGS_DIR))
