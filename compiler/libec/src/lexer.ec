#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 198
#define YY_END_OF_BUFFER 199
static yyconst short int yy_accept[837] =
    {   0,
      132,  132,  199,  197,  195,  194,  193,  196,  180,  197,
        1,  192,  186,  179,  197,  174,  175,  184,  183,  171,
      182,  178,  185,  138,  138,  172,  168,  187,  173,  188,
      191,  132,  132,  132,  176,  177,  189,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  169,  190,  170,  181,  167,
        0,  144,    0,  153,  170,  162,  154,    0,    0,  151,
      159,  149,  160,  150,  161,    0,  141,    2,    3,  152,
      142,  137,    0,  138,    0,  138,  132,  177,  169,  176,
      158,  164,  166,  165,  157,    0,  132,    0,  132,    0,

        0,  155,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,   11,  132,  132,  132,  132,
      132,  132,  132,  132,   19,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  156,  163,
      139,  146,    0,  141,  141,    0,  142,  137,    0,  140,
        0,  133,  132,  148,  147,  132,  132,    0,  145,    0,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  112,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,   17,   49,  132,  132,
      132,  132,   20,  132,  132,  132,   55,  132,  132,  132,
      132,  132,  132,  132,   48,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,    0,  141,  143,    0,  141,    0,
      142,  140,  135,  136,  133,    0,   70,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
        4,  132,    6,    7,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,   13,   14,  132,
      132,  132,   18,  132,  132,  132,  132,  132,  132,   24,
      132,   56,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
       23,  132,  132,  132,   42,  132,  132,  132,  143,    0,
      141,  135,  135,    0,  135,  135,  136,    0,    0,  134,
      132,  132,   71,  132,  132,  132,  132,  132,  132,  132,
      132,  113,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,    5,   51,    8,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
       16,  132,  132,  132,   22,   62,   50,  132,  132,  132,
      132,  132,   57,  132,  132,   27,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,   40,  132,  132,  132,
      115,   46,    0,  135,  135,  135,    0,    0,  136,  134,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,   60,   54,  132,  132,   12,   15,  132,
       59,  108,   90,  132,  132,  132,  104,  132,   58,  132,
       26,   28,   31,   35,  132,  132,   37,  132,   38,  132,
      132,  132,  132,  132,  132,  132,    0,  135,  132,   79,
      132,  132,  132,  132,  132,  132,  132,  132,  111,  132,
      132,   96,  102,  132,  132,  132,  132,  132,  132,   21,
       61,   77,   78,  132,  132,  132,  132,  132,  132,  132,
      132,   88,  132,  132,  132,  132,  132,  132,  132,  132,
      129,  130,  128,   10,  132,  132,  132,  132,  105,  132,

      132,  132,  100,  132,  132,  132,  132,   39,  132,   53,
      132,  132,   82,   72,  132,   67,  132,   76,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,   89,   63,
      132,   29,  132,   36,  114,  132,  132,  132,   99,  132,
      132,  132,  132,  132,  132,    9,  132,  132,  132,  132,
      132,   47,   25,   74,  132,  126,  132,  132,   41,   43,
      132,   65,  132,   95,   75,  132,   33,  132,  132,  132,
      132,  132,   66,  132,  132,  132,  132,   97,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,   93,
       94,  132,  127,  132,  132,   52,  132,  118,   73,  132,

      132,  132,  132,  132,  132,   64,  132,   87,  101,   30,
      132,  132,   45,  132,  107,  124,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,   32,   86,  132,
      132,    0,  132,  132,  132,   98,   81,  132,  110,  132,
      132,  121,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,    0,    0,   91,  132,  132,  103,   44,
      132,  132,  132,  132,  132,  117,  132,  116,  106,  132,
       85,  132,  132,  132,    0,    0,    0,  109,   80,  132,
      132,  132,  132,  131,  132,   83,  132,  132,  132,  132,
        0,    0,    0,    0,   92,  132,  119,  132,  125,  132,

      132,  132,  132,  132,    0,  132,  132,  132,  132,  132,
       69,  132,  132,  132,  132,  132,  132,   68,  132,  132,
      123,  132,   34,  132,  120,  132,  132,  132,  132,  132,
      132,  132,  122,  132,   84,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   27,   29,   27,   30,   31,   32,
       33,   34,   35,    1,   36,   37,   38,   39,   40,   41,
       42,   42,   43,   44,   42,   45,   42,   46,   42,   47,
       42,   42,   48,   42,   49,   42,   42,   50,   42,   42,
       51,   52,   53,   54,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   42,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[85] =
    {   0,
        1,    2,    2,    1,    2,    2,    1,    3,    1,    1,
        1,    4,    5,    2,    6,    1,    1,    1,    1,    7,
        1,    8,    8,    8,    8,    8,    8,    8,    8,    4,
        1,    1,    1,    1,    1,    9,    9,    9,    9,    9,
        9,   10,   11,   11,   11,   10,   11,   10,   10,   10,
        1,    1,    1,    1,   10,    9,    9,    9,    9,    9,
        9,   10,   10,   11,   11,   10,   11,   10,   10,   10,
       11,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1,    1,    1,    1
    } ;

static yyconst short int yy_base[848] =
    {   0,
        0,    0,  308, 3227, 3227, 3227, 3227, 3227,  253,   77,
     3227, 3227,   53,   76,  223, 3227, 3227,  231,   72, 3227,
       73,   71,   87,  110,  169,   80, 3227,   91,  218,   78,
     3227,   89,   92,  133, 3227, 3227,  178,  233,  131,  101,
      152,  160,  154,  135,  171,  216,  137,  212,  223,  213,
      227,  236,  248,  250,  253, 3227,   94, 3227, 3227, 3227,
      117, 3227,  178, 3227, 3227, 3227, 3227,  104,  113, 3227,
     3227, 3227, 3227, 3227, 3227,  151,  299, 3227, 3227, 3227,
      345,  393,  328,  332,  137,    0,    0, 3227, 3227, 3227,
      115, 3227, 3227, 3227,  111,  112,  128,   98,  156,  195,

       66, 3227,  372,  226,  237,  225,  270,  353,  306,  457,
      301,  318,  370,  299,  381,  396,  402,  413,  415,  417,
      422,  418,  429,  444,  442,  228,  449,  451,  453,  452,
      455,  464,  465,  466,  307,  472,  477,  468,  476,  489,
      508,  522,  525,  534,  530,  535,  536,  541,  537,  538,
      542,  544,  549,  546,  550,  557,  551,  563, 3227, 3227,
     3227, 3227,  609,  598,  646,  627,  635,  660,  692,  714,
        0,  702,  547, 3227, 3227,    0,  600,  202, 3227,  112,
      617,  587,  628,  665,  682,  558,  696,  718,  720,  732,
      741,  742,  671,  744,  758,  579,  571,  770,  768,  772,

      774,  777,  778,  779,  780,  781,  652,  783,  784,  785,
      791,  807,  808,  811,  814,  819,  836,  838,  843,  844,
      842,  845,  846,  847,  849,  857,  853,  859,  881,  885,
      886,  888,  894,  900,  905,  908,  909,  898,  911,  913,
      914,  915,  917,  920,  924,  934,  936,  941,  947,  949,
      951,  953,  957,  958,  960,  964,  972,  973,  974,  980,
      981,  986,  987,  984, 1033, 1041, 1049, 1070, 1066, 1090,
     1112, 1081, 1117, 1122, 1147, 1178,  988, 1017, 1022, 1014,
     1138,  997, 1018, 1019, 1091, 1168, 1142, 1187, 1117, 1196,
     1198, 1201, 1203, 1206, 1207, 1208, 1011, 1209, 1212, 1213,

     1211, 1215, 1217, 1220, 1236, 1228, 1222, 1237, 1241, 1245,
     1007, 1247, 1140, 1257, 1267, 1268, 1273, 1276, 1278, 1282,
     1288, 1281, 1284, 1290, 1292, 1293, 1295, 1297, 1298, 1304,
     1305, 1309, 1314, 1317, 1318, 1319, 1339, 1320, 1324, 1343,
     1345, 1347, 1354, 1355, 1356, 1360, 1362, 1369, 1375, 1379,
     1367, 1381, 1382, 1384, 1383, 1391, 1389, 1392, 1394, 1395,
     1396, 1404, 1405, 1418, 1425, 1431, 1432, 1446, 1455, 1463,
     1485,    0, 1455, 1514, 1510,    0, 1515, 1566, 1539, 1574,
     1433, 1505, 1445, 1575, 1574, 1594, 1595, 1597, 1491, 1596,
     1599, 1515, 1600, 1598, 1601, 1602, 1610, 1604, 1624, 1621,

     1625, 1662, 1638, 1632, 1661, 1637, 1664, 1666, 1669, 1671,
     1670, 1672, 1681, 1674, 1485, 1685, 1686, 1691, 1693, 1695,
     1698, 1702, 1705, 1708, 1717, 1721, 1722, 1731, 1733, 1734,
     1736, 1741, 1743, 1745, 1744, 1753, 1755, 1758, 1764, 1767,
     1766, 1768, 1777, 1770, 1783, 1789, 1791, 1796, 1797, 1798,
     1800, 1802, 1805, 1806, 1810, 1811, 1813, 1819, 1833, 1821,
     1834, 1832, 1869, 1877,    0, 1866, 1926, 1934, 1942, 1931,
     1842, 1856, 1848, 1905, 1904, 1917, 1907, 1967, 1969, 1978,
     1981, 1982, 1988, 1989, 1990, 1992, 1998, 2001, 1993, 2002,
     2005, 2009, 2004, 2013, 2014, 2029, 2030, 2033, 2036, 2038,

     2039, 2040, 2042, 2046, 2043, 2065, 2066, 2049, 2068, 2069,
     2070, 2072, 2075, 2074, 2079, 2081, 2082, 2101, 2104, 2106,
     2108, 2109, 2110, 2114, 2117, 2130, 2131, 2133, 2134, 2138,
     2141, 2142, 2143, 2144, 2145, 2146, 2153, 2154, 2155, 2157,
     2167, 2169, 2176, 2177, 2178, 2186, 2224, 2232, 2170, 2179,
     2189, 2193, 2210, 2198, 2199, 2202, 2250, 2212, 2203, 2251,
     2256, 2258, 2260, 2262, 2271, 2272, 2273, 2279, 2277, 2282,
     2286, 2288, 2292, 2298, 2299, 2301, 2302, 2305, 2311, 2312,
     2313, 2315, 2318, 2322, 2324, 2326, 2334, 2335, 2337, 2339,
     2341, 2345, 2348, 2351, 2358, 2362, 2371, 2375, 2379, 2381,

     2382, 2383, 2384, 2386, 2388, 2390, 2391, 2394, 2396, 2398,
     2405, 2407, 2410, 2411, 2413, 2415, 2419, 2420, 2426, 2434,
     2440, 2439, 2441, 2446, 2447, 2450, 2454, 2455, 2456, 2460,
     2463, 2467, 2469, 2471, 2475, 2476, 2480, 2490, 2496, 2497,
     2500, 2505, 2501, 2507, 2511, 2513, 2516, 2520, 2521, 2522,
     2526, 2527, 2528, 2537, 2542, 2547, 2553, 2557, 2558, 2561,
     2563, 2568, 2572, 2577, 2578, 2580, 2584, 2585, 2587, 2588,
     2591, 2599, 2589, 2597, 2594, 2600, 2601, 2608, 2613, 2620,
     2622, 2624, 2625, 2628, 2632, 2635, 2645, 2636, 2648, 2655,
     2656, 2657, 2658, 2664, 2659, 2660, 2667, 2670, 2671, 2680,

     2681, 2690, 2691, 2694, 2700, 2701, 2702, 2703, 2704, 2707,
     2713, 2714, 2716, 2717, 2726, 2727, 2728, 2730, 2740, 2733,
     2750, 2752, 2753, 2763, 2764, 2766, 2767, 2765, 2774, 2775,
     2772,  137, 2776, 2777, 2779, 2778, 2786, 2788, 2800, 2802,
     2805, 2808, 2809, 2810, 2825, 2814, 2829, 2830, 2833, 2836,
     2835, 2837, 2838,  164,  172, 3227, 2840, 2841, 2842, 2845,
     2846, 2849, 2861, 2866, 2869, 2872, 2874, 2876, 2885, 2888,
     2893, 2898, 2899, 2900,  242,  389,  244, 2901, 2902, 2909,
     2907, 2912, 2913, 2914, 2915, 2921, 2923, 2924, 2929, 2935,
      253, 2968,   87, 2983, 3227, 2936, 2938, 2945, 2948, 2957,

     2970, 2978, 2979, 2981, 3011, 2985, 2991, 2990, 2993, 2994,
     2992, 2998, 3000, 3013, 3017, 3019, 3020, 3021, 3026, 3033,
     3028, 3036, 3048, 3049, 3055, 3056, 3057, 3059, 3061, 3063,
     3064, 3068, 3070, 3076, 3078, 3227, 3143, 3154, 3162, 3167,
     3168, 3179, 3183, 3185, 3195, 3204, 3215
    } ;

static yyconst short int yy_def[848] =
    {   0,
      836,    1,  836,  836,  836,  836,  836,  836,  836,  837,
      836,  836,  836,  836,  838,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  839,  839,  839,  836,  836,  836,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  836,  836,  836,  836,  836,
      837,  836,  837,  836,  836,  836,  836,  838,  838,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  840,   25,  841,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  839,  836,  839,  842,

      838,  836,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      843,  840,  839,  836,  836,  841,  839,  842,  836,  842,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  836,  836,  836,  836,  836,  836,
      836,  836,  843,  844,  836,  836,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  836,  836,
      836,  273,  836,  836,  844,  375,  836,  836,  836,  836,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  836,  836,  375,  836,  836,  836,  836,  836,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  836,  836,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  845,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  845,  846,  836,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  847,  836,  846,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      847,  836,  847,  836,  836,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  836,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,    0,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836
    } ;

static yyconst short int yy_nxt[3312] =
    {   0,
        4,    5,    6,    7,    8,    7,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   25,   25,   25,   25,   25,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   32,   32,   32,
       32,   32,   32,   32,   34,   32,   32,   32,   32,   32,
       35,    4,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   32,   46,   32,   32,   47,   32,   48,   32,
       49,   50,   51,   52,   53,   54,   55,   32,   32,   32,
       56,   57,   58,   59,   62,   64,   65,   66,   71,  836,
       76,   73,   77,   77,   77,   77,   77,   77,   77,   77,

       96,   89,   78,   96,   72,   74,   75,   79,   67,   87,
       94,   95,   96,   88,  836,  836,  161,   69,   98,   80,
       90,   98,   91,   92,   62,   68,  159,  176,   63,   81,
       98,   82,   82,   82,   82,   82,   82,   82,   82,   96,
      100,   98,   96,  175,   96,  101,   96,  174,   96,   83,
      755,  756,   84,   84,   84,   69,  171,   98,   84,   85,
       98,   99,   98,   96,   98,   96,   98,   96,   63,   83,
      162,   96,  117,   84,   84,  160,   84,  755,  756,  775,
      836,   98,   96,   98,   84,   98,  776,   85,   81,   98,
       86,   86,   86,   86,   86,   86,   86,   86,  130,  114,

       98,  131,  179,  115,  132,  116,  139,  118,   83,  179,
      102,   84,   84,   84,  119,  122,  123,   84,  120,  124,
      127,  121,  128,   96,   96,  177,  125,   96,   83,  126,
      133,  129,   84,   84,   96,   84,   96,   96,   96,   96,
      134,   98,   98,   84,   96,   98,  180,   96,   96,  792,
       93,  836,   98,  180,   98,   98,   98,   98,  776,   96,
      792,   96,   98,   70,   96,   98,   98,  140,  103,  104,
      105,  141,  144,  106,   69,  107,  135,   98,  108,   98,
      109,   96,   98,  136,  137,   60,  145,  110,  138,  146,
      147,  185,  111,  793,  142,  183,  112,  143,  151,   98,

      148,  149,  221,  150,  793,  113,  184,  836,  157,  836,
       96,  153,   96,  155,  152,  158,  154,   96,   96,  156,
       77,   77,   77,   77,   77,   77,   77,   77,   98,   96,
       98,  836,  836,  836,  836,   98,   98,  186,  163,  164,
      836,  164,  164,  164,  169,  836,  169,   98,  836,  170,
      170,  170,  170,  170,  170,  170,  170,  836,  163,  164,
      836,  836,  164,  164,   96,  164,  165,  165,  165,  165,
      165,  165,  165,  165,   84,   84,   84,  206,  203,  189,
       84,   96,   98,   96,  166,  167,  204,  167,  167,  167,
      794,  794,   96,  794,  794,   84,   84,  836,   84,   98,

      836,   98,  836,  795,  166,  167,   84,   96,  167,  167,
       98,  167,   81,   96,   82,   82,   82,   82,   82,   82,
       82,   82,  187,  836,   96,   98,   96,  188,   96,   96,
      836,   98,   83,   96,  836,  168,  168,  168,  181,  836,
       96,  168,   98,  205,   98,  182,   98,   98,  207,  836,
      836,   98,   83,   96,  836,   96,  168,  168,   98,  168,
       96,  209,   96,   96,   96,  836,   96,  168,   96,  208,
      211,   98,  212,   98,  836,   96,   96,   96,   98,   96,
       98,   98,   98,   96,   98,  210,   98,   96,   96,  215,
      213,  214,  216,   98,   98,   98,  836,   98,  836,  836,

       96,   98,  217,  836,  218,   98,   98,  836,  220,  836,
      219,  836,  190,  191,  192,  193,  194,  195,   98,   96,
      196,  222,  836,  225,  226,  223,  224,  197,  198,  199,
      200,  201,  202,   96,  231,  227,   96,   98,  228,  229,
      234,   96,  230,  232,  235,   96,   96,   96,   96,   96,
      233,   98,   96,   96,   98,   96,  236,   96,   96,   98,
       96,   96,   96,   98,   98,   98,   98,   98,   96,   96,
       98,   98,  836,   98,   96,   98,   98,  836,   98,   98,
       98,  240,   96,  836,  237,  238,   98,   98,  836,  836,
       96,  239,   98,  253,  836,  241,  249,  247,   96,  250,

       98,  254,  242,  245,  246,  255,  243,  244,   98,  258,
      251,   96,  252,  283,  256,  248,   98,  257,  259,  836,
      261,  260,  836,  262,  263,  265,  264,  265,   96,   98,
      266,  266,  266,  266,  266,  266,  266,  266,  164,   96,
      164,  164,  164,  270,  299,  270,   98,  298,  271,  271,
      271,  271,  271,  271,  271,  271,  279,   98,  164,  836,
      836,  164,  164,   96,  164,  267,  277,  165,  165,  165,
      165,  165,  165,  165,  165,  167,   96,  167,  167,  167,
      278,   98,   96,  836,  836,  268,  269,  836,  269,  269,
      269,  836,  836,   96,   98,  167,  836,  280,  167,  167,

       98,  167,  168,  168,  168,  268,  269,   96,  168,  269,
      269,   98,  269,  170,  170,  170,  170,  170,  170,  170,
      170,  274,  836,  168,  168,   98,  168,  836,  836,   96,
      294,   96,  281,  836,  168,  170,  170,  170,  170,  170,
      170,  170,  170,   96,  275,  275,  275,   98,  276,   98,
      275,  282,   96,   96,  272,   96,  272,  272,  272,  836,
      836,   98,  836,  836,  284,  275,  275,  285,  275,   96,
       98,   98,  276,   98,  272,  287,  275,  272,  272,   96,
      272,   96,  836,   96,  286,   96,  836,   98,   96,   96,
       96,   96,   96,  836,   96,   96,   96,   98,  288,   98,

      292,   98,   96,   98,  289,  290,   98,   98,   98,   98,
       98,  293,   98,   98,   98,  291,  836,  836,   96,   96,
       98,  295,   96,  836,  296,   96,  836,  297,  836,  300,
       96,  301,  836,  836,  303,  310,   98,   98,  309,  312,
       98,  302,  305,   98,  313,  308,  306,   96,   98,   96,
      304,  307,  311,   96,   96,   96,   96,   96,   96,  836,
       96,  836,  314,  836,   96,   98,  318,   98,   96,  836,
       96,   98,   98,   98,   98,   98,   98,  319,   98,  315,
      316,  317,   98,  836,  836,  836,   98,  320,   98,  836,
      836,  321,   96,  322,  836,  836,   96,   96,  327,   96,

      836,  323,  324,  325,  328,   96,  330,  326,  331,   96,
       98,   96,  332,  329,   98,   98,   96,   98,  337,   96,
       96,  338,   96,   98,   96,   96,   96,   98,   96,   98,
      342,   96,  836,  836,   98,   96,  836,   98,   98,  836,
       98,  836,   98,   98,   98,   96,   98,   96,  836,   98,
      333,  336,   96,   98,  334,  836,  836,  335,   96,  339,
       96,  836,   96,   98,   96,   98,  340,  341,   96,   96,
       98,   96,  836,  343,  347,   96,   98,  346,   98,  345,
       98,  344,   98,   96,   96,   96,   98,   98,  836,   98,
      348,   96,   96,   98,  349,   96,  836,   96,   96,   96,

      352,   98,   98,   98,  351,  350,  354,  836,   96,   98,
       98,  836,  836,   98,  357,   98,   98,   98,   96,  836,
      353,  355,   96,  360,  836,   96,   98,  356,   96,   96,
       96,  358,  359,   96,  836,  836,   98,  363,  836,  365,
       98,  366,  362,   98,  367,  361,   98,   98,   98,  836,
      368,   98,  385,  364,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      369,  369,  369,  369,  369,  369,  369,  369,  381,  386,
      383,  164,  400,  164,  164,  164,  370,  387,  370,  382,
      836,  371,  371,  371,  371,  371,  371,  371,  371,  836,

      836,  164,   96,  836,  164,  164,  269,  164,  269,  269,
      269,  271,  271,  271,  271,  271,  271,  271,  271,  836,
       98,  272,  836,  272,  272,  272,  269,  836,   96,  269,
      269,  836,  269,  271,  271,  271,  271,  271,  271,  271,
      271,  272,  836,  836,  272,  272,   98,  272,  836,   96,
      388,   96,  167,   96,  167,  167,  167,  372,  836,  373,
      373,  373,  376,  374,  377,  377,  377,   98,  378,   98,
      836,   98,  167,  836,  836,  167,  167,  372,  167,   96,
      373,  373,  376,  373,  392,  377,  377,  374,  377,  275,
      275,  275,  378,  836,  379,  275,  379,   98,   96,  380,

      380,  380,  380,  380,  380,  380,  380,   96,  384,   96,
      275,  275,   96,  275,   96,  390,   98,   96,   96,   96,
       96,  275,   96,   96,   96,   98,   96,   98,   96,  836,
       98,   96,   98,   96,  389,   98,   98,   98,   98,   96,
       98,   98,   98,  836,   98,  836,   98,   96,   96,   98,
      391,   98,   96,  836,  836,  836,   96,   98,   96,  836,
      395,  394,  836,  397,  836,   98,   98,  836,   96,  393,
       98,  396,  405,  406,   98,  401,   98,  399,   96,   96,
      398,  411,  402,  403,   96,  404,   98,   96,  407,   96,
      408,  409,   96,   96,  410,   96,   98,   98,  413,   96,

      412,   96,   98,   96,   96,   98,   96,   98,   96,   96,
       98,   98,  415,   98,  414,   96,   96,   98,  836,   98,
       96,   98,   98,  836,   98,   96,   98,   98,   96,   96,
       96,   96,  419,   98,   98,   96,  418,  420,   98,  416,
      421,  417,  836,   98,  422,  436,   98,   98,   98,   98,
       96,  836,  424,   98,   96,  423,   96,  836,   96,  836,
      427,  428,  435,  425,  836,   96,   96,   96,   98,  426,
      836,   96,   98,   96,   98,  429,   98,  433,   96,  836,
       96,  430,  431,   98,   98,   98,   96,  434,  432,   98,
       96,   98,   96,   96,   96,   96,   98,  437,   98,  836,

       96,  836,   96,   96,   98,   96,   96,   96,   98,  439,
       98,   98,   98,   98,  440,   96,   96,  438,   98,  441,
       98,   98,  836,   98,   98,   98,  447,  836,  836,   96,
      836,  836,  442,   98,   98,  836,   96,  836,  443,  450,
      444,  836,   96,   96,   96,  449,  445,   98,  452,  454,
      448,  455,  446,  456,   98,  453,   96,   96,  836,  451,
       98,   98,   98,  836,  836,  836,  458,  836,  836,  836,
      836,  836,  457,  836,   98,   98,  369,  369,  369,  369,
      369,  369,  369,  369,  371,  371,  371,  371,  371,  371,
      371,  371,  459,  836,  461,  373,   96,  373,  373,  373,

      836,  471,   96,  836,  460,  462,  371,  371,  371,  371,
      371,  371,  371,  371,   98,  373,   96,  836,  373,  373,
       98,  373,  836,  836,  836,  269,   96,  269,  269,  269,
      463,  836,  463,  836,   98,  464,  464,  464,  464,  464,
      464,  464,  464,  836,   98,  269,  478,  836,  269,  269,
      465,  269,  466,  466,  466,  377,  467,  377,  377,  377,
      380,  380,  380,  380,  380,  380,  380,  380,  472,  481,
      465,  836,  836,  466,  466,  377,  466,  836,  377,  377,
      467,  377,  468,  836,  468,   96,   96,  469,  469,  469,
      469,  469,  469,  469,  469,  380,  380,  380,  380,  380,

      380,  380,  380,   98,   98,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  470,   96,  470,  470,  470,  836,
      836,   96,  836,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   96,   98,  470,   96,   96,  470,  470,   98,
      470,  473,  836,   96,  836,  836,  836,  474,   96,   96,
       98,  836,  836,   98,   98,  836,  836,  475,  484,  479,
      480,   98,  494,  487,  483,  495,   98,   98,  836,  476,
      477,  482,   96,   96,  485,   96,  486,   96,  489,  488,
       96,   96,   96,   96,  491,   96,  492,  836,  490,  493,
       98,   98,   96,   98,  498,   98,   96,   96,   98,   98,

       98,   98,   96,   98,   96,  496,   96,  836,  836,   96,
       98,  836,  836,   96,   98,   98,   96,  836,  836,   96,
       98,  836,   98,  499,   98,  500,  502,   98,   96,  497,
      506,   98,   96,   96,   98,  501,  505,   98,  503,  507,
      504,  836,   96,  836,   96,   96,   98,   96,  509,  836,
       98,   98,   96,  836,   96,   96,   96,  511,  836,  508,
       98,  510,   98,   98,   96,   98,   96,  514,  512,   96,
       98,  513,   98,   98,   98,   96,  515,   96,   96,   96,
      836,   96,   98,  836,   98,  836,  836,   98,   96,  520,
      518,  516,  517,   98,   96,   98,   98,   98,  529,   98,

       96,  519,   96,  522,  523,  836,   98,   96,   96,   96,
      836,   96,   98,   96,  521,  836,   96,   96,   98,  836,
       98,   96,   96,  527,   96,   98,   98,   98,  524,   98,
       96,   98,   96,  530,   98,   98,  836,  525,  526,   98,
       98,  528,   98,   96,   96,   96,  836,  836,   98,  532,
       98,  531,  836,   96,  534,  536,  533,  836,  836,   96,
      538,   98,   98,   98,  535,  541,  836,   96,  539,  836,
      542,   98,  836,  836,  836,  537,  540,   98,  836,  836,
      836,  836,  836,  836,  545,   98,  836,  543,  544,  546,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,

      464,  464,  464,  464,  464,  464,  466,  551,  466,  466,
      466,  549,  836,  550,  836,   96,   96,  373,   96,  373,
      373,  373,  836,  836,  836,  836,  466,  552,   96,  466,
      466,  836,  466,   98,   98,  836,   98,  373,  836,  836,
      373,  373,  547,  373,  547,  836,   98,  548,  548,  548,
      548,  548,  548,  548,  548,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  470,  553,  470,  470,  470,  836,  836,   96,  836,
       96,  555,  377,  554,  377,  377,  377,  836,  836,   96,
      836,  470,   96,   96,  470,  470,   98,  470,   98,   96,

       96,   96,  377,   96,   96,  377,  377,   98,  377,   96,
       98,   98,   96,   96,  836,   96,   96,   98,   98,   98,
       96,   98,   98,  556,   96,   96,  557,   98,  569,  571,
       98,   98,  570,   98,   98,  559,  572,  836,   98,  573,
       96,   96,   98,   98,   96,  560,  558,   96,  836,   96,
       96,   96,  567,   96,   96,  562,  836,   96,   98,   98,
       96,  561,   98,  563,  564,   98,  565,   98,   98,   98,
      568,   98,   98,  836,  566,   98,   96,   96,   98,   96,
       96,   96,  836,   96,  836,   96,   96,  836,  576,  575,
       96,  577,   96,   96,   98,   98,  836,   98,   98,   98,

      574,   98,  579,   98,   98,  582,  836,  578,   98,  583,
       98,   98,   96,  580,  581,   96,  836,   96,  836,   96,
       96,   96,  836,  589,  585,   96,  586,  591,   96,  584,
       98,  593,  836,   98,  587,   98,  588,   98,   98,   98,
      590,   96,   96,   98,   96,   96,   98,  592,  594,   96,
      595,  596,   96,   96,   96,   96,   96,   96,  836,   98,
       98,  836,   98,   98,   96,   96,   96,   98,   96,  598,
       98,   98,   98,   98,   98,   98,  599,  836,   96,  597,
       96,   96,   98,   98,   98,  836,   98,   96,   96,   96,
       96,  836,  601,  836,  836,  602,   98,   96,   98,   98,

       96,  836,  836,  600,   96,   98,   98,   98,   98,   96,
       96,  603,  606,   96,   96,   98,  615,  836,   98,  604,
      616,   96,   98,   96,  836,  836,  605,   98,   98,  608,
      613,   98,   98,  836,  836,  609,  607,  836,  836,   98,
      836,   98,  612,  610,  611,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,   96,   96,  836,  618,  617,  614,   96,  620,   96,
      619,   96,  466,   96,  466,  466,  466,  836,  836,   98,
       98,  622,   96,   96,   96,   98,  836,   98,   96,   98,
       96,   98,  466,   96,  627,  466,  466,   96,  466,   96,

       98,   98,   98,   96,  621,  630,   98,  623,   98,   96,
       96,   98,   96,   96,  836,   98,   96,   98,  836,  624,
      836,   98,   96,   96,   96,  836,   96,   98,   98,   96,
       98,   98,  625,   96,   98,   96,  628,   96,  629,  836,
       98,   98,   98,  626,   98,   96,   96,   98,   96,  836,
       96,   98,   96,   98,  836,   98,   96,  632,  836,   96,
      634,  631,   96,   98,   98,  635,   98,  633,   98,   96,
       98,  836,  636,   96,   98,  637,  638,   98,  836,  641,
       98,  640,   96,  642,  639,  836,   96,   98,  836,  643,
       96,   98,   96,   96,   96,   96,  646,   96,  647,   96,

       98,   96,   96,  644,   98,   96,  645,   96,   98,   96,
       98,   98,   98,   98,  836,   98,   96,   98,   96,   98,
       98,   96,   96,   98,   96,   98,   96,   98,  650,  648,
       96,   96,  651,  649,   98,  836,   98,   96,  836,   98,
       98,  662,   98,  655,   98,   96,  836,  658,   98,   98,
       96,   96,   96,  653,  659,   98,  654,   96,   96,  652,
      656,   96,  657,   98,  660,   96,   96,   96,   98,   98,
       98,   96,  836,  661,   96,   98,   98,  672,   96,   98,
       96,  673,   96,   98,   98,   98,   96,   96,  836,   98,
      663,   96,   98,  665,  664,  666,   98,  836,   98,  667,

       98,   96,  836,  836,   98,   98,  670,   96,   96,   98,
      675,   96,   96,  671,  669,  668,   96,  836,   96,   98,
      676,  677,   96,  674,   96,   98,   98,   96,  836,   98,
       98,   96,   96,   96,   98,  678,   98,   96,   96,   96,
       98,  836,   98,  836,  679,   98,  680,  836,   96,   98,
       98,   98,  836,   96,  682,   98,   98,   98,   96,  681,
      836,  687,  836,  836,   96,  684,   98,  836,   96,   96,
      689,   98,   96,  683,   96,  836,   98,  685,  686,   96,
      688,  694,   98,   96,  692,  693,   98,   98,   96,   96,
       98,   96,   98,  690,  691,   96,   96,   98,   96,   96,

       96,   98,   96,  836,  695,   96,   98,   98,   96,   98,
       96,   96,   96,   98,   98,  836,   98,   98,   98,   96,
       98,  697,  698,   98,   96,  696,   98,  706,   98,   98,
       98,   96,  836,   96,  836,   96,   96,   98,  701,   96,
      836,  703,   98,   96,  836,  704,   96,   96,  708,   98,
      699,   98,  700,   98,   98,  710,   96,   98,  702,   96,
      705,   98,  711,  707,   98,   98,   96,   96,   96,   96,
       96,   96,  712,  709,   98,   96,  836,   98,   96,  713,
      716,   96,   96,  717,   98,   98,   98,   98,   98,   98,
      714,   96,   96,   98,  719,  718,   98,  715,  836,   98,

       98,   96,   96,  836,  720,   96,  721,  732,  836,   98,
       98,   96,   96,   96,   96,   96,  723,  722,   96,   98,
       98,  724,  725,   98,   96,   96,  726,   96,   96,   98,
       98,   98,   98,   98,  836,  728,   98,   96,   96,   96,
      836,   96,   98,   98,   96,   98,   98,  836,  836,  729,
      836,   96,  727,  836,  836,   98,   98,   98,  735,   98,
      730,   96,   98,   96,   96,  734,  731,  736,  733,   98,
      738,  739,  737,  836,   96,   96,   96,   96,   96,   98,
      836,   98,   98,   96,  836,   96,   96,   96,   96,   96,
       96,  741,   98,   98,   98,   98,   98,   96,  742,   96,

      836,   98,  740,   98,   98,   98,   98,   98,   98,  744,
      743,   96,  836,   96,  836,   98,   96,   98,  747,   96,
       96,   96,  745,  749,  746,   96,  750,  753,  751,   98,
      757,   98,  748,  759,   98,  752,   96,   98,   98,   98,
       96,   96,  760,   98,   96,  758,   96,   96,   96,   96,
      836,   96,   96,   96,   98,  836,   96,   96,   98,   98,
       96,  836,   98,  836,   98,   98,   98,   98,  761,   98,
       98,   98,   96,  762,   98,   98,  836,   96,   98,  763,
       96,  764,  836,   96,  765,   96,  766,   96,  836,  771,
       98,  768,  774,  772,  778,   98,   96,  773,   98,   96,

      779,   98,  767,   98,   96,   98,  769,  770,  781,   96,
       96,   96,   96,   96,   98,  836,  782,   98,   96,  780,
       96,  836,   98,   96,   96,   96,   96,   98,   98,   98,
       98,   98,   96,  785,   96,   96,   98,  784,   98,  783,
       96,   98,   98,   98,   98,  836,   96,   96,  836,   96,
       98,  836,   98,   98,  836,  789,   96,  787,   98,   96,
      836,  786,  836,  796,   98,   98,  790,   98,   96,  805,
      805,  788,  805,  805,   98,  775,  800,   98,  797,  836,
      798,   96,  776,  802,  794,  794,   98,  794,  794,   96,
       96,  799,   96,  801,  836,  836,   96,  795,  804,   98,

      803,   96,   96,   96,   96,   96,  806,   98,   98,   96,
       98,   96,  805,  805,   98,  805,  805,  807,  775,   98,
       98,   98,   98,   98,   96,  776,  808,   98,   96,   98,
       96,   96,   96,  836,  836,  836,  836,   96,  836,   96,
      811,  809,   98,  836,   96,  836,   98,   96,   98,   98,
       98,  810,  816,  812,  814,   98,  813,   98,  836,   96,
       96,  815,   98,  817,  836,   98,   96,   96,   96,  819,
       96,  818,   96,  836,   96,   96,  822,   98,   98,   96,
      823,   96,  820,  836,   98,   98,   98,   96,   98,   96,
       98,  826,   98,   98,  836,  821,  824,   98,  836,   98,

      836,  825,  836,  836,  836,   98,  836,   98,  827,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  830,  836,
      836,  832,  834,  836,  836,  836,  836,  836,  829,  828,
      835,  836,  836,  836,  831,  836,  836,  836,  836,  836,
      836,  836,  833,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   68,   68,   68,   68,  836,   68,
       68,   68,   68,   68,   68,   97,  836,  836,  836,   97,
       97,   97,   97,  172,  172,  172,  173,  173,  173,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      273,  273,  375,  375,  836,  375,  754,  836,  836,  836,

      754,  836,  754,  754,  754,  754,  777,  836,  836,  777,
      836,  777,  777,  777,  777,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,    3,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,

      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836
    } ;

static yyconst short int yy_chk[3312] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   13,   13,   14,   19,  793,
       22,   21,   22,   22,   22,   22,   22,   22,   22,   22,

       32,   28,   23,   33,   19,   21,   21,   23,   14,   26,
       30,   30,   40,   26,  180,   69,   68,  101,   32,   23,
       28,   33,   28,   28,   61,   69,   57,   98,   10,   24,
       40,   24,   24,   24,   24,   24,   24,   24,   24,   97,
       34,   96,   39,   95,   34,   34,   44,   91,   47,   24,
      732,  732,   24,   24,   24,   68,   85,   97,   24,   24,
       39,   33,   34,   41,   44,   43,   47,   99,   61,   24,
       76,   42,   40,   24,   24,   57,   24,  754,  754,  755,
       63,   41,   45,   43,   24,   99,  755,   24,   25,   42,
       25,   25,   25,   25,   25,   25,   25,   25,   44,   39,

       45,   44,  100,   39,   44,   39,   47,   41,   25,  178,
       37,   25,   25,   25,   41,   42,   42,   25,   41,   42,
       43,   41,   43,   48,   50,   99,   42,   46,   25,   42,
       45,   43,   25,   25,   49,   25,  106,  104,   51,  126,
       45,   48,   50,   25,   38,   46,  100,   52,  105,  775,
       29,  777,   49,  178,  106,  104,   51,  126,  777,   53,
      791,   54,   38,   18,   55,   52,  105,   48,   38,   38,
       38,   48,   50,   38,   15,   38,   46,   53,   38,   54,
       38,  107,   55,   46,   46,    9,   51,   38,   46,   51,
       51,  106,   38,  775,   49,  104,   38,   49,   52,  107,

       51,   51,  126,   51,  791,   38,  105,    3,   55,    0,
      114,   53,  111,   54,   52,   55,   53,  109,  135,   54,
       77,   77,   77,   77,   77,   77,   77,   77,  114,  112,
      111,    0,    0,    0,    0,  109,  135,  107,   77,   77,
        0,   77,   77,   77,   83,    0,   83,  112,    0,   83,
       83,   83,   83,   83,   83,   83,   83,    0,   77,   77,
        0,    0,   77,   77,  108,   77,   81,   81,   81,   81,
       81,   81,   81,   81,   84,   84,   84,  114,  111,  109,
       84,  113,  108,  103,   81,   81,  112,   81,   81,   81,
      776,  776,  115,  776,  776,   84,   84,    0,   84,  113,

        0,  103,    0,  776,   81,   81,   84,  116,   81,   81,
      115,   81,   82,  117,   82,   82,   82,   82,   82,   82,
       82,   82,  108,    0,  118,  116,  119,  108,  120,  122,
        0,  117,   82,  121,    0,   82,   82,   82,  103,    0,
      123,   82,  118,  113,  119,  103,  120,  122,  115,    0,
        0,  121,   82,  125,    0,  124,   82,   82,  123,   82,
      127,  117,  128,  130,  129,    0,  131,   82,  110,  116,
      119,  125,  120,  124,    0,  132,  133,  134,  127,  138,
      128,  130,  129,  136,  131,  118,  110,  139,  137,  123,
      121,  122,  123,  132,  133,  134,    0,  138,    0,    0,

      140,  136,  123,    0,  124,  139,  137,    0,  125,    0,
      124,    0,  110,  110,  110,  110,  110,  110,  140,  141,
      110,  127,    0,  130,  131,  128,  129,  110,  110,  110,
      110,  110,  110,  142,  137,  132,  143,  141,  133,  134,
      138,  145,  136,  137,  139,  144,  146,  147,  149,  150,
      137,  142,  148,  151,  143,  152,  140,  154,  173,  145,
      153,  155,  157,  144,  146,  147,  149,  150,  156,  186,
      148,  151,    0,  152,  158,  154,  173,    0,  153,  155,
      157,  143,  197,    0,  141,  142,  156,  186,    0,    0,
      196,  142,  158,  149,    0,  144,  148,  147,  182,  148,

      197,  150,  144,  145,  146,  151,  144,  144,  196,  154,
      148,  177,  148,  186,  152,  147,  182,  153,  154,    0,
      156,  155,    0,  156,  157,  163,  158,  163,  181,  177,
      163,  163,  163,  163,  163,  163,  163,  163,  164,  183,
      164,  164,  164,  166,  197,  166,  181,  196,  166,  166,
      166,  166,  166,  166,  166,  166,  182,  183,  164,    0,
        0,  164,  164,  207,  164,  165,  177,  165,  165,  165,
      165,  165,  165,  165,  165,  167,  184,  167,  167,  167,
      181,  207,  193,    0,    0,  165,  165,    0,  165,  165,
      165,    0,    0,  185,  184,  167,    0,  183,  167,  167,

      193,  167,  168,  168,  168,  165,  165,  187,  168,  165,
      165,  185,  165,  169,  169,  169,  169,  169,  169,  169,
      169,  172,    0,  168,  168,  187,  168,    0,    0,  188,
      193,  189,  184,    0,  168,  170,  170,  170,  170,  170,
      170,  170,  170,  190,  172,  172,  172,  188,  172,  189,
      172,  185,  191,  192,  170,  194,  170,  170,  170,    0,
        0,  190,    0,    0,  187,  172,  172,  187,  172,  195,
      191,  192,  172,  194,  170,  189,  172,  170,  170,  199,
      170,  198,    0,  200,  188,  201,    0,  195,  202,  203,
      204,  205,  206,    0,  208,  209,  210,  199,  190,  198,

      192,  200,  211,  201,  190,  190,  202,  203,  204,  205,
      206,  192,  208,  209,  210,  191,    0,    0,  212,  213,
      211,  194,  214,    0,  195,  215,    0,  195,    0,  198,
      216,  199,    0,    0,  200,  206,  212,  213,  205,  209,
      214,  199,  201,  215,  210,  204,  202,  217,  216,  218,
      200,  203,  208,  221,  219,  220,  222,  223,  224,    0,
      225,    0,  211,    0,  227,  217,  214,  218,  226,    0,
      228,  221,  219,  220,  222,  223,  224,  215,  225,  212,
      213,  213,  227,    0,    0,    0,  226,  216,  228,    0,
        0,  217,  229,  218,    0,    0,  230,  231,  221,  232,

        0,  218,  219,  220,  222,  233,  224,  220,  225,  238,
      229,  234,  226,  223,  230,  231,  235,  232,  233,  236,
      237,  233,  239,  233,  240,  241,  242,  238,  243,  234,
      237,  244,    0,    0,  235,  245,    0,  236,  237,    0,
      239,    0,  240,  241,  242,  246,  243,  247,    0,  244,
      229,  232,  248,  245,  230,    0,    0,  231,  249,  234,
      250,    0,  251,  246,  252,  247,  235,  236,  253,  254,
      248,  255,    0,  238,  242,  256,  249,  241,  250,  240,
      251,  239,  252,  257,  258,  259,  253,  254,    0,  255,
      243,  260,  261,  256,  244,  264,    0,  262,  263,  277,

      248,  257,  258,  259,  247,  246,  250,    0,  282,  260,
      261,    0,    0,  264,  253,  262,  263,  277,  311,    0,
      249,  251,  297,  256,    0,  280,  282,  252,  278,  283,
      284,  254,  255,  279,    0,    0,  311,  259,    0,  261,
      297,  262,  258,  280,  263,  257,  278,  283,  284,    0,
      264,  279,  282,  260,  265,  265,  265,  265,  265,  265,
      265,  265,  266,  266,  266,  266,  266,  266,  266,  266,
      267,  267,  267,  267,  267,  267,  267,  267,  278,  283,
      280,  266,  297,  266,  266,  266,  268,  284,  268,  279,
        0,  268,  268,  268,  268,  268,  268,  268,  268,    0,

        0,  266,  285,    0,  266,  266,  269,  266,  269,  269,
      269,  270,  270,  270,  270,  270,  270,  270,  270,    0,
      285,  272,    0,  272,  272,  272,  269,    0,  289,  269,
      269,    0,  269,  271,  271,  271,  271,  271,  271,  271,
      271,  272,    0,    0,  272,  272,  289,  272,    0,  281,
      285,  313,  271,  287,  271,  271,  271,  273,    0,  273,
      273,  273,  274,  273,  274,  274,  274,  281,  274,  313,
        0,  287,  271,    0,    0,  271,  271,  273,  271,  286,
      273,  273,  274,  273,  289,  274,  274,  273,  274,  275,
      275,  275,  274,    0,  276,  275,  276,  286,  288,  276,

      276,  276,  276,  276,  276,  276,  276,  290,  281,  291,
      275,  275,  292,  275,  293,  287,  288,  294,  295,  296,
      298,  275,  301,  299,  300,  290,  302,  291,  303,    0,
      292,  304,  293,  307,  286,  294,  295,  296,  298,  306,
      301,  299,  300,    0,  302,    0,  303,  305,  308,  304,
      288,  307,  309,    0,    0,    0,  310,  306,  312,    0,
      292,  291,    0,  294,    0,  305,  308,    0,  314,  290,
      309,  293,  301,  302,  310,  298,  312,  296,  315,  316,
      295,  307,  298,  299,  317,  300,  314,  318,  303,  319,
      304,  305,  322,  320,  306,  323,  315,  316,  309,  321,

      308,  324,  317,  325,  326,  318,  327,  319,  328,  329,
      322,  320,  312,  323,  310,  330,  331,  321,    0,  324,
      332,  325,  326,    0,  327,  333,  328,  329,  334,  335,
      336,  338,  318,  330,  331,  339,  317,  319,  332,  315,
      320,  316,    0,  333,  321,  338,  334,  335,  336,  338,
      337,    0,  323,  339,  340,  322,  341,    0,  342,    0,
      326,  327,  337,  324,    0,  343,  344,  345,  337,  325,
        0,  346,  340,  347,  341,  330,  342,  335,  351,    0,
      348,  331,  332,  343,  344,  345,  349,  336,  334,  346,
      350,  347,  352,  353,  355,  354,  351,  339,  348,    0,

      357,    0,  356,  358,  349,  359,  360,  361,  350,  343,
      352,  353,  355,  354,  344,  362,  363,  341,  357,  345,
      356,  358,    0,  359,  360,  361,  351,    0,    0,  364,
        0,    0,  346,  362,  363,    0,  365,    0,  347,  354,
      348,    0,  366,  367,  381,  353,  349,  364,  356,  358,
      352,  359,  350,  360,  365,  357,  383,  368,    0,  355,
      366,  367,  381,    0,    0,    0,  363,    0,    0,    0,
        0,    0,  362,    0,  383,  368,  369,  369,  369,  369,
      369,  369,  369,  369,  370,  370,  370,  370,  370,  370,
      370,  370,  364,    0,  367,  373,  415,  373,  373,  373,

        0,  381,  389,    0,  366,  368,  371,  371,  371,  371,
      371,  371,  371,  371,  415,  373,  382,    0,  373,  373,
      389,  373,    0,    0,    0,  371,  392,  371,  371,  371,
      374,    0,  374,    0,  382,  374,  374,  374,  374,  374,
      374,  374,  374,    0,  392,  371,  389,    0,  371,  371,
      375,  371,  375,  375,  375,  377,  375,  377,  377,  377,
      379,  379,  379,  379,  379,  379,  379,  379,  382,  392,
      375,    0,    0,  375,  375,  377,  375,    0,  377,  377,
      375,  377,  378,    0,  378,  385,  384,  378,  378,  378,
      378,  378,  378,  378,  378,  380,  380,  380,  380,  380,

      380,  380,  380,  385,  384,  386,  387,  390,  388,  394,
      391,  393,  395,  396,  380,  398,  380,  380,  380,    0,
        0,  397,    0,  386,  387,  390,  388,  394,  391,  393,
      395,  396,  400,  398,  380,  399,  401,  380,  380,  397,
      380,  384,    0,  404,    0,    0,    0,  385,  406,  403,
      400,    0,    0,  399,  401,    0,    0,  386,  395,  390,
      391,  404,  403,  398,  394,  403,  406,  403,    0,  387,
      388,  393,  405,  402,  396,  407,  397,  408,  400,  399,
      409,  411,  410,  412,  402,  414,  402,    0,  401,  402,
      405,  402,  413,  407,  406,  408,  416,  417,  409,  411,

      410,  412,  418,  414,  419,  404,  420,    0,    0,  421,
      413,    0,    0,  422,  416,  417,  423,    0,    0,  424,
      418,    0,  419,  407,  420,  408,  410,  421,  425,  405,
      414,  422,  426,  427,  423,  409,  413,  424,  411,  416,
      412,    0,  428,    0,  429,  430,  425,  431,  419,    0,
      426,  427,  432,    0,  433,  435,  434,  421,    0,  418,
      428,  420,  429,  430,  436,  431,  437,  424,  422,  438,
      432,  423,  433,  435,  434,  439,  425,  441,  440,  442,
        0,  444,  436,    0,  437,    0,    0,  438,  443,  430,
      428,  426,  427,  439,  445,  441,  440,  442,  443,  444,

      446,  429,  447,  433,  434,    0,  443,  448,  449,  450,
        0,  451,  445,  452,  432,    0,  453,  454,  446,    0,
      447,  455,  456,  441,  457,  448,  449,  450,  438,  451,
      458,  452,  460,  444,  453,  454,    0,  439,  440,  455,
      456,  442,  457,  462,  459,  461,    0,    0,  458,  447,
      460,  445,    0,  471,  449,  451,  448,    0,    0,  473,
      453,  462,  459,  461,  450,  456,    0,  472,  454,    0,
      456,  471,    0,    0,    0,  452,  455,  473,    0,    0,
        0,    0,    0,    0,  460,  472,    0,  458,  459,  461,
      463,  463,  463,  463,  463,  463,  463,  463,  464,  464,

      464,  464,  464,  464,  464,  464,  466,  473,  466,  466,
      466,  471,    0,  472,    0,  475,  474,  464,  477,  464,
      464,  464,    0,    0,    0,    0,  466,  474,  476,  466,
      466,    0,  466,  475,  474,    0,  477,  464,    0,    0,
      464,  464,  467,  464,  467,    0,  476,  467,  467,  467,
      467,  467,  467,  467,  467,  468,  468,  468,  468,  468,
      468,  468,  468,  469,  469,  469,  469,  469,  469,  469,
      469,  470,  475,  470,  470,  470,    0,    0,  478,    0,
      479,  477,  469,  476,  469,  469,  469,    0,    0,  480,
        0,  470,  481,  482,  470,  470,  478,  470,  479,  483,

      484,  485,  469,  486,  489,  469,  469,  480,  469,  487,
      481,  482,  488,  490,    0,  493,  491,  483,  484,  485,
      492,  486,  489,  478,  494,  495,  479,  487,  491,  493,
      488,  490,  492,  493,  491,  481,  494,    0,  492,  495,
      496,  497,  494,  495,  498,  482,  480,  499,    0,  500,
      501,  502,  489,  503,  505,  484,    0,  504,  496,  497,
      508,  483,  498,  485,  486,  499,  487,  500,  501,  502,
      490,  503,  505,    0,  488,  504,  506,  507,  508,  509,
      510,  511,    0,  512,    0,  514,  513,    0,  498,  497,
      515,  499,  516,  517,  506,  507,    0,  509,  510,  511,

      496,  512,  501,  514,  513,  504,    0,  500,  515,  505,
      516,  517,  518,  502,  503,  519,    0,  520,    0,  521,
      522,  523,    0,  508,  507,  524,  507,  510,  525,  506,
      518,  512,    0,  519,  507,  520,  507,  521,  522,  523,
      509,  526,  527,  524,  528,  529,  525,  511,  513,  530,
      516,  517,  531,  532,  533,  534,  535,  536,    0,  526,
      527,    0,  528,  529,  537,  538,  539,  530,  540,  524,
      531,  532,  533,  534,  535,  536,  525,    0,  541,  520,
      542,  549,  537,  538,  539,    0,  540,  543,  544,  545,
      550,    0,  528,    0,    0,  530,  541,  546,  542,  549,

      551,    0,    0,  526,  552,  543,  544,  545,  550,  554,
      555,  535,  540,  556,  559,  546,  552,    0,  551,  536,
      552,  553,  552,  558,    0,    0,  538,  554,  555,  542,
      549,  556,  559,    0,    0,  543,  541,    0,    0,  553,
        0,  558,  546,  544,  545,  547,  547,  547,  547,  547,
      547,  547,  547,  548,  548,  548,  548,  548,  548,  548,
      548,  557,  560,    0,  554,  553,  551,  561,  556,  562,
      555,  563,  548,  564,  548,  548,  548,    0,    0,  557,
      560,  558,  565,  566,  567,  561,    0,  562,  569,  563,
      568,  564,  548,  570,  566,  548,  548,  571,  548,  572,

      565,  566,  567,  573,  557,  569,  569,  560,  568,  574,
      575,  570,  576,  577,    0,  571,  578,  572,    0,  561,
        0,  573,  579,  580,  581,    0,  582,  574,  575,  583,
      576,  577,  564,  584,  578,  585,  567,  586,  568,    0,
      579,  580,  581,  565,  582,  587,  588,  583,  589,    0,
      590,  584,  591,  585,    0,  586,  592,  575,    0,  593,
      577,  574,  594,  587,  588,  578,  589,  576,  590,  595,
      591,    0,  579,  596,  592,  580,  581,  593,    0,  585,
      594,  584,  597,  585,  583,    0,  598,  595,    0,  586,
      599,  596,  600,  601,  602,  603,  589,  604,  590,  605,

      597,  606,  607,  587,  598,  608,  588,  609,  599,  610,
      600,  601,  602,  603,    0,  604,  611,  605,  612,  606,
      607,  613,  614,  608,  615,  609,  616,  610,  597,  595,
      617,  618,  598,  596,  611,    0,  612,  619,    0,  613,
      614,  615,  615,  604,  616,  620,    0,  607,  617,  618,
      622,  621,  623,  601,  609,  619,  602,  624,  625,  600,
      605,  626,  606,  620,  611,  627,  628,  629,  622,  621,
      623,  630,    0,  612,  631,  624,  625,  627,  632,  626,
      633,  627,  634,  627,  628,  629,  635,  636,    0,  630,
      617,  637,  631,  620,  619,  621,  632,    0,  633,  622,

      634,  638,    0,    0,  635,  636,  625,  639,  640,  637,
      629,  641,  643,  626,  624,  623,  642,    0,  644,  638,
      631,  632,  645,  628,  646,  639,  640,  647,    0,  641,
      643,  648,  649,  650,  642,  633,  644,  651,  652,  653,
      645,    0,  646,    0,  636,  647,  637,    0,  654,  648,
      649,  650,    0,  655,  640,  651,  652,  653,  656,  638,
        0,  644,    0,    0,  657,  642,  654,    0,  658,  659,
      647,  655,  660,  641,  661,    0,  656,  642,  643,  662,
      645,  652,  657,  663,  650,  651,  658,  659,  664,  665,
      660,  666,  661,  648,  649,  667,  668,  662,  669,  670,

      673,  663,  671,    0,  655,  675,  664,  665,  674,  666,
      672,  676,  677,  667,  668,    0,  669,  670,  673,  678,
      671,  658,  661,  675,  679,  657,  674,  672,  672,  676,
      677,  680,    0,  681,    0,  682,  683,  678,  667,  684,
        0,  669,  679,  685,    0,  670,  686,  688,  675,  680,
      663,  681,  666,  682,  683,  677,  687,  684,  668,  689,
      671,  685,  678,  674,  686,  688,  690,  691,  692,  693,
      695,  696,  679,  676,  687,  694,    0,  689,  697,  680,
      683,  698,  699,  684,  690,  691,  692,  693,  695,  696,
      681,  700,  701,  694,  686,  685,  697,  682,    0,  698,

      699,  702,  703,    0,  687,  704,  688,  704,    0,  700,
      701,  705,  706,  707,  708,  709,  692,  689,  710,  702,
      703,  694,  695,  704,  711,  712,  697,  713,  714,  705,
      706,  707,  708,  709,    0,  701,  710,  715,  716,  717,
        0,  718,  711,  712,  720,  713,  714,    0,    0,  702,
        0,  719,  700,    0,    0,  715,  716,  717,  709,  718,
      703,  721,  720,  722,  723,  707,  703,  711,  705,  719,
      713,  714,  712,    0,  724,  725,  728,  726,  727,  721,
        0,  722,  723,  731,    0,  729,  730,  733,  734,  736,
      735,  718,  724,  725,  728,  726,  727,  737,  719,  738,

        0,  731,  717,  729,  730,  733,  734,  736,  735,  721,
      720,  739,    0,  740,    0,  737,  741,  738,  724,  742,
      743,  744,  722,  726,  723,  746,  727,  731,  729,  739,
      733,  740,  725,  735,  741,  730,  745,  742,  743,  744,
      747,  748,  738,  746,  749,  734,  751,  750,  752,  753,
        0,  757,  758,  759,  745,    0,  760,  761,  747,  748,
      762,    0,  749,    0,  751,  750,  752,  753,  740,  757,
      758,  759,  763,  741,  760,  761,    0,  764,  762,  743,
      765,  744,    0,  766,  745,  767,  746,  768,    0,  751,
      763,  748,  753,  751,  757,  764,  769,  752,  765,  770,

      758,  766,  747,  767,  771,  768,  749,  750,  762,  772,
      773,  774,  778,  779,  769,    0,  763,  770,  781,  761,
      780,    0,  771,  782,  783,  784,  785,  772,  773,  774,
      778,  779,  786,  767,  787,  788,  781,  765,  780,  764,
      789,  782,  783,  784,  785,    0,  790,  796,    0,  797,
      786,    0,  787,  788,    0,  774,  798,  772,  789,  799,
        0,  770,    0,  780,  790,  796,  774,  797,  800,  792,
      792,  773,  792,  792,  798,  792,  785,  799,  781,    0,
      782,  801,  792,  788,  794,  794,  800,  794,  794,  802,
      803,  783,  804,  787,    0,    0,  806,  794,  790,  801,

      789,  808,  807,  811,  809,  810,  796,  802,  803,  812,
      804,  813,  805,  805,  806,  805,  805,  798,  805,  808,
      807,  811,  809,  810,  814,  805,  800,  812,  815,  813,
      816,  817,  818,    0,    0,    0,    0,  819,    0,  821,
      803,  801,  814,    0,  820,    0,  815,  822,  816,  817,
      818,  802,  809,  804,  807,  819,  806,  821,    0,  823,
      824,  808,  820,  810,    0,  822,  825,  826,  827,  813,
      828,  812,  829,    0,  830,  831,  816,  823,  824,  832,
      817,  833,  814,    0,  825,  826,  827,  834,  828,  835,
      829,  822,  830,  831,    0,  815,  819,  832,    0,  833,

        0,  820,    0,    0,    0,  834,    0,  835,  824,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  828,    0,
        0,  830,  832,    0,    0,    0,    0,    0,  827,  826,
      834,    0,    0,    0,  829,    0,    0,    0,    0,    0,
        0,    0,  831,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  838,  838,  838,  838,    0,  838,
      838,  838,  838,  838,  838,  839,    0,    0,    0,  839,
      839,  839,  839,  840,  840,  840,  841,  841,  841,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      843,  843,  844,  844,    0,  844,  845,    0,    0,    0,

      845,    0,  845,  845,  845,  845,  846,    0,    0,  846,
        0,  846,  846,  846,  846,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,

      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1425 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1585 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 837 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3227 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ int r = preprocessor(); if(r) return r; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(INT); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return(INT); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(BUILTIN_OFFSETOF); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(SETPROP); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(GETPROP); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(ISPROPSET); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(INT128); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(FLOAT16); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return(FLOAT16); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "lexer.l"
{ return(STATIC_ASSERT); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 84:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 218 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 222 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(check_type()); }     /* {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); } */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(CONSTANT); }  /* For triple OS X versions inside attributes... TODO: Add syntax errors elsewhere */
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(WIDE_STRING_LITERAL); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 274 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return(';'); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return('{'); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return('}'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 281 "lexer.l"
{ return(','); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 282 "lexer.l"
{ return(':'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 283 "lexer.l"
{ return('='); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 284 "lexer.l"
{ return('('); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 285 "lexer.l"
{ return(')'); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 286 "lexer.l"
{ return('['); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 287 "lexer.l"
{ return(']'); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 288 "lexer.l"
{ return('.'); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 289 "lexer.l"
{ return('&'); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 290 "lexer.l"
{ return('!'); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 291 "lexer.l"
{ return('~'); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 292 "lexer.l"
{ return('-'); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 293 "lexer.l"
{ return('+'); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 294 "lexer.l"
{ return('*'); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 295 "lexer.l"
{ return('/'); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 296 "lexer.l"
{ return('%'); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 297 "lexer.l"
{ return('<'); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 298 "lexer.l"
{ return('>'); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 299 "lexer.l"
{ return('^'); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 300 "lexer.l"
{ return('|'); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 301 "lexer.l"
{ return('?'); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 302 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 304 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 330 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 331 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 336 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 341 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 342 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 349 "lexer.l"
ECHO;
	YY_BREAK
#line 2724 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 837 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 837 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 836);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 349 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            const char * pointer = line + 1;
            bool hasLineNumber = false;
            int lineNumber;
            char numberString[20];

            line[count] = 0;
            if(GetString(&pointer, numberString, sizeof(numberString)))
            {
               char * ptr = null;
               lineNumber = (int)strtol(numberString, &ptr, 10);
               if(ptr && ptr > numberString)
                  hasLineNumber = true;
            }

            if(hasLineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);

   if(!strncmp(line, "pragma", c))
   {
      /*
      External pragma;
      if(!ast)
         ast = MkList();
      pragma = MkExternalPragma(line);
      ListAdd(ast, pragma);
      */
      strcpy(yytext, line);
      return PRAGMA;
   }
   else if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = YY_CURRENT_BUFFER;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   YY_CURRENT_BUFFER = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   YY_CURRENT_BUFFER = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
