#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 195
#define YY_END_OF_BUFFER 196
static yyconst short int yy_accept[830] =
    {   0,
      129,  129,  196,  194,  192,  191,  190,  193,  177,  194,
        1,  189,  183,  176,  194,  171,  172,  181,  180,  168,
      179,  175,  182,  135,  135,  169,  165,  184,  170,  185,
      188,  129,  129,  129,  173,  174,  186,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  166,  187,  167,  178,  164,
        0,  141,    0,  150,  167,  159,  151,    0,    0,  148,
      156,  146,  157,  147,  158,    0,  138,    2,    3,  149,
      139,  134,    0,  135,    0,  135,  129,  174,  166,  173,
      155,  161,  163,  162,  154,    0,  129,    0,  129,    0,

        0,  152,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,   11,  129,  129,  129,  129,
      129,  129,  129,  129,   19,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  153,  160,
      136,  143,    0,  138,  138,    0,  139,  134,    0,  137,
        0,  130,  129,  145,  144,  129,  129,    0,  142,    0,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  109,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,   17,   49,  129,  129,  129,
      129,   20,  129,  129,  129,   55,  129,  129,  129,  129,
      129,  129,  129,   48,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,    0,  138,  140,    0,  138,    0,  139,
      137,  132,  133,  130,    0,   68,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,    4,  129,
        6,    7,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,   13,   14,  129,  129,  129,
       18,  129,  129,  129,  129,  129,  129,   24,  129,   56,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,   23,  129,
      129,  129,   42,  129,  129,  129,  140,    0,  138,  132,
      132,    0,  132,  132,  133,    0,    0,  131,  129,   69,
      129,  129,  129,  129,  129,  129,  129,  129,  110,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,    5,   51,    8,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,   16,  129,  129,
      129,   22,   62,   50,  129,  129,  129,  129,  129,   57,
      129,  129,   27,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,   40,  129,  129,  129,  112,   46,    0,
      132,  132,  132,    0,    0,  133,  131,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,   60,
       54,  129,  129,   12,   15,  129,   59,  105,   87,  129,
      129,  129,  101,  129,   58,  129,   26,   28,   31,   35,
      129,  129,   37,  129,   38,  129,  129,  129,  129,  129,
      129,  129,    0,  132,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  108,  129,  129,   93,   99,  129,  129,
      129,  129,  129,  129,   21,   61,   75,   76,  129,  129,
      129,  129,  129,  129,  129,  129,   85,  129,  129,  129,
      129,  129,  129,  129,  129,  126,  127,  125,   10,  129,
      129,  129,  129,  102,  129,  129,  129,   97,  129,  129,

      129,  129,   39,  129,   53,  129,  129,   79,   70,  129,
      129,   74,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,   86,   63,  129,   29,  129,   36,  111,  129,
      129,  129,   96,  129,  129,  129,  129,  129,  129,    9,
      129,  129,  129,  129,  129,   47,   25,   72,  129,  123,
      129,  129,   41,   43,  129,   65,  129,   92,   73,  129,
       33,  129,  129,  129,  129,  129,  129,  129,  129,  129,
       94,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,   90,   91,  129,  124,  129,  129,   52,  129,
      115,   71,  129,  129,  129,  129,  129,  129,   64,  129,

       84,   98,   30,  129,  129,   45,  129,  104,  121,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
       32,   83,  129,  129,    0,  129,  129,  129,   95,   78,
      129,  107,  129,  129,  118,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,    0,    0,   88,  129,
      129,  100,   44,  129,  129,  129,  129,  129,  114,  129,
      113,  103,  129,   82,  129,  129,  129,    0,    0,    0,
      106,   77,  129,  129,  129,  129,  128,  129,   80,  129,
      129,  129,  129,    0,    0,    0,    0,   89,  129,  116,
      129,  122,  129,  129,  129,  129,  129,    0,  129,  129,

      129,  129,  129,   67,  129,  129,  129,  129,  129,  129,
       66,  129,  129,  120,  129,   34,  129,  117,  129,  129,
      129,  129,  129,  129,  129,  119,  129,   81,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   27,   29,   27,   30,   31,   32,
       33,   34,   35,    1,   36,   37,   38,   39,   40,   41,
       42,   42,   43,   44,   42,   45,   42,   46,   42,   47,
       42,   42,   48,   42,   49,   42,   42,   50,   42,   42,
       51,   52,   53,   54,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   42,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[85] =
    {   0,
        1,    2,    2,    1,    2,    2,    1,    3,    1,    1,
        1,    4,    5,    2,    6,    1,    1,    1,    1,    7,
        1,    8,    8,    8,    8,    8,    8,    8,    8,    4,
        1,    1,    1,    1,    1,    9,    9,    9,    9,    9,
        9,   10,   11,   11,   11,   10,   11,   10,   10,   10,
        1,    1,    1,    1,   10,    9,    9,    9,    9,    9,
        9,   10,   10,   11,   11,   10,   11,   10,   10,   10,
       11,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1,    1,    1,    1
    } ;

static yyconst short int yy_base[841] =
    {   0,
        0,    0,  310, 3148, 3148, 3148, 3148, 3148,  275,   77,
     3148, 3148,   53,   76,  234, 3148, 3148,  242,   72, 3148,
       73,   71,   87,  110,  169,   80, 3148,   91,  218,   78,
     3148,   89,   92,  133, 3148, 3148,  178,  233,  131,  101,
      152,  160,  154,  135,  171,  216,  137,  212,  223,  213,
      227,  236,  248,  250,  253, 3148,   94, 3148, 3148, 3148,
      117, 3148,  178, 3148, 3148, 3148, 3148,  104,  113, 3148,
     3148, 3148, 3148, 3148, 3148,  151,  299, 3148, 3148, 3148,
      345,  393,  328,  332,  137,    0,    0, 3148, 3148, 3148,
      115, 3148, 3148, 3148,  111,  112,  128,   98,  156,  195,

       66, 3148,  225,  226,  237,  252,  319,  353,  288,  457,
      349,  370,  318,  299,  372,  381,  396,  368,  417,  418,
      402,  419,  422,  431,  432,  228,  433,  434,  460,  447,
      454,  455,  464,  467,  458,  477,  492,  470,  493,  490,
      496,  523,  524,  527,  525,  533,  530,  535,  540,  534,
      544,  549,  537,  560,  539,  565,  556,  572, 3148, 3148,
     3148, 3148,  618,  607,  655,  636,  644,  669,  590,  723,
        0,  710,  592, 3148, 3148,    0,  609,  202, 3148,  112,
      626,  597,  661,  691,  713,  711,  619,  726,  698,  728,
      730,  761,  764,  766,  694,  705,  774,  780,  783,  781,

      785,  786,  789,  790,  793,  787,  794,  795,  797,  796,
      800,  802,  810,  817,  823,  829,  831,  833,  840,  853,
      859,  860,  866,  867,  868,  872,  876,  879,  882,  887,
      891,  895,  901,  902,  903,  917,  904,  906,  918,  910,
      923,  926,  930,  932,  938,  939,  942,  945,  946,  954,
      958,  959,  961,  966,  967,  969,  981,  982,  983,  986,
      991,  994, 1002, 1036, 1048, 1056, 1077, 1073, 1097, 1119,
     1088, 1124, 1129, 1154, 1185, 1006, 1025, 1019, 1026, 1010,
     1175, 1038, 1098, 1149, 1014, 1194, 1124, 1127, 1203, 1205,
     1208, 1210, 1211, 1213, 1018, 1214, 1215, 1216, 1218, 1219,

     1220, 1222, 1011, 1224, 1230, 1239, 1241, 1227, 1147, 1243,
     1244, 1249, 1252, 1254, 1274, 1264, 1283, 1286, 1284, 1288,
     1289, 1290, 1293, 1294, 1299, 1296, 1300, 1303, 1305, 1310,
     1319, 1320, 1325, 1322, 1324, 1327, 1330, 1335, 1339, 1344,
     1347, 1349, 1356, 1358, 1360, 1364, 1366, 1368, 1369, 1371,
     1375, 1377, 1381, 1385, 1383, 1388, 1394, 1396, 1398, 1402,
     1404, 1405, 1410, 1415, 1418, 1432, 1450, 1471, 1479,    0,
     1468, 1528, 1517,    0, 1522, 1573, 1546, 1581, 1452, 1435,
     1458, 1456, 1455, 1439, 1506, 1529, 1564, 1581, 1600, 1519,
     1601, 1602, 1504, 1603, 1604, 1605, 1607, 1608, 1624, 1628,

     1609, 1611, 1632, 1639, 1645, 1647, 1651, 1654, 1655, 1659,
     1661, 1498, 1662, 1664, 1666, 1670, 1667, 1676, 1674, 1681,
     1683, 1686, 1689, 1690, 1691, 1697, 1698, 1700, 1710, 1717,
     1719, 1720, 1725, 1726, 1727, 1732, 1733, 1741, 1740, 1746,
     1747, 1752, 1753, 1757, 1761, 1755, 1760, 1762, 1763, 1774,
     1777, 1782, 1790, 1785, 1789, 1796, 1798, 1805, 1811, 1841,
     1849,    0, 1838, 1898, 1906, 1914, 1903, 1817, 1824, 1821,
     1826, 1813, 1874, 1888, 1827, 1939, 1941, 1942, 1876, 1830,
     1889, 1879, 1944, 1950, 1954, 1953, 1961, 1964, 1974, 1965,
     1975, 1980, 1981, 1986, 1987, 1985, 1990, 1991, 1995, 1997,

     2000, 2006, 2014, 2007, 2016, 2017, 2019, 2020, 2021, 1877,
     2023, 2026, 2028, 2033, 2036, 2047, 2048, 2049, 2057, 2058,
     2060, 2062, 2069, 2072, 2074, 2079, 2081, 2082, 2088, 2089,
     2093, 2094, 2095, 2096, 2098, 2101, 2103, 2104, 2110, 2105,
     2115, 2117, 2126, 2161, 2131, 2129, 2132, 2163, 2134, 2146,
     2165, 2166, 2167, 2151, 2179, 2182, 2168, 2187, 2199, 2201,
     2204, 2203, 2208, 2211, 2212, 2218, 2223, 2227, 2231, 2232,
     2233, 2235, 2242, 2239, 2243, 2246, 2247, 2248, 2252, 2263,
     2254, 2259, 2267, 2268, 2274, 2269, 2275, 2276, 2278, 2284,
     2290, 2297, 2301, 2305, 2310, 2312, 2313, 2314, 2318, 2320,

     2321, 2324, 2333, 2337, 2334, 2335, 2340, 2341, 2345, 2348,
     2349, 2356, 2360, 2362, 2361, 2370, 2368, 2371, 2373, 2385,
     2390, 2376, 2393, 2396, 2397, 2398, 2400, 2404, 2406, 2407,
     2412, 2420, 2426, 2427, 2429, 2432, 2434, 2439, 2440, 2435,
     2442, 2448, 2451, 2454, 2456, 2459, 2461, 2462, 2465, 2468,
     2470, 2471, 2476, 2490, 2496, 2497, 2499, 2501, 2503, 2507,
     2509, 2511, 2512, 2518, 2520, 2522, 2528, 2532, 2523, 2533,
     2543, 2542, 2545, 2535, 2547, 2554, 2556, 2549, 2559, 2562,
     2569, 2571, 2570, 2579, 2584, 2581, 2594, 2595, 2596, 2603,
     2604, 2605, 2606, 2615, 2608, 2616, 2617, 2618, 2620, 2625,

     2627, 2630, 2631, 2639, 2637, 2642, 2644, 2641, 2646, 2650,
     2652, 2653, 2654, 2661, 2663, 2665, 2686, 2676, 2678, 2688,
     2689, 2692, 2690, 2693,  137, 2697, 2698, 2699, 2701, 2703,
     2705, 2714, 2726, 2727, 2728, 2729, 2731, 2734, 2738, 2741,
     2743, 2750, 2751, 2753, 2757, 2754,  164,  172, 3148, 2758,
     2760, 2762, 2765, 2767, 2774, 2777, 2786, 2787, 2789, 2798,
     2802, 2809, 2810, 2813, 2814, 2815, 2819,  242,  331,  244,
     2817, 2818, 2823, 2824, 2825, 2834, 2838, 2839, 2840, 2847,
     2849, 2850, 2851,  253, 2887,   87, 2901, 3148, 2853, 2855,
     2861, 2870, 2875, 2887, 2896, 2898, 2899, 2933, 2902, 2900,

     2907, 2913, 2919, 2921, 2928, 2935, 2938, 2932, 2941, 2945,
     2951, 2954, 2955, 2957, 2964, 2965, 2966, 2968, 2970, 2971,
     2974, 2979, 2980, 2985, 2991, 3000, 3001, 3002, 3148, 3064,
     3075, 3083, 3088, 3089, 3100, 3104, 3106, 3116, 3125, 3136
    } ;

static yyconst short int yy_def[841] =
    {   0,
      829,    1,  829,  829,  829,  829,  829,  829,  829,  830,
      829,  829,  829,  829,  831,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  832,  832,  832,  829,  829,  829,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  829,  829,  829,  829,  829,
      830,  829,  830,  829,  829,  829,  829,  831,  831,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  833,   25,  834,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  832,  829,  832,  835,

      831,  829,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      836,  833,  832,  829,  829,  834,  832,  835,  829,  835,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  829,  829,  829,  829,  829,  829,  829,
      829,  836,  837,  829,  829,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  829,  829,  829,  272,
      829,  829,  837,  373,  829,  829,  829,  829,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  829,
      829,  373,  829,  829,  829,  829,  829,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  829,  829,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  838,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  838,  839,  829,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  840,  829,  839,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  840,  829,  840,  829,  829,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  829,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,    0,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829
    } ;

static yyconst short int yy_nxt[3233] =
    {   0,
        4,    5,    6,    7,    8,    7,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   25,   25,   25,   25,   25,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   32,   32,   32,
       32,   32,   32,   32,   34,   32,   32,   32,   32,   32,
       35,    4,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   32,   46,   32,   32,   47,   32,   48,   32,
       49,   50,   51,   52,   53,   54,   55,   32,   32,   32,
       56,   57,   58,   59,   62,   64,   65,   66,   71,  829,
       76,   73,   77,   77,   77,   77,   77,   77,   77,   77,

       96,   89,   78,   96,   72,   74,   75,   79,   67,   87,
       94,   95,   96,   88,  829,  829,  161,   69,   98,   80,
       90,   98,   91,   92,   62,   68,  159,  176,   63,   81,
       98,   82,   82,   82,   82,   82,   82,   82,   82,   96,
      100,   98,   96,  175,   96,  101,   96,  174,   96,   83,
      748,  749,   84,   84,   84,   69,  171,   98,   84,   85,
       98,   99,   98,   96,   98,   96,   98,   96,   63,   83,
      162,   96,  117,   84,   84,  160,   84,  748,  749,  768,
      829,   98,   96,   98,   84,   98,  769,   85,   81,   98,
       86,   86,   86,   86,   86,   86,   86,   86,  130,  114,

       98,  131,  179,  115,  132,  116,  139,  118,   83,  179,
      102,   84,   84,   84,  119,  122,  123,   84,  120,  124,
      127,  121,  128,   96,   96,  177,  125,   96,   83,  126,
      133,  129,   84,   84,   96,   84,   96,   96,   96,   96,
      134,   98,   98,   84,   96,   98,  180,   96,   96,  785,
       93,  829,   98,  180,   98,   98,   98,   98,  769,   96,
      785,   96,   98,   96,   96,   98,   98,  140,  103,  104,
      105,  141,  144,  106,   70,  107,  135,   98,  108,   98,
      109,   98,   98,  136,  137,   69,  145,  110,  138,  146,
      147,  181,  111,  786,  142,  182,  112,  143,  151,   96,

      148,  149,  220,  150,  786,  113,  183,   60,  157,  829,
       96,  153,  829,  155,  152,  158,  154,   98,  184,  156,
       77,   77,   77,   77,   77,   77,   77,   77,   98,   96,
       96,  829,  787,  787,  829,  787,  787,  829,  163,  164,
      829,  164,  164,  164,  169,  788,  169,   98,   98,  170,
      170,  170,  170,  170,  170,  170,  170,  829,  163,  164,
       96,  188,  164,  164,   96,  164,  165,  165,  165,  165,
      165,  165,  165,  165,   84,   84,   84,  205,   98,   96,
       84,   96,   98,   96,  166,  167,  185,  167,  167,  167,
      829,  204,   96,  829,  829,   84,   84,   98,   84,   98,

      829,   98,  829,  829,  166,  167,   84,   96,  167,  167,
       98,  167,   81,   96,   82,   82,   82,   82,   82,   82,
       82,   82,  186,  829,  829,   98,  202,  187,   96,   96,
       96,   98,   83,   96,  829,  168,  168,  168,  203,  206,
      209,  168,   96,   96,   96,   96,   98,   98,   98,  829,
      829,   98,   83,  829,  207,  208,  168,  168,   96,  168,
       98,   98,   98,   98,  829,   96,   96,  168,   96,   96,
      212,   96,  210,  211,  829,   96,   98,  829,   96,  829,
      829,   96,  214,   98,   98,  215,   98,   98,   96,   98,
      829,  217,  213,   98,  829,  216,   98,  218,  219,   98,

      829,   96,  829,   96,   96,  221,   98,   96,  222,  829,
      829,  829,  189,  190,  191,  192,  193,  194,  224,   98,
      195,   98,   98,  225,  829,   98,  226,  196,  197,  198,
      199,  200,  201,  223,   96,   96,   96,  227,   96,  829,
      228,   96,  233,  829,   96,   96,   96,  229,   96,  230,
       96,   96,   98,   98,   98,   96,   98,  235,  231,   98,
       96,  234,   98,   98,   98,  232,   98,   96,   98,   98,
      829,   96,  236,   98,  829,  829,   96,  829,   98,  829,
      239,  829,  829,   96,  829,   98,  237,  829,  240,   98,
      248,  246,  238,  249,   98,  241,  252,  253,  244,  242,

      243,   98,  245,   96,  250,  256,  251,  254,   96,  247,
      259,  170,  170,  170,  170,  170,  170,  170,  170,  255,
       96,   98,  829,  257,  829,  829,   98,  829,  260,  262,
       96,  261,  258,  829,  264,  263,  264,   96,   98,  265,
      265,  265,  265,  265,  265,  265,  265,  164,   98,  164,
      164,  164,  269,  829,  269,   98,  829,  270,  270,  270,
      270,  270,  270,  270,  270,  829,  278,  164,  829,  829,
      164,  164,   96,  164,  266,  276,  165,  165,  165,  165,
      165,  165,  165,  165,  167,  284,  167,  167,  167,  277,
       98,  829,  829,  829,  267,  268,  829,  268,  268,  268,

      829,  829,   96,  829,  167,   96,  829,  167,  167,   96,
      167,  168,  168,  168,  267,  268,   96,  168,  268,  268,
       98,  268,   96,   98,   96,  829,  829,   98,  279,  273,
      829,  829,  168,  168,   98,  168,  829,   96,  829,   96,
       98,   96,   98,  168,  170,  170,  170,  170,  170,  170,
      170,  170,  274,  274,  274,   98,  275,   98,  274,   98,
      280,  829,  296,  271,  286,  271,  271,  271,  281,  829,
      287,  288,   96,  274,  274,   96,  274,   96,  297,  282,
      275,  285,  283,  271,  274,   96,  271,  271,  290,  271,
       98,   96,   96,   98,   96,   98,   96,   96,   96,  291,

       96,   96,  289,   98,   96,   96,   96,   96,   96,   98,
       98,   96,   98,   96,   98,   98,   98,  829,   98,   98,
      292,   96,   98,   98,   98,   98,   98,  829,   96,   98,
      829,   98,  294,  298,   96,  295,  829,  829,  829,   98,
       96,  293,   96,  299,   96,  301,   98,  308,  307,  303,
      310,   96,   98,  300,  304,  306,  311,  829,   98,  305,
       98,  302,   98,  309,   96,  316,  829,  312,  829,   98,
       96,   96,  313,  829,  314,  315,  829,   96,   96,   96,
      317,  829,   98,   96,  319,  829,  320,   96,   98,   98,
       96,  318,  322,   96,  321,   98,   98,   98,   96,  323,

      829,   98,   96,  324,  829,   98,   96,  829,   98,  325,
      829,   98,   96,   96,   96,   96,   98,   96,  326,  335,
       98,   96,  336,  330,   98,  328,  329,  327,   96,   96,
       98,   98,   98,   98,   96,   98,  829,   96,  340,   98,
      829,   96,  829,   96,  829,  829,   98,   98,  331,   96,
       96,  332,   98,   96,  334,   98,   96,   96,  333,   98,
      337,   98,  339,  338,  829,   96,  829,   98,   98,   96,
       96,   98,   96,  344,   98,   98,  342,   96,   96,  341,
       96,  829,  345,   98,  343,  829,  829,   98,   98,  829,
       98,  829,   96,   96,   96,   98,   98,   96,   98,  346,

      829,  350,   96,  352,  347,   96,  829,  349,  829,  348,
       98,   98,   98,   96,  829,   98,  355,   96,  351,  829,
       98,   96,   96,   98,  353,   96,  358,  829,  829,   96,
       96,   98,  354,  829,  356,   98,   96,   96,  357,   98,
       98,  829,  359,   98,  363,  361,  364,   98,   98,   96,
      360,  365,  829,  829,   98,   98,  362,  265,  265,  265,
      265,  265,  265,  265,  265,  382,  406,   98,  366,  265,
      265,  265,  265,  265,  265,  265,  265,  367,  367,  367,
      367,  367,  367,  367,  367,  380,  379,  387,  164,  397,
      164,  164,  164,  368,  829,  368,  381,  829,  369,  369,

      369,  369,  369,  369,  369,  369,  384,  829,  164,   96,
      829,  164,  164,  268,  164,  268,  268,  268,  270,  270,
      270,  270,  270,  270,  270,  270,  829,   98,  271,  829,
      271,  271,  271,  268,  829,   96,  268,  268,   96,  268,
      270,  270,  270,  270,  270,  270,  270,  270,  271,  829,
      829,  271,  271,   98,  271,  829,   98,  385,   96,  167,
       96,  167,  167,  167,  370,  829,  371,  371,  371,  374,
      372,  375,  375,  375,  829,  376,   98,  829,   98,  167,
      829,  829,  167,  167,  370,  167,   96,  371,  371,  374,
      371,  389,  375,  375,  372,  375,  274,  274,  274,  376,

      390,  377,  274,  377,   98,   96,  378,  378,  378,  378,
      378,  378,  378,  378,   96,  386,   96,  274,  274,   96,
      274,   96,   96,   98,   96,   96,   96,   96,  274,   96,
       96,   96,   98,   96,   98,   96,  383,   98,   96,   98,
       98,   96,   98,   98,   98,   98,  829,   98,   98,   98,
       96,   98,   96,   98,   96,   96,   98,  388,  829,   98,
       96,  829,  829,   96,  392,   96,  391,  394,   98,  829,
       98,  829,   98,   98,  829,   96,  393,  403,   98,  402,
      398,   98,  396,   98,  395,   96,  400,  399,  401,  408,
      407,  404,  405,   98,   96,   96,  411,   96,  410,   96,

       96,   96,  409,   98,   96,   96,  829,   96,  412,  829,
       96,   96,   98,   98,   96,   98,   96,   98,   98,   98,
      416,   96,   98,   98,  413,   98,  829,  414,   98,   98,
       96,   96,   98,   96,   98,   96,   96,  415,   96,   98,
      419,   96,  417,  829,  418,  829,   96,  432,   98,   98,
       96,   98,  433,   98,   98,   96,   98,  421,   96,   98,
       96,  424,  420,  422,   98,  425,  829,   96,   98,   96,
      423,   96,  829,   98,  426,   96,   98,   96,   98,   96,
       96,  427,   96,  428,  430,   98,   96,   98,   96,   98,
      431,  429,   96,   98,   96,   98,   96,   98,   98,   96,

       98,  829,  436,  434,   98,   96,   98,   96,  437,   96,
       98,  435,   98,   96,   98,   96,   96,   98,  829,  438,
      829,   96,  829,   98,  829,   98,   96,   98,  444,   96,
      439,   98,  447,   98,   98,  441,  440,  442,  446,   98,
      445,  443,  449,   96,   98,  451,   96,   98,  829,  450,
       96,  452,  829,  829,  453,  829,  829,  448,  829,  829,
      829,   98,  829,   96,   98,  455,   96,   96,   98,   96,
      454,  367,  367,  367,  367,  367,  367,  367,  367,  456,
      458,   98,  829,  829,   98,   98,  829,   98,  457,  829,
      829,  459,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  371,   96,
      371,  371,  371,  472,  829,   96,  829,   96,  471,  268,
      468,  268,  268,  268,  469,  829,  829,   98,  371,  470,
       96,  371,  371,   98,  371,   98,  829,  829,  829,  268,
       96,  829,  268,  268,  460,  268,  460,  829,   98,  461,
      461,  461,  461,  461,  461,  461,  461,  462,   98,  463,
      463,  463,  375,  464,  375,  375,  375,  378,  378,  378,
      378,  378,  378,  378,  378,   96,  481,  462,  829,  473,
      463,  463,  375,  463,  474,  375,  375,  464,  375,  465,
      478,  465,   96,   98,  466,  466,  466,  466,  466,  466,

      466,  466,  378,  378,  378,  378,  378,  378,  378,  378,
       98,   96,   96,   96,   96,   96,   96,  829,   96,   96,
       96,  467,   96,  467,  467,  467,  829,  475,  829,   98,
       98,   98,   98,   98,   98,   96,   98,   98,   98,   96,
       98,  467,  476,   96,  467,  467,  487,  467,  488,  829,
       96,  489,  490,   98,  477,  491,   96,   98,   96,  480,
      484,   98,   96,  483,  485,   96,   96,  479,   98,  482,
       96,  486,   96,   96,   98,   96,   98,   96,   96,  493,
       98,   96,  492,   98,   98,   96,  829,   96,   98,  494,
       98,   98,   96,   98,   96,   98,   98,   96,  495,   98,

       96,   96,   96,   98,  496,   98,  498,  829,   96,   96,
       98,   96,   98,  497,  501,   98,  503,  502,   98,   98,
       98,   96,  499,  500,  829,  505,   98,   98,   96,   98,
       96,   96,  829,  506,  504,  507,   96,   96,   96,   98,
      508,  829,  510,   96,   96,  511,   98,  509,   98,   98,
      514,   96,   96,  516,   98,   98,   98,   96,   96,  512,
      513,   98,   98,   96,   96,  515,   96,  525,   96,   98,
       98,   96,   96,   96,   96,   98,   98,  518,  519,  829,
      829,   98,   98,  517,   98,   96,   98,  829,   96,   98,
       98,   98,   98,   96,  829,  829,   96,  520,  523,  829,

       96,   96,  829,   98,  522,  521,   98,   96,  829,   96,
      526,   98,  530,  524,   98,  528,   96,  532,   98,   98,
      527,  529,   96,  829,   96,   98,  531,   98,   96,  534,
      829,  829,   96,  829,   98,   96,  533,   96,   96,  535,
       98,   96,   98,  547,  537,  829,   98,  829,  536,  538,
       98,  540,  829,   98,  829,   98,   98,  539,  829,   98,
      542,  541,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  463,  549,
      463,  463,  463,  546,  552,   96,  545,   96,   96,  371,
       96,  371,  371,  371,  548,  829,  557,  829,  463,   96,

       96,  463,  463,   98,  463,   98,   98,  829,   98,  371,
      829,  829,  371,  371,  543,  371,  543,   98,   98,  544,
      544,  544,  544,  544,  544,  544,  544,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  467,  551,  467,  467,  467,  550,  556,
       96,  559,   96,   96,  375,   96,  375,  375,  375,  829,
      829,   96,  558,  467,   96,   96,  467,  467,   98,  467,
       98,   98,   96,   98,  375,   96,   96,  375,  375,   98,
      375,  829,   98,   98,  564,   96,   96,  565,  567,  829,
       98,   96,   96,   98,   98,  554,   96,   96,   96,  566,

      568,   96,   96,   98,   98,  555,   96,  553,   96,   98,
       98,   96,  560,  562,   98,   98,   98,   96,   96,   98,
       98,  563,  829,  561,   98,   96,   98,   96,   96,   98,
       96,   96,   96,  829,   96,   98,   98,   96,  829,   96,
      570,  571,  572,   98,   96,   98,   98,   96,   98,   98,
       98,  569,   98,  574,  573,   98,  577,   98,   96,   96,
       96,  829,   98,  829,  575,   98,  578,  576,   96,   96,
      579,   96,  580,   96,  581,  586,   98,   98,   98,  588,
       96,  584,  582,   96,  583,   96,   98,   98,  585,   98,
       96,   98,   96,   96,  589,  590,  587,  591,   98,   96,

       96,   98,  829,   98,   96,   96,   96,   96,   98,   96,
       98,   98,   96,  593,   96,   96,   96,   98,   98,  594,
      592,   96,   98,   98,   98,   98,   96,   98,   96,  829,
       98,  596,   98,   98,   98,  595,  597,  829,  829,   98,
       96,  829,   96,   96,   98,   96,   98,  544,  544,  544,
      544,  544,  544,  544,  544,  610,  601,   96,   98,  598,
       98,   98,   96,   98,  603,  829,  829,  599,  600,  604,
      829,  605,  602,  607,   96,   98,   96,   96,   96,   96,
       98,  606,  544,  544,  544,  544,  544,  544,  544,  544,
       96,  608,   98,   96,   98,   98,   98,   98,   96,  829,

      612,  463,  829,  463,  463,  463,  609,  829,   98,  829,
       96,   98,   96,  829,   96,   96,   98,  613,  611,   96,
      615,  463,   96,   96,  463,  463,  621,  463,   98,   96,
       98,  614,   98,   98,   96,  617,  616,   98,   96,  624,
       98,   98,   96,   96,   96,  618,   96,   98,  829,  829,
       96,  829,   98,   96,   96,  829,   98,   96,   96,   96,
       98,   98,   98,   96,   98,   96,  622,  623,   98,  619,
       96,   98,   98,  620,   96,   98,   98,   98,   96,   96,
       96,   98,  829,   98,  829,   96,   96,   96,   98,   96,
      626,  829,   98,  628,  625,   96,   98,   98,   98,  627,

      630,   96,  629,   98,   98,   98,  631,   98,   96,  632,
      829,  634,   96,   98,  633,  829,   96,  637,  635,   98,
      829,   96,  636,   96,   96,   96,   98,  640,  638,   96,
       98,   96,   96,  641,   98,   96,  829,  829,  639,   98,
      829,   98,   98,   98,   96,   96,   96,   98,   96,   98,
       98,   96,   96,   98,  644,  642,   96,  829,  645,   96,
       96,  643,   98,   98,   98,  829,   98,   96,  829,   98,
       98,   96,   96,   96,   98,  649,  656,   98,   98,   96,
      652,   96,   96,  647,   96,   98,  648,   96,  646,   98,
       98,   98,  650,  651,  654,  653,   96,   98,  829,   98,

       98,   96,   98,  829,   96,   98,  655,   96,   96,   96,
      829,   96,  829,  666,   98,   96,  660,   96,   96,   98,
      657,  659,   98,   96,  829,   98,   98,   98,  658,   98,
      661,   96,  664,   98,  829,   98,   98,   96,   96,  663,
       96,   98,  662,   96,  667,   96,   96,  668,  665,   98,
       96,   96,  670,   96,  669,   98,   98,  829,   98,   96,
      829,   98,   96,   98,   98,   96,  671,   96,   98,   98,
       96,   98,   96,   96,  829,  672,   96,   98,  673,   96,
       98,   96,   96,   98,  675,   98,  829,   96,   98,  674,
       98,   98,  677,  680,   98,  829,  682,   98,  829,   98,

       98,   96,  676,  829,  678,   98,  829,   96,   96,  681,
       96,  679,   96,  687,   96,  686,  685,  829,   96,   98,
       96,  683,   96,   96,  684,   98,   98,  688,   98,   96,
       98,   96,   98,   96,   96,  690,   98,  829,   98,   96,
       98,   98,  689,   96,   96,  829,   96,   98,  829,   98,
      699,   98,   98,   96,   96,  691,   96,   98,   96,  829,
       96,   98,   98,  694,   98,   96,  696,   96,  829,  829,
       96,   98,   98,   96,   98,  697,   98,  692,   98,  693,
       96,   96,   96,   98,  695,   98,  701,  703,   98,  698,
       96,   98,   96,  829,  700,   96,  702,  704,   98,   98,

       98,  705,  829,  707,  706,   96,   96,   96,   98,  709,
       98,  710,  711,   98,   96,   96,   96,   96,  712,   96,
      708,  713,  829,   98,   98,   98,   96,   96,   96,   96,
      725,   96,   98,   98,   98,   98,   96,   98,   96,  714,
      715,   96,   96,  716,   98,   98,   98,   98,   96,   98,
       96,  717,   96,   96,   98,   96,   98,   96,  718,   98,
       98,   96,  719,   96,   96,   96,   98,  722,   98,  721,
       98,   98,   96,   98,   96,   98,   96,  829,  720,   98,
      829,   98,   98,   98,  728,  723,  726,   96,  727,   96,
       98,  724,   98,  729,   98,  730,  731,   96,  732,   96,

       96,   96,  829,   96,   96,   98,  829,   98,   96,   96,
       96,  735,   96,  734,   96,   98,   96,   98,   98,   98,
      737,   98,   98,  829,  733,   96,   98,   98,   98,  829,
       98,  736,   98,  738,   98,  742,  739,   96,   96,   96,
       96,  740,   96,   98,  741,   96,  744,  743,  746,   96,
      745,  750,   96,  752,   96,   98,   98,   98,   98,  753,
       98,   96,   96,   98,   96,   96,  751,   98,   96,   96,
       98,   96,   98,   96,  829,  829,   96,  829,   96,   98,
       98,  829,   98,   98,  829,   96,   98,   98,   96,   98,
      829,   98,  754,  758,   98,  755,   98,   96,   96,  756,

       96,  829,  757,   98,  761,  829,   98,  764,  767,   96,
      759,  765,  771,   96,  760,   98,   98,  766,   98,  772,
       96,   96,  763,  762,   96,   96,   96,   98,   96,   96,
       96,   98,  775,  774,   96,   96,   96,  829,   98,   98,
      773,  829,   98,   98,   98,   96,   98,   98,   98,   96,
       96,   96,   98,   98,   98,  777,  829,  778,   96,  776,
       96,   96,   96,   98,   96,  829,   96,   98,   98,   98,
      829,  829,   96,  780,  782,  829,   98,  789,   98,   98,
       98,   96,   98,  779,   98,  783,   96,  781,  798,  798,
       98,  798,  798,  791,  768,  790,  829,  829,   96,   98,

      793,  769,  787,  787,   98,  787,  787,   96,  795,   96,
       96,   96,  792,   96,  797,  788,   98,  794,   96,  829,
      829,  796,  829,  799,   96,   98,  829,   98,   98,   98,
       96,   98,   96,  800,  798,  798,   98,  798,  798,   96,
      768,  829,   98,   96,  801,  829,   96,  769,   98,   96,
       98,  829,   96,  829,  829,  829,   96,   98,  802,  804,
      829,   98,   96,  807,   98,   96,   96,   98,   96,  803,
       98,  805,  809,  806,   98,   96,   96,   96,  808,   96,
       98,   96,   96,   98,   98,   96,   98,  829,  810,  829,
       96,   96,  829,   98,   98,   98,   96,   98,  815,   98,

       98,  811,   96,   98,  812,  816,  829,  813,   98,   98,
      814,   96,   96,   96,   98,  829,  829,  829,  829,  819,
       98,  829,  829,  818,  817,  820,  829,  829,  829,   98,
       98,   98,  829,  823,  829,  829,  829,  829,  825,  829,
      829,  829,  822,  821,  829,  827,  829,  829,  829,  829,
      829,  829,  824,  829,  829,  828,  829,  829,  829,  829,
      829,  829,  829,  826,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   68,   68,   68,   68,  829,
       68,   68,   68,   68,   68,   68,   97,  829,  829,  829,
       97,   97,   97,   97,  172,  172,  172,  173,  173,  173,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  272,  272,  373,  373,  829,  373,  747,  829,  829,
      829,  747,  829,  747,  747,  747,  747,  770,  829,  829,
      770,  829,  770,  770,  770,  770,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,    3,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,

      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829
    } ;

static yyconst short int yy_chk[3233] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   13,   13,   14,   19,  786,
       22,   21,   22,   22,   22,   22,   22,   22,   22,   22,

       32,   28,   23,   33,   19,   21,   21,   23,   14,   26,
       30,   30,   40,   26,  180,   69,   68,  101,   32,   23,
       28,   33,   28,   28,   61,   69,   57,   98,   10,   24,
       40,   24,   24,   24,   24,   24,   24,   24,   24,   97,
       34,   96,   39,   95,   34,   34,   44,   91,   47,   24,
      725,  725,   24,   24,   24,   68,   85,   97,   24,   24,
       39,   33,   34,   41,   44,   43,   47,   99,   61,   24,
       76,   42,   40,   24,   24,   57,   24,  747,  747,  748,
       63,   41,   45,   43,   24,   99,  748,   24,   25,   42,
       25,   25,   25,   25,   25,   25,   25,   25,   44,   39,

       45,   44,  100,   39,   44,   39,   47,   41,   25,  178,
       37,   25,   25,   25,   41,   42,   42,   25,   41,   42,
       43,   41,   43,   48,   50,   99,   42,   46,   25,   42,
       45,   43,   25,   25,   49,   25,  103,  104,   51,  126,
       45,   48,   50,   25,   38,   46,  100,   52,  105,  768,
       29,  770,   49,  178,  103,  104,   51,  126,  770,   53,
      784,   54,   38,  106,   55,   52,  105,   48,   38,   38,
       38,   48,   50,   38,   18,   38,   46,   53,   38,   54,
       38,  106,   55,   46,   46,   15,   51,   38,   46,   51,
       51,  103,   38,  768,   49,  104,   38,   49,   52,  109,

       51,   51,  126,   51,  784,   38,  105,    9,   55,    3,
      114,   53,    0,   54,   52,   55,   53,  109,  106,   54,
       77,   77,   77,   77,   77,   77,   77,   77,  114,  113,
      107,    0,  769,  769,    0,  769,  769,    0,   77,   77,
        0,   77,   77,   77,   83,  769,   83,  113,  107,   83,
       83,   83,   83,   83,   83,   83,   83,    0,   77,   77,
      111,  109,   77,   77,  108,   77,   81,   81,   81,   81,
       81,   81,   81,   81,   84,   84,   84,  114,  111,  118,
       84,  112,  108,  115,   81,   81,  107,   81,   81,   81,
        0,  113,  116,    0,    0,   84,   84,  118,   84,  112,

        0,  115,    0,    0,   81,   81,   84,  117,   81,   81,
      116,   81,   82,  121,   82,   82,   82,   82,   82,   82,
       82,   82,  108,    0,    0,  117,  111,  108,  119,  120,
      122,  121,   82,  123,    0,   82,   82,   82,  112,  115,
      118,   82,  124,  125,  127,  128,  119,  120,  122,    0,
        0,  123,   82,    0,  116,  117,   82,   82,  130,   82,
      124,  125,  127,  128,    0,  131,  132,   82,  110,  135,
      121,  129,  119,  120,    0,  133,  130,    0,  134,    0,
        0,  138,  123,  131,  132,  123,  110,  135,  136,  129,
        0,  124,  122,  133,    0,  123,  134,  124,  125,  138,

        0,  140,    0,  137,  139,  127,  136,  141,  128,    0,
        0,    0,  110,  110,  110,  110,  110,  110,  130,  140,
      110,  137,  139,  131,    0,  141,  132,  110,  110,  110,
      110,  110,  110,  129,  142,  143,  145,  133,  144,    0,
      134,  147,  138,    0,  146,  150,  148,  136,  153,  137,
      155,  149,  142,  143,  145,  151,  144,  140,  137,  147,
      152,  139,  146,  150,  148,  137,  153,  157,  155,  149,
        0,  154,  141,  151,    0,    0,  156,    0,  152,    0,
      143,    0,    0,  158,    0,  157,  142,    0,  144,  154,
      148,  147,  142,  148,  156,  144,  149,  150,  145,  144,

      144,  158,  146,  173,  148,  153,  148,  151,  182,  147,
      155,  169,  169,  169,  169,  169,  169,  169,  169,  152,
      177,  173,    0,  154,    0,    0,  182,    0,  156,  157,
      187,  156,  154,    0,  163,  158,  163,  181,  177,  163,
      163,  163,  163,  163,  163,  163,  163,  164,  187,  164,
      164,  164,  166,    0,  166,  181,    0,  166,  166,  166,
      166,  166,  166,  166,  166,    0,  182,  164,    0,    0,
      164,  164,  183,  164,  165,  177,  165,  165,  165,  165,
      165,  165,  165,  165,  167,  187,  167,  167,  167,  181,
      183,    0,    0,    0,  165,  165,    0,  165,  165,  165,

        0,    0,  184,    0,  167,  195,    0,  167,  167,  189,
      167,  168,  168,  168,  165,  165,  196,  168,  165,  165,
      184,  165,  186,  195,  185,    0,    0,  189,  183,  172,
        0,    0,  168,  168,  196,  168,    0,  188,    0,  190,
      186,  191,  185,  168,  170,  170,  170,  170,  170,  170,
      170,  170,  172,  172,  172,  188,  172,  190,  172,  191,
      184,    0,  195,  170,  189,  170,  170,  170,  185,    0,
      189,  189,  192,  172,  172,  193,  172,  194,  196,  186,
      172,  188,  186,  170,  172,  197,  170,  170,  191,  170,
      192,  198,  200,  193,  199,  194,  201,  202,  206,  191,

      203,  204,  190,  197,  205,  207,  208,  210,  209,  198,
      200,  211,  199,  212,  201,  202,  206,    0,  203,  204,
      192,  213,  205,  207,  208,  210,  209,    0,  214,  211,
        0,  212,  194,  197,  215,  194,    0,    0,    0,  213,
      216,  193,  217,  198,  218,  199,  214,  205,  204,  200,
      208,  219,  215,  198,  201,  203,  209,    0,  216,  202,
      217,  199,  218,  207,  220,  213,    0,  210,    0,  219,
      221,  222,  211,    0,  212,  212,    0,  223,  224,  225,
      214,    0,  220,  226,  216,    0,  217,  227,  221,  222,
      228,  215,  218,  229,  217,  223,  224,  225,  230,  219,

        0,  226,  231,  219,    0,  227,  232,    0,  228,  220,
        0,  229,  233,  234,  235,  237,  230,  238,  221,  232,
      231,  240,  232,  225,  232,  223,  224,  222,  236,  239,
      233,  234,  235,  237,  241,  238,    0,  242,  236,  240,
        0,  243,    0,  244,    0,    0,  236,  239,  228,  245,
      246,  229,  241,  247,  231,  242,  248,  249,  230,  243,
      233,  244,  235,  234,    0,  250,    0,  245,  246,  251,
      252,  247,  253,  240,  248,  249,  238,  254,  255,  237,
      256,    0,  241,  250,  239,    0,    0,  251,  252,    0,
      253,    0,  257,  258,  259,  254,  255,  260,  256,  242,

        0,  247,  261,  249,  243,  262,    0,  246,    0,  245,
      257,  258,  259,  263,    0,  260,  252,  276,  248,    0,
      261,  280,  303,  262,  250,  285,  255,    0,    0,  295,
      278,  263,  251,    0,  253,  276,  277,  279,  254,  280,
      303,    0,  256,  285,  260,  258,  261,  295,  278,  282,
      257,  262,    0,    0,  277,  279,  259,  264,  264,  264,
      264,  264,  264,  264,  264,  280,  303,  282,  263,  265,
      265,  265,  265,  265,  265,  265,  265,  266,  266,  266,
      266,  266,  266,  266,  266,  278,  277,  285,  265,  295,
      265,  265,  265,  267,    0,  267,  279,    0,  267,  267,

      267,  267,  267,  267,  267,  267,  282,    0,  265,  283,
        0,  265,  265,  268,  265,  268,  268,  268,  269,  269,
      269,  269,  269,  269,  269,  269,    0,  283,  271,    0,
      271,  271,  271,  268,    0,  287,  268,  268,  288,  268,
      270,  270,  270,  270,  270,  270,  270,  270,  271,    0,
        0,  271,  271,  287,  271,    0,  288,  283,  309,  270,
      284,  270,  270,  270,  272,    0,  272,  272,  272,  273,
      272,  273,  273,  273,    0,  273,  309,    0,  284,  270,
        0,    0,  270,  270,  272,  270,  281,  272,  272,  273,
      272,  287,  273,  273,  272,  273,  274,  274,  274,  273,

      288,  275,  274,  275,  281,  286,  275,  275,  275,  275,
      275,  275,  275,  275,  289,  284,  290,  274,  274,  291,
      274,  292,  293,  286,  294,  296,  297,  298,  274,  299,
      300,  301,  289,  302,  290,  304,  281,  291,  308,  292,
      293,  305,  294,  296,  297,  298,    0,  299,  300,  301,
      306,  302,  307,  304,  310,  311,  308,  286,    0,  305,
      312,    0,    0,  313,  290,  314,  289,  292,  306,    0,
      307,    0,  310,  311,    0,  316,  291,  300,  312,  299,
      296,  313,  294,  314,  293,  315,  297,  296,  298,  305,
      304,  301,  302,  316,  317,  319,  308,  318,  307,  320,

      321,  322,  306,  315,  323,  324,    0,  326,  310,    0,
      325,  327,  317,  319,  328,  318,  329,  320,  321,  322,
      316,  330,  323,  324,  313,  326,    0,  314,  325,  327,
      331,  332,  328,  334,  329,  335,  333,  315,  336,  330,
      319,  337,  317,    0,  318,    0,  338,  335,  331,  332,
      339,  334,  336,  335,  333,  340,  336,  321,  341,  337,
      342,  324,  320,  322,  338,  325,    0,  343,  339,  344,
      323,  345,    0,  340,  328,  346,  341,  347,  342,  348,
      349,  329,  350,  330,  333,  343,  351,  344,  352,  345,
      334,  332,  353,  346,  355,  347,  354,  348,  349,  356,

      350,    0,  341,  337,  351,  357,  352,  358,  342,  359,
      353,  339,  355,  360,  354,  361,  362,  356,    0,  343,
        0,  363,    0,  357,    0,  358,  364,  359,  349,  365,
      344,  360,  352,  361,  362,  346,  345,  347,  351,  363,
      350,  348,  354,  366,  364,  356,  380,  365,    0,  355,
      384,  357,    0,    0,  358,    0,    0,  353,    0,    0,
        0,  366,    0,  379,  380,  361,  383,  382,  384,  381,
      360,  367,  367,  367,  367,  367,  367,  367,  367,  362,
      365,  379,    0,    0,  383,  382,    0,  381,  364,    0,
        0,  366,  368,  368,  368,  368,  368,  368,  368,  368,

      369,  369,  369,  369,  369,  369,  369,  369,  371,  412,
      371,  371,  371,  384,    0,  393,    0,  385,  383,  369,
      379,  369,  369,  369,  381,    0,    0,  412,  371,  382,
      390,  371,  371,  393,  371,  385,    0,    0,    0,  369,
      386,    0,  369,  369,  372,  369,  372,    0,  390,  372,
      372,  372,  372,  372,  372,  372,  372,  373,  386,  373,
      373,  373,  375,  373,  375,  375,  375,  377,  377,  377,
      377,  377,  377,  377,  377,  387,  393,  373,    0,  385,
      373,  373,  375,  373,  386,  375,  375,  373,  375,  376,
      390,  376,  388,  387,  376,  376,  376,  376,  376,  376,

      376,  376,  378,  378,  378,  378,  378,  378,  378,  378,
      388,  389,  391,  392,  394,  395,  396,    0,  397,  398,
      401,  378,  402,  378,  378,  378,    0,  387,    0,  389,
      391,  392,  394,  395,  396,  399,  397,  398,  401,  400,
      402,  378,  388,  403,  378,  378,  399,  378,  399,    0,
      404,  399,  400,  399,  389,  400,  405,  400,  406,  392,
      396,  403,  407,  395,  397,  408,  409,  391,  404,  394,
      410,  398,  411,  413,  405,  414,  406,  415,  417,  402,
      407,  416,  401,  408,  409,  419,    0,  418,  410,  403,
      411,  413,  420,  414,  421,  415,  417,  422,  404,  416,

      423,  424,  425,  419,  405,  418,  407,    0,  426,  427,
      420,  428,  421,  406,  410,  422,  413,  411,  423,  424,
      425,  429,  408,  409,    0,  416,  426,  427,  430,  428,
      431,  432,    0,  417,  415,  418,  433,  434,  435,  429,
      419,    0,  421,  436,  437,  422,  430,  420,  431,  432,
      425,  439,  438,  427,  433,  434,  435,  440,  441,  423,
      424,  436,  437,  442,  443,  426,  446,  440,  444,  439,
      438,  447,  445,  448,  449,  440,  441,  430,  431,    0,
        0,  442,  443,  429,  446,  450,  444,    0,  451,  447,
      445,  448,  449,  452,    0,    0,  454,  435,  438,    0,

      455,  453,    0,  450,  437,  436,  451,  456,    0,  457,
      441,  452,  446,  439,  454,  444,  458,  448,  455,  453,
      442,  445,  459,    0,  472,  456,  447,  457,  468,  450,
        0,    0,  470,    0,  458,  469,  449,  471,  475,  451,
      459,  480,  472,  470,  453,    0,  468,    0,  452,  453,
      470,  456,    0,  469,    0,  471,  475,  455,    0,  480,
      458,  457,  460,  460,  460,  460,  460,  460,  460,  460,
      461,  461,  461,  461,  461,  461,  461,  461,  463,  472,
      463,  463,  463,  469,  475,  473,  468,  479,  510,  461,
      482,  461,  461,  461,  471,    0,  480,    0,  463,  474,

      481,  463,  463,  473,  463,  479,  510,    0,  482,  461,
        0,    0,  461,  461,  464,  461,  464,  474,  481,  464,
      464,  464,  464,  464,  464,  464,  464,  465,  465,  465,
      465,  465,  465,  465,  465,  466,  466,  466,  466,  466,
      466,  466,  466,  467,  474,  467,  467,  467,  473,  479,
      476,  482,  477,  478,  466,  483,  466,  466,  466,    0,
        0,  484,  481,  467,  486,  485,  467,  467,  476,  467,
      477,  478,  487,  483,  466,  488,  490,  466,  466,  484,
      466,    0,  486,  485,  487,  489,  491,  488,  490,    0,
      487,  492,  493,  488,  490,  477,  496,  494,  495,  489,

      491,  497,  498,  489,  491,  478,  499,  476,  500,  492,
      493,  501,  483,  485,  496,  494,  495,  502,  504,  497,
      498,  486,    0,  484,  499,  503,  500,  505,  506,  501,
      507,  508,  509,    0,  511,  502,  504,  512,    0,  513,
      493,  494,  495,  503,  514,  505,  506,  515,  507,  508,
      509,  492,  511,  497,  496,  512,  500,  513,  516,  517,
      518,    0,  514,    0,  498,  515,  501,  499,  519,  520,
      502,  521,  503,  522,  503,  506,  516,  517,  518,  508,
      523,  504,  503,  524,  503,  525,  519,  520,  505,  521,
      526,  522,  527,  528,  509,  512,  507,  513,  523,  529,

      530,  524,    0,  525,  531,  532,  533,  534,  526,  535,
      527,  528,  536,  520,  537,  538,  540,  529,  530,  521,
      516,  539,  531,  532,  533,  534,  541,  535,  542,    0,
      536,  524,  537,  538,  540,  522,  526,    0,    0,  539,
      546,    0,  545,  547,  541,  549,  542,  543,  543,  543,
      543,  543,  543,  543,  543,  547,  536,  550,  546,  531,
      545,  547,  554,  549,  538,    0,    0,  532,  534,  539,
        0,  540,  537,  542,  548,  550,  551,  552,  553,  557,
      554,  541,  544,  544,  544,  544,  544,  544,  544,  544,
      555,  545,  548,  556,  551,  552,  553,  557,  558,    0,

      549,  544,    0,  544,  544,  544,  546,    0,  555,    0,
      559,  556,  560,    0,  562,  561,  558,  550,  548,  563,
      552,  544,  564,  565,  544,  544,  561,  544,  559,  566,
      560,  551,  562,  561,  567,  555,  553,  563,  568,  564,
      564,  565,  569,  570,  571,  556,  572,  566,    0,    0,
      574,    0,  567,  573,  575,    0,  568,  576,  577,  578,
      569,  570,  571,  579,  572,  581,  562,  563,  574,  559,
      582,  573,  575,  560,  580,  576,  577,  578,  583,  584,
      586,  579,    0,  581,    0,  585,  587,  588,  582,  589,
      570,    0,  580,  572,  569,  590,  583,  584,  586,  571,

      574,  591,  573,  585,  587,  588,  575,  589,  592,  576,
        0,  579,  593,  590,  578,    0,  594,  581,  580,  591,
        0,  595,  580,  596,  597,  598,  592,  584,  582,  599,
      593,  600,  601,  585,  594,  602,    0,    0,  583,  595,
        0,  596,  597,  598,  603,  605,  606,  599,  604,  600,
      601,  607,  608,  602,  592,  590,  609,    0,  593,  610,
      611,  591,  603,  605,  606,    0,  604,  612,    0,  607,
      608,  613,  615,  614,  609,  599,  610,  610,  611,  617,
      602,  616,  618,  596,  619,  612,  597,  622,  595,  613,
      615,  614,  600,  601,  606,  604,  620,  617,    0,  616,

      618,  621,  619,    0,  623,  622,  607,  624,  625,  626,
        0,  627,    0,  621,  620,  628,  615,  629,  630,  621,
      611,  614,  623,  631,    0,  624,  625,  626,  613,  627,
      616,  632,  619,  628,    0,  629,  630,  633,  634,  618,
      635,  631,  617,  636,  622,  637,  640,  623,  620,  632,
      638,  639,  626,  641,  625,  633,  634,    0,  635,  642,
        0,  636,  643,  637,  640,  644,  627,  645,  638,  639,
      646,  641,  647,  648,    0,  630,  649,  642,  631,  650,
      643,  651,  652,  644,  634,  645,    0,  653,  646,  632,
      647,  648,  636,  638,  649,    0,  641,  650,    0,  651,

      652,  654,  635,    0,  636,  653,    0,  655,  656,  639,
      657,  637,  658,  646,  659,  645,  644,    0,  660,  654,
      661,  642,  662,  663,  643,  655,  656,  649,  657,  664,
      658,  665,  659,  666,  669,  652,  660,    0,  661,  667,
      662,  663,  651,  668,  670,    0,  674,  664,    0,  665,
      666,  666,  669,  672,  671,  655,  673,  667,  675,    0,
      678,  668,  670,  661,  674,  676,  663,  677,    0,    0,
      679,  672,  671,  680,  673,  664,  675,  657,  678,  660,
      681,  683,  682,  676,  662,  677,  668,  670,  679,  665,
      684,  680,  686,    0,  667,  685,  669,  671,  681,  683,

      682,  672,    0,  674,  673,  687,  688,  689,  684,  676,
      686,  677,  678,  685,  690,  691,  692,  693,  679,  695,
      675,  680,    0,  687,  688,  689,  694,  696,  697,  698,
      697,  699,  690,  691,  692,  693,  700,  695,  701,  681,
      682,  702,  703,  685,  694,  696,  697,  698,  705,  699,
      704,  687,  708,  706,  700,  707,  701,  709,  688,  702,
      703,  710,  690,  711,  712,  713,  705,  695,  704,  694,
      708,  706,  714,  707,  715,  709,  716,    0,  693,  710,
        0,  711,  712,  713,  702,  696,  698,  718,  700,  719,
      714,  696,  715,  704,  716,  705,  706,  717,  707,  720,

      721,  723,    0,  722,  724,  718,    0,  719,  726,  727,
      728,  712,  729,  711,  730,  717,  731,  720,  721,  723,
      714,  722,  724,    0,  710,  732,  726,  727,  728,    0,
      729,  713,  730,  715,  731,  719,  716,  733,  734,  735,
      736,  717,  737,  732,  718,  738,  722,  720,  724,  739,
      723,  726,  740,  728,  741,  733,  734,  735,  736,  731,
      737,  742,  743,  738,  744,  746,  727,  739,  745,  750,
      740,  751,  741,  752,    0,    0,  753,    0,  754,  742,
      743,    0,  744,  746,    0,  755,  745,  750,  756,  751,
        0,  752,  733,  738,  753,  734,  754,  757,  758,  736,

      759,    0,  737,  755,  741,    0,  756,  744,  746,  760,
      739,  744,  750,  761,  740,  757,  758,  745,  759,  751,
      762,  763,  743,  742,  764,  765,  766,  760,  771,  772,
      767,  761,  756,  755,  773,  774,  775,    0,  762,  763,
      754,    0,  764,  765,  766,  776,  771,  772,  767,  777,
      778,  779,  773,  774,  775,  758,    0,  760,  780,  757,
      781,  782,  783,  776,  789,    0,  790,  777,  778,  779,
        0,    0,  791,  765,  767,    0,  780,  773,  781,  782,
      783,  792,  789,  763,  790,  767,  793,  766,  785,  785,
      791,  785,  785,  775,  785,  774,    0,    0,  794,  792,

      778,  785,  787,  787,  793,  787,  787,  795,  781,  796,
      797,  800,  776,  799,  783,  787,  794,  780,  801,    0,
        0,  782,    0,  789,  802,  795,    0,  796,  797,  800,
      803,  799,  804,  791,  798,  798,  801,  798,  798,  805,
      798,    0,  802,  808,  793,    0,  806,  798,  803,  807,
      804,    0,  809,    0,    0,    0,  810,  805,  794,  796,
        0,  808,  811,  800,  806,  812,  813,  807,  814,  795,
      809,  797,  802,  799,  810,  815,  816,  817,  801,  818,
      811,  819,  820,  812,  813,  821,  814,    0,  803,    0,
      822,  823,    0,  815,  816,  817,  824,  818,  809,  819,

      820,  805,  825,  821,  806,  810,    0,  807,  822,  823,
      808,  826,  827,  828,  824,    0,    0,    0,    0,  815,
      825,    0,    0,  813,  812,  817,    0,    0,    0,  826,
      827,  828,    0,  821,    0,    0,    0,    0,  823,    0,
        0,    0,  820,  819,    0,  825,    0,    0,    0,    0,
        0,    0,  822,    0,    0,  827,    0,    0,    0,    0,
        0,    0,    0,  824,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  831,  831,  831,  831,    0,
      831,  831,  831,  831,  831,  831,  832,    0,    0,    0,
      832,  832,  832,  832,  833,  833,  833,  834,  834,  834,

      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  836,  836,  837,  837,    0,  837,  838,    0,    0,
        0,  838,    0,  838,  838,  838,  838,  839,    0,    0,
      839,    0,  839,  839,  839,  839,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,

      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1404 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1564 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 830 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3148 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ int r = preprocessor(); if(r) return r; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(INT); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return(INT); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(BUILTIN_OFFSETOF); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(SETPROP); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(GETPROP); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(ISPROPSET); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(INT128); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "lexer.l"
{ return(STATIC_ASSERT); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 81:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 218 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 222 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(check_type()); }     /* {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); } */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(CONSTANT); }  /* For triple OS X versions inside attributes... TODO: Add syntax errors elsewhere */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(WIDE_STRING_LITERAL); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 165:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return(';'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return('{'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 277 "lexer.l"
{ return('}'); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return(','); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return(':'); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return('='); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 281 "lexer.l"
{ return('('); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 282 "lexer.l"
{ return(')'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 283 "lexer.l"
{ return('['); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 284 "lexer.l"
{ return(']'); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 285 "lexer.l"
{ return('.'); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 286 "lexer.l"
{ return('&'); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 287 "lexer.l"
{ return('!'); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 288 "lexer.l"
{ return('~'); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 289 "lexer.l"
{ return('-'); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 290 "lexer.l"
{ return('+'); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 291 "lexer.l"
{ return('*'); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 292 "lexer.l"
{ return('/'); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 293 "lexer.l"
{ return('%'); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 294 "lexer.l"
{ return('<'); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 295 "lexer.l"
{ return('>'); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 296 "lexer.l"
{ return('^'); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 297 "lexer.l"
{ return('|'); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 298 "lexer.l"
{ return('?'); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 299 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 301 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 327 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 328 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 333 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 338 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 339 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 346 "lexer.l"
ECHO;
	YY_BREAK
#line 2688 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 830 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 830 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 829);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif	/* ifndef YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( (char *) ptr );	// see yy_flex_realloc() for (char *) cast
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 346 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            const char * pointer = line + 1;
            bool hasLineNumber = false;
            int lineNumber;
            char numberString[20];

            line[count] = 0;
            if(GetString(&pointer, numberString, sizeof(numberString)))
            {
               char * ptr = null;
               lineNumber = (int)strtol(numberString, &ptr, 10);
               if(ptr && ptr > numberString)
                  hasLineNumber = true;
            }

            if(hasLineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);

   if(!strncmp(line, "pragma", c))
   {
      /*
      External pragma;
      if(!ast)
         ast = MkList();
      pragma = MkExternalPragma(line);
      ListAdd(ast, pragma);
      */
      strcpy(yytext, line);
      return PRAGMA;
   }
   else if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = YY_CURRENT_BUFFER;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   YY_CURRENT_BUFFER = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   YY_CURRENT_BUFFER = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
