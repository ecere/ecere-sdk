#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 186
#define YY_END_OF_BUFFER 187
static yyconst short int yy_accept[770] =
    {   0,
      120,  120,  187,  185,  183,  182,  181,  184,  168,  185,
        1,  180,  174,  167,  185,  162,  163,  172,  171,  159,
      170,  166,  173,  126,  126,  160,  156,  175,  161,  176,
      179,  120,  120,  120,  164,  165,  177,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  157,  178,  158,  169,  155,
        0,  132,    0,  141,  158,  150,  142,    0,    0,  139,
      147,  137,  148,  138,  149,    0,  129,    2,    3,  140,
      130,  125,    0,  126,    0,  126,  120,  165,  157,  164,
      146,  152,  154,  153,  145,    0,  120,    0,  120,    0,

        0,  143,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,   11,  120,  120,  120,  120,  120,  120,
      120,  120,   19,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  144,  151,  127,  134,
        0,  129,  129,    0,  130,  125,    0,  128,    0,  121,
      120,  136,  135,  120,  120,    0,  133,    0,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  100,

      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,   17,
       47,  120,  120,  120,  120,   20,  120,  120,  120,   53,
      120,  120,  120,  120,  120,  120,  120,   46,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,    0,  129,  131,
        0,  129,    0,  130,  128,  123,  124,  121,    0,   66,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,    4,  120,    6,

        7,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,   13,   14,  120,  120,  120,   18,
      120,  120,  120,  120,  120,   22,  120,   54,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,   21,  120,  120,  120,
       40,  120,  120,  120,  131,    0,  129,  123,  123,    0,
      123,  123,  124,    0,    0,  122,   67,  120,  120,  120,
      120,  120,  120,  120,  101,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,    5,   49,    8,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
       16,  120,  120,  120,   60,   48,  120,  120,  120,  120,
      120,   55,  120,  120,   25,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,   38,  120,  120,  120,  103,
       44,    0,  123,  123,  123,    0,    0,  124,  122,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,   58,   52,  120,  120,   12,   15,
      120,   57,   96,   79,  120,  120,  120,   92,  120,   56,

      120,   24,   26,   29,   33,  120,  120,   35,  120,   36,
      120,  120,  120,  120,  120,  120,  120,    0,  123,  120,
      120,  120,  120,  120,  120,  120,   99,  120,  120,   84,
       90,  120,  120,  120,  120,  120,   59,  120,  120,  120,
      120,  120,  120,  120,   77,  120,  120,  120,  120,  120,
      120,  120,  120,  117,  118,  116,   10,  120,  120,  120,
      120,   93,  120,  120,  120,   88,  120,  120,  120,  120,
       37,  120,   51,  120,  120,   68,  120,  120,   72,  120,
      120,  120,  120,  120,  120,  120,  120,   78,   61,  120,
       27,  120,   34,  102,  120,  120,   87,  120,  120,  120,

      120,  120,  120,    9,  120,  120,  120,  120,  120,   45,
       23,   70,  120,  114,  120,  120,   39,   41,  120,   63,
      120,   83,   71,   31,  120,  120,  120,  120,  120,  120,
      120,  120,   85,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,   81,   82,  120,  115,  120,  120,   50,
      120,  106,   69,  120,  120,  120,  120,  120,   62,   76,
       89,   28,  120,   43,  120,   95,  112,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,   30,   75,  120,
      120,    0,  120,  120,   86,  120,   98,  120,  120,  109,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

       80,    0,  120,   91,   42,  120,  120,  120,  120,  120,
      105,  120,  104,   94,   74,  120,  120,  120,   97,  120,
      120,  120,  120,  119,  120,  120,  120,  120,  120,  120,
      107,  120,  113,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,   65,  120,  120,  120,  120,  120,  120,
       64,  120,  120,  111,  120,   32,  120,  108,  120,  120,
      120,  120,  120,  120,  120,  110,  120,   73,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   24,   26,   24,   27,   24,   28,   29,   30,
       31,   32,   33,    1,   34,   35,   36,   34,   37,   38,
       39,   39,   40,   41,   39,   42,   39,   43,   39,   44,
       39,   39,   39,   39,   45,   39,   39,   46,   39,   39,
       47,   48,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   39,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[81] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    1,    4,    1,    1,    1,    1,    5,    1,
        6,    6,    6,    6,    6,    6,    6,    2,    1,    1,
        1,    1,    1,    7,    7,    7,    7,    7,    8,    9,
        9,    9,    8,    9,    8,    8,    1,    1,    1,    1,
        8,    7,    7,    7,    7,    7,    7,    8,    8,    9,
        9,    8,    9,    8,    8,    8,    9,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[779] =
    {   0,
        0,    0,  216, 2933, 2933, 2933, 2933, 2933,  179,   74,
     2933, 2933,   51,   73,  158, 2933, 2933,  169,   69, 2933,
       70,   68,   83,  104,   94,   77, 2933,  123,  167,   65,
     2933,   96,  124,  127, 2933, 2933,  166,  145,  146,  131,
      161,  166,  165,  175,  180,  193,  159,  181,  184,  151,
      212,  215,  231,  220,  236, 2933,   80, 2933, 2933, 2933,
       99, 2933,  179, 2933, 2933, 2933, 2933,  100,   96, 2933,
     2933, 2933, 2933, 2933, 2933,  152,  276, 2933, 2933, 2933,
      319,  364,  303,  307,  150,    0,    0, 2933, 2933, 2933,
      135, 2933, 2933, 2933,  132,  109,  223,  108,  238,  136,

       84, 2933,  242,  245,  249,  256,  327,  425,  233,  343,
      264,  278,  294,  265,  366,  385,  386,  388,  353,  389,
      391,  384,  400,  404,  415,  418,  422,  428,  434,  438,
      441,  444,  446,  459,  462,  460,  475,  480,  487,  490,
      493,  494,  491,  496,  499,  517,  502,  506,  520,  509,
      525,  540,  530,  543,  554,  556, 2933, 2933, 2933, 2933,
      570,  570,  615,  642,  639,  643,  596,  694,    0,  682,
      559, 2933, 2933,    0,  634,  154, 2933,  110,  604,  618,
      662,  681,  682,  683,  697,  615,  720,  633,  663,  701,
      728,  702,  741,  733,  748,  751,  752,  754,  759,  757,

      760,  761,  762,  763,  766,  767,  770,  772,  788,  791,
      792,  795,  801,  796,  806,  814,  817,  819,  822,  827,
      828,  830,  835,  837,  843,  853,  848,  849,  855,  859,
      856,  857,  858,  871,  861,  880,  881,  882,  886,  884,
      887,  891,  902,  895,  905,  909,  907,  911,  914,  916,
      918,  923,  925,  927,  929,  936,  930,  975,  982,  989,
     1009,  931, 1025, 1032, 1022, 1027, 1058, 1063, 1114,  937,
     1050, 1010, 1099, 1086, 1100, 1101, 1105,  957, 1120, 1131,
     1132, 1134, 1135, 1139, 1136, 1138, 1142, 1141, 1144, 1143,
     1145, 1147, 1163, 1166, 1167, 1169, 1168, 1171, 1175, 1196,

     1197, 1200, 1204, 1205, 1207, 1208, 1218, 1210, 1219, 1220,
     1228, 1229, 1230, 1233, 1231, 1234, 1238, 1239, 1240, 1242,
     1243, 1244, 1264, 1276, 1265, 1267, 1269, 1271, 1280, 1277,
     1291, 1296, 1298, 1302, 1306, 1303, 1311, 1309, 1312, 1314,
     1316, 1325, 1317, 1330, 1332, 1335, 1336, 1341, 1350, 1348,
     1357, 1366, 1370, 1371, 1388, 1399, 1416,    0, 1390, 1443,
     1440,    0, 1445, 1493, 1467, 1500, 1372, 1435, 1390, 1444,
     1377, 1405, 1484, 1376, 1502, 1517, 1518, 1520, 1521, 1523,
     1522, 1524, 1528, 1536, 1526, 1434, 1544, 1554, 1555, 1556,
     1559, 1564, 1566, 1569, 1424, 1584, 1578, 1588, 1589, 1591,

     1592, 1593, 1598, 1602, 1603, 1604, 1612, 1614, 1616, 1617,
     1622, 1623, 1627, 1632, 1635, 1636, 1638, 1646, 1654, 1657,
     1661, 1662, 1664, 1667, 1666, 1675, 1669, 1680, 1676, 1685,
     1687, 1689, 1690, 1691, 1695, 1699, 1701, 1710, 1714, 1717,
     1722, 1754, 1761,    0, 1751, 1807, 1814, 1821, 1756, 1744,
     1725, 1745, 1732, 1733, 1737, 1838, 1839, 1798, 1840, 1841,
     1842, 1844, 1843, 1845, 1846, 1864, 1866, 1865, 1868, 1869,
     1874, 1872, 1877, 1888, 1878, 1890, 1903, 1908, 1909, 1912,
     1911, 1914, 1916, 1917, 1724, 1918, 1924, 1930, 1921, 1932,
     1939, 1940, 1943, 1948, 1950, 1951, 1958, 1963, 1966, 1971,

     1972, 1973, 1978, 1982, 1984, 1986, 1987, 1992, 1993, 1997,
     2002, 2005, 2006, 2008, 2007, 2012, 2013, 2021, 2055, 2027,
     2028, 2039, 2041, 2057, 2061, 2062, 2072, 2077, 2075, 2081,
     2083, 2091, 2095, 2099, 2103, 2106, 2109, 2111, 2115, 2118,
     2121, 2125, 2127, 2129, 2133, 2134, 2137, 2139, 2140, 2141,
     2145, 2149, 2152, 2155, 2164, 2168, 2173, 2174, 2175, 2183,
     2187, 2188, 2193, 2195, 2199, 2198, 2201, 2203, 2206, 2207,
     2208, 2211, 2217, 2221, 2219, 2222, 2229, 2233, 2237, 2242,
     2243, 2248, 2251, 2253, 2256, 2263, 2262, 2269, 2267, 2272,
     2276, 2275, 2278, 2281, 2282, 2283, 2285, 2287, 2291, 2297,

     2303, 2305, 2306, 2318, 2319, 2324, 2325, 2329, 2331, 2332,
     2337, 2339, 2340, 2347, 2351, 2352, 2353, 2358, 2362, 2363,
     2365, 2373, 2374, 2378, 2381, 2386, 2387, 2389, 2394, 2396,
     2397, 2399, 2405, 2408, 2400, 2415, 2420, 2421, 2424, 2431,
     2433, 2434, 2442, 2435, 2443, 2446, 2447, 2449, 2455, 2458,
     2465, 2467, 2468, 2469, 2470, 2471, 2477, 2481, 2483, 2489,
     2496, 2495, 2499, 2501, 2502, 2503, 2505, 2507, 2508, 2514,
     2511, 2517, 2521, 2523, 2527, 2529, 2530, 2533, 2548, 2543,
     2537,   96, 2552, 2553, 2549, 2559, 2564, 2579, 2584, 2585,
     2586, 2587, 2590, 2591, 2594, 2598, 2595, 2597, 2600, 2610,

     2933,   72, 2616, 2605, 2606, 2609, 2613, 2619, 2634, 2640,
     2647, 2652, 2648, 2655, 2659, 2661, 2662, 2663, 2666, 2667,
     2670, 2671, 2673, 2674, 2675, 2682, 2681, 2685, 2686, 2695,
     2696, 2700, 2701, 2711, 2714, 2716, 2723, 2719, 2724, 2729,
     2730, 2739, 2743, 2732, 2744, 2745, 2750, 2748, 2752, 2755,
     2757, 2759, 2763, 2768, 2773, 2779, 2782, 2789, 2791, 2792,
     2793, 2794, 2802, 2804, 2807, 2813, 2816, 2818, 2933, 2879,
     2888, 2896, 2901, 2902, 2911, 2915, 2917, 2923
    } ;

static yyconst short int yy_def[779] =
    {   0,
      769,    1,  769,  769,  769,  769,  769,  769,  769,  770,
      769,  769,  769,  769,  771,  769,  769,  769,  769,  769,
      769,  769,  769,  769,   24,  769,  769,  769,  769,  769,
      769,  772,  772,  772,  769,  769,  769,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  769,  769,  769,  769,  769,
      770,  769,  770,  769,  769,  769,  769,  771,  771,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  773,   25,  774,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  772,  769,  772,  775,

      771,  769,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  776,  773,
      772,  769,  769,  774,  772,  775,  769,  775,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  769,  769,  769,
      769,  769,  769,  769,  769,  776,  777,  769,  769,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  769,  769,  769,  266,  769,  769,
      777,  361,  769,  769,  769,  769,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  769,  769,  361,  769,  769,  769,  769,  769,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  769,  769,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  778,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      769,  778,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,    0,  769,
      769,  769,  769,  769,  769,  769,  769,  769
    } ;

static yyconst short int yy_nxt[3014] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   25,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   32,   32,   32,   32,   32,
       32,   34,   32,   32,   32,   32,   35,    4,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   32,   46,
       32,   32,   47,   32,   48,   32,   49,   50,   51,   52,
       53,   54,   55,   32,   32,   32,   56,   57,   58,   59,
       62,   64,   65,   66,   71,  701,   76,   73,   77,   77,
       77,   77,   77,   77,   77,   94,   95,   78,  769,   72,

       74,   75,   79,   67,   87,   62,   96,   68,   88,  701,
      157,  159,  769,   80,   86,   86,   86,   86,   86,   86,
       86,   63,   81,   98,   82,   82,   82,   82,   82,   82,
       82,   69,   89,  100,   96,  174,   98,   96,  101,  769,
       83,   96,  177,   84,   84,   84,   63,   69,   84,   85,
       90,   98,   91,   92,   98,   96,   96,  158,   98,   83,
      177,   96,  173,   84,   84,  172,   84,  769,  169,   96,
      160,   96,   98,   98,   84,   96,   96,   85,   98,  103,
      104,  769,  105,  178,  106,   96,   98,  107,   98,   99,
       96,   96,   98,   98,   96,  108,  102,   93,  115,   70,

      109,  178,   98,   96,  110,   69,  142,   98,   98,   60,
      112,   98,  116,  111,  113,  769,  114,  120,  121,  117,
       98,  122,   96,  118,  137,   96,  119,  125,  123,  126,
       96,  124,  138,   96,  128,  131,  139,  129,  127,   98,
      130,   96,   98,   96,  769,  132,   96,   98,   96,  133,
       98,  140,   96,  769,  141,   96,  134,  135,   98,   96,
       98,  136,  769,   98,  769,   98,   96,  143,  769,   98,
      144,  145,   98,  149,   96,   96,   98,  769,  769,  153,
      769,  146,  147,   98,  148,  154,  769,  155,   96,  150,
      151,   98,   98,  769,  156,  152,   77,   77,   77,   77,

       77,   77,   77,  175,   96,   98,  196,  179,  769,  769,
      180,  181,  161,  162,  769,  162,  162,  162,  167,  182,
      167,   98,  769,  168,  168,  168,  168,  168,  168,  168,
      769,  161,  162,  198,  201,  162,  162,   96,  162,  163,
      163,  163,  163,  163,  163,  163,   84,   84,   84,  769,
      769,   84,  199,   96,   98,  164,  165,  200,  165,  165,
      165,  769,  769,   96,  769,  769,   84,   84,  769,   84,
       98,  769,  769,  769,  164,  165,   96,   84,  165,  165,
       98,  165,   81,  769,   82,   82,   82,   82,   82,   82,
       82,  769,  183,   98,   96,   96,   96,  184,   96,   96,

       83,   96,  769,  166,  166,  166,  769,  197,  166,  769,
       96,   98,   98,   98,   96,   98,   98,  206,   98,   83,
      769,  202,  769,  166,  166,   96,  166,   98,   96,  769,
      769,   98,   96,  769,  166,   96,  769,  204,   96,  205,
      211,  769,   98,  769,   96,   98,  212,  208,   96,   98,
      209,   96,   98,  203,   96,   98,   96,  769,  207,  769,
      210,   98,  213,  769,  769,   98,  769,  769,   98,   96,
       96,   98,   96,   98,  214,  769,  185,  186,  187,  188,
      189,  190,  769,  215,  191,   96,   98,   98,  216,   98,
       96,  217,  192,  193,  194,  218,  195,   96,  769,  219,

       96,   96,   98,   96,   96,  220,   96,   98,  769,   96,
      221,  769,   96,  222,   98,  224,   96,   98,   98,   96,
       98,   98,  769,   98,  225,  223,   98,   96,  227,   98,
       96,  226,  769,   98,  769,   96,   98,  769,  769,  228,
       96,  769,  769,  229,   98,  233,  769,   98,  769,  231,
       96,  234,   98,   96,  246,  232,  240,   98,  235,  230,
      238,  239,  236,  237,   96,  247,   96,   98,  242,   96,
       98,  243,  769,  769,  241,  249,  769,  769,  769,  248,
      769,   98,  244,   98,  245,  258,   98,  258,  769,  250,
      259,  259,  259,  259,  259,  259,  259,  253,  769,  251,

      769,  769,  254,  769,  769,  255,  769,  162,  252,  162,
      162,  162,  769,  769,   96,  257,  168,  168,  168,  168,
      168,  168,  168,  256,  769,   96,  162,  769,   96,  162,
      162,   98,  162,  260,  769,  163,  163,  163,  163,  163,
      163,  163,   98,   96,   96,   98,  769,  769,  769,  769,
      769,  261,  262,  769,  262,  262,  262,  263,  769,  263,
       98,   98,  264,  264,  264,  264,  264,  264,  264,  271,
      261,  262,   96,   96,  262,  262,  165,  262,  165,  165,
      165,  272,  166,  166,  166,  281,  769,  166,  284,   98,
       98,   96,   96,   96,  769,  165,  270,  769,  165,  165,

      267,  165,  166,  166,  769,  166,  769,   96,   98,   98,
       98,   96,   96,  166,  168,  168,  168,  168,  168,  168,
      168,  268,  268,  268,   98,  269,  268,  273,   98,   98,
       96,  265,  274,  265,  265,  265,  285,  769,   96,  769,
      769,  268,  268,   96,  268,  277,  275,   98,  269,  276,
      265,   96,  268,  265,  265,   98,  265,  288,   96,  278,
       98,   96,   96,  286,   96,  279,  280,   96,   98,   96,
       96,   96,   96,   96,  282,   98,   96,   96,   98,   98,
       96,   98,   96,  769,   98,  283,   98,   98,   98,   98,
       98,  291,  287,   98,   98,  769,  769,   98,   96,   98,

      289,   96,   96,  769,  769,   96,   96,  292,  296,  297,
      290,   96,  299,  293,  295,   98,   96,  300,   98,   98,
      294,  305,   98,   98,   96,  298,  769,   96,   98,   96,
      301,  306,   96,   98,  302,  303,  304,   96,   96,  769,
       96,   98,  308,  309,   98,   96,   98,   96,  314,   98,
      311,  310,  307,   96,   98,   98,  312,   98,   96,   96,
      313,  315,   98,   96,   98,   96,   96,   96,   96,   96,
       98,   96,  317,  319,  318,   98,   98,  316,  324,  328,
       98,   96,   98,   98,   98,   98,   98,  769,   98,  769,
       96,   96,   96,  769,   96,  320,   96,   96,   98,  769,

      321,   96,  323,  325,  322,   96,  326,   98,   98,   98,
      327,   98,   96,   98,   98,   96,  333,   96,   98,   96,
      331,   96,   98,  330,   96,  769,   96,  329,   96,   98,
      332,  769,   98,   96,   98,   96,   98,   96,   98,   96,
       96,   98,  338,   98,  769,   98,   96,   96,  337,  334,
       98,  335,   98,  336,   98,  340,   98,   98,  769,  769,
      339,  341,  343,   98,   98,  769,  769,   96,  262,  346,
      262,  262,  262,  769,  769,  342,  344,  769,  769,  345,
      352,  351,  349,  348,   98,  347,  769,  262,  769,  353,
      262,  262,  354,  262,  350,  259,  259,  259,  259,  259,

      259,  259,  259,  259,  259,  259,  259,  259,  259,  355,
      355,  355,  355,  355,  355,  355,  374,  769,  769,  162,
       96,  162,  162,  162,  356,  769,  356,  769,  769,  357,
      357,  357,  357,  357,  357,  357,  769,   98,  162,  769,
      769,  162,  162,  769,  162,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  265,
       96,  265,  265,  265,  358,  769,  359,  359,  359,  165,
      360,  165,  165,  165,  769,  769,  368,   98,  265,  769,
      769,  265,  265,  358,  265,  769,  359,  359,  165,  359,
      769,  165,  165,  360,  165,  362,   96,  363,  363,  363,

      769,  364,  268,  268,  268,  769,  769,  268,  769,   96,
       96,   96,  367,   98,  362,   96,  769,  363,  363,  769,
      363,  769,  268,  268,  364,  268,   98,   98,   98,  365,
       96,  365,   98,  268,  366,  366,  366,  366,  366,  366,
      366,   96,   96,  370,   96,   96,   96,   98,   96,   96,
      369,   96,   96,   96,   96,   96,  372,   96,   98,   98,
      769,   98,   98,   98,  371,   98,   98,  373,   98,   98,
       98,   98,   98,   96,   98,  769,   96,   96,   96,   96,
      769,   96,  769,  375,  769,   96,  769,  769,  769,  378,
       98,  377,  380,   98,   98,   98,   98,  387,   98,  379,

      376,  386,   98,  382,  383,  381,   96,   96,  769,  385,
       96,  384,  388,  389,   96,   96,  769,   96,   96,  769,
       96,  391,  393,   98,   98,  390,  392,   98,   96,   96,
       96,   98,   98,  394,   98,   98,  395,   98,   96,   96,
       96,   96,  769,   96,   96,   98,   98,   98,   96,   96,
       96,  769,   96,   96,   96,   98,   98,   98,   98,  399,
       98,   98,  402,  400,  398,   98,   98,   98,  396,   98,
       98,   98,  401,  397,   96,   96,  769,   96,  769,   96,
      769,   96,  769,  769,  404,  769,   96,   96,  769,  403,
       96,   98,   98,  407,   98,  408,   98,  405,   98,  413,

      415,   96,  406,   98,   98,  409,   96,   98,   96,  411,
      412,  410,   96,   96,  769,  769,   96,  769,   98,   96,
      769,   96,   96,   98,   96,   98,   96,   96,  414,   98,
       98,  418,  419,   98,  416,   96,   98,  417,   98,   98,
       96,   98,   96,   98,   98,   96,   96,  769,  769,  769,
      420,   96,   98,  769,  769,  769,  769,   98,   96,   98,
       96,  769,   98,   98,  421,  429,  426,   96,   98,  423,
      422,  428,  425,  424,  427,   98,   96,   98,  431,  432,
       96,   96,   96,  433,   98,  434,   96,   96,  430,  435,
      769,  769,  769,   98,  769,  769,  769,   98,   98,   98,

       96,  769,  769,   98,   98,  436,  769,  437,  355,  355,
      355,  355,  355,  355,  355,   96,  769,   98,  438,  357,
      357,  357,  357,  357,  357,  357,  441,  359,  440,  359,
      359,  359,   98,  456,   96,  439,  357,  357,  357,  357,
      357,  357,  357,  769,   96,   96,  359,  453,  769,  359,
      359,   98,  359,  262,   96,  262,  262,  262,  442,  451,
      442,   98,   98,  443,  443,  443,  443,  443,  443,  443,
      769,   98,  262,  769,  454,  262,  262,  444,  262,  445,
      445,  445,  363,  446,  363,  363,  363,  366,  366,  366,
      366,  366,  366,  366,   96,  769,  444,  450,  469,  445,

      445,  363,  445,  452,  363,  363,  446,  363,  447,  769,
      447,   98,   96,  448,  448,  448,  448,  448,  448,  448,
      366,  366,  366,  366,  366,  366,  366,   96,   96,   98,
       96,   96,   96,   96,   96,  455,   96,  449,   96,  449,
      449,  449,  769,  769,   98,   98,   96,   98,   98,   98,
       98,   98,  457,   98,   96,   98,  449,  466,  769,  449,
      449,  467,  449,   98,   96,   96,   96,  769,  769,   96,
      769,   98,  769,  460,   96,  464,   96,  463,  769,   96,
      459,   98,   98,   98,  458,  462,   98,  465,   96,  461,
      769,   98,  769,   98,   96,  468,   98,  470,   96,   96,

      769,   96,   96,   96,  769,   98,  769,  473,   96,  471,
      472,   98,   96,   96,   96,   98,   98,  476,   98,   98,
       98,  477,   96,  474,   96,   98,   96,   96,  475,   98,
       98,   98,   96,   96,  478,  769,  769,   96,  769,   98,
      480,   98,   96,   98,   98,   96,   96,  482,   96,   98,
       98,  769,  479,  481,   98,  483,   96,  485,  486,   98,
      484,  769,   98,   98,   96,   98,  769,   96,  491,  489,
      487,   96,   96,   98,   96,  769,   96,   96,  488,   96,
      490,   98,  500,  493,   98,   96,   96,  494,   98,   98,
       96,   98,  492,   98,   98,   96,   98,   96,  769,   96,

       96,   96,   98,   98,  495,   96,  769,   98,  769,   96,
      498,   96,   98,  769,   98,  496,   98,   98,   98,  769,
       96,  497,   98,  501,   96,  504,   98,   96,   98,  503,
      499,  502,   96,  505,   96,   96,  507,   98,  506,  769,
      509,   98,   96,   96,   98,  512,  521,   96,  510,   98,
      513,   98,   98,  511,   96,   96,  508,  769,  769,   98,
       98,  515,  769,  769,   98,  514,  769,  769,  517,  769,
      769,   98,   98,  516,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  445,  525,
      445,  445,  445,  449,  523,  449,  449,  449,  359,  520,

      359,  359,  359,  524,  769,  769,  769,  445,   96,  522,
      445,  445,  449,  445,  769,  449,  449,  359,  449,  769,
      359,  359,  518,  359,  518,   98,  769,  519,  519,  519,
      519,  519,  519,  519,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  528,  363,  769,
      363,  363,  363,  769,  769,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   96,   96,   96,  363,   96,   96,
      363,  363,   96,  363,   96,  769,  536,   96,   96,  527,
      537,   98,   98,   98,  769,   98,   98,  769,   96,   98,

       96,   98,  526,  530,   98,   98,  769,  533,  769,  529,
      535,  531,  532,   96,  534,   98,  769,   98,   96,   96,
      540,   96,   96,  539,   96,  541,   96,   96,   96,  769,
       98,   96,  538,  545,   96,   98,   98,  542,   98,   98,
       96,   98,   96,   98,   98,   98,  543,  769,   98,   96,
       96,   98,  546,   96,  769,  769,  544,   98,   96,   98,
       96,   96,  548,  547,  549,  554,   98,   98,   96,  769,
       98,  556,  550,   96,  551,   98,   96,   98,   98,  552,
      553,   96,   96,   96,  769,   98,  557,  555,   96,  558,
       98,  769,   96,   98,   96,  559,   96,   96,   98,   98,

       98,  561,   96,   96,  769,   98,  562,   96,  560,   98,
      769,   98,   96,   98,   98,   96,   96,   96,   96,   98,
       98,  564,   96,   96,   98,  565,  769,  563,  769,   98,
      769,  769,   98,   98,   98,   98,  769,   96,   96,   98,
       98,  519,  519,  519,  519,  519,  519,  519,  566,   96,
      577,   96,  769,  569,   98,   98,  567,  769,  769,  769,
      769,  568,  571,  572,  769,  575,   98,   96,   98,  573,
      570,   96,   96,  769,  574,  519,  519,  519,  519,  519,
      519,  519,   96,  769,   98,   96,  769,   96,   98,   98,
      578,   96,  445,   96,  445,  445,  445,  769,  769,   98,

      576,   96,   98,  579,   98,   96,  769,  769,   98,   96,
       98,  445,  769,   96,  445,  445,   96,  445,   98,   96,
      587,   96,   98,  581,  580,   96,   98,  582,   96,  583,
       98,   96,  589,   98,  584,   96,   98,   96,   98,   96,
      769,  769,   98,   96,   96,   98,  769,   96,   98,   96,
       96,   96,   98,  769,   98,   96,   98,  585,  588,   96,
       98,   98,   96,  586,   98,   96,   98,   98,   98,  591,
      590,  769,   98,  769,   96,  593,   98,  769,   96,   98,
      592,  594,   98,   96,   96,   96,  595,  769,  596,  769,
      599,   98,  598,   96,  600,   98,  597,   96,   96,  601,

       98,   98,   98,   96,  604,   96,  602,  605,   96,   96,
       98,   96,  603,   96,   98,   98,   96,   96,   96,  769,
       98,   96,   98,  769,  769,   98,   98,   96,   98,   96,
       98,   96,   96,   98,   98,   98,  608,  769,   98,   96,
      609,  606,  607,   96,   98,  769,   98,   96,   98,   98,
      769,  769,   96,   96,  613,  620,   98,  769,   96,  616,
       98,   96,  611,   96,   98,  617,   96,  610,  612,   98,
       98,  614,   96,   96,  615,   98,  618,   96,   98,   96,
       98,  619,   96,   98,  629,   96,   96,  769,   96,   98,
       98,   96,   96,   96,   98,   96,   98,   96,  623,   98,

      621,   96,   98,   98,  624,   98,  622,   96,   98,   98,
       98,  627,   98,   96,   98,   96,   96,  626,   98,  630,
      769,  625,  628,  769,   98,  631,  632,  769,   96,   96,
       98,  769,   98,   98,   96,   96,  769,  633,  769,   96,
      636,   96,   96,  769,  634,   98,   98,   96,  635,   96,
       96,   98,   98,  638,  769,  641,   98,   96,   98,   98,
      637,   96,   96,   96,   98,  639,   98,   98,   96,  643,
      769,  642,   96,   96,   98,   96,  640,  769,   98,   98,
       98,  769,  648,   96,   96,   98,  647,  646,   96,   98,
       98,   96,   98,  644,  645,  769,   96,   96,  649,   96,

       98,   98,  769,  769,   96,   98,   96,   96,   98,   96,
       96,  769,  651,   98,   98,   96,   98,  652,   96,  650,
      659,   98,  769,   98,   98,   96,   98,   98,  654,  769,
       96,   96,   98,  769,   96,   98,  656,  769,  769,  653,
      657,   96,   98,   96,   96,   96,  660,   98,   98,  662,
      655,   98,   96,   96,  658,  663,   96,   96,   98,   96,
       98,   98,   98,  664,  665,   96,  661,  769,   96,   98,
       98,  667,  668,   98,   98,   96,   98,   96,   96,   96,
       96,   96,   98,  669,  666,   98,  670,   96,  671,  682,
      769,   96,   98,   96,   98,   98,   98,   98,   98,   96,

      672,  674,  675,  769,   98,   96,   96,  673,   98,   96,
       98,   96,   96,   96,  676,   96,   98,   96,   96,  678,
      677,   96,   98,   98,   96,  679,   98,   96,   98,   98,
       98,   96,   98,   96,   98,   98,  680,   96,   98,   96,
       96,   98,  681,   96,   98,  683,  684,   96,   98,  685,
       98,  686,  687,   96,   98,  769,   98,   98,   96,   96,
       98,  769,   96,   96,   98,  689,  769,  769,  690,   96,
       98,  769,  692,  769,   96,   98,   98,  688,  695,   98,
       98,  769,  769,  697,  691,  769,   98,  693,  700,   96,
      694,   98,  769,  696,   96,   96,   96,   96,  698,  699,

       96,   96,  703,  704,   96,   96,   98,   96,   96,  705,
       96,   98,   98,   98,   98,   96,   96,   98,   98,   96,
       96,   98,   98,   96,   98,   98,   96,   98,  769,   96,
      769,  769,   98,   98,  769,  769,   98,   98,  769,  769,
       98,  706,  769,   98,   96,  710,   98,  715,  707,  769,
       96,  716,  708,  769,  709,  713,  717,   96,   96,  711,
      718,   98,   96,  712,  714,   96,  719,   98,  721,   96,
      722,   96,   96,   96,   98,   98,   96,   96,  720,   98,
       96,   96,   98,   96,   96,   96,   98,  769,   98,   98,
       98,   96,   96,   98,   98,   96,   96,   98,   98,  769,

       98,   98,   98,  723,  724,   96,   96,  725,   98,   98,
       96,   96,   98,   98,  728,  769,  726,  730,  769,  769,
      769,   96,   98,   98,   96,  729,   96,   98,   98,   96,
      727,  769,  734,   96,   96,  732,  736,  731,   98,   96,
       96,   98,   96,   98,  769,  738,   98,  733,  735,   96,
       98,   98,  737,   96,   96,   96,   98,   98,   96,   98,
       96,  739,   96,  769,  769,   96,   98,   96,  740,   96,
       98,   98,   98,   96,  769,   98,  741,   98,   96,   98,
      744,  742,   98,   96,   98,  743,   98,  745,  747,   96,
       98,  746,   96,  769,  749,   98,  769,  748,  769,   96,

       98,   96,   96,   96,   96,  755,   98,  769,  750,   98,
      752,  756,   96,  751,   96,  753,   98,   96,   98,   98,
       98,   98,  754,   96,  759,  757,   96,  758,   96,   98,
      769,   98,  769,  769,   98,  769,  769,  760,  769,  769,
       98,  769,  769,   98,  769,   98,  769,  769,  763,  769,
      769,  769,  769,  769,  769,  769,  765,  767,  769,  762,
      761,  769,  769,  764,  769,  769,  768,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  766,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   68,   68,
      769,   68,   68,   68,   68,   68,   68,   97,  769,  769,

      769,   97,   97,   97,   97,  170,  170,  170,  171,  171,
      171,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      266,  266,  361,  361,  769,  361,  702,  769,  702,  702,
      702,  702,    3,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,

      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769
    } ;

static yyconst short int yy_chk[3014] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       10,   13,   13,   14,   19,  702,   22,   21,   22,   22,
       22,   22,   22,   22,   22,   30,   30,   23,   69,   19,

       21,   21,   23,   14,   26,   61,   32,   69,   26,  682,
       57,   68,  178,   23,   25,   25,   25,   25,   25,   25,
       25,   10,   24,   32,   24,   24,   24,   24,   24,   24,
       24,  101,   28,   34,   33,   98,   96,   34,   34,   25,
       24,   40,  100,   24,   24,   24,   61,   68,   24,   24,
       28,   33,   28,   28,   34,   38,   39,   57,   40,   24,
      176,   50,   95,   24,   24,   91,   24,   25,   85,   47,
       76,   41,   38,   39,   24,   43,   42,   24,   50,   38,
       38,   63,   38,  100,   38,   44,   47,   38,   41,   33,
       45,   48,   43,   42,   49,   38,   37,   29,   40,   18,

       38,  176,   44,   46,   38,   15,   50,   45,   48,    9,
       39,   49,   41,   38,   39,    3,   39,   42,   42,   41,
       46,   42,   51,   41,   47,   52,   41,   43,   42,   43,
       54,   42,   48,   97,   44,   45,   48,   44,   43,   51,
       44,   53,   52,  109,    0,   45,   55,   54,   99,   46,
       97,   49,  103,    0,   49,  104,   46,   46,   53,  105,
      109,   46,    0,   55,    0,   99,  106,   51,    0,  103,
       51,   51,  104,   52,  111,  114,  105,    0,    0,   54,
        0,   51,   51,  106,   51,   54,    0,   55,  112,   52,
       53,  111,  114,    0,   55,   53,   77,   77,   77,   77,

       77,   77,   77,   99,  113,  112,  109,  103,    0,    0,
      104,  105,   77,   77,    0,   77,   77,   77,   83,  106,
       83,  113,    0,   83,   83,   83,   83,   83,   83,   83,
        0,   77,   77,  111,  114,   77,   77,  107,   77,   81,
       81,   81,   81,   81,   81,   81,   84,   84,   84,    0,
        0,   84,  112,  110,  107,   81,   81,  113,   81,   81,
       81,    0,    0,  119,    0,    0,   84,   84,    0,   84,
      110,    0,    0,    0,   81,   81,  115,   84,   81,   81,
      119,   81,   82,    0,   82,   82,   82,   82,   82,   82,
       82,    0,  107,  115,  122,  116,  117,  107,  118,  120,

       82,  121,    0,   82,   82,   82,    0,  110,   82,    0,
      123,  122,  116,  117,  124,  118,  120,  119,  121,   82,
        0,  115,    0,   82,   82,  125,   82,  123,  126,    0,
        0,  124,  127,    0,   82,  108,    0,  117,  128,  118,
      122,    0,  125,    0,  129,  126,  122,  121,  130,  127,
      121,  131,  108,  116,  132,  128,  133,    0,  120,    0,
      121,  129,  123,    0,    0,  130,    0,    0,  131,  134,
      136,  132,  135,  133,  124,    0,  108,  108,  108,  108,
      108,  108,    0,  125,  108,  137,  134,  136,  126,  135,
      138,  127,  108,  108,  108,  128,  108,  139,    0,  129,

      140,  143,  137,  141,  142,  130,  144,  138,    0,  145,
      131,    0,  147,  132,  139,  135,  148,  140,  143,  150,
      141,  142,    0,  144,  135,  134,  145,  146,  136,  147,
      149,  135,    0,  148,    0,  151,  150,    0,    0,  137,
      153,    0,    0,  138,  146,  141,    0,  149,    0,  140,
      152,  142,  151,  154,  147,  140,  145,  153,  142,  139,
      143,  144,  142,  142,  155,  148,  156,  152,  146,  171,
      154,  146,    0,    0,  145,  150,    0,    0,    0,  149,
        0,  155,  146,  156,  146,  161,  171,  161,    0,  151,
      161,  161,  161,  161,  161,  161,  161,  153,    0,  152,

        0,    0,  154,    0,    0,  154,    0,  162,  152,  162,
      162,  162,    0,    0,  179,  156,  167,  167,  167,  167,
      167,  167,  167,  155,    0,  186,  162,    0,  180,  162,
      162,  179,  162,  163,    0,  163,  163,  163,  163,  163,
      163,  163,  186,  188,  175,  180,    0,    0,    0,    0,
        0,  163,  163,    0,  163,  163,  163,  164,    0,  164,
      188,  175,  164,  164,  164,  164,  164,  164,  164,  179,
      163,  163,  181,  189,  163,  163,  165,  163,  165,  165,
      165,  180,  166,  166,  166,  186,    0,  166,  188,  181,
      189,  182,  183,  184,    0,  165,  175,    0,  165,  165,

      170,  165,  166,  166,    0,  166,    0,  185,  182,  183,
      184,  190,  192,  166,  168,  168,  168,  168,  168,  168,
      168,  170,  170,  170,  185,  170,  170,  181,  190,  192,
      187,  168,  182,  168,  168,  168,  189,    0,  191,    0,
        0,  170,  170,  194,  170,  184,  183,  187,  170,  183,
      168,  193,  170,  168,  168,  191,  168,  192,  195,  185,
      194,  196,  197,  190,  198,  185,  185,  200,  193,  199,
      201,  202,  203,  204,  187,  195,  205,  206,  196,  197,
      207,  198,  208,    0,  200,  187,  199,  201,  202,  203,
      204,  194,  191,  205,  206,    0,    0,  207,  209,  208,

      193,  210,  211,    0,    0,  212,  214,  194,  198,  199,
      193,  213,  202,  195,  197,  209,  215,  203,  210,  211,
      196,  207,  212,  214,  216,  201,    0,  217,  213,  218,
      204,  208,  219,  215,  205,  206,  206,  220,  221,    0,
      222,  216,  210,  211,  217,  223,  218,  224,  214,  219,
      212,  211,  209,  225,  220,  221,  213,  222,  227,  228,
      213,  215,  223,  226,  224,  229,  231,  232,  233,  230,
      225,  235,  217,  219,  218,  227,  228,  216,  226,  230,
      226,  234,  229,  231,  232,  233,  230,    0,  235,    0,
      236,  237,  238,    0,  240,  222,  239,  241,  234,    0,

      223,  242,  225,  227,  224,  244,  228,  236,  237,  238,
      229,  240,  243,  239,  241,  245,  235,  247,  242,  246,
      233,  248,  244,  232,  249,    0,  250,  231,  251,  243,
      234,    0,  245,  252,  247,  253,  246,  254,  248,  255,
      257,  249,  241,  250,    0,  251,  256,  270,  240,  236,
      252,  237,  253,  239,  254,  243,  255,  257,    0,    0,
      242,  244,  246,  256,  270,    0,    0,  278,  262,  249,
      262,  262,  262,    0,    0,  245,  247,    0,    0,  248,
      255,  254,  252,  251,  278,  250,    0,  262,    0,  256,
      262,  262,  257,  262,  253,  258,  258,  258,  258,  258,

      258,  258,  259,  259,  259,  259,  259,  259,  259,  260,
      260,  260,  260,  260,  260,  260,  278,    0,    0,  259,
      272,  259,  259,  259,  261,    0,  261,    0,    0,  261,
      261,  261,  261,  261,  261,  261,    0,  272,  259,    0,
        0,  259,  259,    0,  259,  263,  263,  263,  263,  263,
      263,  263,  264,  264,  264,  264,  264,  264,  264,  265,
      271,  265,  265,  265,  266,    0,  266,  266,  266,  264,
      266,  264,  264,  264,    0,    0,  272,  271,  265,    0,
        0,  265,  265,  266,  265,    0,  266,  266,  264,  266,
        0,  264,  264,  266,  264,  267,  274,  267,  267,  267,

        0,  267,  268,  268,  268,    0,    0,  268,    0,  273,
      275,  276,  271,  274,  267,  277,    0,  267,  267,    0,
      267,    0,  268,  268,  267,  268,  273,  275,  276,  269,
      279,  269,  277,  268,  269,  269,  269,  269,  269,  269,
      269,  280,  281,  274,  282,  283,  285,  279,  286,  284,
      273,  288,  287,  290,  289,  291,  276,  292,  280,  281,
        0,  282,  283,  285,  275,  286,  284,  277,  288,  287,
      290,  289,  291,  293,  292,    0,  294,  295,  297,  296,
        0,  298,    0,  279,    0,  299,    0,    0,    0,  282,
      293,  281,  284,  294,  295,  297,  296,  290,  298,  283,

      280,  289,  299,  286,  287,  285,  300,  301,    0,  288,
      302,  287,  291,  292,  303,  304,    0,  305,  306,    0,
      308,  294,  296,  300,  301,  293,  295,  302,  307,  309,
      310,  303,  304,  297,  305,  306,  299,  308,  311,  312,
      313,  315,    0,  314,  316,  307,  309,  310,  317,  318,
      319,    0,  320,  321,  322,  311,  312,  313,  315,  305,
      314,  316,  308,  306,  304,  317,  318,  319,  302,  320,
      321,  322,  307,  303,  323,  325,    0,  326,    0,  327,
        0,  328,    0,    0,  310,    0,  324,  330,    0,  309,
      329,  323,  325,  313,  326,  314,  327,  311,  328,  322,

      324,  331,  312,  324,  330,  317,  332,  329,  333,  319,
      321,  318,  334,  336,    0,    0,  335,    0,  331,  338,
        0,  337,  339,  332,  340,  333,  341,  343,  323,  334,
      336,  329,  330,  335,  325,  342,  338,  327,  337,  339,
      344,  340,  345,  341,  343,  346,  347,    0,    0,    0,
      331,  348,  342,    0,    0,    0,    0,  344,  350,  345,
      349,    0,  346,  347,  332,  340,  337,  351,  348,  334,
      333,  339,  336,  335,  338,  350,  352,  349,  342,  343,
      353,  354,  367,  344,  351,  345,  374,  371,  341,  346,
        0,    0,    0,  352,    0,    0,    0,  353,  354,  367,

      369,    0,    0,  374,  371,  348,    0,  349,  355,  355,
      355,  355,  355,  355,  355,  372,    0,  369,  350,  356,
      356,  356,  356,  356,  356,  356,  354,  359,  353,  359,
      359,  359,  372,  374,  395,  352,  357,  357,  357,  357,
      357,  357,  357,    0,  386,  368,  359,  371,    0,  359,
      359,  395,  359,  357,  370,  357,  357,  357,  360,  369,
      360,  386,  368,  360,  360,  360,  360,  360,  360,  360,
        0,  370,  357,    0,  372,  357,  357,  361,  357,  361,
      361,  361,  363,  361,  363,  363,  363,  365,  365,  365,
      365,  365,  365,  365,  373,    0,  361,  368,  386,  361,

      361,  363,  361,  370,  363,  363,  361,  363,  364,    0,
      364,  373,  375,  364,  364,  364,  364,  364,  364,  364,
      366,  366,  366,  366,  366,  366,  366,  376,  377,  375,
      378,  379,  381,  380,  382,  373,  385,  366,  383,  366,
      366,  366,    0,    0,  376,  377,  384,  378,  379,  381,
      380,  382,  375,  385,  387,  383,  366,  384,    0,  366,
      366,  384,  366,  384,  388,  389,  390,    0,    0,  391,
        0,  387,    0,  378,  392,  382,  393,  381,    0,  394,
      377,  388,  389,  390,  376,  380,  391,  383,  397,  379,
        0,  392,    0,  393,  396,  385,  394,  387,  398,  399,

        0,  400,  401,  402,    0,  397,    0,  390,  403,  388,
      389,  396,  404,  405,  406,  398,  399,  393,  400,  401,
      402,  394,  407,  391,  408,  403,  409,  410,  392,  404,
      405,  406,  411,  412,  396,    0,    0,  413,    0,  407,
      399,  408,  414,  409,  410,  415,  416,  401,  417,  411,
      412,    0,  398,  400,  413,  402,  418,  404,  405,  414,
      403,    0,  415,  416,  419,  417,    0,  420,  410,  408,
      406,  421,  422,  418,  423,    0,  425,  424,  407,  427,
      409,  419,  422,  413,  420,  426,  429,  414,  421,  422,
      428,  423,  412,  425,  424,  430,  427,  431,    0,  432,

      433,  434,  426,  429,  417,  435,    0,  428,    0,  436,
      420,  437,  430,    0,  431,  418,  432,  433,  434,    0,
      438,  419,  435,  423,  439,  427,  436,  440,  437,  426,
      421,  424,  441,  428,  485,  451,  430,  438,  429,    0,
      432,  439,  453,  454,  440,  435,  451,  455,  433,  441,
      435,  485,  451,  434,  450,  452,  431,    0,    0,  453,
      454,  438,    0,    0,  455,  437,    0,    0,  440,    0,
        0,  450,  452,  439,  442,  442,  442,  442,  442,  442,
      442,  443,  443,  443,  443,  443,  443,  443,  445,  455,
      445,  445,  445,  449,  453,  449,  449,  449,  443,  450,

      443,  443,  443,  454,    0,    0,    0,  445,  458,  452,
      445,  445,  449,  445,    0,  449,  449,  443,  449,    0,
      443,  443,  446,  443,  446,  458,    0,  446,  446,  446,
      446,  446,  446,  446,  447,  447,  447,  447,  447,  447,
      447,  448,  448,  448,  448,  448,  448,  448,  456,  457,
      459,  460,  461,  463,  462,  464,  465,  458,  448,    0,
      448,  448,  448,    0,    0,  456,  457,  459,  460,  461,
      463,  462,  464,  465,  466,  468,  467,  448,  469,  470,
      448,  448,  472,  448,  471,    0,  466,  473,  475,  457,
      467,  466,  468,  467,    0,  469,  470,    0,  474,  472,

      476,  471,  456,  460,  473,  475,    0,  463,    0,  459,
      465,  461,  462,  477,  464,  474,    0,  476,  478,  479,
      470,  481,  480,  469,  482,  471,  483,  484,  486,    0,
      477,  489,  468,  475,  487,  478,  479,  472,  481,  480,
      488,  482,  490,  483,  484,  486,  473,    0,  489,  491,
      492,  487,  476,  493,    0,    0,  474,  488,  494,  490,
      495,  496,  478,  477,  478,  481,  491,  492,  497,    0,
      493,  483,  478,  498,  478,  494,  499,  495,  496,  479,
      480,  500,  501,  502,    0,  497,  484,  482,  503,  487,
      498,    0,  504,  499,  505,  488,  506,  507,  500,  501,

      502,  495,  508,  509,    0,  503,  496,  510,  491,  504,
        0,  505,  511,  506,  507,  512,  513,  515,  514,  508,
      509,  499,  516,  517,  510,  501,    0,  497,    0,  511,
        0,    0,  512,  513,  515,  514,    0,  520,  521,  516,
      517,  518,  518,  518,  518,  518,  518,  518,  506,  522,
      521,  523,    0,  511,  520,  521,  507,    0,    0,    0,
        0,  509,  513,  514,    0,  517,  522,  524,  523,  515,
      512,  525,  526,    0,  516,  519,  519,  519,  519,  519,
      519,  519,  527,    0,  524,  529,    0,  528,  525,  526,
      522,  530,  519,  531,  519,  519,  519,    0,    0,  527,

      520,  532,  529,  523,  528,  533,    0,    0,  530,  534,
      531,  519,    0,  535,  519,  519,  536,  519,  532,  537,
      534,  538,  533,  525,  524,  539,  534,  526,  540,  528,
      535,  541,  536,  536,  529,  542,  537,  543,  538,  544,
        0,    0,  539,  545,  546,  540,    0,  547,  541,  548,
      549,  550,  542,    0,  543,  551,  544,  532,  535,  552,
      545,  546,  553,  533,  547,  554,  548,  549,  550,  539,
      538,    0,  551,    0,  555,  541,  552,    0,  556,  553,
      540,  542,  554,  557,  558,  559,  543,    0,  544,    0,
      548,  555,  547,  560,  548,  556,  546,  561,  562,  549,

      557,  558,  559,  563,  552,  564,  550,  553,  566,  565,
      560,  567,  551,  568,  561,  562,  569,  570,  571,    0,
      563,  572,  564,    0,    0,  566,  565,  573,  567,  575,
      568,  574,  576,  569,  570,  571,  560,    0,  572,  577,
      561,  558,  559,  578,  573,    0,  575,  579,  574,  576,
        0,    0,  580,  581,  567,  577,  577,    0,  582,  570,
      578,  583,  564,  584,  579,  572,  585,  563,  565,  580,
      581,  568,  587,  586,  569,  582,  574,  589,  583,  588,
      584,  575,  590,  585,  587,  592,  591,    0,  593,  587,
      586,  594,  595,  596,  589,  597,  588,  598,  581,  590,

      578,  599,  592,  591,  582,  593,  580,  600,  594,  595,
      596,  585,  597,  601,  598,  602,  603,  584,  599,  588,
        0,  583,  586,    0,  600,  590,  591,    0,  604,  605,
      601,    0,  602,  603,  606,  607,    0,  592,    0,  608,
      598,  609,  610,    0,  595,  604,  605,  611,  596,  612,
      613,  606,  607,  600,    0,  602,  608,  614,  609,  610,
      599,  615,  616,  617,  611,  600,  612,  613,  618,  605,
        0,  603,  619,  620,  614,  621,  601,    0,  615,  616,
      617,    0,  610,  622,  623,  618,  609,  608,  624,  619,
      620,  625,  621,  606,  607,    0,  626,  627,  613,  628,

      622,  623,    0,    0,  629,  624,  630,  631,  625,  632,
      635,    0,  616,  626,  627,  633,  628,  619,  634,  615,
      629,  629,    0,  630,  631,  636,  632,  635,  624,    0,
      637,  638,  633,    0,  639,  634,  626,    0,    0,  621,
      627,  640,  636,  641,  642,  644,  630,  637,  638,  632,
      625,  639,  643,  645,  628,  633,  646,  647,  640,  648,
      641,  642,  644,  634,  635,  649,  631,    0,  650,  643,
      645,  637,  638,  646,  647,  651,  648,  652,  653,  654,
      655,  656,  649,  639,  636,  650,  640,  657,  641,  657,
        0,  658,  651,  659,  652,  653,  654,  655,  656,  660,

      642,  646,  648,    0,  657,  662,  661,  643,  658,  663,
      659,  664,  665,  666,  649,  667,  660,  668,  669,  654,
      651,  671,  662,  661,  670,  655,  663,  672,  664,  665,
      666,  673,  667,  674,  668,  669,  656,  675,  671,  676,
      677,  670,  656,  678,  672,  658,  661,  681,  673,  663,
      674,  664,  665,  680,  675,    0,  676,  677,  679,  685,
      678,    0,  683,  684,  681,  669,    0,    0,  670,  686,
      680,    0,  672,    0,  687,  679,  685,  668,  675,  683,
      684,    0,    0,  677,  671,    0,  686,  673,  681,  688,
      674,  687,    0,  676,  689,  690,  691,  692,  679,  680,

      693,  694,  683,  684,  695,  697,  688,  698,  696,  686,
      699,  689,  690,  691,  692,  704,  705,  693,  694,  706,
      700,  695,  697,  707,  698,  696,  703,  699,    0,  708,
        0,    0,  704,  705,    0,    0,  706,  700,    0,    0,
      707,  688,    0,  703,  709,  693,  708,  698,  689,    0,
      710,  698,  691,    0,  692,  696,  699,  711,  713,  694,
      700,  709,  712,  695,  697,  714,  703,  710,  707,  715,
      708,  716,  717,  718,  711,  713,  719,  720,  706,  712,
      721,  722,  714,  723,  724,  725,  715,    0,  716,  717,
      718,  727,  726,  719,  720,  728,  729,  721,  722,    0,

      723,  724,  725,  709,  710,  730,  731,  712,  727,  726,
      732,  733,  728,  729,  718,    0,  716,  720,    0,    0,
        0,  734,  730,  731,  735,  718,  736,  732,  733,  738,
      717,    0,  725,  737,  739,  722,  727,  721,  734,  740,
      741,  735,  744,  736,    0,  729,  738,  723,  726,  742,
      737,  739,  728,  743,  745,  746,  740,  741,  748,  744,
      747,  730,  749,    0,    0,  750,  742,  751,  732,  752,
      743,  745,  746,  753,    0,  748,  734,  747,  754,  749,
      737,  735,  750,  755,  751,  736,  752,  738,  740,  756,
      753,  739,  757,    0,  742,  754,    0,  741,    0,  758,

      755,  759,  760,  761,  762,  749,  756,    0,  743,  757,
      746,  750,  763,  745,  764,  747,  758,  765,  759,  760,
      761,  762,  748,  766,  755,  752,  767,  753,  768,  763,
        0,  764,    0,    0,  765,    0,    0,  757,    0,    0,
      766,    0,    0,  767,    0,  768,    0,    0,  761,    0,
        0,    0,    0,    0,    0,    0,  763,  765,    0,  760,
      759,    0,    0,  762,    0,    0,  767,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  764,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  771,  771,
        0,  771,  771,  771,  771,  771,  771,  772,    0,    0,

        0,  772,  772,  772,  772,  773,  773,  773,  774,  774,
      774,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      776,  776,  777,  777,    0,  777,  778,    0,  778,  778,
      778,  778,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,

      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1334 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1494 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 770 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2933 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ int r = preprocessor(); if(r) return r; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(BUILTIN_OFFSETOF); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(SETPROP); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(GETPROP); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(ISPROPSET); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(INT128); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 73:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 218 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(check_type()); }     /* {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); } */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(CONSTANT); }  /* For triple OS X versions inside attributes... TODO: Add syntax errors elsewhere */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(WIDE_STRING_LITERAL); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 156:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return(';'); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return('{'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return('}'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return(','); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return(':'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('='); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return('('); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return(')'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 274 "lexer.l"
{ return('['); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return(']'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return('.'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 277 "lexer.l"
{ return('&'); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return('!'); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return('~'); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return('-'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 281 "lexer.l"
{ return('+'); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 282 "lexer.l"
{ return('*'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 283 "lexer.l"
{ return('/'); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 284 "lexer.l"
{ return('%'); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 285 "lexer.l"
{ return('<'); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 286 "lexer.l"
{ return('>'); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 287 "lexer.l"
{ return('^'); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 288 "lexer.l"
{ return('|'); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 289 "lexer.l"
{ return('?'); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 290 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 292 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 318 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 319 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 324 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 329 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 330 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 337 "lexer.l"
ECHO;
	YY_BREAK
#line 2573 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 770 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 770 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 769);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 337 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            const char * pointer = line + 1;
            bool hasLineNumber = false;
            int lineNumber;
            char numberString[20];

            line[count] = 0;
            if(GetString(&pointer, numberString, sizeof(numberString)))
            {
               char * ptr = null;
               lineNumber = (int)strtol(numberString, &ptr, 10);
               if(ptr && ptr > numberString)
                  hasLineNumber = true;
            }

            if(hasLineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);

   if(!strncmp(line, "pragma", c))
   {
      /*
      External pragma;
      if(!ast)
         ast = MkList();
      pragma = MkExternalPragma(line);
      ListAdd(ast, pragma);
      */
      strcpy(yytext, line);
      return PRAGMA;
   }
   else if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = YY_CURRENT_BUFFER;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   YY_CURRENT_BUFFER = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   YY_CURRENT_BUFFER = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
