#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 191
#define YY_END_OF_BUFFER 192
static yyconst short int yy_accept[801] =
    {   0,
      125,  125,  192,  190,  188,  187,  186,  189,  173,  190,
        1,  185,  179,  172,  190,  167,  168,  177,  176,  164,
      175,  171,  178,  131,  131,  165,  161,  180,  166,  181,
      184,  125,  125,  125,  169,  170,  182,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  162,  183,  163,  174,  160,
        0,  137,    0,  146,  163,  155,  147,    0,    0,  144,
      152,  142,  153,  143,  154,    0,  134,    2,    3,  145,
      135,  130,    0,  131,    0,  131,  125,  170,  162,  169,
      151,  157,  159,  158,  150,    0,  125,    0,  125,    0,

        0,  148,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,   11,  125,  125,  125,  125,  125,  125,
      125,  125,   19,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  149,  156,  132,  139,
        0,  134,  134,    0,  135,  130,    0,  133,    0,  126,
      125,  141,  140,  125,  125,    0,  138,    0,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  105,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,   17,   47,  125,  125,  125,  125,   20,  125,  125,
      125,   53,  125,  125,  125,  125,  125,  125,  125,   46,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,    0,
      134,  136,    0,  134,    0,  135,  133,  128,  129,  126,
        0,   66,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,    4,  125,    6,    7,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,   13,
       14,  125,  125,  125,   18,  125,  125,  125,  125,  125,
       22,  125,   54,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,   21,  125,  125,  125,   40,  125,  125,  125,  136,
        0,  134,  128,  128,    0,  128,  128,  129,    0,    0,
      127,   67,  125,  125,  125,  125,  125,  125,  125,  106,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,    5,   49,    8,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,   16,  125,
      125,  125,   60,   48,  125,  125,  125,  125,  125,   55,
      125,  125,   25,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,   38,  125,  125,  125,  108,   44,    0,
      128,  128,  128,    0,    0,  129,  127,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,   58,   52,  125,  125,

       12,   15,  125,   57,  101,   83,  125,  125,  125,   97,
      125,   56,  125,   24,   26,   29,   33,  125,  125,   35,
      125,   36,  125,  125,  125,  125,  125,  125,  125,    0,
      128,  125,  125,  125,  125,  125,  125,  125,  104,  125,
      125,   89,   95,  125,  125,  125,  125,  125,  125,   59,
       73,   74,  125,  125,  125,  125,  125,  125,  125,  125,
       81,  125,  125,  125,  125,  125,  125,  125,  125,  122,
      123,  121,   10,  125,  125,  125,  125,   98,  125,  125,
      125,   93,  125,  125,  125,  125,   37,  125,   51,  125,
      125,   68,  125,  125,   72,  125,  125,  125,  125,  125,

      125,  125,  125,  125,   82,   61,  125,   27,  125,   34,
      107,  125,  125,  125,   92,  125,  125,  125,  125,  125,
      125,    9,  125,  125,  125,  125,  125,   45,   23,   70,
      125,  119,  125,  125,   39,   41,  125,   63,  125,   88,
       71,   31,  125,  125,  125,  125,  125,  125,  125,  125,
      125,   90,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,   86,   87,  125,  120,  125,  125,   50,
      125,  111,   69,  125,  125,  125,  125,  125,   62,  125,
       80,   94,   28,  125,  125,   43,  125,  100,  117,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,   30,

       79,  125,  125,    0,  125,  125,  125,   91,   76,  125,
      103,  125,  125,  114,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,    0,    0,   84,  125,  125,   96,
       42,  125,  125,  125,  125,  125,  110,  125,  109,   99,
       78,  125,  125,  125,    0,    0,  102,   75,  125,  125,
      125,  125,  124,  125,  125,  125,  125,  125,    0,   85,
      125,  112,  125,  118,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,   65,  125,  125,  125,  125,  125,
      125,   64,  125,  125,  116,  125,   32,  125,  113,  125,
      125,  125,  125,  125,  125,  125,  115,  125,   77,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   27,   29,   27,   30,   31,   32,
       33,   34,   35,    1,   36,   37,   38,   36,   39,   40,
       41,   41,   42,   43,   41,   44,   41,   45,   41,   46,
       41,   41,   41,   41,   47,   41,   41,   48,   41,   41,
       49,   50,   51,   52,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   41,   70,   71,   72,   73,   74,   75,   76,
       77,   78,   79,   80,   81,   82,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[83] =
    {   0,
        1,    2,    2,    1,    2,    2,    1,    1,    1,    1,
        1,    3,    4,    2,    5,    1,    1,    1,    1,    6,
        1,    7,    7,    7,    7,    7,    7,    7,    7,    3,
        1,    1,    1,    1,    1,    8,    8,    8,    8,    8,
        9,   10,   10,   10,    9,   10,    9,    9,    1,    1,
        1,    1,    9,    8,    8,    8,    8,    8,    8,    9,
        9,   10,   10,    9,   10,    9,    9,    9,   10,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    1,    1,
        1,    1
    } ;

static yyconst short int yy_base[811] =
    {   0,
        0,    0,  252, 3100, 3100, 3100, 3100, 3100,  217,   75,
     3100, 3100,   51,   74,  199, 3100, 3100,  213,   70, 3100,
       71,   69,   85,  106,  163,   78, 3100,   89,  197,   76,
     3100,   87,   90,  129, 3100, 3100,  190,  182,  126,  131,
      150,  183,  166,  202,  140,  217,  135,  204,  227,  151,
      231,  233,  247,  243,  266, 3100,   80, 3100, 3100, 3100,
      107, 3100,  197, 3100, 3100, 3100, 3100,  101,  133, 3100,
     3100, 3100, 3100, 3100, 3100,  164,  306, 3100, 3100, 3100,
      350,  396,  334,  274,  154,    0,    0, 3100, 3100, 3100,
      139, 3100, 3100, 3100,  134,  114,  143,   97,  244,  116,

       73, 3100,  256,  257,  242,  278,  358,  458,  310,  369,
      269,  289,  368,  283,  268,  370,  373,  375,  384,  372,
      418,  398,  420,  425,  371,  434,  437,  435,  454,  441,
      461,  462,  448,  456,  470,  467,  469,  471,  464,  491,
      463,  494,  511,  528,  532,  533,  534,  537,  538,  539,
      540,  543,  545,  544,  548,  564, 3100, 3100, 3100, 3100,
      605,  595,  641,  623,  631,  645,  697,  705,    0,  693,
      565, 3100, 3100,    0,  611,  167, 3100,  113,  568,  613,
      647,  567,  729,  632,  679,  730,  686,  749,  741,  745,
      751,  581,  753,  757,  760,  761,  762,  764,  768,  765,

      770,  572,  772,  785,  774,  776,  796,  797,  804,  808,
      812,  819,  823,  813,  829,  833,  832,  835,  836,  842,
      844,  574,  845,  848,  852,  869,  872,  877,  874,  880,
      883,  881,  884,  885,  894,  900,  897,  896,  905,  906,
      907,  913,  916,  917,  919,  921,  926,  930,  933,  936,
      940,  941,  949,  952,  953,  955,  957,  964,  961, 1005,
     1013, 1021, 1041, 1037, 1060, 1081, 1071, 1076, 1107, 1112,
     1164,  972,  989,  992, 1130,  991,  985, 1149,  994, 1150,
     1061, 1152, 1166, 1183, 1062, 1186, 1185, 1187, 1082, 1188,
     1189, 1190, 1191, 1192, 1193, 1196, 1202, 1197, 1213, 1217,

     1218, 1222,  980, 1224,  988, 1228, 1234, 1238, 1254, 1257,
     1255, 1261, 1264, 1263, 1265, 1266, 1268, 1269, 1274, 1270,
     1271, 1277, 1285, 1290, 1291, 1294, 1296, 1299, 1297, 1310,
     1313, 1316, 1318, 1319, 1321, 1322, 1325, 1329, 1333, 1338,
     1341, 1344, 1346, 1345, 1355, 1353, 1360, 1358, 1365, 1368,
     1369, 1380, 1381, 1382, 1385, 1388, 1389, 1405, 1410, 1427,
     1447, 1455,    0, 1445, 1502, 1492,    0, 1450, 1520, 1540,
     1548, 1408, 1435, 1429, 1434, 1413, 1433, 1528, 1529, 1548,
     1432, 1567, 1568, 1569, 1572, 1573, 1574, 1582, 1584, 1593,
     1597, 1588, 1596, 1603, 1617, 1618, 1605, 1624, 1622, 1627,

     1631, 1632, 1427, 1637, 1638, 1639, 1641, 1643, 1644, 1652,
     1653, 1654, 1667, 1668, 1669, 1674, 1679, 1680, 1681, 1684,
     1689, 1691, 1693, 1701, 1703, 1710, 1714, 1712, 1715, 1717,
     1723, 1724, 1729, 1731, 1739, 1740, 1743, 1745, 1746, 1748,
     1750, 1751, 1759, 1753, 1762, 1765, 1774, 1767, 1793, 1815,
     1823,    0, 1813, 1870, 1878, 1886, 1818, 1801, 1797, 1802,
     1803, 1798, 1861, 1905, 1906, 1907, 1908, 1909, 1910, 1912,
     1911, 1913, 1932, 1920, 1922, 1935, 1943, 1945, 1794, 1946,
     1951, 1954, 1956, 1958, 1965, 1967, 1977, 1979, 1980, 1982,
     1981, 1984, 1988, 1986, 1989, 1987, 1795, 1991, 2001, 2003,

     2010, 2016, 2018, 2020, 2022, 2030, 2044, 2045, 2046, 2049,
     2051, 2052, 2054, 2053, 2055, 2056, 2058, 2061, 2065, 2066,
     2075, 2077, 2081, 2082, 2085, 2087, 2089, 2090, 2092, 2105,
     2134, 2094, 2141, 2113, 2136, 2109, 2139, 2152, 2111, 2156,
     2160, 2161, 2168, 2172, 2173, 2177, 2175, 2176, 2180, 2182,
     2183, 2196, 2202, 2203, 2205, 2206, 2209, 2212, 2213, 2215,
     2216, 2217, 2218, 2226, 2219, 2228, 2239, 2241, 2243, 2249,
     2253, 2255, 2262, 2274, 2275, 2276, 2277, 2278, 2281, 2282,
     2283, 2285, 2286, 2288, 2290, 2291, 2298, 2305, 2307, 2310,
     2311, 2313, 2318, 2319, 2324, 2326, 2327, 2339, 2341, 2348,

     2351, 2354, 2353, 2352, 2358, 2360, 2361, 2367, 2362, 2374,
     2375, 2382, 2383, 2388, 2391, 2394, 2395, 2398, 2396, 2410,
     2411, 2417, 2421, 2422, 2423, 2424, 2425, 2431, 2430, 2432,
     2446, 2434, 2447, 2456, 2458, 2459, 2463, 2461, 2466, 2468,
     2469, 2470, 2475, 2478, 2480, 2485, 2497, 2490, 2492, 2494,
     2499, 2504, 2500, 2502, 2505, 2516, 2521, 2526, 2529, 2532,
     2537, 2538, 2549, 2551, 2552, 2553, 2557, 2559, 2562, 2564,
     2572, 2566, 2573, 2574, 2586, 2588, 2596, 2593, 2589, 2601,
     2602, 2608, 2609, 2613, 2610, 2616, 2617, 2621, 2622, 2623,
     2624, 2625, 2629, 2645, 2638, 2646, 2659, 2653, 2661, 2660,

     2662, 2665, 2667,  125, 2669, 2668, 2674, 2676, 2681, 2688,
     2682, 2689, 2696, 2698, 2702, 2713, 2717, 2718, 2719, 2721,
     2722, 2725, 2726, 2727,  162,   96, 3100, 2734, 2728, 2730,
     2732, 2738, 2747, 2749, 2754, 2758, 2760, 2762, 2781, 2783,
     2784, 2785, 2786, 2787, 2816,   73, 2794, 2797, 2800, 2816,
     2817, 2820, 2821, 2825, 2824, 2830, 2826, 2828, 2859, 3100,
     2833, 2836, 2837, 2847, 2857, 2859, 2861, 2864, 2868, 2870,
     2869, 2871, 2880, 2883, 2891, 2892, 2893, 2897, 2900, 2902,
     2904, 2905, 2906, 2907, 2914, 2916, 2930, 2936, 2937, 2938,
     2941, 2942, 2943, 2950, 2957, 2966, 2967, 2969, 2971, 3100,

     3034, 3044, 3052, 3057, 3058, 3068, 3072, 3074, 3083, 3089
    } ;

static yyconst short int yy_def[811] =
    {   0,
      800,    1,  800,  800,  800,  800,  800,  800,  800,  801,
      800,  800,  800,  800,  802,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  803,  803,  803,  800,  800,  800,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  800,  800,  800,  800,  800,
      801,  800,  801,  800,  800,  800,  800,  802,  802,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  804,   25,  805,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  803,  800,  803,  806,

      802,  800,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  807,  804,
      803,  800,  800,  805,  803,  806,  800,  806,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  800,
      800,  800,  800,  800,  800,  800,  800,  807,  808,  800,
      800,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  800,
      800,  800,  268,  800,  800,  808,  366,  800,  800,  800,
      800,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  800,
      800,  366,  800,  800,  800,  800,  800,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  800,
      800,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  809,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  809,  810,  800,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  800,  810,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  800,  800,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,    0,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800
    } ;

static yyconst short int yy_nxt[3183] =
    {   0,
        4,    5,    6,    7,    8,    7,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   25,   25,   25,   25,   25,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   32,   32,   32,
       32,   32,   32,   34,   32,   32,   32,   32,   35,    4,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       32,   46,   32,   32,   47,   32,   48,   32,   49,   50,
       51,   52,   53,   54,   55,   32,   32,   32,   56,   57,
       58,   59,   62,   64,   65,   66,   71,  745,   76,   73,
       77,   77,   77,   77,   77,   77,   77,   77,   96,   89,

       78,   96,   72,   74,   75,   79,   67,   87,   94,   95,
      745,   88,  157,  159,   62,  800,   98,   80,   90,   98,
       91,   92,   69,  177,   63,   81,  174,   82,   82,   82,
       82,   82,   82,   82,   82,  800,  100,   96,  726,  727,
       96,  101,   96,   98,   83,   68,   96,   84,   84,   84,
       69,   96,   84,   85,   96,   98,   63,   99,   98,  158,
       98,   96,   96,   83,   98,  178,  173,   84,   84,   98,
       84,  172,   98,  169,  177,  726,  727,   96,   84,   98,
       98,   85,   81,  160,   86,   86,   86,   86,   86,   86,
       86,   86,  112,   96,   96,   98,  113,  131,  114,  800,

      115,   83,  137,  116,   84,   84,   84,  132,  142,   84,
      117,   98,   98,   96,  118,   96,  178,  119,  103,  104,
       83,  105,  102,  106,   84,   84,  107,   84,   96,   93,
      125,   98,  126,   98,  108,   84,  120,  121,   96,  109,
      122,  127,   96,  110,   96,   70,   98,  123,   69,   60,
      124,  800,  111,   96,   96,   96,   98,  138,   96,  800,
       98,  139,   98,  128,  800,  800,  129,   96,   96,  130,
      800,   98,   98,   98,  800,  133,   98,   96,  800,   96,
       96,  800,  134,  135,  800,   98,   98,  136,  143,   96,
      800,  144,  145,  149,   96,   98,  140,   98,   98,  141,

       96,  800,  146,  147,  153,  148,  181,   98,  151,  150,
      154,  175,   98,  152,  800,   84,   84,   84,   98,  155,
       84,   96,  800,  179,  180,  204,  156,   77,   77,   77,
       77,   77,   77,   77,   77,   84,   84,  800,   84,   98,
      200,  800,  800,  182,  161,  162,   84,  162,  162,  162,
      167,  800,  167,  800,  203,  168,  168,  168,  168,  168,
      168,  168,  168,  161,  162,  201,  800,  162,  162,   96,
      162,  163,  163,  163,  163,  163,  163,  163,  163,   96,
       96,   96,   96,   96,   96,  198,   96,   98,  164,  165,
      800,  165,  165,  165,  800,   96,  800,   98,   98,   98,

       98,   98,   98,  800,   98,  800,  800,  164,  165,   96,
      800,  165,  165,   98,  165,   81,  800,   82,   82,   82,
       82,   82,   82,   82,   82,  183,  206,   98,  207,   96,
      184,   96,  800,  202,   83,  199,   96,  166,  166,  166,
      205,  217,  166,  209,  800,   96,   96,   98,   96,   98,
      208,  800,   96,   83,   98,  800,  213,  166,  166,   96,
      166,  800,  214,   98,   98,   96,   98,   96,  166,   96,
       98,  800,   96,   96,   96,   96,  210,   98,   96,  211,
       96,   96,   96,   98,  215,   98,  800,   98,  800,  212,
       98,   98,   98,   98,  800,  800,   98,  216,   98,   98,

       98,  800,   96,  800,  220,   96,  218,  800,  219,  800,
      222,  185,  186,  187,  188,  189,  190,  235,  800,  191,
       98,  221,   96,   98,  225,  226,  192,  193,  194,  195,
      196,  197,  223,  224,  227,  230,  231,  229,  232,   96,
       98,  228,  800,   96,   96,   96,  800,  800,   96,   96,
       96,   96,  233,  236,   96,   96,   96,   98,  234,   96,
      237,   98,   98,   98,  238,  239,   98,   98,   98,   98,
      800,  800,   98,   98,   98,   96,   96,   98,   96,   96,
      800,  800,  240,   96,  800,   96,  244,  800,  248,  245,
      800,  242,   96,   98,   98,  241,   98,   98,  249,  250,

      246,   98,  247,   98,  253,  256,  252,  251,  257,  243,
       98,  800,  800,  254,  255,  800,  800,  800,  800,  258,
      276,  260,   96,  260,   96,  259,  261,  261,  261,  261,
      261,  261,  261,  261,  162,  273,  162,  162,  162,  265,
       98,  265,   98,   96,  266,  266,  266,  266,  266,  266,
      266,  266,  291,  162,  800,  800,  162,  162,   96,  162,
      262,   98,  163,  163,  163,  163,  163,  163,  163,  163,
      165,  800,  165,  165,  165,  272,   98,  800,  274,  263,
      264,  800,  264,  264,  264,  800,  166,  166,  166,  165,
       96,  166,  165,  165,  800,  165,  279,   96,  263,  264,

      800,  800,  264,  264,  800,  264,  166,  166,   98,  166,
      800,  800,  269,  800,  275,   98,  800,  166,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  270,  270,  270,  800,  271,  270,
       96,   96,  284,  280,  267,  800,  267,  267,  267,  281,
      282,  800,   96,  285,  270,  270,   96,  270,   98,   98,
       96,  271,   96,  267,   96,  270,  267,  267,   96,  267,
       98,   96,   96,   96,   98,   96,   96,  800,   98,   96,
       98,   96,   98,   96,  800,   96,   98,   96,  800,   98,
       98,   98,  800,   98,   98,  277,   96,   98,  278,   98,

      800,   98,  283,   98,  800,   98,  286,   96,   96,  288,
      292,  800,  289,  800,   98,   96,  287,  290,  293,   96,
      295,  301,  302,   96,   96,   98,   98,  297,  294,  298,
       96,  305,  300,   98,   96,  299,  296,   98,  304,  303,
       96,   98,   98,   96,   96,  306,   96,   96,   98,  800,
      800,  800,   98,   96,  800,   96,   96,  310,   98,   96,
      800,   98,   98,   96,   98,   98,  307,  308,  309,  311,
      316,   98,  313,   98,   98,  800,  314,   98,  312,  800,
       96,   98,  800,   96,  315,   96,  317,  319,   96,  320,
      318,   96,   96,  322,   96,   96,   96,  324,   98,  323,

      321,   98,  333,   98,  329,   96,   98,   96,   96,   98,
       98,   96,   98,   98,   98,  325,   96,   96,   96,  326,
      800,  800,  800,   98,   96,   98,   98,   96,   96,   98,
       96,  330,   96,  328,   98,   98,   98,   96,  327,  331,
      332,   96,   98,  800,   96,   98,   98,   96,   98,  800,
       98,   96,   96,  335,  338,   98,  800,  334,  336,   98,
       96,  337,   98,   96,   96,   98,   96,  339,   96,   98,
       98,  800,   96,  343,  345,   96,  341,  340,   98,  342,
      800,   98,   98,   96,   98,  348,   98,  800,  344,  346,
       98,   96,  800,   98,  800,  800,   96,  351,  347,   96,

       96,   98,   96,   96,  349,   96,  350,  800,  800,   98,
      357,  356,  352,  354,   98,  800,  353,   98,   98,  358,
       98,   98,  800,   98,  355,  359,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  360,  360,  360,  360,  360,  360,  360,  360,
      375,  376,  162,  372,  162,  162,  162,  361,  378,  361,
      373,  800,  362,  362,  362,  362,  362,  362,  362,  362,
      800,  162,   96,   96,  162,  162,  264,  162,  264,  264,
      264,  266,  266,  266,  266,  266,  266,  266,  266,  800,
       98,   98,  800,   96,  800,  264,  800,  800,  264,  264,

      800,  264,  266,  266,  266,  266,  266,  266,  266,  266,
      267,   98,  267,  267,  267,  363,  800,  364,  364,  364,
      165,  365,  165,  165,  165,  800,  380,  800,  384,  267,
      800,  800,  267,  267,  363,  267,  800,  364,  364,  165,
      364,   96,  165,  165,  365,  165,  367,  800,  368,  368,
      368,  388,  369,  270,  270,  270,  800,  800,  270,   98,
       96,   96,  800,   96,  800,  367,  800,  800,  368,  368,
      800,  368,  800,  270,  270,  369,  270,   96,   98,   98,
      370,   98,  370,  374,  270,  371,  371,  371,  371,  371,
      371,  371,  371,  800,   96,   98,   96,   96,   96,   96,

       96,   96,   96,   96,   96,  800,  377,   96,   96,  800,
      800,  379,   98,   96,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  381,   96,   98,   98,  382,   96,   96,
      800,   98,  800,   96,  800,   96,  800,  800,  800,   96,
      383,  385,   98,  800,  800,   96,   98,   98,  394,   96,
      393,   98,  389,   98,  387,  397,  386,   98,  391,  390,
      392,  398,  395,   98,  396,   96,   96,   98,   96,  800,
      399,  800,   96,  401,   96,   96,   96,   96,  400,   96,
       96,   96,   96,   98,   98,   96,   98,  403,   96,  402,
       98,  800,   98,   98,   98,   98,   96,   98,   98,   98,

       98,   96,   96,   98,  404,   96,   98,   96,   96,  405,
       96,  407,  408,  800,   98,  406,  800,  409,  410,   98,
       98,   96,  423,   98,   96,   98,   98,   96,   98,   96,
       96,  412,   96,   96,  415,  411,   96,  413,  416,   98,
       96,  800,   98,  414,   96,   98,  417,   98,   98,   96,
       98,   98,   96,  421,   98,   96,   96,   96,   98,  418,
      800,  419,   98,  420,   96,  422,   96,   98,  800,   96,
       98,   96,  426,   98,   98,   98,   96,  800,  427,   96,
       96,  424,   98,  428,   98,  800,  425,   98,  800,   98,
      800,   96,   96,   96,   98,  429,   96,   98,   98,   96,

       96,  434,  431,  430,  800,  800,  436,  432,  437,   98,
       98,   98,  433,  435,   98,  439,   96,   98,   98,   96,
      441,   96,  440,  442,   96,  443,  800,  438,  800,  800,
      800,  800,  800,  800,   98,  800,  800,   98,   96,   98,
       96,  445,   98,   96,   96,   96,   96,  444,  360,  360,
      360,  360,  360,  360,  360,  360,   98,  446,   98,  800,
      447,   98,   98,   98,   98,  448,  800,  449,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  364,  461,  364,  364,  364,  368,
      800,  368,  368,  368,  264,  460,  264,  264,  264,  458,

      459,  466,  800,  364,  462,  800,  364,  364,  368,  364,
      800,  368,  368,  264,  368,  800,  264,  264,  450,  264,
      450,  800,  800,  451,  451,  451,  451,  451,  451,  451,
      451,  452,  800,  453,  453,  453,  455,  454,  455,   96,
       96,  456,  456,  456,  456,  456,  456,  456,  456,  800,
      452,  800,  800,  453,  453,  800,  453,   98,   98,   96,
      454,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,   98,   96,   96,
       96,  463,  800,   96,   96,   96,  800,  457,  464,  457,
      457,  457,  800,   96,  800,   96,   98,   98,   98,   96,

      465,   98,   98,   98,   96,  800,  457,   96,   96,  457,
      457,   98,  457,   98,   96,  475,   96,   98,  800,  800,
      476,  477,   98,  468,  478,   98,   98,  472,   96,   96,
      471,  467,   98,   96,   98,   96,  470,  473,   96,  469,
      800,  800,   96,   96,  800,  474,   98,   98,   96,   96,
       96,   98,   96,   98,   96,   96,   98,  800,  481,  479,
       98,   98,  480,   96,   96,   96,   98,   98,   98,  484,
       98,  800,   98,   98,  482,  483,  800,  485,   96,   96,
       96,   98,   98,   98,  488,   96,  489,  800,  486,  490,
       96,   96,   96,  487,  492,   96,   98,   98,   98,  800,

       96,  494,   96,   98,   96,  491,  800,  493,   98,   98,
       98,  497,   96,   98,   96,  800,  495,  496,   98,  800,
       98,   96,   98,   96,  498,   96,   96,  800,   96,  800,
       98,  501,   98,  503,   96,   96,  499,  500,  512,   98,
       96,   98,   96,   98,   98,  502,   98,  505,  506,  800,
       96,   96,   98,   98,   96,  504,   96,   96,   98,   96,
       98,   96,   96,  800,   96,  800,  800,  510,   98,   98,
       96,  507,   98,   96,   98,   98,   96,   98,   96,   98,
       98,  508,   98,  509,  513,   96,  511,  515,   98,  800,
      514,   98,  800,  800,   98,  517,   98,  516,  519,  800,

      800,  521,  800,   98,   96,   96,   96,  518,   96,   96,
      522,  524,   96,   96,   96,  523,  525,  520,  527,  533,
      529,  800,   98,   98,   98,  800,   98,   98,  526,  800,
       98,   98,   98,  800,  800,  528,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  453,  800,  453,  453,  453,  457,  532,  457,
      457,  457,  364,  553,  364,  364,  364,  535,  534,  800,
      536,  453,   96,  800,  453,  453,  457,  453,  800,  457,
      457,  364,  457,  800,  364,  364,  530,  364,  530,  800,
       98,  531,  531,  531,  531,  531,  531,  531,  531,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  537,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  368,  800,  368,  368,  368,
      800,   96,  800,   96,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   96,  368,  549,   96,  368,  368,   98,
      368,   98,  800,  800,   96,  800,   96,   96,  539,  800,
      550,   98,   96,  800,   98,   96,  551,   96,  540,   96,
      552,  538,   98,  542,   98,   98,   96,  545,   96,  541,
       98,  543,  544,   98,  546,   98,  548,   98,   96,  547,
       96,   96,   96,   96,   98,   96,   98,   96,   96,   96,

       96,  800,   96,  554,  555,  800,   98,  556,   98,   98,
       98,   98,   96,   98,   96,   98,   98,   98,   98,  558,
       98,   96,  800,  557,  800,  800,  800,   96,  800,   96,
       98,   96,   98,   96,  561,  800,  559,  560,  564,   98,
      565,   96,  563,  562,  570,   98,  572,   98,  566,   98,
      567,   98,  800,  568,  569,   96,   96,   96,  573,   98,
       96,  571,   96,   96,   96,   96,   96,   96,  574,   96,
      575,  800,   96,   98,   98,   98,   96,   96,   98,  800,
       98,   98,   98,   98,   98,   98,   96,   98,   96,  576,
       98,  800,   96,   96,   98,   98,   96,  577,   96,  800,

       96,   96,  578,   96,   98,   96,   98,  800,  580,  581,
       98,   98,  800,  800,   98,  800,   98,  579,   98,   98,
       96,   98,   96,   98,   96,  582,  531,  531,  531,  531,
      531,  531,  531,  531,  585,  800,  583,  800,   98,  800,
       98,  800,   98,  587,  588,  584,  591,   96,  800,  586,
       96,  800,   96,  589,  590,  531,  531,  531,  531,  531,
      531,  531,  531,   96,  593,   98,  594,   96,   98,  592,
       98,   96,   96,  453,  800,  453,  453,  453,  596,   96,
      800,   98,  800,   96,   96,   98,   96,   96,   96,   98,
       98,   96,  453,   96,   96,  453,  453,   98,  453,  603,

      595,   98,   98,  597,   98,   98,   98,   96,  606,   98,
      599,   98,   98,   96,   96,  800,   96,   96,  800,  598,
       96,  600,  800,   96,   96,   98,   96,   96,   96,   96,
       96,   98,   98,  605,   98,   98,  604,   96,   98,   96,
      601,   98,   98,  602,   98,   98,   98,   98,   98,  800,
       96,  800,   96,  800,   96,   98,  800,   98,  800,  608,
       96,  800,  610,  607,   96,  800,   96,  611,   98,  609,
       98,  612,   98,   96,  613,  616,  614,  800,   98,  617,
      619,  615,   98,  618,   98,   96,   96,   96,   96,   96,
      800,   98,   96,   96,   96,  620,   96,   96,  622,   96,

      623,   96,   96,   98,   98,   98,   98,   98,  621,   96,
       98,   98,   98,  800,   98,   98,   96,   98,   96,   98,
       98,   96,   96,  800,   96,  800,  800,   98,  800,   96,
       96,  626,  627,  800,   98,   96,   98,   96,   96,   98,
       98,  631,   98,  624,  625,  634,  638,   98,   98,  800,
       96,  629,   96,   98,  630,   98,   98,  628,  632,   96,
      633,  635,   96,   96,   96,   96,  800,  636,   98,   96,
       98,   96,   96,   96,  800,  637,  647,   98,   96,  800,
       98,   98,   98,   98,  641,   96,   96,   98,  639,   98,
       98,   98,  640,   96,   96,  800,   98,  642,  800,   96,

      800,  800,   96,   98,   98,   96,   96,   96,  645,   96,
      649,   98,   98,  643,  644,  646,  650,   98,  648,  651,
       98,   96,   96,   98,   98,   98,  652,   98,   96,  800,
      800,  800,   96,   96,   96,   96,   96,  800,  800,   98,
       98,   96,   96,   96,  800,   96,   98,  654,  653,  656,
       98,   98,   98,   98,   98,  655,  658,   96,   96,   98,
       98,   98,  661,   98,  800,  800,  657,   96,  659,   96,
       96,  660,   96,  663,   96,   98,   98,   96,  662,   96,
       96,   96,  667,  668,  666,   98,   96,   98,   98,   96,
       98,   96,   98,  664,  665,   98,   96,   98,   98,   98,

      800,   96,  800,   96,   98,   96,  669,   98,   96,   98,
       96,   96,  800,   96,   98,   96,   96,  670,  671,   98,
      672,   98,  674,   98,  800,  679,   98,   96,   98,   98,
      676,   98,   96,   98,   98,  677,  800,   96,  800,  800,
       96,  800,  673,   96,  681,   98,  675,  800,   96,   96,
       98,  683,  678,  800,  680,   98,  684,  685,   98,  686,
       96,   98,   96,   96,   96,  682,   98,   98,   96,  800,
       96,  687,  800,   96,  689,   96,  800,   96,   98,  690,
       98,   98,   98,   96,   96,   96,   98,  688,   98,  692,
      691,   98,  800,   98,  693,   98,  800,   96,  800,   96,

       96,   98,   98,   98,   96,  800,  694,   96,  800,  704,
      696,  800,   96,   96,  697,   98,  695,   98,   98,   96,
       96,   96,   98,  698,   96,   98,  700,   96,   96,  699,
       98,   98,   96,   96,   96,   96,   96,   98,   98,   98,
       96,  800,   98,  701,  800,   98,   98,  800,  800,   96,
       98,   98,   98,   98,   98,  702,   96,   96,   98,  705,
      707,  703,  706,  800,   96,  708,  709,   98,  710,  711,
       96,   96,   96,   96,   98,   98,   96,  800,   96,   96,
       96,  714,   98,  713,  800,   96,  800,   96,   98,   98,
       98,   98,   96,   96,   98,  712,   98,   98,   98,   96,

       96,  800,  716,   98,  715,   98,  717,   96,  800,   96,
       98,   98,  719,   96,  722,  718,  721,   98,   98,  720,
      724,  728,  800,  723,   96,   98,  730,   98,   96,   96,
       96,   98,   96,   96,  729,  800,   96,   96,   96,   96,
      731,   96,   98,   96,  800,   96,   98,   98,   98,   96,
       98,   98,  800,  732,   98,   98,   98,   98,   96,   98,
       96,   98,  733,   98,  800,   96,  800,   98,  800,   96,
      734,   96,  800,   96,  736,  800,   98,  741,   98,  744,
      739,  742,  735,   98,  743,  748,  747,   98,  737,   98,
      738,   98,   96,  740,   96,   96,   96,   96,   96,  800,

      800,  800,  751,  800,  750,   96,  800,  800,   96,  749,
       98,   96,   98,   98,   98,   98,   98,  759,  759,  754,
      759,  759,  800,   98,  753,  752,   98,   96,   96,   98,
      760,   96,   96,  800,  800,   96,   96,   96,  800,   96,
      757,   96,  755,  800,   96,   98,   98,   96,   96,   98,
       98,  758,  761,   98,   98,   98,  756,   98,   96,   98,
      759,  759,   98,  759,  759,   98,   98,  800,   96,  800,
       96,  800,   96,  760,  800,   96,   98,  800,  800,   96,
       96,   96,   96,  763,  765,  762,   98,  767,   98,  769,
       98,   96,  766,   98,   96,  768,  764,   98,   98,   98,

       98,  770,   96,   96,   96,  800,  800,  771,   96,   98,
      800,   96,   98,   96,  800,   96,   96,   96,   96,  800,
       98,   98,   98,  775,  772,   96,   98,   96,  773,   98,
      778,   98,  774,   98,   98,   98,   98,  780,  776,  777,
      779,   96,  800,   98,  800,   98,  800,   96,   96,   96,
      781,  800,   96,   96,   96,  800,  800,  786,  800,   98,
      783,   96,  787,  782,  784,   98,   98,   98,   96,  790,
       98,   98,   98,  789,  788,  800,  785,   96,   96,   98,
       96,  800,   96,  800,  800,  800,   98,  800,  800,  800,
      800,  800,  800,  791,  800,   98,   98,  800,   98,  794,

       98,  800,  800,  800,  800,  800,  796,  800,  800,  792,
      793,  800,  800,  800,  795,  800,  800,  800,  798,  800,
      800,  799,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  797,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   68,   68,   68,  800,   68,   68,
       68,   68,   68,   68,   97,  800,  800,  800,   97,   97,
       97,   97,  170,  170,  170,  171,  171,  171,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  268,  268,
      366,  366,  800,  366,  725,  800,  800,  725,  800,  725,
      725,  725,  725,  746,  800,  746,  746,  746,  746,    3,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800
    } ;

static yyconst short int yy_chk[3183] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   10,   13,   13,   14,   19,  746,   22,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   32,   28,

       23,   33,   19,   21,   21,   23,   14,   26,   30,   30,
      726,   26,   57,   68,   61,  178,   32,   23,   28,   33,
       28,   28,  101,  100,   10,   24,   98,   24,   24,   24,
       24,   24,   24,   24,   24,   69,   34,   39,  704,  704,
       34,   34,   40,   96,   24,   69,   47,   24,   24,   24,
       68,   45,   24,   24,   97,   39,   61,   33,   34,   57,
       40,   41,   50,   24,   47,  100,   95,   24,   24,   45,
       24,   91,   97,   85,  176,  725,  725,   43,   24,   41,
       50,   24,   25,   76,   25,   25,   25,   25,   25,   25,
       25,   25,   39,   38,   42,   43,   39,   45,   39,   63,

       40,   25,   47,   41,   25,   25,   25,   45,   50,   25,
       41,   38,   42,   44,   41,   48,  176,   41,   38,   38,
       25,   38,   37,   38,   25,   25,   38,   25,   46,   29,
       43,   44,   43,   48,   38,   25,   42,   42,   49,   38,
       42,   43,   51,   38,   52,   18,   46,   42,   15,    9,
       42,    3,   38,  105,   54,   99,   49,   48,   53,    0,
       51,   48,   52,   44,    0,    0,   44,  103,  104,   44,
        0,  105,   54,   99,    0,   46,   53,   55,    0,  115,
      111,    0,   46,   46,    0,  103,  104,   46,   51,  106,
        0,   51,   51,   52,  114,   55,   49,  115,  111,   49,

      112,    0,   51,   51,   54,   51,  105,  106,   53,   52,
       54,   99,  114,   53,    0,   84,   84,   84,  112,   55,
       84,  109,    0,  103,  104,  115,   55,   77,   77,   77,
       77,   77,   77,   77,   77,   84,   84,    0,   84,  109,
      111,    0,    0,  106,   77,   77,   84,   77,   77,   77,
       83,    0,   83,    0,  114,   83,   83,   83,   83,   83,
       83,   83,   83,   77,   77,  112,    0,   77,   77,  107,
       77,   81,   81,   81,   81,   81,   81,   81,   81,  113,
      110,  116,  125,  120,  117,  109,  118,  107,   81,   81,
        0,   81,   81,   81,    0,  119,    0,  113,  110,  116,

      125,  120,  117,    0,  118,    0,    0,   81,   81,  122,
        0,   81,   81,  119,   81,   82,    0,   82,   82,   82,
       82,   82,   82,   82,   82,  107,  117,  122,  118,  121,
      107,  123,    0,  113,   82,  110,  124,   82,   82,   82,
      116,  125,   82,  120,    0,  126,  128,  121,  127,  123,
      119,    0,  130,   82,  124,    0,  122,   82,   82,  133,
       82,    0,  122,  126,  128,  129,  127,  134,   82,  108,
      130,    0,  131,  132,  141,  139,  121,  133,  136,  121,
      137,  135,  138,  129,  123,  134,    0,  108,    0,  121,
      131,  132,  141,  139,    0,    0,  136,  124,  137,  135,

      138,    0,  140,    0,  128,  142,  126,    0,  127,    0,
      130,  108,  108,  108,  108,  108,  108,  141,    0,  108,
      140,  129,  143,  142,  134,  135,  108,  108,  108,  108,
      108,  108,  131,  132,  135,  137,  138,  136,  139,  144,
      143,  135,    0,  145,  146,  147,    0,    0,  148,  149,
      150,  151,  140,  142,  152,  154,  153,  144,  140,  155,
      142,  145,  146,  147,  142,  142,  148,  149,  150,  151,
        0,    0,  152,  154,  153,  156,  171,  155,  182,  179,
        0,    0,  143,  202,    0,  222,  146,    0,  147,  146,
        0,  145,  192,  156,  171,  144,  182,  179,  148,  149,

      146,  202,  146,  222,  152,  154,  151,  150,  154,  145,
      192,    0,    0,  152,  153,    0,    0,    0,    0,  155,
      182,  161,  175,  161,  180,  156,  161,  161,  161,  161,
      161,  161,  161,  161,  162,  179,  162,  162,  162,  164,
      175,  164,  180,  184,  164,  164,  164,  164,  164,  164,
      164,  164,  192,  162,    0,    0,  162,  162,  181,  162,
      163,  184,  163,  163,  163,  163,  163,  163,  163,  163,
      165,    0,  165,  165,  165,  175,  181,    0,  180,  163,
      163,    0,  163,  163,  163,    0,  166,  166,  166,  165,
      185,  166,  165,  165,    0,  165,  184,  187,  163,  163,

        0,    0,  163,  163,    0,  163,  166,  166,  185,  166,
        0,    0,  170,    0,  181,  187,    0,  166,  167,  167,
      167,  167,  167,  167,  167,  167,  168,  168,  168,  168,
      168,  168,  168,  168,  170,  170,  170,    0,  170,  170,
      183,  186,  187,  185,  168,    0,  168,  168,  168,  185,
      185,    0,  189,  187,  170,  170,  190,  170,  183,  186,
      188,  170,  191,  168,  193,  170,  168,  168,  194,  168,
      189,  195,  196,  197,  190,  198,  200,    0,  188,  199,
      191,  201,  193,  203,    0,  205,  194,  206,    0,  195,
      196,  197,    0,  198,  200,  183,  204,  199,  183,  201,

        0,  203,  186,  205,    0,  206,  188,  207,  208,  190,
      193,    0,  190,    0,  204,  209,  189,  191,  194,  210,
      195,  200,  201,  211,  214,  207,  208,  196,  194,  197,
      212,  205,  199,  209,  213,  198,  195,  210,  204,  203,
      215,  211,  214,  217,  216,  206,  218,  219,  212,    0,
        0,    0,  213,  220,    0,  221,  223,  209,  215,  224,
        0,  217,  216,  225,  218,  219,  207,  208,  208,  210,
      214,  220,  212,  221,  223,    0,  213,  224,  211,    0,
      226,  225,    0,  227,  213,  229,  215,  216,  228,  217,
      215,  230,  232,  219,  231,  233,  234,  221,  226,  220,

      218,  227,  232,  229,  228,  235,  228,  238,  237,  230,
      232,  236,  231,  233,  234,  224,  239,  240,  241,  225,
        0,    0,    0,  235,  242,  238,  237,  243,  244,  236,
      245,  229,  246,  227,  239,  240,  241,  247,  226,  230,
      231,  248,  242,    0,  249,  243,  244,  250,  245,    0,
      246,  251,  252,  234,  237,  247,    0,  233,  235,  248,
      253,  236,  249,  254,  255,  250,  256,  238,  257,  251,
      252,    0,  259,  243,  245,  258,  241,  239,  253,  242,
        0,  254,  255,  272,  256,  248,  257,    0,  244,  246,
      259,  303,    0,  258,    0,    0,  277,  251,  247,  305,

      273,  272,  276,  274,  249,  279,  250,    0,    0,  303,
      257,  256,  252,  254,  277,    0,  253,  305,  273,  258,
      276,  274,    0,  279,  255,  259,  260,  260,  260,  260,
      260,  260,  260,  260,  261,  261,  261,  261,  261,  261,
      261,  261,  262,  262,  262,  262,  262,  262,  262,  262,
      276,  277,  261,  273,  261,  261,  261,  263,  279,  263,
      274,    0,  263,  263,  263,  263,  263,  263,  263,  263,
        0,  261,  281,  285,  261,  261,  264,  261,  264,  264,
      264,  265,  265,  265,  265,  265,  265,  265,  265,    0,
      281,  285,    0,  289,    0,  264,    0,    0,  264,  264,

        0,  264,  266,  266,  266,  266,  266,  266,  266,  266,
      267,  289,  267,  267,  267,  268,    0,  268,  268,  268,
      266,  268,  266,  266,  266,    0,  281,    0,  285,  267,
        0,    0,  267,  267,  268,  267,    0,  268,  268,  266,
      268,  275,  266,  266,  268,  266,  269,    0,  269,  269,
      269,  289,  269,  270,  270,  270,    0,    0,  270,  275,
      278,  280,    0,  282,    0,  269,    0,    0,  269,  269,
        0,  269,    0,  270,  270,  269,  270,  283,  278,  280,
      271,  282,  271,  275,  270,  271,  271,  271,  271,  271,
      271,  271,  271,    0,  284,  283,  287,  286,  288,  290,

      291,  292,  293,  294,  295,    0,  278,  296,  298,    0,
        0,  280,  284,  297,  287,  286,  288,  290,  291,  292,
      293,  294,  295,  282,  299,  296,  298,  283,  300,  301,
        0,  297,    0,  302,    0,  304,    0,    0,    0,  306,
      284,  286,  299,    0,    0,  307,  300,  301,  294,  308,
      293,  302,  290,  304,  288,  297,  287,  306,  291,  290,
      292,  298,  295,  307,  296,  309,  311,  308,  310,    0,
      299,    0,  312,  301,  314,  313,  315,  316,  300,  317,
      318,  320,  321,  309,  311,  319,  310,  304,  322,  302,
      312,    0,  314,  313,  315,  316,  323,  317,  318,  320,

      321,  324,  325,  319,  307,  326,  322,  327,  329,  308,
      328,  310,  311,    0,  323,  309,    0,  312,  313,  324,
      325,  330,  329,  326,  331,  327,  329,  332,  328,  333,
      334,  315,  335,  336,  318,  314,  337,  316,  319,  330,
      338,    0,  331,  317,  339,  332,  322,  333,  334,  340,
      335,  336,  341,  327,  337,  342,  344,  343,  338,  323,
        0,  324,  339,  326,  346,  328,  345,  340,    0,  348,
      341,  347,  334,  342,  344,  343,  349,    0,  335,  350,
      351,  330,  346,  336,  345,    0,  332,  348,    0,  347,
        0,  352,  353,  354,  349,  337,  355,  350,  351,  356,

      357,  342,  339,  338,    0,    0,  344,  340,  345,  352,
      353,  354,  341,  343,  355,  347,  358,  356,  357,  372,
      349,  359,  348,  350,  376,  351,    0,  346,    0,    0,
        0,    0,    0,    0,  358,    0,    0,  372,  403,  359,
      374,  354,  376,  381,  377,  375,  373,  353,  360,  360,
      360,  360,  360,  360,  360,  360,  403,  355,  374,    0,
      357,  381,  377,  375,  373,  358,    0,  359,  361,  361,
      361,  361,  361,  361,  361,  361,  362,  362,  362,  362,
      362,  362,  362,  362,  364,  376,  364,  364,  364,  368,
        0,  368,  368,  368,  362,  375,  362,  362,  362,  373,

      374,  381,    0,  364,  377,    0,  364,  364,  368,  364,
        0,  368,  368,  362,  368,    0,  362,  362,  365,  362,
      365,    0,    0,  365,  365,  365,  365,  365,  365,  365,
      365,  366,    0,  366,  366,  366,  369,  366,  369,  378,
      379,  369,  369,  369,  369,  369,  369,  369,  369,    0,
      366,    0,    0,  366,  366,    0,  366,  378,  379,  380,
      366,  370,  370,  370,  370,  370,  370,  370,  370,  371,
      371,  371,  371,  371,  371,  371,  371,  380,  382,  383,
      384,  378,    0,  385,  386,  387,    0,  371,  379,  371,
      371,  371,    0,  388,    0,  389,  382,  383,  384,  392,

      380,  385,  386,  387,  390,    0,  371,  393,  391,  371,
      371,  388,  371,  389,  394,  390,  397,  392,    0,    0,
      390,  391,  390,  383,  391,  393,  391,  387,  395,  396,
      386,  382,  394,  399,  397,  398,  385,  388,  400,  384,
        0,    0,  401,  402,    0,  389,  395,  396,  404,  405,
      406,  399,  407,  398,  408,  409,  400,    0,  394,  392,
      401,  402,  393,  410,  411,  412,  404,  405,  406,  397,
      407,    0,  408,  409,  395,  396,    0,  398,  413,  414,
      415,  410,  411,  412,  401,  416,  402,    0,  399,  404,
      417,  418,  419,  400,  407,  420,  413,  414,  415,    0,

      421,  409,  422,  416,  423,  406,    0,  408,  417,  418,
      419,  412,  424,  420,  425,    0,  410,  411,  421,    0,
      422,  426,  423,  428,  413,  427,  429,    0,  430,    0,
      424,  416,  425,  418,  431,  432,  414,  415,  430,  426,
      433,  428,  434,  427,  429,  417,  430,  421,  422,    0,
      435,  436,  431,  432,  437,  420,  438,  439,  433,  440,
      434,  441,  442,    0,  444,    0,    0,  428,  435,  436,
      443,  425,  437,  445,  438,  439,  446,  440,  448,  441,
      442,  426,  444,  427,  431,  447,  429,  434,  443,    0,
      432,  445,    0,    0,  446,  436,  448,  435,  438,    0,

        0,  440,    0,  447,  449,  479,  497,  437,  459,  462,
      441,  443,  458,  460,  461,  442,  443,  439,  446,  459,
      448,    0,  449,  479,  497,    0,  459,  462,  445,    0,
      458,  460,  461,    0,    0,  447,  450,  450,  450,  450,
      450,  450,  450,  450,  451,  451,  451,  451,  451,  451,
      451,  451,  453,    0,  453,  453,  453,  457,  458,  457,
      457,  457,  451,  479,  451,  451,  451,  461,  460,    0,
      462,  453,  463,    0,  453,  453,  457,  453,    0,  457,
      457,  451,  457,    0,  451,  451,  454,  451,  454,    0,
      463,  454,  454,  454,  454,  454,  454,  454,  454,  455,

      455,  455,  455,  455,  455,  455,  455,  456,  456,  456,
      456,  456,  456,  456,  456,  463,  464,  465,  466,  467,
      468,  469,  471,  470,  472,  456,    0,  456,  456,  456,
        0,  474,    0,  475,  464,  465,  466,  467,  468,  469,
      471,  470,  472,  473,  456,  475,  476,  456,  456,  474,
      456,  475,    0,    0,  477,    0,  478,  480,  465,    0,
      476,  473,  481,    0,  476,  482,  477,  483,  466,  484,
      478,  464,  477,  468,  478,  480,  485,  471,  486,  467,
      481,  469,  470,  482,  472,  483,  474,  484,  487,  473,
      488,  489,  491,  490,  485,  492,  486,  494,  496,  493,

      495,    0,  498,  480,  481,    0,  487,  482,  488,  489,
      491,  490,  499,  492,  500,  494,  496,  493,  495,  484,
      498,  501,    0,  483,    0,    0,    0,  502,    0,  503,
      499,  504,  500,  505,  487,    0,  485,  486,  490,  501,
      490,  506,  489,  488,  493,  502,  495,  503,  490,  504,
      490,  505,    0,  491,  492,  507,  508,  509,  496,  506,
      510,  494,  511,  512,  514,  513,  515,  516,  499,  517,
      500,    0,  518,  507,  508,  509,  519,  520,  510,    0,
      511,  512,  514,  513,  515,  516,  521,  517,  522,  503,
      518,    0,  523,  524,  519,  520,  525,  507,  526,    0,

      527,  528,  508,  529,  521,  532,  522,    0,  511,  513,
      523,  524,    0,    0,  525,    0,  526,  509,  527,  528,
      536,  529,  539,  532,  534,  518,  530,  530,  530,  530,
      530,  530,  530,  530,  523,    0,  519,    0,  536,    0,
      539,    0,  534,  525,  526,  521,  529,  535,    0,  524,
      537,    0,  533,  527,  528,  531,  531,  531,  531,  531,
      531,  531,  531,  538,  533,  535,  534,  540,  537,  532,
      533,  541,  542,  531,    0,  531,  531,  531,  536,  543,
        0,  538,    0,  544,  545,  540,  547,  548,  546,  541,
      542,  549,  531,  550,  551,  531,  531,  543,  531,  546,

      535,  544,  545,  537,  547,  548,  546,  552,  549,  549,
      540,  550,  551,  553,  554,    0,  555,  556,    0,  538,
      557,  541,    0,  558,  559,  552,  560,  561,  562,  563,
      565,  553,  554,  548,  555,  556,  547,  564,  557,  566,
      544,  558,  559,  545,  560,  561,  562,  563,  565,    0,
      567,    0,  568,    0,  569,  564,    0,  566,    0,  554,
      570,    0,  556,  553,  571,    0,  572,  557,  567,  555,
      568,  558,  569,  573,  559,  563,  560,    0,  570,  564,
      565,  562,  571,  564,  572,  574,  575,  576,  577,  578,
        0,  573,  579,  580,  581,  566,  582,  583,  568,  584,

      569,  585,  586,  574,  575,  576,  577,  578,  567,  587,
      579,  580,  581,    0,  582,  583,  588,  584,  589,  585,
      586,  590,  591,    0,  592,    0,    0,  587,    0,  593,
      594,  576,  577,    0,  588,  595,  589,  596,  597,  590,
      591,  583,  592,  574,  575,  586,  593,  593,  594,    0,
      598,  580,  599,  595,  581,  596,  597,  579,  584,  600,
      585,  588,  601,  604,  603,  602,    0,  590,  598,  605,
      599,  606,  607,  609,    0,  591,  603,  600,  608,    0,
      601,  604,  603,  602,  597,  610,  611,  605,  594,  606,
      607,  609,  596,  612,  613,    0,  608,  598,    0,  614,

        0,    0,  615,  610,  611,  616,  617,  619,  601,  618,
      605,  612,  613,  599,  600,  602,  607,  614,  604,  608,
      615,  620,  621,  616,  617,  619,  609,  618,  622,    0,
        0,    0,  623,  624,  625,  626,  627,    0,    0,  620,
      621,  629,  628,  630,    0,  632,  622,  613,  612,  616,
      623,  624,  625,  626,  627,  614,  618,  631,  633,  629,
      628,  630,  620,  632,    0,    0,  617,  634,  618,  635,
      636,  619,  638,  623,  637,  631,  633,  639,  621,  640,
      641,  642,  627,  628,  626,  634,  643,  635,  636,  644,
      638,  645,  637,  624,  625,  639,  646,  640,  641,  642,

        0,  648,    0,  649,  643,  650,  631,  644,  647,  645,
      651,  653,    0,  654,  646,  652,  655,  633,  634,  648,
      637,  649,  642,  650,    0,  647,  647,  656,  651,  653,
      644,  654,  657,  652,  655,  645,    0,  658,    0,    0,
      659,    0,  639,  660,  649,  656,  643,    0,  661,  662,
      657,  651,  646,    0,  648,  658,  652,  653,  659,  654,
      663,  660,  664,  665,  666,  650,  661,  662,  667,    0,
      668,  655,    0,  669,  657,  670,    0,  672,  663,  658,
      664,  665,  666,  671,  673,  674,  667,  656,  668,  660,
      659,  669,    0,  670,  661,  672,    0,  675,    0,  676,

      679,  671,  673,  674,  678,    0,  662,  677,    0,  677,
      666,    0,  680,  681,  668,  675,  663,  676,  679,  682,
      683,  685,  678,  669,  684,  677,  674,  686,  687,  671,
      680,  681,  688,  689,  690,  691,  692,  682,  683,  685,
      693,    0,  684,  675,    0,  686,  687,    0,    0,  695,
      688,  689,  690,  691,  692,  676,  694,  696,  693,  678,
      682,  676,  680,    0,  698,  684,  685,  695,  686,  687,
      697,  700,  699,  701,  694,  696,  702,    0,  703,  706,
      705,  692,  698,  691,    0,  707,    0,  708,  697,  700,
      699,  701,  709,  711,  702,  690,  703,  706,  705,  710,

      712,    0,  694,  707,  693,  708,  695,  713,    0,  714,
      709,  711,  697,  715,  701,  696,  699,  710,  712,  698,
      703,  705,    0,  702,  716,  713,  707,  714,  717,  718,
      719,  715,  720,  721,  706,    0,  722,  723,  724,  729,
      710,  730,  716,  731,    0,  728,  717,  718,  719,  732,
      720,  721,    0,  712,  722,  723,  724,  729,  733,  730,
      734,  731,  713,  728,    0,  735,    0,  732,    0,  736,
      715,  737,    0,  738,  717,    0,  733,  722,  734,  724,
      720,  722,  716,  735,  723,  729,  728,  736,  718,  737,
      719,  738,  739,  721,  740,  741,  742,  743,  744,    0,

        0,    0,  734,    0,  733,  747,    0,    0,  748,  732,
      739,  749,  740,  741,  742,  743,  744,  745,  745,  738,
      745,  745,    0,  747,  736,  735,  748,  750,  751,  749,
      745,  752,  753,    0,    0,  755,  754,  757,    0,  758,
      744,  756,  742,    0,  761,  750,  751,  762,  763,  752,
      753,  744,  749,  755,  754,  757,  743,  758,  764,  756,
      759,  759,  761,  759,  759,  762,  763,    0,  765,    0,
      766,    0,  767,  759,    0,  768,  764,    0,    0,  769,
      771,  770,  772,  751,  754,  750,  765,  756,  766,  758,
      767,  773,  755,  768,  774,  757,  752,  769,  771,  770,

      772,  761,  775,  776,  777,    0,    0,  763,  778,  773,
        0,  779,  774,  780,    0,  781,  782,  783,  784,    0,
      775,  776,  777,  768,  765,  785,  778,  786,  766,  779,
      771,  780,  767,  781,  782,  783,  784,  773,  769,  770,
      772,  787,    0,  785,    0,  786,    0,  788,  789,  790,
      774,    0,  791,  792,  793,    0,    0,  780,    0,  787,
      777,  794,  781,  776,  778,  788,  789,  790,  795,  786,
      791,  792,  793,  784,  783,    0,  779,  796,  797,  794,
      798,    0,  799,    0,    0,    0,  795,    0,    0,    0,
        0,    0,    0,  788,    0,  796,  797,    0,  798,  792,

      799,    0,    0,    0,    0,    0,  794,    0,    0,  790,
      791,    0,    0,    0,  793,    0,    0,    0,  796,    0,
        0,  798,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  795,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  802,  802,  802,    0,  802,  802,
      802,  802,  802,  802,  803,    0,    0,    0,  803,  803,
      803,  803,  804,  804,  804,  805,  805,  805,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  807,  807,
      808,  808,    0,  808,  809,    0,    0,  809,    0,  809,
      809,  809,  809,  810,    0,  810,  810,  810,  810,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1383 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1543 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 801 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3100 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ int r = preprocessor(); if(r) return r; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(BUILTIN_OFFSETOF); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(SETPROP); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(GETPROP); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(ISPROPSET); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(INT128); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 77:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 218 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 222 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(check_type()); }     /* {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); } */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(CONSTANT); }  /* For triple OS X versions inside attributes... TODO: Add syntax errors elsewhere */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(WIDE_STRING_LITERAL); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 161:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return(';'); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return('{'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return('}'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 274 "lexer.l"
{ return(','); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return(':'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return('='); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 277 "lexer.l"
{ return('('); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return(')'); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return('['); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return(']'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 281 "lexer.l"
{ return('.'); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 282 "lexer.l"
{ return('&'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 283 "lexer.l"
{ return('!'); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 284 "lexer.l"
{ return('~'); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 285 "lexer.l"
{ return('-'); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 286 "lexer.l"
{ return('+'); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 287 "lexer.l"
{ return('*'); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 288 "lexer.l"
{ return('/'); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 289 "lexer.l"
{ return('%'); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 290 "lexer.l"
{ return('<'); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 291 "lexer.l"
{ return('>'); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 292 "lexer.l"
{ return('^'); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 293 "lexer.l"
{ return('|'); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 294 "lexer.l"
{ return('?'); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 295 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 297 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 323 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 324 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 329 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 334 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 335 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 342 "lexer.l"
ECHO;
	YY_BREAK
#line 2647 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 801 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 801 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 800);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 342 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            const char * pointer = line + 1;
            bool hasLineNumber = false;
            int lineNumber;
            char numberString[20];

            line[count] = 0;
            if(GetString(&pointer, numberString, sizeof(numberString)))
            {
               char * ptr = null;
               lineNumber = (int)strtol(numberString, &ptr, 10);
               if(ptr && ptr > numberString)
                  hasLineNumber = true;
            }

            if(hasLineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);

   if(!strncmp(line, "pragma", c))
   {
      /*
      External pragma;
      if(!ast)
         ast = MkList();
      pragma = MkExternalPragma(line);
      ListAdd(ast, pragma);
      */
      strcpy(yytext, line);
      return PRAGMA;
   }
   else if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = YY_CURRENT_BUFFER;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   YY_CURRENT_BUFFER = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   YY_CURRENT_BUFFER = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
