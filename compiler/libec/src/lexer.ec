#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
static yyconst short int yy_accept[756] =
    {   0,
      118,  118,  184,  182,  180,  179,  178,  181,  165,  182,
        1,  177,  171,  164,  182,  159,  160,  169,  168,  156,
      167,  163,  170,  124,  124,  157,  153,  172,  158,  173,
      176,  118,  118,  118,  161,  162,  174,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  154,  175,  155,  166,  152,
        0,  129,    0,  138,  155,  147,  139,    0,    0,  136,
      144,  134,  145,  135,  146,    0,  127,    2,    3,  137,
      128,  123,    0,  124,    0,  124,  118,  162,  154,  161,
      143,  149,  151,  150,  142,    0,  118,    0,  118,    0,

        0,  140,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,   11,  118,  118,  118,  118,  118,  118,
      118,  118,   19,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  141,  148,  125,  131,
        0,  127,  127,    0,  128,  123,    0,  126,    0,  119,
      118,  133,  132,  118,  118,    0,  130,    0,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   98,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   17,   47,
      118,  118,  118,  118,   20,  118,  118,  118,   53,  118,
      118,  118,  118,  118,  118,  118,   46,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,    0,  127,    0,  127,
        0,  128,  126,  121,  122,  119,    0,   66,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,    4,  118,    6,    7,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
       13,   14,  118,  118,  118,   18,  118,  118,  118,  118,
      118,   22,  118,   54,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,   21,  118,  118,  118,   40,  118,  118,  118,
        0,  127,  121,  121,    0,  121,  121,  122,    0,    0,
      120,   67,  118,  118,  118,  118,  118,   99,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,    5,   49,    8,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,   16,  118,  118,  118,   60,   48,  118,
      118,  118,  118,  118,   55,  118,  118,   25,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   38,  118,
      118,  118,  101,   44,    0,  121,  121,  121,    0,    0,
      122,  120,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,   58,   52,  118,  118,   12,
       15,  118,   57,   94,   77,  118,  118,  118,   90,  118,
       56,  118,   24,   26,   29,   33,  118,  118,   35,  118,

       36,  118,  118,  118,  118,  118,  118,  118,    0,  121,
      118,  118,  118,  118,  118,   97,  118,  118,   82,   88,
      118,  118,  118,  118,  118,   59,  118,  118,  118,  118,
      118,  118,  118,   75,  118,  118,  118,  118,  118,  118,
      118,  118,  115,  116,  114,   10,  118,  118,  118,  118,
       91,  118,  118,  118,   86,  118,  118,  118,  118,   37,
      118,   51,  118,  118,   68,  118,  118,  118,  118,  118,
      118,  118,  118,  118,   76,   61,  118,   27,  118,   34,
      100,  118,  118,   85,  118,  118,  118,  118,  118,  118,
        9,  118,  118,  118,  118,  118,   45,   23,   70,  118,

      112,  118,  118,   39,   41,  118,   63,  118,   81,   31,
      118,  118,  118,  118,  118,  118,  118,  118,   83,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,   79,
       80,  118,  113,  118,  118,   50,  118,  104,   69,  118,
      118,  118,  118,  118,   62,   74,   87,   28,  118,   43,
      118,   93,  110,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,   30,   73,  118,  118,    0,  118,  118,
       84,  118,   96,  118,  118,  107,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,   78,    0,  118,   89,
       42,  118,  118,  118,  118,  118,  103,  118,  102,   92,

       72,  118,  118,  118,   95,  118,  118,  118,  118,  117,
      118,  118,  118,  118,  118,  118,  105,  118,  111,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,   65,
      118,  118,  118,  118,  118,  118,   64,  118,  118,  109,
      118,   32,  118,  106,  118,  118,  118,  118,  118,  118,
      118,  108,  118,   71,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   24,   26,   24,   27,   24,   28,   29,   30,
       31,   32,   33,    1,   34,   35,   36,   34,   37,   38,
       39,   39,   40,   41,   39,   42,   39,   43,   39,   44,
       39,   39,   39,   39,   45,   39,   39,   46,   39,   39,
       47,   48,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   39,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[81] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    1,    4,    1,    1,    1,    1,    5,    1,
        6,    6,    6,    6,    6,    6,    6,    2,    1,    1,
        1,    1,    1,    7,    7,    7,    7,    7,    8,    9,
        9,    9,    8,    9,    8,    8,    1,    1,    1,    1,
        8,    7,    7,    7,    7,    7,    7,    8,    8,    9,
        9,    8,    9,    8,    8,    8,    9,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[765] =
    {   0,
        0,    0,  216, 2876, 2876, 2876, 2876, 2876,  179,   74,
     2876, 2876,   51,   73,  158, 2876, 2876,  169,   69, 2876,
       70,   68,   83,  104,   94,   77, 2876,  123,  167,   65,
     2876,   96,  124,  127, 2876, 2876,  166,  145,  146,  131,
      161,  166,  165,  175,  180,  193,  159,  181,  184,  151,
      212,  215,  231,  220,  236, 2876,   80, 2876, 2876, 2876,
       99, 2876,  179, 2876, 2876, 2876, 2876,  100,   96, 2876,
     2876, 2876, 2876, 2876, 2876,  152,  276, 2876, 2876, 2876,
      319,  364,  303,  307,  150,    0,    0, 2876, 2876, 2876,
      135, 2876, 2876, 2876,  132,  109,  223,  108,  238,  136,

       84, 2876,  242,  245,  249,  256,  265,  425,  233,  327,
      264,  278,  294,  343,  366,  370,  382,  386,  384,  388,
      391,  389,  400,  404,  415,  412,  419,  422,  426,  431,
      434,  444,  445,  446,  458,  460,  459,  480,  487,  489,
      490,  492,  494,  499,  495,  514,  498,  508,  519,  505,
      520,  524,  526,  528,  530,  535, 2876, 2876, 2876, 2876,
      580,  570,  613,  597,  603,  617,  660,  668,    0,  656,
      548, 2876, 2876,    0,  562,  154, 2876,  110,  581,  588,
      637,  693,  694,  696,  702,  709,  586,  704,  707,  715,
      723,  722,  725,  727,  559,  728,  730,  621,  729,  733,

      735,  741,  743,  749,  761,  770,  775,  777,  784,  785,
      791,  793,  779,  795,  797,  798,  799,  805,  806,  813,
      818,  828,  832,  837,  841,  847,  848,  851,  852,  853,
      855,  857,  859,  860,  861,  863,  867,  871,  881,  882,
      885,  887,  890,  893,  900,  901,  912,  916,  915,  921,
      919,  922,  925,  924,  934,  931,  974,  981, 1008, 1005,
      988, 1048, 1019, 1043, 1055, 1079, 1107,  937,  955,  949,
     1025,  962, 1115, 1116,  963,  947, 1124, 1125, 1026, 1126,
      958, 1028, 1127,  956, 1130, 1134, 1039, 1135, 1136, 1137,
     1138, 1140, 1145,  940, 1146,  950, 1149, 1150, 1158, 1164,

     1159, 1185, 1172, 1190, 1192, 1193, 1194, 1195, 1198, 1203,
     1204, 1205, 1206, 1214, 1218, 1219, 1224, 1225, 1226, 1240,
     1227, 1228, 1229, 1233, 1248, 1239, 1249, 1261, 1262, 1268,
     1271, 1273, 1275, 1274, 1282, 1293, 1283, 1294, 1295, 1296,
     1297, 1304, 1301, 1305, 1306, 1309, 1316, 1327, 1335, 1343,
     1351, 1379,    0, 1327, 1406, 1351,    0, 1403, 1430, 1446,
     1453, 1338, 1387, 1368, 1398, 1454, 1470, 1472, 1473, 1474,
     1475, 1476, 1477, 1478, 1479, 1497, 1504, 1481, 1507, 1508,
     1510, 1511, 1516, 1522, 1531, 1532, 1535, 1536, 1541, 1537,
     1542, 1543, 1545, 1547, 1550, 1563, 1565, 1566, 1569, 1570,

     1571, 1574, 1572, 1578, 1590, 1600, 1603, 1601, 1604, 1605,
     1606, 1612, 1614, 1619, 1624, 1627, 1630, 1633, 1635, 1637,
     1638, 1639, 1645, 1642, 1651, 1658, 1643, 1653, 1663, 1671,
     1672, 1673, 1677, 1682, 1716, 1723,    0, 1713, 1769, 1776,
     1783, 1718, 1760, 1685, 1687, 1697, 1707, 1800, 1801, 1802,
     1703, 1803, 1700, 1804, 1806, 1809, 1822, 1811, 1807, 1827,
     1830, 1836, 1831, 1837, 1842, 1838, 1843, 1849, 1857, 1852,
     1851, 1870, 1856, 1875, 1867, 1876, 1880, 1881, 1885, 1888,
     1889, 1890, 1891, 1904, 1910, 1915, 1916, 1917, 1918, 1922,
     1924, 1925, 1928, 1929, 1930, 1931, 1937, 1938, 1943, 1952,

     1953, 1957, 1958, 1962, 1964, 1963, 1965, 1977, 1989, 2010,
     1966, 1973, 1971, 1978, 2011, 2014, 2016, 2027, 2030, 2032,
     2034, 2036, 2046, 2038, 2048, 2050, 2052, 2054, 2061, 2068,
     2070, 2072, 2074, 2075, 2079, 2080, 2088, 2086, 2082, 2093,
     2100, 2102, 2107, 2109, 2111, 2115, 2122, 2127, 2134, 2138,
     2136, 2140, 2141, 2142, 2143, 2146, 2148, 2149, 2152, 2154,
     2156, 2161, 2168, 2170, 2174, 2176, 2180, 2182, 2186, 2188,
     2195, 2202, 2208, 2209, 2210, 2211, 2216, 2214, 2217, 2218,
     2223, 2224, 2229, 2238, 2239, 2243, 2245, 2244, 2253, 2251,
     2258, 2264, 2263, 2266, 2271, 2272, 2273, 2277, 2278, 2279,

     2292, 2297, 2298, 2299, 2301, 2311, 2312, 2320, 2321, 2323,
     2324, 2326, 2330, 2332, 2334, 2335, 2336, 2342, 2345, 2344,
     2354, 2357, 2360, 2364, 2369, 2376, 2379, 2380, 2390, 2392,
     2394, 2398, 2400, 2403, 2402, 2406, 2410, 2412, 2413, 2414,
     2422, 2425, 2432, 2433, 2435, 2440, 2441, 2444, 2448, 2453,
     2456, 2447, 2459, 2460, 2462, 2466, 2468, 2472, 2474, 2475,
     2478, 2482, 2484, 2490, 2494, 2497, 2498,   96, 2504, 2505,
     2506, 2508, 2512, 2516, 2518, 2524, 2537, 2538, 2540, 2542,
     2546, 2547, 2549, 2552, 2553, 2550, 2876,   72, 2558, 2556,
     2560, 2561, 2562, 2565, 2571, 2574, 2580, 2584, 2586, 2587,

     2602, 2609, 2610, 2614, 2615, 2616, 2617, 2618, 2621, 2622,
     2623, 2624, 2636, 2625, 2643, 2644, 2645, 2646, 2647, 2648,
     2650, 2652, 2658, 2659, 2671, 2673, 2677, 2678, 2684, 2679,
     2689, 2691, 2697, 2693, 2698, 2699, 2702, 2709, 2712, 2713,
     2718, 2720, 2725, 2721, 2727, 2732, 2733, 2736, 2743, 2747,
     2751, 2754, 2756, 2755, 2876, 2822, 2831, 2839, 2844, 2845,
     2854, 2858, 2860, 2866
    } ;

static yyconst short int yy_def[765] =
    {   0,
      755,    1,  755,  755,  755,  755,  755,  755,  755,  756,
      755,  755,  755,  755,  757,  755,  755,  755,  755,  755,
      755,  755,  755,  755,   24,  755,  755,  755,  755,  755,
      755,  758,  758,  758,  755,  755,  755,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  755,  755,  755,  755,  755,
      756,  755,  756,  755,  755,  755,  755,  757,  757,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  759,   25,  760,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  758,  755,  758,  761,

      757,  755,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  762,  759,
      758,  755,  755,  760,  758,  761,  755,  761,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  755,  755,  755,  755,
      755,  755,  755,  762,  763,  755,  755,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      755,  755,  264,  755,  755,  763,  356,  755,  755,  755,
      755,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  755,  755,  356,  755,  755,  755,
      755,  755,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  755,  755,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  764,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  755,  764,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,    0,  755,  755,  755,  755,  755,
      755,  755,  755,  755
    } ;

static yyconst short int yy_nxt[2957] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   25,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   32,   32,   32,   32,   32,
       32,   34,   32,   32,   32,   32,   35,    4,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   32,   46,
       32,   32,   47,   32,   48,   32,   49,   50,   51,   52,
       53,   54,   55,   32,   32,   32,   56,   57,   58,   59,
       62,   64,   65,   66,   71,  687,   76,   73,   77,   77,
       77,   77,   77,   77,   77,   94,   95,   78,  755,   72,

       74,   75,   79,   67,   87,   62,   96,   68,   88,  687,
      157,  159,  755,   80,   86,   86,   86,   86,   86,   86,
       86,   63,   81,   98,   82,   82,   82,   82,   82,   82,
       82,   69,   89,  100,   96,  174,   98,   96,  101,  755,
       83,   96,  177,   84,   84,   84,   63,   69,   84,   85,
       90,   98,   91,   92,   98,   96,   96,  158,   98,   83,
      177,   96,  173,   84,   84,  172,   84,  755,  169,   96,
      160,   96,   98,   98,   84,   96,   96,   85,   98,  103,
      104,  755,  105,  178,  106,   96,   98,  107,   98,   99,
       96,   96,   98,   98,   96,  108,  102,   93,  115,   70,

      109,  178,   98,   96,  110,   69,  142,   98,   98,   60,
      112,   98,  116,  111,  113,  755,  114,  120,  121,  117,
       98,  122,   96,  118,  137,   96,  119,  125,  123,  126,
       96,  124,  138,   96,  128,  131,  139,  129,  127,   98,
      130,   96,   98,   96,  755,  132,   96,   98,   96,  133,
       98,  140,   96,  755,  141,   96,  134,  135,   98,   96,
       98,  136,  755,   98,  755,   98,   96,  143,  755,   98,
      144,  145,   98,  149,   96,   96,   98,  755,  755,  153,
      755,  146,  147,   98,  148,  154,  755,  155,   96,  150,
      151,   98,   98,  755,  156,  152,   77,   77,   77,   77,

       77,   77,   77,  175,   96,   98,  195,  179,  755,  755,
      180,  181,  161,  162,  755,  162,  162,  162,  167,  182,
      167,   98,  755,  168,  168,  168,  168,  168,  168,  168,
      183,  161,  162,  197,  755,  162,  162,   96,  162,  163,
      163,  163,  163,  163,  163,  163,   84,   84,   84,  755,
      755,   84,  198,   96,   98,  164,  165,  199,  165,  165,
      165,  755,  755,  755,  755,  755,   84,   84,  755,   84,
       98,  755,  755,  755,  164,  165,   96,   84,  165,  165,
       96,  165,   81,  755,   82,   82,   82,   82,   82,   82,
       82,  196,   96,   98,   96,  755,   96,   98,   96,   96,

       83,   96,  755,  166,  166,  166,  755,  755,  166,   98,
       96,   98,  200,   98,   96,   98,   98,  755,   98,   83,
      755,  201,   96,  166,  166,   96,  166,   98,  755,   96,
      755,   98,   96,  203,  166,   96,   96,  204,  202,   98,
      755,   96,   98,  755,   96,  210,   98,  207,  205,   98,
      208,  211,   98,   98,   96,   96,   96,  206,   98,  755,
      209,   98,  212,  755,  755,  755,  755,  755,   96,   96,
       96,   98,   98,   98,  213,  755,  184,  185,  186,  187,
      188,  189,  215,  214,  190,   98,   98,   98,  216,  217,
       96,  218,  191,  192,  193,  755,  194,   96,  219,   96,

       96,  755,   96,  220,   96,   96,  755,   98,   96,   96,
      755,  223,  222,  221,   98,   96,   98,   98,   96,   98,
      224,   98,   98,  227,   96,   98,   98,  225,  226,   96,
       96,  755,   98,  755,   96,   98,   96,  755,   96,  755,
       96,   98,  232,  228,  755,   96,   98,   98,  230,  233,
      245,   98,  239,   98,  231,   98,  234,   98,   96,  229,
      235,  236,   98,  237,  238,  241,  755,  246,  242,   96,
      240,  248,   96,  755,  755,   98,  755,  755,  247,  243,
      755,  244,  755,  250,  249,  755,   98,  253,  755,   98,
      254,   96,  251,  252,  256,  257,   96,  257,   96,  255,

      258,  258,  258,  258,  258,  258,  258,  162,   98,  162,
      162,  162,  261,   98,  261,   98,  755,  262,  262,  262,
      262,  262,  262,  262,  268,  755,  162,  755,  290,  162,
      162,   96,  162,  163,  163,  163,  163,  163,  163,  163,
      165,  280,  165,  165,  165,  755,  269,   96,   98,  259,
      260,  270,  260,  260,  260,  755,  166,  166,  166,  165,
      755,  166,  165,  165,   98,  165,  755,  755,  259,  260,
      755,  293,  260,  260,  265,  260,  166,  166,  755,  166,
      168,  168,  168,  168,  168,  168,  168,  166,  168,  168,
      168,  168,  168,  168,  168,  266,  266,  266,  755,  267,

      266,  755,  271,   96,   96,  263,   96,  263,  263,  263,
      755,  755,   96,  755,   96,  266,  266,   96,  266,   96,
       98,   98,  267,   98,  263,   96,  266,  263,  263,   98,
      263,   98,   96,   96,   98,   96,   98,   96,   96,   96,
       96,  755,   98,   96,  272,   96,  755,  755,  755,   98,
       98,   96,   98,   96,   98,   98,   98,   98,  274,   96,
       98,  273,   98,  278,  275,  276,  755,  755,   98,  282,
       98,   96,  277,  755,  279,  755,   98,  281,  284,  283,
       96,  285,  755,  287,  292,   96,  295,   96,   98,   96,
      291,  286,  289,  755,   96,   96,  296,   98,  294,  288,

      755,   96,   98,   96,   98,   96,   98,   96,   96,   96,
      297,   98,   98,  755,  755,   96,   96,  298,   98,  755,
       98,  301,   98,   96,   98,   98,   98,  755,   96,  299,
      300,  310,   98,   98,  302,  304,  305,  755,   96,  755,
       98,  303,   96,  755,  306,   98,  307,   96,  308,  755,
      311,   96,  309,  313,  314,   98,  315,   96,   96,   98,
      312,   96,   96,   96,   98,   96,  320,   96,   98,   96,
       96,   96,  324,   96,   98,   98,  755,   96,   98,   98,
       98,   96,   98,  316,   98,  755,   98,   98,   98,  755,
       98,   96,   96,  317,   98,   96,  319,   96,   98,  318,

       96,  755,  321,   96,  755,  322,  323,  755,   98,   98,
       96,   96,   98,  755,   98,  329,  755,   98,  328,  327,
       98,  326,   96,  755,  325,   96,   96,   98,   98,   96,
      330,   96,   96,  331,   96,   96,  755,  334,  332,   98,
      336,   96,   98,   98,   96,  333,   98,   96,   98,   98,
       96,   98,   98,  339,  335,  755,  337,   96,   98,   96,
       96,   98,  755,  338,   98,   96,   96,   98,   96,  755,
      340,  342,   96,   96,   98,  348,   98,   98,  345,  347,
      341,  755,   98,   98,  343,   98,  344,  349,  755,   98,
       98,  346,  755,  350,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  262,  262,
      262,  262,  262,  262,  262,  363,  369,  362,  162,  365,
      162,  162,  162,  351,  378,  351,  368,  374,  352,  352,
      352,  352,  352,  352,  352,   96,   96,  162,   96,  755,
      162,  162,  260,  162,  260,  260,  260,  755,  755,   96,
      755,  755,   98,   98,  755,   98,  263,  755,  263,  263,
      263,  260,  755,  755,  260,  260,   98,  260,  262,  262,
      262,  262,  262,  262,  262,  263,  364,  755,  263,  263,
      353,  263,  354,  354,  354,  165,  355,  165,  165,  165,
      372,  755,  357,  375,  358,  358,  358,  755,  359,  353,

      755,  755,  354,  354,  165,  354,  381,  165,  165,  355,
      165,  357,  755,  755,  358,  358,  755,  358,  266,  266,
      266,  359,  360,  266,  360,   96,   96,  361,  361,  361,
      361,  361,  361,  361,   96,   96,   96,   96,  266,  266,
       96,  266,   98,   98,   96,   96,   96,   96,   96,  266,
       96,   98,   98,   98,   98,   96,   96,   98,  755,   96,
       96,   98,   98,   98,   98,   98,  755,   98,   96,   96,
      366,  755,   98,   98,   96,  367,   98,   98,  755,  373,
      371,  755,   96,  370,  755,   98,   98,  379,  380,  376,
      755,   98,  384,  386,  755,   96,  377,  385,  383,   98,

       96,  382,   96,   96,   96,   96,  755,  388,   96,  755,
      387,  392,   98,   96,   96,   96,   96,   98,  389,   98,
       98,   98,   98,  391,   96,   98,  394,  390,   96,   96,
       98,   98,   98,   98,   96,   96,   96,   96,   96,   96,
      393,   98,  395,   96,  755,   98,   98,  755,  755,   96,
       96,   98,   98,   98,   98,   98,   98,  397,   96,   96,
       98,  400,  396,  398,  408,  401,   98,   98,  399,  755,
      755,   96,   96,  402,  755,   98,   98,  755,   96,  755,
      406,   96,  755,   96,   96,   96,  403,  404,   98,   98,
      407,  405,   96,   96,  412,   98,  409,  410,   98,  411,

       98,   98,   98,   96,   96,   96,   96,   96,  413,   98,
       98,   96,  755,  755,   96,   96,   96,  755,  755,   96,
       98,   98,   98,   98,   98,  755,   96,  755,   98,  414,
      419,   98,   98,   98,  415,  416,   98,   96,  417,  420,
      755,  421,  418,   98,  422,   96,  755,  424,   96,  426,
      427,  755,  755,   96,   98,  423,  755,  425,  428,  755,
      755,  755,   98,  430,  354,   98,  354,  354,  354,  429,
       98,  352,  352,  352,  352,  352,  352,  352,   96,  431,
      755,  755,  755,  354,  755,  755,  354,  354,  437,  354,
      438,  438,  438,  433,  439,   98,  432,   96,  434,  352,

      352,  352,  352,  352,  352,  352,  755,  437,   96,  755,
      438,  438,  755,  438,   98,  755,  260,  439,  260,  260,
      260,  435,  755,  435,  755,   98,  436,  436,  436,  436,
      436,  436,  436,  755,  755,  260,  755,  444,  260,  260,
      358,  260,  358,  358,  358,  440,  755,  440,  755,  443,
      441,  441,  441,  441,  441,  441,  441,  445,  755,  358,
      755,  755,  358,  358,   96,  358,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
       96,   98,   96,   96,   96,   96,   96,   96,   96,   96,
      442,   96,  442,  442,  442,  755,  755,   98,  755,   98,

       98,   98,   98,   98,   98,   98,   98,   96,   98,  442,
      755,  755,  442,  442,   96,  442,  755,   96,   96,  755,
       96,   96,  448,  446,   98,  457,   96,  447,  451,  458,
      455,   98,   96,  454,   98,   98,  450,   98,   98,  453,
      449,   96,   96,   98,  452,   96,   96,   96,  755,   98,
      459,   96,   96,   96,  755,   96,  456,   96,   98,   98,
       96,  461,   98,   98,   98,  462,  463,  464,   98,   98,
       98,  460,   98,   96,   98,   96,   96,   98,  755,   96,
       96,   96,   96,  467,   96,  755,  465,  468,   96,  755,
       98,  469,   98,   98,  471,  466,   98,   98,   98,   98,

       96,   98,  473,  755,  755,   98,  470,  472,  755,  755,
       96,   96,  474,   96,   96,   96,   96,   98,  755,  755,
      476,  477,   96,  482,   96,  475,  480,   98,   98,   96,
       98,   98,   98,   98,   96,  478,  479,   96,  481,   98,
       96,   98,  755,   96,  491,   96,   98,   96,   96,   96,
      755,   98,   96,   96,   98,   96,  484,   98,  485,  483,
       98,   96,   98,   96,   98,   98,   98,  489,   96,   98,
       98,  486,   98,   96,  755,  487,  755,  755,   98,  488,
       98,   96,   96,   96,  755,   98,  492,   96,  490,  494,
       98,  496,   96,  495,  493,   96,  498,   96,   98,   98,

       98,  497,  500,  503,   98,  502,  512,   96,  504,   98,
       96,  499,   98,   96,   98,  755,  501,   96,  755,  755,
      755,  755,  755,  506,   98,  755,  755,   98,  508,  755,
       98,  755,  507,  755,   98,  505,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      438,  513,  438,  438,  438,  442,  755,  442,  442,  442,
      354,  755,  354,  354,  354,  519,  755,  514,  521,  438,
       96,  515,  438,  438,  442,  438,  755,  442,  442,  354,
      442,  755,  354,  354,  509,  354,  509,   98,  755,  510,
      510,  510,  510,  510,  510,  510,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
       96,   96,   96,   96,   96,  511,   96,   96,  755,   96,
      358,   96,  358,  358,  358,  755,  755,   98,   98,   98,
       98,   98,   96,   98,   98,  526,   98,   96,   98,  358,
       96,   96,  358,  358,  525,  358,   96,   96,   96,   98,
      516,  755,   96,   96,   98,  755,  755,   98,   98,   96,
      517,   96,   96,   98,   98,   98,   96,   96,  522,   98,
       98,  518,  520,  524,  527,  523,   98,   96,   98,   98,
       96,  529,  528,   98,   98,   96,   96,  530,  755,  755,
       96,   96,  755,  534,   98,   96,  531,   98,   96,   96,

       96,   96,   98,   98,  755,  535,  532,   98,   98,  536,
      533,  537,   98,  538,   96,   98,   98,   98,   98,  542,
       96,  539,  541,  540,  543,   96,   96,   96,   96,  544,
      545,   98,   96,  755,   96,   96,  546,   98,   96,   96,
       96,   96,   98,   98,   98,   98,  547,   96,   96,   98,
      548,   98,   98,   96,  755,   98,   98,   98,   98,  549,
      755,  755,   96,   96,   98,   98,  550,   96,   96,  755,
       98,  551,   96,   96,   96,   96,   96,  553,  554,   98,
       98,   96,  755,   96,   98,   98,  552,   96,   96,   98,
       98,   98,   98,   98,  755,  566,  755,  755,   98,  555,

       98,  755,  755,  755,   98,   98,  755,  556,  558,  510,
      510,  510,  510,  510,  510,  510,  755,  755,  560,  561,
      557,   96,  567,  559,   96,  562,   96,  563,  755,  564,
      510,  510,  510,  510,  510,  510,  510,   96,   98,  565,
       96,   98,   96,   98,   96,  568,   96,  438,   96,  438,
      438,  438,  755,  755,   98,  755,   96,   98,   96,   98,
       96,   98,   96,   98,   96,   98,  438,  574,  570,  438,
      438,   96,  438,   98,  576,   98,  569,   98,   96,   98,
       96,   98,   96,  755,   96,   96,  571,  755,   98,   96,
       96,  755,   96,  575,  755,   98,   96,   98,   96,   98,

      572,   98,   98,   96,  573,  755,   98,   98,  578,   98,
       96,  577,   96,   98,  755,   98,  755,   96,  755,   96,
       98,   96,  580,  579,  755,   96,  581,   98,  755,   98,
      755,  582,   96,  583,   98,  585,   98,   96,   98,  586,
      755,  584,   98,  587,   96,  588,   96,  589,   96,   98,
       96,   96,   96,   96,   98,  591,   96,  592,   96,   96,
      590,   98,   96,   98,   96,   98,   96,   98,   98,   98,
       98,   96,  755,   98,  755,   98,   98,  755,   96,   98,
       96,   98,  755,   98,   96,  755,   96,  595,   98,  593,
       96,  596,   96,  755,  594,   98,   96,   98,   96,  600,

      755,   98,  607,   98,  603,   96,  755,   98,  598,   98,
      604,  599,   96,   98,  597,   98,  601,  602,   96,   96,
       96,   96,   98,  605,   96,  755,   96,   96,   96,   98,
      755,  615,  606,   96,   96,   98,   98,   98,   98,   96,
      755,   98,  610,   98,   98,   98,  609,  608,   96,   96,
       98,   98,  755,   96,   96,   96,   98,  613,  611,  612,
      616,   96,  755,   96,  618,   98,   98,  614,   96,  617,
       98,   98,   98,   96,   96,  755,   96,  755,   98,  619,
       98,   96,   96,   96,  755,   98,  620,   96,   96,   96,
       98,   98,  622,   98,  621,  755,  755,  755,   98,   98,

       98,  624,   96,  627,   98,   98,   98,   96,   96,   96,
      755,   96,  623,  625,  629,  755,  628,  626,  755,   98,
      755,   96,   96,  634,   98,   98,   98,  633,   98,  632,
       96,   96,  630,   96,   96,  631,   96,  635,   98,   98,
       96,  755,   96,  755,   96,   96,   96,   98,   98,  755,
       98,   98,   96,   98,   96,   96,  755,   98,  637,   98,
      645,   98,   98,   98,   96,  636,  638,   96,  755,   98,
       96,   98,   98,  640,   96,  755,  642,  755,  755,   96,
      755,   98,  755,  643,   98,  646,   96,   98,  755,   96,
       96,   98,  648,  641,  639,  649,   98,  644,  755,  650,

       96,  755,   96,   98,   96,  647,   98,   98,   96,  755,
       96,  653,   96,   96,  755,  654,   96,   98,  651,   98,
       96,   98,   96,   96,   96,   98,  652,   98,  655,   98,
       98,  656,   96,   98,  657,   96,  755,   98,  755,   98,
       98,   98,   96,   96,  668,   96,  658,  755,  755,   98,
       96,   96,   98,  660,   96,  659,  661,   96,   96,   98,
       98,  662,   98,   96,  664,  663,   96,   98,   98,   96,
       96,   98,   96,  755,   98,   98,   96,  665,   96,  755,
       98,  755,   96,   98,   96,   96,   98,   98,   96,   98,
      666,  670,   96,   98,   96,   98,  667,  669,  671,   98,

       96,   98,   98,  672,   96,   98,  673,   96,   96,   98,
      755,   98,  755,  755,   96,   96,   96,   98,   96,  675,
      676,   98,   96,  755,   98,   98,   96,  678,   96,  681,
      674,   98,   98,   98,   96,   98,  755,  683,  755,   98,
      679,  677,  680,   98,  684,   98,  682,   96,   96,  686,
       96,   98,   96,  685,  689,  690,   96,   96,  691,   96,
       96,  755,   96,   96,   98,   98,   96,   98,   96,   98,
       96,   96,   96,   98,   98,   96,   98,   98,  692,   98,
       98,   96,  693,   98,   96,   98,  755,   98,   98,   98,
       96,  755,   98,  755,   96,  696,   96,   96,   98,  755,

      704,   98,  701,  694,  699,  695,  702,   98,  705,  703,
      697,   98,   96,   98,   98,  698,  708,  707,  700,   96,
       96,  755,  755,  755,   96,   96,   96,   96,   96,   98,
      706,   96,   96,   96,   96,   96,   98,   98,  710,  711,
      709,   98,   98,   98,   98,   98,   96,  755,   98,   98,
       98,   98,   98,   96,   96,   96,   96,   96,   96,  755,
       96,  755,   96,   98,  712,  714,  716,  755,   96,   96,
       98,   98,   98,   98,   98,   98,  715,   98,  713,   98,
      720,   96,  718,   96,  717,   98,   98,   96,   96,   96,
      721,  722,  723,  755,   96,  719,  755,  755,   98,   96,

       98,   96,  724,   96,   98,   98,   98,   96,   96,   96,
      725,   98,   96,  727,  726,  730,   98,  728,   98,   96,
       98,  729,   96,   96,   98,   98,   98,  731,   96,   98,
       96,   96,  733,  735,  755,   96,   98,   96,  732,   98,
       98,  755,   96,   96,  734,   98,   96,   98,   98,  736,
      755,  741,   98,   96,   98,  742,  738,   96,  737,   98,
       98,   96,  739,   98,   96,   96,   96,  740,  755,  745,
       98,  755,  755,  755,   98,  743,  744,  755,   98,  755,
      746,   98,   98,   98,  755,  755,  755,  755,  749,  755,
      755,  755,  755,  755,  755,  755,  747,  751,  755,  748,

      755,  753,  755,  755,  755,  750,  754,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  752,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   68,   68,  755,   68,   68,   68,   68,   68,   68,
       97,  755,  755,  755,   97,   97,   97,   97,  170,  170,
      170,  171,  171,  171,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  264,  264,  356,  356,  755,  356,  688,
      755,  688,  688,  688,  688,    3,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,

      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755
    } ;

static yyconst short int yy_chk[2957] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       10,   13,   13,   14,   19,  688,   22,   21,   22,   22,
       22,   22,   22,   22,   22,   30,   30,   23,   69,   19,

       21,   21,   23,   14,   26,   61,   32,   69,   26,  668,
       57,   68,  178,   23,   25,   25,   25,   25,   25,   25,
       25,   10,   24,   32,   24,   24,   24,   24,   24,   24,
       24,  101,   28,   34,   33,   98,   96,   34,   34,   25,
       24,   40,  100,   24,   24,   24,   61,   68,   24,   24,
       28,   33,   28,   28,   34,   38,   39,   57,   40,   24,
      176,   50,   95,   24,   24,   91,   24,   25,   85,   47,
       76,   41,   38,   39,   24,   43,   42,   24,   50,   38,
       38,   63,   38,  100,   38,   44,   47,   38,   41,   33,
       45,   48,   43,   42,   49,   38,   37,   29,   40,   18,

       38,  176,   44,   46,   38,   15,   50,   45,   48,    9,
       39,   49,   41,   38,   39,    3,   39,   42,   42,   41,
       46,   42,   51,   41,   47,   52,   41,   43,   42,   43,
       54,   42,   48,   97,   44,   45,   48,   44,   43,   51,
       44,   53,   52,  109,    0,   45,   55,   54,   99,   46,
       97,   49,  103,    0,   49,  104,   46,   46,   53,  105,
      109,   46,    0,   55,    0,   99,  106,   51,    0,  103,
       51,   51,  104,   52,  111,  107,  105,    0,    0,   54,
        0,   51,   51,  106,   51,   54,    0,   55,  112,   52,
       53,  111,  107,    0,   55,   53,   77,   77,   77,   77,

       77,   77,   77,   99,  113,  112,  109,  103,    0,    0,
      104,  105,   77,   77,    0,   77,   77,   77,   83,  106,
       83,  113,    0,   83,   83,   83,   83,   83,   83,   83,
      107,   77,   77,  111,    0,   77,   77,  110,   77,   81,
       81,   81,   81,   81,   81,   81,   84,   84,   84,    0,
        0,   84,  112,  114,  110,   81,   81,  113,   81,   81,
       81,    0,    0,    0,    0,    0,   84,   84,    0,   84,
      114,    0,    0,    0,   81,   81,  115,   84,   81,   81,
      116,   81,   82,    0,   82,   82,   82,   82,   82,   82,
       82,  110,  117,  115,  119,    0,  118,  116,  120,  122,

       82,  121,    0,   82,   82,   82,    0,    0,   82,  117,
      123,  119,  114,  118,  124,  120,  122,    0,  121,   82,
        0,  115,  126,   82,   82,  125,   82,  123,    0,  127,
        0,  124,  128,  117,   82,  108,  129,  118,  116,  126,
        0,  130,  125,    0,  131,  122,  127,  121,  119,  128,
      121,  122,  108,  129,  132,  133,  134,  120,  130,    0,
      121,  131,  123,    0,    0,    0,    0,    0,  135,  137,
      136,  132,  133,  134,  124,    0,  108,  108,  108,  108,
      108,  108,  126,  125,  108,  135,  137,  136,  127,  128,
      138,  129,  108,  108,  108,    0,  108,  139,  130,  140,

      141,    0,  142,  131,  143,  145,    0,  138,  147,  144,
        0,  135,  134,  132,  139,  150,  140,  141,  148,  142,
      135,  143,  145,  137,  146,  147,  144,  135,  136,  149,
      151,    0,  150,    0,  152,  148,  153,    0,  154,    0,
      155,  146,  141,  138,    0,  156,  149,  151,  140,  142,
      147,  152,  145,  153,  140,  154,  142,  155,  171,  139,
      142,  142,  156,  143,  144,  146,    0,  148,  146,  195,
      145,  150,  175,    0,    0,  171,    0,    0,  149,  146,
        0,  146,    0,  152,  151,    0,  195,  154,    0,  175,
      154,  179,  152,  153,  156,  161,  187,  161,  180,  155,

      161,  161,  161,  161,  161,  161,  161,  162,  179,  162,
      162,  162,  164,  187,  164,  180,    0,  164,  164,  164,
      164,  164,  164,  164,  175,    0,  162,    0,  195,  162,
      162,  198,  162,  163,  163,  163,  163,  163,  163,  163,
      165,  187,  165,  165,  165,    0,  179,  181,  198,  163,
      163,  180,  163,  163,  163,    0,  166,  166,  166,  165,
        0,  166,  165,  165,  181,  165,    0,    0,  163,  163,
        0,  198,  163,  163,  170,  163,  166,  166,    0,  166,
      167,  167,  167,  167,  167,  167,  167,  166,  168,  168,
      168,  168,  168,  168,  168,  170,  170,  170,    0,  170,

      170,    0,  181,  182,  183,  168,  184,  168,  168,  168,
        0,    0,  185,    0,  188,  170,  170,  189,  170,  186,
      182,  183,  170,  184,  168,  190,  170,  168,  168,  185,
      168,  188,  192,  191,  189,  193,  186,  194,  196,  199,
      197,    0,  190,  200,  182,  201,    0,    0,    0,  192,
      191,  202,  193,  203,  194,  196,  199,  197,  184,  204,
      200,  183,  201,  186,  184,  184,    0,    0,  202,  189,
      203,  205,  185,    0,  186,    0,  204,  188,  191,  190,
      206,  192,    0,  193,  197,  207,  201,  208,  205,  213,
      196,  192,  194,    0,  209,  210,  202,  206,  200,  193,

        0,  211,  207,  212,  208,  214,  213,  215,  216,  217,
      203,  209,  210,    0,    0,  218,  219,  204,  211,    0,
      212,  206,  214,  220,  215,  216,  217,    0,  221,  205,
      205,  213,  218,  219,  207,  209,  210,    0,  222,    0,
      220,  208,  223,    0,  210,  221,  211,  224,  212,    0,
      214,  225,  212,  216,  217,  222,  218,  226,  227,  223,
      215,  228,  229,  230,  224,  231,  225,  232,  225,  233,
      234,  235,  229,  236,  226,  227,    0,  237,  228,  229,
      230,  238,  231,  221,  232,    0,  233,  234,  235,    0,
      236,  239,  240,  222,  237,  241,  224,  242,  238,  223,

      243,    0,  226,  244,    0,  227,  228,    0,  239,  240,
      245,  246,  241,    0,  242,  234,    0,  243,  233,  232,
      244,  231,  247,    0,  230,  249,  248,  245,  246,  251,
      235,  250,  252,  236,  254,  253,    0,  240,  238,  247,
      242,  256,  249,  248,  255,  239,  251,  268,  250,  252,
      294,  254,  253,  245,  241,    0,  243,  276,  256,  270,
      296,  255,    0,  244,  268,  269,  284,  294,  281,    0,
      246,  248,  272,  275,  276,  254,  270,  296,  251,  253,
      247,    0,  269,  284,  249,  281,  250,  255,    0,  272,
      275,  252,    0,  256,  257,  257,  257,  257,  257,  257,

      257,  258,  258,  258,  258,  258,  258,  258,  261,  261,
      261,  261,  261,  261,  261,  270,  276,  269,  258,  272,
      258,  258,  258,  259,  284,  259,  275,  281,  259,  259,
      259,  259,  259,  259,  259,  271,  279,  258,  282,    0,
      258,  258,  260,  258,  260,  260,  260,    0,    0,  287,
        0,    0,  271,  279,    0,  282,  263,    0,  263,  263,
      263,  260,    0,    0,  260,  260,  287,  260,  262,  262,
      262,  262,  262,  262,  262,  263,  271,    0,  263,  263,
      264,  263,  264,  264,  264,  262,  264,  262,  262,  262,
      279,    0,  265,  282,  265,  265,  265,    0,  265,  264,

        0,    0,  264,  264,  262,  264,  287,  262,  262,  264,
      262,  265,    0,    0,  265,  265,    0,  265,  266,  266,
      266,  265,  267,  266,  267,  273,  274,  267,  267,  267,
      267,  267,  267,  267,  277,  278,  280,  283,  266,  266,
      285,  266,  273,  274,  286,  288,  289,  290,  291,  266,
      292,  277,  278,  280,  283,  293,  295,  285,    0,  297,
      298,  286,  288,  289,  290,  291,    0,  292,  299,  301,
      273,    0,  293,  295,  300,  274,  297,  298,    0,  280,
      278,    0,  303,  277,    0,  299,  301,  285,  286,  283,
        0,  300,  290,  292,    0,  302,  283,  291,  289,  303,

      304,  288,  305,  306,  307,  308,    0,  295,  309,    0,
      293,  301,  302,  310,  311,  312,  313,  304,  298,  305,
      306,  307,  308,  300,  314,  309,  303,  299,  315,  316,
      310,  311,  312,  313,  317,  318,  319,  321,  322,  323,
      302,  314,  304,  324,    0,  315,  316,    0,    0,  326,
      320,  317,  318,  319,  321,  322,  323,  306,  325,  327,
      324,  309,  305,  307,  320,  310,  326,  320,  308,    0,
        0,  328,  329,  313,    0,  325,  327,    0,  330,    0,
      318,  331,    0,  332,  334,  333,  314,  315,  328,  329,
      319,  317,  335,  337,  326,  330,  321,  323,  331,  325,

      332,  334,  333,  336,  338,  339,  340,  341,  327,  335,
      337,  343,    0,    0,  342,  344,  345,    0,    0,  346,
      336,  338,  339,  340,  341,    0,  347,    0,  343,  328,
      333,  342,  344,  345,  329,  330,  346,  348,  331,  334,
        0,  335,  332,  347,  336,  349,    0,  338,  362,  340,
      341,    0,    0,  350,  348,  337,    0,  339,  342,    0,
        0,    0,  349,  345,  354,  362,  354,  354,  354,  344,
      350,  351,  351,  351,  351,  351,  351,  351,  364,  346,
        0,    0,    0,  354,    0,    0,  354,  354,  356,  354,
      356,  356,  356,  349,  356,  364,  348,  363,  350,  352,

      352,  352,  352,  352,  352,  352,    0,  356,  365,    0,
      356,  356,    0,  356,  363,    0,  352,  356,  352,  352,
      352,  355,    0,  355,    0,  365,  355,  355,  355,  355,
      355,  355,  355,    0,    0,  352,    0,  364,  352,  352,
      358,  352,  358,  358,  358,  359,    0,  359,    0,  363,
      359,  359,  359,  359,  359,  359,  359,  365,    0,  358,
        0,    0,  358,  358,  366,  358,  360,  360,  360,  360,
      360,  360,  360,  361,  361,  361,  361,  361,  361,  361,
      367,  366,  368,  369,  370,  371,  372,  373,  374,  375,
      361,  378,  361,  361,  361,    0,    0,  367,    0,  368,

      369,  370,  371,  372,  373,  374,  375,  376,  378,  361,
        0,    0,  361,  361,  377,  361,    0,  379,  380,    0,
      381,  382,  368,  366,  376,  377,  383,  367,  371,  377,
      375,  377,  384,  374,  379,  380,  370,  381,  382,  373,
      369,  385,  386,  383,  372,  387,  388,  390,    0,  384,
      378,  389,  391,  392,    0,  393,  376,  394,  385,  386,
      395,  380,  387,  388,  390,  381,  382,  383,  389,  391,
      392,  379,  393,  396,  394,  397,  398,  395,    0,  399,
      400,  401,  403,  386,  402,    0,  384,  387,  404,    0,
      396,  389,  397,  398,  392,  385,  399,  400,  401,  403,

      405,  402,  394,    0,    0,  404,  391,  393,    0,    0,
      406,  408,  395,  407,  409,  410,  411,  405,    0,    0,
      397,  398,  412,  403,  413,  396,  401,  406,  408,  414,
      407,  409,  410,  411,  415,  399,  400,  416,  402,  412,
      417,  413,    0,  418,  415,  419,  414,  420,  421,  422,
        0,  415,  424,  427,  416,  423,  406,  417,  407,  405,
      418,  425,  419,  428,  420,  421,  422,  413,  426,  424,
      427,  410,  423,  429,    0,  411,    0,    0,  425,  412,
      428,  430,  431,  432,    0,  426,  416,  433,  414,  419,
      429,  421,  434,  420,  417,  444,  423,  445,  430,  431,

      432,  422,  425,  428,  433,  427,  444,  446,  428,  434,
      453,  424,  444,  451,  445,    0,  426,  447,    0,    0,
        0,    0,    0,  431,  446,    0,    0,  453,  433,    0,
      451,    0,  432,    0,  447,  430,  435,  435,  435,  435,
      435,  435,  435,  436,  436,  436,  436,  436,  436,  436,
      438,  445,  438,  438,  438,  442,    0,  442,  442,  442,
      436,    0,  436,  436,  436,  451,    0,  446,  453,  438,
      443,  447,  438,  438,  442,  438,    0,  442,  442,  436,
      442,    0,  436,  436,  439,  436,  439,  443,    0,  439,
      439,  439,  439,  439,  439,  439,  440,  440,  440,  440,

      440,  440,  440,  441,  441,  441,  441,  441,  441,  441,
      448,  449,  450,  452,  454,  443,  455,  459,    0,  456,
      441,  458,  441,  441,  441,    0,    0,  448,  449,  450,
      452,  454,  457,  455,  459,  458,  456,  460,  458,  441,
      461,  463,  441,  441,  457,  441,  462,  464,  466,  457,
      448,    0,  465,  467,  460,    0,    0,  461,  463,  468,
      449,  471,  470,  462,  464,  466,  473,  469,  454,  465,
      467,  450,  452,  456,  459,  455,  468,  475,  471,  470,
      472,  461,  460,  473,  469,  474,  476,  462,    0,    0,
      477,  478,    0,  466,  475,  479,  463,  472,  480,  481,

      482,  483,  474,  476,    0,  467,  464,  477,  478,  468,
      465,  469,  479,  469,  484,  480,  481,  482,  483,  471,
      485,  469,  470,  469,  472,  486,  487,  488,  489,  473,
      474,  484,  490,    0,  491,  492,  475,  485,  493,  494,
      495,  496,  486,  487,  488,  489,  478,  497,  498,  490,
      479,  491,  492,  499,    0,  493,  494,  495,  496,  482,
        0,    0,  500,  501,  497,  498,  486,  502,  503,    0,
      499,  487,  504,  506,  505,  507,  511,  490,  492,  500,
      501,  513,    0,  512,  502,  503,  488,  508,  514,  504,
      506,  505,  507,  511,    0,  512,    0,    0,  513,  497,

      512,    0,    0,    0,  508,  514,    0,  498,  502,  509,
      509,  509,  509,  509,  509,  509,    0,    0,  504,  505,
      500,  515,  513,  503,  516,  506,  517,  507,    0,  508,
      510,  510,  510,  510,  510,  510,  510,  518,  515,  511,
      519,  516,  520,  517,  521,  514,  522,  510,  524,  510,
      510,  510,    0,    0,  518,    0,  523,  519,  525,  520,
      526,  521,  527,  522,  528,  524,  510,  523,  517,  510,
      510,  529,  510,  523,  525,  525,  515,  526,  530,  527,
      531,  528,  532,    0,  533,  534,  518,    0,  529,  535,
      536,    0,  539,  524,    0,  530,  538,  531,  537,  532,

      521,  533,  534,  540,  522,    0,  535,  536,  528,  539,
      541,  527,  542,  538,    0,  537,    0,  543,    0,  544,
      540,  545,  530,  529,    0,  546,  531,  541,    0,  542,
        0,  532,  547,  533,  543,  536,  544,  548,  545,  537,
        0,  535,  546,  537,  549,  538,  551,  539,  550,  547,
      552,  553,  554,  555,  548,  541,  556,  542,  557,  558,
      540,  549,  559,  551,  560,  550,  561,  552,  553,  554,
      555,  562,    0,  556,    0,  557,  558,    0,  563,  559,
      564,  560,    0,  561,  565,    0,  566,  549,  562,  547,
      567,  550,  568,    0,  548,  563,  569,  564,  570,  556,

        0,  565,  566,  566,  559,  571,    0,  567,  553,  568,
      561,  554,  572,  569,  552,  570,  557,  558,  573,  574,
      575,  576,  571,  563,  578,    0,  577,  579,  580,  572,
        0,  574,  564,  581,  582,  573,  574,  575,  576,  583,
        0,  578,  569,  577,  579,  580,  568,  567,  584,  585,
      581,  582,    0,  586,  588,  587,  583,  572,  570,  571,
      575,  590,    0,  589,  578,  584,  585,  573,  591,  577,
      586,  588,  587,  593,  592,    0,  594,    0,  590,  579,
      589,  595,  596,  597,    0,  591,  582,  598,  599,  600,
      593,  592,  585,  594,  583,    0,    0,    0,  595,  596,

      597,  587,  601,  589,  598,  599,  600,  602,  603,  604,
        0,  605,  586,  587,  592,    0,  590,  588,    0,  601,
        0,  606,  607,  597,  602,  603,  604,  596,  605,  595,
      608,  609,  593,  610,  611,  594,  612,  600,  606,  607,
      613,    0,  614,    0,  615,  616,  617,  608,  609,    0,
      610,  611,  618,  612,  620,  619,    0,  613,  603,  614,
      615,  615,  616,  617,  621,  602,  606,  622,    0,  618,
      623,  620,  619,  610,  624,    0,  612,    0,    0,  625,
        0,  621,    0,  613,  622,  616,  626,  623,    0,  627,
      628,  624,  618,  611,  608,  619,  625,  614,    0,  620,

      629,    0,  630,  626,  631,  617,  627,  628,  632,    0,
      633,  623,  635,  634,    0,  624,  636,  629,  621,  630,
      637,  631,  638,  639,  640,  632,  622,  633,  625,  635,
      634,  626,  641,  636,  627,  642,    0,  637,    0,  638,
      639,  640,  643,  644,  643,  645,  628,    0,    0,  641,
      646,  647,  642,  632,  648,  629,  634,  652,  649,  643,
      644,  635,  645,  650,  640,  637,  651,  646,  647,  653,
      654,  648,  655,    0,  652,  649,  656,  641,  657,    0,
      650,    0,  658,  651,  659,  660,  653,  654,  661,  655,
      642,  647,  662,  656,  663,  657,  642,  644,  649,  658,

      664,  659,  660,  650,  665,  661,  651,  666,  667,  662,
        0,  663,    0,    0,  669,  670,  671,  664,  672,  655,
      656,  665,  673,    0,  666,  667,  674,  658,  675,  661,
      654,  669,  670,  671,  676,  672,    0,  663,    0,  673,
      659,  657,  660,  674,  665,  675,  662,  677,  678,  667,
      679,  676,  680,  666,  669,  670,  681,  682,  672,  683,
      686,    0,  684,  685,  677,  678,  690,  679,  689,  680,
      691,  692,  693,  681,  682,  694,  683,  686,  674,  684,
      685,  695,  675,  690,  696,  689,    0,  691,  692,  693,
      697,    0,  694,    0,  698,  679,  699,  700,  695,    0,

      686,  696,  684,  677,  682,  678,  684,  697,  689,  685,
      680,  698,  701,  699,  700,  681,  694,  693,  683,  702,
      703,    0,    0,    0,  704,  705,  706,  707,  708,  701,
      692,  709,  710,  711,  712,  714,  702,  703,  696,  698,
      695,  704,  705,  706,  707,  708,  713,    0,  709,  710,
      711,  712,  714,  715,  716,  717,  718,  719,  720,    0,
      721,    0,  722,  713,  702,  704,  706,    0,  723,  724,
      715,  716,  717,  718,  719,  720,  704,  721,  703,  722,
      711,  725,  708,  726,  707,  723,  724,  727,  728,  730,
      712,  713,  714,    0,  729,  709,    0,    0,  725,  731,

      726,  732,  715,  734,  727,  728,  730,  733,  735,  736,
      716,  729,  737,  720,  718,  723,  731,  721,  732,  738,
      734,  722,  739,  740,  733,  735,  736,  724,  741,  737,
      742,  744,  726,  728,    0,  743,  738,  745,  725,  739,
      740,    0,  746,  747,  727,  741,  748,  742,  744,  729,
        0,  735,  743,  749,  745,  736,  732,  750,  731,  746,
      747,  751,  733,  748,  752,  754,  753,  734,    0,  741,
      749,    0,    0,    0,  750,  738,  739,    0,  751,    0,
      743,  752,  754,  753,    0,    0,    0,    0,  747,    0,
        0,    0,    0,    0,    0,    0,  745,  749,    0,  746,

        0,  751,    0,    0,    0,  748,  753,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  750,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  757,  757,    0,  757,  757,  757,  757,  757,  757,
      758,    0,    0,    0,  758,  758,  758,  758,  759,  759,
      759,  760,  760,  760,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  762,  762,  763,  763,    0,  763,  764,
        0,  764,  764,  764,  764,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,

      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1317 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1477 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 756 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2876 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(BUILTIN_OFFSETOF); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(INT128); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 71:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 218 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(WIDE_STRING_LITERAL); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 153:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return(';'); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return('{'); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return('}'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return(','); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return(':'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return('='); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return('('); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return(')'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('['); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return(']'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return('.'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 274 "lexer.l"
{ return('&'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return('!'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return('~'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 277 "lexer.l"
{ return('-'); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return('+'); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return('*'); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return('/'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 281 "lexer.l"
{ return('%'); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 282 "lexer.l"
{ return('<'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 283 "lexer.l"
{ return('>'); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 284 "lexer.l"
{ return('^'); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 285 "lexer.l"
{ return('|'); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 286 "lexer.l"
{ return('?'); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 287 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 289 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 315 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 316 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 321 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 326 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 327 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 334 "lexer.l"
ECHO;
	YY_BREAK
#line 2541 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 756 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 756 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 755);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 334 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            const char * pointer = line + 1;
            bool hasLineNumber = false;
            int lineNumber;
            char numberString[20];

            line[count] = 0;
            if(GetString(&pointer, numberString, sizeof(numberString)))
            {
               char * ptr = null;
               lineNumber = (int)strtol(numberString, &ptr, 10);
               if(ptr && ptr > numberString)
                  hasLineNumber = true;
            }

            if(hasLineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = yy_current_buffer;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   yy_current_buffer = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   yy_current_buffer = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
