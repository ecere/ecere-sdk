#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 185
#define YY_END_OF_BUFFER 186
static yyconst short int yy_accept[774] =
    {   0,
      120,  120,  186,  184,  182,  181,  180,  183,  167,  184,
        1,  179,  173,  166,  184,  161,  162,  171,  170,  158,
      169,  165,  172,  126,  126,  159,  155,  174,  160,  175,
      178,  120,  120,  120,  163,  164,  176,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  156,  177,  157,  168,  154,
        0,  131,    0,  140,  157,  149,  141,    0,    0,  138,
      146,  136,  147,  137,  148,    0,  129,    2,    3,  139,
        0,  125,    0,  126,    0,  126,  120,  164,  156,  163,
      145,  151,  153,  152,  144,    0,  120,    0,  120,    0,

        0,  142,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,   11,  120,  120,  120,  120,  120,  120,
      120,  120,   19,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  143,  150,  127,  133,
        0,  129,  130,  129,    0,    0,  125,    0,  128,    0,
      121,  120,  135,  134,  120,  120,    0,  132,    0,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      100,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
       17,   47,  120,  120,  120,  120,   20,  120,  120,  120,
       53,  120,  120,  120,  120,  120,  120,  120,   46,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,    0,  129,
      130,    0,  130,    0,  129,    0,    0,  128,  123,  124,
      121,    0,   66,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

        4,  120,    6,    7,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,   13,   14,  120,
      120,  120,   18,  120,  120,  120,  120,  120,   22,  120,
       54,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,   21,
      120,  120,  120,   40,  120,  120,  120,    0,  130,    0,
      129,  123,  123,    0,  123,  123,  124,    0,    0,  122,
       67,  120,  120,  120,  120,  120,  120,  120,  101,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,    5,   49,

        8,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,   16,  120,  120,  120,   60,   48,
      120,  120,  120,  120,  120,   55,  120,  120,   25,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,   38,
      120,  120,  120,  103,   44,    0,  123,  123,  123,    0,
        0,  124,  122,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,   58,   52,
      120,  120,   12,   15,  120,   57,   96,   79,  120,  120,

      120,   92,  120,   56,  120,   24,   26,   29,   33,  120,
      120,   35,  120,   36,  120,  120,  120,  120,  120,  120,
      120,    0,  123,  120,  120,  120,  120,  120,  120,  120,
       99,  120,  120,   84,   90,  120,  120,  120,  120,  120,
       59,  120,  120,  120,  120,  120,  120,  120,   77,  120,
      120,  120,  120,  120,  120,  120,  120,  117,  118,  116,
       10,  120,  120,  120,  120,   93,  120,  120,  120,   88,
      120,  120,  120,  120,   37,  120,   51,  120,  120,   68,
      120,  120,   72,  120,  120,  120,  120,  120,  120,  120,
      120,   78,   61,  120,   27,  120,   34,  102,  120,  120,

       87,  120,  120,  120,  120,  120,  120,    9,  120,  120,
      120,  120,  120,   45,   23,   70,  120,  114,  120,  120,
       39,   41,  120,   63,  120,   83,   71,   31,  120,  120,
      120,  120,  120,  120,  120,  120,   85,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,   81,   82,  120,
      115,  120,  120,   50,  120,  106,   69,  120,  120,  120,
      120,  120,   62,   76,   89,   28,  120,   43,  120,   95,
      112,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,   30,   75,  120,  120,    0,  120,  120,   86,  120,
       98,  120,  120,  109,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,   80,    0,  120,   91,   42,  120,
      120,  120,  120,  120,  105,  120,  104,   94,   74,  120,
      120,  120,   97,  120,  120,  120,  120,  119,  120,  120,
      120,  120,  120,  120,  107,  120,  113,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,   65,  120,  120,
      120,  120,  120,  120,   64,  120,  120,  111,  120,   32,
      120,  108,  120,  120,  120,  120,  120,  120,  120,  110,
      120,   73,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   24,   26,   24,   27,   24,   28,   29,   30,
       31,   32,   33,    1,   34,   35,   36,   34,   37,   38,
       39,   39,   40,   41,   39,   42,   39,   43,   39,   44,
       39,   39,   39,   39,   45,   39,   39,   46,   39,   39,
       47,   48,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   39,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[81] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    1,    4,    1,    1,    1,    1,    5,    1,
        6,    6,    6,    6,    6,    6,    6,    2,    1,    1,
        1,    1,    1,    7,    7,    7,    7,    7,    8,    9,
        9,    9,    8,    9,    8,    8,    1,    1,    1,    1,
        8,    7,    7,    7,    7,    7,    7,    8,    8,    9,
        9,    8,    9,    8,    8,    8,    9,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[783] =
    {   0,
        0,    0,  216, 3017, 3017, 3017, 3017, 3017,  179,   74,
     3017, 3017,   51,   73,  158, 3017, 3017,  169,   69, 3017,
       70,   68,   83,  104,   94,   77, 3017,  123,  167,   65,
     3017,   96,  124,  127, 3017, 3017,  166,  145,  146,  131,
      161,  166,  165,  175,  180,  193,  159,  181,  184,  151,
      212,  215,  231,  220,  236, 3017,   80, 3017, 3017, 3017,
       99, 3017,  179, 3017, 3017, 3017, 3017,  100,   96, 3017,
     3017, 3017, 3017, 3017, 3017,  152,  276, 3017, 3017, 3017,
      321,  366,  303,  309,  150,    0,    0, 3017, 3017, 3017,
      135, 3017, 3017, 3017,  132,  109,  223,  108,  238,  136,

       84, 3017,  242,  245,  249,  256,  294,  427,  233,  345,
      264,  278,  355,  265,  346,  327,  384,  387,  386,  388,
      389,  390,  393,  402,  417,  414,  420,  424,  412,  432,
      433,  439,  413,  443,  461,  463,  465,  477,  466,  490,
      491,  493,  495,  500,  497,  509,  501,  524,  525,  505,
      506,  529,  515,  531,  558,  559, 3017, 3017, 3017, 3017,
      579,  569,  612,  657,  639,  648,  580,  591,  700,    0,
      688,  565, 3017, 3017,    0,  568,  154, 3017,  110,  708,
      682,  724,  571,  726,  676,  734,  631,  745,  736,  739,
      742,  747,  754,  755,  757,  758,  760,  765,  616,  767,

      663,  761,  768,  770,  773,  791,  795,  803,  806,  810,
      811,  818,  824,  825,  826,  831,  822,  833,  834,  840,
      829,  845,  856,  860,  863,  865,  871,  872,  866,  884,
      885,  887,  890,  891,  892,  893,  899,  905,  906,  918,
      919,  925,  927,  928,  932,  930,  933,  934,  937,  939,
      940,  952,  955,  960,  961,  962,  963,  964,  998, 1010,
        0, 1037, 1034, 1061, 1061, 1017, 1106, 1096, 1101, 1132,
     1137, 1088,  966, 1018,  998, 1017, 1038, 1089, 1079, 1112,
     1160, 1173, 1174, 1175, 1176, 1183, 1179, 1185, 1194, 1195,
      985, 1198, 1199, 1201, 1203, 1208, 1206, 1213, 1210, 1214,

      974, 1217, 1219, 1229, 1235, 1238, 1239, 1240, 1250, 1248,
     1261, 1263, 1264, 1266, 1270, 1273, 1272, 1274, 1277, 1279,
     1284, 1285, 1298, 1299, 1300, 1304, 1305, 1310, 1311, 1312,
     1313, 1314, 1320, 1332, 1334, 1335, 1342, 1343, 1347, 1340,
     1350, 1354, 1361, 1362, 1366, 1363, 1373, 1374, 1376, 1372,
     1377, 1387, 1384, 1395, 1396, 1408, 1418, 1426, 1454, 1435,
     1499,    0, 1430, 1481, 1490,    0, 1504, 1550, 1557, 1564,
     1410, 1426, 1473, 1541, 1411, 1527, 1458, 1505, 1581, 1582,
     1472, 1583, 1501, 1584, 1585, 1587, 1588, 1592, 1589, 1608,
     1612, 1615, 1618, 1617, 1623, 1624, 1627, 1633, 1508, 1642,

     1647, 1649, 1652, 1653, 1654, 1656, 1657, 1667, 1672, 1679,
     1680, 1681, 1683, 1687, 1685, 1690, 1694, 1701, 1706, 1710,
     1713, 1714, 1715, 1716, 1721, 1724, 1722, 1725, 1743, 1744,
     1745, 1747, 1748, 1751, 1750, 1753, 1757, 1758, 1766, 1776,
     1778, 1781, 1782, 1784, 1785, 1802, 1823,    0, 1797, 1850,
     1866, 1873, 1863, 1803, 1897, 1787, 1874, 1851, 1899, 1842,
     1907, 1901, 1910, 1920, 1917, 1921, 1928, 1929, 1931, 1932,
     1939, 1935, 1942, 1940, 1943, 1951, 1954, 1958, 1963, 1966,
     1961, 1973, 1974, 1977, 1823, 1986, 1993, 1995, 1997, 1998,
     2004, 2005, 2007, 2009, 2020, 2023, 2025, 2028, 2030, 2031,

     2033, 2036, 2039, 2041, 2044, 2046, 2051, 2052, 2055, 2057,
     2064, 2065, 2066, 2073, 2077, 2078, 2080, 2085, 2086, 2088,
     2089, 2100, 2131, 2091, 2117, 2122, 2104, 2119, 2120, 2132,
     2135, 2148, 2150, 2151, 2153, 2157, 2169, 2171, 2175, 2178,
     2179, 2184, 2185, 2189, 2191, 2193, 2197, 2198, 2200, 2204,
     2205, 2207, 2209, 2211, 2219, 2223, 2225, 2232, 2234, 2237,
     2238, 2243, 2244, 2245, 2263, 2257, 2264, 2265, 2267, 2269,
     2272, 2273, 2275, 2277, 2278, 2279, 2285, 2287, 2291, 2293,
     2297, 2299, 2303, 2307, 2312, 2317, 2318, 2321, 2325, 2327,
     2336, 2337, 2330, 2341, 2345, 2349, 2350, 2351, 2352, 2355,

     2364, 2365, 2371, 2373, 2374, 2380, 2379, 2383, 2386, 2389,
     2392, 2394, 2395, 2398, 2399, 2405, 2407, 2418, 2427, 2428,
     2429, 2432, 2436, 2433, 2439, 2441, 2443, 2447, 2452, 2454,
     2457, 2459, 2463, 2465, 2466, 2467, 2472, 2473, 2475, 2491,
     2493, 2496, 2498, 2499, 2504, 2502, 2506, 2509, 2522, 2524,
     2528, 2531, 2535, 2536, 2538, 2540, 2542, 2546, 2543, 2551,
     2554, 2562, 2564, 2565, 2570, 2572, 2573, 2575, 2577, 2576,
     2578, 2580, 2585, 2591, 2601, 2603, 2604, 2605, 2609, 2607,
     2611, 2614, 2619, 2625, 2627,   96, 2629, 2630, 2634, 2638,
     2639, 2641, 2649, 2657, 2663, 2665, 2667, 2672, 2673, 2677,

     2675, 2681, 2683, 2687, 3017,   72, 2688, 2679, 2685, 2691,
     2697, 2699, 2701, 2709, 2706, 2720, 2731, 2735, 2736, 2738,
     2739, 2741, 2744, 2745, 2747, 2749, 2751, 2754, 2759, 2757,
     2767, 2769, 2770, 2772, 2773, 2775, 2777, 2779, 2778, 2781,
     2791, 2788, 2799, 2800, 2801, 2807, 2810, 2814, 2820, 2822,
     2825, 2830, 2843, 2836, 2844, 2845, 2850, 2851, 2854, 2855,
     2857, 2859, 2864, 2870, 2866, 2873, 2875, 2888, 2889, 2891,
     2893, 2896, 3017, 2963, 2972, 2980, 2985, 2986, 2995, 2999,
     3001, 3007
    } ;

static yyconst short int yy_def[783] =
    {   0,
      773,    1,  773,  773,  773,  773,  773,  773,  773,  774,
      773,  773,  773,  773,  775,  773,  773,  773,  773,  773,
      773,  773,  773,  773,   24,  773,  773,  773,  773,  773,
      773,  776,  776,  776,  773,  773,  773,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  773,  773,  773,  773,  773,
      774,  773,  774,  773,  773,  773,  773,  775,  775,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  777,   25,  778,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  776,  773,  776,  779,

      775,  773,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  780,
      777,  776,  773,  773,  778,  776,  779,  773,  779,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,

      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  773,  773,
      163,  773,  773,  773,  773,  773,  773,  773,  780,  781,
      773,  773,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,

      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  773,  773,  773,
      773,  269,  773,  773,  781,  365,  773,  773,  773,  773,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,

      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  773,  773,  365,  773,  773,
      773,  773,  773,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,

      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  773,  773,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,

      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  782,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,

      776,  776,  776,  776,  773,  782,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,    0,  773,  773,  773,  773,  773,  773,  773,
      773,  773
    } ;

static yyconst short int yy_nxt[3098] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   25,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   32,   32,   32,   32,   32,
       32,   34,   32,   32,   32,   32,   35,    4,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   32,   46,
       32,   32,   47,   32,   48,   32,   49,   50,   51,   52,
       53,   54,   55,   32,   32,   32,   56,   57,   58,   59,
       62,   64,   65,   66,   71,  705,   76,   73,   77,   77,
       77,   77,   77,   77,   77,   94,   95,   78,  773,   72,

       74,   75,   79,   67,   87,   62,   96,   68,   88,  705,
      157,  159,  773,   80,   86,   86,   86,   86,   86,   86,
       86,   63,   81,   98,   82,   82,   82,   82,   82,   82,
       82,   69,   89,  100,   96,  175,   98,   96,  101,  773,
       83,   96,  178,   84,   84,   84,   63,   69,   84,   85,
       90,   98,   91,   92,   98,   96,   96,  158,   98,   83,
      178,   96,  174,   84,   84,  173,   84,  773,  170,   96,
      160,   96,   98,   98,   84,   96,   96,   85,   98,  103,
      104,  773,  105,  179,  106,   96,   98,  107,   98,   99,
       96,   96,   98,   98,   96,  108,  102,   93,  115,   70,

      109,  179,   98,   96,  110,   69,  142,   98,   98,   60,
      112,   98,  116,  111,  113,  773,  114,  120,  121,  117,
       98,  122,   96,  118,  137,   96,  119,  125,  123,  126,
       96,  124,  138,   96,  128,  131,  139,  129,  127,   98,
      130,   96,   98,   96,  773,  132,   96,   98,   96,  133,
       98,  140,   96,  773,  141,   96,  134,  135,   98,   96,
       98,  136,  773,   98,  773,   98,   96,  143,  773,   98,
      144,  145,   98,  149,   96,   96,   98,  773,  773,  153,
      773,  146,  147,   98,  148,  154,  773,  155,   96,  150,
      151,   98,   98,  773,  156,  152,   77,   77,   77,   77,

       77,   77,   77,  176,   96,   98,  197,  180,  773,  773,
      181,  182,  161,  162,  773,  162,  162,  162,  168,  183,
      168,   98,  773,  169,  169,  169,  169,  169,  169,  169,
      773,  161,  162,  199,  202,  162,  162,   96,  162,  163,
      773,  164,  164,  164,  164,  164,  164,  164,   84,   84,
       84,  773,  200,   84,   98,   96,   96,  165,  166,  184,
      166,  166,  166,  773,  185,   96,  773,  773,   84,   84,
      773,   84,   98,   98,  773,  773,  165,  166,  773,   84,
      166,  166,   98,  166,   81,  773,   82,   82,   82,   82,
       82,   82,   82,  773,   96,  204,   96,   96,   96,   96,

       96,  203,   83,   96,  773,  167,  167,  167,  773,  198,
      167,   98,   96,   98,   98,   98,   98,   98,  201,  773,
       98,   83,   96,   96,   96,  167,  167,   96,  167,   98,
       96,  773,  773,  773,   96,  205,  167,   96,  206,   98,
       98,   98,   96,   96,   98,  209,  212,   98,  210,   96,
      207,   98,  213,   96,   98,  214,  773,  208,  211,   98,
       98,  773,  773,  773,  773,  773,   98,  773,  773,  773,
       98,   96,  215,   96,  773,   96,   96,  220,  186,  187,
      188,  189,  190,  191,  217,  216,  192,   96,   98,  218,
       98,  219,   98,   98,  193,  194,  195,  773,  196,  221,

       96,   96,  222,   96,   98,   96,  773,   96,  223,  224,
       96,   96,  773,  773,  225,   96,   96,   98,   98,   96,
       98,  773,   98,  226,   98,   96,  773,   98,   98,  229,
      227,  228,   98,   98,   96,   96,   98,  773,  231,   96,
      230,   96,   98,  234,  773,  773,  773,  773,  773,  232,
      235,   98,   98,  247,  241,  233,   98,  236,   98,  773,
      243,  237,  238,  244,  239,  240,  773,  773,   96,   96,
      251,  250,  242,  773,  245,   96,  246,  773,   96,  773,
      773,   96,  254,  248,  249,   98,   98,  773,  252,  773,
      255,  773,   98,  256,  259,   98,  259,  253,   98,  260,

      260,  260,  260,  260,  260,  260,  162,  773,  162,  162,
      162,  169,  169,  169,  169,  169,  169,  169,  258,  167,
      167,  167,  277,  773,  167,  162,   96,  257,  162,  162,
      273,  162,  261,  261,  261,  261,  261,  261,  261,  167,
      167,   96,  167,   98,  773,  773,  773,  773,  262,  263,
      167,  263,  263,  263,  266,  773,  266,  773,   98,  267,
      267,  267,  267,  267,  267,  267,  163,  262,  263,  773,
      299,  263,  263,   96,  263,  163,  773,  164,  164,  164,
      164,  164,  164,  164,  773,  166,   96,  166,  166,  166,
       98,  773,   96,  264,  265,  773,  265,  265,  265,  773,

      773,  284,  773,   98,  166,  773,  270,  166,  166,   98,
      166,  773,  264,  265,  773,  773,  265,  265,   96,  265,
      169,  169,  169,  169,  169,  169,  169,  271,  271,  271,
      773,  272,  271,  773,   96,   98,   96,  268,  280,  268,
      268,  268,  773,  773,   96,  275,   96,  271,  271,   96,
      271,   98,   96,   98,  272,   96,  268,   96,  271,  268,
      268,   98,  268,   98,   96,   96,   98,   96,   96,   98,
       96,   96,   98,  274,   98,   96,  773,   96,   96,  773,
       96,   98,   98,   96,   98,   98,  773,   98,   98,  276,
      278,  287,   98,  279,   98,   98,  281,   98,  773,  285,

       98,   96,  282,  283,  289,   96,  773,  773,  773,  291,
      286,  290,  288,   96,  292,  294,   96,  300,   98,  302,
       96,   96,   98,  296,  293,  303,  301,  298,   96,  297,
       98,  295,   96,   98,   96,   96,   96,   98,   98,   96,
      304,   96,  773,   96,   96,   98,  773,  773,  773,   98,
       96,   98,   98,   98,  308,   96,   98,  773,   98,  305,
       98,   98,  311,  306,  307,  309,   96,   98,  773,  312,
       96,  773,   98,   96,  310,   96,   96,  313,  317,  314,
      315,   96,   96,   98,  316,  319,  318,   98,  320,  321,
       98,  322,   98,   98,   96,   96,  327,   96,   98,   98,

       96,   96,   96,   96,  773,  331,  773,  773,  773,   96,
      773,   98,   98,  773,   98,   96,   96,   98,   98,   98,
       98,  323,  773,  329,  326,  324,   98,  328,   96,   96,
      325,  773,   98,   98,  773,   96,  773,   96,   96,  330,
       96,  773,   96,   96,   96,   98,   98,   96,  336,   96,
       96,  335,   98,  334,   98,   98,  333,   98,  332,   98,
       98,   98,   96,  773,   98,   96,   98,   98,  337,  773,
       96,   96,   96,   96,   96,  338,   96,  773,  773,   98,
      341,  343,   98,  340,   96,  339,  346,   98,   98,   98,
       98,   98,  773,   98,  349,   96,  342,  773,  344,  773,

      345,   98,  773,  347,  773,  348,  773,  773,   96,  350,
      773,  773,   98,  355,  352,  354,  356,  351,  260,  260,
      260,  260,  260,  260,  260,   98,  357,   96,   96,  353,
      260,  260,  260,  260,  260,  260,  260,  267,  267,  267,
      267,  267,  267,  267,   98,   98,  773,  162,   96,  162,
      162,  162,  358,  389,  358,  773,  773,  359,  359,  359,
      359,  359,  359,  359,  372,   98,  162,  773,  373,  162,
      162,  263,  162,  263,  263,  263,  360,  773,  360,  163,
      371,  361,  361,  361,  361,  361,  361,  361,  773,   96,
      263,  773,  773,  263,  263,  374,  263,  773,  265,   96,

      265,  265,  265,  369,  773,  369,   98,  773,  370,  370,
      370,  370,  370,  370,  370,  773,   98,  265,  773,  773,
      265,  265,   96,  265,  163,  773,  267,  267,  267,  267,
      267,  267,  267,  268,  376,  268,  268,  268,  362,   98,
      363,  363,  363,  166,  364,  166,  166,  166,  773,  773,
      773,  773,  268,  375,  773,  268,  268,  362,  268,  773,
      363,  363,  166,  363,  773,  166,  166,  364,  166,  366,
       96,  367,  367,  367,  377,  368,  271,  271,  271,  773,
      773,  271,  773,   96,   96,   96,   96,   98,  366,   96,
      773,  367,  367,   96,  367,   96,  271,  271,  368,  271,

       98,   98,   98,   98,   96,   96,   98,  271,   96,   96,
       98,   96,   98,   96,  773,  773,   96,  773,   96,  378,
       96,   98,   98,   96,   96,   98,   98,   96,   98,   96,
       98,  382,  384,   98,  381,   98,  379,   98,  773,   96,
       98,   98,  773,  380,   98,   96,   98,  383,   96,   96,
       96,  773,  773,  391,  385,  390,   98,  387,   96,  386,
       96,  395,   98,  397,  388,   98,   98,   98,  392,  393,
      394,   96,  396,   96,   96,   98,   96,   98,  399,  398,
       96,  773,   96,   96,   96,  773,  773,   96,   98,   96,
       98,   98,  403,   98,   96,   96,  773,   98,  402,   98,

       98,   98,  405,  400,   98,  404,   98,  401,   96,   96,
       96,   98,   98,  406,   96,   96,  773,  773,  773,  773,
       96,   96,   96,   96,   96,   98,   98,   98,  408,  419,
       96,   98,   98,  407,  412,  409,  411,   98,   98,   98,
       98,   98,   96,  410,   96,   96,  413,   98,  773,  773,
       96,  773,   96,   96,  415,  417,  414,   96,  773,   98,
       96,   98,   98,  773,   96,  422,  416,   98,  418,   98,
       98,   96,   96,   96,   98,  423,   96,   98,  773,  420,
      421,   98,   96,   96,   96,  773,   96,   96,   98,   98,
       98,  424,  773,   98,   96,  430,  773,   96,  773,   98,

       98,   98,  425,   98,   98,   96,   96,  426,  773,  427,
      428,   98,  433,  432,   98,  431,  429,  773,   96,  435,
       96,   96,   98,   98,  773,  436,  437,  438,   96,  773,
      439,  773,  773,  773,  434,   98,   96,   98,   98,  773,
      773,  440,  773,  773,  441,   98,  359,  359,  359,  359,
      359,  359,  359,   98,  442,  361,  361,  361,  361,  361,
      361,  361,  773,  773,  773,  443,  444,  363,   96,  363,
      363,  363,  773,  445,  359,  359,  359,  359,  359,  359,
      359,  457,   96,   96,  773,   98,  363,  773,  454,  363,
      363,  263,  363,  263,  263,  263,  446,  773,  446,   98,

       98,  447,  447,  447,  447,  447,  447,  447,  773,  459,
      263,   96,  773,  263,  263,   96,  263,  163,   96,  361,
      361,  361,  361,  361,  361,  361,  773,  448,   98,  449,
      449,  449,   98,  450,  463,   98,  265,   96,  265,  265,
      265,  367,  455,  367,  367,  367,  448,  773,  773,  449,
      449,   96,  449,  773,   98,  265,  450,  773,  265,  265,
      367,  265,  460,  367,  367,  451,  367,  451,   98,  465,
      452,  452,  452,  452,  452,  452,  452,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,   96,   96,   96,   96,   96,  458,   96,   96,   96,

      456,  453,   96,  453,  453,  453,  773,  773,   98,   98,
       98,   98,   98,  470,   98,   98,   98,  471,   96,   98,
      453,  773,   96,  453,  453,   96,  453,   96,   96,  773,
      773,  461,  773,   96,   96,   98,  464,   96,  468,   98,
      467,  773,   98,   96,   98,   98,  466,  469,  773,  462,
       98,   98,   96,  773,   98,  773,  773,   96,  472,   96,
       98,  773,   96,   96,   96,  474,   96,   96,  477,   98,
      475,  773,  473,  476,   98,  773,   98,   96,  480,   98,
       98,   98,   96,   98,   98,  481,  773,  478,  479,   96,
       96,   96,  482,   96,   98,   96,  773,   96,  773,   98,

       96,  773,  773,  484,   96,  773,   98,   98,   98,  486,
       98,   96,   98,  483,   98,  485,   96,   98,  487,  488,
       96,   98,  489,   96,   96,   96,   96,  490,   98,  773,
      773,   96,   96,   98,   96,   96,  493,   98,  495,  773,
       98,   98,   98,   98,  504,  491,  492,  494,   98,   98,
      497,   98,   98,   96,   96,   96,  498,   96,   96,  496,
       96,   96,  773,   96,  773,  773,  773,   96,   96,  502,
       98,   98,   98,  773,   98,   98,   96,   98,   98,  499,
       98,  505,  501,  500,   98,   98,   96,  773,   96,  506,
      503,   96,   96,   98,   96,   96,  773,   96,  507,  773,

      509,  508,  511,   98,  513,   98,  773,  773,   98,   98,
      510,   98,   98,   96,   98,  514,  516,  773,  773,  512,
      515,  517,  447,  447,  447,  447,  447,  447,  447,  773,
       98,  773,  519,   96,  449,  521,  449,  449,  449,  773,
      773,  520,  518,  447,  447,  447,  447,  447,  447,  447,
       98,  526,   96,  449,  773,  773,  449,  449,  524,  449,
      363,   96,  363,  363,  363,  522,  773,  522,  773,   98,
      523,  523,  523,  523,  523,  523,  523,  558,   98,  363,
      773,  773,  363,  363,   96,  363,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      453,   98,  453,  453,  453,  773,  530,   96,  773,   96,
      367,   96,  367,  367,  367,  773,  773,   96,  525,  453,
       96,  528,  453,  453,   98,  453,   98,   96,   98,  367,
       96,   96,  367,  367,   98,  367,  527,   98,   96,   96,
      773,   96,   96,  773,   98,   96,  773,   98,   98,   96,
       96,  529,   96,   96,  540,   98,   98,  531,   98,   98,
      532,   96,   98,  541,   96,  773,   98,   98,   96,   98,
       98,   96,  773,   96,  773,  773,   96,  773,   98,  533,
      773,   98,  534,   96,   96,   98,  535,   96,   98,  536,
       98,  544,  537,   98,  545,  539,   96,  543,  538,  773,

       98,   98,  542,   96,   98,   96,  773,   96,   96,  773,
      773,  773,  773,   98,   96,   96,  546,   96,  549,   96,
       98,  551,   98,  547,   98,   98,  548,  552,  550,  553,
       96,   98,   98,   96,   98,   96,   98,  554,   96,  555,
       96,   96,  773,   96,  556,  557,   96,   98,  560,   96,
       98,   96,   98,  773,   96,   98,   96,   98,   98,  559,
       98,   96,   96,   98,  561,   96,   98,   96,   98,  562,
      563,   98,  773,   98,   96,   96,   96,  773,   98,   98,
      773,  565,   98,   96,   98,  773,  566,   96,   96,  564,
       96,   98,   98,   98,  568,   96,   96,  569,   96,   96,

       98,   96,  567,  773,   98,   98,  773,   98,  773,  773,
      773,  773,   98,   98,   96,   98,   98,  773,   98,  570,
      523,  523,  523,  523,  523,  523,  523,   96,  573,   96,
       96,   98,   96,  571,  572,  773,  575,  773,  773,  581,
      576,  579,   96,  574,   98,   96,   98,   98,  577,   98,
      578,  523,  523,  523,  523,  523,  523,  523,   96,   98,
       96,   96,   98,   96,  580,  773,  583,   96,  449,  773,
      449,  449,  449,  582,  773,   98,  773,   98,   98,   96,
       98,   96,  585,  773,   98,   96,  584,  449,   96,   96,
      449,  449,  591,  449,   96,   96,   98,  586,   98,   96,

      587,   96,   98,   96,  593,   98,   98,   96,   96,  588,
       96,   98,   98,  773,   96,   96,   98,   96,   98,   96,
       98,   96,  773,  589,   98,   98,  773,   98,  773,   96,
      592,   98,   98,   96,   98,   96,   98,  590,   98,  595,
      773,  773,   96,  594,   96,  597,   98,   96,   96,  598,
       98,  596,   98,   96,   96,   96,  599,  600,  603,   98,
      602,   98,  604,  773,   98,   98,  601,   96,  605,  773,
       98,   98,   98,   96,   96,   96,  606,   96,  608,   96,
      609,  773,   96,   96,   98,   96,  607,   96,   96,   96,
       98,   98,   98,  773,   98,   96,   98,   96,  612,   98,

       98,   96,   98,   96,   98,   98,   98,   96,  773,   96,
      610,  611,   98,   96,   98,  773,  613,   96,   98,  773,
       98,  773,   96,  624,   98,  617,   98,   96,   96,  620,
       98,   96,  615,  621,   98,   96,  616,   96,  614,   98,
       96,  618,  622,  619,   98,   98,   96,   96,   98,  773,
      773,   96,   98,  623,   98,   96,  773,   98,  633,   96,
       96,   96,   96,   98,   98,   96,  625,  627,   98,  773,
      773,  626,   98,  628,   96,   96,   98,   98,   98,   98,
      631,   96,   98,   96,   96,  630,  632,  634,  629,   96,
       96,   98,   98,   96,  635,  636,   96,  773,   98,   96,

       98,   98,   96,  773,   96,   96,   98,   98,   96,   96,
       98,  637,  773,   98,  638,   96,   98,   96,  640,   98,
      639,   98,   98,  773,  773,   98,   98,  773,   96,  642,
      645,  773,   98,  773,   98,  773,  647,   96,   96,   96,
      641,  643,   96,   96,  646,   98,   96,  644,  652,   96,
      651,   96,  650,   96,   98,   98,   98,   96,  648,   98,
       98,  649,   96,   98,   96,  653,   98,   96,   98,   96,
       98,  773,  773,   96,   98,   96,   96,   96,  773,   98,
      773,   98,   96,   96,   98,   96,   98,  773,  655,  663,
       98,  656,   98,   98,   98,  654,  773,  658,  773,   98,

       98,   96,   98,   96,  660,  773,   96,  773,   96,   96,
      661,  773,   96,  657,   96,  664,   96,  666,   98,   96,
       98,  659,  667,   98,  662,   98,   98,  773,  668,   98,
      773,   98,   96,   98,   96,  665,   98,  773,   96,  669,
      773,   96,  773,  773,  671,   96,   96,  672,   96,   98,
       96,   98,   96,   96,  674,   98,   96,  673,   98,  675,
      670,   96,   98,   98,   96,   98,  686,   98,  676,   98,
       98,  677,   96,   98,   96,   96,  773,  773,   98,  678,
       96,   98,   96,   96,  679,   96,   96,   96,   96,   98,
       96,   98,   98,  681,  680,   96,  682,   98,  683,   98,

       98,   96,   98,   98,   98,   98,  773,   98,  773,  773,
      773,   96,   98,   96,   96,   96,  684,   96,   98,   96,
      688,   96,  685,  689,   96,  690,  687,  691,   98,   96,
       98,   98,   98,  773,   98,   96,   98,   96,   98,   96,
       96,   98,  693,  773,   96,  694,   98,  773,   96,   96,
      692,   96,   98,  773,   98,  773,   98,   98,  696,   96,
      699,   98,  773,  773,  701,   98,   98,   96,   98,  702,
      697,  700,  698,   96,  695,   96,   98,   96,  704,  707,
      708,  703,   96,   96,   98,   96,  773,   96,  709,   96,
       98,   96,   98,   96,   98,   96,  773,   96,   96,   98,

       98,   96,   98,  710,   98,  773,   98,   96,   98,   96,
       98,   96,   98,  711,   98,   98,   96,  773,   98,   96,
      773,  773,  714,  773,   98,  773,   98,  773,   98,  712,
       96,  719,  713,   98,  717,  720,   98,  722,  723,  721,
      715,   96,  716,  773,  718,   96,   96,   98,   96,   96,
      726,   96,  725,  773,   96,   96,  773,   96,   98,   96,
      724,   96,   98,   98,   96,   98,   98,   96,   98,   96,
      727,   98,   98,  728,   98,  729,   98,   96,   98,   96,
       96,   98,   96,   96,   98,   96,   98,   96,   96,   96,
      773,   96,  732,  730,   98,  734,   98,   98,   96,   98,

       98,   96,   98,  733,   98,   98,   98,  731,   98,   96,
       96,   96,  773,  736,  735,   98,  738,   96,   98,  773,
       96,  773,  740,  739,   96,  737,   98,   98,   98,  742,
       96,  773,   96,  773,   98,   96,  741,   98,  743,  773,
       96,   98,  773,  744,  745,  746,   96,   98,  748,   98,
      747,  773,   98,   96,   96,   96,  749,   98,  773,  751,
       96,   96,  753,   98,   96,   96,  750,   96,  752,   96,
       98,   98,   98,  773,   96,  754,   96,   98,   98,  773,
       96,   98,   98,   96,   98,   96,   98,  756,  773,  755,
      757,   98,  760,   98,  773,  773,  759,   98,   96,   96,

       98,   96,   98,   96,  758,  763,   96,  773,  773,  773,
      773,  761,  764,  773,  762,   98,   98,  773,   98,  773,
       98,  767,  773,   98,  773,  773,  773,  773,  773,  769,
      773,  773,  773,  765,  773,  773,  773,  766,  773,  771,
      773,  773,  768,  772,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  770,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   68,   68,  773,   68,   68,   68,   68,   68,
       68,   97,  773,  773,  773,   97,   97,   97,   97,  171,
      171,  171,  172,  172,  172,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  269,  269,  365,  365,  773,  365,
      706,  773,  706,  706,  706,  706,    3,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773

    } ;

static yyconst short int yy_chk[3098] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       10,   13,   13,   14,   19,  706,   22,   21,   22,   22,
       22,   22,   22,   22,   22,   30,   30,   23,   69,   19,

       21,   21,   23,   14,   26,   61,   32,   69,   26,  686,
       57,   68,  179,   23,   25,   25,   25,   25,   25,   25,
       25,   10,   24,   32,   24,   24,   24,   24,   24,   24,
       24,  101,   28,   34,   33,   98,   96,   34,   34,   25,
       24,   40,  100,   24,   24,   24,   61,   68,   24,   24,
       28,   33,   28,   28,   34,   38,   39,   57,   40,   24,
      177,   50,   95,   24,   24,   91,   24,   25,   85,   47,
       76,   41,   38,   39,   24,   43,   42,   24,   50,   38,
       38,   63,   38,  100,   38,   44,   47,   38,   41,   33,
       45,   48,   43,   42,   49,   38,   37,   29,   40,   18,

       38,  177,   44,   46,   38,   15,   50,   45,   48,    9,
       39,   49,   41,   38,   39,    3,   39,   42,   42,   41,
       46,   42,   51,   41,   47,   52,   41,   43,   42,   43,
       54,   42,   48,   97,   44,   45,   48,   44,   43,   51,
       44,   53,   52,  109,    0,   45,   55,   54,   99,   46,
       97,   49,  103,    0,   49,  104,   46,   46,   53,  105,
      109,   46,    0,   55,    0,   99,  106,   51,    0,  103,
       51,   51,  104,   52,  111,  114,  105,    0,    0,   54,
        0,   51,   51,  106,   51,   54,    0,   55,  112,   52,
       53,  111,  114,    0,   55,   53,   77,   77,   77,   77,

       77,   77,   77,   99,  107,  112,  109,  103,    0,    0,
      104,  105,   77,   77,    0,   77,   77,   77,   83,  106,
       83,  107,    0,   83,   83,   83,   83,   83,   83,   83,
        0,   77,   77,  111,  114,   77,   77,  116,   77,   81,
        0,   81,   81,   81,   81,   81,   81,   81,   84,   84,
       84,    0,  112,   84,  116,  110,  115,   81,   81,  107,
       81,   81,   81,    0,  107,  113,    0,    0,   84,   84,
        0,   84,  110,  115,    0,    0,   81,   81,    0,   84,
       81,   81,  113,   81,   82,    0,   82,   82,   82,   82,
       82,   82,   82,    0,  117,  116,  119,  118,  120,  121,

      122,  115,   82,  123,    0,   82,   82,   82,    0,  110,
       82,  117,  124,  119,  118,  120,  121,  122,  113,    0,
      123,   82,  129,  133,  126,   82,   82,  125,   82,  124,
      127,    0,    0,    0,  128,  117,   82,  108,  118,  129,
      133,  126,  130,  131,  125,  121,  122,  127,  121,  132,
      119,  128,  122,  134,  108,  123,    0,  120,  121,  130,
      131,    0,    0,    0,    0,    0,  132,    0,    0,    0,
      134,  135,  124,  136,    0,  137,  139,  129,  108,  108,
      108,  108,  108,  108,  126,  125,  108,  138,  135,  127,
      136,  128,  137,  139,  108,  108,  108,    0,  108,  130,

      140,  141,  131,  142,  138,  143,    0,  145,  132,  134,
      144,  147,    0,    0,  135,  150,  151,  140,  141,  146,
      142,    0,  143,  135,  145,  153,    0,  144,  147,  137,
      135,  136,  150,  151,  148,  149,  146,    0,  139,  152,
      138,  154,  153,  141,    0,    0,    0,    0,    0,  140,
      142,  148,  149,  147,  145,  140,  152,  142,  154,    0,
      146,  142,  142,  146,  143,  144,    0,    0,  155,  156,
      151,  150,  145,    0,  146,  172,  146,    0,  176,    0,
        0,  183,  153,  148,  149,  155,  156,    0,  152,    0,
      154,    0,  172,  154,  161,  176,  161,  152,  183,  161,

      161,  161,  161,  161,  161,  161,  162,    0,  162,  162,
      162,  168,  168,  168,  168,  168,  168,  168,  156,  167,
      167,  167,  183,    0,  167,  162,  199,  155,  162,  162,
      176,  162,  163,  163,  163,  163,  163,  163,  163,  167,
      167,  187,  167,  199,    0,    0,    0,    0,  163,  163,
      167,  163,  163,  163,  165,    0,  165,    0,  187,  165,
      165,  165,  165,  165,  165,  165,  166,  163,  163,    0,
      199,  163,  163,  201,  163,  164,    0,  164,  164,  164,
      164,  164,  164,  164,    0,  166,  185,  166,  166,  166,
      201,    0,  181,  164,  164,    0,  164,  164,  164,    0,

        0,  187,    0,  185,  166,    0,  171,  166,  166,  181,
      166,    0,  164,  164,    0,    0,  164,  164,  180,  164,
      169,  169,  169,  169,  169,  169,  169,  171,  171,  171,
        0,  171,  171,    0,  182,  180,  184,  169,  185,  169,
      169,  169,    0,    0,  186,  181,  189,  171,  171,  190,
      171,  182,  191,  184,  171,  188,  169,  192,  171,  169,
      169,  186,  169,  189,  193,  194,  190,  195,  196,  191,
      197,  202,  188,  180,  192,  198,    0,  200,  203,    0,
      204,  193,  194,  205,  195,  196,    0,  197,  202,  182,
      184,  189,  198,  184,  200,  203,  186,  204,    0,  188,

      205,  206,  186,  186,  191,  207,    0,    0,    0,  193,
      188,  192,  190,  208,  194,  195,  209,  200,  206,  203,
      210,  211,  207,  196,  194,  204,  202,  198,  212,  197,
      208,  195,  217,  209,  213,  214,  215,  210,  211,  221,
      205,  216,    0,  218,  219,  212,    0,    0,    0,  217,
      220,  213,  214,  215,  208,  222,  221,    0,  216,  206,
      218,  219,  211,  207,  207,  209,  223,  220,    0,  212,
      224,    0,  222,  225,  210,  226,  229,  212,  215,  213,
      214,  227,  228,  223,  214,  217,  216,  224,  218,  219,
      225,  220,  226,  229,  230,  231,  227,  232,  227,  228,

      233,  234,  235,  236,    0,  231,    0,    0,    0,  237,
        0,  230,  231,    0,  232,  238,  239,  233,  234,  235,
      236,  223,    0,  229,  226,  224,  237,  228,  240,  241,
      225,    0,  238,  239,    0,  242,    0,  243,  244,  230,
      246,    0,  245,  247,  248,  240,  241,  249,  236,  250,
      251,  235,  242,  234,  243,  244,  233,  246,  232,  245,
      247,  248,  252,    0,  249,  253,  250,  251,  237,    0,
      254,  255,  256,  257,  258,  238,  273,    0,    0,  252,
      242,  244,  253,  241,  301,  240,  247,  254,  255,  256,
      257,  258,    0,  273,  250,  291,  243,    0,  245,    0,

      246,  301,    0,  248,    0,  249,    0,    0,  275,  251,
        0,    0,  291,  256,  253,  255,  257,  252,  259,  259,
      259,  259,  259,  259,  259,  275,  258,  276,  274,  254,
      260,  260,  260,  260,  260,  260,  260,  266,  266,  266,
      266,  266,  266,  266,  276,  274,    0,  260,  277,  260,
      260,  260,  262,  291,  262,    0,    0,  262,  262,  262,
      262,  262,  262,  262,  275,  277,  260,    0,  276,  260,
      260,  263,  260,  263,  263,  263,  264,    0,  264,  265,
      274,  264,  264,  264,  264,  264,  264,  264,    0,  279,
      263,    0,    0,  263,  263,  277,  263,    0,  265,  278,

      265,  265,  265,  272,    0,  272,  279,    0,  272,  272,
      272,  272,  272,  272,  272,    0,  278,  265,    0,    0,
      265,  265,  280,  265,  267,    0,  267,  267,  267,  267,
      267,  267,  267,  268,  279,  268,  268,  268,  269,  280,
      269,  269,  269,  267,  269,  267,  267,  267,    0,    0,
        0,    0,  268,  278,    0,  268,  268,  269,  268,    0,
      269,  269,  267,  269,    0,  267,  267,  269,  267,  270,
      281,  270,  270,  270,  280,  270,  271,  271,  271,    0,
        0,  271,    0,  282,  283,  284,  285,  281,  270,  287,
        0,  270,  270,  286,  270,  288,  271,  271,  270,  271,

      282,  283,  284,  285,  289,  290,  287,  271,  292,  293,
      286,  294,  288,  295,    0,    0,  297,    0,  296,  281,
      299,  289,  290,  298,  300,  292,  293,  302,  294,  303,
      295,  285,  287,  297,  284,  296,  282,  299,    0,  304,
      298,  300,    0,  283,  302,  305,  303,  286,  306,  307,
      308,    0,    0,  293,  288,  292,  304,  290,  310,  289,
      309,  297,  305,  299,  290,  306,  307,  308,  294,  295,
      296,  311,  298,  312,  313,  310,  314,  309,  302,  300,
      315,    0,  317,  316,  318,    0,    0,  319,  311,  320,
      312,  313,  308,  314,  321,  322,    0,  315,  307,  317,

      316,  318,  310,  305,  319,  309,  320,  306,  323,  324,
      325,  321,  322,  311,  326,  327,    0,    0,    0,    0,
      328,  329,  330,  331,  332,  323,  324,  325,  313,  327,
      333,  326,  327,  312,  317,  314,  316,  328,  329,  330,
      331,  332,  334,  315,  335,  336,  320,  333,    0,    0,
      340,    0,  337,  338,  322,  325,  321,  339,    0,  334,
      341,  335,  336,    0,  342,  332,  324,  340,  326,  337,
      338,  343,  344,  346,  339,  333,  345,  341,    0,  328,
      330,  342,  350,  347,  348,    0,  349,  351,  343,  344,
      346,  334,    0,  345,  353,  340,    0,  352,    0,  350,

      347,  348,  335,  349,  351,  354,  355,  336,    0,  337,
      338,  353,  343,  342,  352,  341,  339,    0,  356,  345,
      371,  375,  354,  355,    0,  346,  347,  348,  357,    0,
      349,    0,    0,    0,  344,  356,  372,  371,  375,    0,
        0,  351,    0,    0,  352,  357,  358,  358,  358,  358,
      358,  358,  358,  372,  353,  360,  360,  360,  360,  360,
      360,  360,    0,    0,    0,  355,  356,  363,  377,  363,
      363,  363,    0,  357,  359,  359,  359,  359,  359,  359,
      359,  375,  381,  373,    0,  377,  363,    0,  372,  363,
      363,  359,  363,  359,  359,  359,  364,    0,  364,  381,

      373,  364,  364,  364,  364,  364,  364,  364,    0,  377,
      359,  383,    0,  359,  359,  378,  359,  361,  399,  361,
      361,  361,  361,  361,  361,  361,    0,  365,  383,  365,
      365,  365,  378,  365,  381,  399,  361,  376,  361,  361,
      361,  367,  373,  367,  367,  367,  365,    0,    0,  365,
      365,  374,  365,    0,  376,  361,  365,    0,  361,  361,
      367,  361,  378,  367,  367,  368,  367,  368,  374,  383,
      368,  368,  368,  368,  368,  368,  368,  369,  369,  369,
      369,  369,  369,  369,  370,  370,  370,  370,  370,  370,
      370,  379,  380,  382,  384,  385,  376,  386,  387,  389,

      374,  370,  388,  370,  370,  370,    0,    0,  379,  380,
      382,  384,  385,  388,  386,  387,  389,  388,  390,  388,
      370,    0,  391,  370,  370,  392,  370,  394,  393,    0,
        0,  379,    0,  395,  396,  390,  382,  397,  386,  391,
      385,    0,  392,  398,  394,  393,  384,  387,    0,  380,
      395,  396,  400,    0,  397,    0,    0,  401,  389,  402,
      398,    0,  403,  404,  405,  391,  406,  407,  394,  400,
      392,    0,  390,  393,  401,    0,  402,  408,  397,  403,
      404,  405,  409,  406,  407,  398,    0,  395,  396,  410,
      411,  412,  400,  413,  408,  415,    0,  414,    0,  409,

      416,    0,    0,  403,  417,    0,  410,  411,  412,  405,
      413,  418,  415,  402,  414,  404,  419,  416,  406,  407,
      420,  417,  408,  421,  422,  423,  424,  409,  418,    0,
        0,  425,  427,  419,  426,  428,  412,  420,  414,    0,
      421,  422,  423,  424,  426,  410,  411,  413,  425,  427,
      417,  426,  428,  429,  430,  431,  418,  432,  433,  416,
      435,  434,    0,  436,    0,    0,    0,  437,  438,  424,
      429,  430,  431,    0,  432,  433,  439,  435,  434,  421,
      436,  427,  423,  422,  437,  438,  440,    0,  441,  428,
      425,  442,  443,  439,  444,  445,    0,  456,  430,    0,

      432,  431,  434,  440,  436,  441,    0,    0,  442,  443,
      433,  444,  445,  454,  456,  437,  439,    0,    0,  435,
      438,  439,  446,  446,  446,  446,  446,  446,  446,    0,
      454,    0,  442,  485,  449,  444,  449,  449,  449,    0,
        0,  443,  441,  447,  447,  447,  447,  447,  447,  447,
      485,  456,  460,  449,    0,    0,  449,  449,  454,  449,
      447,  458,  447,  447,  447,  450,    0,  450,    0,  460,
      450,  450,  450,  450,  450,  450,  450,  485,  458,  447,
        0,    0,  447,  447,  457,  447,  451,  451,  451,  451,
      451,  451,  451,  452,  452,  452,  452,  452,  452,  452,

      453,  457,  453,  453,  453,    0,  460,  455,    0,  459,
      452,  462,  452,  452,  452,    0,    0,  461,  455,  453,
      463,  458,  453,  453,  455,  453,  459,  465,  462,  452,
      464,  466,  452,  452,  461,  452,  457,  463,  467,  468,
        0,  469,  470,    0,  465,  472,    0,  464,  466,  471,
      474,  459,  473,  475,  470,  467,  468,  461,  469,  470,
      462,  476,  472,  471,  477,    0,  471,  474,  478,  473,
      475,  481,    0,  479,    0,    0,  480,    0,  476,  463,
        0,  477,  464,  482,  483,  478,  465,  484,  481,  466,
      479,  474,  467,  480,  475,  469,  486,  473,  468,    0,

      482,  483,  472,  487,  484,  488,    0,  489,  490,    0,
        0,    0,    0,  486,  491,  492,  476,  493,  479,  494,
      487,  481,  488,  477,  489,  490,  478,  482,  480,  482,
      495,  491,  492,  496,  493,  497,  494,  482,  498,  482,
      499,  500,    0,  501,  483,  484,  502,  495,  487,  503,
      496,  504,  497,    0,  505,  498,  506,  499,  500,  486,
      501,  507,  508,  502,  488,  509,  503,  510,  504,  491,
      492,  505,    0,  506,  511,  512,  513,    0,  507,  508,
        0,  499,  509,  514,  510,    0,  500,  515,  516,  495,
      517,  511,  512,  513,  503,  518,  519,  505,  520,  521,

      514,  524,  501,    0,  515,  516,    0,  517,    0,    0,
        0,    0,  518,  519,  527,  520,  521,    0,  524,  510,
      522,  522,  522,  522,  522,  522,  522,  525,  515,  528,
      529,  527,  526,  511,  513,    0,  517,    0,    0,  525,
      518,  521,  530,  516,  525,  531,  528,  529,  519,  526,
      520,  523,  523,  523,  523,  523,  523,  523,  532,  530,
      533,  534,  531,  535,  524,    0,  527,  536,  523,    0,
      523,  523,  523,  526,    0,  532,    0,  533,  534,  537,
      535,  538,  529,    0,  536,  539,  528,  523,  540,  541,
      523,  523,  538,  523,  542,  543,  537,  530,  538,  544,

      532,  545,  539,  546,  540,  540,  541,  547,  548,  533,
      549,  542,  543,    0,  550,  551,  544,  552,  545,  553,
      546,  554,    0,  536,  547,  548,    0,  549,    0,  555,
      539,  550,  551,  556,  552,  557,  553,  537,  554,  543,
        0,    0,  558,  542,  559,  545,  555,  560,  561,  546,
      556,  544,  557,  562,  563,  564,  547,  548,  552,  558,
      551,  559,  552,    0,  560,  561,  550,  566,  553,    0,
      562,  563,  564,  565,  567,  568,  554,  569,  556,  570,
      557,    0,  571,  572,  566,  573,  555,  574,  575,  576,
      565,  567,  568,    0,  569,  577,  570,  578,  564,  571,

      572,  579,  573,  580,  574,  575,  576,  581,    0,  582,
      562,  563,  577,  583,  578,    0,  565,  584,  579,    0,
      580,    0,  585,  581,  581,  571,  582,  586,  587,  574,
      583,  588,  568,  576,  584,  589,  569,  590,  567,  585,
      593,  572,  578,  573,  586,  587,  591,  592,  588,    0,
        0,  594,  589,  579,  590,  595,    0,  593,  591,  596,
      597,  598,  599,  591,  592,  600,  582,  585,  594,    0,
        0,  584,  595,  586,  601,  602,  596,  597,  598,  599,
      589,  603,  600,  604,  605,  588,  590,  592,  587,  607,
      606,  601,  602,  608,  594,  595,  609,    0,  603,  610,

      604,  605,  611,    0,  612,  613,  607,  606,  614,  615,
      608,  596,    0,  609,  599,  616,  610,  617,  602,  611,
      600,  612,  613,    0,    0,  614,  615,    0,  618,  604,
      606,    0,  616,    0,  617,    0,  609,  619,  620,  621,
      603,  604,  622,  624,  607,  618,  623,  605,  614,  625,
      613,  626,  612,  627,  619,  620,  621,  628,  610,  622,
      624,  611,  629,  623,  630,  617,  625,  631,  626,  632,
      627,    0,    0,  633,  628,  634,  635,  636,    0,  629,
        0,  630,  637,  638,  631,  639,  632,    0,  620,  633,
      633,  623,  634,  635,  636,  619,    0,  628,    0,  637,

      638,  640,  639,  641,  630,    0,  642,    0,  643,  644,
      631,    0,  646,  625,  645,  634,  647,  636,  640,  648,
      641,  629,  637,  642,  632,  643,  644,    0,  638,  646,
        0,  645,  649,  647,  650,  635,  648,    0,  651,  639,
        0,  652,    0,    0,  641,  653,  654,  642,  655,  649,
      656,  650,  657,  659,  644,  651,  658,  643,  652,  645,
      640,  660,  653,  654,  661,  655,  661,  656,  646,  657,
      659,  647,  662,  658,  663,  664,    0,    0,  660,  650,
      665,  661,  666,  667,  652,  668,  670,  669,  671,  662,
      672,  663,  664,  655,  653,  673,  658,  665,  659,  666,

      667,  674,  668,  670,  669,  671,    0,  672,    0,    0,
        0,  675,  673,  676,  677,  678,  660,  680,  674,  679,
      665,  681,  660,  667,  682,  668,  662,  669,  675,  683,
      676,  677,  678,    0,  680,  684,  679,  685,  681,  687,
      688,  682,  673,    0,  689,  674,  683,    0,  690,  691,
      672,  692,  684,    0,  685,    0,  687,  688,  676,  693,
      679,  689,    0,    0,  681,  690,  691,  694,  692,  683,
      677,  680,  678,  695,  675,  696,  693,  697,  685,  687,
      688,  684,  698,  699,  694,  701,    0,  700,  690,  708,
      695,  702,  696,  703,  697,  709,    0,  704,  707,  698,

      699,  710,  701,  692,  700,    0,  708,  711,  702,  712,
      703,  713,  709,  693,  704,  707,  715,    0,  710,  714,
        0,    0,  697,    0,  711,    0,  712,    0,  713,  695,
      716,  702,  696,  715,  700,  702,  714,  704,  707,  703,
      698,  717,  699,    0,  701,  718,  719,  716,  720,  721,
      712,  722,  711,    0,  723,  724,    0,  725,  717,  726,
      710,  727,  718,  719,  728,  720,  721,  730,  722,  729,
      713,  723,  724,  714,  725,  716,  726,  731,  727,  732,
      733,  728,  734,  735,  730,  736,  729,  737,  739,  738,
        0,  740,  722,  720,  731,  724,  732,  733,  742,  734,

      735,  741,  736,  722,  737,  739,  738,  721,  740,  743,
      744,  745,    0,  726,  725,  742,  729,  746,  741,    0,
      747,    0,  731,  730,  748,  727,  743,  744,  745,  733,
      749,    0,  750,    0,  746,  751,  732,  747,  734,    0,
      752,  748,    0,  736,  738,  739,  754,  749,  741,  750,
      740,    0,  751,  753,  755,  756,  742,  752,    0,  744,
      757,  758,  746,  754,  759,  760,  743,  761,  745,  762,
      753,  755,  756,    0,  763,  747,  765,  757,  758,    0,
      764,  759,  760,  766,  761,  767,  762,  750,    0,  749,
      751,  763,  754,  765,    0,    0,  753,  764,  768,  769,

      766,  770,  767,  771,  752,  759,  772,    0,    0,    0,
        0,  756,  761,    0,  757,  768,  769,    0,  770,    0,
      771,  765,    0,  772,    0,    0,    0,    0,    0,  767,
        0,    0,    0,  763,    0,    0,    0,  764,    0,  769,
        0,    0,  766,  771,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  768,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  775,  775,    0,  775,  775,  775,  775,  775,
      775,  776,    0,    0,    0,  776,  776,  776,  776,  777,
      777,  777,  778,  778,  778,  779,  779,  779,  779,  779,

      779,  779,  779,  779,  780,  780,  781,  781,    0,  781,
      782,    0,  782,  782,  782,  782,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1355 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1515 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 774 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3017 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(BUILTIN_OFFSETOF); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(SETPROP); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(GETPROP); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(ISPROPSET); }    /* TODO: Don't make this a keyword... */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(INT128); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 73:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 218 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(check_type()); }     /* {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); } */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(CONSTANT); }  /* For triple OS X versions inside attributes... TODO: Add syntax errors elsewhere */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(WIDE_STRING_LITERAL); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 155:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return(';'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return('{'); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return('}'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return(','); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return(':'); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return('='); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('('); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return(')'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return('['); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 274 "lexer.l"
{ return(']'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return('.'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return('&'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 277 "lexer.l"
{ return('!'); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return('~'); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return('-'); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return('+'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 281 "lexer.l"
{ return('*'); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 282 "lexer.l"
{ return('/'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 283 "lexer.l"
{ return('%'); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 284 "lexer.l"
{ return('<'); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 285 "lexer.l"
{ return('>'); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 286 "lexer.l"
{ return('^'); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 287 "lexer.l"
{ return('|'); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 288 "lexer.l"
{ return('?'); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 289 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 291 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 317 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 318 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 323 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 328 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 329 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 336 "lexer.l"
ECHO;
	YY_BREAK
#line 2589 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 774 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 774 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 773);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 336 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            const char * pointer = line + 1;
            bool hasLineNumber = false;
            int lineNumber;
            char numberString[20];

            line[count] = 0;
            if(GetString(&pointer, numberString, sizeof(numberString)))
            {
               char * ptr = null;
               lineNumber = (int)strtol(numberString, &ptr, 10);
               if(ptr && ptr > numberString)
                  hasLineNumber = true;
            }

            if(hasLineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = YY_CURRENT_BUFFER;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   YY_CURRENT_BUFFER = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   YY_CURRENT_BUFFER = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
