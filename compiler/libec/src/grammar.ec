/* A Bison parser, made by GNU Bison 2.7.12-4996.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7.12-4996"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYSIZE_T size_t
#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:


/* Line 371 of yacc.c  */
#line 104 "grammar.ec"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar.h".  */
#ifndef YY_YY_GRAMMAR_H_INCLUDED
# define YY_YY_GRAMMAR_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     INT128 = 294,
     FLOAT128 = 295,
     FLOAT16 = 296,
     LONG = 297,
     SIGNED = 298,
     UNSIGNED = 299,
     FLOAT = 300,
     DOUBLE = 301,
     CONST = 302,
     VOLATILE = 303,
     VOID = 304,
     VALIST = 305,
     STRUCT = 306,
     UNION = 307,
     ENUM = 308,
     ELLIPSIS = 309,
     CASE = 310,
     DEFAULT = 311,
     IF = 312,
     SWITCH = 313,
     WHILE = 314,
     DO = 315,
     FOR = 316,
     GOTO = 317,
     CONTINUE = 318,
     BREAK = 319,
     RETURN = 320,
     IFX = 321,
     ELSE = 322,
     CLASS = 323,
     THISCLASS = 324,
     PROPERTY = 325,
     SETPROP = 326,
     GETPROP = 327,
     NEWOP = 328,
     RENEW = 329,
     DELETE = 330,
     EXT_DECL = 331,
     EXT_STORAGE = 332,
     IMPORT = 333,
     DEFINE = 334,
     VIRTUAL = 335,
     ATTRIB = 336,
     PUBLIC = 337,
     PRIVATE = 338,
     TYPED_OBJECT = 339,
     ANY_OBJECT = 340,
     _INCREF = 341,
     EXTENSION = 342,
     ASM = 343,
     TYPEOF = 344,
     WATCH = 345,
     STOPWATCHING = 346,
     FIREWATCHERS = 347,
     WATCHABLE = 348,
     CLASS_DESIGNER = 349,
     CLASS_NO_EXPANSION = 350,
     CLASS_FIXED = 351,
     ISPROPSET = 352,
     CLASS_DEFAULT_PROPERTY = 353,
     PROPERTY_CATEGORY = 354,
     CLASS_DATA = 355,
     CLASS_PROPERTY = 356,
     SUBCLASS = 357,
     NAMESPACE = 358,
     NEW0OP = 359,
     RENEW0 = 360,
     VAARG = 361,
     DBTABLE = 362,
     DBFIELD = 363,
     DBINDEX = 364,
     DATABASE_OPEN = 365,
     ALIGNOF = 366,
     ATTRIB_DEP = 367,
     __ATTRIB = 368,
     BOOL = 369,
     _BOOL = 370,
     _COMPLEX = 371,
     _IMAGINARY = 372,
     RESTRICT = 373,
     THREAD = 374,
     WIDE_STRING_LITERAL = 375,
     BUILTIN_OFFSETOF = 376,
     PRAGMA = 377,
     STATIC_ASSERT = 378
   };
#endif


#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{
/* Line 387 of yacc.c  */
#line 39 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;


/* Line 387 of yacc.c  */
#line 314 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;
extern YYLTYPE yylloc;
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_YY_GRAMMAR_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 355 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif


/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  315
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   43932

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  149
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  259
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1334
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2232

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   378

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   143,     2,     2,   137,   145,   140,     2,
     127,   128,   124,   141,   132,   142,   135,   144,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   136,   130,
     125,   131,   126,   148,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   138,     2,   139,   146,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   134,   147,   133,   129,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   958,   961,   968,   975,   981,   987,
     994,  1001,  1007,  1013,  1021,  1029,  1036,  1043,  1051,  1059,
    1066,  1073,  1078,  1084,  1089,  1096,  1101,  1103,  1105,  1107,
    1109,  1113,  1116,  1118,  1121,  1124,  1127,  1129,  1134,  1139,
    1143,  1148,  1153,  1157,  1161,  1164,  1167,  1172,  1177,  1181,
    1186,  1190,  1194,  1197,  1200,  1202,  1204,  1208,  1212,  1214,
    1216,  1220,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1247,
    1253,  1259,  1262,  1267,  1274,  1276,  1278,  1280,  1282,  1284,
    1286,  1288,  1290,  1292,  1294,  1296,  1301,  1306,  1308,  1312,
    1316,  1320,  1324,  1328,  1332,  1334,  1338,  1342,  1346,  1350,
    1352,  1356,  1360,  1364,  1368,  1371,  1373,  1376,  1380,  1384,
    1388,  1392,  1396,  1400,  1404,  1406,  1410,  1414,  1418,  1422,
    1426,  1430,  1434,  1438,  1440,  1444,  1448,  1452,  1456,  1458,
    1462,  1466,  1470,  1474,  1476,  1480,  1484,  1488,  1492,  1494,
    1498,  1502,  1504,  1508,  1512,  1514,  1520,  1526,  1532,  1538,
    1544,  1550,  1556,  1562,  1568,  1574,  1580,  1586,  1592,  1598,
    1604,  1610,  1612,  1616,  1620,  1624,  1628,  1632,  1636,  1640,
    1644,  1646,  1648,  1650,  1652,  1654,  1656,  1658,  1660,  1662,
    1664,  1666,  1668,  1672,  1676,  1679,  1681,  1685,  1689,  1691,
    1693,  1696,  1699,  1703,  1707,  1711,  1715,  1719,  1723,  1727,
    1730,  1733,  1736,  1739,  1742,  1748,  1755,  1762,  1765,  1771,
    1773,  1775,  1777,  1782,  1784,  1788,  1792,  1796,  1800,  1804,
    1808,  1810,  1814,  1818,  1822,  1826,  1828,  1832,  1836,  1840,
    1844,  1846,  1849,  1853,  1857,  1861,  1865,  1869,  1873,  1877,
    1879,  1883,  1887,  1891,  1895,  1899,  1903,  1907,  1911,  1913,
    1917,  1921,  1925,  1929,  1931,  1935,  1939,  1943,  1947,  1949,
    1953,  1957,  1961,  1965,  1967,  1971,  1975,  1977,  1981,  1985,
    1987,  1993,  1999,  2005,  2011,  2016,  2021,  2026,  2031,  2037,
    2043,  2049,  2055,  2060,  2065,  2070,  2075,  2081,  2087,  2093,
    2099,  2105,  2111,  2117,  2123,  2127,  2131,  2134,  2137,  2139,
    2143,  2147,  2151,  2155,  2157,  2160,  2164,  2168,  2171,  2174,
    2177,  2179,  2182,  2186,  2190,  2192,  2194,  2196,  2198,  2200,
    2202,  2204,  2206,  2208,  2210,  2212,  2214,  2216,  2218,  2220,
    2222,  2224,  2228,  2232,  2235,  2240,  2245,  2247,  2251,  2254,
    2256,  2259,  2262,  2265,  2270,  2275,  2279,  2283,  2288,  2294,
    2299,  2306,  2313,  2318,  2324,  2329,  2336,  2343,  2349,  2355,
    2358,  2361,  2364,  2370,  2374,  2380,  2387,  2393,  2401,  2409,
    2418,  2427,  2435,  2443,  2447,  2451,  2455,  2460,  2464,  2470,
    2476,  2483,  2491,  2498,  2503,  2505,  2507,  2509,  2511,  2513,
    2515,  2517,  2519,  2521,  2524,  2526,  2528,  2530,  2532,  2534,
    2536,  2538,  2540,  2542,  2544,  2546,  2548,  2550,  2552,  2554,
    2556,  2558,  2560,  2562,  2567,  2572,  2577,  2579,  2581,  2583,
    2585,  2587,  2589,  2591,  2593,  2595,  2597,  2599,  2601,  2603,
    2605,  2607,  2609,  2611,  2613,  2615,  2617,  2619,  2621,  2623,
    2625,  2627,  2629,  2631,  2633,  2635,  2637,  2642,  2647,  2652,
    2654,  2656,  2659,  2662,  2666,  2672,  2675,  2679,  2685,  2691,
    2697,  2699,  2703,  2706,  2709,  2713,  2717,  2720,  2724,  2728,
    2733,  2737,  2741,  2745,  2749,  2753,  2757,  2762,  2767,  2772,
    2774,  2776,  2781,  2785,  2788,  2792,  2796,  2800,  2804,  2808,
    2812,  2816,  2820,  2824,  2828,  2832,  2836,  2838,  2840,  2842,
    2845,  2847,  2850,  2852,  2855,  2857,  2860,  2862,  2865,  2867,
    2870,  2872,  2875,  2877,  2880,  2882,  2885,  2887,  2890,  2892,
    2895,  2897,  2900,  2902,  2905,  2907,  2910,  2912,  2915,  2917,
    2920,  2922,  2925,  2927,  2930,  2932,  2935,  2937,  2940,  2942,
    2945,  2947,  2950,  2952,  2955,  2957,  2960,  2962,  2965,  2967,
    2970,  2972,  2974,  2976,  2979,  2981,  2984,  2986,  2989,  2991,
    2994,  2999,  3005,  3007,  3009,  3011,  3014,  3016,  3019,  3021,
    3024,  3026,  3029,  3034,  3040,  3042,  3045,  3047,  3050,  3052,
    3055,  3057,  3060,  3062,  3065,  3067,  3070,  3075,  3081,  3083,
    3086,  3088,  3091,  3093,  3096,  3098,  3101,  3103,  3106,  3108,
    3111,  3116,  3122,  3126,  3130,  3132,  3136,  3140,  3144,  3148,
    3150,  3152,  3154,  3159,  3164,  3169,  3173,  3178,  3183,  3188,
    3192,  3194,  3198,  3203,  3207,  3212,  3217,  3222,  3227,  3231,
    3234,  3238,  3242,  3246,  3250,  3253,  3256,  3259,  3263,  3268,
    3270,  3272,  3275,  3279,  3283,  3287,  3291,  3294,  3297,  3300,
    3304,  3309,  3311,  3313,  3315,  3317,  3320,  3323,  3325,  3327,
    3332,  3334,  3336,  3338,  3340,  3342,  3344,  3346,  3348,  3350,
    3355,  3357,  3360,  3364,  3371,  3377,  3379,  3382,  3386,  3391,
    3394,  3398,  3402,  3406,  3410,  3415,  3420,  3425,  3428,  3432,
    3436,  3440,  3445,  3450,  3454,  3459,  3462,  3466,  3470,  3474,
    3479,  3484,  3486,  3489,  3492,  3496,  3498,  3500,  3503,  3506,
    3510,  3512,  3514,  3517,  3520,  3524,  3526,  3529,  3533,  3536,
    3539,  3541,  3544,  3548,  3551,  3553,  3556,  3560,  3564,  3566,
    3569,  3573,  3577,  3579,  3582,  3586,  3590,  3592,  3595,  3599,
    3603,  3605,  3608,  3612,  3616,  3618,  3622,  3627,  3631,  3636,
    3638,  3643,  3646,  3652,  3656,  3658,  3660,  3662,  3664,  3666,
    3668,  3672,  3676,  3679,  3682,  3684,  3686,  3690,  3693,  3697,
    3699,  3703,  3707,  3711,  3715,  3719,  3723,  3727,  3731,  3733,
    3736,  3740,  3744,  3746,  3749,  3751,  3754,  3757,  3760,  3763,
    3767,  3769,  3771,  3775,  3779,  3781,  3785,  3790,  3794,  3799,
    3803,  3807,  3812,  3816,  3821,  3823,  3827,  3831,  3836,  3840,
    3844,  3848,  3853,  3855,  3859,  3863,  3867,  3871,  3875,  3877,
    3881,  3884,  3886,  3888,  3890,  3892,  3894,  3897,  3899,  3901,
    3903,  3905,  3908,  3911,  3914,  3916,  3918,  3920,  3922,  3924,
    3927,  3929,  3931,  3936,  3944,  3946,  3950,  3951,  3958,  3967,
    3978,  3991,  4000,  4011,  4022,  4028,  4036,  4046,  4058,  4066,
    4076,  4086,  4090,  4095,  4100,  4104,  4108,  4112,  4117,  4122,
    4126,  4130,  4134,  4139,  4144,  4148,  4151,  4155,  4158,  4162,
    4167,  4172,  4176,  4180,  4182,  4184,  4186,  4188,  4190,  4193,
    4197,  4200,  4203,  4208,  4215,  4218,  4222,  4226,  4229,  4235,
    4242,  4245,  4248,  4251,  4254,  4257,  4260,  4262,  4265,  4268,
    4272,  4274,  4277,  4279,  4282,  4285,  4287,  4290,  4293,  4296,
    4299,  4302,  4305,  4307,  4309,  4312,  4315,  4317,  4319,  4322,
    4325,  4327,  4330,  4333,  4335,  4338,  4340,  4343,  4346,  4352,
    4358,  4366,  4374,  4380,  4386,  4390,  4393,  4399,  4404,  4409,
    4417,  4424,  4431,  4437,  4445,  4452,  4457,  4465,  4475,  4479,
    4484,  4489,  4495,  4501,  4508,  4516,  4523,  4530,  4536,  4542,
    4547,  4551,  4554,  4556,  4559,  4564,  4568,  4574,  4579,  4583,
    4586,  4589,  4592,  4596,  4600,  4604,  4608,  4611,  4614,  4616,
    4618,  4623,  4627,  4632,  4636,  4640,  4643,  4648,  4652,  4657,
    4661,  4665,  4668,  4670,  4673,  4675,  4677,  4680,  4682,  4685,
    4689,  4693,  4695,  4698,  4701,  4704,  4708,  4713,  4718,  4721,
    4724,  4727,  4730,  4732,  4735,  4737,  4742,  4749,  4751,  4754,
    4756,  4759,  4762,  4764,  4767,  4769,  4772,  4775,  4778,  4781,
    4783,  4786,  4789,  4793,  4795,  4797,  4798,  4805,  4812,  4818,
    4823,  4825,  4828,  4831,  4833,  4837,  4841,  4846,  4848,  4850,
    4853,  4856,  4863,  4870,  4877
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     397,     0,    -1,   221,   124,    -1,   221,   125,    -1,   154,
      -1,   221,   221,    -1,    28,    -1,    28,    -1,   152,    -1,
     152,   125,   215,   126,    -1,   152,   125,   215,    11,    -1,
     304,   340,    -1,   338,    -1,   304,   127,   128,    -1,   129,
     304,   127,   128,    -1,    80,   304,   340,    -1,    80,   338,
      -1,   304,   341,    -1,   339,    -1,    80,   304,   341,    -1,
      80,   339,    -1,   155,   381,    -1,   158,   381,    -1,   158,
     130,    -1,   156,   381,    -1,   157,   381,    -1,   155,   130,
      -1,   155,   329,   130,    -1,   155,   382,    -1,   159,    -1,
     158,   382,    -1,   160,    -1,   160,   130,    -1,   303,   340,
      -1,   303,   342,    -1,   303,   341,    -1,   163,   381,    -1,
     163,   382,    -1,   164,    -1,   163,    -1,   229,   131,   346,
      -1,   346,    -1,   229,   131,   347,    -1,   229,   131,     1,
      -1,   347,    -1,   167,    -1,   169,   132,   167,    -1,   170,
     132,   167,    -1,   168,    -1,   169,   132,   168,    -1,   170,
     132,   168,    -1,   169,   132,     1,    -1,   170,   132,     1,
      -1,   132,    -1,   169,   130,    -1,   170,   130,    -1,   171,
      -1,   165,    -1,   174,   171,    -1,   174,   165,    -1,   172,
     171,    -1,   172,   165,    -1,   174,   130,    -1,   172,   130,
      -1,   130,    -1,   172,    -1,   169,    -1,   172,   169,    -1,
     174,   169,    -1,   166,    -1,   173,   166,    -1,   174,   166,
      -1,   172,   166,    -1,   172,   170,    -1,   170,    -1,   169,
       1,    -1,   176,   133,    -1,   176,     1,   133,    -1,   303,
     221,   134,   174,    -1,   303,   221,   134,   173,     1,    -1,
     303,   221,   134,   173,    -1,   303,   221,   134,    -1,   303,
     221,   134,     1,    -1,   178,   133,    -1,   178,     1,   133,
      -1,   304,   221,   134,   174,    -1,   304,   221,   134,   173,
       1,    -1,   304,   221,   134,   173,    -1,   304,   221,   134,
      -1,   304,   221,   134,     1,    -1,   305,   221,   134,   173,
     133,    -1,   305,   221,   134,   174,   133,    -1,   305,   221,
     134,   133,    -1,   181,   133,    -1,   181,     1,   133,    -1,
     154,   134,   173,    -1,   221,   134,   173,    -1,   154,   134,
     174,    -1,   154,   134,    -1,   154,   134,   173,     1,    -1,
     154,   134,     1,    -1,   221,   134,   174,    -1,   221,   134,
      -1,   221,   134,   173,     1,    -1,   221,   134,     1,    -1,
     183,   133,    -1,   183,     1,   133,    -1,   134,   174,    -1,
     134,   173,     1,    -1,   134,     1,    -1,   134,    -1,   134,
     173,    -1,   229,   131,   346,    -1,   229,   131,   347,    -1,
     229,   131,     1,    -1,   229,     1,    -1,   184,    -1,   186,
     132,   184,    -1,   187,   132,   184,    -1,   185,    -1,   186,
     132,   185,    -1,   187,   132,   185,    -1,   186,     1,    -1,
      70,   309,   221,   134,    -1,    70,   309,   334,   221,   134,
      -1,    70,   309,   134,    -1,    70,   309,   334,   134,    -1,
      70,     1,   134,    -1,   188,    -1,   189,    71,   381,    -1,
     189,    72,   381,    -1,   189,    97,   381,    -1,   189,    93,
      -1,   189,    99,   223,    -1,   189,   133,    -1,   101,   309,
     221,   134,    -1,   101,   309,   334,   221,   134,    -1,   101,
     309,   134,    -1,   101,   309,   334,   134,    -1,   101,     1,
     134,    -1,   191,    -1,   192,    71,   381,    -1,   192,    72,
     381,    -1,   192,   133,    -1,   221,    -1,   194,   221,    -1,
     194,   381,    -1,    75,   381,    -1,   195,    -1,   196,   195,
      -1,    90,   127,   194,   128,   381,    -1,    90,   127,   248,
     128,   134,   196,   133,    -1,   248,   135,    90,   127,   248,
     128,   134,   196,   133,    -1,    91,   127,   248,   132,   194,
     128,    -1,   248,   135,    91,   127,   248,   132,   194,   128,
      -1,    91,   127,   248,   128,    -1,   248,   135,    91,   127,
     248,   128,    -1,    92,    -1,    92,   194,    -1,   229,   135,
      92,    -1,   248,   135,    92,   194,    -1,   202,   130,    -1,
     186,   130,    -1,   161,    -1,   190,    -1,   369,   161,    -1,
     369,   190,    -1,   193,    -1,    93,    -1,    95,    -1,    96,
      -1,   101,   127,   221,   128,   131,   346,   130,    -1,   130,
      -1,   369,   136,    -1,   369,   127,   221,   128,    -1,   162,
      -1,   304,    -1,   304,   291,    -1,   369,   304,   291,    -1,
     369,   304,    -1,   369,   180,    -1,   369,   177,    -1,   100,
     304,   291,    -1,   197,    -1,    94,   221,    -1,    94,   154,
      -1,    98,   221,    -1,   180,    -1,   177,    -1,   186,    -1,
     178,     1,    -1,   181,     1,    -1,   369,   162,    -1,   369,
     178,     1,    -1,   369,   181,     1,    -1,   187,    -1,   201,
      -1,   203,   201,    -1,   204,   201,    -1,   202,    -1,   203,
       1,    -1,   204,     1,    -1,   203,   202,    -1,   204,   202,
      -1,   304,    -1,   304,   334,    -1,   304,    -1,   304,   334,
      -1,    68,   221,    -1,    68,   221,   131,   206,    -1,    68,
     221,   136,   205,    -1,    68,   221,   136,   205,   131,   206,
      -1,    68,   153,    -1,    68,   153,   131,   206,    -1,    68,
     153,   136,   205,    -1,    68,   153,   136,   205,   131,   206,
      -1,   221,    -1,   221,    -1,   221,   131,   208,    -1,   238,
      -1,   304,   221,   131,   210,    -1,   304,   334,   221,   131,
     210,    -1,   207,    -1,   209,    -1,   211,    -1,   212,    -1,
     213,   132,   212,    -1,   210,    -1,   208,    -1,   206,    -1,
     221,   131,   210,    -1,   221,   131,   208,    -1,   221,   131,
     206,    -1,   214,    -1,   215,   132,   214,    -1,    68,    -1,
     216,   221,    -1,   216,   152,    -1,   221,   216,   221,    -1,
     221,   216,   152,    -1,   216,   221,   125,   213,   126,    -1,
     216,   152,   125,   213,   126,    -1,   221,   216,   221,   125,
     213,   126,    -1,   221,   216,   152,   125,   213,   126,    -1,
     220,   133,    -1,   219,   130,    -1,   217,   134,   133,    -1,
     219,   134,   133,    -1,   216,   221,   130,    -1,   216,   151,
     130,    -1,   217,   136,   308,    -1,   217,   134,   204,    -1,
     219,   134,   204,    -1,   217,   134,   203,    -1,   219,   134,
     203,    -1,   217,   134,     1,    -1,   219,   134,     1,    -1,
       3,    -1,   225,    -1,   127,   250,   128,    -1,   392,    -1,
     137,   392,    -1,   137,   392,   135,   392,    -1,     4,    -1,
     221,    -1,   180,    -1,    87,   127,   381,   128,    -1,    87,
     127,   250,   128,    -1,    87,   127,   353,   128,   343,    -1,
      87,   127,   353,   128,   127,   353,   128,   343,    -1,   224,
     221,    -1,   224,    -1,   223,    -1,   120,    -1,   127,   128,
      -1,    73,   311,   335,   138,   270,   139,    -1,    73,   311,
     335,   138,   271,   139,    -1,    73,   311,   138,   270,   139,
      -1,    73,   311,   138,   271,   139,    -1,   104,   311,   335,
     138,   270,   139,    -1,   104,   311,   335,   138,   271,   139,
      -1,   104,   311,   138,   270,   139,    -1,   104,   311,   138,
     271,   139,    -1,    74,   270,   310,   335,   138,   270,   139,
      -1,    74,   270,   310,   335,   138,   271,   139,    -1,    74,
     270,   310,   138,   270,   139,    -1,    74,   270,   310,   138,
     271,   139,    -1,   105,   270,   310,   335,   138,   270,   139,
      -1,   105,   270,   310,   335,   138,   271,   139,    -1,   105,
     270,   310,   138,   270,   139,    -1,   105,   270,   310,   138,
     271,   139,    -1,    68,   127,   303,   128,    -1,    68,   127,
     303,   334,   128,    -1,    68,   127,   221,   128,    -1,   106,
     127,   248,   132,   353,   128,    -1,   100,   127,   221,   128,
      -1,   404,    -1,   405,    -1,   406,    -1,   407,    -1,   138,
     230,   139,    -1,   138,   139,    -1,   182,    -1,   183,     1,
      -1,   127,   250,    -1,   127,   268,    -1,   222,    -1,   229,
     138,   250,   139,    -1,   229,   138,   268,   139,    -1,   229,
     127,   128,    -1,   229,   127,   230,   128,    -1,   229,   127,
     231,   128,    -1,   229,   135,   221,    -1,   229,     7,   221,
      -1,   229,     8,    -1,   229,     9,    -1,   252,   138,   250,
     139,    -1,   252,   138,   268,   139,    -1,   252,   127,   128,
      -1,   252,   127,   230,   128,    -1,   252,   135,   221,    -1,
     252,     7,   221,    -1,   252,     8,    -1,   252,     9,    -1,
     248,    -1,   226,    -1,   230,   132,   248,    -1,   230,   132,
     226,    -1,   267,    -1,   227,    -1,   230,   132,   267,    -1,
     230,   132,   227,    -1,   230,   132,    -1,     8,   233,    -1,
       9,   233,    -1,   234,   235,    -1,   234,   226,    -1,     6,
     233,    -1,     6,   127,   354,   128,    -1,     6,   127,    68,
     151,   128,    -1,     6,   127,    68,   150,   128,    -1,   111,
     233,    -1,   111,   127,   354,   128,    -1,   121,   127,   354,
     132,   221,   128,    -1,   232,    -1,   229,    -1,   140,    -1,
     124,    -1,   141,    -1,   142,    -1,   129,    -1,   143,    -1,
      75,    -1,    86,    -1,   233,    -1,   127,   353,   128,   344,
      -1,   127,   353,   128,   235,    -1,   235,    -1,   236,   124,
     235,    -1,   236,   144,   235,    -1,   236,   145,   235,    -1,
     256,   124,   235,    -1,   256,   144,   235,    -1,   256,   145,
     235,    -1,   236,    -1,   237,   141,   236,    -1,   237,   142,
     236,    -1,   257,   141,   236,    -1,   257,   142,   236,    -1,
     237,    -1,   238,    10,   237,    -1,   238,    11,   237,    -1,
     258,    10,   237,    -1,   258,    11,   237,    -1,   240,   125,
      -1,   238,    -1,   239,   238,    -1,   240,   126,   238,    -1,
     240,    12,   238,    -1,   240,    13,   238,    -1,   259,   125,
     238,    -1,   259,   126,   238,    -1,   259,    12,   238,    -1,
     259,    13,   238,    -1,   240,    -1,   241,    14,   240,    -1,
     241,    15,   240,    -1,   260,    14,   240,    -1,   260,    15,
     240,    -1,   241,    14,   226,    -1,   241,    15,   226,    -1,
     260,    14,   226,    -1,   260,    15,   226,    -1,   241,    -1,
     242,   140,   241,    -1,   261,   140,   241,    -1,   242,   140,
     226,    -1,   261,   140,   226,    -1,   242,    -1,   243,   146,
     242,    -1,   262,   146,   242,    -1,   243,   146,   226,    -1,
     262,   146,   226,    -1,   243,    -1,   244,   147,   243,    -1,
     263,   147,   243,    -1,   244,   147,   226,    -1,   263,   147,
     226,    -1,   244,    -1,   245,    16,   244,    -1,   264,    16,
     244,    -1,   245,    -1,   246,    17,   245,    -1,   265,    17,
     245,    -1,   246,    -1,   246,   148,   250,   136,   247,    -1,
     246,   148,   268,   136,   247,    -1,   265,   148,   250,   136,
     247,    -1,   265,   148,   268,   136,   247,    -1,   246,   148,
     251,   136,   247,    -1,   246,   148,   269,   136,   247,    -1,
     265,   148,   251,   136,   247,    -1,   265,   148,   269,   136,
     247,    -1,   246,   148,   250,   136,   226,    -1,   246,   148,
     268,   136,   226,    -1,   265,   148,   250,   136,   226,    -1,
     265,   148,   268,   136,   226,    -1,   246,   148,   251,   136,
     226,    -1,   246,   148,   269,   136,   226,    -1,   265,   148,
     251,   136,   226,    -1,   265,   148,   269,   136,   226,    -1,
     247,    -1,   233,   249,   248,    -1,   254,   249,   248,    -1,
     247,   249,   248,    -1,   266,   249,   248,    -1,   233,   249,
     226,    -1,   254,   249,   226,    -1,   247,   249,   226,    -1,
     266,   249,   226,    -1,   131,    -1,    18,    -1,    19,    -1,
      20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,    -1,
      25,    -1,    26,    -1,    27,    -1,   248,    -1,   250,   132,
     248,    -1,   268,   132,   248,    -1,   268,   128,    -1,   226,
      -1,   250,   132,   226,    -1,   268,   132,   226,    -1,   228,
      -1,     1,    -1,   229,     1,    -1,   181,     1,    -1,   229,
       7,     1,    -1,   252,     7,     1,    -1,   229,   127,   230,
      -1,   229,   127,   231,    -1,   229,   135,     1,    -1,   252,
     127,   231,    -1,   252,   135,     1,    -1,     8,   254,    -1,
       9,   254,    -1,   234,   255,    -1,   234,   227,    -1,     6,
     254,    -1,     6,   127,   354,   128,     1,    -1,     6,   127,
      68,   151,   128,     1,    -1,     6,   127,    68,   150,   128,
       1,    -1,   111,   254,    -1,   111,   127,   354,   128,     1,
      -1,   253,    -1,   252,    -1,   254,    -1,   127,   353,   128,
     255,    -1,   255,    -1,   236,   124,   255,    -1,   236,   144,
     255,    -1,   236,   145,   255,    -1,   256,   124,   255,    -1,
     256,   144,   255,    -1,   256,   145,   255,    -1,   256,    -1,
     237,   141,   256,    -1,   237,   142,   256,    -1,   257,   141,
     256,    -1,   257,   142,   256,    -1,   257,    -1,   238,    10,
     257,    -1,   238,    11,   257,    -1,   258,    10,   257,    -1,
     258,    11,   257,    -1,   258,    -1,   239,   258,    -1,   240,
     126,   258,    -1,   240,    12,   258,    -1,   240,    13,   258,
      -1,   259,   125,   258,    -1,   259,   126,   258,    -1,   259,
      12,   258,    -1,   259,    13,   258,    -1,   259,    -1,   241,
      14,   259,    -1,   241,    15,   259,    -1,   260,    14,   259,
      -1,   260,    15,   259,    -1,   241,    14,   227,    -1,   241,
      15,   227,    -1,   260,    14,   227,    -1,   260,    15,   227,
      -1,   260,    -1,   242,   140,   260,    -1,   261,   140,   260,
      -1,   242,   140,   227,    -1,   261,   140,   227,    -1,   261,
      -1,   243,   146,   261,    -1,   262,   146,   261,    -1,   243,
     146,   227,    -1,   262,   146,   227,    -1,   262,    -1,   244,
     147,   262,    -1,   263,   147,   262,    -1,   244,   147,   227,
      -1,   263,   147,   227,    -1,   263,    -1,   245,    16,   263,
      -1,   264,    16,   263,    -1,   264,    -1,   246,    17,   264,
      -1,   265,    17,   264,    -1,   265,    -1,   246,   148,   250,
     136,   265,    -1,   246,   148,   268,   136,   265,    -1,   265,
     148,   250,   136,   265,    -1,   265,   148,   268,   136,   265,
      -1,   246,   148,   250,   136,    -1,   246,   148,   268,   136,
      -1,   265,   148,   250,   136,    -1,   265,   148,   268,   136,
      -1,   246,   148,   251,   136,   265,    -1,   246,   148,   269,
     136,   265,    -1,   265,   148,   251,   136,   265,    -1,   265,
     148,   269,   136,   265,    -1,   246,   148,   251,   136,    -1,
     246,   148,   269,   136,    -1,   265,   148,   251,   136,    -1,
     265,   148,   269,   136,    -1,   246,   148,   250,   136,   227,
      -1,   246,   148,   268,   136,   227,    -1,   265,   148,   250,
     136,   227,    -1,   265,   148,   268,   136,   227,    -1,   246,
     148,   251,   136,   227,    -1,   246,   148,   269,   136,   227,
      -1,   265,   148,   251,   136,   227,    -1,   265,   148,   269,
     136,   227,    -1,   246,   148,   136,    -1,   265,   148,   136,
      -1,   246,   148,    -1,   265,   148,    -1,   266,    -1,   233,
     249,   267,    -1,   254,   249,   267,    -1,   233,   249,   227,
      -1,   254,   249,   227,    -1,   267,    -1,   248,     1,    -1,
     250,   132,   267,    -1,   268,   132,   267,    -1,   250,   250,
      -1,   268,   250,    -1,   250,   268,    -1,   227,    -1,   226,
       1,    -1,   250,   132,   227,    -1,   268,   132,   227,    -1,
     247,    -1,   266,    -1,    29,    -1,    30,    -1,    31,    -1,
     119,    -1,    32,    -1,    33,    -1,   118,    -1,    29,    -1,
      30,    -1,    31,    -1,   119,    -1,    32,    -1,    33,    -1,
     118,    -1,   221,    -1,   221,   131,   270,    -1,   221,   131,
     271,    -1,   221,   330,    -1,   221,   330,   131,   270,    -1,
     221,   330,   131,   271,    -1,   274,    -1,   275,   132,   274,
      -1,   275,   132,    -1,    53,    -1,   276,   221,    -1,   276,
     154,    -1,   279,   133,    -1,   276,   221,   134,   133,    -1,
     276,   154,   134,   133,    -1,   276,   134,   275,    -1,   276,
     134,     1,    -1,   276,   221,   134,   275,    -1,   276,   221,
     134,   275,     1,    -1,   276,   221,   134,     1,    -1,   276,
     221,   134,   275,   130,   203,    -1,   276,   221,   134,   275,
     130,   204,    -1,   276,   154,   134,   275,    -1,   276,   154,
     134,   275,     1,    -1,   276,   154,   134,     1,    -1,   276,
     154,   134,   275,   130,   203,    -1,   276,   154,   134,   275,
     130,   204,    -1,   276,   221,   134,   275,   130,    -1,   276,
     154,   134,   275,   130,    -1,   276,   221,    -1,   276,   154,
      -1,   282,   133,    -1,   280,   136,   308,   134,   133,    -1,
     280,   134,   133,    -1,   280,   136,   308,   134,   275,    -1,
     280,   136,   308,   134,   275,     1,    -1,   280,   136,   308,
     134,     1,    -1,   280,   136,   308,   134,   275,   130,   203,
      -1,   280,   136,   308,   134,   275,   130,   204,    -1,   280,
     136,   308,   134,   275,     1,   130,   203,    -1,   280,   136,
     308,   134,   275,     1,   130,   204,    -1,   280,   136,   308,
     134,     1,   130,   203,    -1,   280,   136,   308,   134,     1,
     130,   204,    -1,   276,   134,   275,    -1,   276,   134,     1,
      -1,   280,   134,   275,    -1,   280,   134,   275,     1,    -1,
     280,   134,     1,    -1,   280,   134,   275,   130,   203,    -1,
     280,   134,   275,   130,   204,    -1,   280,   136,   308,   134,
     275,   130,    -1,   280,   136,   308,   134,   275,     1,   130,
      -1,   280,   136,   308,   134,     1,   130,    -1,   280,   134,
     275,   130,    -1,   281,    -1,   298,    -1,   282,    -1,   299,
      -1,   324,    -1,    47,    -1,    48,    -1,   285,    -1,   286,
      -1,   287,   286,    -1,    49,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    39,    -1,    40,    -1,
      41,    -1,    50,    -1,    42,    -1,    45,    -1,    46,    -1,
      43,    -1,    44,    -1,    87,    -1,   295,    -1,   277,    -1,
     151,    -1,    89,   127,   248,   128,    -1,   102,   127,   151,
     128,    -1,   102,   127,   221,   128,    -1,    69,    -1,    84,
      -1,    85,    -1,   115,    -1,   114,    -1,   116,    -1,   117,
      -1,    49,    -1,    34,    -1,    35,    -1,    36,    -1,    37,
      -1,    38,    -1,    39,    -1,    40,    -1,    41,    -1,    50,
      -1,    42,    -1,    45,    -1,    46,    -1,    43,    -1,    44,
      -1,    87,    -1,   295,    -1,   277,    -1,   154,    -1,   115,
      -1,   114,    -1,   116,    -1,   117,    -1,    89,   127,   248,
     128,    -1,   102,   127,   151,   128,    -1,   102,   127,   221,
     128,    -1,    69,    -1,   342,    -1,   342,   329,    -1,   136,
     270,    -1,   342,   136,   270,    -1,   342,   136,   270,   136,
     270,    -1,   136,   271,    -1,   342,   136,   271,    -1,   342,
     136,   270,   136,   271,    -1,   342,   136,   271,   136,   271,
      -1,   342,   136,   271,   136,   270,    -1,   290,    -1,   291,
     132,   290,    -1,   300,   221,    -1,   300,   152,    -1,   300,
     324,   221,    -1,   300,   324,   152,    -1,   294,   133,    -1,
     292,   134,   133,    -1,   300,   134,   133,    -1,   300,   324,
     134,   133,    -1,   292,   134,   203,    -1,   292,   134,   204,
      -1,   292,   134,     1,    -1,   300,   134,   203,    -1,   300,
     134,   204,    -1,   300,   134,     1,    -1,   300,   324,   134,
     203,    -1,   300,   324,   134,   204,    -1,   300,   324,   134,
       1,    -1,   292,    -1,   292,    -1,   292,   125,   213,   126,
      -1,   296,   136,   308,    -1,   299,   133,    -1,   297,   134,
     133,    -1,   296,   134,   133,    -1,   300,   134,   133,    -1,
     297,   134,   203,    -1,   297,   134,   204,    -1,   297,   134,
       1,    -1,   296,   134,   203,    -1,   296,   134,   204,    -1,
     296,   134,     1,    -1,   300,   134,   203,    -1,   300,   134,
     204,    -1,   300,   134,     1,    -1,    51,    -1,    52,    -1,
     286,    -1,   301,   286,    -1,   288,    -1,   301,   288,    -1,
     278,    -1,   301,   278,    -1,   293,    -1,   301,   293,    -1,
     286,    -1,   302,   286,    -1,   288,    -1,   302,   288,    -1,
     150,    -1,   302,   150,    -1,   278,    -1,   302,   278,    -1,
     293,    -1,   302,   293,    -1,   272,    -1,   303,   272,    -1,
     286,    -1,   303,   286,    -1,   289,    -1,   303,   289,    -1,
     278,    -1,   303,   278,    -1,   293,    -1,   303,   293,    -1,
     272,    -1,   304,   272,    -1,   286,    -1,   304,   286,    -1,
     288,    -1,   304,   288,    -1,   150,    -1,   304,   150,    -1,
     293,    -1,   304,   293,    -1,   278,    -1,   304,   278,    -1,
     273,    -1,   305,   273,    -1,   286,    -1,   305,   286,    -1,
     288,    -1,   305,   288,    -1,   150,    -1,   305,   150,    -1,
     283,    -1,   305,   283,    -1,   284,    -1,   305,   284,    -1,
      83,    -1,    82,    -1,   272,    -1,   307,   272,    -1,   286,
      -1,   307,   286,    -1,   289,    -1,   307,   289,    -1,   221,
      -1,   307,   221,    -1,   221,   125,   215,   126,    -1,   307,
     221,   125,   215,   126,    -1,   307,    -1,   300,    -1,   272,
      -1,   309,   272,    -1,   286,    -1,   309,   286,    -1,   289,
      -1,   309,   289,    -1,   221,    -1,   309,   221,    -1,   221,
     125,   215,   126,    -1,   309,   221,   125,   215,   126,    -1,
     272,    -1,   310,   272,    -1,   286,    -1,   310,   286,    -1,
     289,    -1,   310,   289,    -1,   293,    -1,   310,   293,    -1,
     278,    -1,   310,   278,    -1,   221,    -1,   310,   221,    -1,
     221,   125,   215,   126,    -1,   310,   221,   125,   215,   126,
      -1,   272,    -1,   311,   272,    -1,   286,    -1,   311,   286,
      -1,   289,    -1,   311,   289,    -1,   293,    -1,   311,   293,
      -1,   278,    -1,   311,   278,    -1,   221,    -1,   311,   221,
      -1,   221,   125,   215,   126,    -1,   311,   221,   125,   215,
     126,    -1,   313,   132,     1,    -1,   312,   132,     1,    -1,
     221,    -1,   313,   132,   221,    -1,   312,   132,   221,    -1,
     357,   132,   221,    -1,   358,   132,   221,    -1,   315,    -1,
     152,    -1,    37,    -1,   152,   138,   270,   139,    -1,   152,
     138,   271,   139,    -1,   152,   138,   151,   139,    -1,   152,
     138,   139,    -1,   314,   138,   270,   139,    -1,   314,   138,
     271,   139,    -1,   314,   138,   151,   139,    -1,   314,   138,
     139,    -1,   221,    -1,   127,   336,   128,    -1,   127,   324,
     336,   128,    -1,   127,   337,   128,    -1,   127,   324,   337,
     128,    -1,   315,   138,   270,   139,    -1,   315,   138,   271,
     139,    -1,   315,   138,   151,   139,    -1,   315,   138,   139,
      -1,   315,   127,    -1,   316,   359,   128,    -1,   316,   360,
     128,    -1,   316,   313,   128,    -1,   316,   312,   128,    -1,
     316,   128,    -1,   316,   312,    -1,   316,     1,    -1,   316,
     357,   127,    -1,   316,   304,   221,   127,    -1,   317,    -1,
     315,    -1,   314,   127,    -1,   320,   359,   128,    -1,   320,
     360,   128,    -1,   320,   313,   128,    -1,   320,   312,   128,
      -1,   320,   128,    -1,   320,   312,    -1,   320,     1,    -1,
     320,   357,   127,    -1,   320,   304,   221,   127,    -1,   321,
      -1,   314,    -1,    76,    -1,    77,    -1,   324,    77,    -1,
     324,    76,    -1,   329,    -1,   330,    -1,    88,   127,   392,
     128,    -1,    81,    -1,   112,    -1,   113,    -1,     3,    -1,
      28,    -1,    77,    -1,    76,    -1,    47,    -1,   326,    -1,
     326,   127,   250,   128,    -1,   327,    -1,   328,   327,    -1,
     328,   132,   327,    -1,   325,   127,   127,   328,   128,   128,
      -1,   325,   127,   127,   128,   128,    -1,   329,    -1,   330,
     329,    -1,   127,   334,   128,    -1,   127,   324,   334,   128,
      -1,   138,   139,    -1,   138,   270,   139,    -1,   138,   271,
     139,    -1,   138,   151,   139,    -1,   331,   138,   139,    -1,
     331,   138,   270,   139,    -1,   331,   138,   151,   139,    -1,
     331,   138,   271,   139,    -1,   127,   128,    -1,   127,   359,
     128,    -1,   127,   360,   128,    -1,   331,   127,   128,    -1,
     331,   127,   359,   128,    -1,   331,   127,   360,   128,    -1,
     127,   335,   128,    -1,   127,   324,   335,   128,    -1,   127,
     128,    -1,   127,   359,   128,    -1,   127,   360,   128,    -1,
     332,   127,   128,    -1,   332,   127,   359,   128,    -1,   332,
     127,   360,   128,    -1,   124,    -1,   124,   287,    -1,   124,
     333,    -1,   124,   287,   333,    -1,   333,    -1,   331,    -1,
     333,   331,    -1,   324,   333,    -1,   324,   333,   331,    -1,
     333,    -1,   332,    -1,   333,   332,    -1,   324,   333,    -1,
     324,   333,   332,    -1,   319,    -1,   333,   319,    -1,   324,
     333,   319,    -1,   336,   324,    -1,   342,   324,    -1,   323,
      -1,   333,   323,    -1,   324,   333,   323,    -1,   337,   324,
      -1,   317,    -1,   333,   317,    -1,   324,   333,   317,    -1,
     333,   324,   317,    -1,   318,    -1,   333,   318,    -1,   324,
     333,   318,    -1,   333,   324,   318,    -1,   321,    -1,   333,
     321,    -1,   324,   333,   321,    -1,   333,   324,   321,    -1,
     322,    -1,   333,   322,    -1,   324,   333,   322,    -1,   333,
     324,   322,    -1,   314,    -1,   333,   314,    -1,   324,   333,
     314,    -1,   333,   324,   314,    -1,   248,    -1,   134,   348,
     133,    -1,   134,   348,   132,   133,    -1,   134,   348,   133,
      -1,   134,   348,   132,   133,    -1,   267,    -1,   134,   348,
     133,     1,    -1,   134,   348,    -1,   134,   348,   132,   133,
       1,    -1,   134,   348,   132,    -1,   247,    -1,   226,    -1,
     266,    -1,   227,    -1,   343,    -1,   345,    -1,   348,   132,
     343,    -1,   348,   132,   345,    -1,   348,   343,    -1,   348,
     345,    -1,   336,    -1,   337,    -1,   336,   131,   343,    -1,
     336,     1,    -1,   336,   131,   345,    -1,   349,    -1,   351,
     132,   349,    -1,    37,   132,   349,    -1,    38,   132,   349,
      -1,    39,   132,   349,    -1,    40,   132,   349,    -1,    41,
     132,   349,    -1,   152,   132,   349,    -1,   352,   132,   349,
      -1,   350,    -1,   349,     1,    -1,   351,   132,   350,    -1,
     352,   132,   350,    -1,   301,    -1,   301,   334,    -1,   302,
      -1,   302,   334,    -1,   304,   337,    -1,   304,   334,    -1,
     304,   140,    -1,   304,   140,   337,    -1,   304,    -1,    68,
      -1,   304,   337,     1,    -1,   304,   334,     1,    -1,   355,
      -1,   357,   132,   355,    -1,   357,     1,   132,   355,    -1,
     358,   132,   355,    -1,   358,     1,   132,   355,    -1,     1,
     132,   355,    -1,   313,   132,   355,    -1,   313,     1,   132,
     355,    -1,   312,   132,   355,    -1,   312,     1,   132,   355,
      -1,   356,    -1,   357,   132,   356,    -1,   358,   132,   356,
      -1,   358,     1,   132,   356,    -1,     1,   132,   356,    -1,
     313,   132,   356,    -1,   312,   132,   356,    -1,   312,     1,
     132,   356,    -1,   357,    -1,   357,   132,    54,    -1,   358,
     132,    54,    -1,   313,   132,    54,    -1,   312,   132,    54,
      -1,     1,   132,    54,    -1,   358,    -1,   357,   132,     1,
      -1,   358,     1,    -1,   366,    -1,   329,    -1,   381,    -1,
     130,    -1,   136,    -1,   250,   130,    -1,   384,    -1,   386,
      -1,   388,    -1,   365,    -1,   200,   130,    -1,   199,   130,
      -1,   198,   130,    -1,   367,    -1,   387,    -1,   382,    -1,
     385,    -1,   389,    -1,   388,     1,    -1,   268,    -1,   392,
      -1,   392,   127,   248,   128,    -1,   138,   221,   139,   392,
     127,   248,   128,    -1,   363,    -1,   364,   132,   363,    -1,
      -1,    88,   286,   127,   392,   128,   130,    -1,    88,   286,
     127,   392,   136,   364,   128,   130,    -1,    88,   286,   127,
     392,   136,   364,   136,   364,   128,   130,    -1,    88,   286,
     127,   392,   136,   364,   136,   364,   136,   364,   128,   130,
      -1,    88,   286,   127,   392,     3,   364,   128,   130,    -1,
      88,   286,   127,   392,     3,   364,   136,   364,   128,   130,
      -1,    88,   286,   127,   392,   136,   364,     3,   364,   128,
     130,    -1,    88,   127,   392,   128,   130,    -1,    88,   127,
     392,   136,   364,   128,   130,    -1,    88,   127,   392,   136,
     364,   136,   364,   128,   130,    -1,    88,   127,   392,   136,
     364,   136,   364,   136,   364,   128,   130,    -1,    88,   127,
     392,     3,   364,   128,   130,    -1,    88,   127,   392,     3,
     364,   136,   364,   128,   130,    -1,    88,   127,   392,   136,
     364,     3,   364,   128,   130,    -1,   221,   136,   361,    -1,
      55,   270,   136,   361,    -1,    55,   271,   136,   361,    -1,
      55,   136,   361,    -1,    56,   136,   361,    -1,   221,   136,
     370,    -1,    55,   270,   136,   370,    -1,    55,   271,   136,
     370,    -1,    55,   136,   370,    -1,    56,   136,   370,    -1,
     221,   136,   362,    -1,    55,   270,   136,   362,    -1,    55,
     271,   136,   362,    -1,    55,   136,   362,    -1,    55,   136,
      -1,    56,   136,   362,    -1,    56,   136,    -1,   221,   136,
     373,    -1,    55,   270,   136,   373,    -1,    55,   271,   136,
     373,    -1,    55,   136,   373,    -1,    56,   136,   373,    -1,
      82,    -1,    83,    -1,    56,    -1,    82,    -1,    83,    -1,
     303,   130,    -1,   303,   351,   130,    -1,   175,   130,    -1,
     373,   130,    -1,   123,   127,   250,   128,    -1,   123,   127,
     250,   132,   392,   128,    -1,   305,   130,    -1,   305,   351,
     130,    -1,   306,   351,   130,    -1,   179,   130,    -1,    79,
     221,   131,   247,   130,    -1,    31,    79,   221,   131,   247,
     130,    -1,   305,     1,    -1,   303,     1,    -1,   373,     1,
      -1,   176,     1,    -1,   175,     1,    -1,   303,   352,    -1,
     370,    -1,   374,   370,    -1,   375,   370,    -1,   374,     1,
     130,    -1,   373,    -1,   374,   373,    -1,   361,    -1,   376,
     361,    -1,   377,   361,    -1,   362,    -1,   376,   362,    -1,
     377,   362,    -1,   376,   370,    -1,   377,   370,    -1,   376,
     373,    -1,   377,   373,    -1,   376,    -1,   374,    -1,   374,
     376,    -1,   375,   376,    -1,   377,    -1,   375,    -1,   374,
     377,    -1,   375,   377,    -1,   134,    -1,   382,   133,    -1,
     380,   379,    -1,   380,    -1,   380,   378,    -1,   130,    -1,
     250,   130,    -1,   268,   130,    -1,    57,   127,   250,   128,
     361,    -1,    57,   127,   268,   128,   361,    -1,    57,   127,
     250,   128,   361,    67,   361,    -1,    57,   127,   268,   128,
     361,    67,   361,    -1,    58,   127,   250,   128,   361,    -1,
      58,   127,   268,   128,   361,    -1,    57,   127,   268,    -1,
     384,     1,    -1,    59,   127,   250,   128,   361,    -1,    59,
     127,   268,   361,    -1,    59,   127,   128,   361,    -1,    60,
     361,    59,   127,   250,   128,   130,    -1,    60,   361,    59,
     127,   268,   130,    -1,    61,   127,   383,   383,   128,   361,
      -1,    61,   127,   383,   128,   361,    -1,    61,   127,   383,
     383,   250,   128,   361,    -1,    61,   127,   383,   383,   268,
     361,    -1,    61,   127,   128,   361,    -1,    61,   127,   221,
     136,   250,   128,   361,    -1,    61,   127,   221,   136,   250,
     130,   250,   128,   361,    -1,    61,   127,     1,    -1,    61,
     127,   268,     1,    -1,    61,   127,   383,     1,    -1,    61,
     127,   383,   268,     1,    -1,    61,   127,   383,   383,   268,
      -1,    61,   127,   383,   383,   128,   362,    -1,    61,   127,
     383,   383,   250,   128,   362,    -1,    61,   127,   383,   383,
     268,   362,    -1,    60,   361,    59,   127,   250,   128,    -1,
      60,   361,    59,   127,   250,    -1,    60,   361,    59,   127,
     268,    -1,    60,   361,    59,   127,    -1,    60,   361,    59,
      -1,    60,   361,    -1,    60,    -1,    59,     1,    -1,    59,
     127,   128,     1,    -1,    59,   127,   268,    -1,    59,   127,
     250,   128,   362,    -1,    59,   127,   268,   362,    -1,    62,
     221,   130,    -1,    63,   130,    -1,    64,   130,    -1,    65,
     130,    -1,    65,   250,   130,    -1,    65,   268,   130,    -1,
      65,   226,   130,    -1,    65,   227,   130,    -1,    65,   268,
      -1,    65,   227,    -1,    65,    -1,    62,    -1,   305,   338,
     374,   381,    -1,   305,   338,   381,    -1,   305,   340,   374,
     381,    -1,   305,   340,   381,    -1,   338,   374,   381,    -1,
     338,   381,    -1,   305,   338,   374,   382,    -1,   305,   338,
     382,    -1,   305,   340,   374,   382,    -1,   305,   340,   382,
      -1,   338,   374,   382,    -1,   338,   382,    -1,     5,    -1,
     392,     5,    -1,   390,    -1,   218,    -1,   305,   218,    -1,
     371,    -1,    78,   392,    -1,    78,    31,   392,    -1,    78,
     221,   392,    -1,   130,    -1,   368,   390,    -1,   368,   218,
      -1,   368,   371,    -1,   368,    78,   392,    -1,   368,    78,
      31,   392,    -1,   368,    78,   221,   392,    -1,   368,   136,
      -1,    31,   136,    -1,   103,   221,    -1,   103,   154,    -1,
     398,    -1,   368,   398,    -1,   122,    -1,   123,   127,   250,
     128,    -1,   123,   127,   250,   132,   392,   128,    -1,   220,
      -1,   305,   220,    -1,   391,    -1,   368,   220,    -1,   368,
     391,    -1,   372,    -1,   368,   372,    -1,   394,    -1,   396,
     394,    -1,   395,   394,    -1,   396,     1,    -1,   395,     1,
      -1,   393,    -1,   396,   393,    -1,   395,   218,    -1,   395,
     368,   218,    -1,   396,    -1,   395,    -1,    -1,   107,   392,
     221,   134,   403,   133,    -1,   107,   392,   154,   134,   403,
     133,    -1,   107,   392,   134,   403,   133,    -1,   304,   221,
     392,   130,    -1,   221,    -1,   126,   221,    -1,   125,   221,
      -1,   400,    -1,   401,   132,   400,    -1,   109,   401,   130,
      -1,   109,   401,   221,   130,    -1,   399,    -1,   402,    -1,
     403,   399,    -1,   403,   402,    -1,   110,   127,   248,   132,
     248,   128,    -1,   108,   127,   392,   132,   221,   128,    -1,
     109,   127,   392,   132,   221,   128,    -1,   107,   127,   392,
     128,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   287,   287,   306,   345,   346,   426,   430,   433,   434,
     435,   474,   476,   481,   486,   491,   493,   498,   500,   505,
     507,   512,   514,   516,   518,   520,   524,   528,   541,   543,
     545,   547,   549,   555,   557,   562,   567,   572,   574,   576,
     581,   582,   586,   587,   598,   602,   603,   605,   610,   611,
     613,   616,   628,   639,   658,   660,   665,   666,   667,   668,
     669,   670,   671,   672,   685,   689,   690,   691,   692,   696,
     697,   698,   699,   700,   701,   702,   706,   708,   713,   715,
     717,   719,   721,   751,   753,   758,   760,   762,   764,   766,
     795,   797,   799,   804,   806,   811,   813,   817,   819,   821,
     823,   828,   831,   834,   837,   902,   904,   909,   911,   913,
     915,   917,   948,   952,   953,   954,   958,   959,   960,   964,
     965,   966,   967,   971,   974,   977,   980,   983,   988,   989,
     991,   993,   995,   997,  1002,  1006,  1009,  1012,  1015,  1018,
    1023,  1024,  1026,  1031,  1035,  1037,  1042,  1044,  1049,  1051,
    1056,  1061,  1063,  1068,  1070,  1072,  1074,  1079,  1081,  1083,
    1085,  1090,  1091,  1092,  1093,  1094,  1095,  1096,  1097,  1098,
    1099,  1100,  1102,  1103,  1105,  1109,  1112,  1113,  1114,  1115,
    1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,  1125,
    1127,  1128,  1132,  1133,  1134,  1138,  1142,  1143,  1144,  1148,
    1149,  1150,  1151,  1152,  1156,  1157,  1169,  1170,  1174,  1175,
    1176,  1177,  1178,  1179,  1180,  1181,  1185,  1189,  1190,  1194,
    1202,  1203,  1207,  1208,  1209,  1213,  1214,  1218,  1219,  1220,
    1221,  1222,  1223,  1263,  1264,  1268,  1276,  1277,  1285,  1286,
    1288,  1289,  1298,  1299,  1303,  1310,  1317,  1323,  1330,  1336,
    1345,  1352,  1358,  1364,  1370,  1376,  1382,  1393,  1398,  1399,
    1404,  1405,  1406,  1410,  1414,  1415,  1416,  1417,  1418,  1419,
    1420,  1433,  1434,  1435,  1436,  1437,  1438,  1439,  1440,  1441,
    1442,  1443,  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,
    1452,  1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,  1461,
    1463,  1464,  1468,  1472,  1476,  1477,  1481,  1483,  1484,  1485,
    1486,  1487,  1488,  1489,  1490,  1491,  1493,  1494,  1495,  1496,
    1497,  1498,  1499,  1500,  1527,  1528,  1529,  1530,  1534,  1535,
    1536,  1537,  1538,  1542,  1543,  1544,  1545,  1547,  1548,  1549,
    1550,  1553,  1554,  1556,  1560,  1561,  1570,  1571,  1572,  1573,
    1574,  1575,  1576,  1577,  1581,  1582,  1583,  1587,  1588,  1589,
    1590,  1591,  1592,  1593,  1597,  1598,  1599,  1600,  1601,  1605,
    1606,  1607,  1608,  1609,  1613,  1621,  1622,  1623,  1624,  1625,
    1626,  1627,  1628,  1629,  1633,  1634,  1635,  1636,  1637,  1639,
    1640,  1641,  1642,  1646,  1647,  1648,  1650,  1651,  1655,  1656,
    1657,  1659,  1660,  1664,  1665,  1666,  1668,  1669,  1673,  1674,
    1675,  1679,  1680,  1681,  1685,  1686,  1687,  1688,  1689,  1691,
    1692,  1693,  1694,  1696,  1697,  1698,  1699,  1701,  1702,  1703,
    1704,  1708,  1709,  1710,  1711,  1712,  1714,  1715,  1716,  1717,
    1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,
    1731,  1735,  1736,  1737,  1738,  1742,  1743,  1744,  1748,  1749,
    1750,  1751,  1753,  1754,  1756,  1757,  1762,  1764,  1769,  1797,
    1798,  1799,  1800,  1802,  1803,  1804,  1805,  1807,  1808,  1812,
    1813,  1822,  1823,  1827,  1828,  1829,  1830,  1831,  1832,  1833,
    1837,  1838,  1842,  1846,  1850,  1857,  1858,  1859,  1860,  1861,
    1865,  1866,  1909,  1910,  1911,  1912,  1913,  1914,  1915,  1919,
    1920,  1921,  1922,  1923,  1930,  1931,  1932,  1933,  1937,  1938,
    1939,  1941,  1942,  1946,  1947,  1948,  1950,  1951,  1955,  1956,
    1957,  1959,  1960,  1964,  1965,  1966,  1970,  1971,  1972,  1976,
    1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,  1986,  1987,
    1988,  1989,  1990,  1991,  1992,  1993,  1995,  1996,  1997,  1998,
    2000,  2001,  2002,  2003,  2005,  2013,  2017,  2022,  2029,  2030,
    2034,  2039,  2040,  2044,  2045,  2046,  2047,  2053,  2054,  2055,
    2059,  2060,  2061,  2062,  2066,  2068,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,  2082,  2083,  2084,  2085,  2086,  2087,  2088,
    2092,  2093,  2094,  2095,  2096,  2097,  2101,  2102,  2103,  2107,
    2111,  2112,  2116,  2117,  2118,  2122,  2123,  2125,  2126,  2127,
    2128,  2129,  2131,  2132,  2133,  2134,  2135,  2137,  2138,  2142,
    2143,  2147,  2148,  2149,  2153,  2154,  2155,  2156,  2157,  2158,
    2159,  2160,  2161,  2163,  2164,  2166,  2167,  2168,  2169,  2170,
    2172,  2173,  2174,  2175,  2179,  2180,  2184,  2185,  2189,  2193,
    2194,  2195,  2200,  2201,  2205,  2206,  2207,  2208,  2209,  2210,
    2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,  2220,
    2221,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,
    2231,  2232,  2233,  2237,  2238,  2239,  2240,  2241,  2242,  2243,
    2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,  2253,
    2254,  2255,  2256,  2257,  2258,  2259,  2260,  2261,  2262,  2263,
    2269,  2271,  2273,  2275,  2277,  2279,  2281,  2283,  2285,  2287,
    2292,  2293,  2297,  2303,  2309,  2316,  2326,  2327,  2328,  2329,
    2333,  2334,  2335,  2337,  2338,  2339,  2341,  2342,  2343,  2347,
    2351,  2359,  2368,  2377,  2378,  2380,  2381,  2385,  2392,  2399,
    2402,  2418,  2432,  2435,  2437,  2439,  2444,  2445,  2449,  2450,
    2451,  2452,  2453,  2454,  2455,  2456,  2460,  2461,  2462,  2463,
    2464,  2465,  2466,  2467,  2468,  2469,  2473,  2474,  2475,  2476,
    2477,  2478,  2479,  2480,  2481,  2482,  2486,  2487,  2488,  2489,
    2490,  2491,  2492,  2493,  2494,  2495,  2496,  2497,  2501,  2502,
    2503,  2504,  2505,  2506,  2507,  2508,  2509,  2510,  2514,  2515,
    2519,  2520,  2521,  2522,  2523,  2524,  2525,  2526,  2527,  2529,
    2531,  2539,  2549,  2550,  2554,  2555,  2556,  2557,  2558,  2559,
    2560,  2561,  2562,  2570,  2579,  2580,  2581,  2582,  2583,  2584,
    2585,  2586,  2587,  2588,  2589,  2590,  2591,  2599,  2608,  2609,
    2610,  2611,  2612,  2613,  2614,  2615,  2616,  2617,  2618,  2619,
    2620,  2628,  2637,  2638,  2642,  2643,  2644,  2645,  2646,  2650,
    2651,  2658,  2660,  2669,  2678,  2687,  2696,  2697,  2698,  2699,
    2703,  2704,  2705,  2706,  2707,  2708,  2709,  2710,  2711,  2715,
    2719,  2720,  2721,  2722,  2723,  2728,  2737,  2746,  2755,  2769,
    2770,  2775,  2779,  2780,  2781,  2782,  2783,  2788,  2797,  2806,
    2815,  2829,  2830,  2879,  2880,  2882,  2893,  2904,  2905,  2906,
    2918,  2919,  2920,  2925,  2926,  2927,  2928,  2929,  2933,  2934,
    2938,  2939,  2940,  2944,  2945,  2949,  2950,  2954,  2955,  2956,
    2957,  2958,  2959,  2960,  2961,  2962,  2963,  2964,  2965,  2966,
    2967,  2968,  2969,  2973,  2974,  2975,  2976,  2977,  2978,  2979,
    2980,  2984,  2985,  2986,  2987,  2991,  2992,  2993,  2994,  2995,
    2999,  3000,  3001,  3002,  3003,  3007,  3008,  3010,  3012,  3014,
    3019,  3020,  3022,  3024,  3029,  3030,  3031,  3032,  3036,  3037,
    3038,  3039,  3043,  3044,  3045,  3046,  3050,  3051,  3052,  3053,
    3057,  3058,  3059,  3060,  3064,  3065,  3066,  3083,  3084,  3101,
    3102,  3103,  3104,  3117,  3134,  3135,  3140,  3141,  3145,  3146,
    3147,  3148,  3151,  3152,  3156,  3157,  3158,  3162,  3166,  3170,
    3171,  3172,  3173,  3174,  3175,  3176,  3177,  3186,  3195,  3196,
    3197,  3198,  3202,  3203,  3207,  3208,  3213,  3214,  3215,  3216,
    3217,  3218,  3237,  3238,  3242,  3243,  3244,  3245,  3246,  3247,
    3249,  3250,  3251,  3252,  3256,  3257,  3258,  3259,  3260,  3262,
    3263,  3264,  3268,  3269,  3270,  3271,  3272,  3273,  3277,  3278,
    3279,  3284,  3285,  3286,  3287,  3288,  3289,  3290,  3291,  3292,
    3293,  3294,  3295,  3296,  3300,  3301,  3302,  3303,  3304,  3305,
    3306,  3310,  3311,  3312,  3316,  3317,  3318,  3322,  3323,  3324,
    3325,  3327,  3328,  3329,  3331,  3332,  3333,  3334,  3336,  3337,
    3338,  3342,  3343,  3344,  3345,  3346,  3348,  3349,  3350,  3351,
    3352,  3356,  3357,  3358,  3359,  3360,  3361,  3362,  3364,  3365,
    3366,  3367,  3368,  3372,  3373,  3374,  3378,  3379,  3383,  3384,
    3385,  3386,  3387,  3388,  3392,  3393,  3394,  3396,  3397,  3398,
    3402,  3406,  3407,  3409,  3410,  3411,  3415,  3416,  3417,  3418,
    3422,  3423,  3427,  3428,  3429,  3433,  3434,  3435,  3436,  3437,
    3438,  3439,  3443,  3444,  3445,  3446,  3450,  3451,  3452,  3453,
    3457,  3461,  3465,  3467,  3470,  3476,  3477,  3478,  3482,  3483,
    3484,  3485,  3486,  3487,  3491,  3492,  3496,  3497,  3498,  3500,
    3501,  3503,  3504,  3505,  3506,  3507,  3509,  3510,  3514,  3515,
    3516,  3517,  3521,  3522,  3523,  3524,  3526,  3527,  3528,  3529,
    3530,  3531,  3532,  3535,  3539,  3540,  3544,  3545,  3549,  3550,
    3551,  3552,  3553,  3554,  3555,  3556,  3560,  3561,  3562,  3563,
    3569,  3570,  3572,  3573,  3576,  3577,  3580,  3581,  3582,  3583,
    3584,  3585,  3589,  3590,  3602,  3603,  3606,  3609,  3611,  3612,
    3613,  3623,  3625,  3626,  3628,  3629,  3630,  3631,  3641,  3642,
    3643,  3644,  3645,  3646,  3647,  3648,  3649,  3653,  3654,  3663,
    3665,  3666,  3668,  3670,  3674,  3675,  3676,  3677,  3678,  3682,
    3683,  3684,  3686,  3691,  3692,  3693,  3697,  3698,  3699,  3703,
    3707,  3708,  3709,  3713,  3714,  3718,  3719,  3723,  3724,  3725,
    3726,  3730,  3734,  3738,  3742
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "INT128", "FLOAT128", "FLOAT16", "LONG",
  "SIGNED", "UNSIGNED", "FLOAT", "DOUBLE", "CONST", "VOLATILE", "VOID",
  "VALIST", "STRUCT", "UNION", "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF",
  "SWITCH", "WHILE", "DO", "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN",
  "IFX", "ELSE", "CLASS", "THISCLASS", "PROPERTY", "SETPROP", "GETPROP",
  "NEWOP", "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT",
  "DEFINE", "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT",
  "ANY_OBJECT", "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH",
  "STOPWATCHING", "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER",
  "CLASS_NO_EXPANSION", "CLASS_FIXED", "ISPROPSET",
  "CLASS_DEFAULT_PROPERTY", "PROPERTY_CATEGORY", "CLASS_DATA",
  "CLASS_PROPERTY", "SUBCLASS", "NAMESPACE", "NEW0OP", "RENEW0", "VAARG",
  "DBTABLE", "DBFIELD", "DBINDEX", "DATABASE_OPEN", "ALIGNOF",
  "ATTRIB_DEP", "__ATTRIB", "BOOL", "_BOOL", "_COMPLEX", "_IMAGINARY",
  "RESTRICT", "THREAD", "WIDE_STRING_LITERAL", "BUILTIN_OFFSETOF",
  "PRAGMA", "STATIC_ASSERT", "'*'", "'<'", "'>'", "'('", "')'", "'~'",
  "';'", "'='", "','", "'}'", "'{'", "'.'", "':'", "'$'", "'['", "']'",
  "'&'", "'+'", "'-'", "'!'", "'/'", "'%'", "'^'", "'|'", "'?'", "$accept",
  "guess_type", "type", "base_strict_type", "base_strict_type_name",
  "strict_type", "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "multi_attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_noexp",
  "initializer_error", "initializer_condition",
  "initializer_condition_error", "initializer_list", "init_declarator",
  "init_declarator_error", "init_declarator_list",
  "init_declarator_list_error", "type_name", "guess_type_name",
  "parameter_declaration", "parameter_declaration_error", "parameter_list",
  "parameter_list_error", "parameter_type_list",
  "parameter_type_list_error", "statement", "statement_error", "asm_field",
  "asm_field_list", "asm_statement", "labeled_statement",
  "labeled_statement_error", "declaration_mode", "member_access",
  "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    42,    60,    62,    40,    41,   126,
      59,    61,    44,   125,   123,    46,    58,    36,    91,    93,
      38,    43,    45,    33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   149,   150,   150,   151,   151,   152,   153,   154,   154,
     154,   155,   155,   156,   157,   158,   158,   159,   159,   160,
     160,   161,   161,   161,   161,   161,   161,   161,   162,   162,
     162,   162,   162,   163,   163,   164,   165,   166,   166,   166,
     167,   167,   168,   168,   168,   169,   169,   169,   170,   170,
     170,   170,   170,   170,   171,   171,   172,   172,   172,   172,
     172,   172,   172,   172,   172,   173,   173,   173,   173,   174,
     174,   174,   174,   174,   174,   174,   175,   175,   176,   176,
     176,   176,   176,   177,   177,   178,   178,   178,   178,   178,
     179,   179,   179,   180,   180,   181,   181,   181,   181,   181,
     181,   181,   181,   181,   181,   182,   182,   183,   183,   183,
     183,   183,   184,   185,   185,   185,   186,   186,   186,   187,
     187,   187,   187,   188,   188,   188,   188,   188,   189,   189,
     189,   189,   189,   189,   190,   191,   191,   191,   191,   191,
     192,   192,   192,   193,   194,   194,   195,   195,   196,   196,
     197,   198,   198,   199,   199,   199,   199,   200,   200,   200,
     200,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   202,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   203,   203,   203,   204,
     204,   204,   204,   204,   205,   205,   206,   206,   207,   207,
     207,   207,   207,   207,   207,   207,   208,   209,   209,   210,
     211,   211,   212,   212,   212,   213,   213,   214,   214,   214,
     214,   214,   214,   215,   215,   216,   217,   217,   217,   217,
     217,   217,   217,   217,   218,   218,   218,   218,   218,   218,
     219,   220,   220,   220,   220,   220,   220,   221,   222,   222,
     223,   223,   223,   224,   225,   225,   225,   225,   225,   225,
     225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
     225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
     225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
     225,   225,   226,   227,   228,   228,   229,   229,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   230,   230,   230,   230,   231,   231,
     231,   231,   231,   232,   232,   232,   232,   232,   232,   232,
     232,   232,   232,   232,   233,   233,   234,   234,   234,   234,
     234,   234,   234,   234,   235,   235,   235,   236,   236,   236,
     236,   236,   236,   236,   237,   237,   237,   237,   237,   238,
     238,   238,   238,   238,   239,   240,   240,   240,   240,   240,
     240,   240,   240,   240,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   242,   242,   242,   242,   242,   243,   243,
     243,   243,   243,   244,   244,   244,   244,   244,   245,   245,
     245,   246,   246,   246,   247,   247,   247,   247,   247,   247,
     247,   247,   247,   247,   247,   247,   247,   247,   247,   247,
     247,   248,   248,   248,   248,   248,   248,   248,   248,   248,
     249,   249,   249,   249,   249,   249,   249,   249,   249,   249,
     249,   250,   250,   250,   250,   251,   251,   251,   252,   252,
     252,   252,   252,   252,   252,   252,   252,   252,   252,   253,
     253,   253,   253,   253,   253,   253,   253,   253,   253,   254,
     254,   255,   255,   256,   256,   256,   256,   256,   256,   256,
     257,   257,   257,   257,   257,   258,   258,   258,   258,   258,
     259,   259,   259,   259,   259,   259,   259,   259,   259,   260,
     260,   260,   260,   260,   260,   260,   260,   260,   261,   261,
     261,   261,   261,   262,   262,   262,   262,   262,   263,   263,
     263,   263,   263,   264,   264,   264,   265,   265,   265,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   267,   267,
     267,   267,   267,   268,   268,   268,   268,   268,   268,   268,
     269,   269,   269,   269,   270,   271,   272,   272,   272,   272,
     272,   272,   272,   273,   273,   273,   273,   273,   273,   273,
     274,   274,   274,   274,   274,   274,   275,   275,   275,   276,
     277,   277,   278,   278,   278,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   280,
     280,   281,   281,   281,   282,   282,   282,   282,   282,   282,
     282,   282,   282,   282,   282,   282,   282,   282,   282,   282,
     282,   282,   282,   282,   283,   283,   284,   284,   285,   286,
     286,   286,   287,   287,   288,   288,   288,   288,   288,   288,
     288,   288,   288,   288,   288,   288,   288,   288,   288,   288,
     288,   288,   288,   288,   288,   288,   288,   288,   288,   288,
     288,   288,   288,   289,   289,   289,   289,   289,   289,   289,
     289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
     289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
     290,   290,   290,   290,   290,   290,   290,   290,   290,   290,
     291,   291,   292,   292,   292,   292,   293,   293,   293,   293,
     294,   294,   294,   294,   294,   294,   294,   294,   294,   295,
     296,   296,   297,   298,   298,   298,   298,   299,   299,   299,
     299,   299,   299,   299,   299,   299,   300,   300,   301,   301,
     301,   301,   301,   301,   301,   301,   302,   302,   302,   302,
     302,   302,   302,   302,   302,   302,   303,   303,   303,   303,
     303,   303,   303,   303,   303,   303,   304,   304,   304,   304,
     304,   304,   304,   304,   304,   304,   304,   304,   305,   305,
     305,   305,   305,   305,   305,   305,   305,   305,   306,   306,
     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
     307,   307,   308,   308,   309,   309,   309,   309,   309,   309,
     309,   309,   309,   309,   310,   310,   310,   310,   310,   310,
     310,   310,   310,   310,   310,   310,   310,   310,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   312,   312,   313,   313,   313,   313,   313,   314,
     314,   314,   314,   314,   314,   314,   314,   314,   314,   314,
     315,   315,   315,   315,   315,   315,   315,   315,   315,   316,
     317,   317,   317,   317,   317,   318,   318,   318,   318,   319,
     319,   320,   321,   321,   321,   321,   321,   322,   322,   322,
     322,   323,   323,   324,   324,   324,   324,   324,   324,   324,
     325,   325,   325,   326,   326,   326,   326,   326,   327,   327,
     328,   328,   328,   329,   329,   330,   330,   331,   331,   331,
     331,   331,   331,   331,   331,   331,   331,   331,   331,   331,
     331,   331,   331,   332,   332,   332,   332,   332,   332,   332,
     332,   333,   333,   333,   333,   334,   334,   334,   334,   334,
     335,   335,   335,   335,   335,   336,   336,   336,   336,   336,
     337,   337,   337,   337,   338,   338,   338,   338,   339,   339,
     339,   339,   340,   340,   340,   340,   341,   341,   341,   341,
     342,   342,   342,   342,   343,   343,   343,   344,   344,   345,
     345,   345,   345,   345,   346,   346,   347,   347,   348,   348,
     348,   348,   348,   348,   349,   349,   349,   350,   350,   351,
     351,   351,   351,   351,   351,   351,   351,   351,   352,   352,
     352,   352,   353,   353,   354,   354,   355,   355,   355,   355,
     355,   355,   356,   356,   357,   357,   357,   357,   357,   357,
     357,   357,   357,   357,   358,   358,   358,   358,   358,   358,
     358,   358,   359,   359,   359,   359,   359,   359,   360,   360,
     360,   361,   361,   361,   361,   361,   361,   361,   361,   361,
     361,   361,   361,   361,   362,   362,   362,   362,   362,   362,
     362,   363,   363,   363,   364,   364,   364,   365,   365,   365,
     365,   365,   365,   365,   365,   365,   365,   365,   365,   365,
     365,   366,   366,   366,   366,   366,   366,   366,   366,   366,
     366,   367,   367,   367,   367,   367,   367,   367,   367,   367,
     367,   367,   367,   368,   368,   368,   369,   369,   370,   370,
     370,   370,   370,   370,   371,   371,   371,   371,   371,   371,
     372,   373,   373,   373,   373,   373,   374,   374,   374,   374,
     375,   375,   376,   376,   376,   377,   377,   377,   377,   377,
     377,   377,   378,   378,   378,   378,   379,   379,   379,   379,
     380,   381,   382,   382,   382,   383,   383,   383,   384,   384,
     384,   384,   384,   384,   385,   385,   386,   386,   386,   386,
     386,   386,   386,   386,   386,   386,   386,   386,   387,   387,
     387,   387,   387,   387,   387,   387,   387,   387,   387,   387,
     387,   387,   387,   387,   387,   387,   387,   387,   388,   388,
     388,   388,   388,   388,   388,   388,   389,   389,   389,   389,
     390,   390,   390,   390,   390,   390,   391,   391,   391,   391,
     391,   391,   392,   392,   393,   393,   393,   393,   393,   393,
     393,   393,   393,   393,   393,   393,   393,   393,   393,   393,
     393,   393,   393,   393,   393,   393,   393,   394,   394,   394,
     394,   394,   394,   394,   395,   395,   395,   395,   395,   396,
     396,   396,   396,   397,   397,   397,   398,   398,   398,   399,
     400,   400,   400,   401,   401,   402,   402,   403,   403,   403,
     403,   404,   405,   406,   407
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4,     1,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     2,     1,     3,     3,     1,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     2,     5,     6,     6,     2,     5,     1,
       1,     1,     4,     1,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
       5,     5,     5,     5,     4,     4,     4,     4,     5,     5,
       5,     5,     4,     4,     4,     4,     5,     5,     5,     5,
       5,     5,     5,     5,     3,     3,     2,     2,     1,     3,
       3,     3,     3,     1,     2,     3,     3,     2,     2,     2,
       1,     2,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     4,     4,     1,     3,     2,     1,
       2,     2,     2,     4,     4,     3,     3,     4,     5,     4,
       6,     6,     4,     5,     4,     6,     6,     5,     5,     2,
       2,     2,     5,     3,     5,     6,     5,     7,     7,     8,
       8,     7,     7,     3,     3,     3,     4,     3,     5,     5,
       6,     7,     6,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     4,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     4,     4,     1,
       1,     2,     2,     3,     5,     2,     3,     5,     5,     5,
       1,     3,     2,     2,     3,     3,     2,     3,     3,     4,
       3,     3,     3,     3,     3,     3,     4,     4,     4,     1,
       1,     4,     3,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     1,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     4,     5,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     3,     3,     1,     3,     3,     3,     3,     1,
       1,     1,     4,     4,     4,     3,     4,     4,     4,     3,
       1,     3,     4,     3,     4,     4,     4,     4,     3,     2,
       3,     3,     3,     3,     2,     2,     2,     3,     4,     1,
       1,     2,     3,     3,     3,     3,     2,     2,     2,     3,
       4,     1,     1,     1,     1,     2,     2,     1,     1,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       1,     2,     3,     6,     5,     1,     2,     3,     4,     2,
       3,     3,     3,     3,     4,     4,     4,     2,     3,     3,
       3,     4,     4,     3,     4,     2,     3,     3,     3,     4,
       4,     1,     2,     2,     3,     1,     1,     2,     2,     3,
       1,     1,     2,     2,     3,     1,     2,     3,     2,     2,
       1,     2,     3,     2,     1,     2,     3,     3,     1,     2,
       3,     3,     1,     2,     3,     3,     1,     2,     3,     3,
       1,     2,     3,     3,     1,     3,     4,     3,     4,     1,
       4,     2,     5,     3,     1,     1,     1,     1,     1,     1,
       3,     3,     2,     2,     1,     1,     3,     2,     3,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     2,
       3,     3,     1,     2,     1,     2,     2,     2,     2,     3,
       1,     1,     3,     3,     1,     3,     4,     3,     4,     3,
       3,     4,     3,     4,     1,     3,     3,     4,     3,     3,
       3,     4,     1,     3,     3,     3,     3,     3,     1,     3,
       2,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     2,     2,     2,     1,     1,     1,     1,     1,     2,
       1,     1,     4,     7,     1,     3,     0,     6,     8,    10,
      12,     8,    10,    10,     5,     7,     9,    11,     7,     9,
       9,     3,     4,     4,     3,     3,     3,     4,     4,     3,
       3,     3,     4,     4,     3,     2,     3,     2,     3,     4,
       4,     3,     3,     1,     1,     1,     1,     1,     2,     3,
       2,     2,     4,     6,     2,     3,     3,     2,     5,     6,
       2,     2,     2,     2,     2,     2,     1,     2,     2,     3,
       1,     2,     1,     2,     2,     1,     2,     2,     2,     2,
       2,     2,     1,     1,     2,     2,     1,     1,     2,     2,
       1,     2,     2,     1,     2,     1,     2,     2,     5,     5,
       7,     7,     5,     5,     3,     2,     5,     4,     4,     7,
       6,     6,     5,     7,     6,     4,     7,     9,     3,     4,
       4,     5,     5,     6,     7,     6,     6,     5,     5,     4,
       3,     2,     1,     2,     4,     3,     5,     4,     3,     2,
       2,     2,     3,     3,     3,     3,     2,     2,     1,     1,
       4,     3,     4,     3,     3,     2,     4,     3,     4,     3,
       3,     2,     1,     2,     1,     1,     2,     1,     2,     3,
       3,     1,     2,     2,     2,     3,     4,     4,     2,     2,
       2,     2,     1,     2,     1,     4,     6,     1,     2,     1,
       2,     2,     1,     2,     1,     2,     2,     2,     2,     1,
       2,     2,     3,     1,     1,     0,     6,     6,     5,     4,
       1,     2,     2,     1,     3,     3,     4,     1,     1,     2,
       2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1315,   257,     6,   593,   594,   595,   597,   598,   665,   666,
     667,   668,   669,   670,   671,   672,   674,   677,   678,   675,
     676,   659,   660,   664,   673,   766,   767,   609,  1155,   235,
     686,   923,   924,     0,     0,   930,  1153,  1154,   687,   688,
     679,     0,     0,     0,     0,     0,   931,   932,   690,   689,
     691,   692,   599,   596,  1294,     0,   971,     0,  1281,   814,
     682,     8,     4,     0,     0,     0,  1275,     0,  1297,   890,
     808,     0,   681,     0,   654,   656,   816,   818,   661,   810,
     812,   749,   680,     0,     0,   655,   657,     0,     0,     0,
       0,     0,   994,   658,     0,   927,   928,     0,     0,     0,
    1277,  1302,  1274,  1299,  1309,  1304,     0,     0,     0,  1292,
       0,  1289,  1272,     0,     0,  1278,     0,     0,     0,     0,
    1291,  1290,     0,     0,   662,   972,   658,   973,   881,   880,
     890,   922,   879,   909,   985,     0,   921,   990,     0,     0,
       0,     0,     0,     0,  1167,     0,   237,   236,     0,     0,
     245,     0,   244,     2,     3,     0,     5,     0,   611,   610,
       0,     0,   631,     0,     0,     0,     0,   753,     0,   733,
     732,     0,  1170,   595,   668,   669,   670,   671,   672,  1164,
     815,     8,  1276,  1298,   890,   809,   817,   819,   811,   813,
     994,  1002,   658,     0,     0,  1035,     0,     0,     0,  1048,
       0,     0,   881,     0,     0,     0,     0,   880,     0,     0,
     899,     0,     0,   586,   587,   588,   590,   591,  1061,   592,
     589,   904,   802,   874,   796,     0,   806,     0,   798,   800,
     749,   804,     0,     0,  1060,     0,     0,  1064,  1074,     0,
       0,     0,     0,   926,   925,     0,     0,   946,   995,     0,
     694,   695,   696,   697,   698,   699,   700,   701,   703,   706,
     707,   704,   705,   693,   702,   719,   708,     0,     0,   713,
     712,   714,   715,     0,  1200,   711,     0,     0,   786,   710,
     792,   788,   790,   794,   709,     0,  1176,     0,     0,     0,
       0,  1265,  1271,   595,     0,  1288,  1283,  1300,     0,  1284,
    1303,  1282,  1301,  1293,  1308,  1311,     0,     0,     0,     0,
       0,  1306,  1307,  1310,  1305,     1,     0,  1279,  1280,  1273,
       0,     0,   459,   263,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   273,     0,   347,     0,   350,     0,     0,   346,
     348,   349,   351,     0,   265,     0,   264,   306,   272,   271,
     258,   458,     0,   344,   354,     0,   357,   364,   369,   375,
       0,   384,   393,   398,   403,   408,   411,   414,   431,     0,
     480,   479,   481,   483,   490,   495,   500,   509,   518,   523,
     528,   533,   536,   539,     0,   260,   296,   297,   298,   299,
       0,     0,     0,     0,     0,   354,     0,     0,   481,   568,
     573,     0,   663,   974,     0,   911,     0,   916,     0,     0,
       0,     0,   926,   925,     0,     0,     0,   922,   986,   991,
       0,   891,   988,   893,   993,   989,   679,     4,   229,   228,
     227,   233,     0,   264,   354,   219,   481,     0,   206,   249,
       0,     0,   248,   255,     0,     0,  1156,  1157,     0,   168,
       0,   169,   170,     0,     0,     0,     0,     0,   172,   246,
       0,     0,     0,     0,    29,    31,   163,   175,   188,     0,
     187,     0,   116,   119,     0,   195,   128,     0,   164,   140,
       0,   167,   183,   196,   199,     0,     0,   264,     0,     0,
     176,     0,   998,   658,     0,    12,    18,     0,   821,   820,
     828,   822,     0,   824,   826,   749,   833,   832,   250,   256,
     247,     0,     0,   239,   238,   644,   600,   606,   643,   647,
     633,     0,     0,     0,   222,   223,   224,   225,     0,   217,
       0,   762,   755,     0,     0,   752,   759,   754,     0,     0,
     765,   756,     0,     0,   735,   734,     0,     0,     0,     0,
       0,     0,     0,     0,   995,  1003,     0,  1037,     0,     0,
    1261,  1267,     0,  1263,  1269,  1049,  1165,     0,     0,     0,
    1166,   898,     0,   264,   584,   585,     0,     0,     0,     0,
     611,   610,   612,     0,   736,     0,     0,   668,     0,     0,
    1058,   803,     8,   890,   797,   807,   799,   801,   805,   922,
     879,   658,   976,   975,     0,     0,     0,   903,     0,     0,
     902,     0,     0,     0,  1090,     0,   900,   901,   996,     0,
     997,     0,     0,     0,  1174,  1160,  1173,    76,  1171,   697,
     698,   699,   700,   701,  1158,   890,   787,   793,   789,   791,
     795,   658,     0,  1175,  1172,  1161,     0,  1177,     0,  1264,
    1270,  1178,     0,     0,     0,     0,     0,     0,     0,     0,
    1259,     0,     0,     0,   708,     0,     0,     0,   157,  1094,
    1095,   711,     0,     0,     0,   264,     0,     0,     0,     0,
    1092,  1182,  1185,  1100,  1091,  1104,     0,     0,     0,     0,
    1204,  1202,  1093,  1106,     0,  1107,  1098,  1105,     0,  1108,
    1201,     0,     0,  1285,   890,     0,     0,     0,  1298,     0,
     879,  1002,   658,     0,     0,     0,     0,  1271,  1312,     0,
       0,   414,     0,     0,   929,     0,   337,   473,     0,   333,
     469,   334,   470,     0,   868,   858,   866,   860,   862,   864,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   341,   477,     0,   274,     0,     0,   772,   768,
     770,   774,  1052,     0,   261,     0,   301,   302,     0,   325,
       0,   324,     0,   461,    93,     0,   270,   460,     0,   314,
     315,     0,     0,     0,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   440,     0,     0,   336,   472,   335,
     471,     0,     0,     0,     0,     0,     0,     0,   376,   501,
       0,     0,   374,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   683,     0,   322,   323,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   684,   685,     0,     0,     0,  1327,  1328,     0,     0,
       0,     0,   574,  1295,     0,     0,     0,     0,   454,     0,
       0,   885,     0,     0,     0,   889,     0,     0,     0,   915,
     914,   912,   913,   922,   986,   991,   892,   894,  1013,    10,
       9,     0,     0,     0,   658,   975,   207,     0,     0,   264,
     206,     0,     0,   840,   834,   836,   838,     0,     0,     0,
      16,    20,     0,   185,   184,   186,     0,     0,     0,     0,
     347,     0,   264,     0,    26,     0,    21,    28,    24,     0,
      25,    23,    22,    30,    32,   190,    83,   191,   122,   162,
       0,     0,     0,     0,   132,     0,     0,   134,     0,     0,
     143,   161,   200,   197,   202,   201,   198,   203,   115,     0,
       0,     0,   890,   730,   177,  1010,     0,  1006,   658,     0,
      11,    17,   720,   906,  1060,     0,     0,     0,   999,     0,
       0,   173,   165,   192,   181,     0,   180,     0,   166,   890,
     179,     0,   611,   610,   829,   823,   825,   827,     0,     0,
       0,   945,   603,   608,   646,     0,     0,     7,   212,   208,
     751,     0,     0,     0,     0,  1034,  1041,  1042,  1043,  1044,
    1045,  1046,    64,    53,    92,    39,    38,    57,    69,    45,
      48,     0,    74,    56,     0,     0,     0,  1025,  1027,     0,
    1024,  1026,     0,    41,    44,   922,   996,   987,  1004,   992,
    1013,  1005,     0,  1014,  1019,  1036,  1038,  1260,  1266,  1262,
    1268,  1040,  1050,  1047,  1051,   897,   895,   896,  1087,  1069,
    1078,   616,   615,     0,     0,   459,   737,     0,     0,   459,
     738,     0,     0,     0,   957,   890,     0,     0,   658,   975,
       0,     0,     0,   949,     0,     0,     0,     0,     0,  1059,
     978,     0,     0,   977,  1063,  1062,     0,   873,  1086,   876,
    1072,  1080,     0,   872,  1085,   875,  1070,  1079,     0,  1089,
    1083,   877,  1065,  1075,     0,  1084,   878,  1067,  1076,   933,
     934,   937,   936,   935,     0,   938,   940,     0,     0,     0,
       0,     0,    77,     0,  1159,  1179,     0,     0,     0,     0,
       0,     0,  1243,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   264,  1092,  1241,  1097,  1099,     0,     0,
    1249,  1250,  1251,     0,  1257,     0,     0,     0,     0,     0,
       0,   158,   144,  1103,  1102,  1101,     0,     0,     0,  1096,
       0,   459,     0,     0,     0,     0,  1183,  1186,  1188,     0,
    1184,  1187,  1189,     0,  1215,  1109,  1286,  1287,   237,   236,
       0,     0,     0,  1003,     0,     0,  1267,     0,  1269,  1270,
       0,     0,  1168,     0,     0,   780,   264,   782,   776,   778,
     784,  1054,     0,     0,     0,     0,     0,     0,   869,   859,
     867,   861,   863,   865,   658,   981,   980,     0,   854,   844,
     852,   846,   848,   850,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
       0,   773,   769,   771,   775,  1053,     0,     0,   459,     0,
       0,     0,   105,     0,   300,   459,     0,     0,    94,   459,
       0,     0,   462,   313,   309,   329,   464,   465,   328,   466,
     312,     0,     0,   436,   432,   303,   358,   484,   359,   485,
     360,   486,   365,   491,   366,   492,   370,   496,   371,   497,
     378,   503,   379,   504,   377,   502,   389,   514,   385,   510,
     390,   515,   386,   511,   396,   521,   394,   519,   401,   526,
     399,   524,   406,   531,   404,   529,   409,   534,   412,   537,
     564,     0,   580,     0,     0,     0,     0,   438,   434,   463,
     321,   318,     0,   467,   468,   320,     0,     0,   437,   433,
     361,   487,   362,   488,   363,   489,   367,   493,   368,   494,
     372,   498,   373,   499,   382,   507,   383,   508,   380,   505,
     381,   506,   391,   516,   387,   512,   392,   517,   388,   513,
     397,   522,   395,   520,   402,   527,   400,   525,   407,   532,
     405,   530,   410,   535,   413,   538,   565,     0,     0,     0,
       0,   439,   435,     0,     0,  1320,  1323,     0,     0,  1318,
    1329,  1330,     0,     0,   571,   569,   452,   575,   260,   572,
     570,   453,   576,   884,   882,   883,   888,   886,   887,   234,
     232,   231,   230,   264,   658,   978,   241,     0,   207,   240,
     127,     0,   125,   841,   835,   837,   839,     0,   658,     0,
      15,    19,     0,   182,  1010,   658,     0,   139,     0,   137,
     841,     0,   264,   658,     0,    27,    84,   117,   120,   118,
     121,   129,   130,   131,   133,   141,   142,   114,   112,   113,
      13,   722,   725,     0,     0,   918,  1060,     0,     0,     0,
    1011,  1007,     0,     0,   721,   890,   907,  1000,  1001,   890,
     193,   194,   178,     0,     0,     0,     0,   601,   602,     0,
     607,     0,     0,   636,   632,     0,     0,     0,     0,     0,
     226,   218,   216,     0,     0,     0,    36,    37,    75,    54,
       0,    55,     0,    63,    61,    72,    67,    73,    60,    90,
      39,    70,    62,    91,    59,    71,    68,     0,    58,     0,
     697,    33,    35,    34,  1028,  1029,     0,   624,   614,     0,
     619,   613,     0,   459,   739,     0,     0,     0,   975,     0,
     947,   958,   959,   952,   950,   951,     0,   979,   960,     0,
       0,   953,     0,     0,     0,  1073,  1081,  1060,  1071,  1066,
    1068,  1077,   944,     0,     0,     0,   941,   716,   717,   718,
    1162,     0,   459,     0,     0,  1134,  1144,  1139,     0,     0,
       0,  1135,  1146,  1140,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1240,  1228,     0,  1205,   264,     0,
       0,     0,  1248,  1254,  1255,  1252,  1253,     0,     0,     0,
       0,   145,  1131,  1141,  1136,     0,   159,     0,     0,     0,
       0,  1004,  1266,  1268,  1169,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   781,   783,   777,   779,   785,
    1055,     0,   293,   291,     0,     0,   965,   658,     0,     0,
       0,     0,     0,     0,   983,     0,   982,     0,     0,     0,
     855,   845,   853,   847,   849,   851,     0,   267,     0,   266,
     295,     0,     0,     0,     0,     0,     0,  1334,     0,     0,
       0,     0,     0,     0,   356,   482,   355,   262,   108,   106,
     327,   326,    99,   103,   310,     0,   311,   307,   308,   581,
       0,     0,     0,     0,     0,     0,   319,   316,   317,     0,
       0,     0,     0,  1322,  1321,  1325,     0,     0,     0,  1317,
    1316,  1296,     0,   975,   218,     0,     0,   123,   126,     0,
       0,     0,     0,     0,  1011,     0,   135,   138,     0,    14,
     459,     0,     0,   731,     0,   890,   919,  1012,  1008,  1009,
     723,   726,   908,   174,   830,     0,   243,   242,   604,   605,
       0,   635,     0,   213,   214,   204,   209,   210,   220,     0,
       0,    51,    46,    49,    52,    47,    50,    37,    43,    40,
      42,     0,     0,  1032,  1033,   623,     0,   618,     0,   978,
     977,   948,   961,   962,   955,   954,   956,  1057,  1056,     0,
     943,   942,   260,    79,  1132,  1142,  1137,     0,  1133,  1143,
    1138,     0,     0,     0,     0,     0,  1244,  1218,     0,     0,
    1217,  1247,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1225,     0,  1206,  1229,  1207,  1230,     0,
       0,     0,  1116,   929,  1116,     0,     0,   155,     0,     0,
       0,   160,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   474,   292,   870,     0,   980,     0,   963,   966,
     967,   277,   278,     0,   984,   968,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   268,   281,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   331,   330,   456,   582,   423,   556,   415,   540,   427,
     560,   419,   548,   457,   583,   424,   557,   416,   541,   428,
     561,   420,   549,   425,   558,   417,   542,   429,   562,   421,
     550,   426,   559,   418,   543,   430,   563,   422,   551,  1324,
    1326,  1319,   842,     0,   124,   150,  1012,     0,   136,    86,
     920,     0,     0,   831,     0,     0,     0,     0,     0,     0,
     205,     0,   221,     0,     0,  1030,  1031,  1020,     0,     0,
       0,     0,   939,  1163,  1208,  1209,  1212,  1213,  1216,  1246,
       0,     0,     0,     0,     0,     0,     0,  1222,  1231,     0,
       0,     0,     0,  1114,     0,  1111,  1124,     0,  1116,     0,
    1116,     0,     0,     0,     0,   476,   475,   982,   964,   871,
     969,   970,   275,   276,   856,   285,   286,     0,     0,     0,
       0,   279,   280,   289,   290,     0,     0,   294,  1332,  1333,
    1331,   343,     0,  1017,   843,     0,   724,   727,   729,   728,
       0,     0,   215,   211,     0,  1015,  1022,     0,     0,     0,
       0,     0,     0,     0,  1236,  1220,     0,     0,  1221,  1233,
       0,  1224,  1235,     0,     0,     0,  1116,     0,  1116,     0,
    1116,     0,  1117,     0,     0,     0,   148,     0,   153,     0,
     156,     0,   857,   283,   284,     0,   287,   288,  1018,   171,
    1016,  1210,  1211,     0,     0,  1219,  1226,     0,  1223,  1234,
       0,  1128,  1115,     0,     0,     0,  1125,     0,     0,  1116,
    1116,     0,  1116,   147,   146,   151,   149,     0,     0,     0,
     356,   482,   269,     0,     0,     0,  1112,     0,     0,  1116,
    1121,     0,     0,  1118,     0,     0,   154,     0,  1227,     0,
    1129,  1130,  1126,     0,     0,     0,     0,  1116,   152,     0,
    1015,     0,     0,  1122,  1123,  1119,     0,  1016,  1113,  1127,
       0,  1120
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   222,    60,    61,  1018,   353,   470,   471,   472,   473,
     474,   475,   476,   477,  1035,  1036,  1037,  1038,  1039,  1040,
    1041,  1042,  1043,  1044,  1045,  1046,   276,   277,   478,   479,
      63,   354,   355,   777,   806,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,  2145,  2146,  2147,   492,   682,
     683,   684,   493,   494,   495,   496,  1834,   438,   534,   439,
     535,   440,   536,   537,   908,   441,   442,    64,    65,    66,
      67,    68,   356,   357,   358,   359,   360,  1047,  1048,   361,
     362,   780,  1307,   363,   405,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   406,
     860,   688,  1364,   380,   381,   408,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   409,   410,   411,
    1366,   586,   587,   224,    70,   527,   528,   225,    72,   226,
     227,    73,    74,    75,    76,    77,    78,   228,   125,   229,
     282,   973,   974,   230,   231,   232,    82,    83,    84,    85,
      86,   233,   772,  1241,   285,   500,    88,    89,   517,   518,
     918,  1264,   750,  1096,  1097,   131,    90,   501,    92,   502,
     134,   135,   136,   977,   137,   126,    94,  1145,  1146,  1147,
      95,    96,   612,  1255,   504,   614,  1257,   140,   195,   505,
     506,   197,   981,   142,  1584,  1756,  1585,  1053,  1054,  1586,
     198,   199,   200,   201,   773,  1242,   237,   238,   239,   240,
     241,   242,   691,   692,  2063,  2064,   693,   694,   695,    99,
     507,   286,   100,   101,   287,   288,   289,   698,   699,   700,
     701,   290,   702,   939,  1671,  1176,   705,   706,   707,  1177,
     709,   102,   103,   395,   104,   105,   106,   107,   108,   109,
     866,  1436,  1437,   867,   868,   396,   397,   398,   399
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1798
static const int yypact[] =
{
   40562, -1798, -1798, -1798, -1798,   316, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798,   806,   106, -1798, -1798, -1798, -1798, -1798,
   -1798,   -33,    -1,    14,   117,   201, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798,    52,  2340,  3151, -1798, -1798,
   -1798,   134, -1798,   299,   117,   588, -1798,   230,   320,   989,
   -1798,   368, -1798,  1076, -1798,   325, -1798, -1798, -1798, -1798,
   -1798,   755, -1798,  1231,   184, -1798,   471,  1972, 40150,  2581,
     227, 40869, -1798,   818,   420, -1798,   869,  1677, 43596, 11614,
   -1798, -1798, -1798, -1798, -1798, -1798, 40667, 39726,   652, -1798,
     106, -1798, -1798,   201,   201,   640,   575,   201, 31515,   117,
   -1798, -1798,   365, 31515, -1798,  2340,   994, -1798, -1798,   594,
   -1798,   629,  1263, -1798, -1798, 40971, -1798, -1798,  3243,  3097,
    1693,  1904,  1757, 24269, -1798,   628,   710,   314, 32708, 43209,
   -1798, 32839, -1798, -1798, -1798,   117, -1798,  1146,  1270,  1282,
     153, 43209, -1798, 42933, 32970, 43209, 33101, -1798, 33232, -1798,
   -1798,  1166, -1798, -1798,   225,   653,   695,   743,   760, -1798,
   -1798,  1008, -1798,   320,   369, -1798, -1798, -1798, -1798, -1798,
    1257,   823,   818,  3097,  1280,  1757, 43596, 43596,   200, -1798,
    1317,   781,   795,   653,   695,   743,   760,   324,   818,  1422,
   -1798,  7556,   800, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798,   840, -1798,   371, -1798,   805, -1798, -1798,
     825, -1798,   887,  2250, 10327,   488,   505, -1798, -1798,   507,
     561,   916,   923, -1798, -1798,   414,   955, -1798, -1798,  1000,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798,   988,  1035, -1798,
   -1798, -1798, -1798,  1065, -1798, -1798,    85,   173, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, 40356, -1798, 17805, 38983, 43809,
   17949, -1798,  1066,  1149,   817, -1798, -1798,   320, 40253, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798,   325,   471, 41481, 43596,
   41781, -1798, -1798, -1798, -1798, -1798,  1092,   640,   640, -1798,
   31515,   466, -1798, -1798, 31602, 31689, 31689,  1139, 43393, 31515,
   -1798, -1798,  1174,  1186, 43393, 31515,  1225,  1228,  1248,  1251,
    1256, 31776, -1798,  1259, -1798, 24523, -1798,   201, 26643, -1798,
   -1798, -1798, -1798,  1099, -1798,   174,  1129, -1798, -1798,   106,
   -1798, -1798, 12602, -1798,  2570, 29688, -1798,   597,  1141,  1501,
   31515,  1159,  1325,  1133,  1245,  1252,  1380,   112,  2570,  1287,
     567, -1798,  2570, -1798,  1074,  1403,  1561,  1164,  1613,  1290,
    1306,  1315,  1443,   127,  2570,   640, -1798, -1798, -1798, -1798,
    1345,   423, 43025,  1351,  1384,  2570, 12931, 26730,  2570,  2570,
   -1798, 26817, -1798, -1798, 29775, -1798, 29862, -1798,   642,   661,
    1387,  1395,  1013,  1028,  3097,  1930,  2360,   629, -1798, -1798,
    1180, -1798,   994, -1798,   994,   994,  1174,  1099, -1798, -1798,
   -1798, -1798,   668,  1029, -1798,  1501, -1798,  1561, 38172, -1798,
   24396, 42933, -1798,   307, 42657, 41881, -1798, -1798,  1424, -1798,
     117, -1798, -1798,   106, 42081, 41681, 25598, 43301, -1798, -1798,
    1196,  1394,  1394,   273, -1798,  1405, -1798, -1798, -1798,   179,
    1055,   190, -1798, -1798, 32045,  1435, -1798,  1265, -1798, -1798,
     906, -1798, -1798, -1798,  1456, 32184, 32315,   175,   211,   567,
   38757, 41073, -1798,   818,  1677, -1798, -1798, 12037, -1798, -1798,
    1469, -1798,   117, -1798, -1798, -1798,  1462, 43393, -1798,   307,
   -1798, 32446, 32577,  1472,  1475, -1798,   899, -1798,  1479, -1798,
   -1798,  2684,  1470,   623, -1798, -1798, -1798, -1798,   460,   666,
   38172,   598, -1798, 33363, 33494, -1798,   598, -1798, 33625, 33756,
     598, -1798, 33887, 34018, -1798, -1798,  3151,  3151,  3151,  3151,
    3151,  3151, 22410,   970,  1257,   823,  1180, -1798, 29949, 38983,
   -1798,  1066, 38983, -1798,  1066, -1798, -1798,  3151,  3151,   970,
   -1798, -1798,  1484,   210, -1798, -1798,  1494,  1502, 42749,  1555,
    1511,  1513, -1798, 34149, -1798, 34280,   884, -1798, 37936, 30036,
    3151, -1798,  1831,   840, -1798, -1798, -1798, -1798, -1798,   629,
    1512,   818,   660,   105,   410,  2090,  1524, -1798, 42381,  1528,
   -1798, 42473,  1537, 42565,  1539, 42841, -1798, -1798, -1798,   838,
   -1798, 31515,   117, 31515, -1798, -1798,  1546, -1798, -1798,   225,
     653,   695,   743,   760, -1798,  1548, -1798, -1798, -1798, -1798,
   -1798,   818,  1429,   781, -1798, -1798,  1563, -1798, 18093, -1798,
    1066, -1798,   152, 30123,  1549,  1572,  1575,   295, 18237,  1577,
     106,  1576,  1587, 18381,  1174,  2694,  1592,  1597,   106, -1798,
   -1798,  1099,  1588,  1599,  1605,  1430, 16064, 16509, 26904, 16653,
   40459, -1798, -1798, -1798, -1798, -1798, 18525, 18669, 18813, 18957,
   -1798, -1798, -1798,  1066, 19101, -1798, -1798, -1798, 19245, -1798,
   -1798,   201,   201,   640,   542,   117,  1434,  1598, -1798,   629,
     227, -1798,   818,  3097, 43596, 43596, 38983, -1798, -1798, 41581,
   31515,   249,  1614,   280, -1798, 24666, -1798, -1798, 30210, -1798,
   -1798, -1798, -1798, 43393,  1620, -1798, -1798, -1798, -1798, -1798,
   38289, 43393, 24809,   106, 38406, 43393, 31515,   201,   201,   201,
   31515, 24523, -1798, -1798,  9276, -1798, 13084, 13233, -1798, -1798,
   -1798, -1798,  7083,  1619,   132, 22553, -1798, -1798,   204, -1798,
     -28, -1798, 22696,  1624, -1798, 22839, -1798, -1798,  1584, -1798,
   -1798, 26991,  1589, 31515, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, 29688,   208, -1798, -1798, -1798,
   -1798, 31515, 31515, 31515, 31515, 31515, 31515, 31515,  1501,  1561,
   31515, 31515, -1798, 31515, 29688, 29688, 29688, 29688, 29688, 31515,
   31515, 13382, 29688, -1798,  1590, -1798, -1798, 27078,  1602, 31515,
   29688, 31515, 31515, 31515, 31515, 31515, 31515, 31515, 31515, 31515,
   31515, 31515, 29688, 29688, 29688, 29688, 29688, 31515, 31515, 13531,
   29688, -1798, -1798,   870,   840, 43301, -1798, -1798, 39829, 43025,
   43025, 29688, -1798, -1798, 31515, 13680, 13829, 29688, -1798, 31515,
   13978, -1798,  1622,  1623,  1625, -1798,  1627,  1629,  1633, -1798,
   -1798, -1798, -1798,   629, -1798, -1798, -1798, -1798,  1635, -1798,
   -1798, 24269, 24269, 38055,   818,   683, -1798,   349,   496,  1106,
   38172,   808,  1641,  1638, -1798, -1798, -1798,  1462,  8138, 41981,
   -1798, -1798,   106, -1798, -1798, -1798, 38874,  1642,   106, 12411,
    2490, 24936,  1596, 42181, -1798,  1647, -1798,  1066, -1798,  1066,
   -1798, -1798, -1798,  1066, -1798,  1645, -1798,  1094, -1798, -1798,
    2853,  2853,  1394,  1394, -1798,  1394,   224, -1798,  1394,  1394,
   -1798, -1798,   719, -1798,  1456,   719, -1798,  1456,   773, 30297,
    2386, 31515,   566, -1798,  1650,   629, 41175, -1798,   818,  3097,
   -1798, -1798,   835,   800, 10327, 31906,   717,   414, -1798,  1000,
    3151, -1798, -1798, -1798, -1798,   215, -1798,   223, -1798,   175,
   38757, 24269, -1798, -1798,  1654, -1798, -1798, -1798, 42933, 42933,
   31515, -1798,  1184,   106, -1798, 34411,   236, -1798,   857,   950,
   -1798, 42933,   106,   701,   106,  2021, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798,  1394, -1798, -1798, -1798, -1798,
   -1798, 39090,  1477, -1798, 22982, 43703, 23125, -1798, -1798, 16212,
   -1798, -1798, 42281, -1798, -1798,   629,  1257, -1798,   823, -1798,
     629, -1798, 29949, -1798, -1798, -1798, -1798, -1798,  1066, -1798,
    1066, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798,  1479,   252,   271,  1651, -1798, 34542, 34673,  1652,
   -1798, 34804, 34935, 35066, -1798,   288,   377,   477,  2258,  1343,
    1655,  1659,  1660, -1798,  1653,  1656,  1663,   818,   970,  1757,
     105, 41277, 30384,   660, -1798, -1798, 43117, -1798, -1798,   840,
   -1798, -1798, 43117, -1798, -1798,   840, -1798, -1798, 43117, -1798,
   -1798,   840, -1798, -1798, 43117, -1798,   840, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798,  1665,  1664, -1798,  1399,  1670,  1679,
     437, 27165, -1798, 23268, -1798, -1798, 19389,  1672,  1675, 19533,
   31515, 31515, -1798, 30471, 30558,  1686,  1696,  1698, 12245,  1699,
     106, 27252,  2752,  1478, -1798,  1769, -1798, -1798, 27339,  1711,
   -1798, -1798, -1798,  1712,  1713, 27426, 16797,   201,  1702, 31515,
   31515,   106, -1798, -1798, -1798, -1798, 22124,   111,  1404, -1798,
   31515,  1563, 19677, 19821, 19965, 20109, -1798, -1798, -1798, 20253,
   -1798, -1798, -1798, 20397, -1798, -1798,   640,   640,  1721,  1722,
   37686, 37816,   970, -1798,  1180, 38983, -1798, 38983, -1798, -1798,
    1718, 29688, -1798, 29688,   731, -1798,   175, -1798, -1798, -1798,
   -1798,  7083,  1708,  1724, 43485, 24269, 40767, 31515,  1728, -1798,
   -1798, -1798, -1798, -1798,   818,  1727,  1730,  1717,  1735, -1798,
   -1798, -1798, -1798, -1798, 38523, 27513,  1733,  1734,  1736, 31515,
    1725, 38640,  1740,   645,   187,   379,  1741,  1738,  1742, -1798,
     106, -1798, -1798, -1798, -1798, -1798, 30645,   201,   229, 39196,
   23411,  1743, -1798, 29688, -1798,   246, 39302, 23554, -1798,   247,
   39408, 23697, -1798, -1798, -1798, -1798,  1199,  1747, -1798, -1798,
   -1798, 27600,  5278, -1798, -1798,  1743, -1798, -1798, -1798, -1798,
   -1798, -1798,   597,  1074,   597,  1074,  1141,  1403,  1141,  1403,
    1501,  1561,  1501,  1561,  1501,  1561, -1798, -1798,  1159,  1164,
   -1798, -1798,  1159,  1164, -1798, -1798,  1325,  1613, -1798, -1798,
    1133,  1290, -1798, -1798,  1245,  1306,  1252,  1315,  1380,  1443,
   -1798,    91, -1798, 27687,  1744,  7784,  1745, -1798, -1798, -1798,
   -1798, -1798,  1300, -1798, -1798, -1798, 27774,  9821, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798,   597,  1074,   597,  1074,
    1141,  1403,  1141,  1403,  1501,  1561,  1501,  1561,  1501,  1561,
    1501,  1561, -1798, -1798,  1159,  1164, -1798, -1798,  1159,  1164,
   -1798, -1798,  1325,  1613, -1798, -1798,  1133,  1290, -1798, -1798,
    1245,  1306,  1252,  1315,  1380,  1443, -1798, 27861,  1753, 25686,
    1755, -1798, -1798,   106,   106, -1798, -1798,   149,  1136, -1798,
   -1798, -1798, 39936, 40043, -1798, -1798, -1798, -1798,   732, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798,   934,  3131,   683, -1798, 24269,   106, -1798,
   -1798, 24269, -1798,   275, -1798, -1798, -1798,   551,   818,  3097,
   -1798, -1798,   674,  1650,  1635,   818,  3097, -1798,  1749, -1798,
    1144,   569,   966,  3243,  1766, -1798, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798,  1490, -1798, -1798,
   -1798, -1798, -1798, 23840,  2358,   800, 10327, 21981,   756,   970,
     629, -1798,  1180, 31515, -1798,   796, -1798, -1798, -1798,  1768,
    1645,  1624,  1650,  1123, 24269,  1142,  1161, -1798, -1798, 31515,
   -1798, 35197, 35328,  1770, -1798,  2991, 43301, 43301, 43301, 43301,
   -1798, -1798, -1798, 31515,  1767, 30732, -1798,  1066, -1798, -1798,
   30819, -1798, 30906, -1798, -1798, -1798,  1488,  1477, -1798, -1798,
    1394, -1798, -1798, -1798, -1798, -1798,  1488,  1477, -1798, 30993,
    5030, -1798, -1798, -1798, -1798, -1798, 20541, -1798, -1798,    66,
   -1798, -1798,   172,  1772, -1798, 35459, 35590,   818,  1343,  1775,
   -1798, -1798, -1798, -1798, -1798, -1798,   970,   660, -1798,  1776,
    1779, -1798,  1773,  1774,  1777, -1798, -1798, 10327, -1798, -1798,
   -1798, -1798, -1798, 31515,  1782,  1223, -1798, -1798, -1798, -1798,
   -1798, 31515,   255, 39514, 23983, -1798, -1798, -1798, 20685, 22124,
   22124, -1798, -1798, -1798, 20829, 27948, 16941, 28035, 28122, 25312,
   28209, 17085, 22267,  1778,  1783, 22267, 31515, 31080,  1852, 28296,
    1713, 10511,   201, 22267,  1795, 12750, 12245, -1798,  1485, 28383,
   25773, 28470, -1798, -1798, -1798, -1798, -1798,   118,   201,  1797,
    1329, -1798, -1798, -1798, -1798, 20973, -1798,  1800,  1803,   106,
   42933, -1798, -1798, -1798, -1798, 28557,  1798, 25860,  1799, 28644,
    1801, 25947,  1802,  1805,  1811, -1798, -1798, -1798, -1798, -1798,
   -1798, 14127, -1798, -1798,  1812,  1172, -1798,  3191,  1819,  1821,
    1822,  1815,  1818, 24269,  1730, 41379,  1727, 31515, 24269, 31515,
    1826, -1798, -1798, -1798, -1798, -1798,  1820, -1798, 31167, -1798,
   -1798,  1829,  1832, 31515, 31515,  1840,  9276, -1798,   106,   106,
   31515, 14276,   106, 29949, -1798, -1798, -1798,   640, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, 14425, -1798, -1798, -1798, -1798,
   29688, 14574, 14723, 29688, 14872, 15021, -1798, -1798, -1798, 15170,
   15319, 15468, 15617, -1798, -1798, -1798,   870,  1849,   209, -1798,
   -1798, -1798,   818,   683,  1948,  1215, 24269, -1798, -1798,  1836,
     970,  1180,  1394,   970,  1635,  1856, -1798, -1798,  1854, -1798,
     261, 39620, 24126, -1798,   818,   999, -1798,   629, -1798, -1798,
    1847,  1853, -1798, -1798, -1798,  1216, -1798, -1798, -1798, -1798,
   35721,  1860, 35852, -1798,  1862, 38172, -1798,  1863, -1798, 31515,
   29949,  1566, -1798, -1798,  1566, -1798, -1798, -1798,  1566, -1798,
   -1798, 21117, 21261, -1798, -1798, -1798, 35983, -1798, 36114,   105,
     660, -1798, -1798, -1798, -1798, -1798, -1798, -1798,  1757, 28731,
   -1798, -1798,   802, -1798, -1798, -1798, -1798, 21405, -1798, -1798,
   -1798, 21549, 12245, 25026, 12245, 25026, 16360, -1798, 25455, 17229,
   -1798, -1798, 22267, 22267, 28818, 12245, 28905, 25169,  1868, 26034,
   28992,   167, 21693, -1798, 31515, -1798, 16360, -1798, 12750, 12245,
   26121, 31254,    90,  1867,    90,   185,  1864, -1798,   106, 31515,
   31515,   106, 29688, 29688, 29688, 29688, 29688, 29688, 29688, 29688,
   15766, 15915, -1798, -1798, -1798,   818,  1730,  1871, -1798, -1798,
   -1798, -1798, -1798,  1297,  1727, -1798,  1873,  1875,  1870,  1874,
    1319,  1876,  1880, 24269, 31515, 24523, -1798, -1798, -1798,  1881,
    1883,  1891,  1894, 31515,  1882,  1884,  1906,  1908, -1798,  1909,
   26208, -1798, -1798, -1798, -1798, -1798, -1798, -1798,   280, -1798,
   -1798, -1798,   280, -1798, -1798, -1798, -1798, -1798,   280, -1798,
   -1798, -1798,   280, -1798, -1798, -1798,   280, -1798, -1798, -1798,
     280, -1798, -1798, -1798,   280, -1798, -1798, -1798,   280, -1798,
   -1798, -1798, -1798,  1346, -1798, -1798,  1635, 29688, -1798, -1798,
   -1798, 31515, 31515, -1798, 36245, 36376, 36507, 36638, 36769, 43301,
   -1798, 43301, -1798, 26295, 21837, -1798, -1798, -1798, 36900, 37031,
   37162, 37293, -1798, -1798,  1977,  1978, -1798, -1798, -1798, -1798,
   12245, 31515, 31341,  1867, 17373, 17517, 26382, -1798, 16360, 25455,
   29079, 17661,   106, -1798,  1249,   428, -1798,   133,    90,  1917,
      90,   340,   680,  1923,  1332, -1798, -1798,  1727, -1798, -1798,
   -1798, -1798, -1798, -1798, -1798, -1798, -1798,  1348,  1913,  1915,
    1929, -1798, -1798, -1798, -1798,  1927,  1928, -1798, -1798, -1798,
   -1798, -1798, 29166, -1798, -1798,  1943, -1798, -1798, -1798, -1798,
   37424, 37555, -1798, -1798, 29253, -1798, -1798, 12245, 12245, 29340,
   26469, 12245, 29427, 25169,  1944, -1798, 12245, 31515, -1798, -1798,
   25455, -1798, -1798,  1936,  1946,    90,    90, 31515,    90,  1947,
      90,  1281, -1798,   219,  1394,   582, -1798,   515, -1798,  1945,
   -1798,   106, -1798, -1798, -1798, 31428, -1798, -1798, -1798, -1798,
   -1798, -1798, -1798,  1944, 12245, -1798, -1798, 29514, -1798, -1798,
     201, -1798, -1798,  1381,  1952,  1389, -1798,  1312,  1951,    90,
      90,  1953,    90, -1798, -1798, -1798, -1798,   340,   727, 29949,
   -1798, -1798, -1798, 12245,   633,  1956, -1798,  1957,  1963,    90,
   -1798,  1392,  1398, -1798,  1322,   605, -1798, 26556, -1798, 31515,
   -1798, -1798, -1798,  1401,  1964,  1965,  1966,    90, -1798, 29601,
   -1798,  1954,  1970, -1798, -1798, -1798,  1408, -1798, -1798, -1798,
    1971, -1798
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1798,  2469,    76,  9995, -1798,  1780, -1798, -1798, -1798, -1798,
   -1798, -1798,  1606,  1608, -1032, -1798, -1017,  -914,    82,    86,
    -970,  -961,  -863, -1798,  -717,  -712, -1798, -1798,  1609,  1612,
   -1798,  5663,  6413, -1798,  -186,   703,   714, -1798, -1798, -1798,
   -1798,  1617, -1798, -1798, -1798,  -664, -1797,   -84, -1798, -1798,
   -1798, -1798,  2298,  2398,  -136,  -125,   555,  -899, -1798,  -853,
   -1798,  -900, -1798,  1107,  -127,  1219,  -648,    -7,  1823,    88,
    1824,    25,     0, -1798,  1171, -1798, -1798,  9473,  5409, -1798,
    5206,  -691,  1292, -1798,  3965, -1798,  -328,   191,   328,  -139,
   -1798,   221,  -736,    97,   163,   322,   203,    38,  8965,  2465,
     971,  5716,  -808,  4905, -1798,  4761,  -231,   370,   527,   -45,
     583,   347,   380,   388,   396,   409,   532,  4516,   526,  7816,
    -756,  1025,  1383, 10589,   -72,  1122,  -140,  2319, 10708,  8505,
   -1798, -1798, -1798,  -100,   -57,   -35, -1798,  7291, -1798,  3146,
    1771,   622,  -261,  3553,  8835, -1798, 11270, -1798, -1798, -1798,
     -66,  3739, -1798, -1798,  1364,  6847,   -27, -1798, -1798,   866,
    1673,  1386,  1809,   -83,   -80, 10577, 10102,  6056,  8576,  -457,
    -132,  -450,   643,  -895,   -43,  3002, -1798, -1798, -1101, -1798,
    2519,  1618,  -612, -1244,  7374,   385,  -700,   188,    44,   740,
    1695,  -283,  -817,  -465,  -545, -1798,  -549,  -964,  -945, -1715,
    1706,  1090,   -47,  1869,  -742,   374,  -421,  -543,  -453, -1798,
    -126,  -117,  2794,  -677,    13,  -888, -1798, -1798, -1798,  2047,
   -1798,  2587,  2056,   -40,  3334,   -69,  1866,   979,   990, -1798,
   -1798, -1798,   -81,   -38, -1578,   116, -1798, -1798, -1798,   120,
   -1798,  2059,   -22,    72,  2052,  1591, -1798, -1798, -1798,  2061,
    -812,   375, -1798,  -802,   846, -1798, -1798, -1798, -1798
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1315
static const yytype_int16 yytable[] =
{
      69,  1113,  1462,  1460,   445,  1508,   306,   428,   235,   420,
    1266,   236,  1726,  1570,  1191,   521,   185,   291,   421,  1066,
     531,  1207,  1211,  1065,  1509,   725,   522,  1564,   543,  1574,
     548,   186,   552,   114,   116,   982,   538,   809,  1970,   544,
     307,   549,   209,   553,   121,  1080,  1626,   988,   986,  1461,
     976,  1428,   418,   187,  1270,   419,  1440,   130,  1289,   300,
     292,   428,   155,  1290,   147,  1296,  1441,  1855,  1300,   156,
    1297,   159,   298,  1301,  1566,  1121,  1576,   302,  1127,   308,
    1133,  1900,  1138,  1567,  1521,  1577,   634,   170,   184,   130,
    1346,   223,  1769,  1911,   117,   112,   429,   130,   447,    69,
    1306,   141,  1481,  1430,  1293,   115,    69,    69,     1,     1,
     316,  1294,  1309,   183,     1,   570,   573,   122,  1412,   401,
       1,  1912,   404,   319,   297,  2033,   118,   569,   572,   830,
    1565,  1571,  1575,     2,   810,   223,  2138,   319,   130,   130,
     145,   119,   128,   443,   858,     2,  1372,   156,   497,   510,
     429,   497,     1,   654,   529,   524,     1,   526,   571,   574,
     526,   510,   778,   539,   497,   510,   497,  1079,   497,  1551,
    1912,   555,   319,  1857,   636,   783,   182,   155,     1,   123,
     945,  1568,   426,  1578,   156,   317,   318,   296,  2068,   321,
     319,   947,   319,   130,   305,   400,  1856,  1120,  1013,  -622,
    1126,   575,  1132,  1686,  1137,  1291,   112,   659,   306,  1315,
     306,   583,   968,     1,   319,   635,  1530,   980,   788,   789,
     790,   696,  2180,   156,  1531,   591,   185,  -455,  2062,   112,
    -109,   818,   598,   170,   603,  1582,   185,  1543,   652,     1,
     726,   186,   307,   599,   307,   130,  1913,  -100,  -104,   130,
     660,   186,   703,  1587,  1914,     1,   -82,  1570,  1482,   143,
     831,  2139,   -89,   187,  1570,  2135,   830,  1287,  1570,  2140,
     300,   727,  1590,  1574,     1,   859,   194,   194,   615,  1785,
    1574,  1786,   655,   729,  1574,   645,   530,   582,   302,  -874,
     685,     1,   894,  1113,   712,  2053,  1162,   858,   714,   153,
     154,   715,  1858,  1914,  1013,  -617,   637,   784,    69,   785,
      69,   445,   946,  2069,  -459,  -459,  -459,     1,   166,  1748,
    1576,  2070,  2052,   784,   911,   819,   425,  1576,   744,  1577,
   -1039,  1576, -1039,   718,   744,   297,  1577,  1292,   791,  2011,
    1577,  1292,   969,     1,   785,   583,   792,  2181,   946,   793,
    2186,  2135,     1,  1533,   210,  2182,   784,   556,   731,   786,
     150,   347,  -109,  -881,   151,   211,   713,   731,     1,  1544,
     319,     1,     1,   731,     1,  1571,  1575,  1017,   616,  -100,
    -104,   895,  1571,  1575,   319,  1588,  1571,  1575,   -82,   936,
     938,   940,   942,     2,   -89,   110,     2,  1231,   728,     2,
    1796,   156,   864,   941,  1591,   447,   704,   274,  2186,  1797,
     708,  1114,   153,   154,   583,  2144,   583,     1,   985,   774,
    -874,   236,  1163,  1696,   130,  1700,     1,  1578,  1233,   144,
     130,  1057,   937,   319,  1578,   943,  1633,    29,  1578,   451,
       1,  1634,  -459,   156,   452,  -459,   725,  1057,   864,  1082,
     909,   539,   111,   152,   913,   603,   561,  1087,   162,  1091,
     924,   982,   414,   925,   864,   913,   932,   864,  1088,   976,
    1092,   319,  1101,   194,  2207,  1698,   743,  1702,   619,  1636,
    1944,  1102,  1642,  1316,  1318,  1320,   194,  1113,  1067,   616,
     882,  1069,   886,   153,   154,   497,   497,   156,  1607,   402,
     972,   223,   157,   562,   130,   589,   619,   999,   622,   618,
     141,  1749,  1003,  1380,  1382,  1384,   170,  1004,     1,  1683,
    1059,   497,   497,  1518,  1871,  1207,  1211,  1207,  1211,   976,
    1527,  1068,  1528,  1019,  1070,   982,  1059, -1057, -1057,   156,
    1023,    57, -1057,   497,   497,     1,  1718,   246,   497,   497,
     976,   862,   497,   497,     1,  2137,   130,   130,   130,   130,
     130,   130,   624,   130,  1736,  1629,   130,  1462,  1460,     1,
     429,  1745,     1,  1616,   834,   835,   836,   130,   130,   130,
    1317,  1319,  1321,   156,  1521,     1,  1020,  1583,   864,   526,
    2144,  1621,  1021,   497,   734,   497,   555,  1715,  1095,   583,
     130,  1570,   976,   156,   167,  -459,  -459,  -459,     1,   621,
    1381,  1383,  1385,   130,  1794,  1849,   617,  1574,  1119,   778,
     618,  1125,  1466,  1131,  1818,  1136,     1,  1819,  1021,   306,
    1440,  1440,  1150,   620,  1850, -1082,  1480,   621,   319,   623,
    1441,  1441,   141,   616,  1109,   319,   778,  1833,  2185,  1836,
     319,  1017,   315,  1838,   778,  1225,  1227,   185,   703,   703,
     703,   703,   619,   307,  1576,  1483,   153,   154,  1173,     1,
    1179,  1267,   186,  1577,   778,  1104,   562,     1,  1192,   899,
    2144,  1330,  1332,     1,  1334,  1798,  1226,  1228,  1229, -1088,
     153,   154,  2077,   625,   837,  1615,   685,   685,   685,   685,
    1513,  1618,   838,  1807,     1,   839,   320,  1619,  1149,  1394,
    1396,  1398,  1400,  1620,   156,  1219,   274,   980,   622,  1571,
    1575,   811,   148,   130,   149,  -459,  -459,  -459,  -459,   603,
       1,   191,   414,  -459,     1,  1236,  -459,   319,  2218,  1532,
      98,   812,   813,  1243,  1025,  1025,  1025,  1025,  1025,  1025,
    1248,  1258,   583,  1268,  1248,  1258,   415,   622,   449,     2,
    2209,  1236,   445,   445,   864,   194,   194,   416,   731,  1581,
     889,  1578,  1280,  1747,   618,  1331,  1333,  1101,  1335,  1570,
    -460,  -460,  -460,  1216,  1217,   557,  1102,  1111,  1303,   890,
     153,   154,  1310,   621,   900,  1574,  1811,  1022,  1112,     1,
     901,  1812,  1802,  1395,  1397,  1399,  1401,   319,  2148,     1,
     903,   112,   704,   704,   704,   704,   708,   708,   708,   708,
       1,   599,   112,  1795,  -921,   153,   154,   558,   196,  1273,
    1274,  1275,  1553,   906,  1370,   450,   565,   113,  1375,    98,
      -8,  1139,  1576,     1,  1526, -1082,   309,    98,   711,   623,
     420,  1577,   733,  1607,  -459,  2206,   447,   447,   743,   421,
    1791,   733,   445,  1435,   156,  1438,  1140,   733,   864,   864,
     864,  1501,  1502,     1,  1503,   559,  1545,  1505,  1506,  1541,
     163,  1535,  1536,  1816, -1082,  1141,  1825,     1,   623,  -750,
    1542,  -750,   560,  1517,   243,   244,   419,  1571,  1575,  -921,
    -921,   443,  1463,   223,  -921,  1818,  1819,  1019,  -460,   156,
    1023,  -921,     2,   578,  1142,  1143,    35,   170,  1473,   603,
     153,   154,  1192,  1822,  1350,  1024,   603,   556,  1488,  1490,
    2043,  1492,   588,   864,  1469,  -921,  -921,     1,   592,  2032,
    1021,   191,    56,  1589,  1592,  -216,  1448,    46,    47,  1578,
      35,   721,  1416,  -921,  1556,  -921,   447,  1595,  1754,   593,
     243,   244,  1875,  1879,   153,   154,  1144,   428,  1596,     1,
     130,  1523,   156,     1,  1891,   141,   223,   958,   959,   130,
      35,    46,    47,  1100,  1525,  1609,  1860,   130,  1546,   130,
    1529,  1354,     1,  1547,  1610,  1433,  1434,  1557,     2,   156,
     972,   443,     1,     1,  1964,  1322,  1324,   128,   539,   539,
    1065,    46,    47,   526,   141,   497,   526,  1937,  1093,  1420,
     594,   539,  1552,   156,  1554,  1921,  2067,   532,   615,   976,
    1010,   545,     1,  1358,   141,  1386,  1388,  1854,   196,   960,
    -216,  1853,  -890,  -890,   626,  1338,  1342,  -890,   724,   982,
     309,   627,   130,  2105,  -890,  1755,   429,    29,   153,   154,
    -216,  1424,  -265,  -265,  -265,   429,  -216,  1059,   785,   976,
     243,   244,   976,  1404,  1408,  1943,   243,   244,  -890,  -890,
    1950,  1548,   629,   526,   526,   521,  1549,   497,   497,  -923,
    -923,   497,   497,   497,  1064,   156,   522,    57,   130,   130,
     785,  -461,  -461,  -461,  -924,  -924,   445,   778,   130,     1,
     130,   223,   583,   153,   154,   631,   864,  -216,   703,   156,
    1719,   703,   864,   153,   154,   156,  2020,    57,   864,  1720,
    2112,   156,  2113,   143,   864,  1277,   156,  -923,  1278,     1,
     561,   112,   426,   721,  1326,  1328,   414,   525,  2013,     1,
     156,  1356,  -924,   153,   154,  -216,   685,  1285,   703,   685,
     902,  -216,   632,   785,   703,   703,   703,   703,  1173,     1,
    1179,   820,   821,  1347,  1390,  1392,   848,   849,  1668,  1422,
    2141,  1860,  2143,     1,  1323,  1325,  -265,  1692,  1612,  1693,
    -265,  1681,   633,  1956,     2,   920,   685,  1310,   841,   710,
     447,  1413,   685,   685,   685,   685,  1058,  1351,     2,  1061,
     160,  2049,   161,  2090,  1387,  1389,  1355,   128,   842,   843,
     497,   497,   130,   730,   130,  1357,  1139,  1298,   110,  -461,
     153,   154,  -216,   782,   864,  1417,   156,  1467,  -216,  1359,
     785,   864,   243,   244,  1421,   443,   223,  1607,  2173,  1824,
    2175,  1140,  2177,  1423,  2072,   901,   243,   244,  -909,  1677,
     153,   154,   733,   785,  1730,    35,   743,  1425,  1826,  1796,
    1141,  1730,   704,   826,  1021,   704,   708,    35,  1806,   708,
     156,   567,   814,   815,   822,   823,   425,  1827,  1100,   850,
     851,  2201,  2202,  1021,  2204,  1468,    46,    47,  1934,  1142,
    1143,   752,  2036,  1477,   901,  2087,  2035,    57,    46,    47,
    1704,  2213,   704,   753,  1491,  1539,   708,  1308,   704,   704,
     704,   704,   708,   708,   708,   708,   934,  1764,   445,  2226,
     274,  1765,   445,  -909,  -909,   805,   952,   953,  -909,   824,
     825,  2012,  2023,  1327,  1329,  -909,     1,   901,   901,   832,
     976,   976,   756,   840,   751,   757,    31,    32,   954,  1757,
     755,    35,   955,  1308,   956,   164,  1223,   165,    41,  -909,
    -909,     2,   721,  1391,  1393,   758,   871,  2134,   759,   877,
     128,  2135,  2129,   760,  2132,  2136,   764,  -909,  -909,  -909,
     210,   827,    46,    47,  -910,   445,   829,  1445,   957,   828,
    1447,   211,  1139,  1450,  -630,  1452,  -630,  1339,  1343,  2178,
   -1034,   568, -1034,  2135,   445,   833,  -629,  2179,  -629,    31,
      32,  1854,   447,  2079,    35,  1853,   447,  1140,  1776,   901,
     854,    41,  1765,  1783,  1784,  1405,  1409,  1787,   156,   883,
    2198,   887,   864,   864,  2135,  2084,  1141,   576,  2199,   577,
    2216,   901,   855,  2169,  2135,    46,    47,  1917,  2217,   857,
    2150,  1918,   856,   156,  2151,     1,   894,  1463,  1554,   724,
     598,   443,  2104,   861,  2152,  1142,  1143,  1799,   901,   130,
     901,   599,  1681,  1599,  1854,   869,   130,  2188,  1853,   447,
       2,  1808,   156,   130,  1687,  1688,  1689,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,   447,  2195,
    1788,   816,   817,  2135,   130,   891,  1815,  2197,   870,   130,
    2214,  2135,   130,   892,  2135,   156,  2215,  1624,   274,  2222,
    2135,  1625,  1847,  2135,   443,   944,  2230,   426,    31,    32,
    2135,   497,   497,    35,   844,   845,   864,   864,   864,   864,
      41,   922,   580,  2036,   577,   895,  1081,  2035,     1,  1154,
     615,   577,   721,  1059,   785,  2036,  1196,   951,  1220,  2035,
     149,   846,   847,  -459,    46,    47,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,   445,  1302,   961,     1,  1064,   445,
    1309,  1369,     1,     1,  1001,   497,   497,  1008,   130,  1946,
    1009,   703,   703,  1374,  1016,     1,   130,  1561,  1947,  1562,
    2192,  1013,   785,   703,  1663,  -459,  -459,   603,  1559,   785,
    1560,  1904,  1223,  1075,  1105,  -459,  1710,   852,   853,  1714,
    -459,  -459,  -459,  1076,  -459,  -459,  -459,  -459,  -459,   685,
     685,  1077,  1842,   721,  1845,  1083,  1843,  1084,  1846,  1173,
     211,   685,  1173,  1497,  1499,  1173,  1116,   445,  1854,  1668,
    1122,  1868,  1853,  1173,  1498,  1500,  1173,  1072,  1074,  1128,
    2036,  1134,  -890,  -890,  2035,  1202,  1204,  -890,   447,  1152,
       1,   425,  1153,   447,  -890,  1159,  1203,  1205,  1157,  1192,
     539,  -459,  -459,  1155,  2024,   721,  2027,   311,   314,  1160,
     445,  -459,  1161,  1872,  1178,  2025,  1180,  2028,  -890,  -890,
    -459,  -459,  -459,  -459,  -459,  1442,  1443,  1181,  1193,  1189,
    2038,  2015,  2040,   443,  1190,   223,  1447,  1057,   443,  1194,
     785,  2039,  1221,  2041,  1901,  1195,   778,   778,   778,   778,
     778,   778,   778,   778,  1232,  1245,  1280,  1286,  1965,  1966,
    1915,   447,  1969,    31,    32,   704,   704,  1298,    35,   708,
     708,  1453,  1454,  1471,  1455,    41,  1456,   704,  1457,    31,
      32,   708,  1458,   416,    35,  1470,  1487,  1495,  1496,  1534,
      62,    41,  1514,  1600,  -742,  -745,  1435,  1601,  1602,    46,
      47,  1623,  1603,  1622,   447,  1604,   443,   884,  1627,   888,
     130,   130,  1605,   130,    57,    46,    47,  1628,  1639,   731,
     731,  1640,   731,   731,   445,   156,  1059,   731,   731,   731,
     731,   431,  1655,  1656,   120,  1657,  1659,  2190,  1664,  1678,
     497,   778,   497,    31,    32,   864,  1711,  -880,    35,  -880,
    -880,  1672,  1673,  1674,    62,    41,  1690,   451,  1694,  1599,
     703,   158,  1712,  1723,  1725,  1727,   497,  1246,   497,   130,
    1728,  1738,  1739,  1743,  1740,  1691,  1751,  1061,    62,    46,
      47,    62,  1746,  1750,  1752,  1766,  1759,  1805,   275,    62,
    1772,  1775,  1173,  1173,  1173,  1173,    62,    62,   685,  1780,
    2110,  1782,  1173,  1173,  1809,  1173,  1823,  1173,  1839,    62,
    1830,  2111,   403,  1861,  1862,  -748,  -880,  1863,   447,  1173,
    1870,  1898,  1864,  1865,  1892,    62,  1866,  -880,  1192,  1893,
     514,  1681,  1902,   437,  2191,  1916,  1052,  1919,   437,   275,
    1920,   437,   514,  1930,  1923,  1925,   514,  1927,  1929,  1931,
    1933,   275,  -880,    62,   437,   275,   437,  1938,   437,  1939,
    1940,  1953,  -880,   443,  1941,   583,   143,  1942,  1954,  -231,
     731,   731,   731,   731,   731,   731,   731,   731,  1957,   414,
    2014,  1958,  -880,  -880,  -880,     1,   275,   275,  1963,  2010,
      31,    32,  1106,  2021,  2065,    35,  2065,  2017,  2018,  2022,
    2026,   437,    41,  2029,  2031,  2051,  1511,  2066,  2071,  2078,
       2,  2080,  1867,  2081,   704,   590,    31,    32,   708,  2082,
    2097,    35,  2098,  2083,    62,  2085,    46,    47,    41,  2086,
    2091,   703,  2092,   703,   497,   497,   497,   497,   497,   864,
    2093,   864,   433,  2094,  2099,  1537,  2100,  2101,   497,   497,
     497,   497,    46,    47,  2117,  2118,  1158,  2142,    31,    32,
    1173,  2149,  2153,    35,  2154,   731,   649,  2155,   896,   685,
      41,   685,  2133,  2183,  2184,   275,  2156,  2157,   275,   275,
     681,  1192,  1681,  2159,  2165,  2170,  2171,  2176,    62,  2187,
    2196,  2200,  2228,  2203,    46,    47,  2210,  2211,    62,   275,
      62,  1115,   703,  2212,  2223,  2224,  2225,    31,    32,   748,
    2229,  2231,    35,  2205,  1837,   748,   168,  1244,   275,    41,
     497,   497,  1064,   992,   275,   993,   994,  1173,  1173,   995,
    1459,  1173,  1223,  1173,   998,   437,  1173,  1504,  1550,  1373,
     685,   716,   717,    46,    47,  1540,  1813,  1613,   929,  1052,
    2065,  1271,  2065,   754,  1012,  1681,  1052,  1192,  2172,  1052,
     921,  1192,  1555,   310,   653,   299,   697,  1447,   301,   313,
     303,  2009,  1691,     0,  1173,  1061,    31,    32,     0,     0,
       0,    35,     0,     0,     0,   704,     0,   704,    41,   708,
       0,   708,    62,     0,     0,     0,     0,  1192,  1681,  1653,
       0,     0,     0,  1173,   437,     0,   437,     0,     0,     0,
       0,     0,    46,    47,     0,  1192,     0,  2065,  2065,     0,
    2065,     0,  2065,     0,     0,     0,     0, -1056, -1056,     0,
    2030,     0, -1056,     0,     0,   916,     0,     0,    62,     0,
     437,    62,     0,     0,   275,    62,   916,     0,     0,     0,
     923,     0,  2194,     0,    62,   275,   704,    62,     0,     0,
     708,  2065,  2065,     1,  2065,     0,     0,     0,     0,     0,
       0,     1,  1026,  1027,  1028,  1029,  1030,  1031,     0,     0,
       0,  2065,  1721,     0,     0,   437,   437,     0,     2,  1064,
      62,    62,     0,  1071,  1073,     0,     2,   437,  1007,  2065,
       0,  1972,  1002,     0,  1741,   128,  1447,   275,     0,  1452,
       0,   437,   437,  1978,  1982,     0,  1988,  1992,     0,     0,
       0,  1996,  2000,  2004,  2008,     0,     0,     0,     0,    71,
      62,     0,     0,   437,   437,     0,    31,    32,   437,   437,
       0,    35,   437,   437,   422,   423,     0,     0,    41,    35,
       0,     0,   681,     0,     0,     0,    41,     0,     0,   275,
       0,     0,   275,     0,  1512,     0,     0,     0,     0,     0,
       0,     1,    46,    47,     0,     0,  1064,     0,    62,     0,
      46,    47,     0,   437,     0,   437,     0,  1064,    62,   437,
       0,     0,    56,     0,   595,   598,     2,    21,    22,     1,
       0,     0,     0,  1538,     0,   128,   599,     0,    62,     0,
       0,    62,     0,    62,     0,    62,     0,    71,  1052,  1052,
    1052,     0,    62,     0,     2,     0,    31,    32,    71,     0,
       0,    35,     0,   128,     0,    71,    71,     0,    41,     0,
       0,     0,     0,     0,    31,    32,    31,    32,     0,    35,
       0,    35,     0,  1691,  1061,     0,    41,     0,    41,     0,
       0,     0,    46,    47,   733,   733,   733,   733,   733,   733,
     733,   733,    31,    32,    56,     0,     0,    35,   512,    59,
      46,    47,    46,    47,    41,     0,   681,   681,   681,   681,
     512,     0,    56,     0,   512,    57,     0,     0,   897,     0,
       0,     0,     0,     0,   971,  1614,  1064,     0,    46,    47,
       0,     0,     0,     0,   275,   275,   275,     0,     0,    62,
      56,     0,     0,    57,  1510,   437,     0,  1052,     0,     0,
       0,  1252,  1262,   275,     0,  1252,  1262,  -971,     0,     0,
     275,   275,   437,     0,   275,   275,     0,    21,    22,     0,
       0,   437,     0,     0,    62,     0,     0,  1654,  1820,   733,
       0,     0,    62,     0,     0,   681,     0,   180,     0,  1064,
       0,     0,   681,     0,  1828,   681,    31,    32,    59,     0,
       0,    35,     0,     0,     0,    59,    59,     0,    41,     0,
       0,     0,     0,   379,     1,     0,     0,     0,   794,   795,
     796,   797,   798,   799,   800,   801,   802,   803,     0,     0,
       0,     0,    46,    47,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,    56,   247,     0,    71,   202,   203,
     204,   205,   206,     0,     0,     0,     0,    71,  1064,    71,
    1722,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1064,     0,     0,     0,     0,    62,     0,     0,    62,    62,
      62,     0,  1742,  1052,  1052,     0,     0,    31,    32,     0,
    1052,  1052,    35,     0,  1052,  1052,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   437,   437,    62,     0,  1014,     0,  -645,     0,  1476,
      62,     0,     0,    46,    47,     0,     0,     0,   275,    62,
    1476,   804,     0,   601,     0,    56,    62,     0,    57,   275,
       0,   437,  -645,    62,     0,  1064,     0,     0,     0,     0,
       0,  -645,  -645,  -645,  -645,  -645,     0,     0,     0,     0,
       0,     0,     0,  1064,     0,     0,     0,     0,     0,     0,
       0,    21,    22,     0,     0,  1064,     0,     0,     0,     0,
       0,     0,  1948,     0,  1951,   687,    62,     0,     0,     0,
    -645,  -645,     0,     0,    62,  -645,     0,   180,  1959,  1961,
      31,    32,  -645,   512,     0,    35,     0,   180,     0,    59,
      62,   437,    41,     0,   512,     0,     0,     0,    62,    62,
       0,     0,     0,   963,   966,   437,  -645,  -645,     0,    21,
      22,    62,     0,     0,     0,     0,    46,    47,  -645,   690,
       0,  -645,     0,   781,  1015,     0,  1013,  -645,     0,   963,
     966,  1187,     0,   649,   681,   275,   681,     0,    31,    32,
       0,     0,   275,    35,     0,     0,   512,     0,     0,     0,
      41,   963,   966,     0,     0,     0,   963,   966,     0,     0,
     963,   966,     0,     0,   322,     0,     1,   323,   112,     0,
       0,     0,     0,     0,    46,    47,     0,   437,   437,     0,
       0,   437,   437,   437,     0,   657,   661,  1052,     0,  1662,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    62,   437,   964,   967,     0,    62,     0,     0,     0,
       0,     0,    62,     0,     0,     0,  1821,     0,    62,     0,
       0,     0,     0,     0,    62,     0,     0,   601,     0,   964,
     967,   327,  1829,     0,     0,     0,   328,   329,     0,     0,
       0,     0,     0,   681,     0,     0,   681,     0,     0,   681,
     332,   964,   967,     0,     0,     0,   964,   967,     0,     0,
     964,   967,     0,   333,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,     0,     0,     0,     0,     0,   601,
       0,     0,     0,   342,     0,     0,   681,     0,     0,  2088,
     738,     0,   681,   681,   681,   681,     0,     0,  2095,   935,
     347,   348,  1831,     0,  -634,     0,     0,  1052,  1052,     0,
     437,   437,    93,     0,     0,   275,     0,   275,     0,   601,
       0,     0,     0,     0,    62,   649,     0,     0,     0,  -634,
       0,    62,     0,     0,   275,   437,    62,     0,  -634,  -634,
    -634,  -634,  -634,  1063,     0,  1734,     0,     0,     0,     0,
       0,     0,  1734,     0,   275,  1011,  2106,  2108,    71,     0,
       0,   275,     0,     0,     0,     0,     0,     0,     0,   138,
       0,     0,     0,     0,     0,     0,     0,  -634,  -634,   275,
     681,     0,  -634,     0,     0,     0,   275,   681,     0,  -634,
     275,   681,     0,     0,     0,     0,     0,     0,     0,   171,
     192,   208,     0,     0,     0,     0,  1148,     0,     0,   249,
       1,    93,     0,  -634,  -634,     0,     0,     0,    93,    93,
    1949,     0,  1952,     0,     0,  -634,     0,     0,  -634,     0,
       0,  1832,     0,  1013,  -634,     2,  1960,  1962,     0,     0,
       0,     0,     0,   687,   128,     0,     0,     0,     0,     0,
     208,   430,   432,   434,   435,     0,    80,     0,     0,     0,
     503,     0,     0,   503,     1,     0,   657,     0,     0,   657,
       0,   687,   687,   687,   687,     0,   503,     0,   503,     0,
     503,     0,     0,    31,    32,  1052,  1052,     0,    35,     2,
       0,     0,     0,     0,     0,    41,     0,  1174,   128,     0,
       0,     0,     0,     0,     0,   566,   432,   434,   180,     0,
       0,     0,     0,     0,  1235,     0,     0,   422,   423,    46,
      47,     0,    35,     0,     0,   690,   690,   690,   690,    41,
       0,  1272,    62,    62,    57,  1276,     0,    31,    32,     0,
    1235,     0,    35,  1235,   189,   596,   611,   512,     0,    41,
       0,     0,     0,    46,    47,    80,     1,   437,   512,     0,
       0,   437,    80,    80,     0,    56,   781,     0,   903,     0,
       0,     0,     0,    46,    47,     0,     0,   422,   423,   599,
    1314,     2,    35,     0,     0,    56,     0,     0,    57,    41,
     128,     0,     0,   657,   661,  1208,  1212,   651,     0,     0,
       0,     0,     0,   681,     0,     0,    62,  1368,     0,     0,
     192,     0,   781,    46,    47,  1379,     0,     0,     0,     0,
     722,     0,    93,   657,   437,    56,     0,     0,  1246,   422,
     423,   437,   437,     0,    35,  1432,    62,    62,    62,    62,
       0,    41,     0,     0,   601,     0,  1314,  2089,     0,  1446,
       0,     0,  1379,     0,  1451,     0,  2096,     0,     0,     0,
       0,     0,     0,     0,     0,    46,    47,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    56,     0,     0,
      57,     0,     0,     0,     0,   437,   437,     0,     0,   601,
     607,     0,     0,     0,     0,   963,   966,     0,   601,   963,
     966,     0,     0,     0,     0,   601,     0,    62,     0,     0,
       0,     0,   601,     0,  2107,  2109,     0,     0,     0,     0,
       0,     0,     0,   275,   681,     0,     0,     0,     0,   681,
     681,     0,     0,     0,     0,     0,   430,   432,   434,     0,
       0,     0,   681,     0,     0,   681,     0,     0,     0,     0,
       0,     0,     0,   681,   189,     0,     0,     0,     0,     0,
     904,     0,     0,   601,   189,     0,    80,   503,     0,     0,
       0,     0,  1175,     0,     0,     0,     0,     0,   138,   601,
      62,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   964,   967,     0,     0,   964,
     967,   770,  1206,  1210,     0,     0,     0,   503,   503,     0,
       0,  1524,   978,   437,     0,    62,   989,     0,   437,   503,
       0,     0,     0,     0,     0,     0,     0,     0,   171,     0,
       0,     0,     0,   503,   503,     0,    62,  1063,     0,     0,
       0,   247,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   904,     0,     0,   503,   503,     0,     0,     0,
     503,   503,     0,    81,   503,   503,     0,     0,   208,   208,
     208,   208,   208,   208,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   437,     0,     0,   208,
     208,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   275,   681,     0,   607,   503,     0,   503,     0,     0,
    1098,     0,  1107,     0,     0,     0,     0,     0,     0,     0,
     437,     0,   437,     0,     0,    62,     0,   434,     0,     0,
       0,   687,   658,   662,   687,     0,     0,     0,     0,     0,
       0,     0,     0,   687,     0,     0,   437,     0,   437,     0,
       0,    81,     0,     0,     0,     0,   607,     0,     0,     0,
       0,     0,    81,     0,  1679,  1680,     0,     0,     0,    81,
      81,   687,     0,     0,     0,  1446,     0,   687,   687,   687,
     687,     0,   681,   681,     0,   690,     0,     0,   690,     0,
       0,     0,     0,     0,     0,     0,   607,  1174,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   515,  1703,     0,     0,     0,     0,     0,     0,
    1705,     0,     0,     0,   515,   690,     0,     0,   515,     0,
       0,   690,   690,   690,   690,  1224,     0,     0,     0,     0,
       0,   722,     0,   437,     0,   437,     0,     0,     0,    87,
       0,     0,     0,  1637,     0,     0,  1643,     0,     0,     0,
       0,     0,  1254,     0,     0,     0,  1254,     0,  1761,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   904,     0,     0,     0,     0,     0,
       0,     0,     0,  1684,     0,     0,     0,     0,     0,  1208,
    1212,  1208,  1212,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   437,   437,   437,   437,   437,    62,
       0,    62,   657,     0,   657,     0,     0,     0,   437,   437,
     437,   437,     0,     0,     0,     0,     0,    87,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    87,   963,
     966,     0,     0,     0,     0,    87,    87,     0,     0,     0,
       0,    81,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    81,     0,    81,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   189,     0,     0,     0,     0,
       0,  1239,     0,     0,     0,     0,     0,     0,   516,     0,
     437,   437,     0,   963,   966,     0,     0,     0,   770,     0,
     516,     0,     0,   658,   516,  1464,   658,  1239,     0,     0,
    1239,     0,   904,     0,     0,     0,     0,     0,  1283,   171,
     904,  1478,     0,     0,     0,     0,     0,     0,  1485,     0,
       0,   904,     0,  1493,     0,     0,     0,     0,     0,   964,
     967,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1635,     0,     0,  1641,     0,     0,     0,     0,     0,     0,
       0,     0,  1658,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   138,     0,     0,     0,     0,     0,     0,     0,
       0,  1522,     0,     0,     0,   601,   611,     0,     0,     0,
    1682,     0,   138,   964,   967,     0,  1206,  1210,  1206,  1210,
       0,     0,   978,     0,     0,     0,     0,   515,     0,     0,
       0,   607,     0,     0,     0,     0,     0,   503,   515,     0,
    1063,     0,     0,     0,     0,     0,     0,   432,     0,     0,
     658,   662,  1209,  1213,     0,     0,     0,    87,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    87,     0,    87,
       0,  1063,     0,     0,   978,     0,   607,     0,     0,     0,
     658,     0,     0,     0,     0,   607,     0,     0,     0,     0,
     515,     0,   607,     0,     0,     0,     0,   770,     0,   607,
       0,     0,     0,   364,     0,     0,   601,     0,     0,   503,
     503,     0,     0,   503,   503,   503,  1446,     0,     0,     0,
    1597,   430,     0,     0,   687,   687,     0,     0,   444,     0,
       0,   434,     0,     0,   687,     0,   687,   687,     0,     0,
     687,     0,     0,     0,     0,     0,     0,     0,   687,     0,
     607,   687,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   607,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   690,   690,
       0,     0,     0,     0,     0,     0,     0,     0,  1174,     0,
    1174,   690,     0,     0,   690,     0,   444,     0,     0,     0,
       0,     0,   690,     0,     0,  1174,     0,     0,     0,     0,
       0,     0,     0,   917,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1063,   917,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1967,     0,     0,  1063,     0,
       0,     0,   503,   503,     0,     0,  1876,  1880,     0,     0,
    1761,     0,     0,     0,     0,  1446,     0,     0,  1451,  1637,
       0,     0,  1643,   904,     0,     0,   904,     0,  1717,     0,
    1684,     0,     0,     0,     0,     0,   917,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1254,     0,     0,     0,
       0,     0,     0,  1254,     0,     0,     0,     0,     0,     0,
       0,     0,    81,     0,     0,   444,     0,     0,     0,   736,
     739,   741,     0,     0,   444,     0,     0,     0,     0,     0,
     444,     0,     0,     0,   601,  1063,   762,     0,     0,     0,
       0,     0,     0,   364,     0,     0,  1063,     0,     0,     0,
       0,     0,   963,   966,     0,   963,   966,     0,     0,     0,
     444,     0,     0,     0,     0,   444,   963,   966,   963,   966,
       0,     0,     0,     0,     0,     0,     0,   687,   687,   687,
     687,     0,     0,   687,     0,     0,     0,   687,   687,     0,
     687,     0,   687,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   687,     0,     0,     0,     0,   444,
       0,   444,     0,     0,  2073,  2074,     0,  1708,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1174,  1174,  1174,  1174,     0,     0,  1174,   963,   966,
       0,   690,   690,     0,  1174,   444,  1174,     0,     0,     0,
       0,     0,   964,   967,     0,   964,   967,     0,  1174,     0,
       0,     0,     0,  1874,  1878,  1063,   964,   967,   964,   967,
       0,     0,     0,  1887,     0,  1890,  1635,     0,     0,  1641,
       0,     0,     0,     0,     0,     0,     0,  1682,     0,     0,
    1903,     0,     0,     0,     0,     0,  1792,     0,    87,     0,
       0,   515,     0,     0,     0,     0,     0,     0,     0,  1876,
    1880,  1801,   515,     0,     0,     0,     0,     0,   430,     0,
    1638,     0,     0,  1644,     0,   208,     0,     0,  1063,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   964,   967,
       0,     0,     0,     0,     0,   687,  1814,     0,   611,     0,
       0,     0,     0,     0,   687,     0,   687,   444,     0,     0,
    1685,     0,     0,     0,     0,     0,  1209,  1213,  1209,  1213,
       0,     0,     0,   503,   503,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   658,
       0,   658,     0,     0,   444,     0,     0,  1063,     0,  1174,
       0,     0,     0,     0,     0,     0,     0,     0,  1174,  1063,
    1174,     0,   687,   687,     0,     0,   687,     0,   687,     0,
       0,   687,     0,     0,     0,   687,   364,   503,   503,     0,
     430,     0,  2174,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   611,
    1063,     0,     0,     0,     0,     0,     0,     0,   444,   687,
       0,     0,     0,     0,   394,     0,  1174,  1174,     0,     0,
    1174,     0,  1174,     0,     0,  1174,     0,     0,     0,  1174,
       0,     0,     0,     0,  1063,     0,     0,   917,   687,     0,
       0,     0,   607,     0,     0,     0,     0,     0,   917,     0,
       0,     0,  1063,     0,  2221,     0,  2044,  2045,  2046,  2047,
       0,     0,  2048,  1174,  1063,     0,  1874,  1878,     0,  1887,
       0,  1890,     0,     0,     0,   444,     0,     0,     0,     0,
       0,     0,     0,  2057,     0,     0,     0,     0,     0,     0,
       0,     0,  1174,     0,     0,     0,     0,     0,     0,  1935,
       0,   364,     0,     0,     0,   364,     0,   585,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     444,     0,     0,     0,     0,     0,     0,   444,     0,     0,
     444,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   607,     0,     0,     0,     0,     0,     0,
     364,     0,     0,     0,     0,     0,   444,   444,   444,   444,
     444,   444,   444,     0,     0,   444,   444,     0,   444,   444,
     444,   444,   444,   444,   444,   444,     0,   364,     0,     0,
       0,     0,     0,     0,     0,   364,   444,   444,   444,   444,
     444,   444,   444,   444,   444,   444,   444,   444,   444,   444,
     444,   444,   444,   444,     0,   364,     0,     0,     0,     0,
       0,     0,   503,     0,   503,     0,     0,   904,     0,     0,
       0,     0,     0,     0,  2048,     0,     0,     0,     0,     0,
       0,     0,     0,  2128,     0,  2131,     0,     0,   503,     0,
     503,     0,     0,     0,   394,     0,   444,   444,     0,     0,
     434,     0,     0,     0,     0,     0,     0,     0,     0,   382,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   770,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   446,     0,     0,     0,     0,     0,
       0,  2161,  2162,     0,     0,  2128,     0,  2131,     0,     0,
    2166,     0,     0,     0,  2168,     0,     0,     0,     0,     0,
     585,     0,   585,     0,   444,     0,   444,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2168,     0,
       0,     0,     0,     0,     0,     0,   444,     0,     0,     0,
       0,     0,   446,  1877,  1881,   444,     0,     0,     0,     0,
       0,   607,     0,     0,     0,     0,   662,  2208,     0,   662,
       0,     0,     0,     0,     0,     0,     0,   662,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   444,
       0,   444,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   503,   503,   503,   503,
     503,  -881,     0,     0,  -881,  -881,  -881,     0,  -881,  -881,
     503,   503,   503,   503,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   499,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   499,
       0,   499,     0,   499,     0,     0,     0,   444,  1051,     0,
       0,   446,     0,     0,     0,   737,   740,   742,     0,     0,
     446,     0,     0,     0,     0,     0,   446,     0,  -881,     0,
       0,   770,   763,  -881,  -881,  -881,     0,     0,     0,   382,
       0,     0,   503,   503,     0,   585,  -881,     0,   444,     0,
       0,     0,     0,     0,     0,     0,   446,     0,     0,   444,
    -881,   446,     0,     0,  -881,  -881,  -881,  -881,  -881,  -881,
    -881,  -881,     0,     0,     0,     0,     0,   394,     0,     0,
    -881,  -881,     0,     0,   364,   364,     0,     0,     0,  -881,
    -881,     0,  -881,  -881,  -881,     0,     0,  -881,  -881,     0,
    -881,  -881,  -881,  -881,     0,   446,     0,   446,     0,   585,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     444,   446,   444,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   662,   662,     0,     0,
       0,     0,     0,     0,   444,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   444,     0,     0,     0,   444,     0,     0,   364,     0,
       0,     0,   444,     0,     0,     0,   444,     0,     0,     0,
       0,     0,   394,     0,     0,     0,   394,     0,     0,   322,
       0,     1,   323,   112,   324,     0,   325,   326,     0,     0,
       0,  1051,     0,     0,     0,     0,     0,     0,  1051,     0,
       0,  1051,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   394,     0,   446,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,     0,   394,     0,
       0,   328,   329,   330,   498,     0,   394,   498,     0,     0,
     446,     0,     0,     0,   331,   332,     0,     0,     0,     0,
     498,     0,   498,     0,   498,     0,   394,     0,   333,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
       0,     0,   382,     0,     0,     0,     0,     0,   342,   343,
     499,   499,   344,     0,     0,   345,   878,   346,     0,     0,
     879,     0,     0,     0,     0,   347,   348,  1768,   349,   350,
     351,   352,     0,     0,   446,     0,   499,   499,     0,     0,
       0,     0,   444,     0,     0,     0,   444,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   499,   499,
       0,     0,     0,   499,   499,     0,     0,   499,   499,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   444,     0,
       0,     0,     0,     0,     0,  1051,     0,   585,   444,     0,
       0,   446,     0,     0,     0,     0,   686,     0,   499,   444,
     499,     0,     0,     0,   444,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   444,     0,
     364,   382,     0,     0,     0,   444,   585,   444,     0,     0,
       0,     0,     0,     0,     0,     0,   446,     0,     0,     0,
       0,     0,     0,   446,   444,     0,   446,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1051,     0,  1051,     0,     0,     0,   382,     0,     0,     0,
       0,     0,   446,   446,   446,   446,   446,   446,   446,     0,
       0,   446,   446,     0,   446,   446,   446,   446,   446,   446,
     446,   446,     0,   382,     0,     0,     0,     0,     0,   444,
       0,   382,   446,   446,   446,   446,   446,   446,   446,   446,
     446,   446,   446,   446,   446,   446,   446,   446,   446,   446,
       0,   382,     0,     0,     0,     0,     0,     0,   585,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   446,   446,     0,     0,     0,     0,     0,  1051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     585,     0,     0,     0,     0,     0,     0,     0,   444,     0,
       0,     0,   444,   444,   444,     0,     0,     0,     0,     0,
       0,   498,   498,   364,     0,   394,   394,     0,   444,   444,
       0,     0,     0,     0,     0,   364,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   498,   498,     0,
     446,     0,   446,     0,     0,     0,   444,   444,     0,   444,
     444,     0,     0,     0,   444,   444,   444,   444,     0,   498,
     498,     0,     0,     0,   498,   498,     0,     0,   498,   498,
       0,   444,   446,   585,     0,     0,     0,     0,  1049,     0,
       0,   446,     0,     0,   808,     0,     0,   444,     0,     0,
       0,     0,     0,     0,     0,   585,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   498,
       0,   498,     0,     0,   444,   446,  1051,   446,     0,   394,
       0,   480,     0,  1051,   480,     0,     0,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   480,     0,   480,
       0,   480,     0,     0,     0,     0,     0,     0,     0,   407,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   499,   499,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   446,   686,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   364,   364,     0,   444,   444,   444,
     444,   444,   444,   444,   444,     0,     0,     0,     0,     0,
       0,     0,   686,   686,   686,   686,     0,     0,     0,     0,
       0,     0,     0,     0,   446,     0,     0,     0,   444,   444,
     499,     0,     0,     0,     0,   446,     0,     0,   444,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     382,   382,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1049,   444,     0,     0,     0,   444,   444,  1049,     0,
       0,  1049,   499,   499,     0,     0,   499,   499,   499,     0,
       0,     0,     0,     0,     0,     0,   446,     0,   446,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1051,
     446,     0,     0,     0,     0,     0,     0,     0,     0,   585,
       0,     0,     0,     0,     0,     0,     0,   446,     0,     0,
       0,   446,     0,     0,   382,   585,    91,     0,   446,     0,
       0,   766,   446,     0,     0,     0,     0,     0,     0,     0,
       0,   394,     0,     0,     0,     0,  1051,     0,  1051,     0,
       0,     0,  1184,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1051,     0,     0,     0,     0,
       0,     0,   364,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,     0,     0,     0,     0,     0,     0,
     364,     0,     0,   875,     0,   499,   499,   880,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    91,    91,     0,     0,     0,     0,
    1051,     0,     0,    91,     0,    91,   498,   498,   480,   480,
       0,     0,    91,    91,     0,     0,     0,     0,     0,     0,
     996,     0,     0,     0,   364,     0,     0,     0,     0,     0,
       0,     0,   766,     0,   480,   480,     0,     0,     0,     0,
       0,     0,     0,     0,    91,    91,     0,     0,     0,     0,
    1305,     0,     0,     0,     0,     0,   480,   480,     0,     0,
       0,   480,   480,     0,     0,   480,   480,     0,     0,     0,
       0,   498,     0,     0,     0,     0,     0,     0,   446,     0,
       0,     0,   446,  1337,  1341,  1345,  1349,  1353,     0,     0,
    1362,     0,     0,   585,     0,   585,  1305,     0,     0,    91,
    1049,     0,  1049,     0,   394,     0,   480,     0,   480,   585,
     585,  1403,  1407,  1411,  1415,  1419,   394,     0,  1362,     0,
       0,     0,     0,     0,   446,     0,     0,     0,     0,     0,
    1444,     0,     0,     0,   446,     0,  1449,     0,     0,     0,
       0,     0,     0,   498,   498,   446,     0,   498,   498,   498,
     446,    91,     0,     0,     0,    91,     0,     0,     0,     0,
       0,     0,     0,     0,   446,     0,   382,     0,     0,     0,
       0,   446,     0,   446,     0,     0,     0,     0,  1051,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     446,    91,     0,     0,     0,     0,     0,     0,     0,  1151,
       0,     0,     0,     0,    91,     0,     0,     0,     0,  1049,
       0,     0,   686,     0,    91,   686,    91,     0,     0,     0,
       0,     0,     0,     0,   686,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1185,
       0,     0,     0,     0,     0,   446,     0,     0,     0,     0,
       0,     0,   686,     0,   875,   880,     0,     0,   686,   686,
     686,   686,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   498,   498,     0,     0,
       0,     0,     0,     0,     0,   394,   394,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   499,   499,     0,     0,
       0,   766,     0,     0,   766,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1265,     0,
     585,     0,     0,     0,     0,     0,     0,   766,     0,   585,
      91,     0,   875,   880,   446,     0,     0,     0,   446,   446,
     446,     0,     0,     0,     0,     0,  1049,     0,     0,   382,
     499,   499,     0,  1049,   446,   446,     0,  1049,     0,  1311,
       0,   382,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    91,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   446,   446,     0,   446,   446,   585,   585,     0,
     446,   446,   446,   446,     0,     0,     0,  1363,     0,     0,
       0,     0,     0,     0,     0,  1376,     0,   446,     0,     0,
       0,   481,     0,     0,   481,     0,     0,     0,     0,     0,
       0,     0,     0,   446,     0,  1427,     0,   481,     0,   481,
    1660,   481,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   875,   880,     0,     0,     0,   875,     0,     0,     0,
     446,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    91,    91,    91,    91,    91,    91,     0,    91,
       0,     0,    91,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    91,    91,    91,     0,     0,     0,     0,
    1362,     0,  1362,     0,     0,     0,     0,   766,     0,     0,
       0,     0,     0,   394,    91,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   394,     0,     0,     0,     0,     0,     0,   480,     0,
     382,   382,     0,   446,   446,   446,   446,   446,   446,   446,
     446,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   446,   446,     0,     0,     0,  1049,
       0,     0,     0,     0,   446,   394,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   499,     0,   499,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   498,   498,     0,
     480,   480,     0,     0,   480,   480,   480,     0,     0,     0,
       0,   499,     0,   499,     0,     0,  1049,     0,  1049,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   446,    91,
       0,     0,   446,   446,     0,    91,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   498,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1049,     0,     0,     0,     0,   686,   686,     0,     0,     0,
       0,     0,     0,     0,     0,   686,     0,   686,   686,     0,
       0,   686,     0,     0,     0,     0,     0,   875,     0,   686,
       0,     0,   686,     0,     0,     0,  1645,  1647,     0,  1650,
       0,     0,     0,   480,   480,     0,     0,  1185,     0,     0,
       0,     0,     0,     0,  1669,     0,     0,     0,   382,     0,
       0,   875,   880,     0,     0,     0,     0,     0,   481,   481,
       0,     0,     0,     0,     0,     0,   382,     0,     0,     0,
     997,     0,     0,     0,     0,     0,     0,     0,     0,   499,
     499,   499,   499,   499,   481,   481,     0,     0,   234,     0,
       0,     0,     0,   499,   499,   499,   499,  1695,     0,  1699,
       0,     0,     0,     0,     0,     0,   481,   481,     0,     0,
       0,   481,   481,     0,     0,   481,   481,     0,     0,     0,
     382,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   875,   234,     0,     0,     0,     0,    91,     0,     0,
     448,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   481,     0,   481,     0,
     540,     0,     0,     0,     0,   499,   499,     0,  1049,     0,
       0,     0,     0,     0,     0,     0,    91,   875,   880,     0,
       0,     0,     0,     0,     0,     0,   498,     0,   498,     0,
       0,     0,     0,     0,     0,     0,    91,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   498,     0,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   875,
       0,   880,     0,     0,     0,     0,     1,     0,   686,   686,
     686,   686,   875,   880,   686,     0,     0,     0,   686,   686,
       0,   686,     0,   686,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,   686,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,   875,     0,   880,     0,     0,     0,     0,
       0,     0,    30,     0,    91,    91,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,  1971,     0,     0,     0,     0,  1974,
    1976,  1980,  1984,  1986,  1990,    43,     0,     0,  1994,  1998,
    2002,  2006,     0,     0,     0,    46,    47,    48,    49,    50,
      51,     0,     0,     0,   480,   480,     0,    56,     0,     0,
     903,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   599,     0,     0,     0,     0,     0,     0,     0,     0,
     498,   498,   498,   498,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   498,   498,   498,   498,     0,   865,
       0,     0,     0,     0,     0,     0,   686,     0,   480,   480,
       0,     0,     0,     0,     0,   686,     0,   686,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    91,     0,
      91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    79,     0,     0,     0,     0,     0,   910,   540,     0,
       0,     0,   919,     0,     0,     0,     0,     0,     0,     0,
       0,   926,     0,     0,   933,     0,   498,   498,     0,     0,
       0,     0,     0,   686,   686,     0,     0,   686,     0,   686,
       0,     0,   686,     0,     0,     0,   686,     0,     0,  1869,
       0,     0,     0,     0,     0,     0,     0,   124,   984,     0,
       0,     0,     0,     0,  1000,     0,     0,     0,     0,     0,
       0,   875,   880,   875,   880,     0,   875,  1889,     0,     0,
     686,     0,  1645,  1896,    97,  1669,     0,   880,     0,   188,
       0,     0,     0,     0,     0,   875,   880,  1669,     0,   281,
      79,     0,     0,     0,     0,     0,     0,    79,    79,   686,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   875,     0,   880,     0,   875,   412,   880,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   481,     0,
     127,   139,     0,     0,     0,   234,     0,     0,     0,     0,
     513,     0,     0,     0,     0,   234,     0,     0,     0,     0,
       0,     0,   513,     0,     0,     0,   513,     0,     0,     0,
       0,     0,   193,   139,     0,   234,     0,   245,   234,     0,
     234,     0,   234,    97,     0,     0,     0,     0,     0,     0,
      97,    97,     0,     0,     0,     0,     0,   281,   281,     0,
       0,     0,     0,   480,     0,   480,     0,     0,     0,   413,
     481,   481,     0,     0,   481,   481,   481,     0,     0,     0,
       0,     0,   424,     0,     0,     0,     0,     0,     0,   480,
       0,   480,     0,     0,     0,   606,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     1,
     323,   112,   324,     0,   325,   326,   563,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   648,     0,     0,   281,
     281,   281,   579,     0,     2,   875,     0,     0,     0,   188,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   188,
     281,    79,     0,     0,     0,   875,     0,     0,   613,     0,
     880,     0,   875,  1889,     0,   880,  1669,     0,  2054,   747,
    2056,     0,     0,     0,   327,   747,   880,  2060,     0,   328,
     329,   330,     0,   481,   481,     0,   769,     0,     0,     0,
       0,     0,   331,   332,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    91,     0,   333,     0,     0,   139,
     334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
       0,   766,   193,     0,     0,     0,   342,   343,     0,     0,
     344,     0,   723,   345,    97,   346,     0,   480,   480,   480,
     480,   480,     0,   347,   348,   581,   349,   350,   351,   352,
       0,   480,   480,   480,   480,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   865,   865,   865,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   606,
       0,     0,     0,     0,     0,   915,     0,     0,   448,   448,
     234,     0,     0,     0,     0,     0,   915,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2119,  2122,     0,
     875,   880,   875,   480,   480,     0,   875,  1889,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     1,   323,   112,
     324,   606,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1006,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   905,  1516,     0,     0,     0,     0,     0,     0,
       0,   606,     0,     0,     0,   875,   880,     0,   875,  1889,
     139,     0,     0,  2167,     0,     0,     0,     0,   448,     0,
       0,     0,   327,   281,     0,   540,   540,   328,   329,   330,
     281,     0,     0,   281,     0,     0,     0,     0,   540,     0,
     331,   332,     0,     0,   979,     0,     0,   987,     0,     0,
       0,     0,     0,   875,   333,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
       0,     0,     0,     0,   342,   343,     0,     0,   344,     0,
       0,   345,   878,   346,   905,    91,  1773,     0,     0,     0,
    1774,   347,   348,     0,   349,   350,   351,   352,     0,     0,
     139,   139,   139,   139,   139,   139,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   139,   139,     0,   481,   481,     0,     0,   234,     0,
       0,     0,     0,   234,     0,     0,  1188,     0,     0,  1617,
       0,     0,  1099,     0,  1108,  1617,     0,     0,     0,     0,
       0,   234,     0,     0,     0,  1110,     0,   281,   281,   281,
     281,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   481,   481,
       0,     0,     0,     0,     0,   281,   281,   281,     0,     0,
     188,     0,     0,     0,     0,   579,  1238,     0,     0,     0,
       0,     0,     0,     0,   281,     0,     0,     0,     0,     0,
       0,  1251,  1261,   769,     0,  1251,  1261,     0,     0,     0,
       0,     0,  1238,     0,     0,  1238,     0,     0,     0,     0,
       0,     0,     0,  1282,     0,     0,   281,     0,     0,     0,
       0,     0,     0,   281,     0,     0,   281,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   448,   234,     0,     0,  1222,     0,     0,     0,
       0,     0,     0,   723,     0,     0,   689,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1256,     0,     0,     0,  1256,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,   905,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   606,     0,     0,     0,
       0,   767,     0,     0,     0,     0,     2,   213,   214,   215,
     216,   217,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,    21,    22,   263,   264,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   606,     0,     0,     0,     0,     0,   265,     0,  1475,
     606,     0,     0,     0,    31,    32,     0,   606,     0,    35,
    1475,   124,   769,   876,   606,   266,    41,   267,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     268,     0,     0,   481,     0,   481,     0,     0,     0,     0,
      46,    47,   269,   270,   271,   272,   219,   220,     0,     0,
       0,     0,    56,     0,     0,   903,     0,     0,     0,   481,
       0,   481,  1472,     0,     0,   606,   599,   905,  1465,     0,
       0,     0,   767,     0,   905,     0,     0,     0,     0,   865,
     865,   606,   905,  1479,     0,     0,     0,     0,     0,     0,
    1486,     0,     0,   905,   127,   139,     0,     0,     0,     0,
       0,     0,     0,     0,   448,     0,     0,     0,   448,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   281,   281,   281,     0,     0,
       0,     0,     0,   648,   139,     0,     0,     0,     0,     0,
       0,     0,  1519,     0,     0,     0,     0,     0,   613,     0,
       0,     0,     0,     0,   139,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   979,     0,     0,     0,     0,     0,
       0,   448,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   448,  1835,   448,  1835,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   979,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   481,   481,   481,
     481,   481,     0,     0,   281,     0,     0,   281,     0,     0,
     281,   481,   481,   481,   481,     0,     0,     0,     0,     0,
       0,     0,     0,  1188,     0,     0,     0,     0,     0,     0,
       0,     0,  1598,     0,     0,     0,     0,     0,     0,     0,
       0,  1606,     0,     0,     0,     0,     0,   281,     0,  1186,
       0,     0,     0,   281,   281,   281,   281,     0,     0,     0,
       0,     0,     0,     0,   876,     0,     0,     0,     0,     0,
       0,     0,   689,   689,   689,   689,   281,     0,   281,     0,
       0,     0,     0,   481,   481,     0,     0,     0,     0,     0,
       0,     0,  1707,     0,     0,   648,     0,   540,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   767,     0,     0,   767,  1733,     0,     0,     0,     0,
       0,     0,  1733,     0,     0,     0,     0,     0,     0,     0,
     448,     0,   234,     0,     0,   448,     0,   767,     0,     0,
     281,   281,   876,     0,     0,     0,     0,   281,   281,     0,
       0,   281,   281,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   280,     0,     0,     0,     0,     0,  1312,
       0,     0,     0,     0,     0,   905,     0,     0,   905,     0,
    1256,     0,     0,     0,     0,     0,     0,     0,  1724,     0,
       0,     0,     0,   133,     0,     0,     0,     0,  1256,     0,
       0,     0,     0,   448,     0,  1256,     0,  1365,     0,     0,
       0,     0,     0,     0,     0,  1377,     0,     0,     0,     0,
       0,     0,     0,     0,   190,   133,     0,     0,     0,     0,
       0,     0,     0,   248,     0,  1429,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   876,     0,     0,     0,     0,   876,     0,     0,     0,
       0,   280,   280,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   133,   133,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   605,
       0,     0,     0,     0,     0,     0,     0,   767,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     647,     0,     0,   280,   280,   280,     0,     0,     0,     0,
     448,     0,     0,     0,   281,     0,     0,   606,     0,     0,
       0,     0,     0,     0,   280,     0,     0,     0,     0,     0,
       0,   628,     0,     0,     0,   630,     0,     0,     0,     0,
       0,     0,     0,   746,     0,     0,     0,     0,  1793,   746,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     768,     0,  1800,     0,     0,     0,     0,     0,     0,  1803,
       0,   133,     0,     0,     0,     0,     0,   424,     0,     0,
       0,     0,     0,     0,   190,     0,   448,     0,   448,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1486,     0,
     613,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   606,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   281,   281,     0,     0,     0,     0,
     281,   281,     0,   283,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   281,     0,     0,   281,     0,     0,     0,
       0,     0,     0,   605,   281,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   876,     0,     0,
       0,  1859,   689,     0,     0,   689,  1646,  1648,     0,  1651,
       0,     0,     0,     0,     0,     0,     0,  1661,     0,     0,
       0,   613,     0,     0,  1670,     0,     0,     0,     0,     0,
     133,   876,     0,     0,     0,   605,     0,     0,     0,     0,
       0,     0,   689,     0,     0,     0,     0,     0,   689,   689,
     689,   689,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,   283,     0,     0,     0,     0,   769,     0,     0,
       0,     0,   133,     0,     0,   605,     0,  1697,     0,  1701,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   280,     0,   608,
       0,     0,     0,     0,   280,     0,     0,   280,     0,     0,
     248,   876,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1936,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   281,   281,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     650,     0,     0,   283,   283,   283,   606,   876,     0,     0,
       0,     0,   133,   133,   133,   133,   133,   133,     0,  1056,
       0,     0,   630,     0,   283,     0,     0,     0,     0,     0,
       0,     0,     0,   133,   133,   133,     0,     0,     0,     0,
       0,     0,     0,   749,     0,     0,  1465,     0,     0,   749,
       0,     0,     0,     0,   133,     0,   584,     0,     0,   876,
     771,     0,     0,   281,   281,     0,     0,     0,  1803,     0,
       0,     0,   876,     0,     0,     0,     0,     0,     0,     0,
       0,   280,   280,   280,   280,     0,     0,     0,     0,   905,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   280,
     280,   280,     0,     0,     0,     0,     0,     0,     0,     0,
    1237,     0,     0,   876,     0,     0,   769,     0,   280,     0,
       0,     0,     0,     0,     0,  1250,  1260,   768,     0,  1250,
    1260,     0,     0,     0,     0,     0,  1237,     0,     0,  1237,
       0,     0,     0,     0,     0,     0,     0,  1281,     0,     1,
     280,     0,     0,   608,     0,   732,     0,   280,     0,     0,
     280,     0,     0,     0,   584,     0,     0,     0,     0,   248,
     584,     0,     0,     0,     2,     0,     0,     0,     0,  1724,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,   608,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
     605,     0,     0,     0,     0,   608,     0,     0,    43,   584,
       0,   584,     0,     0,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,     0,     0,     0,   283,     0,     0,
       0,     0,     0,     0,   283,     0,     0,   283,     0,     0,
       0,     0,     0,     0,     0,   605,     0,     0,     0,     0,
       0,     0,     0,     0,   605,     0,     0,     0,     0,     0,
       0,   605,     0,     0,     0,     0,   768,     0,   605,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   689,   689,     0,     0,     0,
       0,   876,     0,   876,     0,     0,   876,   689,     0,     0,
       0,     0,  1894,  1897,     0,  1899,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   876,     0,  1910,     0,   605,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   605,     0,   133,     0,     0,
       0,   876,     0,     0,     0,   876,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1050,     0,     0,
       0,   283,   283,   283,   283,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   133,     0,     0,   280,
     280,   280,     0,     0,     0,     0,     0,   647,     0,   283,
     283,   283,     0,   628,   584,   630,   133,     0,     0,     0,
    1240,     0,     0,     0,     0,     0,     0,     0,   283,     0,
       0,     0,     0,     0,     0,  1253,  1263,   771,     0,  1253,
    1263,     0,     0,     0,     0,     0,  1240,     0,     0,  1240,
       0,     0,     0,     0,     0,     0,     0,  1284,     0,     0,
     283,     0,     0,     0,     0,     0,     0,   283,     0,     0,
     283,     0,     0,     0,     0,     0,     0,     0,   584,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   280,     0,
       0,   280,     0,     0,   280,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   133,   133,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   876,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1230,     0,     0,     0,     0,
     608,   280,     0,     0,   689,   876,     0,   280,   280,   280,
     280,     0,   876,     0,     0,     0,  1899,     0,  2055,     0,
       0,     0,     0,     0,     0,     0,     0,  2061,     0,     0,
     280,     0,   280,     0,     0,     0,     0,     0,     0,     0,
    1050,     0,     0,     0,     0,   608,  1706,  1050,     0,   647,
    1050,     0,     0,     0,   608,     0,     0,     0,     0,     0,
       0,   608,     0,     0,     0,     0,   771,     0,   608,  1732,
       0,   767,     0,     0,     0,     0,  1732,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   280,   280,     0,     0,   628,     0,
     630,   280,   280,     0,     0,   280,   280,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   608,
       0,   779,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,     0,   608,     0,     0,   807,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2120,  2123,     0,
     876,     0,   876,     0,     0,   689,   876,   689,     0,   283,
     283,   283,     0,     0,     0,     0,     0,   650,     0,   327,
       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   333,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,     0,  1050,   876,   584,     0,   876,     0,
       0,   342,   343,     0,     0,   344,   689,     0,   345,   878,
     346,     0,     0,   879,     0,     0,     0,     0,   347,   348,
    1778,   349,   350,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   584,     0,     0,     0,     0,
       0,     0,     0,   876,     0,     0,     0,     0,   283,     0,
       0,   283,     0,     0,   283,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1050,
       0,  1050,     0,     0,     0,     0,     0,     0,   280,     0,
       0,   605,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,     0,     0,     0,     0,     0,   283,   283,   283,
     283,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   129,     0,     0,     0,     0,     0,     0,   146,
     283,     0,   283,     0,     0,     0,     0,     0,     0,   133,
       0,     0,     0,     0,     0,     0,  1709,   584,     0,   650,
       0,     0,   169,   181,   207,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1735,
       0,     0,     0,     0,     0,     0,  1735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1050,     0,
       0,     0,   605,     0,   283,   283,     0,     0,     0,   584,
       0,   283,   283,   129,   129,   283,   283,     0,   280,   280,
       0,     0,     0,     0,   280,   280,  1183,     0,     0,     0,
     523,     0,     0,     0,     0,     0,     0,   280,     0,   132,
     280,     0,     0,     0,     0,     0,   554,     0,   280,     0,
       0,     0,     0,     0,   133,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   129,     0,
     132,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   584,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   169,   602,
       0,     0,     0,     0,   584,     0,     0,     0,     0,     0,
     132,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   768,     0,     0,     0,  1050,     0,     0,     0,     0,
       0,     0,  1050,     0,   779,     0,  1050,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1313,     0,
     181,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   181,     0,   132,     0,  1336,  1340,  1344,
    1348,  1352,     0,   602,  1361,  1367,     0,     0,     0,     0,
     779,     0,     0,  1378,     0,     0,   280,   280,     0,     0,
       0,     0,     0,     0,     0,  1402,  1406,  1410,  1414,  1418,
       1,     0,  1361,  1431,     0,     0,   610,     0,     0,     0,
     605,     0,     0,     0,  1313,     0,     0,     0,   283,     0,
    1378,   608,     0,     0,     0,     2,   213,   214,   215,   216,
     217,     8,     9,    10,   597,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,   132,     0,     0,
       0,     0,     0,     0,     0,     0,    30,   280,   280,     0,
     132,     0,     0,    31,    32,     0,     0,     0,    35,     0,
     720,    38,    39,     0,    40,    41,    42,     0,     0,   129,
       0,     0,     0,     0,     0,   129,     0,     0,     0,    43,
       0,     0,     0,     0,     0,   133,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   219,   220,     0,     0,     0,
       0,    56,   608,     0,   598,     0,     0,     0,     0,     0,
     768,   602,     0,     0,     0,   599,     0,   600,   283,   283,
       0,     0,     0,     0,   283,   283,     0,     0,  1050,     0,
       0,     0,     0,     0,     0,     0,     0,   283,   584,     0,
     283,     0,     0,     0,     0,   602,     0,     0,   283,     0,
       0,     0,     0,     0,   584,     0,     0,     0,     0,     0,
       0,   169,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,     0,  1050,   132,  1050,     0,     0,
       0,     0,   610,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,  1050,     0,     0,     0,     0,     0,
       0,   129,   129,   129,   129,   129,   129,     0,   129,     0,
       0,   129,     0,     0,     0,     0,     0,     0,   132,     0,
       0,     0,   129,   129,   129,     0,     0,     0,     0,   327,
       0,   771,     0,     0,   328,   329,   330,     0,     0,     0,
       0,   554,     0,   602,     0,   129,     0,   331,   332,  1050,
       0,     0,   610,     0,     0,     0,     0,     0,   129,     0,
       0,   333,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,     0,     0,     0,     0,     0,     0,     0,
       0,   342,   343,     0,     0,   344,     0,     0,   345,   878,
     346,  1676,     0,   879,  1183,     0,   283,   283,   347,   348,
       0,   349,   350,   351,   352,     0,     0,     0,   132,   132,
     132,   132,   132,   132,     0,   132,     0,     0,   720,     0,
     608,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     132,   132,     0,     0,     0,     0,     0,   278,     0,     0,
       0,     0,   584,     0,   584,     0,     0,     0,     0,     0,
     132,     0,   610,     0,  1361,     0,  1361,     0,   584,   584,
    1218,     0,     0,     0,     0,   610,   427,     0,   129,     0,
       0,     0,     0,     0,   602,     0,     0,   283,   283,     0,
       0,     0,     0,     0,     0,     0,  1977,  1981,   511,  1987,
    1991,     0,     0,     0,  1995,  1999,  2003,  2007,     0,     0,
     511,     0,     0,     0,   511,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1760,     0,     0,     0,
     427,     0,     0,     0,     0,     0,     0,  1050,     0,     0,
       0,     0,     0,     0,     0,   278,   278,     0,     0,     0,
     771,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   279,     0,     0,     0,
       0,   609,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   604,     0,   720,     0,     0,     0,     0,
       0,   720,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   279,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   279,
       0,     0,     0,   279,   646,     0,     0,   278,   278,   278,
       0,     0,     0,     0,     0,   719,     0,  1977,  1981,  1987,
    1991,  1995,  1999,  2003,  2007,     0,     0,     0,   278,     0,
       0,     0,     0,     0,   279,   279,     0,     0,     0,     0,
       0,     0,   169,     0,   602,     0,     0,   745,     0,   584,
       0,   602,     0,   745,     0,     0,   602,     0,   584,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   129,     0,     0,     0,     0,
       0,     0,     0,     0,   129,     0,     0,     0,     0,   602,
       0,     0,  1050,     0,     0,   129,   584,   584,     0,     0,
       0,     0,     0,   279,     0,   602,   279,   279,   279,     0,
       0,   893,     0,     0,     0,     0,     0,   898,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   279,     0,     0,
       0,   610,     0,     0,     0,     0,     0,     0,   610,     0,
       0,     0,     0,   132,     0,     0,   279,   604,     0,     0,
       0,     0,   279,   914,     0,     0,     0,   602,     0,     0,
       0,     0,     0,     0,   914,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,   975,     0,     0,
       0,   610,     0,     0,     0,     0,   610,     0,     0,   604,
       0,     0,   132,   129,   129,     0,     0,     0,     0,     0,
       0,     0,   610,   129,     0,   129,  1005,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   604,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1055,     0,     0,  1060,     0,     0,     0,     0,     0,     0,
       0,   278,     0,     0,   610,     0,  1055,     0,   278,     0,
       0,   278,   279,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   279,     0,     0,     0,   609,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     609,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     132,   132,     0,     0,     0,     0,     0,     0,     0,     0,
     610,     0,   610,     0,     0,     0,     0,   129,     0,   129,
       0,     0,     0,     0,     0,   279,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1760,     0,
       0,     0,     0,  1973,  1975,  1979,  1983,  1985,  1989,     0,
       0,     0,  1993,  1997,  2001,  2005,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     279,     0,     0,     0,     0,     0,     0,   279,     0,     0,
     279,     0,     0,     0,     0,   278,   278,   278,   278,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     719,     0,     0,     0,     0,     0,   719,     0,     0,     0,
       0,     0,     0,   278,   278,   278,     0,     0,     0,     0,
       0,     0,     0,     0,   720,     0,   720,     0,     0,     0,
       0,     0,   278,     0,     0,     0,     0,     0,     0,  1249,
    1259,     0,     0,  1249,  1259,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   278,     0,     0,     0,   284,     0,
       0,   278,     0,     0,   278,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1975,  1979,  1985,  1989,  1993,
    1997,  2001,  2005,     0,   279,   279,   279,   279,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   284,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   284,   279,   279,   279,   284,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   279,     0,     0,   604,     0,     0,     0,   279,   279,
       0,     0,   279,   279,     0,     0,   284,   284,     0,     0,
       0,     0,     0,     0,   129,     0,     0,     0,     0,     0,
       0,   129,     0,   279,     0,     0,     0,     0,   129,     0,
     279,     0,     0,   279,     0,     0,   719,     0,     0,   604,
       0,     0,     0,  1484,     0,     0,     0,  1474,   604,   129,
       0,   602,     0,     0,   129,   604,     0,   129,  1474,     0,
       0,     0,   604,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   284,  1520,     0,   284,   284,
     284,   609,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   604,     0,     0,     0,   975,     0,   284,
       0,   610,     0,     0,     0,     0,     0,     0,   610,   604,
       0,     0,     0,   129,     0,   132,     0,     0,   284,     0,
       0,   129,     0,     0,   284,     0,     0,     0,     0,     0,
       0,     0,   602,     0,     0,     0,   610,     1,   610,     0,
       0,   610,     0,     0,   610,     0,   279,     0,     0,   975,
       0,     0,     0,   278,   278,   278,     0,   279,     0,     0,
       0,   646,     2,     3,     4,   293,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,   427,     0,     0,     0,
       0,     0,    29,    30,     0,   609,     0,   609,     0,     0,
      31,    32,   294,    34,     0,    35,     0,     0,    38,    39,
     132,    40,    41,    42,     0,     0,     0,     0,   610,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     0,   610,
       0,    45,     0,     0,   284,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,   284,     0,     0,    56,     0,
       0,    57,   278,     0,     0,   278,     0,     0,   278,     0,
     295,     0,   279,   279,   279,     0,     0,     0,     0,     0,
     279,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   278,     0,   284,     0,     0,
       0,   278,   278,   278,   278,   129,   129,     0,   129,   719,
       0,   719,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   278,     0,   278,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   284,   646,     0,     0,     0,     0,     0,   284,
       0,     0,   284,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1731,   129,     0,     0,     0,     0,     0,
    1731,   279,     0,     0,   279,     0,     0,   279,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   278,   278,
       0,     0,     0,     0,     0,   278,   278,     0,     0,   278,
     278,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   610,   610,   279,   610,     0,     0,     0,     0,
     279,   279,   279,   279,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   279,     0,   279,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   279,     0,     0,     0,     0,     0,     0,     0,
       0,   132,     0,     0,     0,     0,   284,   284,   284,   284,
       0,     0,   279,     0,     0,     0,     0,     0,     0,   279,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   284,   284,   284,   279,   279,     0,
       0,     0,     0,     0,   279,   279,     0,     0,   279,   279,
       0,     0,     0,   284,     0,     0,     0,     0,     0,     0,
     284,   284,     0,     0,   284,   284,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,   284,     0,     0,     0,     0,
       0,     0,   284,     0,     0,   284,   719,     0,     0,     0,
       0,     0,     0,  1804,     0,     2,   213,   214,   215,   216,
     217,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,  1484,     0,   609,     0,     0,  1817,     0,     0,  1060,
       0,     0,   278,     0,     0,   604,    30,   454,     0,     0,
       0,     0,     0,    31,    32,     0,     0,   455,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   219,   220,     0,     0,     0,
       0,    56,     0,     0,   990,     0,   467,     0,     0,     0,
       0,     0,     0,   991,     0,   893,     0,     0,     0,     0,
       0,     0,     0,   609,     0,     0,     0,     0,   284,     0,
       0,     0,     0,     0,   609,     0,     0,     0,     0,   284,
       0,     0,     0,     0,     0,     0,   604,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   279,   278,   278,     0,     0,     0,     0,   278,   278,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   278,     0,     0,   278,     0,   322,     0,     1,   323,
     112,   324,   278,   325,   326,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1164,  1165,  1166,   666,  1167,  1168,  1169,  1170,   671,   672,
    1171,     0,     0,   327,   284,   284,   284,     0,   328,   329,
     330,     0,   284,     0,     0,     0,    35,     0,     0,     0,
       0,   331,   332,  1172,     0,   676,   677,   678,     0,     0,
       0,   279,   279,     0,     0,   333,     0,   279,   279,   334,
     335,   336,   337,   338,   339,   340,   341,    46,    47,     0,
     279,     0,     0,   279,     0,   342,   343,     0,     0,   344,
       0,   279,   345,     0,   346,   679,     0,   719,   719,   274,
    2016,   680,   347,   348,     0,   349,   350,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     278,   278,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,   284,   604,     0,   284,     0,     0,   284,
       0,     0,     0,     0,     0,     0,  1055,     0,     0,     2,
     213,   214,   215,   216,   217,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,    21,    22,
     263,   264,    25,    26,    27,     0,   284,     0,     0,     0,
       0,     0,   284,   284,   284,   284,     0,     0,     0,     0,
     265,   278,   278,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,   284,     0,   284,   266,    41,
     267,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   268,   284,     0,     0,     0,     0,   279,
     279,     0,     0,    46,    47,   269,   270,   271,   272,   219,
     220,     0,     0,     0,   284,    56,     0,     0,   903,     0,
       0,   284,     0,     0,     0,  1489,     0,     0,     0,   599,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   284,
     284,     0,     0,     0,     0,     0,   284,   284,     0,     0,
     284,   284,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     279,   279,  -345,   787,     0,  -345,  -345,  -345,  -345,   788,
     789,   790,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,
    -345,  -345,  -345,     0,     0,  -345,  -345,  -345,  -345,  -345,
       0,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,
    -345,     0,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,   791,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,   792,  -345,  -345,
     793,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -459,     0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,
       0,     0,     0,   284,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -459,     0,
       0,     0,     0,  -459,  -459,  -459,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -459,  -459,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -459,     0,     0,     0,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,     0,     0,     0,     0,     0,     0,     0,     0,
    -459,  -459,     0,     0,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,     0,     0,  -459,     0,  -459,  -459,     0,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,
       0,     0,     0,   284,   284,     0,     0,     0,     0,   284,
     284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   284,     0,     0,   284,     0,     0,     0,     0,
       0,  -451,   872,   284,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,     0,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,     0,  -451,
    -451,  -451,     0,     0,  -451,  -451,  -451,  -451,  -451,     0,
       0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,  -451,
       0,  -451,  -451,  -451,     0,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,     0,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
       0,   284,   284,     0,  -304,   322,     0,     1,   323,   112,
     324,  -304,   325,   326,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,     2,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
       0,     0,   327,  -304,  -304,     0,     0,   328,   329,   330,
    -304,  -304,   284,   284,  -304,  -304,  -304,  -304,  -304,  -304,
     331,   332,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,     0,  -304,     0,   333,  -304,  -304,     0,   334,   335,
     336,   337,   338,   339,   340,   341,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,   342,   343,     0,  -304,   344,  -304,
    -304,   345,  1279,   346,  -304,  -304,  1200,  -304,  -304,  -304,
    -304,   347,   348,  -304,   349,   350,   351,   352,  -304,  -304,
    -304,  -304,  -304,  -305,   322,     0,     1,   323,   112,   324,
    -305,   325,   326,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,     2,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,
       0,   327,  -305,  -305,     0,     0,   328,   329,   330,  -305,
    -305,     0,     0,  -305,  -305,  -305,  -305,  -305,  -305,   331,
     332,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
       0,  -305,     0,   333,  -305,  -305,     0,   334,   335,   336,
     337,   338,   339,   340,   341,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,   342,   343,     0,  -305,   344,  -305,  -305,
     345,   878,   346,  -305,  -305,   879,  -305,  -305,  -305,  -305,
     347,   348,  -305,   349,   350,   351,   352,  -305,  -305,  -305,
    -305,  -305,  -566,   322,     0,     1,   323,   112,   324,  -566,
     325,   326,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
       2,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,     0,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,     0,
     327,  -566,  -566,     0,     0,   328,   329,   330,  -566,  -566,
       0,     0,  -566,  -566,  -566,  -566,  -566,  -566,   331,   332,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,
    -566,     0,   333,  -566,  -566,     0,   334,   335,   336,   337,
     338,   339,   340,   341,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,   342,   343,     0,  -566,   344,  -566,  -566,   345,
    -566,   346,  -566,  -566,  -566,  -566,   775,  -566,  1360,   347,
     348,  -566,   349,   350,   351,   352,  -566,  -566,  -566,  -566,
    -566,  -567,   322,     0,     1,   323,   112,   324,  -567,   325,
     326,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,     2,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,     0,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,     0,     0,   327,
    -567,  -567,     0,     0,   328,   329,   330,  -567,  -567,     0,
       0,  -567,  -567,  -567,  -567,  -567,  -567,   331,   332,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,     0,  -567,
       0,   333,  -567,  -567,     0,   334,   335,   336,   337,   338,
     339,   340,   341,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,   342,   343,     0,  -567,   344,  -567,  -567,   345,  -567,
     346,  -567,  -567,  -567,  -567,   775,  -567,  1426,   347,   348,
    -567,   349,   350,   351,   352,  -567,  -567,  -567,  -567,  -567,
    -577,   322,     0,     1,   323,   112,   324,  -577,   325,   326,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     2,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,     0,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,     0,     0,   327,  -577,
    -577,     0,     0,   328,   329,   330,  -577,  -577,     0,     0,
    -577,  -577,  -577,  -577,  -577,  -577,   331,   332,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,  -577,     0,
     333,  -577,  -577,     0,   334,   335,   336,   337,   338,   339,
     340,   341,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
     342,   343,     0,  -577,   344,  -577,  -577,   345,  -577,   346,
    -577,  -577,  1200,  -577,  -577,  -577,  -577,   347,   348,  -577,
     349,   350,   351,   352,  -577,  -577,  -577,  -577,  -577,  -579,
     322,     0,     1,   323,   112,   324,  -579,   325,   326,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,     2,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,     0,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,     0,     0,   327,  -579,  -579,
       0,     0,   328,   329,   330,  -579,  -579,     0,     0,  -579,
    -579,  -579,  -579,  -579,  -579,   331,   332,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,     0,  -579,     0,   333,
    -579,  -579,     0,   334,   335,   336,   337,   338,   339,   340,
     341,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,   342,
     343,     0,  -579,   344,  -579,  -579,   345,   878,   346,  -579,
    -579,   879,  -579,  -579,  -579,  -579,   347,   348,  -579,   349,
     350,   351,   352,  -579,  -579,  -579,  -579,  -579,  -578,   322,
       0,     1,   323,   112,   324,  -578,   325,   326,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     2,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     0,     0,   327,  -578,  -578,     0,
       0,   328,   329,   330,  -578,  -578,     0,     0,  -578,  -578,
    -578,  -578,  -578,  -578,   331,   332,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,     0,  -578,     0,   333,  -578,
    -578,     0,   334,   335,   336,   337,   338,   339,   340,   341,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,   342,   343,
       0,  -578,   344,  -578,  -578,   345,  -578,   346,  -578,  -578,
    1200,  -578,  -578,  -578,  -578,   347,   348,  -578,   349,   350,
     351,   352,  -578,  -578,  -578,  -578,  -578,  -338,  1932,     0,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,     0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,     0,     0,  -338,  -338,  -338,     0,     0,
    -338,  -338,  -338,  -338,  -338,     0,     0,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,     0,  -338,     0,  -338,  -338,  -338,
       0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -342,  1968,     0,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
       0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,     0,     0,  -342,  -342,  -342,     0,     0,  -342,
    -342,  -342,  -342,  -342,     0,     0,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,     0,  -342,     0,  -342,  -342,  -342,     0,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,     0,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -332,   322,     0,     1,   323,
     112,   324,  -332,   325,   326,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,     2,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,     0,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,     0,     0,   327,  -332,  -332,     0,     0,   328,   329,
     330,  -332,  -332,     0,     0,  -332,  -332,  -332,  -332,  -332,
    -332,   331,   332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,     0,  -332,     0,   333,  -332,  -332,     0,   334,
     335,   336,   337,   338,   339,   340,   341,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,   342,   343,     0,  -332,   344,
    -332,  -332,   345,  -332,   346,  -332,  -332,  -332,  -332,   775,
    -332,  -332,   347,   348,  -332,   349,   350,   351,   352,  -332,
    -332,  -332,  -332,  -332,  -544,   322,     0,     1,   323,   112,
     324,  -544,   325,   326,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,     2,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,     0,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
       0,     0,   327,  -544,  -544,     0,     0,   328,   329,   330,
    -544,  -544,     0,     0,  -544,  -544,  -544,  -544,  -544,  -544,
     331,   332,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,     0,  -544,     0,   333,  -544,  -544,     0,   334,   335,
     336,   337,   338,   339,   340,   341,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,   342,   343,     0,  -544,   344,  -544,
    -544,   345,  -544,   346,  -544,  -544,  -544,  -544,   775,  -544,
    -544,   347,   348,  -544,   349,   350,   351,   352,  -544,  -544,
    -544,  -544,  -544,  -552,   322,     0,     1,   323,   112,   324,
    -552,   325,   326,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,     2,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,
       0,   327,  -552,  -552,     0,     0,   328,   329,   330,  -552,
    -552,     0,     0,  -552,  -552,  -552,  -552,  -552,  -552,   331,
     332,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
       0,  -552,     0,   333,  -552,  -552,     0,   334,   335,   336,
     337,   338,   339,   340,   341,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,   342,   343,     0,  -552,   344,  -552,  -552,
     345,  -552,   346,  -552,  -552,  -552,  -552,   775,  -552,  -552,
     347,   348,  -552,   349,   350,   351,   352,  -552,  -552,  -552,
    -552,  -552,  -545,   322,     0,     1,   323,   112,   324,  -545,
     325,   326,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
       2,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,     0,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,     0,
     327,  -545,  -545,     0,     0,   328,   329,   330,  -545,  -545,
       0,     0,  -545,  -545,  -545,  -545,  -545,  -545,   331,   332,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,
    -545,     0,   333,  -545,  -545,     0,   334,   335,   336,   337,
     338,   339,   340,   341,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,   342,   343,     0,  -545,   344,  -545,  -545,   345,
    -545,   346,  -545,  -545,  -545,  -545,   775,  -545,  -545,   347,
     348,  -545,   349,   350,   351,   352,  -545,  -545,  -545,  -545,
    -545,  -553,   322,     0,     1,   323,   112,   324,  -553,   325,
     326,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,     2,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,     0,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,     0,     0,   327,
    -553,  -553,     0,     0,   328,   329,   330,  -553,  -553,     0,
       0,  -553,  -553,  -553,  -553,  -553,  -553,   331,   332,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,     0,  -553,
       0,   333,  -553,  -553,     0,   334,   335,   336,   337,   338,
     339,   340,   341,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,   342,   343,     0,  -553,   344,  -553,  -553,   345,  -553,
     346,  -553,  -553,  -553,  -553,   775,  -553,  -553,   347,   348,
    -553,   349,   350,   351,   352,  -553,  -553,  -553,  -553,  -553,
    -546,   322,     0,     1,   323,   112,   324,  -546,   325,   326,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,     2,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,     0,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,     0,     0,   327,  -546,
    -546,     0,     0,   328,   329,   330,  -546,  -546,     0,     0,
    -546,  -546,  -546,  -546,  -546,  -546,   331,   332,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,     0,  -546,     0,
     333,  -546,  -546,     0,   334,   335,   336,   337,   338,   339,
     340,   341,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
     342,   343,     0,  -546,   344,  -546,  -546,   345,  -546,   346,
    -546,  -546,  -546,  -546,   775,  -546,  -546,   347,   348,  -546,
     349,   350,   351,   352,  -546,  -546,  -546,  -546,  -546,  -554,
     322,     0,     1,   323,   112,   324,  -554,   325,   326,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,     2,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,     0,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,     0,     0,   327,  -554,  -554,
       0,     0,   328,   329,   330,  -554,  -554,     0,     0,  -554,
    -554,  -554,  -554,  -554,  -554,   331,   332,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,     0,  -554,     0,   333,
    -554,  -554,     0,   334,   335,   336,   337,   338,   339,   340,
     341,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,   342,
     343,     0,  -554,   344,  -554,  -554,   345,  -554,   346,  -554,
    -554,  -554,  -554,   775,  -554,  -554,   347,   348,  -554,   349,
     350,   351,   352,  -554,  -554,  -554,  -554,  -554,  -547,   322,
       0,     1,   323,   112,   324,  -547,   325,   326,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,     2,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,     0,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,     0,     0,   327,  -547,  -547,     0,
       0,   328,   329,   330,  -547,  -547,     0,     0,  -547,  -547,
    -547,  -547,  -547,  -547,   331,   332,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,     0,  -547,     0,   333,  -547,
    -547,     0,   334,   335,   336,   337,   338,   339,   340,   341,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,   342,   343,
       0,  -547,   344,  -547,  -547,   345,  -547,   346,  -547,  -547,
    -547,  -547,   775,  -547,  -547,   347,   348,  -547,   349,   350,
     351,   352,  -547,  -547,  -547,  -547,  -547,  -555,   322,     0,
       1,   323,   112,   324,  -555,   325,   326,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,     2,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,     0,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,     0,     0,   327,  -555,  -555,     0,     0,
     328,   329,   330,  -555,  -555,     0,     0,  -555,  -555,  -555,
    -555,  -555,  -555,   331,   332,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,     0,  -555,     0,   333,  -555,  -555,
       0,   334,   335,   336,   337,   338,   339,   340,   341,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,   342,   343,     0,
    -555,   344,  -555,  -555,   345,  -555,   346,  -555,  -555,  -555,
    -555,   775,  -555,  -555,   347,   348,  -555,   349,   350,   351,
     352,  -555,  -555,  -555,  -555,  -555,  -340,  2075,     0,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
       0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,     0,     0,  -340,  -340,  -340,     0,     0,  -340,
    -340,  -340,  -340,  -340,     0,     0,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,     0,  -340,     0,  -340,  -340,  -340,     0,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,     0,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -339,  2076,     0,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,     0,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,     0,     0,  -339,  -339,  -339,     0,     0,  -339,  -339,
    -339,  -339,  -339,     0,     0,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,     0,  -339,     0,  -339,  -339,  -339,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,     0,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -345,   787,     0,  -345,  -345,  -345,
    -345,   788,   789,   790,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,     0,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,
    -345,  -345,     0,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,  -345,     0,  -345,  -345,  -345,     0,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,  -345,  -345,
    -345,   791,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  1197,
    -345,  -345,   793,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,   787,     0,     0,     0,     0,     0,   788,
     789,   790,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -345,     0,     0,     0,     0,     0,     0,  -345,  -345,
       0,     0,     0,  -345,     0,     0,     0,     0,     0,  -345,
    -345,  -345,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,     0,     0,     0,  -345,  -345,  -345,   791,
       0,     0,  -345,  1579,  -345,  -345,     0,   792,     0,     0,
     793,     0,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,
    -345,  -459,     0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -459,     0,
       0,     0,     0,  -459,  -459,  -459,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -459,  -459,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -459,     0,     0,     0,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,     0,     0,     0,     0,     0,     0,     0,     0,
    -459,  -459,     0,     0,  -459,  -459,  -459,  -459,  -459,  -459,
       0,  -459,  -459,     0,     0,  -459,     0,  -459,  -459,     0,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -451,
     872,     0,  -451,  -451,  -451,  -451,     0,  -451,  -451,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,     0,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,     0,     0,  -451,  -451,  -451,
       0,     0,  -451,  -451,  -451,  -451,  -451,     0,     0,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,     0,  -451,     0,  -451,
    -451,  -451,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,     0,  -451,  -451,     0,     0,  -451,  -451,  -451,  -451,
       0,  -451,  -451,  -451,  1198,  -451,  -451,  -451,     0,  -451,
    -451,  -451,  -451, -1110,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1110, -1110, -1110, -1110, -1110, -1110, -1110, -1110,
   -1110, -1110, -1110, -1110, -1110, -1110, -1110, -1110, -1110, -1110,
   -1110, -1110, -1110, -1110, -1110, -1110, -1110,     0, -1110, -1110,
   -1110, -1110, -1110, -1110, -1110, -1110, -1110, -1110, -1110,     0,
       0,   327, -1110, -1110,     0,     0,   328,   329,   330, -1110,
   -1110,     0,     0, -1110, -1110, -1110, -1110, -1110, -1110,   331,
     332, -1110, -1110, -1110, -1110, -1110, -1110, -1110, -1110, -1110,
       0, -1110,     0,   333, -1110, -1110,     0,   334,   335,   336,
     337,   338,   339,   340,   341, -1110, -1110, -1110, -1110, -1110,
   -1110, -1110, -1110,   342,   343,     0, -1110,   344,     0,     0,
     345,   878,   346, -1110,     0,   879, -1110, -1110,     0, -1110,
     347,   348,     0,   349,   350,   351,   352, -1256,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2, -1256, -1256, -1256, -1256,
   -1256, -1256, -1256, -1256, -1256, -1256, -1256, -1256, -1256, -1256,
   -1256, -1256, -1256, -1256, -1256, -1256, -1256, -1256, -1256, -1256,
   -1256,     0, -1256, -1256, -1256, -1256, -1256, -1256, -1256, -1256,
   -1256, -1256, -1256,     0,     0,   327, -1256, -1256,     0,     0,
     328,   329,   330, -1256, -1256,     0,     0, -1256, -1256, -1256,
   -1256, -1256, -1256,   331,   332, -1256, -1256, -1256, -1256, -1256,
   -1256, -1256, -1256, -1256,     0, -1256,     0,   333, -1256, -1256,
       0,   334,   335,   336,   337,   338,   339,   340,   341, -1256,
   -1256, -1256, -1256, -1256, -1256, -1256, -1256,   342,   343,     0,
   -1256,   344,     0,     0,   345,   878,   346,  1676,     0,   879,
   -1256, -1256,     0, -1256,   347,   348,     0,   349,   350,   351,
     352, -1214,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,
   -1214, -1214, -1214, -1214, -1214,     0, -1214, -1214, -1214, -1214,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214,     0,     0,   327,
   -1214, -1214,     0,     0,   328,   329,   330, -1214, -1214,     0,
       0, -1214, -1214, -1214, -1214, -1214, -1214,   331,   332, -1214,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,     0, -1214,
       0,   333, -1214, -1214,     0,   334,   335,   336,   337,   338,
     339,   340,   341, -1214, -1214, -1214, -1214, -1214, -1214, -1214,
   -1214,   342,   343,     0, -1214,   344,     0,     0,   345,  1883,
     346, -1214,     0,   879, -1214, -1214,     0, -1214,   347,   348,
       0,   349,   350,   351,   352, -1245,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1245, -1245, -1245, -1245, -1245, -1245,
   -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245,
   -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245,     0,
     663,   664,   665,   666,   667,   668,   669,   670,   671,   672,
     673,     0,     0,   327, -1245, -1245,     0,     0,   328,   329,
     330, -1245, -1245,     0,     0, -1245,    35, -1245, -1245, -1245,
   -1245,   331,   332,  1172, -1245,   676,   677,   678, -1245, -1245,
   -1245, -1245,     0, -1245,     0,   333, -1245, -1245,     0,   334,
     335,   336,   337,   338,   339,   340,   341,    46,    47, -1245,
   -1245, -1245, -1245, -1245, -1245,   342,   343,     0, -1245,   344,
       0,     0,   345,   878,   346,   679,     0,   879, -1245,   274,
       0,   680,   347,   348,     0,   349,   350,   351,   352,  -578,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,     0,     0,   327,  -578,  -578,
       0,     0,   328,   329,   330,  -578,  -578,     0,     0,  -578,
    -578,  -578,  -578,  -578,  -578,   331,   332,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,     0,   333,
    -578,  -578,     0,   334,   335,   336,   337,   338,   339,   340,
     341,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,   342,
     343,     0,  -578,   344,     0,     0,   345,  -578,   346,  1199,
       0,  1200,  -578,  -578,     0,  -578,   347,   348,     0,   349,
     350,   351,   352, -1237,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237,     0, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237,     0,
       0,   327, -1237, -1237,     0,     0,   328,   329,   330, -1237,
   -1237,     0,     0, -1237, -1237, -1237, -1237, -1237, -1237,   331,
     332, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237,
       0, -1237,     0,   333, -1237, -1237,     0,   334,   335,   336,
     337,   338,   339,   340,   341, -1237, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237,   342,   343,     0, -1237,   344,     0,     0,
     345,  2124,   346, -1237,     0,  1200, -1237, -1237,     0, -1237,
     347,   348,     0,   349,   350,   351,   352, -1238,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238,     0, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238,     0,     0,   327, -1238, -1238,     0,     0,
     328,   329,   330, -1238, -1238,     0,     0, -1238, -1238, -1238,
   -1238, -1238, -1238,   331,   332, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238,     0, -1238,     0,   333, -1238, -1238,
       0,   334,   335,   336,   337,   338,   339,   340,   341, -1238,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238,   342,   343,     0,
   -1238,   344,     0,     0,   345,   878,   346,  2125,     0,   879,
   -1238, -1238,     0, -1238,   347,   348,     0,   349,   350,   351,
     352, -1232,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232,
   -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232,
   -1232, -1232, -1232, -1232, -1232,     0,   663,   664,   665,   666,
     667,   668,   669,   670,   671,   672,   673,     0,     0,   327,
   -1232, -1232,     0,     0,   328,   329,   330, -1232, -1232,     0,
       0, -1232,    35, -1232, -1232, -1232, -1232,   331,   332,  1172,
   -1232,   676,   677,   678, -1232, -1232, -1232, -1232,     0, -1232,
       0,   333, -1232, -1232,     0,   334,   335,   336,   337,   338,
     339,   340,   341,    46,    47, -1232, -1232, -1232, -1232, -1232,
   -1232,   342,   343,     0, -1232,   344,     0,     0,   345,   878,
     346,   679,     0,   879, -1232,   274,     0,   680,   347,   348,
       0,   349,   350,   351,   352, -1180,   654,     0, -1180, -1180,
   -1180, -1180,     0, -1180, -1180,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
   -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
   -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,     0,
   -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
   -1180,     0,     0, -1180, -1180, -1180,     0,     0, -1180, -1180,
   -1180, -1180, -1180,     0,     0, -1180, -1180, -1180, -1180, -1180,
   -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
   -1180, -1180,     0, -1180,     0, -1180, -1180, -1180,     0, -1180,
   -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
   -1180, -1180, -1180, -1180, -1180, -1180, -1180,     0, -1180, -1180,
       0,     0, -1180,     0, -1180,   655,     0, -1180, -1180, -1180,
       0, -1180, -1180, -1180,     0, -1180, -1180, -1180, -1180, -1203,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,    21,    22,   263,   264,
      25,    26,    27,     0,   663,   664,   665,   666,   667,   668,
     669,   670,   671,   672,   673,     0,     0,   327,   265, -1203,
       0,     0,   328,   329,   330,    31,    32,     0,     0, -1203,
      35, -1203, -1203, -1203, -1203,   331,   674,   675,   267,   676,
     677,   678, -1203, -1203, -1203, -1203,     0, -1203,     0,   333,
   -1203,   268,     0,   334,   335,   336,   337,   338,   339,   340,
     341,    46,    47,   269,   270,   271,   272,   219,   220,   342,
     343,     0,   273,   344,     0,     0,   345,     0,   346,   679,
       0, -1203, -1203,   274,     0,   680,   347,   348,     0,   349,
     350,   351,   352, -1181,   654,     0, -1181, -1181, -1181, -1181,
       0, -1181, -1181,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181,     0, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,     0,
       0, -1181, -1181, -1181,     0,     0, -1181, -1181, -1181, -1181,
   -1181,     0,     0, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
       0, -1181,     0, -1181, -1181, -1181,     0, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181,     0, -1181, -1181,     0,     0,
   -1181,     0, -1181,   655,     0, -1181, -1181, -1181,     0, -1181,
   -1181, -1181,     0, -1181, -1181, -1181, -1181, -1242,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242,     0,  1164,  1165,  1166,   666,  1167,  1168,  1169,  1170,
     671,   672,  1171,     0,     0,   327, -1242, -1242,     0,     0,
     328,   329,   330, -1242, -1242,     0,     0, -1242,    35, -1242,
   -1242, -1242, -1242,   331,   332,  1172, -1242,   676,   677,   678,
   -1242, -1242, -1242, -1242,     0, -1242,     0,   333, -1242, -1242,
       0,   334,   335,   336,   337,   338,   339,   340,   341,    46,
      47, -1242, -1242, -1242, -1242, -1242, -1242,   342,   343,     0,
   -1242,   344,     0,     0,   345,     0,   346,   679,     0, -1242,
   -1242,   274,     0,   680,   347,   348,     0,   349,   350,   351,
     352, -1258,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258,
   -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258,
   -1258, -1258, -1258, -1258, -1258,     0, -1258, -1258, -1258, -1258,
   -1258, -1258, -1258, -1258, -1258, -1258, -1258,     0,     0,   327,
   -1258, -1258,     0,     0,   328,   329,   330, -1258, -1258,     0,
       0, -1258, -1258, -1258, -1258, -1258, -1258,   331,   332, -1258,
   -1258, -1258, -1258, -1258, -1258, -1258, -1258, -1258,     0, -1258,
       0,   333, -1258, -1258,     0,   334,   335,   336,   337,   338,
     339,   340,   341, -1258, -1258, -1258, -1258, -1258, -1258, -1258,
   -1258,   342,   343,     0, -1258,   344,     0,     0,   345,     0,
     346,  1182,     0, -1258, -1258,   775,     0, -1258,   347,   348,
       0,   349,   350,   351,   352, -1193,  1201,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   213,   214,   215,   216,   217,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,    21,    22,   263,   264,    25,    26,    27,     0,
     663,   664,   665,   666,   667,   668,   669,   670,   671,   672,
     673,     0,     0,   327,   265, -1193,     0,     0,   328,   329,
     330,    31,    32,     0,     0, -1193,    35, -1193, -1193, -1193,
   -1193,   331,   674,   675,   267,   676,   677,   678, -1193, -1193,
   -1193, -1193,     0, -1193,     0,   333, -1193,   268,     0,   334,
     335,   336,   337,   338,   339,   340,   341,    46,    47,   269,
     270,   271,   272,   219,   220,   342,   343,     0,   273,   344,
       0,     0,   345,     0,   346,   679,     0, -1193, -1193,   274,
       0,   680,   347,   348,     0,   349,   350,   351,   352, -1197,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,    21,    22,   263,   264,
      25,    26,    27,     0,   663,   664,   665,   666,   667,   668,
     669,   670,   671,   672,   673,     0,     0,   327,   265, -1197,
       0,     0,   328,   329,   330,    31,    32,     0,     0, -1197,
      35, -1197, -1197, -1197, -1197,   331,   674,   675,   267,   676,
     677,   678, -1197, -1197, -1197, -1197,     0, -1197,     0,   333,
   -1197,   268,     0,   334,   335,   336,   337,   338,   339,   340,
     341,    46,    47,   269,   270,   271,   272,   219,   220,   342,
     343,     0,   273,   344,     0,     0,   345,     0,   346,   679,
       0, -1197, -1197,   274,     0,   680,   347,   348,     0,   349,
     350,   351,   352, -1192,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   213,   214,   215,   216,   217,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
      21,    22,   263,   264,    25,    26,    27,     0,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,     0,
       0,   327,   265, -1192,     0,     0,   328,   329,   330,    31,
      32,     0,     0, -1192,    35, -1192, -1192, -1192, -1192,   331,
     674,   675,   267,   676,   677,   678, -1192, -1192, -1192, -1192,
       0, -1192,     0,   333, -1192,   268,     0,   334,   335,   336,
     337,   338,   339,   340,   341,    46,    47,   269,   270,   271,
     272,   219,   220,   342,   343,     0,   273,   344,     0,     0,
     345,     0,   346,   679,     0, -1192, -1192,   274,     0,   680,
     347,   348,     0,   349,   350,   351,   352, -1196,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   213,   214,   215,   216,
     217,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,    21,    22,   263,   264,    25,    26,
      27,     0,   663,   664,   665,   666,   667,   668,   669,   670,
     671,   672,   673,     0,     0,   327,   265, -1196,     0,     0,
     328,   329,   330,    31,    32,     0,     0, -1196,    35, -1196,
   -1196, -1196, -1196,   331,   674,   675,   267,   676,   677,   678,
   -1196, -1196, -1196, -1196,     0, -1196,     0,   333, -1196,   268,
       0,   334,   335,   336,   337,   338,   339,   340,   341,    46,
      47,   269,   270,   271,   272,   219,   220,   342,   343,     0,
     273,   344,     0,     0,   345,     0,   346,   679,     0, -1196,
   -1196,   274,     0,   680,   347,   348,     0,   349,   350,   351,
     352, -1097,  1214,     0, -1097, -1097, -1097, -1097,     0, -1097,
   -1097,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1097,
   -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097,
   -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097,
   -1097, -1097, -1097, -1097, -1097,     0, -1097, -1097, -1097, -1097,
   -1097, -1097, -1097, -1097, -1097, -1097, -1097,     0,     0, -1097,
   -1097, -1097,     0,     0, -1097, -1097, -1097, -1097, -1097,     0,
       0, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097,
   -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097,     0, -1097,
       0, -1097, -1097, -1097,     0, -1097, -1097, -1097, -1097, -1097,
   -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097,
   -1097, -1097, -1097,     0, -1097, -1097,     0,     0, -1097,     0,
   -1097, -1097,     0, -1097, -1097, -1097,     0, -1097, -1097, -1097,
       0, -1097, -1097, -1097, -1097, -1099,  1215,     0, -1099, -1099,
   -1099, -1099,     0, -1099, -1099,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1099, -1099, -1099, -1099, -1099, -1099, -1099,
   -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099,
   -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099,     0,
   -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099,
   -1099,     0,     0, -1099, -1099, -1099,     0,     0, -1099, -1099,
   -1099, -1099, -1099,     0,     0, -1099, -1099, -1099, -1099, -1099,
   -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099,
   -1099, -1099,     0, -1099,     0, -1099, -1099, -1099,     0, -1099,
   -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099, -1099,
   -1099, -1099, -1099, -1099, -1099, -1099, -1099,     0, -1099, -1099,
       0,     0, -1099,     0, -1099, -1099,     0, -1099, -1099, -1099,
       0, -1099, -1099, -1099,     0, -1099, -1099, -1099, -1099, -1145,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,    21,    22,   263,   264,
      25,    26,    27,     0,   663,   664,   665,   666,   667,   668,
     669,   670,   671,   672,   673,     0,     0,   327,   265, -1145,
       0,     0,   328,   329,   330,    31,    32,     0,     0, -1145,
      35, -1145, -1145, -1145, -1145,   331,   674,   675,   267,   676,
     677,   678, -1145, -1145, -1145, -1145,     0, -1145,     0,   333,
   -1145,   268,     0,   334,   335,   336,   337,   338,   339,   340,
     341,    46,    47,   269,   270,   271,   272,   219,   220,   342,
     343,     0,   273,   344,     0,     0,   345,     0,   346,   679,
       0, -1145, -1145,   274,     0,   680,   347,   348,     0,   349,
     350,   351,   352, -1147,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   213,   214,   215,   216,   217,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
      21,    22,   263,   264,    25,    26,    27,     0,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,     0,
       0,   327,   265, -1147,     0,     0,   328,   329,   330,    31,
      32,     0,     0, -1147,    35, -1147, -1147, -1147, -1147,   331,
     674,   675,   267,   676,   677,   678, -1147, -1147, -1147, -1147,
       0, -1147,     0,   333, -1147,   268,     0,   334,   335,   336,
     337,   338,   339,   340,   341,    46,    47,   269,   270,   271,
     272,   219,   220,   342,   343,     0,   273,   344,     0,     0,
     345,     0,   346,   679,     0, -1147, -1147,   274,     0,   680,
     347,   348,     0,   349,   350,   351,   352, -1194,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   213,   214,   215,   216,
     217,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,    21,    22,   263,   264,    25,    26,
      27,     0,   663,   664,   665,   666,   667,   668,   669,   670,
     671,   672,   673,     0,     0,   327,   265, -1194,     0,     0,
     328,   329,   330,    31,    32,     0,     0, -1194,    35, -1194,
   -1194, -1194, -1194,   331,   674,   675,   267,   676,   677,   678,
   -1194, -1194, -1194, -1194,     0, -1194,     0,   333, -1194,   268,
       0,   334,   335,   336,   337,   338,   339,   340,   341,    46,
      47,   269,   270,   271,   272,   219,   220,   342,   343,     0,
     273,   344,     0,     0,   345,     0,   346,   679,     0, -1194,
   -1194,   274,     0,   680,   347,   348,     0,   349,   350,   351,
     352, -1198,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     213,   214,   215,   216,   217,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,    21,    22,
     263,   264,    25,    26,    27,     0,   663,   664,   665,   666,
     667,   668,   669,   670,   671,   672,   673,     0,     0,   327,
     265, -1198,     0,     0,   328,   329,   330,    31,    32,     0,
       0, -1198,    35, -1198, -1198, -1198, -1198,   331,   674,   675,
     267,   676,   677,   678, -1198, -1198, -1198, -1198,     0, -1198,
       0,   333, -1198,   268,     0,   334,   335,   336,   337,   338,
     339,   340,   341,    46,    47,   269,   270,   271,   272,   219,
     220,   342,   343,     0,   273,   344,     0,     0,   345,     0,
     346,   679,     0, -1198, -1198,   274,     0,   680,   347,   348,
       0,   349,   350,   351,   352, -1195,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   213,   214,   215,   216,   217,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,    21,    22,   263,   264,    25,    26,    27,     0,
     663,   664,   665,   666,   667,   668,   669,   670,   671,   672,
     673,     0,     0,   327,   265, -1195,     0,     0,   328,   329,
     330,    31,    32,     0,     0, -1195,    35, -1195, -1195, -1195,
   -1195,   331,   674,   675,   267,   676,   677,   678, -1195, -1195,
   -1195, -1195,     0, -1195,     0,   333, -1195,   268,     0,   334,
     335,   336,   337,   338,   339,   340,   341,    46,    47,   269,
     270,   271,   272,   219,   220,   342,   343,     0,   273,   344,
       0,     0,   345,     0,   346,   679,     0, -1195, -1195,   274,
       0,   680,   347,   348,     0,   349,   350,   351,   352, -1199,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,    21,    22,   263,   264,
      25,    26,    27,     0,   663,   664,   665,   666,   667,   668,
     669,   670,   671,   672,   673,     0,     0,   327,   265, -1199,
       0,     0,   328,   329,   330,    31,    32,     0,     0, -1199,
      35, -1199, -1199, -1199, -1199,   331,   674,   675,   267,   676,
     677,   678, -1199, -1199, -1199, -1199,     0, -1199,     0,   333,
   -1199,   268,     0,   334,   335,   336,   337,   338,   339,   340,
     341,    46,    47,   269,   270,   271,   272,   219,   220,   342,
     343,     0,   273,   344,     0,     0,   345,     0,   346,   679,
       0, -1199, -1199,   274,     0,   680,   347,   348,     0,   349,
     350,   351,   352, -1190,   654,     0, -1190, -1190, -1190, -1190,
       0, -1190, -1190,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190,
   -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190,
   -1190, -1190, -1190, -1190, -1190, -1190, -1190,     0, -1190, -1190,
   -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190,     0,
       0, -1190, -1190, -1190,     0,     0, -1190, -1190, -1190, -1190,
   -1190,     0,     0, -1190, -1190, -1190, -1190, -1190, -1190, -1190,
   -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190,
       0, -1190,     0, -1190, -1190, -1190,     0, -1190, -1190, -1190,
   -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190, -1190,
   -1190, -1190, -1190, -1190, -1190,     0, -1190, -1190,     0,     0,
   -1190,     0, -1190,   655,     0, -1190, -1190, -1190,     0, -1190,
   -1190, -1190,     0, -1190, -1190, -1190, -1190, -1191,   654,     0,
   -1191, -1191, -1191, -1191,     0, -1191, -1191,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191,     0, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191,     0,     0, -1191, -1191, -1191,     0,     0,
   -1191, -1191, -1191, -1191, -1191,     0,     0, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191,     0, -1191,     0, -1191, -1191, -1191,
       0, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,     0,
   -1191, -1191,     0,     0, -1191,     0, -1191,   655,     0, -1191,
   -1191, -1191,     0, -1191, -1191, -1191,     0, -1191, -1191, -1191,
   -1191, -1021,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021,     0, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021,     0,     0,   327,
   -1021, -1021,     0,     0,   328,   329,   330, -1021, -1021,     0,
       0, -1021, -1021, -1021, -1021, -1021, -1021,   331,   332, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,     0, -1021,
       0,   333, -1021, -1021,     0,   334,   335,   336,   337,   338,
     339,   340,   341, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021,   342,   343,     0, -1021,   344,     0,     0,   345,     0,
     346, -1021,     0,  1851,  1852,  1062,     0, -1021,   347,   348,
       0,   349,   350,   351,   352, -1151,   654,     0, -1151, -1151,
   -1151, -1151,     0, -1151, -1151,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,     0,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151,     0,     0, -1151, -1151, -1151,     0,     0, -1151, -1151,
   -1151, -1151, -1151,     0,     0, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151,     0, -1151,     0, -1151, -1151, -1151,     0, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151,     0, -1151, -1151,
       0,     0, -1151,     0, -1151,   655,     0, -1151, -1151, -1151,
       0, -1151, -1151, -1151,     0, -1151, -1151, -1151, -1151, -1152,
     654,     0, -1152, -1152, -1152, -1152,     0, -1152, -1152,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152,     0, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152,     0,     0, -1152, -1152, -1152,
       0,     0, -1152, -1152, -1152, -1152, -1152,     0,     0, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152,     0, -1152,     0, -1152,
   -1152, -1152,     0, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152,     0, -1152, -1152,     0,     0, -1152,     0, -1152,   655,
       0, -1152, -1152, -1152,     0, -1152, -1152, -1152,     0, -1152,
   -1152, -1152, -1152, -1148,   654,     0, -1148, -1148, -1148, -1148,
       0, -1148, -1148,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148,     0, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,     0,
       0, -1148, -1148, -1148,     0,     0, -1148, -1148, -1148, -1148,
   -1148,     0,     0, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
       0, -1148,     0, -1148, -1148, -1148,     0, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148,     0, -1148, -1148,     0,     0,
   -1148,     0, -1148,   655,     0, -1148, -1148, -1148,     0, -1148,
   -1148, -1148,     0, -1148, -1148, -1148, -1148, -1023,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2, -1023, -1023, -1023, -1023,
   -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023,
   -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023,
   -1023,     0, -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023,
   -1023, -1023, -1023,     0,     0,   327, -1023, -1023,     0,     0,
     328,   329,   330, -1023, -1023,     0,     0, -1023, -1023, -1023,
   -1023, -1023, -1023,   331,   332, -1023, -1023, -1023, -1023, -1023,
   -1023, -1023, -1023, -1023,     0, -1023,     0,   333, -1023, -1023,
       0,   334,   335,   336,   337,   338,   339,   340,   341, -1023,
   -1023, -1023, -1023, -1023, -1023, -1023, -1023,   342,   343,     0,
   -1023,   344,     0,     0,   345,     0,   346, -1023,     0, -1023,
    2034,  1062,     0, -1023,   347,   348,     0,   349,   350,   351,
     352, -1015,  2037,     0, -1015, -1015, -1015, -1015,     0, -1015,
   -1015,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015,     0, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015,     0,     0, -1015,
   -1015, -1015,     0,     0, -1015, -1015, -1015, -1015, -1015,     0,
       0, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,     0, -1015,
       0, -1015, -1015, -1015,     0, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015,     0, -1015, -1015,     0,     0, -1015,     0,
   -1015, -1015,     0, -1015, -1015, -1015,     0, -1015, -1015, -1015,
       0, -1015, -1015, -1015, -1015, -1149,   654,     0, -1149, -1149,
   -1149, -1149,     0, -1149, -1149,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,     0,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149,     0,     0, -1149, -1149, -1149,     0,     0, -1149, -1149,
   -1149, -1149, -1149,     0,     0, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149,     0, -1149,     0, -1149, -1149, -1149,     0, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149,     0, -1149, -1149,
       0,     0, -1149,     0, -1149,   655,     0, -1149, -1149, -1149,
       0, -1149, -1149, -1149,     0, -1149, -1149, -1149, -1149, -1150,
     654,     0, -1150, -1150, -1150, -1150,     0, -1150, -1150,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150,     0, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150,     0,     0, -1150, -1150, -1150,
       0,     0, -1150, -1150, -1150, -1150, -1150,     0,     0, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150,     0, -1150,     0, -1150,
   -1150, -1150,     0, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150,     0, -1150, -1150,     0,     0, -1150,     0, -1150,   655,
       0, -1150, -1150, -1150,     0, -1150, -1150, -1150,     0, -1150,
   -1150, -1150, -1150, -1239,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239,     0, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,     0,
       0,   327, -1239, -1239,     0,     0,   328,   329,   330, -1239,
   -1239,     0,     0, -1239, -1239, -1239, -1239, -1239, -1239,   331,
     332, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
       0, -1239,     0,   333, -1239, -1239,     0,   334,   335,   336,
     337,   338,   339,   340,   341, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239,   342,   343,     0, -1239,   344,     0,     0,
     345,     0,   346, -1239,     0, -1239, -1239, -1239,     0, -1239,
     347,   348,     0,   349,   350,   351,   352, -1016,  2116,     0,
   -1016, -1016, -1016, -1016,     0, -1016, -1016,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016,     0, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016,     0,     0, -1016, -1016, -1016,     0,     0,
   -1016, -1016, -1016, -1016, -1016,     0,     0, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016,     0, -1016,     0, -1016, -1016, -1016,
       0, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,     0,
   -1016, -1016,     0,     0, -1016,     0, -1016, -1016,     0, -1016,
   -1016, -1016,     0, -1016, -1016, -1016,     0, -1016, -1016, -1016,
   -1016,  -917,   616,     0,  -917,  -917,  -917,  -917,     0,  -917,
    -917,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -917,
    -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,     0,     0,  -917,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -917,
    -917,  -917,     0,     0,  -917,  -917,  -917,  -917,  -917,     0,
       0,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,     0,     0,  -917,  -917,  -917,  -917,     0,  -917,
       0,  -917,  -917,  -917,     0,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,  -917,
    -917,  -917,  -917,     0,     0,  -917,     0,     0,  -917,   889,
    -917,  -917,     0,   618,  -917,  -917,     0,     0,  -917,  -917,
       0,  -917,  -917,  -917,  -917,   322,     0,     1,   323,   112,
     324,     0,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   213,   214,   215,   216,   217,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,    21,    22,   263,   264,    25,    26,    27,     0,   663,
     664,   665,   666,   667,   668,   669,   670,   671,   672,   673,
       0,     0,   327,   265,     0,     0,     0,   328,   329,   330,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
     331,   674,   675,   267,   676,   677,   678,     0,     0,     0,
       0,     0,     0,     0,   333,     0,   268,     0,   334,   335,
     336,   337,   338,   339,   340,   341,    46,    47,   269,   270,
     271,   272,   219,   220,   342,   343,     0,   273,   344,     0,
       0,   345,     0,   346,   679,     0,     0,     0,   274,     0,
     680,   347,   348,     0,   349,   350,   351,   352,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   213,   214,   215,   216,
     217,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,    21,    22,   263,   264,    25,    26,
      27,     0,  1164,  1165,  1166,   666,  1167,  1168,  1169,  1170,
     671,   672,  1171,     0,     0,   327,   265,     0,     0,     0,
     328,   329,   330,    31,    32,     0,     0,     0,    35,     0,
       0,     0,     0,   331,   674,   675,   267,   676,   677,   678,
       0,     0,     0,     0,     0,     0,     0,   333,     0,   268,
       0,   334,   335,   336,   337,   338,   339,   340,   341,    46,
      47,   269,   270,   271,   272,   219,   220,   342,   343,     0,
     273,   344,     0,     0,   345,     0,   346,   679,     0,     0,
       0,   274,     0,   680,   347,   348,     0,   349,   350,   351,
     352,   322,     0,     1,   323,   112,   324,     0,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   213,
     214,   215,   216,   217,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,    21,    22,   263,
     264,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   265,
       0,     0,     0,   328,   329,   330,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,   331,   674,    41,   267,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     333,     0,   268,     0,   334,   335,   336,   337,   338,   339,
     340,   341,    46,    47,   269,   270,   271,   272,   219,   220,
     342,   343,     0,     0,   344,     0,     0,   345,     0,   346,
    1032,     0,  1033,  1034,   775,     0,     0,   347,   348,     0,
     349,   350,   351,   352,  1288,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   213,   214,   215,   216,   217,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
      21,    22,   263,   264,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,   265,     0,     0,     0,   328,   329,   330,    31,
      32,     0,     0,     0,    35,     0,     0,     0,     0,   331,
     674,    41,   267,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   333,     0,   268,     0,   334,   335,   336,
     337,   338,   339,   340,   341,    46,    47,   269,   270,   271,
     272,   219,   220,   342,   343,     0,     0,   344,     0,     0,
     345,     0,   346,  1032,     0,  1033,  -110,   775,     0,     0,
     347,   348,     0,   349,   350,   351,   352,  1295,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,    21,    22,   263,   264,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   265,     0,     0,     0,   328,
     329,   330,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,   331,   674,    41,   267,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   333,     0,   268,     0,
     334,   335,   336,   337,   338,   339,   340,   341,    46,    47,
     269,   270,   271,   272,   219,   220,   342,   343,     0,     0,
     344,     0,     0,   345,     0,   346,  1032,     0,  1033,   -98,
     775,     0,     0,   347,   348,     0,   349,   350,   351,   352,
    1299,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,    21,    22,   263,   264,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,   265,     0,
       0,     0,   328,   329,   330,    31,    32,     0,     0,     0,
      35,     0,     0,     0,     0,   331,   674,    41,   267,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   333,
       0,   268,     0,   334,   335,   336,   337,   338,   339,   340,
     341,    46,    47,   269,   270,   271,   272,   219,   220,   342,
     343,     0,     0,   344,     0,     0,   345,     0,   346,  1032,
       0,  1033,  -102,   775,     0,     0,   347,   348,     0,   349,
     350,   351,   352,   322,     0,     1,   323,   112,   324,     0,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   213,   214,   215,   216,   217,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,    21,
      22,   263,   264,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   265,     0,     0,     0,   328,   329,   330,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,   331,   674,
      41,   267,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   333,     0,   268,     0,   334,   335,   336,   337,
     338,   339,   340,   341,    46,    47,   269,   270,   271,   272,
     219,   220,   342,   343,     0,     0,   344,     0,     0,   345,
       0,   346,  1563,     0,  1033,   -65,   775,     0,     0,   347,
     348,     0,   349,   350,   351,   352,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   213,   214,   215,   216,   217,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,    21,    22,   263,   264,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,   265,     0,     0,     0,   328,   329,
     330,    31,    32,     0,     0,     0,    35,     0,     0,     0,
       0,   331,   674,    41,   267,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   333,     0,   268,     0,   334,
     335,   336,   337,   338,   339,   340,   341,    46,    47,   269,
     270,   271,   272,   219,   220,   342,   343,     0,     0,   344,
       0,     0,   345,     0,   346,  1572,     0,  1033,  1573,   775,
       0,     0,   347,   348,     0,   349,   350,   351,   352,  1632,
       0,     1,   323,   112,   324,     0,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   213,   214,   215,
     216,   217,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,    21,    22,   263,   264,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   265,     0,     0,
       0,   328,   329,   330,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,   331,   674,    41,   267,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   333,     0,
     268,     0,   334,   335,   336,   337,   338,   339,   340,   341,
      46,    47,   269,   270,   271,   272,   219,   220,   342,   343,
       0,     0,   344,     0,     0,   345,     0,   346,  1032,     0,
    1033,   -81,   775,     0,     0,   347,   348,     0,   349,   350,
     351,   352,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     213,   214,   215,   216,   217,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,    21,    22,
     263,   264,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
     265,     0,     0,     0,   328,   329,   330,    31,    32,     0,
       0,     0,    35,     0,     0,     0,     0,   331,   674,    41,
     267,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   333,     0,   268,     0,   334,   335,   336,   337,   338,
     339,   340,   341,    46,    47,   269,   270,   271,   272,   219,
     220,   342,   343,     0,     0,   344,     0,     0,   345,     0,
     346,  1572,     0,  1033,  -107,   775,     0,     0,   347,   348,
       0,   349,   350,   351,   352,   322,     0,     1,   323,   112,
     324,     0,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   213,   214,   215,   216,   217,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,    21,    22,   263,   264,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   265,     0,     0,     0,   328,   329,   330,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
     331,   674,    41,   267,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   333,     0,   268,     0,   334,   335,
     336,   337,   338,   339,   340,   341,    46,    47,   269,   270,
     271,   272,   219,   220,   342,   343,     0,     0,   344,     0,
       0,   345,     0,   346,  1572,     0,  1033,   -97,   775,     0,
       0,   347,   348,     0,   349,   350,   351,   352,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   213,   214,   215,   216,
     217,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,    21,    22,   263,   264,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,   265,     0,     0,     0,
     328,   329,   330,    31,    32,     0,     0,     0,    35,     0,
       0,     0,     0,   331,   674,    41,   267,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   333,     0,   268,
       0,   334,   335,   336,   337,   338,   339,   340,   341,    46,
      47,   269,   270,   271,   272,   219,   220,   342,   343,     0,
       0,   344,     0,     0,   345,     0,   346,  1572,     0,  1033,
    -101,   775,     0,     0,   347,   348,     0,   349,   350,   351,
     352,  1810,     0,     1,   323,   112,   324,     0,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   213,
     214,   215,   216,   217,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,    21,    22,   263,
     264,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   265,
       0,     0,     0,   328,   329,   330,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,   331,   674,    41,   267,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     333,     0,   268,     0,   334,   335,   336,   337,   338,   339,
     340,   341,    46,    47,   269,   270,   271,   272,   219,   220,
     342,   343,     0,     0,   344,     0,     0,   345,     0,   346,
    1032,     0,  1033,   -88,   775,     0,     0,   347,   348,     0,
     349,   350,   351,   352,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   213,   214,   215,   216,   217,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
      21,    22,   263,   264,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,   265,     0,     0,     0,   328,   329,   330,    31,
      32,     0,     0,     0,    35,     0,     0,     0,     0,   331,
     674,    41,   267,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   333,     0,   268,     0,   334,   335,   336,
     337,   338,   339,   340,   341,    46,    47,   269,   270,   271,
     272,   219,   220,   342,   343,     0,     0,   344,     0,     0,
     345,     0,   346,  1572,     0,  1033,   -78,   775,     0,     0,
     347,   348,     0,   349,   350,   351,   352,   322,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,    21,    22,   263,   264,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   265,     0,     0,     0,   328,
     329,   330,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,   331,   674,    41,   267,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   333,     0,   268,     0,
     334,   335,   336,   337,   338,   339,   340,   341,    46,    47,
     269,   270,   271,   272,   219,   220,   342,   343,     0,     0,
     344,     0,     0,   345,     0,   346,  1572,     0,  1033,   -85,
     775,     0,     0,   347,   348,     0,   349,   350,   351,   352,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,    30,     0,
       0,     0,   328,   329,   330,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,   331,   436,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   333,
       0,    43,     0,   334,   335,   336,   337,   338,   339,   340,
     341,    46,    47,    48,    49,    50,    51,   219,   220,   342,
     343,     0,     0,   344,     0,     0,   345,   322,   346,     1,
     323,   112,   324,     0,   325,   326,   347,   348,     0,   349,
     350,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   907,    30,     0,     0,     0,   328,
     329,   330,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,   331,   436,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   333,     0,    43,     0,
     334,   335,   336,   337,   338,   339,   340,   341,    46,    47,
      48,    49,    50,    51,   219,   220,   342,   343,     0,     0,
     344,     0,     0,   345,   322,   346,     1,   323,   112,   324,
       0,   325,   326,   347,   348,     0,   349,   350,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,    30,     0,     0,     0,   328,   329,   330,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,   331,
     436,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   333,     0,    43,     0,   334,   335,   336,
     337,   338,   339,   340,   341,    46,    47,    48,    49,    50,
      51,     0,     0,   342,   343,     0,     0,   344,     0,     0,
     345,   765,   346,     0,     0,     0,     0,     0,     0,     0,
     347,   348,     0,   349,   350,   351,   352,   322,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1234,    30,     0,     0,     0,   328,
     329,   330,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,   331,   436,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   333,     0,    43,     0,
     334,   335,   336,   337,   338,   339,   340,   341,    46,    47,
      48,    49,    50,    51,     0,     0,   342,   343,     0,     0,
     344,     0,     0,   345,   765,   346,     0,     0,     0,     0,
       0,     0,     0,   347,   348,     0,   349,   350,   351,   352,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,    30,     0,
       0,     0,   328,   329,   330,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,   331,   436,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   333,
       0,    43,     0,   334,   335,   336,   337,   338,   339,   340,
     341,    46,    47,    48,    49,    50,    51,     0,     0,   342,
     343,     0,     0,   344,     0,     0,   345,   322,   346,     1,
     323,   112,   324,   274,   325,   326,   347,   348,     0,   349,
     350,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       8,     9,    10,   597,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,    30,     0,     0,     0,   328,
     329,   330,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,   331,   436,    41,    42,     0,   322,     0,     1,
     323,   112,   324,     0,   325,   326,   333,     0,    43,     0,
     334,   335,   336,   337,   338,   339,   340,   341,    46,    47,
      48,    49,    50,    51,     2,     0,   342,   343,     0,     0,
     930,     0,     0,   931,   765,   346,     0,     0,     0,     0,
       0,     0,     0,   347,   348,     0,   349,   350,   351,   352,
       0,  1164,  1165,  1166,   666,  1167,  1168,  1169,  1170,   671,
     672,  1171,     0,     0,   327,     0,     0,     0,     0,   328,
     329,   330,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,   331,   332,  1172,     0,   676,   677,   678,     0,
       0,     0,     0,     0,     0,     0,   333,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,    46,    47,
       0,     0,     0,     0,     0,     0,   342,   343,     0,     0,
     344,     0,     0,   345,  -454,   346,   679,     0,  -454,     0,
     274,     0,   680,   347,   348,     0,   349,   350,   351,   352,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1164,  1165,  1166,   666,  1167,  1168,
    1169,  1170,   671,   672,  1171,     0,     0,   327,     0,     0,
       0,     0,   328,   329,   330,     0,     0,     0,     0,     0,
      35,     0,     0,     0,     0,   331,   332,  1172,     0,   676,
     677,   678,     0,     0,     0,     0,     0,     0,     0,   333,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,    46,    47,     0,     0,     0,     0,     0,     0,   342,
     343,     0,     0,   344,     0,     0,   345,   878,   346,   679,
       0,   879,     0,   274,     0,   680,   347,   348,     0,   349,
     350,   351,   352,  1886,     0,     1,   323,   112,   324,     0,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1164,  1165,  1166,
     666,  1167,  1168,  1169,  1170,   671,   672,  1171,     0,     0,
     327,     0,     0,     0,     0,   328,   329,   330,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,   331,   332,
    1172,     0,   676,   677,   678,     0,     0,     0,     0,     0,
       0,     0,   333,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,    46,    47,     0,     0,     0,     0,
       0,     0,   342,   343,     0,     0,   344,     0,     0,   345,
       0,   346,   679,     0,     0,     0,   274,     0,   680,   347,
     348,     0,   349,   350,   351,   352,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     663,   664,   665,   666,   667,   668,   669,   670,   671,   672,
     673,     0,     0,   327,     0,     0,     0,     0,   328,   329,
     330,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,   331,   332,  1172,     0,   676,   677,   678,     0,     0,
       0,     0,     0,     0,     0,   333,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,    46,    47,     0,
       0,     0,     0,     0,     0,   342,   343,     0,     0,   344,
       0,     0,   345,     0,   346,   679,     0,     0,     0,   274,
       0,   680,   347,   348,     0,   349,   350,   351,   352,   322,
       0,     1,   323,   112,   324,     0,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
       0,   328,   329,   330,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,   331,   332,    41,   322,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,   333,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
      46,    47,     0,     0,     2,     0,     0,     0,   342,   343,
       0,     0,   930,     0,     0,   931,   765,   346,     0,     0,
       0,     0,     0,     0,     0,   347,   348,     0,   349,   350,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,     0,   328,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,  1906,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,   333,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     2,     0,     0,     0,     0,   342,   343,     0,     0,
     344,     0,     0,   345,   878,   346,     0,     0,  1773,     0,
       0,     0,  1781,   347,   348,     0,   349,   350,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,     0,     0,     0,     0,   328,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
     332,   322,     0,     1,   323,   112,   324,     0,   325,   326,
       0,     0,     0,   333,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,     0,     0,     0,     2,     0,
       0,     0,     0,   342,   343,     0,     0,   344,     0,     0,
     345,   878,   346,  1907,     0,   879,     0,     0,     0,     0,
     347,   348,     0,   349,   350,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,     0,   328,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
     333,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,     0,     0,     0,     2,     0,     0,     0,     0,
     342,   343,     0,     0,   344,     0,     0,   345,   878,   346,
       0,     0,  1773,     0,     0,     0,  1924,   347,   348,     0,
     349,   350,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,     0,     0,     0,     0,
     328,   329,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,   332,   322,     0,     1,   323,   112,
     324,     0,   325,   326,     0,     0,     0,   333,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,     0,
       0,     0,     2,     0,     0,     0,     0,   342,   343,     0,
       0,   344,     0,     0,   345,   878,   346,     0,     0,  1773,
       0,     0,     0,  1928,   347,   348,     0,   349,   350,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,     0,   328,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,  2058,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,   333,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,     0,     0,     0,     2,
       0,     0,     0,     0,   342,   343,     0,     0,   344,     0,
       0,   345,   878,   346,  1907,     0,   879,     0,     0,     0,
       0,   347,   348,     0,   349,   350,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   322,
       0,     1,   323,   112,   324,     0,   325,   326,     0,     0,
       0,   333,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,     0,     0,     0,     2,     0,     0,     0,
       0,   342,   343,     0,     0,   344,     0,     0,   345,   878,
     346,  1907,     0,   879,     0,     0,     0,     0,   347,   348,
       0,   349,   350,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
       0,   328,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,   333,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
       0,     0,     0,     2,     0,     0,     0,     0,   342,   343,
       0,     0,   344,     0,     0,   345,     0,   346,     0,     0,
    2102,  2103,  1062,     0,     0,   347,   348,     0,   349,   350,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,     0,   328,   329,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   322,     0,     1,   323,   112,   324,     0,
     325,   326,     0,     0,     0,   333,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
       2,     0,     0,     0,     0,   342,   343,     0,     0,   344,
       0,     0,   345,     0,   346,     0,     0,  2114,  2115,  1062,
       0,     0,   347,   348,     0,   349,   350,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,     0,   328,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,   333,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,     0,     0,     0,     2,     0,     0,
       0,     0,   342,   343,     0,     0,   344,     0,     0,   345,
    2126,   346,  2127,     0,  1200,     0,     0,     0,     0,   347,
     348,     0,   349,   350,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,     0,   328,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,   332,   322,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,     0,   333,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,     0,     0,     0,     2,     0,     0,     0,     0,   342,
     343,     0,     0,   344,     0,     0,   345,   878,   346,  2125,
       0,   879,     0,     0,     0,     0,   347,   348,     0,   349,
     350,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,     0,   328,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,   333,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     2,     0,     0,     0,     0,   342,   343,     0,     0,
     344,     0,     0,   345,     0,   346,     0,     0,  2219,  2220,
    1062,     0,     0,   347,   348,     0,   349,   350,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,     0,     0,     0,     0,   328,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
     332,   322,     0,     1,   323,   112,   324,     0,   325,   326,
       0,     0,     0,   333,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,     0,     0,     0,     2,     0,
       0,     0,     0,   342,   343,     0,     0,   344,     0,     0,
     345,     0,   346,     0,     0,     0,     0,   775,     0,     0,
     347,   348,   776,   349,   350,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,     0,   328,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
     333,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,     0,     0,     0,     2,     0,     0,     0,     0,
     342,   343,     0,     0,   344,     0,     0,   345,   873,   346,
       0,     0,   874,     0,     0,     0,     0,   347,   348,     0,
     349,   350,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,     0,     0,     0,     0,
     328,   329,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,   332,   322,     0,     1,   323,   112,
     324,     0,   325,   326,     0,     0,     0,   333,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,     0,
       0,     0,     2,     0,     0,     0,     0,   342,   343,     0,
       0,   344,     0,     0,   345,   878,   346,     0,     0,   879,
       0,     0,     0,     0,   347,   348,     0,   349,   350,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,     0,   328,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,   333,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,     0,     0,     0,     2,
       0,     0,     0,     0,   342,   343,     0,     0,   344,     0,
       0,   345,     0,   346,  1199,     0,  1200,     0,     0,     0,
       0,   347,   348,     0,   349,   350,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   322,
       0,     1,   323,   112,   324,     0,   325,   326,     0,     0,
       0,   333,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,     0,     0,     0,     2,     0,     0,     0,
       0,   342,   343,     0,     0,   344,     0,     0,   345,  1304,
     346,     0,     0,     0,     0,   775,     0,     0,   347,   348,
       0,   349,   350,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
       0,   328,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,   333,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
       0,     0,     0,     2,     0,     0,     0,     0,   342,   343,
       0,     0,   344,     0,     0,   345,  1371,   346,     0,     0,
       0,     0,   775,     0,     0,   347,   348,     0,   349,   350,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,     0,   328,   329,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   322,     0,     1,   323,   112,   324,     0,
     325,   326,     0,     0,     0,   333,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
       2,     0,     0,     0,     0,   342,   343,     0,     0,   344,
       0,     0,   345,  1630,   346,     0,     0,  1631,     0,     0,
       0,     0,   347,   348,     0,   349,   350,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,     0,   328,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
    1665,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,   333,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,     0,     0,     0,     2,     0,     0,
       0,     0,   342,   343,     0,     0,   344,     0,     0,   345,
       0,   346,  1182,     0,     0,     0,   775,     0,     0,   347,
     348,     0,   349,   350,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,     0,   328,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,   332,   322,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,     0,   333,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,     0,     0,     0,     2,     0,     0,     0,     0,   342,
     343,     0,     0,   344,     0,     0,   345,  1666,   346,  1667,
       0,     0,     0,     0,     0,     0,   347,   348,     0,   349,
     350,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,     0,   328,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,   333,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     2,     0,     0,     0,     0,   342,   343,     0,     0,
     344,     0,     0,   345,     0,   346,  1675,     0,  1200,     0,
       0,     0,     0,   347,   348,     0,   349,   350,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,     0,     0,     0,     0,   328,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
     332,   322,     0,     1,   323,   112,   324,     0,   325,   326,
       0,     0,     0,   333,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,     0,     0,     0,     2,     0,
       0,     0,     0,   342,   343,     0,     0,   344,     0,     0,
     345,  1737,   346,     0,     0,  1200,     0,     0,     0,     0,
     347,   348,     0,   349,   350,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,     0,   328,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
     333,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,     0,     0,     0,     2,     0,     0,     0,     0,
     342,   343,     0,     0,   344,     0,     0,   345,     0,   346,
       0,     0,  1200,     0,     0,     0,     0,   347,   348,  1767,
     349,   350,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,     0,     0,     0,     0,
     328,   329,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,   332,   322,     0,     1,   323,   112,
     324,     0,   325,   326,     0,     0,     0,   333,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,     0,
       0,     0,     2,     0,     0,     0,     0,   342,   343,     0,
       0,   344,     0,     0,   345,     0,   346,     0,     0,  1770,
       0,     0,     0,  1771,   347,   348,     0,   349,   350,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,     0,   328,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,   333,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,     0,     0,     0,     2,
       0,     0,     0,     0,   342,   343,     0,     0,   344,     0,
       0,   345,     0,   346,     0,     0,  1200,     0,     0,     0,
       0,   347,   348,  1777,   349,   350,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   322,
       0,     1,   323,   112,   324,     0,   325,   326,     0,     0,
       0,   333,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,     0,     0,     0,     2,     0,     0,     0,
       0,   342,   343,     0,     0,   344,     0,     0,   345,     0,
     346,     0,     0,  1770,     0,     0,     0,  1779,   347,   348,
       0,   349,   350,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
       0,   328,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,   333,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
       0,     0,     0,     2,     0,     0,     0,     0,   342,   343,
       0,     0,   344,     0,     0,   345,  1882,   346,     0,     0,
    1200,     0,     0,     0,     0,   347,   348,     0,   349,   350,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,     0,   328,   329,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   322,     0,     1,   323,   112,   324,     0,
     325,   326,     0,     0,     0,   333,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
       2,     0,     0,     0,     0,   342,   343,     0,     0,   344,
       0,     0,   345,  1884,   346,     0,     0,  1200,     0,     0,
       0,     0,   347,   348,     0,   349,   350,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,     0,   328,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,   333,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,     0,     0,     0,     2,     0,     0,
       0,     0,   342,   343,     0,     0,   344,     0,     0,   345,
    1885,   346,     0,     0,   879,     0,     0,     0,     0,   347,
     348,     0,   349,   350,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,     0,   328,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,   332,   322,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,     0,   333,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,     0,     0,     0,     2,     0,     0,     0,     0,   342,
     343,     0,     0,   344,     0,     0,   345,  1888,   346,     0,
       0,  1200,     0,     0,     0,     0,   347,   348,     0,   349,
     350,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,     0,   328,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,   333,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     2,     0,     0,     0,     0,   342,   343,     0,     0,
     344,     0,     0,   345,  1666,   346,  1667,     0,     0,     0,
       0,     0,     0,   347,   348,     0,   349,   350,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,     0,     0,     0,     0,   328,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
     332,  1908,     0,     1,   323,   112,   324,     0,   325,   326,
       0,     0,     0,   333,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,     0,     0,     0,     2,     0,
       0,     0,     0,   342,   343,     0,     0,   344,     0,     0,
     345,     0,   346,  1905,     0,  1200,     0,     0,     0,     0,
     347,   348,     0,   349,   350,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,     0,   328,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
     333,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,     0,     0,     0,     2,     0,     0,     0,     0,
     342,   343,     0,     0,   344,     0,     0,   345,  1909,   346,
    1667,     0,     0,     0,     0,     0,     0,   347,   348,     0,
     349,   350,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,     0,     0,     0,     0,
     328,   329,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,   332,   322,     0,     1,   323,   112,
     324,     0,   325,   326,     0,     0,     0,   333,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,     0,
       0,     0,     2,     0,     0,     0,     0,   342,   343,     0,
       0,   344,     0,     0,   345,     0,   346,     0,     0,  1770,
       0,     0,     0,  1922,   347,   348,     0,   349,   350,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,     0,   328,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,   333,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,     0,     0,     0,     2,
       0,     0,     0,     0,   342,   343,     0,     0,   344,     0,
       0,   345,     0,   346,     0,     0,  1770,     0,     0,     0,
    1926,   347,   348,     0,   349,   350,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   322,
       0,     1,   323,   112,   324,     0,   325,   326,     0,     0,
       0,   333,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,     0,     0,     0,     2,     0,     0,     0,
       0,   342,   343,     0,     0,   344,     0,     0,   345,  2042,
     346,     0,     0,  1200,     0,     0,     0,     0,   347,   348,
       0,   349,   350,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
       0,   328,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,   333,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
       0,     0,     0,     2,     0,     0,     0,     0,   342,   343,
       0,     0,   344,     0,     0,   345,  1883,   346,     0,     0,
     879,     0,     0,     0,     0,   347,   348,     0,   349,   350,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,     0,   328,   329,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   322,     0,     1,   323,   112,   324,     0,
     325,   326,     0,     0,     0,   333,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
       2,     0,     0,     0,     0,   342,   343,     0,     0,   344,
       0,     0,   345,  2050,   346,     0,     0,  1200,     0,     0,
       0,     0,   347,   348,     0,   349,   350,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,     0,   328,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,   333,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,     0,     0,     0,     2,     0,     0,
       0,     0,   342,   343,     0,     0,   344,     0,     0,   345,
    1909,   346,  1667,     0,     0,     0,     0,     0,     0,   347,
     348,     0,   349,   350,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,     0,   328,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,   332,   322,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,     0,   333,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,     0,     0,     0,     2,     0,     0,     0,     0,   342,
     343,     0,     0,   344,     0,     0,   345,  2130,   346,     0,
       0,  1200,     0,     0,     0,     0,   347,   348,     0,   349,
     350,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,     0,   328,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,   333,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     2,     0,     0,     0,     0,   342,   343,     0,     0,
     344,     0,     0,   345,     0,   346,     0,     0,     0,  2158,
    1062,     0,     0,   347,   348,     0,   349,   350,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,     0,     0,     0,     0,   328,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
     332,   322,     0,     1,   323,   112,   324,     0,   325,   326,
       0,     0,     0,   333,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,     0,     0,     0,     2,     0,
       0,     0,     0,   342,   343,     0,     0,   344,     0,     0,
     345,     0,   346,     0,     0,     0,  2160,  1062,     0,     0,
     347,   348,     0,   349,   350,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,     0,   328,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
     333,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,     0,     0,     0,     2,     0,     0,     0,     0,
     342,   343,     0,     0,   344,     0,     0,   345,  2163,   346,
       0,     0,  1200,     0,     0,     0,     0,   347,   348,     0,
     349,   350,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,     0,     0,     0,     0,
     328,   329,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,   332,   322,     0,     1,   323,   112,
     324,     0,   325,   326,     0,     0,     0,   333,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,     0,
       0,     0,     2,     0,     0,     0,     0,   342,   343,     0,
       0,   344,     0,     0,   345,  2164,   346,     0,     0,  1200,
       0,     0,     0,     0,   347,   348,     0,   349,   350,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,     0,   328,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,   333,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,     0,     0,     0,     2,
       0,     0,     0,     0,   342,   343,     0,     0,   344,     0,
       0,   345,  2193,   346,     0,     0,  1200,     0,     0,     0,
       0,   347,   348,     0,   349,   350,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   322,
       0,     1,   323,   112,   324,     0,   325,   326,     0,     0,
       0,   333,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,     0,     0,     0,     2,     0,     0,     0,
       0,   342,   343,     0,     0,   344,     0,     0,   345,     0,
     346,     0,     0,     0,  2227,  1062,     0,     0,   347,   348,
       0,   349,   350,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
       0,   328,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,   333,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
       0,     0,     0,     2,     0,     0,     0,     0,   342,   343,
       0,     0,   344,     0,     0,   345,     0,   346,     0,     0,
       0,     0,   775,     0,     0,   347,   348,     0,   349,   350,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,     0,   328,   329,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   322,     0,     1,   323,   112,   324,     0,
     325,   326,     0,     0,     0,   333,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
       2,     0,     0,     0,     0,   342,   343,     0,     0,   344,
       0,     0,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   881,   349,   350,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,     0,   328,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,   333,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,     0,     0,     0,     2,     0,     0,
       0,     0,   342,   343,     0,     0,   344,     0,     0,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   885,   349,   350,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,     0,   328,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,   332,   322,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,     0,   333,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,     0,     0,     0,     2,     0,     0,     0,     0,   342,
     343,     0,     0,   344,     0,     0,   345,     0,   346,     0,
       0,     0,     0,  1062,     0,     0,   347,   348,     0,   349,
     350,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,     0,   328,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,   322,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,   333,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     2,     0,     0,     0,     0,   342,   343,     0,     0,
     344,     0,     0,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,   347,   348,  1103,   349,   350,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,     0,     0,     0,     0,   328,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
     332,   322,     0,     1,   323,   112,   324,     0,   325,   326,
       0,     0,     0,   333,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,     0,     0,     0,     2,     0,
       0,     0,     0,   342,   343,     0,     0,   344,     0,     0,
     345,     0,   346,     0,     0,     0,     0,     0,     0,  1156,
     347,   348,     0,   349,   350,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,     0,   328,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,  1507,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
     333,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,     0,     0,     0,     2,     0,     0,     0,     0,
     342,   343,     0,     0,   344,     0,     0,   345,   765,   346,
       0,     0,     0,     0,     0,     0,     0,   347,   348,     0,
     349,   350,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,     0,     0,     0,     0,
     328,   329,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,   332,   322,     0,     1,   323,   112,
     324,     0,   325,   326,     0,     0,     0,   333,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,     0,
       0,     0,     2,     0,     0,     0,     0,   342,   343,     0,
       0,   344,     0,     0,   345,     0,   346,     0,     0,     0,
       0,   775,     0,     0,   347,   348,     0,   349,   350,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,     0,   328,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,   333,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,     0,     0,     0,     2,
       0,     0,     0,     0,   342,   343,     0,     0,   344,     0,
       0,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,   347,   348,  1611,   349,   350,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   322,
       0,     1,   323,   112,   324,     0,   325,   326,     0,     0,
       0,   333,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,     0,     0,     0,     2,     0,     0,     0,
       0,   342,   343,     0,     0,   344,     0,     0,   345,  1649,
     346,     0,     0,     0,     0,     0,     0,     0,   347,   348,
       0,   349,   350,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
       0,   328,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,   333,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
       0,     0,     0,     2,     0,     0,     0,     0,   342,   343,
       0,     0,   344,     0,     0,   345,     0,   346,     0,     0,
       0,     0,     0,     0,  1652,   347,   348,     0,   349,   350,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,     0,   328,   329,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   322,     0,     1,   323,   112,   324,     0,
     325,   326,     0,     0,     0,   333,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
       2,     0,     0,     0,     0,   342,   343,     0,     0,   344,
       0,     0,   345,     0,   346,     0,     0,     0,     0,  1753,
       0,     0,   347,   348,     0,   349,   350,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,     0,   328,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
    1841,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,   333,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,     0,     0,     0,     2,     0,     0,
       0,     0,   342,   343,     0,     0,   344,     0,     0,   345,
       0,   346,     0,     0,     0,     0,  1840,     0,     0,   347,
     348,     0,   349,   350,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,     0,   328,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,   332,  1844,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,     0,   333,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,     0,     0,     0,     2,     0,     0,     0,     0,   342,
     343,     0,     0,   344,     0,     0,   345,     0,   346,     0,
       0,     0,     0,   775,     0,     0,   347,   348,     0,   349,
     350,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,     0,   328,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,  1848,     0,     1,   323,   112,   324,
       0,   325,   326,     0,     0,     0,   333,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     2,     0,     0,     0,     0,   342,   343,     0,     0,
     344,     0,     0,   345,     0,   346,     0,     0,     0,     0,
     775,     0,     0,   347,   348,     0,   349,   350,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,     0,     0,     0,     0,   328,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   331,
     332,   322,     0,     1,   323,   112,   324,     0,   325,   326,
       0,     0,     0,   333,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,     0,     0,     0,     2,     0,
       0,     0,     0,   342,   343,     0,     0,   344,     0,     0,
     345,     0,   346,     0,     0,     0,     0,   775,     0,     0,
     347,   348,     0,   349,   350,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,     0,
       0,     0,     0,   328,   329,   330,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   332,   322,     0,
       1,   323,   112,   324,     0,   325,   326,     0,     0,     0,
     333,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,     0,     0,     0,     2,     0,     0,     0,     0,
     342,   343,     0,     0,   344,     0,     0,   345,  1895,   346,
       0,     0,     0,     0,     0,     0,     0,   347,   348,     0,
     349,   350,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,     0,     0,     0,     0,
     328,   329,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   331,   332,   322,     0,     1,   323,   112,
     324,     0,   325,   326,     0,     0,     0,   333,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,     0,
       0,     0,     2,     0,     0,     0,     0,   342,   343,     0,
       0,   344,     0,     0,  1955,     0,   346,     0,     0,     0,
       0,  1840,     0,     0,   347,   348,     0,   349,   350,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,     0,     0,     0,     0,   328,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     331,   332,   322,     0,     1,   323,   112,   324,     0,   325,
     326,     0,     0,     0,   333,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,     0,     0,     0,     2,
       0,     0,     0,     0,   342,   343,     0,     0,   344,     0,
       0,   345,  2059,   346,     0,     0,     0,     0,     0,     0,
       0,   347,   348,     0,   349,   350,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   322,
       0,     1,   323,   112,   324,     0,   325,   326,     0,     0,
       0,   333,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,     0,     0,     0,     2,     0,     0,     0,
       0,   342,   343,     0,     0,   344,     0,     0,   345,  2121,
     346,     0,     0,     0,     0,     0,     0,     0,   347,   348,
       0,   349,   350,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
       0,   328,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   331,   332,   322,     0,     1,   323,
     112,   324,     0,   325,   326,     0,     0,     0,   333,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
       0,     0,     0,     2,     0,     0,     0,     0,   342,   343,
       0,     0,   344,     0,     0,   345,     0,   346,     0,     0,
       0,     0,  2189,     0,     0,   347,   348,     0,   349,   350,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,     0,     0,     0,     0,   328,   329,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,   332,   322,     0,     1,   323,   112,   324,     0,
     325,   326,     0,     0,     0,   333,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
       2,     0,     0,     0,     0,   342,   343,     0,     0,   344,
       0,     0,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,   347,   348,     0,   349,   350,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,     0,     0,     0,     0,   328,   329,   330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   331,   332,
     322,     0,     1,   323,   112,   324,     0,   325,   326,     0,
       0,     0,   333,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,     0,     0,     0,     2,     0,     0,
       0,     0,   342,   343,     0,     0,   344,     0,     0,   735,
       0,   346,     0,     0,     0,     0,     0,     0,     0,   347,
     348,     0,   349,   350,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,     0,     0,
       0,     0,   328,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   331,   332,   322,     0,     1,
     323,   112,   324,     0,   325,   326,     0,     0,     0,   333,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,     0,     0,     0,     2,     0,     0,     0,     0,   342,
     343,     0,     0,   344,     0,     0,   738,     0,   346,     0,
       0,     0,     0,     0,     0,     0,   347,   348,     0,   349,
     350,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,     0,     0,     0,     0,   328,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   331,   332,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   333,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     0,     0,     0,     0,     0,   342,   343,     0,     0,
     344,     0,     0,   761,     0,   346,  -905,   616,     0,  -905,
    -905,  -905,     0,   347,   348,     0,   349,   350,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -905,  -905,  -905,  -905,  -905,  -905,
    -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,
    -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,  -905,
       0,     0,  -905,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -905,  -905,  -905,     0,     0,  -905,
    -905,     0,  -905,  -905,     0,     0,  -905,  -905,  -905,  -905,
    -905,  -905,     0,  -905,  -905,  -905,  -905,     0,     0,  -905,
    -905,  -905,  -905,     0,  -905,     0,  -905,  -905,  -905,     0,
    -905,  -905,  -905,  -905,  -905,  -905,  -905,     0,  -905,  -905,
    -905,  -905,  -905,  -905,  -905,  -905,  -905,     0,     0,     0,
    -905,     0,     0,  -905,   617,  -905,  -905,     0,   618,  -905,
       0,     0,     0,  -905,  -905,  -189,   948,     0,  -189,  -189,
    -189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,
       0,  -189,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -189,  -189,  -189,     0,     0,  -189,  -189,
       0,  -189,  -189,     0,     0,  -189,  -189,  -189,  -189,  -189,
    -189,     0,  -189,  -189,  -189,  -189,     0,     0,  -189,  -189,
    -189,  -189,     0,  -189,     0,  -189,  -189,  -189,     0,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,     0,     0,  -189,
       0,     0,  -189,     0,  -189,   949,     0,   950,  -189,     0,
       0,     0,  -189,  -189,  -253,   962,     0,     1,   323,   112,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   213,   214,   215,   216,   217,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
    -253,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,    30,   454,     0,     0,   328,   329,     0,
      31,    32,     0,     0,   455,    35,   456,   457,    38,    39,
       0,   436,    41,    42,   458,     0,     0,   459,   460,   461,
     462,     0,   463,     0,   464,   465,    43,     0,   334,   335,
     336,   337,   338,   339,   340,     0,    46,    47,    48,    49,
      50,    51,   219,   220,   342,     0,     0,     0,    56,     0,
       0,   466,     0,   467,   468,  -251,   965,  -253,     1,   323,
     112,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   213,   214,   215,   216,   217,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,  -251,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,    30,   454,     0,     0,   328,   329,
       0,    31,    32,     0,     0,   455,    35,   456,   457,    38,
      39,     0,   436,    41,    42,   458,     0,     0,   459,   460,
     461,   462,     0,   463,     0,   464,   465,    43,     0,   334,
     335,   336,   337,   338,   339,   340,     0,    46,    47,    48,
      49,    50,    51,   219,   220,   342,     0,     0,     0,    56,
       0,     0,   466,     0,   467,   468,  -254,   962,  -251,     1,
     323,   112,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,  -254,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,    30,   454,     0,     0,   328,
     329,     0,    31,    32,     0,     0,   455,    35,   456,   457,
      38,    39,     0,   436,    41,    42,   458,     0,     0,   459,
     460,   461,   462,     0,   463,     0,   464,   465,    43,     0,
     334,   335,   336,   337,   338,   339,   340,     0,    46,    47,
      48,    49,    50,    51,   219,   220,   342,     0,     0,     0,
      56,     0,     0,   466,     0,   467,   468,  -252,   965,  -254,
       1,   323,   112,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   213,   214,   215,   216,
     217,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,  -252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,    30,   454,     0,     0,
     328,   329,     0,    31,    32,     0,     0,   455,    35,   456,
     457,    38,    39,     0,   436,    41,    42,   458,     0,     0,
     459,   460,   461,   462,     0,   463,     0,   464,   465,    43,
       0,   334,   335,   336,   337,   338,   339,   340,     0,    46,
      47,    48,    49,    50,    51,   219,   220,   342,     0,     0,
       0,    56,     0,     0,   466,     0,   467,   468,     0,   453,
    -252,     1,   323,   112,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   213,   214,   215,
     216,   217,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,    30,   454,     0,
       0,   328,   329,     0,    31,    32,     0,     0,   455,    35,
     456,   457,    38,    39,     0,   436,    41,    42,   458,     0,
       0,   459,   460,   461,   462,     0,   463,     0,   464,   465,
      43,     0,   334,   335,   336,   337,   338,   339,   340,     0,
      46,    47,    48,    49,    50,    51,   219,   220,   342,     0,
       0,     0,    56,     0,     0,   466,     0,   467,   468,     0,
     519,   469,     1,   323,   112,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,    30,   454,
       0,     0,   328,   329,     0,    31,    32,     0,     0,   455,
      35,   456,   457,    38,    39,     0,   436,    41,    42,   458,
       0,     0,   459,   460,   461,   462,     0,   463,     0,   464,
     465,    43,     0,   334,   335,   336,   337,   338,   339,   340,
       0,    46,    47,    48,    49,    50,    51,   219,   220,   342,
       0,     0,     0,    56,     0,     0,   466,     0,   467,   468,
       0,   541,   520,     1,   323,   112,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   213,
     214,   215,   216,   217,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,    30,
     454,     0,     0,   328,   329,     0,    31,    32,     0,     0,
     455,    35,   456,   457,    38,    39,     0,   436,    41,    42,
     458,     0,     0,   459,   460,   461,   462,     0,   463,     0,
     464,   465,    43,     0,   334,   335,   336,   337,   338,   339,
     340,     0,    46,    47,    48,    49,    50,    51,   219,   220,
     342,     0,     0,     0,    56,     0,     0,   466,     0,   467,
     468,     0,   546,   542,     1,   323,   112,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
      30,   454,     0,     0,   328,   329,     0,    31,    32,     0,
       0,   455,    35,   456,   457,    38,    39,     0,   436,    41,
      42,   458,     0,     0,   459,   460,   461,   462,     0,   463,
       0,   464,   465,    43,     0,   334,   335,   336,   337,   338,
     339,   340,     0,    46,    47,    48,    49,    50,    51,   219,
     220,   342,     0,     0,     0,    56,     0,     0,   466,     0,
     467,   468,     0,   550,   547,     1,   323,   112,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   213,   214,   215,   216,   217,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,    30,   454,     0,     0,   328,   329,     0,    31,    32,
       0,     0,   455,    35,   456,   457,    38,    39,     0,   436,
      41,    42,   458,     0,     0,   459,   460,   461,   462,     0,
     463,     0,   464,   465,    43,     0,   334,   335,   336,   337,
     338,   339,   340,     0,    46,    47,    48,    49,    50,    51,
     219,   220,   342,     0,     0,     0,    56,     0,     0,   466,
       0,   467,   468,     0,   962,   551,     1,   323,   112,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   213,   214,   215,   216,   217,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,    30,   454,     0,     0,   328,   329,     0,    31,
      32,     0,     0,   455,    35,   456,   457,    38,    39,     0,
     436,    41,    42,   458,     0,     0,   459,   460,   461,   462,
       0,   463,     0,   464,   465,    43,     0,   334,   335,   336,
     337,   338,   339,   340,     0,    46,    47,    48,    49,    50,
      51,   219,   220,   342,     0,     0,     0,    56,     0,     0,
     466,     0,   467,   468,     0,   965,  -760,     1,   323,   112,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   213,   214,   215,   216,   217,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,    30,   454,     0,     0,   328,   329,     0,
      31,    32,     0,     0,   455,    35,   456,   457,    38,    39,
       0,   436,    41,    42,   458,     0,     0,   459,   460,   461,
     462,     0,   463,     0,   464,   465,    43,     0,   334,   335,
     336,   337,   338,   339,   340,     0,    46,    47,    48,    49,
      50,    51,   219,   220,   342,     0,     0,     0,    56,     0,
       0,   466,     0,   467,   468,     0,   962,  -761,     1,   323,
     112,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   213,   214,   215,   216,   217,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,    30,   454,     0,     0,   328,   329,
       0,    31,    32,     0,     0,   455,    35,   456,   457,    38,
      39,     0,   436,    41,    42,   458,     0,     0,   459,   460,
     461,   462,     0,   463,     0,   464,   465,    43,     0,   334,
     335,   336,   337,   338,   339,   340,     0,    46,    47,    48,
      49,    50,    51,   219,   220,   342,     0,     0,     0,    56,
       0,     0,   466,     0,   467,   468,     0,   965,  -757,     1,
     323,   112,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,    30,   454,     0,     0,   328,
     329,     0,    31,    32,     0,     0,   455,    35,   456,   457,
      38,    39,     0,   436,    41,    42,   458,     0,     0,   459,
     460,   461,   462,     0,   463,     0,   464,   465,    43,     0,
     334,   335,   336,   337,   338,   339,   340,     0,    46,    47,
      48,    49,    50,    51,   219,   220,   342,     0,     0,     0,
      56,     0,     0,   466,     0,   467,   468,     0,   962,  -758,
       1,   323,   112,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   213,   214,   215,   216,
     217,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,    30,   454,     0,     0,
     328,   329,     0,    31,    32,     0,     0,   455,    35,   456,
     457,    38,    39,     0,   436,    41,    42,   458,     0,     0,
     459,   460,   461,   462,     0,   463,     0,   464,   465,    43,
       0,   334,   335,   336,   337,   338,   339,   340,     0,    46,
      47,    48,    49,    50,    51,   219,   220,   342,     0,     0,
       0,    56,     0,     0,   466,     0,   467,   468,     0,   965,
    -763,     1,   323,   112,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   213,   214,   215,
     216,   217,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,    30,   454,     0,
       0,   328,   329,     0,    31,    32,     0,     0,   455,    35,
     456,   457,    38,    39,     0,   436,    41,    42,   458,     0,
       0,   459,   460,   461,   462,     0,   463,     0,   464,   465,
      43,     0,   334,   335,   336,   337,   338,   339,   340,     0,
      46,    47,    48,    49,    50,    51,   219,   220,   342,     0,
       0,     0,    56,     0,     0,   466,     0,   467,   468,     0,
    1085,  -764,     1,   323,   112,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,    30,   454,
       0,     0,   328,   329,     0,    31,    32,     0,     0,   455,
      35,   456,   457,    38,    39,     0,   436,    41,    42,   458,
       0,     0,   459,   460,   461,   462,     0,   463,     0,   464,
     465,    43,     0,   334,   335,   336,   337,   338,   339,   340,
       0,    46,    47,    48,    49,    50,    51,   219,   220,   342,
       0,     0,     0,    56,     0,     0,   466,     0,   467,   468,
       0,  1089,  1086,     1,   323,   112,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   213,
     214,   215,   216,   217,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,    30,
     454,     0,     0,   328,   329,     0,    31,    32,     0,     0,
     455,    35,   456,   457,    38,    39,     0,   436,    41,    42,
     458,     0,     0,   459,   460,   461,   462,     0,   463,     0,
     464,   465,    43,     0,   334,   335,   336,   337,   338,   339,
     340,     0,    46,    47,    48,    49,    50,    51,   219,   220,
     342,     0,     0,     0,    56,     0,     0,   466,     0,   467,
     468,     0,   322,  1090,     1,   323,   112,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
      30,   454,     0,     0,   328,   329,     0,    31,    32,     0,
       0,   455,    35,   456,   457,    38,    39,     0,   436,    41,
      42,   458,     0,     0,   459,   460,   461,   462,     0,   463,
       0,   464,   465,    43,     0,   334,   335,   336,   337,   338,
     339,   340,     0,    46,    47,    48,    49,    50,    51,   219,
     220,   342,     0,     0,     0,    56,     0,     0,   466,     0,
     467,   468,     0,   962,  -653,     1,   323,   112,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   213,   214,   215,   216,   217,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,    30,   454,     0,     0,   328,   329,     0,    31,    32,
       0,     0,   455,    35,   456,   457,    38,    39,     0,   436,
      41,    42,   458,     0,     0,   459,   460,   461,   462,     0,
     463,     0,   464,   465,    43,     0,   334,   335,   336,   337,
     338,   339,   340,     0,    46,    47,    48,    49,    50,    51,
     219,   220,   342,     0,     0,     0,    56,     0,     0,   466,
       0,   467,   468,     0,   965,  -740,     1,   323,   112,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   213,   214,   215,   216,   217,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,    30,   454,     0,     0,   328,   329,     0,    31,
      32,     0,     0,   455,    35,   456,   457,    38,    39,     0,
     436,    41,    42,   458,     0,     0,   459,   460,   461,   462,
       0,   463,     0,   464,   465,    43,     0,   334,   335,   336,
     337,   338,   339,   340,     0,    46,    47,    48,    49,    50,
      51,   219,   220,   342,     0,     0,     0,    56,     0,     0,
     466,     0,   467,   468,     0,   962,  -741,     1,   323,   112,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   213,   214,   215,   216,   217,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,    30,   454,     0,     0,   328,   329,     0,
      31,    32,     0,     0,   455,    35,   456,   457,    38,    39,
       0,   436,    41,    42,   458,     0,     0,   459,   460,   461,
     462,     0,   463,     0,   464,   465,    43,     0,   334,   335,
     336,   337,   338,   339,   340,     0,    46,    47,    48,    49,
      50,    51,   219,   220,   342,     0,     0,     0,    56,     0,
       0,   466,     0,   467,   468,     0,   965,  -743,     1,   323,
     112,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   213,   214,   215,   216,   217,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,    30,   454,     0,     0,   328,   329,
       0,    31,    32,     0,     0,   455,    35,   456,   457,    38,
      39,     0,   436,    41,    42,   458,     0,     0,   459,   460,
     461,   462,     0,   463,     0,   464,   465,    43,     0,   334,
     335,   336,   337,   338,   339,   340,     0,    46,    47,    48,
      49,    50,    51,   219,   220,   342,     0,     0,     0,    56,
       0,     0,   466,     0,   467,   468,     0,  1593,  -744,     1,
     323,   112,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,    30,   454,     0,     0,   328,
     329,     0,    31,    32,     0,     0,   455,    35,   456,   457,
      38,    39,     0,   436,    41,    42,   458,     0,     0,   459,
     460,   461,   462,     0,   463,     0,   464,   465,    43,     0,
     334,   335,   336,   337,   338,   339,   340,     0,    46,    47,
      48,    49,    50,    51,   219,   220,   342,     0,     0,     0,
      56,     0,     0,   466,     0,   467,   468,     0,   962,  1594,
       1,   323,   112,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   213,   214,   215,   216,
     217,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,    30,   454,     0,     0,
     328,   329,     0,    31,    32,     0,     0,   455,    35,   456,
     457,    38,    39,     0,   436,    41,    42,   458,     0,     0,
     459,   460,   461,   462,     0,   463,     0,   464,   465,    43,
       0,   334,   335,   336,   337,   338,   339,   340,     0,    46,
      47,    48,    49,    50,    51,   219,   220,   342,     0,     0,
       0,    56,     0,     0,   466,     0,   467,   468,     0,   965,
    -648,     1,   323,   112,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   213,   214,   215,
     216,   217,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,    30,   454,     0,
       0,   328,   329,     0,    31,    32,     0,     0,   455,    35,
     456,   457,    38,    39,     0,   436,    41,    42,   458,     0,
       0,   459,   460,   461,   462,     0,   463,     0,   464,   465,
      43,     0,   334,   335,   336,   337,   338,   339,   340,     0,
      46,    47,    48,    49,    50,    51,   219,   220,   342,     0,
       0,     0,    56,     0,     0,   466,     0,   467,   468,     0,
     962,  -649,     1,   323,   112,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,    30,   454,
       0,     0,   328,   329,     0,    31,    32,     0,     0,   455,
      35,   456,   457,    38,    39,     0,   436,    41,    42,   458,
       0,     0,   459,   460,   461,   462,     0,   463,     0,   464,
     465,    43,     0,   334,   335,   336,   337,   338,   339,   340,
       0,    46,    47,    48,    49,    50,    51,   219,   220,   342,
       0,     0,     0,    56,     0,     0,   466,     0,   467,   468,
       0,   965,  -746,     1,   323,   112,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   213,
     214,   215,   216,   217,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,    30,
     454,     0,     0,   328,   329,     0,    31,    32,     0,     0,
     455,    35,   456,   457,    38,    39,     0,   436,    41,    42,
     458,     0,     0,   459,   460,   461,   462,     0,   463,     0,
     464,   465,    43,     0,   334,   335,   336,   337,   338,   339,
     340,     0,    46,    47,    48,    49,    50,    51,   219,   220,
     342,     0,     0,     0,    56,     0,     0,   466,     0,   467,
     468,     0,   322,  -747,     1,   323,   112,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
      30,   454,     0,     0,   328,   329,     0,    31,    32,     0,
       0,   455,    35,   456,   457,    38,    39,     0,   436,    41,
      42,   458,     0,     0,   459,   460,   461,   462,     0,   463,
       0,   464,   465,    43,     0,   334,   335,   336,   337,   338,
     339,   340,     0,    46,    47,    48,    49,    50,    51,   219,
     220,   342,     0,     0,     0,    56,     0,     0,   466,     0,
     467,   468,     0,   322,  -652,     1,   323,   112,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   213,   214,   215,   216,   217,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,    30,   454,     0,     0,   328,   329,     0,    31,    32,
       0,     0,   455,    35,   456,   457,    38,    39,     0,   436,
      41,    42,   458,     0,     0,   459,   460,   461,   462,     0,
     463,     0,   464,   465,    43,     0,   334,   335,   336,   337,
     338,   339,   340,     0,    46,    47,    48,    49,    50,    51,
     219,   220,   342,     0,     0,     0,    56,     0,     0,   466,
       0,   467,   468,     0,   322,  -650,     1,   323,   112,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   213,   214,   215,   216,   217,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,    30,   454,     0,     0,   328,   329,     0,    31,
      32,     0,     0,   455,    35,   456,   457,    38,    39,     0,
     436,    41,    42,   458,     0,     0,   459,   460,   461,   462,
       0,   463,     0,   464,   465,    43,     0,   334,   335,   336,
     337,   338,   339,   340,     0,    46,    47,    48,    49,    50,
      51,   219,   220,   342,     0,     0,     0,    56,     0,     0,
     466,     0,   467,   468,     0,   322,  -628,     1,   323,   112,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   213,   214,   215,   216,   217,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,    30,   454,     0,     0,   328,   329,     0,
      31,    32,     0,     0,   455,    35,   456,   457,    38,    39,
       0,   436,    41,    42,   458,     0,     0,   459,   460,   461,
     462,     0,   463,     0,   464,   465,    43,     0,   334,   335,
     336,   337,   338,   339,   340,     0,    46,    47,    48,    49,
      50,    51,   219,   220,   342,     0,     0,     0,    56,     0,
       0,   466,     0,   467,   468,     0,   962,  -627,     1,   323,
     112,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   213,   214,   215,   216,   217,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,    30,   454,     0,     0,   328,   329,
       0,    31,    32,     0,     0,   455,    35,   456,   457,    38,
      39,     0,   436,    41,    42,   458,     0,     0,   459,   460,
     461,   462,     0,   463,     0,   464,   465,    43,     0,   334,
     335,   336,   337,   338,   339,   340,     0,    46,    47,    48,
      49,    50,    51,   219,   220,   342,     0,     0,     0,    56,
       0,     0,   466,     0,   467,   468,     0,   965,  -641,     1,
     323,   112,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,    30,   454,     0,     0,   328,
     329,     0,    31,    32,     0,     0,   455,    35,   456,   457,
      38,    39,     0,   436,    41,    42,   458,     0,     0,   459,
     460,   461,   462,     0,   463,     0,   464,   465,    43,     0,
     334,   335,   336,   337,   338,   339,   340,     0,    46,    47,
      48,    49,    50,    51,   219,   220,   342,     0,     0,     0,
      56,     0,     0,   466,     0,   467,   468,     0,   322,  -642,
       1,   323,   112,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   213,   214,   215,   216,
     217,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   327,    30,   454,     0,     0,
     328,   329,     0,    31,    32,     0,     0,   455,    35,   456,
     457,    38,    39,     0,   436,    41,    42,   458,     0,     0,
     459,   460,   461,   462,     0,   463,     0,   464,   465,    43,
       0,   334,   335,   336,   337,   338,   339,   340,     0,    46,
      47,    48,    49,    50,    51,   219,   220,   342,     0,     0,
       0,    56,     0,     0,   466,     0,   467,   468,     0,   962,
    -651,     1,   323,   112,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   213,   214,   215,
     216,   217,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,    30,   454,     0,
       0,   328,   329,     0,    31,    32,     0,     0,   455,    35,
     456,   457,    38,    39,     0,   436,    41,    42,   458,     0,
       0,   459,   460,   461,   462,     0,   463,     0,   464,   465,
      43,     0,   334,   335,   336,   337,   338,   339,   340,     0,
      46,    47,    48,    49,    50,    51,   219,   220,   342,     0,
       0,     0,    56,     0,     0,   466,     0,   467,   468,     0,
     965,  -637,     1,   323,   112,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,    30,   454,
       0,     0,   328,   329,     0,    31,    32,     0,     0,   455,
      35,   456,   457,    38,    39,     0,   436,    41,    42,   458,
       0,     0,   459,   460,   461,   462,     0,   463,     0,   464,
     465,    43,     0,   334,   335,   336,   337,   338,   339,   340,
       0,    46,    47,    48,    49,    50,    51,   219,   220,   342,
       0,     0,     0,    56,     0,     0,   466,     0,   467,   468,
       0,   962,  -638,     1,   323,   112,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   213,
     214,   215,   216,   217,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,    30,
     454,     0,     0,   328,   329,     0,    31,    32,     0,     0,
     455,    35,   456,   457,    38,    39,     0,   436,    41,    42,
     458,     0,     0,   459,   460,   461,   462,     0,   463,     0,
     464,   465,    43,     0,   334,   335,   336,   337,   338,   339,
     340,     0,    46,    47,    48,    49,    50,    51,   219,   220,
     342,     0,     0,     0,    56,     0,     0,   466,     0,   467,
     468,     0,   965,  -625,     1,   323,   112,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
      30,   454,     0,     0,   328,   329,     0,    31,    32,     0,
       0,   455,    35,   456,   457,    38,    39,     0,   436,    41,
      42,   458,     0,     0,   459,   460,   461,   462,     0,   463,
       0,   464,   465,    43,     0,   334,   335,   336,   337,   338,
     339,   340,     0,    46,    47,    48,    49,    50,    51,   219,
     220,   342,     0,     0,     0,    56,     0,     0,   466,     0,
     467,   468,     0,   962,  -626,     1,   323,   112,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   213,   214,   215,   216,   217,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,    30,   454,     0,     0,   328,   329,     0,    31,    32,
       0,     0,   455,    35,   456,   457,    38,    39,     0,   436,
      41,    42,   458,     0,     0,   459,   460,   461,   462,     0,
     463,     0,   464,   465,    43,     0,   334,   335,   336,   337,
     338,   339,   340,     0,    46,    47,    48,    49,    50,    51,
     219,   220,   342,     0,     0,     0,    56,     0,     0,   466,
       0,   467,   468,     0,   965,  -620,     1,   323,   112,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   213,   214,   215,   216,   217,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   327,    30,   454,     0,     0,   328,   329,     0,    31,
      32,     0,     0,   455,    35,   456,   457,    38,    39,     0,
     436,    41,    42,   458,     0,     0,   459,   460,   461,   462,
       0,   463,     0,   464,   465,    43,     0,   334,   335,   336,
     337,   338,   339,   340,     0,    46,    47,    48,    49,    50,
      51,   219,   220,   342,     0,     0,     0,    56,     0,     0,
     466,     0,   467,   468,     0,   962,  -621,     1,   323,   112,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   213,   214,   215,   216,   217,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,    30,   454,     0,     0,   328,   329,     0,
      31,    32,     0,     0,   455,    35,   456,   457,    38,    39,
       0,   436,    41,    42,   458,     0,     0,   459,   460,   461,
     462,     0,   463,     0,   464,   465,    43,     0,   334,   335,
     336,   337,   338,   339,   340,     0,    46,    47,    48,    49,
      50,    51,   219,   220,   342,     0,     0,     0,    56,     0,
       0,   466,     0,   467,   468,     0,   965,  -639,     1,   323,
     112,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   213,   214,   215,   216,   217,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   327,    30,   454,     0,     0,   328,   329,
       0,    31,    32,     0,     0,   455,    35,   456,   457,    38,
      39,     0,   436,    41,    42,   458,     0,     0,   459,   460,
     461,   462,     0,   463,     0,   464,   465,    43,     0,   334,
     335,   336,   337,   338,   339,   340,     0,    46,    47,    48,
      49,    50,    51,   219,   220,   342,     0,     0,     0,    56,
       0,     0,   466,     0,   467,   468,     0,   453,  -640,     1,
     323,   112,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,    30,   454,     0,     0,   328,
     329,     0,    31,    32,     0,     0,   455,    35,   456,   457,
      38,    39,     0,   436,    41,    42,   458,     0,     0,   459,
     460,   461,   462,     0,   463,     0,   464,   465,    43,     0,
     334,   335,   336,   337,   338,   339,   340,     0,    46,    47,
      48,    49,    50,    51,   219,   220,   342,     0,     0,     0,
      56,     0,     0,   466,     0,   467,   468,   519,     0,     1,
     323,   112,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,    30,   454,     0,     0,   328,
     329,     0,    31,    32,     0,     0,   455,    35,   456,   457,
      38,    39,     0,   436,    41,    42,   458,     0,     0,   459,
     460,   461,   462,     0,   463,     0,   464,   465,    43,     0,
     334,   335,   336,   337,   338,   339,   340,     0,    46,    47,
      48,    49,    50,    51,   219,   220,   342,   212,     0,     1,
      56,     0,     0,   466,     0,   467,   468,     0,     0,     0,
       0,     0,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
       8,     9,    10,   597,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   218,    30,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,   219,   220,   212,     0,     1,     0,
      56,     0,     0,   598,  1094,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   599,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   213,   214,   215,   216,   217,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   218,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    46,    47,    48,
      49,    50,    51,   219,   220,     1,     0,     0,     0,    56,
       0,     0,   903,  1094,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   599,     0,     0,     0,     0,     0,     0,
       2,   213,   214,   215,   216,   217,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,    38,    39,     0,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    46,    47,    48,    49,    50,    51,
     219,   220,     1,     0,     0,     0,    56,     0,     0,   903,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     599,     0,     0,     0,     0,     0,     0,     2,   213,   214,
     215,   216,   217,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,    21,    22,   263,   264,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,     0,     0,     0,   266,    41,   267,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   268,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,    47,   269,   270,   271,   272,   219,   220,     1,
       0,     0,     0,    56,     0,     0,  1246,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1247,     0,     0,
       0,     0,     0,     0,     2,   213,   214,   215,   216,   217,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,    21,    22,   263,   264,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,     0,   266,    41,   267,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,    47,
     269,   270,   271,   272,   219,   220,     1,     0,     0,     0,
      56,     0,     0,  1246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1269,     0,     0,     0,     0,     0,
       0,     2,   213,   214,   215,   216,   217,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
      21,    22,   263,   264,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   265,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,     0,     0,     0,
     266,    41,   267,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    46,    47,   269,   270,   271,
     272,   219,   220,     1,     0,     0,     0,    56,     0,     0,
    1246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1729,     0,     0,     0,     0,     0,     0,     2,   213,
     214,   215,   216,   217,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,    21,    22,   263,
     264,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,     0,   266,    41,   267,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   268,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46,    47,   269,   270,   271,   272,   219,   220,
       1,     0,     0,     0,    56,     0,     0,  1246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1744,     0,
       0,     0,     0,     0,     0,     2,   213,   214,   215,   216,
     217,     8,     9,    10,   597,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   219,   220,     1,     0,     0,
       0,    56,     0,     0,   970,     0,     0,     0,     0,     0,
       0,     0,     0,   971,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   213,   214,   215,   216,   217,     8,     9,
      10,   597,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,    38,    39,
       0,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
       0,     0,     0,     0,   656,     0,    46,    47,    48,    49,
      50,    51,   219,   220,     0,     0,     0,     0,    56,     0,
       0,    57,     0,     0,     0,     0,     0,     0,     0,     0,
     971,     2,   213,   214,   215,   216,   217,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
      21,    22,   263,   264,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   265,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,     0,     0,     0,
     266,    41,   267,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,     0,     0,     0,     0,
       0,  1558,     0,     0,     0,    46,    47,   269,   270,   271,
     272,   219,   220,     0,     0,     0,   273,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -66,
       0,     0,     0,     0,     0,     0,   -66,   -66,     0,     0,
       0,   -66,     0,     0,     0,     0,     0,   -66,   -66,   -66,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -66,     0,     0,     0,     0,  1758,     0,     0,
       0,     0,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1559,     0,  1560,   -66,     2,   213,   214,   215,   216,   217,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,    21,    22,   263,   264,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,     0,   266,    41,   267,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,     0,
       0,     0,     0,  1762,     0,     0,     0,     0,    46,    47,
     269,   270,   271,   272,   219,   220,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -111,
       2,   213,   214,   215,   216,   217,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,    21,
      22,   263,   264,    25,    26,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,     0,     0,     0,     0,     0,     0,    31,    32,
       0,     0,     0,    35,     0,     0,     0,     0,     0,   266,
      41,   267,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   268,     0,     0,     0,     0,  1763,
       0,     0,     0,     0,    46,    47,   269,   270,   271,   272,
     219,   220,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -95,     2,   213,   214,   215,
     216,   217,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,    21,    22,   263,   264,    25,
      26,    27,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   265,     0,     0,
       0,     0,     0,     0,    31,    32,     0,     0,     0,    35,
       0,     0,     0,     0,     0,   266,    41,   267,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     268,     0,     0,     0,     0,  1873,     0,     0,     0,     0,
      46,    47,   269,   270,   271,   272,   219,   220,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -96,     2,   213,   214,   215,   216,   217,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,    21,    22,   263,   264,    25,    26,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   265,     0,     0,     0,     0,     0,     0,
      31,    32,     0,     0,     0,    35,     0,     0,     0,     0,
       0,   266,    41,   267,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   268,     0,     0,     0,
       0,  2019,     0,     0,     0,     0,    46,    47,   269,   270,
     271,   272,   219,   220,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -80,     2,   213,
     214,   215,   216,   217,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,    21,    22,   263,
     264,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,     0,     0,     0,   266,    41,   267,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   268,     0,     0,     0, -1313,   312,     0,     1,
       0,     0,    46,    47,   269,   270,   271,   272,   219,   220,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -87,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,    30,     0,     0,     0,     0,
       0,     0,    31,    32,    33,    34,     0,    35,    36,    37,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     0,     1,    45,     0,     0,     0,     0,    46,    47,
      48,    49,    50,    51,    52,    53,     0,     0,    54,    55,
      56,     0,     0,    57,     0,     0,    58,     2,   213,   214,
     215,   216,   217,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,     0,   863,     1,
       0,    46,    47,    48,    49,    50,    51,   219,   220,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1439,     0,     2,   213,   214,   215,   216,   217,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
      38,    39,     0,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,     0,     0,     0,     0,   863,     1,     0,    46,    47,
      48,    49,    50,    51,   219,   220,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1789,
       0,     2,   213,   214,   215,   216,   217,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,   172,   863,     1,     0,    46,    47,    48,    49,    50,
      51,   219,   220,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1790,     0,     2,     3,
       4,   173,     6,     7,     8,     9,    10,   174,   175,   176,
     177,   178,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    29,    30,
       0,     0,     0,     0,     0,     0,    31,    32,     0,     0,
       0,    35,     0,     0,    38,    39,     0,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,   172,     0,     1,     0,     0,     0,
       0,     0,    46,    47,    48,    49,    50,    51,    52,    53,
       0,     0,     0,     0,    56,     0,     0,    57,     0,     0,
     179,     2,     3,     4,   173,     6,     7,     8,     9,    10,
     174,   175,   176,   177,   178,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,   638,     0,     1,
       0,     0,     0,     0,     0,    46,    47,    48,    49,    50,
      51,    52,    53,     0,     0,     0,     0,    56,     0,     0,
      57,     0,     0,   179,     2,   213,   214,   215,   216,   217,
     250,   251,   252,   639,   640,   641,   642,   643,   258,   259,
     260,   261,   262,    21,    22,   263,   264,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,     0,   266,    41,   267,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,     0,
    -927,     0,  -927,     0,     0,     0,     0,     0,    46,    47,
     269,   270,   271,   272,   219,   220,     0,     0,     0,     0,
      56,     0,     0,    57,     0,     0,   644,  -927,  -927,  -927,
    -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,
    -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,
    -927,  -927,  -927,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -927,     0,
       0,     0,     0,     0,     0,  -927,  -927,     0,     0,     0,
    -927,     0,     0,     0,     0,     0,  -927,  -927,  -927,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -927,     0,     0,     0,     1,     0,     0,     0,     0,
       0,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,     0,
       0,     0,     0,  -927,     0,     0,  -927,     0,     0,  -927,
       2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,    30,     0,     0,     0,     0,     0,     0,    31,    32,
      33,    34,     0,    35,    36,    37,    38,    39,     0,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0, -1314,   304,    45,
       1,     0,     0,     0,    46,    47,    48,    49,    50,    51,
      52,    53,     0,     0,    54,    55,    56,     0,     0,    57,
       0,     0,    58,     0,     0,     2,     3,     4,   173,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,    36,
      37,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   212,    43,
       1,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,    52,    53,     0,     0,     0,
       0,    56,     0,     0,    57,     2,   213,   214,   215,   216,
     217,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   218,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
     212,     0,     1,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   219,   220,     0,     0,     0,
       0,    56,     0,     0,  1246,  1716,     0,     2,   213,   214,
     215,   216,   217,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   218,    30,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,   212,     0,     1,     0,     0,     0,     0,     0,
       0,    46,    47,    48,    49,    50,    51,   219,   220,     0,
       0,     0,     0,     0,     0,     0,     0,   221,     0,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   218,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,   983,     0,     1,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   219,
     220,     0,     0,     0,     0,     0,     0,     0,     0,   417,
       0,     2,   213,   214,   215,   216,   217,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   218,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,  1515,     0,     1,     0,
       0,     0,     0,     0,     0,    46,    47,    48,    49,    50,
      51,   219,   220,     0,     0,     0,     0,     0,     0,     0,
       0,   221,     0,     2,   213,   214,   215,   216,   217,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   218,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,   212,     0,
       1,     0,     0,     0,     0,     0,     0,    46,    47,    48,
      49,    50,    51,   219,   220,     0,     0,     0,     0,     0,
       0,     0,     0,   417,     0,     2,   213,   214,   215,   216,
     217,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   218,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
     212,     0,     1,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   219,   220,     0,     0,     0,
       0,     0,     0,     0,     0,  1608,     0,     2,   213,   214,
     215,   216,   217,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   218,    30,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,   172,     0,     1,     0,     0,     0,     0,     0,
       0,    46,    47,    48,    49,    50,    51,   219,   220,     0,
       0,     0,     0,     0,     0,     0,     0,  1945,     0,     2,
       3,     4,   173,     6,     7,     8,     9,    10,   597,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   172,    43,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,    52,
      53,     0,     0,     0,     0,    56,     0,     0,    57,     2,
       3,     4,   173,     6,     7,     8,     9,    10,   597,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   927,    43,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,    52,
      53,     0,     0,     0,     0,    56,     0,     0,    57,     2,
     213,   214,   215,   216,   217,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,    21,    22,
     263,   264,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     265,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,     0,     0,     0,   266,    41,
     267,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   268,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,   269,   270,   271,   272,   219,
     220,     0,     0,     0,     0,     0,     0,     0,   928,     2,
       3,     4,   173,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,    52,
      53,     0,     0,     0,     0,    56,     0,     0,    57,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   219,
     220,     0,     0,     0,     0,    56,     0,     0,    57,     2,
     213,   214,   215,   216,   217,     8,     9,    10,   597,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   219,
     220,     0,     0,     0,     0,    56,     0,     0,    57,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   219,
     220,     0,     0,     0,     0,     0,     0,     0,   753,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   219,
     220,     0,     0,     0,     0,     0,     0,     0,  1494,     2,
     213,   214,   215,   216,   217,   250,   251,   252,  1580,   254,
     255,   256,   257,   258,   259,   260,   261,   262,    21,    22,
     263,   264,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     265,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,     0,     0,     0,   266,    41,
     267,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1117,   268,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,   269,   270,   271,   272,   219,
     220,     0,     0,     0,     0,    56,     0,     0,    57,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,  1118,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   218,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,  1123,     0,     1,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   219,
     220,     2,   213,   214,   215,   216,   217,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,  1124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   218,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,  1129,     0,     1,     0,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    46,    47,    48,    49,    50,
      51,   219,   220,     2,   213,   214,   215,   216,   217,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,  1130,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   218,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,   912,     0,
       1,     0,     0,     0,     0,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    46,    47,    48,
      49,    50,    51,   219,   220,     2,   213,   214,   215,   216,
     217,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,    21,    22,   263,   264,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   265,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,     0,     0,     0,   266,    41,   267,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,   268,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,   269,   270,   271,   272,   219,   220,     2,   213,   214,
     215,   216,   217,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,  1078,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   218,    30,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,    38,    39,     0,    40,    41,    42,     0,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,    47,    48,    49,    50,    51,   219,   220,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,  1135,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   218,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   219,
     220,     2,   213,   214,   215,   216,   217,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   533,    30,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,    38,    39,     0,
      40,    41,    42,     0,     0,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    46,    47,    48,    49,    50,
      51,   219,   220,     2,   213,   214,   215,   216,   217,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,    38,
      39,     0,    40,    41,    42,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,    43,     0,     0,
       0,     0,     0,     0,   863,     0,     0,    46,    47,    48,
      49,    50,    51,   219,   220,     2,   213,   214,   215,   216,
     217,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   218,    30,     0,     0,     0,
       0,     0,     0,    31,    32,     0,     0,     0,    35,     0,
       0,    38,    39,     0,    40,    41,    42,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
      47,    48,    49,    50,    51,   219,   220,     2,   213,   214,
     215,   216,   217,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,    21,    22,   263,   264,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,   508,   509,     0,     0,     0,   266,    41,   267,     0,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,   268,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,    47,   269,   270,   271,   272,   219,   220,     2,
     213,   214,   215,   216,   217,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    31,    32,     0,
       0,     0,    35,     0,     0,    38,    39,     0,    40,    41,
      42,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,    47,    48,    49,    50,    51,   219,
     220,     2,   213,   214,   215,   216,   217,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
      21,    22,   263,   264,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   265,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,     0,     0,     0,
     266,    41,   267,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    46,    47,   269,   270,   271,
     272,   219,   220,     2,   213,   214,   215,   216,   217,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,    21,    22,   263,   264,    25,    26,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   265,     0,     0,     0,     0,     0,
       0,    31,    32,     0,     0,     0,    35,     0,     0,     0,
       0,     0,   266,    41,   267,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   268,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    46,    47,   269,
     270,   271,   272,   219,   220,     0,     0,     0,     0,    56,
       0,     0,   903,  1713,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   599,     2,   213,   214,   215,   216,   217,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,    21,    22,   263,   264,    25,    26,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   265,     0,     0,     0,     0,
       0,     0,    31,    32,     0,     0,     0,    35,     0,     0,
       0,     0,     0,   266,    41,   267,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,    47,
     269,   270,   271,   272,   219,   220,     0,     0,     0,   273,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     274,     2,   213,   214,   215,   216,   217,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
      21,    22,   263,   264,    25,    26,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   265,     0,     0,     0,     0,     0,     0,    31,
      32,     0,     0,     0,    35,     0,     0,     0,     0,     0,
     266,    41,   267,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    46,    47,   269,   270,   271,
     272,   219,   220,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1569,     2,   213,   214,
     215,   216,   217,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,    21,    22,   263,   264,
      25,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   265,     0,
       0,     0,     0,     0,     0,    31,    32,     0,     0,     0,
      35,     0,     0,     0,     0,     0,   266,    41,   267,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   268,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,    47,   269,   270,   271,   272,   219,   220,     0,
       0,     0,   273
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-1798)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       0,   613,   902,   902,   143,   969,   106,   139,    91,   135,
     752,    91,  1256,  1045,   678,   151,    88,    98,   135,   568,
     160,   698,   699,   568,   969,   308,   151,  1044,   164,  1046,
     166,    88,   168,    33,    34,   500,   163,   365,  1753,   164,
     106,   166,    89,   168,    44,   588,  1147,   504,   501,   902,
     500,   859,   135,    88,   754,   135,   868,    57,   775,    99,
      98,   193,    69,   775,    64,   782,   868,     1,   785,    69,
     782,    71,    99,   785,  1044,   618,  1046,    99,   621,   106,
     623,  1659,   625,  1044,   979,  1046,     1,    87,    88,    89,
     826,    91,     1,  1671,   127,     5,   139,    97,   143,    99,
     791,    57,   919,   859,   132,    33,   106,   107,     3,     3,
     110,   139,     1,    88,     3,   196,   197,    45,   854,   119,
       3,     3,   122,     5,    99,  1840,   127,   196,   197,    17,
    1044,  1045,  1046,    28,   365,   135,     3,     5,   138,   139,
      64,   127,    37,   143,    17,    28,   837,   147,   148,   149,
     193,   151,     3,     1,     1,   155,     3,   157,   196,   197,
     160,   161,   348,   163,   164,   165,   166,   588,   168,  1022,
       3,   171,     5,     1,     1,     1,    88,   184,     3,   127,
       1,  1044,   138,  1046,   184,   113,   114,    99,     3,   117,
       5,     1,     5,   193,   106,   119,   130,   618,   132,   133,
     621,     1,   623,    92,   625,     1,     5,   288,   308,     1,
     310,   211,     1,     3,     5,   130,     1,   500,     7,     8,
       9,   290,     3,   223,     1,   225,   298,   136,   138,     5,
       1,   370,   127,   233,   234,  1052,   308,     1,   285,     3,
     309,   298,   308,   138,   310,   245,   128,     1,     1,   249,
     288,   308,   290,     1,   136,     3,     1,  1289,   922,   125,
     148,   128,     1,   298,  1296,   132,    17,   135,  1300,   136,
     310,   309,     1,  1290,     3,   148,    88,    89,   234,   130,
    1297,   132,   130,   310,  1301,   285,   133,   211,   310,     1,
     290,     3,   424,   905,   294,   128,     1,    17,   298,   124,
     125,   308,   130,   136,   132,   133,   133,   133,   308,   134,
     310,   450,   133,   128,     7,     8,     9,     3,   134,   132,
    1290,   136,  1900,   133,   451,   370,   138,  1297,   328,  1290,
     130,  1301,   132,   308,   334,   310,  1297,   133,   127,   130,
    1301,   133,   131,     3,   134,   345,   135,   128,   133,   138,
    2147,   132,     3,  1001,   127,   136,   133,   132,   320,   359,
     130,   137,   133,   138,   134,   138,   294,   329,     3,   133,
       5,     3,     3,   335,     3,  1289,  1290,    28,     1,   133,
     133,   424,  1296,  1297,     5,   133,  1300,  1301,   133,   470,
     471,   472,   473,    28,   133,    79,    28,   148,   310,    28,
     125,   401,   402,   130,   133,   450,   290,   134,  2205,   134,
     290,     1,   124,   125,   414,    75,   416,     3,   501,   347,
     132,   501,   127,  1231,   424,  1233,     3,  1290,   148,   130,
     430,   563,   470,     5,  1297,   473,  1153,    68,  1301,   125,
       3,  1153,   135,   443,   130,   138,   729,   579,   448,   589,
     450,   451,   136,   133,   454,   455,   132,   593,   133,   595,
     460,   926,   138,   463,   464,   465,   466,   467,   593,   919,
     595,     5,   598,   285,  2189,  1231,   127,  1233,     1,  1156,
    1724,   598,  1159,   811,   812,   813,   298,  1099,   569,     1,
     414,   572,   416,   124,   125,   495,   496,   497,  1110,   134,
     500,   501,   134,   134,   504,   134,     1,   507,     1,   132,
     466,   132,   512,   841,   842,   843,   516,   517,     3,  1196,
     563,   521,   522,   976,  1625,  1202,  1203,  1204,  1205,   979,
     987,   569,   989,   533,   572,  1000,   579,   127,   128,   539,
     540,   127,   132,   543,   544,     3,  1246,   127,   548,   549,
    1000,   128,   552,   553,     3,   127,   556,   557,   558,   559,
     560,   561,     1,   563,  1264,   128,   566,  1467,  1467,     3,
     613,  1271,     3,  1116,     7,     8,     9,   577,   578,   579,
     811,   812,   813,   583,  1479,     3,   126,  1052,   588,   589,
      75,  1134,   132,   593,   128,   595,   596,  1245,   598,   599,
     600,  1633,  1052,   603,   133,     7,     8,     9,     3,   132,
     841,   842,   843,   613,  1467,  1579,   128,  1634,   618,   805,
     132,   621,   126,   623,  1519,   625,     3,  1522,   132,   729,
    1442,  1443,   632,   128,  1579,   128,   919,   132,     5,   132,
    1442,  1443,   598,     1,   600,     5,   832,  1546,   133,  1548,
       5,    28,     0,  1553,   840,   724,   725,   729,   696,   697,
     698,   699,     1,   729,  1634,   926,   124,   125,   668,     3,
     670,   752,   729,  1634,   860,   599,   134,     3,   678,    11,
      75,   820,   821,     3,   823,   134,   724,   725,   726,   128,
     124,   125,  1936,   132,   127,  1116,   696,   697,   698,   699,
     134,  1122,   135,   134,     3,   138,   131,  1128,   632,   848,
     849,   850,   851,  1134,   714,   715,   134,  1000,     1,  1633,
    1634,   124,   134,   723,   136,   127,     7,     8,     9,   729,
       3,    88,   138,   135,     3,   735,   138,     5,   133,  1000,
       0,   144,   145,   743,   556,   557,   558,   559,   560,   561,
     750,   751,   752,   753,   754,   755,   127,     1,   130,    28,
     127,   761,   901,   902,   764,   577,   578,   138,   730,  1052,
     128,  1634,   772,   128,   132,   820,   821,   903,   823,  1811,
       7,     8,     9,   711,   712,   132,   903,   127,   788,   128,
     124,   125,   792,   132,   126,  1812,  1513,   131,   138,     3,
     132,  1513,   128,   848,   849,   850,   851,     5,   128,     3,
     127,     5,   696,   697,   698,   699,   696,   697,   698,   699,
       3,   138,     5,  1471,     1,   124,   125,   132,    88,   757,
     758,   759,   131,   448,   834,   125,   193,    31,   838,    99,
     130,     3,  1812,     3,   127,   128,   106,   107,    31,   132,
     976,  1812,   320,  1465,   135,   128,   901,   902,   127,   976,
     128,   329,  1001,   863,   864,   865,    28,   335,   868,   869,
     870,   952,   953,     3,   955,   132,  1016,   958,   959,  1015,
     125,  1008,  1009,   127,   128,    47,  1534,     3,   132,   134,
    1015,   136,   132,   976,    76,    77,   976,  1811,  1812,    76,
      77,   901,   902,   903,    81,  1800,  1801,   907,   135,   909,
     910,    88,    28,   132,    76,    77,    81,   917,   918,   919,
     124,   125,   922,   127,   827,   540,   926,   132,   928,   929,
     128,   931,   132,   933,   126,   112,   113,     3,   133,  1839,
     132,   298,   124,  1083,  1084,    11,   874,   112,   113,  1812,
      81,   308,   855,   130,  1035,   132,  1001,  1093,  1286,   134,
      76,    77,  1639,  1640,   124,   125,   128,  1099,  1093,     3,
     970,   136,   972,     3,  1651,   931,   976,    71,    72,   979,
      81,   112,   113,   598,   984,  1111,  1598,   987,   131,   989,
     990,   828,     3,   136,  1111,   125,   126,  1035,    28,   999,
    1000,  1001,     3,     3,  1746,   814,   815,    37,  1008,  1009,
    1555,   112,   113,  1013,   970,  1015,  1016,  1717,   134,   856,
     133,  1021,  1022,  1023,  1024,  1689,  1914,   161,   984,  1479,
     131,   165,     3,   830,   990,   844,   845,  1586,   298,   133,
      11,  1586,    76,    77,   128,   824,   825,    81,   308,  1514,
     310,   128,  1052,  2017,    88,  1286,  1099,    68,   124,   125,
     126,   858,     7,     8,     9,  1108,   132,  1110,   134,  1519,
      76,    77,  1522,   852,   853,  1723,    76,    77,   112,   113,
    1728,   131,   127,  1083,  1084,  1221,   136,  1087,  1088,    76,
      77,  1091,  1092,  1093,   568,  1095,  1221,   127,  1098,  1099,
     134,     7,     8,     9,    76,    77,  1245,  1293,  1108,     3,
    1110,  1111,  1112,   124,   125,   127,  1116,    11,  1156,  1119,
    1246,  1159,  1122,   124,   125,  1125,   127,   127,  1128,  1246,
    2029,  1131,  2031,   125,  1134,   761,  1136,   124,   764,     3,
     132,     5,  1098,   500,   816,   817,   138,     1,  1796,     3,
    1150,   829,   124,   124,   125,   126,  1156,   772,  1196,  1159,
     131,   132,   127,   134,  1202,  1203,  1204,  1205,  1168,     3,
    1170,    12,    13,   826,   846,   847,    12,    13,  1178,   857,
    2068,  1793,  2070,     3,   814,   815,   131,  1225,  1112,  1227,
     135,  1191,   127,  1738,    28,   455,  1196,  1197,   124,   133,
    1245,   854,  1202,  1203,  1204,  1205,   563,   827,    28,   566,
     134,  1888,   136,  1955,   844,   845,   828,    37,   144,   145,
    1220,  1221,  1222,   131,  1224,   829,     3,   133,    79,   135,
     124,   125,   126,   134,  1234,   855,  1236,   131,   132,   830,
     134,  1241,    76,    77,   856,  1245,  1246,  1859,  2136,   126,
    2138,    28,  2140,   857,  1918,   132,    76,    77,     1,  1187,
     124,   125,   730,   134,  1264,    81,   127,   858,   126,   125,
      47,  1271,  1156,   140,   132,  1159,  1156,    81,   134,  1159,
    1280,     1,   141,   142,   125,   126,  1098,   126,   903,   125,
     126,  2179,  2180,   132,  2182,   910,   112,   113,   126,    76,
      77,   127,  1851,   918,   132,  1953,  1851,   127,   112,   113,
    1234,  2199,  1196,   127,   929,   131,  1196,   791,  1202,  1203,
    1204,  1205,  1202,  1203,  1204,  1205,   130,   128,  1467,  2217,
     134,   132,  1471,    76,    77,   364,    71,    72,    81,    14,
      15,   126,   126,   816,   817,    88,     3,   132,   132,   378,
    1800,  1801,   127,   382,   329,   127,    76,    77,    93,  1287,
     335,    81,    97,   837,    99,   134,   723,   136,    88,   112,
     113,    28,   729,   846,   847,   127,   405,   128,   127,   408,
      37,   132,  2059,   127,  2061,   136,   127,   130,   131,   132,
     127,   146,   112,   113,   131,  1534,    16,   871,   133,   147,
     874,   138,     3,   877,   134,   879,   136,   824,   825,   128,
     130,   131,   132,   132,  1553,   128,   134,   136,   136,    76,
      77,  1970,  1467,   126,    81,  1970,  1471,    28,   128,   132,
     140,    88,   132,  1433,  1434,   852,   853,  1437,  1438,   414,
     128,   416,  1442,  1443,   132,   126,    47,   130,   136,   132,
     128,   132,   146,  2130,   132,   112,   113,   128,   136,    16,
     128,   132,   147,  1463,   132,     3,  1598,  1467,  1468,   729,
     127,  1471,   126,   128,   126,    76,    77,  1477,   132,  1479,
     132,   138,  1482,  1098,  2033,   134,  1486,  2151,  2033,  1534,
      28,  1491,  1492,  1493,    90,    91,    92,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,  1553,   128,
    1438,    10,    11,   132,  1514,   128,  1516,   128,   134,  1519,
     128,   132,  1522,   128,   132,  1525,   128,   128,   134,   128,
     132,   132,  1570,   132,  1534,   130,   128,  1493,    76,    77,
     132,  1541,  1542,    81,   141,   142,  1546,  1547,  1548,  1549,
      88,   127,   130,  2102,   132,  1598,     1,  2102,     3,   130,
    1516,   132,   919,  1606,   134,  2114,   136,   132,   134,  2114,
     136,    10,    11,     7,   112,   113,    10,    11,    12,    13,
      14,    15,    16,    17,  1723,     1,   130,     3,  1062,  1728,
       1,     1,     3,     3,   125,  1595,  1596,   125,  1598,  1725,
     125,  1639,  1640,     1,   134,     3,  1606,   130,  1725,   132,
    2155,   132,   134,  1651,   136,   125,   126,  1617,   130,   134,
     132,   136,   979,   139,   599,   135,  1241,    14,    15,  1244,
     140,   141,   142,   139,   144,   145,   146,   147,   148,  1639,
    1640,   139,  1560,  1000,  1562,   134,  1560,   134,  1562,  1649,
     138,  1651,  1652,   950,   951,  1655,   132,  1796,  2207,  1659,
     132,  1617,  2207,  1663,   950,   951,  1666,   577,   578,   132,
    2219,   132,    76,    77,  2219,   696,   697,    81,  1723,   133,
       3,  1493,   134,  1728,    88,   136,   696,   697,   663,  1689,
    1690,   125,   126,   130,  1830,  1052,  1832,   106,   107,   127,
    1839,   135,   127,  1631,   127,  1830,   130,  1832,   112,   113,
     144,   145,   146,   147,   148,   869,   870,   130,   130,   127,
    1856,  1802,  1858,  1723,   127,  1725,  1200,  1859,  1728,   130,
     134,  1856,   134,  1858,  1662,   130,  1922,  1923,  1924,  1925,
    1926,  1927,  1928,  1929,   130,   125,  1746,   128,  1748,  1749,
    1678,  1796,  1752,    76,    77,  1639,  1640,   133,    81,  1639,
    1640,   139,   139,   125,   139,    88,   139,  1651,   139,    76,
      77,  1651,   139,   138,    81,   134,   134,   130,   133,   125,
       0,    88,   132,   128,   133,   133,  1786,   128,   128,   112,
     113,   127,   139,   128,  1839,   139,  1796,   414,   128,   416,
    1800,  1801,   139,  1803,   127,   112,   113,   128,   136,  1771,
    1772,   136,  1774,  1775,  1953,  1815,  1859,  1779,  1780,  1781,
    1782,   128,   136,   127,    44,   127,   127,  2155,    59,   127,
    1830,  2017,  1832,    76,    77,  1835,   128,     6,    81,     8,
       9,   130,   130,   130,    64,    88,   125,   125,   130,  1464,
    1888,    71,   128,   125,   127,   138,  1856,   127,  1858,  1859,
     125,   128,   128,   138,   128,  1222,   128,  1224,    88,   112,
     113,    91,   132,   132,   132,   128,   133,   128,    98,    99,
     136,   136,  1882,  1883,  1884,  1885,   106,   107,  1888,   136,
    2026,   136,  1892,  1893,   128,  1895,   128,  1897,   131,   119,
     130,  2026,   122,   128,   128,   133,    75,   128,  1953,  1909,
     128,    59,   139,   139,   136,   135,   139,    86,  1918,   136,
     149,  1921,   127,   143,  2155,   128,   562,   127,   148,   149,
     127,   151,   161,   128,   136,   136,   165,   136,   136,   128,
     128,   161,   111,   163,   164,   165,   166,   128,   168,   128,
     128,   125,   121,  1953,   139,  1955,   125,   139,   138,    11,
    1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,   139,   138,
     134,   139,   141,   142,   143,     3,   196,   197,   138,   130,
      76,    77,   599,   136,  1912,    81,  1914,   131,   134,   136,
     130,   211,    88,   131,   131,   127,   971,   130,   134,   128,
      28,   128,  1617,   128,  1888,   225,    76,    77,  1888,   139,
     128,    81,   128,   139,   234,   139,   112,   113,    88,   139,
     139,  2059,   139,  2061,  2024,  2025,  2026,  2027,  2028,  2029,
     139,  2031,   128,   139,   128,  1010,   128,   128,  2038,  2039,
    2040,  2041,   112,   113,    67,    67,   663,   130,    76,    77,
    2050,   128,   139,    81,   139,  2017,   285,   128,   128,  2059,
      88,  2061,  2062,  2144,  2145,   285,   139,   139,   288,   289,
     290,  2071,  2072,   130,   130,   139,   130,   130,   298,   134,
     128,   130,   128,   130,   112,   113,   130,   130,   308,   309,
     310,     1,  2130,   130,   130,   130,   130,    76,    77,   328,
     130,   130,    81,  2187,  1549,   334,   134,   743,   328,    88,
    2110,  2111,  1586,   507,   334,   507,   507,  2117,  2118,   507,
     901,  2121,  1479,  2123,   507,   345,  2126,   956,  1021,   837,
    2130,   308,   308,   112,   113,  1013,  1514,  1112,   465,   775,
    2068,   755,  2070,   334,   526,  2145,   782,  2147,  2135,   785,
     455,  2151,   131,   106,   285,    99,   290,  1631,    99,   107,
      99,  1786,  1519,    -1,  2164,  1522,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,  2059,    -1,  2061,    88,  2059,
      -1,  2061,   402,    -1,    -1,    -1,    -1,  2187,  2188,  1164,
      -1,    -1,    -1,  2193,   414,    -1,   416,    -1,    -1,    -1,
      -1,    -1,   112,   113,    -1,  2205,    -1,  2135,  2136,    -1,
    2138,    -1,  2140,    -1,    -1,    -1,    -1,   127,   128,    -1,
    1835,    -1,   132,    -1,    -1,   454,    -1,    -1,   448,    -1,
     450,   451,    -1,    -1,   454,   455,   465,    -1,    -1,    -1,
     460,    -1,  2170,    -1,   464,   465,  2130,   467,    -1,    -1,
    2130,  2179,  2180,     3,  2182,    -1,    -1,    -1,    -1,    -1,
      -1,     3,   556,   557,   558,   559,   560,   561,    -1,    -1,
      -1,  2199,  1247,    -1,    -1,   495,   496,    -1,    28,  1753,
     500,   501,    -1,   577,   578,    -1,    28,   507,   517,  2217,
      -1,  1765,   512,    -1,  1269,    37,  1770,   517,    -1,  1773,
      -1,   521,   522,  1771,  1772,    -1,  1774,  1775,    -1,    -1,
      -1,  1779,  1780,  1781,  1782,    -1,    -1,    -1,    -1,     0,
     540,    -1,    -1,   543,   544,    -1,    76,    77,   548,   549,
      -1,    81,   552,   553,    76,    77,    -1,    -1,    88,    81,
      -1,    -1,   562,    -1,    -1,    -1,    88,    -1,    -1,   569,
      -1,    -1,   572,    -1,   971,    -1,    -1,    -1,    -1,    -1,
      -1,     3,   112,   113,    -1,    -1,  1840,    -1,   588,    -1,
     112,   113,    -1,   593,    -1,   595,    -1,  1851,   598,   599,
      -1,    -1,   124,    -1,   134,   127,    28,    47,    48,     3,
      -1,    -1,    -1,  1010,    -1,    37,   138,    -1,   618,    -1,
      -1,   621,    -1,   623,    -1,   625,    -1,    88,  1044,  1045,
    1046,    -1,   632,    -1,    28,    -1,    76,    77,    99,    -1,
      -1,    81,    -1,    37,    -1,   106,   107,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    76,    77,    76,    77,    -1,    81,
      -1,    81,    -1,  1800,  1801,    -1,    88,    -1,    88,    -1,
      -1,    -1,   112,   113,  1922,  1923,  1924,  1925,  1926,  1927,
    1928,  1929,    76,    77,   124,    -1,    -1,    81,   149,     0,
     112,   113,   112,   113,    88,    -1,   696,   697,   698,   699,
     161,    -1,   124,    -1,   165,   127,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,   136,  1112,  1970,    -1,   112,   113,
      -1,    -1,    -1,    -1,   724,   725,   726,    -1,    -1,   729,
     124,    -1,    -1,   127,   128,   735,    -1,  1153,    -1,    -1,
      -1,   750,   751,   743,    -1,   754,   755,    37,    -1,    -1,
     750,   751,   752,    -1,   754,   755,    -1,    47,    48,    -1,
      -1,   761,    -1,    -1,   764,    -1,    -1,  1164,  1523,  2017,
      -1,    -1,   772,    -1,    -1,   775,    -1,    88,    -1,  2033,
      -1,    -1,   782,    -1,  1539,   785,    76,    77,    99,    -1,
      -1,    81,    -1,    -1,    -1,   106,   107,    -1,    88,    -1,
      -1,    -1,    -1,   118,     3,    -1,    -1,    -1,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    -1,
      -1,    -1,   112,   113,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   124,    96,    -1,   298,    37,    38,
      39,    40,    41,    -1,    -1,    -1,    -1,   308,  2102,   310,
    1247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2114,    -1,    -1,    -1,    -1,   865,    -1,    -1,   868,   869,
     870,    -1,  1269,  1289,  1290,    -1,    -1,    76,    77,    -1,
    1296,  1297,    81,    -1,  1300,  1301,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   901,   902,   903,    -1,     1,    -1,     3,    -1,   918,
     910,    -1,    -1,   112,   113,    -1,    -1,    -1,   918,   919,
     929,   131,    -1,   234,    -1,   124,   926,    -1,   127,   929,
      -1,   931,    28,   933,    -1,  2189,    -1,    -1,    -1,    -1,
      -1,    37,    38,    39,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2207,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    48,    -1,    -1,  2219,    -1,    -1,    -1,    -1,
      -1,    -1,  1727,    -1,  1729,   290,   976,    -1,    -1,    -1,
      76,    77,    -1,    -1,   984,    81,    -1,   298,  1743,  1744,
      76,    77,    88,   454,    -1,    81,    -1,   308,    -1,   310,
    1000,  1001,    88,    -1,   465,    -1,    -1,    -1,  1008,  1009,
      -1,    -1,    -1,   495,   496,  1015,   112,   113,    -1,    47,
      48,  1021,    -1,    -1,    -1,    -1,   112,   113,   124,   290,
      -1,   127,    -1,   348,   130,    -1,   132,   133,    -1,   521,
     522,   127,    -1,  1052,  1044,  1045,  1046,    -1,    76,    77,
      -1,    -1,  1052,    81,    -1,    -1,   517,    -1,    -1,    -1,
      88,   543,   544,    -1,    -1,    -1,   548,   549,    -1,    -1,
     552,   553,    -1,    -1,     1,    -1,     3,     4,     5,    -1,
      -1,    -1,    -1,    -1,   112,   113,    -1,  1087,  1088,    -1,
      -1,  1091,  1092,  1093,    -1,   288,   289,  1513,    -1,   127,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1111,  1112,   495,   496,    -1,  1116,    -1,    -1,    -1,
      -1,    -1,  1122,    -1,    -1,    -1,  1523,    -1,  1128,    -1,
      -1,    -1,    -1,    -1,  1134,    -1,    -1,   448,    -1,   521,
     522,    68,  1539,    -1,    -1,    -1,    73,    74,    -1,    -1,
      -1,    -1,    -1,  1153,    -1,    -1,  1156,    -1,    -1,  1159,
      87,   543,   544,    -1,    -1,    -1,   548,   549,    -1,    -1,
     552,   553,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,   500,
      -1,    -1,    -1,   120,    -1,    -1,  1196,    -1,    -1,  1954,
     127,    -1,  1202,  1203,  1204,  1205,    -1,    -1,  1963,   470,
     137,   138,     1,    -1,     3,    -1,    -1,  1633,  1634,    -1,
    1220,  1221,     0,    -1,    -1,  1225,    -1,  1227,    -1,   540,
      -1,    -1,    -1,    -1,  1234,  1244,    -1,    -1,    -1,    28,
      -1,  1241,    -1,    -1,  1244,  1245,  1246,    -1,    37,    38,
      39,    40,    41,   568,    -1,  1264,    -1,    -1,    -1,    -1,
      -1,    -1,  1271,    -1,  1264,   526,  2021,  2022,   729,    -1,
      -1,  1271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,  1289,
    1290,    -1,    81,    -1,    -1,    -1,  1296,  1297,    -1,    88,
    1300,  1301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,   631,    -1,    -1,    97,
       3,    99,    -1,   112,   113,    -1,    -1,    -1,   106,   107,
    1727,    -1,  1729,    -1,    -1,   124,    -1,    -1,   127,    -1,
      -1,   130,    -1,   132,   133,    28,  1743,  1744,    -1,    -1,
      -1,    -1,    -1,   668,    37,    -1,    -1,    -1,    -1,    -1,
     138,   139,   140,   141,   142,    -1,     0,    -1,    -1,    -1,
     148,    -1,    -1,   151,     3,    -1,   569,    -1,    -1,   572,
      -1,   696,   697,   698,   699,    -1,   164,    -1,   166,    -1,
     168,    -1,    -1,    76,    77,  1811,  1812,    -1,    81,    28,
      -1,    -1,    -1,    -1,    -1,    88,    -1,   668,    37,    -1,
      -1,    -1,    -1,    -1,    -1,   193,   194,   195,   729,    -1,
      -1,    -1,    -1,    -1,   735,    -1,    -1,    76,    77,   112,
     113,    -1,    81,    -1,    -1,   696,   697,   698,   699,    88,
      -1,   756,  1442,  1443,   127,   760,    -1,    76,    77,    -1,
     761,    -1,    81,   764,    88,   233,   234,   918,    -1,    88,
      -1,    -1,    -1,   112,   113,    99,     3,  1467,   929,    -1,
      -1,  1471,   106,   107,    -1,   124,   791,    -1,   127,    -1,
      -1,    -1,    -1,   112,   113,    -1,    -1,    76,    77,   138,
     805,    28,    81,    -1,    -1,   124,    -1,    -1,   127,    88,
      37,    -1,    -1,   696,   697,   698,   699,   285,    -1,    -1,
      -1,    -1,    -1,  1513,    -1,    -1,  1516,   832,    -1,    -1,
     298,    -1,   837,   112,   113,   840,    -1,    -1,    -1,    -1,
     308,    -1,   310,   726,  1534,   124,    -1,    -1,   127,    76,
      77,  1541,  1542,    -1,    81,   860,  1546,  1547,  1548,  1549,
      -1,    88,    -1,    -1,   865,    -1,   871,  1954,    -1,   874,
      -1,    -1,   877,    -1,   879,    -1,  1963,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,
     127,    -1,    -1,    -1,    -1,  1595,  1596,    -1,    -1,   910,
     234,    -1,    -1,    -1,    -1,  1087,  1088,    -1,   919,  1091,
    1092,    -1,    -1,    -1,    -1,   926,    -1,  1617,    -1,    -1,
      -1,    -1,   933,    -1,  2021,  2022,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1633,  1634,    -1,    -1,    -1,    -1,  1639,
    1640,    -1,    -1,    -1,    -1,    -1,   424,   425,   426,    -1,
      -1,    -1,  1652,    -1,    -1,  1655,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1663,   298,    -1,    -1,    -1,    -1,    -1,
     448,    -1,    -1,   984,   308,    -1,   310,   455,    -1,    -1,
      -1,    -1,   668,    -1,    -1,    -1,    -1,    -1,   466,  1000,
    1690,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1087,  1088,    -1,    -1,  1091,
    1092,   345,   698,   699,    -1,    -1,    -1,   495,   496,    -1,
      -1,   982,   500,  1723,    -1,  1725,   504,    -1,  1728,   507,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   516,    -1,
      -1,    -1,    -1,   521,   522,    -1,  1746,  1062,    -1,    -1,
      -1,  1012,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   540,    -1,    -1,   543,   544,    -1,    -1,    -1,
     548,   549,    -1,     0,   552,   553,    -1,    -1,   556,   557,
     558,   559,   560,   561,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1796,    -1,    -1,   577,
     578,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1811,  1812,    -1,   448,   593,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1830,    -1,  1832,    -1,    -1,  1835,    -1,   615,    -1,    -1,
      -1,  1156,   288,   289,  1159,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1168,    -1,    -1,  1856,    -1,  1858,    -1,
      -1,    88,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,
      -1,    -1,    99,    -1,  1189,  1190,    -1,    -1,    -1,   106,
     107,  1196,    -1,    -1,    -1,  1200,    -1,  1202,  1203,  1204,
    1205,    -1,  1892,  1893,    -1,  1156,    -1,    -1,  1159,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   540,  1168,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   149,  1234,    -1,    -1,    -1,    -1,    -1,    -1,
    1241,    -1,    -1,    -1,   161,  1196,    -1,    -1,   165,    -1,
      -1,  1202,  1203,  1204,  1205,   723,    -1,    -1,    -1,    -1,
      -1,   729,    -1,  1953,    -1,  1955,    -1,    -1,    -1,     0,
      -1,    -1,    -1,  1156,    -1,    -1,  1159,    -1,    -1,    -1,
      -1,    -1,   750,    -1,    -1,    -1,   754,    -1,  1293,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   772,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1196,    -1,    -1,    -1,    -1,    -1,  1202,
    1203,  1204,  1205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2024,  2025,  2026,  2027,  2028,  2029,
      -1,  2031,  1225,    -1,  1227,    -1,    -1,    -1,  2038,  2039,
    2040,  2041,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,  1541,
    1542,    -1,    -1,    -1,    -1,   106,   107,    -1,    -1,    -1,
      -1,   298,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   308,    -1,   310,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   729,    -1,    -1,    -1,    -1,
      -1,   735,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,
    2110,  2111,    -1,  1595,  1596,    -1,    -1,    -1,   752,    -1,
     161,    -1,    -1,   569,   165,   903,   572,   761,    -1,    -1,
     764,    -1,   910,    -1,    -1,    -1,    -1,    -1,   772,   917,
     918,   919,    -1,    -1,    -1,    -1,    -1,    -1,   926,    -1,
      -1,   929,    -1,   931,    -1,    -1,    -1,    -1,    -1,  1541,
    1542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1156,    -1,    -1,  1159,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1168,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   970,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   979,    -1,    -1,    -1,  1516,   984,    -1,    -1,    -1,
    1196,    -1,   990,  1595,  1596,    -1,  1202,  1203,  1204,  1205,
      -1,    -1,  1000,    -1,    -1,    -1,    -1,   454,    -1,    -1,
      -1,   865,    -1,    -1,    -1,    -1,    -1,  1015,   465,    -1,
    1555,    -1,    -1,    -1,    -1,    -1,    -1,  1025,    -1,    -1,
     696,   697,   698,   699,    -1,    -1,    -1,   298,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   308,    -1,   310,
      -1,  1586,    -1,    -1,  1052,    -1,   910,    -1,    -1,    -1,
     726,    -1,    -1,    -1,    -1,   919,    -1,    -1,    -1,    -1,
     517,    -1,   926,    -1,    -1,    -1,    -1,   931,    -1,   933,
      -1,    -1,    -1,   118,    -1,    -1,  1617,    -1,    -1,  1087,
    1088,    -1,    -1,  1091,  1092,  1093,  1631,    -1,    -1,    -1,
    1098,  1099,    -1,    -1,  1639,  1640,    -1,    -1,   143,    -1,
      -1,  1109,    -1,    -1,  1649,    -1,  1651,  1652,    -1,    -1,
    1655,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1663,    -1,
     984,  1666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1000,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1639,  1640,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1649,    -1,
    1651,  1652,    -1,    -1,  1655,    -1,   211,    -1,    -1,    -1,
      -1,    -1,  1663,    -1,    -1,  1666,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   454,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1738,   465,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1750,    -1,    -1,  1753,    -1,
      -1,    -1,  1220,  1221,    -1,    -1,  1639,  1640,    -1,    -1,
    1765,    -1,    -1,    -1,    -1,  1770,    -1,    -1,  1773,  1652,
      -1,    -1,  1655,  1241,    -1,    -1,  1244,    -1,  1246,    -1,
    1663,    -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1264,    -1,    -1,    -1,
      -1,    -1,    -1,  1271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   729,    -1,    -1,   320,    -1,    -1,    -1,   324,
     325,   326,    -1,    -1,   329,    -1,    -1,    -1,    -1,    -1,
     335,    -1,    -1,    -1,  1835,  1840,   341,    -1,    -1,    -1,
      -1,    -1,    -1,   348,    -1,    -1,  1851,    -1,    -1,    -1,
      -1,    -1,  2024,  2025,    -1,  2027,  2028,    -1,    -1,    -1,
     365,    -1,    -1,    -1,    -1,   370,  2038,  2039,  2040,  2041,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1882,  1883,  1884,
    1885,    -1,    -1,  1888,    -1,    -1,    -1,  1892,  1893,    -1,
    1895,    -1,  1897,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1909,    -1,    -1,    -1,    -1,   414,
      -1,   416,    -1,    -1,  1919,  1920,    -1,  1241,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1882,  1883,  1884,  1885,    -1,    -1,  1888,  2110,  2111,
      -1,  1892,  1893,    -1,  1895,   450,  1897,    -1,    -1,    -1,
      -1,    -1,  2024,  2025,    -1,  2027,  2028,    -1,  1909,    -1,
      -1,    -1,    -1,  1639,  1640,  1970,  2038,  2039,  2040,  2041,
      -1,    -1,    -1,  1649,    -1,  1651,  1652,    -1,    -1,  1655,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1663,    -1,    -1,
    1666,    -1,    -1,    -1,    -1,    -1,  1464,    -1,   729,    -1,
      -1,   918,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1892,
    1893,  1479,   929,    -1,    -1,    -1,    -1,    -1,  1486,    -1,
    1156,    -1,    -1,  1159,    -1,  1493,    -1,    -1,  2033,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2110,  2111,
      -1,    -1,    -1,    -1,    -1,  2050,  1514,    -1,  1516,    -1,
      -1,    -1,    -1,    -1,  2059,    -1,  2061,   562,    -1,    -1,
    1196,    -1,    -1,    -1,    -1,    -1,  1202,  1203,  1204,  1205,
      -1,    -1,    -1,  1541,  1542,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1225,
      -1,  1227,    -1,    -1,   599,    -1,    -1,  2102,    -1,  2050,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2059,  2114,
    2061,    -1,  2117,  2118,    -1,    -1,  2121,    -1,  2123,    -1,
      -1,  2126,    -1,    -1,    -1,  2130,   631,  1595,  1596,    -1,
    1598,    -1,  2137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1617,
    2155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   663,  2164,
      -1,    -1,    -1,    -1,   118,    -1,  2117,  2118,    -1,    -1,
    2121,    -1,  2123,    -1,    -1,  2126,    -1,    -1,    -1,  2130,
      -1,    -1,    -1,    -1,  2189,    -1,    -1,   918,  2193,    -1,
      -1,    -1,  1516,    -1,    -1,    -1,    -1,    -1,   929,    -1,
      -1,    -1,  2207,    -1,  2209,    -1,  1882,  1883,  1884,  1885,
      -1,    -1,  1888,  2164,  2219,    -1,  1892,  1893,    -1,  1895,
      -1,  1897,    -1,    -1,    -1,   730,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1909,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2193,    -1,    -1,    -1,    -1,    -1,    -1,  1717,
      -1,   756,    -1,    -1,    -1,   760,    -1,   211,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     775,    -1,    -1,    -1,    -1,    -1,    -1,   782,    -1,    -1,
     785,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1617,    -1,    -1,    -1,    -1,    -1,    -1,
     805,    -1,    -1,    -1,    -1,    -1,   811,   812,   813,   814,
     815,   816,   817,    -1,    -1,   820,   821,    -1,   823,   824,
     825,   826,   827,   828,   829,   830,    -1,   832,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,    -1,   860,    -1,    -1,    -1,    -1,
      -1,    -1,  1830,    -1,  1832,    -1,    -1,  1835,    -1,    -1,
      -1,    -1,    -1,    -1,  2050,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2059,    -1,  2061,    -1,    -1,  1856,    -1,
    1858,    -1,    -1,    -1,   348,    -1,   901,   902,    -1,    -1,
    1868,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1746,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,
      -1,  2117,  2118,    -1,    -1,  2121,    -1,  2123,    -1,    -1,
    2126,    -1,    -1,    -1,  2130,    -1,    -1,    -1,    -1,    -1,
     414,    -1,   416,    -1,   969,    -1,   971,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2164,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1001,    -1,    -1,    -1,
      -1,    -1,   211,  1639,  1640,  1010,    -1,    -1,    -1,    -1,
      -1,  1835,    -1,    -1,    -1,    -1,  1652,  2193,    -1,  1655,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1663,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1044,
      -1,  1046,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2024,  2025,  2026,  2027,
    2028,     1,    -1,    -1,     4,     5,     6,    -1,     8,     9,
    2038,  2039,  2040,  2041,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   148,    -1,    -1,   151,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,  1112,   562,    -1,
      -1,   320,    -1,    -1,    -1,   324,   325,   326,    -1,    -1,
     329,    -1,    -1,    -1,    -1,    -1,   335,    -1,    68,    -1,
      -1,  1955,   341,    73,    74,    75,    -1,    -1,    -1,   348,
      -1,    -1,  2110,  2111,    -1,   599,    86,    -1,  1153,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   365,    -1,    -1,  1164,
     100,   370,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,   631,    -1,    -1,
     120,   121,    -1,    -1,  1189,  1190,    -1,    -1,    -1,   129,
     130,    -1,   132,   133,   134,    -1,    -1,   137,   138,    -1,
     140,   141,   142,   143,    -1,   414,    -1,   416,    -1,   663,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1245,   450,  1247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1892,  1893,    -1,    -1,
      -1,    -1,    -1,    -1,  1269,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1286,    -1,    -1,    -1,  1290,    -1,    -1,  1293,    -1,
      -1,    -1,  1297,    -1,    -1,    -1,  1301,    -1,    -1,    -1,
      -1,    -1,   756,    -1,    -1,    -1,   760,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   775,    -1,    -1,    -1,    -1,    -1,    -1,   782,    -1,
      -1,   785,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   805,    -1,   562,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,   832,    -1,
      -1,    73,    74,    75,   148,    -1,   840,   151,    -1,    -1,
     599,    -1,    -1,    -1,    86,    87,    -1,    -1,    -1,    -1,
     164,    -1,   166,    -1,   168,    -1,   860,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,   631,    -1,    -1,    -1,    -1,    -1,   120,   121,
     495,   496,   124,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,    -1,    -1,    -1,    -1,   137,   138,   139,   140,   141,
     142,   143,    -1,    -1,   663,    -1,   521,   522,    -1,    -1,
      -1,    -1,  1467,    -1,    -1,    -1,  1471,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   543,   544,
      -1,    -1,    -1,   548,   549,    -1,    -1,   552,   553,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1513,    -1,
      -1,    -1,    -1,    -1,    -1,   969,    -1,   971,  1523,    -1,
      -1,   730,    -1,    -1,    -1,    -1,   290,    -1,   593,  1534,
     595,    -1,    -1,    -1,  1539,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   756,  1553,    -1,
    1555,   760,    -1,    -1,    -1,  1560,  1010,  1562,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   775,    -1,    -1,    -1,
      -1,    -1,    -1,   782,  1579,    -1,   785,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1044,    -1,  1046,    -1,    -1,    -1,   805,    -1,    -1,    -1,
      -1,    -1,   811,   812,   813,   814,   815,   816,   817,    -1,
      -1,   820,   821,    -1,   823,   824,   825,   826,   827,   828,
     829,   830,    -1,   832,    -1,    -1,    -1,    -1,    -1,  1634,
      -1,   840,   841,   842,   843,   844,   845,   846,   847,   848,
     849,   850,   851,   852,   853,   854,   855,   856,   857,   858,
      -1,   860,    -1,    -1,    -1,    -1,    -1,    -1,  1112,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   901,   902,    -1,    -1,    -1,    -1,    -1,  1153,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1723,    -1,
      -1,    -1,  1727,  1728,  1729,    -1,    -1,    -1,    -1,    -1,
      -1,   495,   496,  1738,    -1,  1189,  1190,    -1,  1743,  1744,
      -1,    -1,    -1,    -1,    -1,  1750,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     969,    -1,   971,    -1,    -1,    -1,  1771,  1772,    -1,  1774,
    1775,    -1,    -1,    -1,  1779,  1780,  1781,  1782,    -1,   543,
     544,    -1,    -1,    -1,   548,   549,    -1,    -1,   552,   553,
      -1,  1796,  1001,  1247,    -1,    -1,    -1,    -1,   562,    -1,
      -1,  1010,    -1,    -1,   365,    -1,    -1,  1812,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1269,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   593,
      -1,   595,    -1,    -1,  1839,  1044,  1290,  1046,    -1,  1293,
      -1,   148,    -1,  1297,   151,    -1,    -1,  1301,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   950,   951,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1112,   668,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1919,  1920,    -1,  1922,  1923,  1924,
    1925,  1926,  1927,  1928,  1929,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   696,   697,   698,   699,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1153,    -1,    -1,    -1,  1953,  1954,
    1015,    -1,    -1,    -1,    -1,  1164,    -1,    -1,  1963,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1189,  1190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   775,  2017,    -1,    -1,    -1,  2021,  2022,   782,    -1,
      -1,   785,  1087,  1088,    -1,    -1,  1091,  1092,  1093,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1245,    -1,  1247,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1513,
    1269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1523,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1286,    -1,    -1,
      -1,  1290,    -1,    -1,  1293,  1539,     0,    -1,  1297,    -1,
      -1,   345,  1301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1555,    -1,    -1,    -1,    -1,  1560,    -1,  1562,    -1,
      -1,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1579,    -1,    -1,    -1,    -1,
      -1,    -1,  2137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,
    2155,    -1,    -1,   407,    -1,  1220,  1221,   411,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,    -1,
    1634,    -1,    -1,    97,    -1,    99,   950,   951,   495,   496,
      -1,    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,
     507,    -1,    -1,    -1,  2209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   466,    -1,   521,   522,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   138,   139,    -1,    -1,    -1,    -1,
     791,    -1,    -1,    -1,    -1,    -1,   543,   544,    -1,    -1,
      -1,   548,   549,    -1,    -1,   552,   553,    -1,    -1,    -1,
      -1,  1015,    -1,    -1,    -1,    -1,    -1,    -1,  1467,    -1,
      -1,    -1,  1471,   824,   825,   826,   827,   828,    -1,    -1,
     831,    -1,    -1,  1727,    -1,  1729,   837,    -1,    -1,   193,
    1044,    -1,  1046,    -1,  1738,    -1,   593,    -1,   595,  1743,
    1744,   852,   853,   854,   855,   856,  1750,    -1,   859,    -1,
      -1,    -1,    -1,    -1,  1513,    -1,    -1,    -1,    -1,    -1,
     871,    -1,    -1,    -1,  1523,    -1,   877,    -1,    -1,    -1,
      -1,    -1,    -1,  1087,  1088,  1534,    -1,  1091,  1092,  1093,
    1539,   245,    -1,    -1,    -1,   249,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1553,    -1,  1555,    -1,    -1,    -1,
      -1,  1560,    -1,  1562,    -1,    -1,    -1,    -1,  1812,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1579,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   633,
      -1,    -1,    -1,    -1,   298,    -1,    -1,    -1,    -1,  1153,
      -1,    -1,  1156,    -1,   308,  1159,   310,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1168,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   673,
      -1,    -1,    -1,    -1,    -1,  1634,    -1,    -1,    -1,    -1,
      -1,    -1,  1196,    -1,   688,   689,    -1,    -1,  1202,  1203,
    1204,  1205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1220,  1221,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1919,  1920,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1541,  1542,    -1,    -1,
      -1,   735,    -1,    -1,   738,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   752,    -1,
    1954,    -1,    -1,    -1,    -1,    -1,    -1,   761,    -1,  1963,
     424,    -1,   766,   767,  1723,    -1,    -1,    -1,  1727,  1728,
    1729,    -1,    -1,    -1,    -1,    -1,  1290,    -1,    -1,  1738,
    1595,  1596,    -1,  1297,  1743,  1744,    -1,  1301,    -1,   793,
      -1,  1750,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1771,  1772,    -1,  1774,  1775,  2021,  2022,    -1,
    1779,  1780,  1781,  1782,    -1,    -1,    -1,   831,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   839,    -1,  1796,    -1,    -1,
      -1,   148,    -1,    -1,   151,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1812,    -1,   859,    -1,   164,    -1,   166,
    1171,   168,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   875,   876,    -1,    -1,    -1,   880,    -1,    -1,    -1,
    1839,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   556,   557,   558,   559,   560,   561,    -1,   563,
      -1,    -1,   566,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,    -1,
    1231,    -1,  1233,    -1,    -1,    -1,    -1,   931,    -1,    -1,
      -1,    -1,    -1,  2137,   598,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2155,    -1,    -1,    -1,    -1,    -1,    -1,  1015,    -1,
    1919,  1920,    -1,  1922,  1923,  1924,  1925,  1926,  1927,  1928,
    1929,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1953,  1954,    -1,    -1,    -1,  1513,
      -1,    -1,    -1,    -1,  1963,  2209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1830,    -1,  1832,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1541,  1542,    -1,
    1087,  1088,    -1,    -1,  1091,  1092,  1093,    -1,    -1,    -1,
      -1,  1856,    -1,  1858,    -1,    -1,  1560,    -1,  1562,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2017,   723,
      -1,    -1,  2021,  2022,    -1,   729,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1595,  1596,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1634,    -1,    -1,    -1,    -1,  1639,  1640,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1649,    -1,  1651,  1652,    -1,
      -1,  1655,    -1,    -1,    -1,    -1,    -1,  1151,    -1,  1663,
      -1,    -1,  1666,    -1,    -1,    -1,  1160,  1161,    -1,  1163,
      -1,    -1,    -1,  1220,  1221,    -1,    -1,  1171,    -1,    -1,
      -1,    -1,    -1,    -1,  1178,    -1,    -1,    -1,  2137,    -1,
      -1,  1185,  1186,    -1,    -1,    -1,    -1,    -1,   495,   496,
      -1,    -1,    -1,    -1,    -1,    -1,  2155,    -1,    -1,    -1,
     507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2024,
    2025,  2026,  2027,  2028,   521,   522,    -1,    -1,    91,    -1,
      -1,    -1,    -1,  2038,  2039,  2040,  2041,  1231,    -1,  1233,
      -1,    -1,    -1,    -1,    -1,    -1,   543,   544,    -1,    -1,
      -1,   548,   549,    -1,    -1,   552,   553,    -1,    -1,    -1,
    2209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1265,   135,    -1,    -1,    -1,    -1,   931,    -1,    -1,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   593,    -1,   595,    -1,
     163,    -1,    -1,    -1,    -1,  2110,  2111,    -1,  1812,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   970,  1311,  1312,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1830,    -1,  1832,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   990,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1856,    -1,  1858,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1363,
      -1,  1365,    -1,    -1,    -1,    -1,     3,    -1,  1882,  1883,
    1884,  1885,  1376,  1377,  1888,    -1,    -1,    -1,  1892,  1893,
      -1,  1895,    -1,  1897,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,  1909,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,  1427,    -1,  1429,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,  1098,  1099,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,  1765,    -1,    -1,    -1,    -1,  1770,
    1771,  1772,  1773,  1774,  1775,   102,    -1,    -1,  1779,  1780,
    1781,  1782,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,  1541,  1542,    -1,   124,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2024,  2025,  2026,  2027,  2028,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2038,  2039,  2040,  2041,    -1,   402,
      -1,    -1,    -1,    -1,    -1,    -1,  2050,    -1,  1595,  1596,
      -1,    -1,    -1,    -1,    -1,  2059,    -1,  2061,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1222,    -1,
    1224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,    -1,    -1,    -1,    -1,    -1,   450,   451,    -1,
      -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   464,    -1,    -1,   467,    -1,  2110,  2111,    -1,    -1,
      -1,    -1,    -1,  2117,  2118,    -1,    -1,  2121,    -1,  2123,
      -1,    -1,  2126,    -1,    -1,    -1,  2130,    -1,    -1,  1623,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,   501,    -1,
      -1,    -1,    -1,    -1,   507,    -1,    -1,    -1,    -1,    -1,
      -1,  1645,  1646,  1647,  1648,    -1,  1650,  1651,    -1,    -1,
    2164,    -1,  1656,  1657,     0,  1659,    -1,  1661,    -1,    88,
      -1,    -1,    -1,    -1,    -1,  1669,  1670,  1671,    -1,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,  2193,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1695,    -1,  1697,    -1,  1699,   125,  1701,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1015,    -1,
      56,    57,    -1,    -1,    -1,   588,    -1,    -1,    -1,    -1,
     149,    -1,    -1,    -1,    -1,   598,    -1,    -1,    -1,    -1,
      -1,    -1,   161,    -1,    -1,    -1,   165,    -1,    -1,    -1,
      -1,    -1,    88,    89,    -1,   618,    -1,    93,   621,    -1,
     623,    -1,   625,    99,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,    -1,    -1,    -1,    -1,    -1,   196,   197,    -1,
      -1,    -1,    -1,  1830,    -1,  1832,    -1,    -1,    -1,   125,
    1087,  1088,    -1,    -1,  1091,  1092,  1093,    -1,    -1,    -1,
      -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,  1856,
      -1,  1858,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1493,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
     289,   290,   208,    -1,    28,  1869,    -1,    -1,    -1,   298,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   308,
     309,   310,    -1,    -1,    -1,  1889,    -1,    -1,   234,    -1,
    1894,    -1,  1896,  1897,    -1,  1899,  1900,    -1,  1902,   328,
    1904,    -1,    -1,    -1,    68,   334,  1910,  1911,    -1,    73,
      74,    75,    -1,  1220,  1221,    -1,   345,    -1,    -1,    -1,
      -1,    -1,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1598,    -1,   100,    -1,    -1,   285,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,  1955,   298,    -1,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,   308,   127,   310,   129,    -1,  2024,  2025,  2026,
    2027,  2028,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,  2038,  2039,  2040,  2041,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   868,   869,   870,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   448,
      -1,    -1,    -1,    -1,    -1,   454,    -1,    -1,   901,   902,
     903,    -1,    -1,    -1,    -1,    -1,   465,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2051,  2052,    -1,
    2054,  2055,  2056,  2110,  2111,    -1,  2060,  2061,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,   500,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   517,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   448,   976,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   540,    -1,    -1,    -1,  2119,  2120,    -1,  2122,  2123,
     466,    -1,    -1,  2127,    -1,    -1,    -1,    -1,  1001,    -1,
      -1,    -1,    68,   562,    -1,  1008,  1009,    73,    74,    75,
     569,    -1,    -1,   572,    -1,    -1,    -1,    -1,  1021,    -1,
      86,    87,    -1,    -1,   500,    -1,    -1,   503,    -1,    -1,
      -1,    -1,    -1,  2167,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,
      -1,   127,   128,   129,   540,  1859,   132,    -1,    -1,    -1,
     136,   137,   138,    -1,   140,   141,   142,   143,    -1,    -1,
     556,   557,   558,   559,   560,   561,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   577,   578,    -1,  1541,  1542,    -1,    -1,  1111,    -1,
      -1,    -1,    -1,  1116,    -1,    -1,   675,    -1,    -1,  1122,
      -1,    -1,   598,    -1,   600,  1128,    -1,    -1,    -1,    -1,
      -1,  1134,    -1,    -1,    -1,   611,    -1,   696,   697,   698,
     699,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1595,  1596,
      -1,    -1,    -1,    -1,    -1,   724,   725,   726,    -1,    -1,
     729,    -1,    -1,    -1,    -1,   651,   735,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   743,    -1,    -1,    -1,    -1,    -1,
      -1,   750,   751,   752,    -1,   754,   755,    -1,    -1,    -1,
      -1,    -1,   761,    -1,    -1,   764,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   772,    -1,    -1,   775,    -1,    -1,    -1,
      -1,    -1,    -1,   782,    -1,    -1,   785,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1245,  1246,    -1,    -1,   722,    -1,    -1,    -1,
      -1,    -1,    -1,   729,    -1,    -1,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   750,    -1,    -1,    -1,   754,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,   772,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   865,    -1,    -1,    -1,
      -1,   345,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   910,    -1,    -1,    -1,    -1,    -1,    69,    -1,   918,
     919,    -1,    -1,    -1,    76,    77,    -1,   926,    -1,    81,
     929,   930,   931,   407,   933,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,    -1,  1830,    -1,  1832,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,    -1,    -1,   127,    -1,    -1,    -1,  1856,
      -1,  1858,   134,    -1,    -1,   984,   138,   903,   904,    -1,
      -1,    -1,   466,    -1,   910,    -1,    -1,    -1,    -1,  1442,
    1443,  1000,   918,   919,    -1,    -1,    -1,    -1,    -1,    -1,
     926,    -1,    -1,   929,   930,   931,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1467,    -1,    -1,    -1,  1471,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1044,  1045,  1046,    -1,    -1,
      -1,    -1,    -1,  1052,   970,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   978,    -1,    -1,    -1,    -1,    -1,   984,    -1,
      -1,    -1,    -1,    -1,   990,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1000,    -1,    -1,    -1,    -1,    -1,
      -1,  1534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1546,  1547,  1548,  1549,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1052,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2024,  2025,  2026,
    2027,  2028,    -1,    -1,  1153,    -1,    -1,  1156,    -1,    -1,
    1159,  2038,  2039,  2040,  2041,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1098,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1107,    -1,    -1,    -1,    -1,    -1,  1196,    -1,   673,
      -1,    -1,    -1,  1202,  1203,  1204,  1205,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   688,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   696,   697,   698,   699,  1225,    -1,  1227,    -1,
      -1,    -1,    -1,  2110,  2111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1241,    -1,    -1,  1244,    -1,  1690,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   735,    -1,    -1,   738,  1264,    -1,    -1,    -1,    -1,
      -1,    -1,  1271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1723,    -1,  1725,    -1,    -1,  1728,    -1,   761,    -1,    -1,
    1289,  1290,   766,    -1,    -1,    -1,    -1,  1296,  1297,    -1,
      -1,  1300,  1301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,   793,
      -1,    -1,    -1,    -1,    -1,  1241,    -1,    -1,  1244,    -1,
    1246,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1254,    -1,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,  1264,    -1,
      -1,    -1,    -1,  1796,    -1,  1271,    -1,   831,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   839,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    -1,   859,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   875,    -1,    -1,    -1,    -1,   880,    -1,    -1,    -1,
      -1,   196,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   931,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,    -1,    -1,
    1953,    -1,    -1,    -1,  1513,    -1,    -1,  1516,    -1,    -1,
      -1,    -1,    -1,    -1,   309,    -1,    -1,    -1,    -1,    -1,
      -1,   245,    -1,    -1,    -1,   249,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,  1464,   334,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     345,    -1,  1478,    -1,    -1,    -1,    -1,    -1,    -1,  1485,
      -1,   285,    -1,    -1,    -1,    -1,    -1,  1493,    -1,    -1,
      -1,    -1,    -1,    -1,   298,    -1,  2029,    -1,  2031,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1514,    -1,
    1516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1617,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1633,  1634,    -1,    -1,    -1,    -1,
    1639,  1640,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1652,    -1,    -1,  1655,    -1,    -1,    -1,
      -1,    -1,    -1,   448,  1663,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1151,    -1,    -1,
      -1,  1597,  1156,    -1,    -1,  1159,  1160,  1161,    -1,  1163,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1171,    -1,    -1,
      -1,  1617,    -1,    -1,  1178,    -1,    -1,    -1,    -1,    -1,
     424,  1185,    -1,    -1,    -1,   500,    -1,    -1,    -1,    -1,
      -1,    -1,  1196,    -1,    -1,    -1,    -1,    -1,  1202,  1203,
    1204,  1205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,   197,    -1,    -1,    -1,    -1,  1746,    -1,    -1,
      -1,    -1,   466,    -1,    -1,   540,    -1,  1231,    -1,  1233,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   562,    -1,   234,
      -1,    -1,    -1,    -1,   569,    -1,    -1,   572,    -1,    -1,
     504,  1265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1717,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1811,  1812,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,   289,   290,  1835,  1311,    -1,    -1,
      -1,    -1,   556,   557,   558,   559,   560,   561,    -1,   563,
      -1,    -1,   566,    -1,   309,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   577,   578,   579,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   328,    -1,    -1,  1792,    -1,    -1,   334,
      -1,    -1,    -1,    -1,   598,    -1,   211,    -1,    -1,  1363,
     345,    -1,    -1,  1892,  1893,    -1,    -1,    -1,  1814,    -1,
      -1,    -1,  1376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   696,   697,   698,   699,    -1,    -1,    -1,    -1,  1835,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   724,
     725,   726,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     735,    -1,    -1,  1427,    -1,    -1,  1955,    -1,   743,    -1,
      -1,    -1,    -1,    -1,    -1,   750,   751,   752,    -1,   754,
     755,    -1,    -1,    -1,    -1,    -1,   761,    -1,    -1,   764,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   772,    -1,     3,
     775,    -1,    -1,   448,    -1,   320,    -1,   782,    -1,    -1,
     785,    -1,    -1,    -1,   329,    -1,    -1,    -1,    -1,   723,
     335,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,  1935,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
     865,    -1,    -1,    -1,    -1,   540,    -1,    -1,   102,   414,
      -1,   416,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,    -1,    -1,    -1,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,    -1,    -1,   572,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   910,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   919,    -1,    -1,    -1,    -1,    -1,
      -1,   926,    -1,    -1,    -1,    -1,   931,    -1,   933,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1639,  1640,    -1,    -1,    -1,
      -1,  1645,    -1,  1647,    -1,    -1,  1650,  1651,    -1,    -1,
      -1,    -1,  1656,  1657,    -1,  1659,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1669,    -1,  1671,    -1,   984,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1000,    -1,   931,    -1,    -1,
      -1,  1695,    -1,    -1,    -1,  1699,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   562,    -1,    -1,
      -1,   696,   697,   698,   699,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   970,    -1,    -1,  1044,
    1045,  1046,    -1,    -1,    -1,    -1,    -1,  1052,    -1,   724,
     725,   726,    -1,   987,   599,   989,   990,    -1,    -1,    -1,
     735,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   743,    -1,
      -1,    -1,    -1,    -1,    -1,   750,   751,   752,    -1,   754,
     755,    -1,    -1,    -1,    -1,    -1,   761,    -1,    -1,   764,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   772,    -1,    -1,
     775,    -1,    -1,    -1,    -1,    -1,    -1,   782,    -1,    -1,
     785,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   663,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1153,    -1,
      -1,  1156,    -1,    -1,  1159,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1098,  1099,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1869,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   730,    -1,    -1,    -1,    -1,
     865,  1196,    -1,    -1,  1888,  1889,    -1,  1202,  1203,  1204,
    1205,    -1,  1896,    -1,    -1,    -1,  1900,    -1,  1902,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1911,    -1,    -1,
    1225,    -1,  1227,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     775,    -1,    -1,    -1,    -1,   910,  1241,   782,    -1,  1244,
     785,    -1,    -1,    -1,   919,    -1,    -1,    -1,    -1,    -1,
      -1,   926,    -1,    -1,    -1,    -1,   931,    -1,   933,  1264,
      -1,  1955,    -1,    -1,    -1,    -1,  1271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1289,  1290,    -1,    -1,  1222,    -1,
    1224,  1296,  1297,    -1,    -1,  1300,  1301,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   984,
      -1,   348,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,  1000,    -1,    -1,   365,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2051,  2052,    -1,
    2054,    -1,  2056,    -1,    -1,  2059,  2060,  2061,    -1,  1044,
    1045,  1046,    -1,    -1,    -1,    -1,    -1,  1052,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,   969,  2119,   971,    -1,  2122,    -1,
      -1,   120,   121,    -1,    -1,   124,  2130,    -1,   127,   128,
     129,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,   138,
     139,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1010,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2167,    -1,    -1,    -1,    -1,  1153,    -1,
      -1,  1156,    -1,    -1,  1159,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1044,
      -1,  1046,    -1,    -1,    -1,    -1,    -1,    -1,  1513,    -1,
      -1,  1516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1196,    -1,    -1,    -1,    -1,    -1,  1202,  1203,  1204,
    1205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    64,
    1225,    -1,  1227,    -1,    -1,    -1,    -1,    -1,    -1,  1493,
      -1,    -1,    -1,    -1,    -1,    -1,  1241,  1112,    -1,  1244,
      -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1264,
      -1,    -1,    -1,    -1,    -1,    -1,  1271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1153,    -1,
      -1,    -1,  1617,    -1,  1289,  1290,    -1,    -1,    -1,  1164,
      -1,  1296,  1297,   138,   139,  1300,  1301,    -1,  1633,  1634,
      -1,    -1,    -1,    -1,  1639,  1640,   673,    -1,    -1,    -1,
     155,    -1,    -1,    -1,    -1,    -1,    -1,  1652,    -1,    57,
    1655,    -1,    -1,    -1,    -1,    -1,   171,    -1,  1663,    -1,
      -1,    -1,    -1,    -1,  1598,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,    -1,  1269,    -1,    -1,    -1,    -1,    -1,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1746,    -1,    -1,    -1,  1290,    -1,    -1,    -1,    -1,
      -1,    -1,  1297,    -1,   791,    -1,  1301,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   805,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   298,    -1,   193,    -1,   824,   825,   826,
     827,   828,    -1,   308,   831,   832,    -1,    -1,    -1,    -1,
     837,    -1,    -1,   840,    -1,    -1,  1811,  1812,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   852,   853,   854,   855,   856,
       3,    -1,   859,   860,    -1,    -1,   234,    -1,    -1,    -1,
    1835,    -1,    -1,    -1,   871,    -1,    -1,    -1,  1513,    -1,
     877,  1516,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,  1892,  1893,    -1,
     298,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
     308,    84,    85,    -1,    87,    88,    89,    -1,    -1,   424,
      -1,    -1,    -1,    -1,    -1,   430,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,  1859,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,  1617,    -1,   127,    -1,    -1,    -1,    -1,    -1,
    1955,   466,    -1,    -1,    -1,   138,    -1,   140,  1633,  1634,
      -1,    -1,    -1,    -1,  1639,  1640,    -1,    -1,  1513,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1652,  1523,    -1,
    1655,    -1,    -1,    -1,    -1,   500,    -1,    -1,  1663,    -1,
      -1,    -1,    -1,    -1,  1539,    -1,    -1,    -1,    -1,    -1,
      -1,   516,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,  1560,   424,  1562,    -1,    -1,
      -1,    -1,   430,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,  1579,    -1,    -1,    -1,    -1,    -1,
      -1,   556,   557,   558,   559,   560,   561,    -1,   563,    -1,
      -1,   566,    -1,    -1,    -1,    -1,    -1,    -1,   466,    -1,
      -1,    -1,   577,   578,   579,    -1,    -1,    -1,    -1,    68,
      -1,  1746,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,   596,    -1,   598,    -1,   600,    -1,    86,    87,  1634,
      -1,    -1,   500,    -1,    -1,    -1,    -1,    -1,   613,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,
     129,   130,    -1,   132,  1171,    -1,  1811,  1812,   137,   138,
      -1,   140,   141,   142,   143,    -1,    -1,    -1,   556,   557,
     558,   559,   560,   561,    -1,   563,    -1,    -1,   566,    -1,
    1835,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   577,
     578,   579,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      -1,    -1,  1727,    -1,  1729,    -1,    -1,    -1,    -1,    -1,
     598,    -1,   600,    -1,  1231,    -1,  1233,    -1,  1743,  1744,
     715,    -1,    -1,    -1,    -1,   613,   139,    -1,   723,    -1,
      -1,    -1,    -1,    -1,   729,    -1,    -1,  1892,  1893,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1771,  1772,   149,  1774,
    1775,    -1,    -1,    -1,  1779,  1780,  1781,  1782,    -1,    -1,
     161,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1293,    -1,    -1,    -1,
     193,    -1,    -1,    -1,    -1,    -1,    -1,  1812,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,   197,    -1,    -1,    -1,
    1955,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,   723,    -1,    -1,    -1,    -1,
      -1,   729,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,
      -1,    -1,    -1,   165,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,    -1,    -1,    -1,   308,    -1,  1922,  1923,  1924,
    1925,  1926,  1927,  1928,  1929,    -1,    -1,    -1,   309,    -1,
      -1,    -1,    -1,    -1,   196,   197,    -1,    -1,    -1,    -1,
      -1,    -1,   917,    -1,   919,    -1,    -1,   328,    -1,  1954,
      -1,   926,    -1,   334,    -1,    -1,   931,    -1,  1963,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   970,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   979,    -1,    -1,    -1,    -1,   984,
      -1,    -1,  2017,    -1,    -1,   990,  2021,  2022,    -1,    -1,
      -1,    -1,    -1,   285,    -1,  1000,   288,   289,   290,    -1,
      -1,   424,    -1,    -1,    -1,    -1,    -1,   430,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,
      -1,   919,    -1,    -1,    -1,    -1,    -1,    -1,   926,    -1,
      -1,    -1,    -1,   931,    -1,    -1,   328,   448,    -1,    -1,
      -1,    -1,   334,   454,    -1,    -1,    -1,  1052,    -1,    -1,
      -1,    -1,    -1,    -1,   465,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   970,    -1,    -1,    -1,    -1,   500,    -1,    -1,
      -1,   979,    -1,    -1,    -1,    -1,   984,    -1,    -1,   500,
      -1,    -1,   990,  1098,  1099,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1000,  1108,    -1,  1110,   517,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     563,    -1,    -1,   566,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   562,    -1,    -1,  1052,    -1,   579,    -1,   569,    -1,
      -1,   572,   454,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   465,    -1,    -1,    -1,   600,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     613,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1098,  1099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1108,    -1,  1110,    -1,    -1,    -1,    -1,  1222,    -1,  1224,
      -1,    -1,    -1,    -1,    -1,   517,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1765,    -1,
      -1,    -1,    -1,  1770,  1771,  1772,  1773,  1774,  1775,    -1,
      -1,    -1,  1779,  1780,  1781,  1782,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     562,    -1,    -1,    -1,    -1,    -1,    -1,   569,    -1,    -1,
     572,    -1,    -1,    -1,    -1,   696,   697,   698,   699,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     723,    -1,    -1,    -1,    -1,    -1,   729,    -1,    -1,    -1,
      -1,    -1,    -1,   724,   725,   726,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1222,    -1,  1224,    -1,    -1,    -1,
      -1,    -1,   743,    -1,    -1,    -1,    -1,    -1,    -1,   750,
     751,    -1,    -1,   754,   755,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   775,    -1,    -1,    -1,    98,    -1,
      -1,   782,    -1,    -1,   785,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1922,  1923,  1924,  1925,  1926,
    1927,  1928,  1929,    -1,   696,   697,   698,   699,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   161,   724,   725,   726,   165,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   743,    -1,    -1,   865,    -1,    -1,    -1,   750,   751,
      -1,    -1,   754,   755,    -1,    -1,   196,   197,    -1,    -1,
      -1,    -1,    -1,    -1,  1479,    -1,    -1,    -1,    -1,    -1,
      -1,  1486,    -1,   775,    -1,    -1,    -1,    -1,  1493,    -1,
     782,    -1,    -1,   785,    -1,    -1,   919,    -1,    -1,   910,
      -1,    -1,    -1,   926,    -1,    -1,    -1,   918,   919,  1514,
      -1,  1516,    -1,    -1,  1519,   926,    -1,  1522,   929,    -1,
      -1,    -1,   933,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,   979,    -1,   288,   289,
     290,   984,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   984,    -1,    -1,    -1,  1000,    -1,   309,
      -1,  1479,    -1,    -1,    -1,    -1,    -1,    -1,  1486,  1000,
      -1,    -1,    -1,  1598,    -1,  1493,    -1,    -1,   328,    -1,
      -1,  1606,    -1,    -1,   334,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1617,    -1,    -1,    -1,  1514,     3,  1516,    -1,
      -1,  1519,    -1,    -1,  1522,    -1,   918,    -1,    -1,  1052,
      -1,    -1,    -1,  1044,  1045,  1046,    -1,   929,    -1,    -1,
      -1,  1052,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1099,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,  1108,    -1,  1110,    -1,    -1,
      76,    77,    78,    79,    -1,    81,    -1,    -1,    84,    85,
    1598,    87,    88,    89,    -1,    -1,    -1,    -1,  1606,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,  1617,
      -1,   107,    -1,    -1,   454,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   465,    -1,    -1,   124,    -1,
      -1,   127,  1153,    -1,    -1,  1156,    -1,    -1,  1159,    -1,
     136,    -1,  1044,  1045,  1046,    -1,    -1,    -1,    -1,    -1,
    1052,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1196,    -1,   517,    -1,    -1,
      -1,  1202,  1203,  1204,  1205,  1800,  1801,    -1,  1803,  1222,
      -1,  1224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1225,    -1,  1227,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   562,  1244,    -1,    -1,    -1,    -1,    -1,   569,
      -1,    -1,   572,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1264,  1859,    -1,    -1,    -1,    -1,    -1,
    1271,  1153,    -1,    -1,  1156,    -1,    -1,  1159,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1289,  1290,
      -1,    -1,    -1,    -1,    -1,  1296,  1297,    -1,    -1,  1300,
    1301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1800,  1801,  1196,  1803,    -1,    -1,    -1,    -1,
    1202,  1203,  1204,  1205,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1225,    -1,  1227,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1859,    -1,    -1,    -1,    -1,   696,   697,   698,   699,
      -1,    -1,  1264,    -1,    -1,    -1,    -1,    -1,    -1,  1271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   724,   725,   726,  1289,  1290,    -1,
      -1,    -1,    -1,    -1,  1296,  1297,    -1,    -1,  1300,  1301,
      -1,    -1,    -1,   743,    -1,    -1,    -1,    -1,    -1,    -1,
     750,   751,    -1,    -1,   754,   755,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,   775,    -1,    -1,    -1,    -1,
      -1,    -1,   782,    -1,    -1,   785,  1479,    -1,    -1,    -1,
      -1,    -1,    -1,  1486,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,  1514,    -1,  1516,    -1,    -1,  1519,    -1,    -1,  1522,
      -1,    -1,  1513,    -1,    -1,  1516,    69,    70,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    80,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,    -1,    -1,   127,    -1,   129,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,  1598,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1606,    -1,    -1,    -1,    -1,   918,    -1,
      -1,    -1,    -1,    -1,  1617,    -1,    -1,    -1,    -1,   929,
      -1,    -1,    -1,    -1,    -1,    -1,  1617,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1513,  1633,  1634,    -1,    -1,    -1,    -1,  1639,  1640,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1652,    -1,    -1,  1655,    -1,     1,    -1,     3,     4,
       5,     6,  1663,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,  1044,  1045,  1046,    -1,    73,    74,
      75,    -1,  1052,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    90,    91,    92,    -1,    -1,
      -1,  1633,  1634,    -1,    -1,   100,    -1,  1639,  1640,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
    1652,    -1,    -1,  1655,    -1,   120,   121,    -1,    -1,   124,
      -1,  1663,   127,    -1,   129,   130,    -1,  1800,  1801,   134,
    1803,   136,   137,   138,    -1,   140,   141,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1811,  1812,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1153,  1835,    -1,  1156,    -1,    -1,  1159,
      -1,    -1,    -1,    -1,    -1,    -1,  1859,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,  1196,    -1,    -1,    -1,
      -1,    -1,  1202,  1203,  1204,  1205,    -1,    -1,    -1,    -1,
      69,  1892,  1893,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,  1225,    -1,  1227,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,  1244,    -1,    -1,    -1,    -1,  1811,
    1812,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,  1264,   124,    -1,    -1,   127,    -1,
      -1,  1271,    -1,    -1,    -1,   134,    -1,    -1,    -1,   138,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1289,
    1290,    -1,    -1,    -1,    -1,    -1,  1296,  1297,    -1,    -1,
    1300,  1301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1892,  1893,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      -1,    -1,    -1,  1513,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,   124,   125,   126,   127,   128,   129,
     130,   131,   132,    -1,    -1,   135,    -1,   137,   138,    -1,
     140,   141,   142,   143,   144,   145,   146,   147,   148,    -1,
      -1,    -1,    -1,  1633,  1634,    -1,    -1,    -1,    -1,  1639,
    1640,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1652,    -1,    -1,  1655,    -1,    -1,    -1,    -1,
      -1,     0,     1,  1663,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
      -1,  1811,  1812,    -1,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,  1892,  1893,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,   143,   144,   145,
     146,   147,   148,     1,    -1,    -1,    -1,    -1,    -1,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,    -1,   135,    -1,    -1,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,   124,   125,   126,   127,   128,   129,
      -1,   131,   132,    -1,    -1,   135,    -1,   137,   138,    -1,
     140,   141,   142,   143,   144,   145,   146,   147,   148,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,    -1,    -1,   127,   128,   129,   130,
      -1,   132,   133,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,   143,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,    -1,    -1,
     127,   128,   129,   130,    -1,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,    -1,    -1,   127,   128,   129,   130,    -1,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,    -1,    -1,   127,   128,
     129,   130,    -1,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,   143,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
      -1,    -1,   127,   128,   129,   130,    -1,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,   143,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,    -1,    -1,   127,   128,   129,   130,
      -1,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,   143,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,    -1,    -1,
     127,   128,   129,   130,    -1,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,    -1,    -1,   127,   128,   129,   130,    -1,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,    -1,    -1,   127,   128,
     129,   130,    -1,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,   143,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,   143,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,   143,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,    -1,    -1,   127,    -1,   129,   130,    -1,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,   143,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,   143,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,   143,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,    -1,    -1,   127,    -1,   129,   130,    -1,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,   143,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,   143,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,   143,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,    -1,    -1,   127,    -1,   129,   130,    -1,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,   143,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,   143,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,   143,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,    -1,    -1,   127,    -1,   129,   130,    -1,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,   143,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,   143,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,   143,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,    -1,    -1,   127,    -1,   129,   130,    -1,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,   143,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,   143,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,   143,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,    -1,    -1,   127,    -1,   129,   130,    -1,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    56,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,
     129,   130,    -1,   132,   133,   134,    -1,    -1,   137,   138,
      -1,   140,   141,   142,   143,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      86,    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,    -1,
      -1,   127,    -1,   129,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,   143,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    -1,    -1,    68,    69,    -1,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    86,    87,    88,    89,    90,    91,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,    -1,    -1,   127,    -1,   129,   130,    -1,    -1,
      -1,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,
     130,    -1,   132,   133,   134,    -1,    -1,   137,   138,    -1,
     140,   141,   142,   143,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,   132,   133,   134,    -1,    -1,
     137,   138,    -1,   140,   141,   142,   143,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,   130,    -1,   132,   133,
     134,    -1,    -1,   137,   138,    -1,   140,   141,   142,   143,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,   132,   133,   134,    -1,    -1,   137,   138,    -1,   140,
     141,   142,   143,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,   130,    -1,   132,   133,   134,    -1,    -1,   137,
     138,    -1,   140,   141,   142,   143,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    86,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,   132,   133,   134,
      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    86,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,    -1,   127,    -1,   129,   130,    -1,
     132,   133,   134,    -1,    -1,   137,   138,    -1,   140,   141,
     142,   143,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,   132,   133,   134,    -1,    -1,   137,   138,
      -1,   140,   141,   142,   143,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      86,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
      -1,   127,    -1,   129,   130,    -1,   132,   133,   134,    -1,
      -1,   137,   138,    -1,   140,   141,   142,   143,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    86,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,    -1,   127,    -1,   129,   130,    -1,   132,
     133,   134,    -1,    -1,   137,   138,    -1,   140,   141,   142,
     143,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    86,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,
     130,    -1,   132,   133,   134,    -1,    -1,   137,   138,    -1,
     140,   141,   142,   143,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,   132,   133,   134,    -1,    -1,
     137,   138,    -1,   140,   141,   142,   143,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,   130,    -1,   132,   133,
     134,    -1,    -1,   137,   138,    -1,   140,   141,   142,   143,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,     1,   129,     3,
       4,     5,     6,    -1,     8,     9,   137,   138,    -1,   140,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,     1,   129,     3,     4,     5,     6,
      -1,     8,     9,   137,   138,    -1,   140,   141,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,
     127,   128,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     137,   138,    -1,   140,   141,   142,   143,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,   128,   129,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,   143,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,     1,   129,     3,
       4,     5,     6,   134,     8,     9,   137,   138,    -1,   140,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,   128,   129,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,   143,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    90,    91,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,   128,   129,   130,    -1,   132,    -1,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,   143,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    90,
      91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,   130,
      -1,   132,    -1,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,   143,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,   130,    -1,    -1,    -1,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,   143,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    90,    91,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
      -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,    -1,    -1,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,   143,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    86,    87,    88,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,    -1,    -1,    28,    -1,    -1,    -1,   120,   121,
      -1,    -1,   124,    -1,    -1,   127,   128,   129,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,   141,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,   128,   129,    -1,    -1,   132,    -1,
      -1,    -1,   136,   137,   138,    -1,   140,   141,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,
     127,   128,   129,   130,    -1,   132,    -1,    -1,    -1,    -1,
     137,   138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,    -1,    -1,    -1,   136,   137,   138,    -1,
     140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,   124,    -1,    -1,   127,   128,   129,    -1,    -1,   132,
      -1,    -1,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,
      -1,   127,   128,   129,   130,    -1,   132,    -1,    -1,    -1,
      -1,   137,   138,    -1,   140,   141,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,
     129,   130,    -1,   132,    -1,    -1,    -1,    -1,   137,   138,
      -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,   124,    -1,    -1,   127,    -1,   129,    -1,    -1,
     132,   133,   134,    -1,    -1,   137,   138,    -1,   140,   141,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,    -1,    -1,   132,   133,   134,
      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,
     128,   129,   130,    -1,   132,    -1,    -1,    -1,    -1,   137,
     138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,   130,
      -1,   132,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,    -1,    -1,   132,   133,
     134,    -1,    -1,   137,   138,    -1,   140,   141,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,    -1,    -1,    -1,    -1,   134,    -1,    -1,
     137,   138,   139,   140,   141,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,    -1,    -1,    -1,    -1,   137,   138,    -1,
     140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,   124,    -1,    -1,   127,   128,   129,    -1,    -1,   132,
      -1,    -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,
      -1,   127,    -1,   129,   130,    -1,   132,    -1,    -1,    -1,
      -1,   137,   138,    -1,   140,   141,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,    -1,   137,   138,
      -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,   124,    -1,    -1,   127,   128,   129,    -1,    -1,
      -1,    -1,   134,    -1,    -1,   137,   138,    -1,   140,   141,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,    -1,    -1,
      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,   130,    -1,    -1,    -1,   134,    -1,    -1,   137,
     138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,   130,
      -1,    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,   130,    -1,   132,    -1,
      -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,
     127,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
     137,   138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,
      -1,    -1,   132,    -1,    -1,    -1,    -1,   137,   138,   139,
     140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,   124,    -1,    -1,   127,    -1,   129,    -1,    -1,   132,
      -1,    -1,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,
      -1,   127,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,    -1,
     129,    -1,    -1,   132,    -1,    -1,    -1,   136,   137,   138,
      -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,   124,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,   141,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,    -1,    -1,
      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,
     138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,    -1,
      -1,   132,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,   128,   129,   130,    -1,    -1,    -1,
      -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,   132,    -1,    -1,    -1,    -1,
     137,   138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,
     130,    -1,    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,
     140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,   124,    -1,    -1,   127,    -1,   129,    -1,    -1,   132,
      -1,    -1,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,
      -1,   127,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,
     136,   137,   138,    -1,   140,   141,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,   138,
      -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,   124,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,   141,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,    -1,    -1,
      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,
     128,   129,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,
     138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,    -1,
      -1,   132,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,    -1,    -1,    -1,   133,
     134,    -1,    -1,   137,   138,    -1,   140,   141,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,    -1,    -1,    -1,   133,   134,    -1,    -1,
     137,   138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,    -1,    -1,    -1,    -1,   137,   138,    -1,
     140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,   124,    -1,    -1,   127,   128,   129,    -1,    -1,   132,
      -1,    -1,    -1,    -1,   137,   138,    -1,   140,   141,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,
      -1,   137,   138,    -1,   140,   141,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,    -1,
     129,    -1,    -1,    -1,   133,   134,    -1,    -1,   137,   138,
      -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,   124,    -1,    -1,   127,    -1,   129,    -1,    -1,
      -1,    -1,   134,    -1,    -1,   137,   138,    -1,   140,   141,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   137,   138,   139,   140,   141,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,
     138,   139,   140,   141,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,    -1,
      -1,    -1,    -1,   134,    -1,    -1,   137,   138,    -1,   140,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   137,   138,   139,   140,   141,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,
     140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,   124,    -1,    -1,   127,    -1,   129,    -1,    -1,    -1,
      -1,   134,    -1,    -1,   137,   138,    -1,   140,   141,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,
      -1,   127,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,   138,   139,   140,   141,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,
     129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,   138,
      -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,   124,    -1,    -1,   127,    -1,   129,    -1,    -1,
      -1,    -1,    -1,    -1,   136,   137,   138,    -1,   140,   141,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,    -1,    -1,    -1,    -1,   134,
      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,    -1,    -1,    -1,    -1,   134,    -1,    -1,   137,
     138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,    -1,
      -1,    -1,    -1,   134,    -1,    -1,   137,   138,    -1,   140,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,    -1,    -1,    -1,    -1,
     134,    -1,    -1,   137,   138,    -1,   140,   141,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,    -1,    -1,    -1,    -1,   134,    -1,    -1,
     137,   138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,
     140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,   124,    -1,    -1,   127,    -1,   129,    -1,    -1,    -1,
      -1,   134,    -1,    -1,   137,   138,    -1,   140,   141,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    87,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,    -1,
      -1,   127,   128,   129,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,   138,    -1,   140,   141,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,   128,
     129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,   138,
      -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,   124,    -1,    -1,   127,    -1,   129,    -1,    -1,
      -1,    -1,   134,    -1,    -1,   137,   138,    -1,   140,   141,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   137,   138,    -1,   140,   141,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,
     138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    87,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,   140,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,     0,     1,    -1,     3,
       4,     5,    -1,   137,   138,    -1,   140,   141,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,    -1,    -1,   127,   128,   129,   130,    -1,   132,   133,
      -1,    -1,    -1,   137,   138,     0,     1,    -1,     3,     4,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,   132,   133,    -1,
      -1,    -1,   137,   138,     0,     1,    -1,     3,     4,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,
      -1,   127,    -1,   129,   130,     0,     1,   133,     3,     4,
       5,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,   130,     0,     1,   133,     3,
       4,     5,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,   130,     0,     1,   133,
       3,     4,     5,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,    -1,    -1,   127,    -1,   129,   130,    -1,     1,
     133,     3,     4,     5,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,    -1,    -1,   127,    -1,   129,   130,    -1,
       1,   133,     3,     4,     5,   137,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,     1,   133,     3,     4,     5,   137,   138,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,
     130,    -1,     1,   133,     3,     4,     5,   137,   138,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,     1,   133,     3,     4,     5,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,   130,    -1,     1,   133,     3,     4,     5,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,     1,   133,     3,     4,     5,
     137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,
      -1,   127,    -1,   129,   130,    -1,     1,   133,     3,     4,
       5,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,     1,   133,     3,
       4,     5,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,   130,    -1,     1,   133,
       3,     4,     5,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,    -1,    -1,   127,    -1,   129,   130,    -1,     1,
     133,     3,     4,     5,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,    -1,    -1,   127,    -1,   129,   130,    -1,
       1,   133,     3,     4,     5,   137,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,     1,   133,     3,     4,     5,   137,   138,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,
     130,    -1,     1,   133,     3,     4,     5,   137,   138,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,     1,   133,     3,     4,     5,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,   130,    -1,     1,   133,     3,     4,     5,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,     1,   133,     3,     4,     5,
     137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,
      -1,   127,    -1,   129,   130,    -1,     1,   133,     3,     4,
       5,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,     1,   133,     3,
       4,     5,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,   130,    -1,     1,   133,
       3,     4,     5,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,    -1,    -1,   127,    -1,   129,   130,    -1,     1,
     133,     3,     4,     5,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,    -1,    -1,   127,    -1,   129,   130,    -1,
       1,   133,     3,     4,     5,   137,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,     1,   133,     3,     4,     5,   137,   138,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,
     130,    -1,     1,   133,     3,     4,     5,   137,   138,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,     1,   133,     3,     4,     5,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,   130,    -1,     1,   133,     3,     4,     5,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,     1,   133,     3,     4,     5,
     137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,
      -1,   127,    -1,   129,   130,    -1,     1,   133,     3,     4,
       5,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,     1,   133,     3,
       4,     5,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,   130,    -1,     1,   133,
       3,     4,     5,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
      73,    74,    -1,    76,    77,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    -1,    -1,
      93,    94,    95,    96,    -1,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,    -1,    -1,   127,    -1,   129,   130,    -1,     1,
     133,     3,     4,     5,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    -1,
      -1,    93,    94,    95,    96,    -1,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,   124,    -1,    -1,   127,    -1,   129,   130,    -1,
       1,   133,     3,     4,     5,   137,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
      -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,   130,
      -1,     1,   133,     3,     4,     5,   137,   138,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,    -1,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    -1,    -1,    93,    94,    95,    96,    -1,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,    -1,    -1,   127,    -1,   129,
     130,    -1,     1,   133,     3,     4,     5,   137,   138,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    73,    74,    -1,    76,    77,    -1,
      -1,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    -1,    -1,    93,    94,    95,    96,    -1,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,     1,   133,     3,     4,     5,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    -1,    -1,    73,    74,    -1,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    -1,    -1,    93,    94,    95,    96,    -1,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,   127,
      -1,   129,   130,    -1,     1,   133,     3,     4,     5,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,    76,
      77,    -1,    -1,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    90,    -1,    -1,    93,    94,    95,    96,
      -1,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,
     127,    -1,   129,   130,    -1,     1,   133,     3,     4,     5,
     137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,    -1,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    -1,    -1,    93,    94,    95,
      96,    -1,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,
      -1,   127,    -1,   129,   130,    -1,     1,   133,     3,     4,
       5,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,    74,
      -1,    76,    77,    -1,    -1,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    -1,    -1,    93,    94,
      95,    96,    -1,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
      -1,    -1,   127,    -1,   129,   130,    -1,     1,   133,     3,
       4,     5,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,    -1,    -1,   127,    -1,   129,   130,     1,    -1,     3,
       4,     5,    -1,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    73,
      74,    -1,    76,    77,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    -1,    -1,    93,
      94,    95,    96,    -1,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,   120,     1,    -1,     3,
     124,    -1,    -1,   127,    -1,   129,   130,    -1,    -1,    -1,
      -1,    -1,    -1,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,     1,    -1,     3,    -1,
     124,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,     3,    -1,    -1,    -1,   124,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,     3,    -1,    -1,    -1,   124,    -1,    -1,   127,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,     3,
      -1,    -1,    -1,   124,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,     3,    -1,    -1,    -1,
     124,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,     3,    -1,    -1,    -1,   124,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
       3,    -1,    -1,    -1,   124,    -1,    -1,   127,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,     3,    -1,    -1,
      -1,   124,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     136,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,    -1,   132,   133,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,     1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,    -1,    -1,     0,     1,    -1,     3,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,
      -1,    -1,     3,   107,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,   123,
     124,    -1,    -1,   127,    -1,    -1,   130,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,   109,     3,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
      -1,    -1,    -1,    -1,    -1,   109,     3,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,     1,   109,     3,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,
      -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,    -1,    -1,   127,    -1,    -1,
     130,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,
     127,    -1,    -1,   130,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
     124,    -1,    -1,   127,    -1,    -1,   130,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,    -1,    -1,   127,    -1,    -1,   130,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,   103,    -1,     0,     1,   107,
       3,    -1,    -1,    -1,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,   127,
      -1,    -1,   130,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   102,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,    -1,    -1,   127,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,    -1,    -1,   127,   128,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   128,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   128,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   128,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   102,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,   127,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   102,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,   127,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,   127,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,   127,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,   127,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   102,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,   127,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    84,    85,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,    -1,   109,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,
      -1,    84,    85,    -1,    87,    88,    89,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,   116,   117,   118,   119,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    -1,    -1,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    -1,    87,    88,
      89,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,   116,   117,   118,
     119,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,    -1,
      -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   138,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
      87,    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,
      81,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,   123
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    56,    68,
      69,    76,    77,    78,    79,    81,    82,    83,    84,    85,
      87,    88,    89,   102,   103,   107,   112,   113,   114,   115,
     116,   117,   118,   119,   122,   123,   124,   127,   130,   150,
     151,   152,   154,   179,   216,   217,   218,   219,   220,   221,
     273,   276,   277,   280,   281,   282,   283,   284,   285,   286,
     288,   292,   295,   296,   297,   298,   299,   300,   305,   306,
     315,   316,   317,   324,   325,   329,   330,   333,   338,   368,
     371,   372,   390,   391,   393,   394,   395,   396,   397,   398,
      79,   136,     5,    31,   221,   392,   221,   127,   127,   127,
     154,   221,   392,   127,   286,   287,   324,   333,    37,   152,
     221,   314,   315,   317,   319,   320,   321,   323,   324,   333,
     336,   337,   342,   125,   130,   151,   152,   221,   134,   136,
     130,   134,   133,   124,   125,   216,   221,   134,   154,   221,
     134,   136,   133,   125,   134,   136,   134,   133,   134,   152,
     221,   324,     1,    31,    37,    38,    39,    40,    41,   130,
     150,   152,   218,   220,   221,   273,   283,   284,   286,   288,
     317,   321,   324,   333,   336,   337,   338,   340,   349,   350,
     351,   352,    37,    38,    39,    40,    41,   152,   324,   351,
     127,   138,     1,    29,    30,    31,    32,    33,    68,   118,
     119,   128,   150,   221,   272,   276,   278,   279,   286,   288,
     292,   293,   294,   300,   304,   312,   313,   355,   356,   357,
     358,   359,   360,    76,    77,   333,   127,   329,   317,   324,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    49,    50,    69,    87,    89,   102,   114,
     115,   116,   117,   123,   134,   154,   175,   176,   272,   277,
     278,   286,   289,   293,   295,   303,   370,   373,   374,   375,
     380,   381,   382,    31,    78,   136,   218,   220,   305,   371,
     372,   390,   391,   398,     1,   218,   282,   299,   305,   338,
     368,   394,     1,   393,   394,     0,   221,   392,   392,     5,
     131,   392,     1,     4,     6,     8,     9,    68,    73,    74,
      75,    86,    87,   100,   104,   105,   106,   107,   108,   109,
     110,   111,   120,   121,   124,   127,   129,   137,   138,   140,
     141,   142,   143,   154,   180,   181,   221,   222,   223,   224,
     225,   228,   229,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   392,   404,   405,   406,   407,
     151,   221,   134,   154,   221,   233,   248,   250,   254,   266,
     267,   268,   286,   333,   138,   127,   138,   128,   312,   313,
     359,   360,    76,    77,   333,   336,   337,   314,   319,   323,
     324,   128,   324,   128,   324,   324,    87,   154,   206,   208,
     210,   214,   215,   221,   233,   238,   254,   258,   304,   130,
     125,   125,   130,     1,    70,    80,    82,    83,    90,    93,
      94,    95,    96,    98,   100,   101,   127,   129,   130,   133,
     155,   156,   157,   158,   159,   160,   161,   162,   177,   178,
     180,   181,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   197,   201,   202,   203,   204,   221,   229,   252,
     304,   316,   318,   324,   333,   338,   339,   369,    82,    83,
     221,   272,   276,   286,   289,   292,   300,   307,   308,     1,
     133,   203,   204,   152,   221,     1,   221,   274,   275,     1,
     133,   275,   308,    68,   207,   209,   211,   212,   213,   221,
     304,     1,   133,   203,   204,   308,     1,   133,   203,   204,
       1,   133,   203,   204,   152,   221,   132,   132,   132,   132,
     132,   132,   134,   333,   317,   321,   324,     1,   131,   374,
     381,   382,   374,   381,   382,     1,   130,   132,   132,   333,
     130,   139,   151,   221,   247,   266,   270,   271,   132,   134,
     154,   221,   133,   134,   133,   134,   324,    37,   127,   138,
     140,   150,   152,   221,   272,   278,   286,   288,   293,   314,
     315,   324,   331,   333,   334,   337,     1,   128,   132,     1,
     128,   132,     1,   132,     1,   132,   128,   128,   317,   127,
     317,   127,   127,   127,     1,   130,     1,   133,     1,    37,
      38,    39,    40,    41,   130,   221,   272,   278,   286,   289,
     293,   324,   351,   352,     1,   130,     1,   370,   373,   381,
     382,   370,   373,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    87,    88,    90,    91,    92,   130,
     136,   154,   198,   199,   200,   221,   229,   248,   250,   268,
     329,   361,   362,   365,   366,   367,   374,   375,   376,   377,
     378,   379,   381,   382,   384,   385,   386,   387,   388,   389,
     133,    31,   221,   392,   221,   216,   217,   219,   220,   314,
     315,   321,   324,   333,   338,   340,   374,   382,   218,   305,
     131,   246,   247,   265,   128,   127,   233,   254,   127,   233,
     254,   233,   254,   127,   221,   272,   278,   286,   289,   293,
     311,   270,   127,   127,   311,   270,   127,   127,   127,   127,
     127,   127,   233,   254,   127,   128,   250,   268,   278,   286,
     288,   293,   301,   353,   392,   134,   139,   182,   183,   226,
     230,   248,   134,     1,   133,   134,   221,     1,     7,     8,
       9,   127,   135,   138,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,   131,   249,   183,   226,   227,   235,
     255,   124,   144,   145,   141,   142,    10,    11,   238,   258,
      12,    13,   125,   126,    14,    15,   140,   146,   147,    16,
      17,   148,   249,   128,     7,     8,     9,   127,   135,   138,
     249,   124,   144,   145,   141,   142,    10,    11,    12,    13,
     125,   126,    14,    15,   140,   146,   147,    16,    17,   148,
     249,   128,   128,   109,   221,   304,   399,   402,   403,   134,
     134,   249,     1,   128,   132,   250,   268,   249,   128,   132,
     250,   139,   151,   270,   271,   139,   151,   270,   271,   128,
     128,   128,   128,   314,   319,   323,   128,   128,   314,    11,
     126,   132,   131,   127,   324,   333,   334,    68,   213,   221,
     304,   213,     1,   221,   272,   286,   289,   300,   309,   304,
     338,   339,   127,   154,   221,   221,   304,     1,   127,   309,
     124,   127,   221,   304,   130,   329,   381,   382,   381,   382,
     381,   130,   381,   382,   130,     1,   133,     1,     1,   130,
     132,   132,    71,    72,    93,    97,    99,   133,    71,    72,
     133,   130,     1,   201,   202,     1,   201,   202,     1,   131,
     127,   136,   221,   290,   291,   314,   320,   322,   324,   333,
     340,   341,   342,     1,   304,   312,   357,   333,   318,   324,
     127,   136,   161,   162,   177,   178,   180,   181,   190,   221,
     304,   125,   154,   221,   221,   272,   286,   289,   125,   125,
     131,   329,   330,   132,     1,   130,   134,    28,   153,   221,
     126,   132,   131,   221,   334,   336,   349,   349,   349,   349,
     349,   349,   130,   132,   133,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   226,   227,   229,
     247,   266,   303,   346,   347,   314,   317,   319,   321,   323,
     314,   321,   134,   248,   267,   343,   345,   381,   382,   381,
     382,   349,   350,   349,   350,   139,   139,   139,    54,   355,
     356,     1,   275,   134,   134,     1,   133,   203,   204,     1,
     133,   203,   204,   134,   128,   221,   312,   313,   324,   333,
     334,   359,   360,   139,   151,   270,   271,   324,   333,   337,
     333,   127,   138,   331,     1,     1,   132,     1,    54,   221,
     355,   356,   132,     1,    54,   221,   355,   356,   132,     1,
      54,   221,   355,   356,   132,    54,   221,   355,   356,     3,
      28,    47,    76,    77,   128,   326,   327,   328,   248,   151,
     221,   250,   133,   134,   130,   130,   136,   270,   271,   136,
     127,   127,     1,   127,    55,    56,    57,    59,    60,    61,
      62,    65,    88,   221,   329,   361,   384,   388,   127,   221,
     130,   130,   130,   226,   227,   250,   268,   127,   286,   127,
     127,   194,   221,   130,   130,   130,   136,   135,   135,   130,
     132,     1,   376,   377,   376,   377,   361,   362,   370,   373,
     361,   362,   370,   373,     1,     1,   392,   392,   152,   221,
     134,   134,   333,   321,   324,   374,   382,   374,   382,   382,
     247,   148,   130,   148,    68,   150,   221,   278,   286,   288,
     293,   302,   354,   221,   303,   125,   127,   138,   221,   272,
     278,   286,   289,   293,   324,   332,   333,   335,   221,   272,
     278,   286,   289,   293,   310,   250,   353,   381,   221,   138,
     335,   310,   248,   392,   392,   392,   248,   354,   354,   128,
     221,   278,   286,   288,   293,   334,   128,   135,     1,   173,
     174,     1,   133,   132,   139,     1,   173,   174,   133,     1,
     173,   174,     1,   221,   128,   227,   230,   231,   267,     1,
     221,   250,   268,   226,   248,     1,   235,   255,   235,   255,
     235,   255,   236,   256,   236,   256,   237,   257,   237,   257,
     238,   258,   238,   258,   238,   258,   226,   227,   240,   259,
     226,   227,   240,   259,   226,   227,   241,   260,   226,   227,
     242,   261,   226,   227,   243,   262,   244,   263,   245,   264,
     136,   226,   227,   250,   251,   268,   269,   226,   248,     1,
     221,   128,   230,   231,     1,   221,   250,   268,   226,   248,
     235,   255,   235,   255,   235,   255,   236,   256,   236,   256,
     237,   257,   237,   257,   238,   258,   238,   258,   238,   258,
     238,   258,   226,   227,   240,   259,   226,   227,   240,   259,
     226,   227,   241,   260,   226,   227,   242,   261,   226,   227,
     243,   262,   244,   263,   245,   264,   136,   250,   251,   268,
     269,   226,   248,   125,   126,   221,   400,   401,   221,   133,
     399,   402,   403,   403,   227,   267,   248,   267,   392,   227,
     267,   248,   267,   139,   139,   139,   139,   139,   139,   214,
     206,   208,   210,   221,   324,   333,   126,   131,   334,   126,
     134,   125,   134,   221,   272,   286,   289,   334,   324,   333,
     340,   341,   194,   291,   314,   324,   333,   134,   221,   134,
     221,   334,   221,   324,   127,   130,   133,   184,   185,   184,
     185,   381,   381,   381,   223,   381,   381,     1,   346,   347,
     128,   270,   271,   134,   132,     1,   304,   312,   357,   333,
     314,   322,   324,   136,   329,   221,   127,   318,   318,   221,
       1,     1,   291,   215,   125,   213,   213,   270,   271,   131,
     274,   203,   204,     1,   133,   275,   131,   136,   131,   136,
     212,   208,   221,   131,   221,   131,   381,   382,     1,   130,
     132,   130,   132,   130,   165,   166,   169,   170,   171,   133,
     163,   166,   130,   133,   165,   166,   169,   170,   171,   131,
      37,   340,   341,   342,   343,   345,   348,     1,   133,   275,
       1,   133,   275,     1,   133,   203,   204,   324,   333,   334,
     128,   128,   128,   139,   139,   139,   333,   331,   128,   359,
     360,   139,   151,   270,   271,   355,   356,   304,   355,   355,
     355,   356,   128,   127,   128,   132,   327,   128,   128,   128,
     128,   132,     1,   173,   174,   361,   362,   370,   373,   136,
     136,   361,   362,   370,   373,   250,   268,   250,   268,   128,
     250,   268,   136,   270,   271,   136,   127,   127,   361,   127,
     227,   268,   127,   136,    59,     1,   128,   130,   221,   250,
     268,   383,   130,   130,   130,   130,   130,   392,   127,   248,
     248,   221,   361,   362,   370,   373,    92,    90,    91,    92,
     125,   321,   382,   382,   130,   250,   251,   268,   269,   250,
     251,   268,   269,   150,   151,   150,   278,   286,   288,   293,
     334,   128,   128,   128,   334,   215,   128,   324,   335,   359,
     360,   270,   271,   125,   333,   127,   332,   138,   125,   138,
     221,   272,   278,   286,   289,   293,   335,   128,   128,   128,
     128,   270,   271,   138,   138,   335,   132,   128,   132,   132,
     132,   128,   132,   134,   235,   255,   344,   392,     1,   133,
     226,   248,     1,     1,   128,   132,   128,   139,   139,     1,
     132,   136,   136,   132,   136,   136,   128,   139,   139,   136,
     136,   136,   136,   221,   221,   130,   132,   221,   392,   133,
     133,   128,   324,   333,   208,   215,   125,   134,   134,   221,
     333,   324,   128,   333,   314,   128,   134,   134,   221,   128,
       1,   173,   174,   290,   324,   221,   127,   314,   322,   322,
     270,   271,   127,   128,   126,   215,   126,   126,   270,   271,
     130,     1,   130,   206,   205,   304,   206,   205,   210,   131,
     134,     1,   167,   168,     1,   167,   168,   382,     1,   346,
     347,   132,   133,   343,   345,     1,   130,     1,   130,   333,
     331,   128,   128,   128,   139,   139,   139,   334,   337,   250,
     128,   327,   392,     1,   361,   362,   370,   373,   361,   362,
     370,   373,   128,   128,   128,   128,     1,   361,   128,   250,
     361,   362,   136,   136,   268,   128,   250,   268,    59,   268,
     383,   392,   127,   361,   136,   130,     1,   130,     1,   128,
     268,   383,     3,   128,   136,   392,   128,   128,   132,   127,
     127,   194,   136,   136,   136,   136,   136,   136,   136,   136,
     128,   128,     1,   128,   126,   324,   333,   335,   128,   128,
     128,   139,   139,   215,   332,   128,   359,   360,   270,   271,
     215,   270,   271,   125,   138,   127,   343,   139,   139,   270,
     271,   270,   271,   138,   353,   221,   221,   248,     1,   221,
     348,   227,   267,   226,   227,   226,   227,   247,   265,   226,
     227,   247,   265,   226,   227,   226,   227,   247,   265,   226,
     227,   247,   265,   226,   227,   247,   265,   226,   227,   247,
     265,   226,   227,   247,   265,   226,   227,   247,   265,   400,
     130,   130,   126,   215,   134,   381,   314,   131,   134,     1,
     127,   136,   136,   126,   203,   204,   130,   203,   204,   131,
     334,   131,   210,   348,   133,   343,   345,     1,   203,   204,
     203,   204,   128,   128,   361,   361,   361,   361,   361,   362,
     128,   127,   383,   128,   250,   268,   250,   361,     1,   128,
     250,   268,   138,   363,   364,   392,   130,   364,     3,   128,
     136,   134,   194,   248,   248,     1,     1,   332,   128,   126,
     128,   128,   139,   139,   126,   139,   139,   215,   270,   271,
     353,   139,   139,   139,   139,   270,   271,   128,   128,   128,
     128,   128,   132,   133,   126,   346,   270,   271,   270,   271,
     203,   204,   206,   206,   132,   133,     1,    67,    67,   250,
     268,   128,   250,   268,   128,   130,   128,   130,   361,   362,
     128,   361,   362,   221,   128,   132,   136,   127,     3,   128,
     136,   364,   130,   364,    75,   194,   195,   196,   128,   128,
     128,   132,   126,   139,   139,   128,   139,   139,   133,   130,
     133,   361,   361,   128,   128,   130,   361,   250,   361,   362,
     139,   130,   363,   364,   248,   364,   130,   364,   128,   136,
       3,   128,   136,   381,   381,   133,   195,   134,   194,   134,
     235,   255,   343,   128,   392,   128,   128,   128,   128,   136,
     130,   364,   364,   130,   364,   196,   128,   348,   361,   127,
     130,   130,   130,   364,   128,   128,   128,   136,   133,   132,
     133,   248,   128,   130,   130,   130,   364,   133,   128,   130,
     128,   130
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 150: /* guess_type */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12017 "grammar.ec"
        break;
      case 151: /* type */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12024 "grammar.ec"
        break;
      case 152: /* base_strict_type */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12031 "grammar.ec"
        break;
      case 153: /* base_strict_type_name */
/* Line 1393 of yacc.c  */
#line 252 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 12038 "grammar.ec"
        break;
      case 154: /* strict_type */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12045 "grammar.ec"
        break;
      case 155: /* class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12052 "grammar.ec"
        break;
      case 156: /* constructor_function_definition_start */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12059 "grammar.ec"
        break;
      case 157: /* destructor_function_definition_start */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12066 "grammar.ec"
        break;
      case 158: /* virtual_class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12073 "grammar.ec"
        break;
      case 159: /* class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12080 "grammar.ec"
        break;
      case 160: /* virtual_class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12087 "grammar.ec"
        break;
      case 161: /* class_function_definition */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12094 "grammar.ec"
        break;
      case 162: /* class_function_definition_error */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12101 "grammar.ec"
        break;
      case 163: /* instance_class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12108 "grammar.ec"
        break;
      case 164: /* instance_class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12115 "grammar.ec"
        break;
      case 165: /* instance_class_function_definition */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12122 "grammar.ec"
        break;
      case 166: /* instance_class_function_definition_error */
/* Line 1393 of yacc.c  */
#line 244 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12129 "grammar.ec"
        break;
      case 167: /* data_member_initialization */
/* Line 1393 of yacc.c  */
#line 242 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12136 "grammar.ec"
        break;
      case 168: /* data_member_initialization_error */
/* Line 1393 of yacc.c  */
#line 242 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12143 "grammar.ec"
        break;
      case 169: /* data_member_initialization_list */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12150 "grammar.ec"
        break;
      case 170: /* data_member_initialization_list_error */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12157 "grammar.ec"
        break;
      case 171: /* data_member_initialization_list_coloned */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12164 "grammar.ec"
        break;
      case 172: /* members_initialization_list_coloned */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12171 "grammar.ec"
        break;
      case 173: /* members_initialization_list */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12178 "grammar.ec"
        break;
      case 174: /* members_initialization_list_error */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12185 "grammar.ec"
        break;
      case 175: /* instantiation_named */
/* Line 1393 of yacc.c  */
#line 240 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12192 "grammar.ec"
        break;
      case 176: /* instantiation_named_error */
/* Line 1393 of yacc.c  */
#line 240 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12199 "grammar.ec"
        break;
      case 180: /* instantiation_unnamed */
/* Line 1393 of yacc.c  */
#line 240 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12206 "grammar.ec"
        break;
      case 181: /* instantiation_unnamed_error */
/* Line 1393 of yacc.c  */
#line 240 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12213 "grammar.ec"
        break;
      case 184: /* default_property */
/* Line 1393 of yacc.c  */
#line 242 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12220 "grammar.ec"
        break;
      case 185: /* default_property_error */
/* Line 1393 of yacc.c  */
#line 242 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12227 "grammar.ec"
        break;
      case 186: /* default_property_list */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12234 "grammar.ec"
        break;
      case 187: /* default_property_list_error */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12241 "grammar.ec"
        break;
      case 190: /* property */
/* Line 1393 of yacc.c  */
#line 253 "grammar.y"
        { FreeProperty(((*yyvaluep).prop)); };
/* Line 1393 of yacc.c  */
#line 12248 "grammar.ec"
        break;
      case 201: /* struct_declaration */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1393 of yacc.c  */
#line 12255 "grammar.ec"
        break;
      case 202: /* struct_declaration_error */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1393 of yacc.c  */
#line 12262 "grammar.ec"
        break;
      case 203: /* struct_declaration_list */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1393 of yacc.c  */
#line 12269 "grammar.ec"
        break;
      case 204: /* struct_declaration_list_error */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1393 of yacc.c  */
#line 12276 "grammar.ec"
        break;
      case 205: /* template_datatype */
/* Line 1393 of yacc.c  */
#line 272 "grammar.y"
        { FreeTemplateDataType(((*yyvaluep).templateDatatype)); };
/* Line 1393 of yacc.c  */
#line 12283 "grammar.ec"
        break;
      case 206: /* template_type_argument */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12290 "grammar.ec"
        break;
      case 207: /* template_type_parameter */
/* Line 1393 of yacc.c  */
#line 270 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12297 "grammar.ec"
        break;
      case 208: /* template_identifier_argument */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12304 "grammar.ec"
        break;
      case 209: /* template_identifier_parameter */
/* Line 1393 of yacc.c  */
#line 270 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12311 "grammar.ec"
        break;
      case 210: /* template_expression_argument */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12318 "grammar.ec"
        break;
      case 211: /* template_expression_parameter */
/* Line 1393 of yacc.c  */
#line 270 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12325 "grammar.ec"
        break;
      case 212: /* template_parameter */
/* Line 1393 of yacc.c  */
#line 270 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12332 "grammar.ec"
        break;
      case 213: /* template_parameters_list */
/* Line 1393 of yacc.c  */
#line 273 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateParameter); };
/* Line 1393 of yacc.c  */
#line 12339 "grammar.ec"
        break;
      case 214: /* template_argument */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12346 "grammar.ec"
        break;
      case 215: /* template_arguments_list */
/* Line 1393 of yacc.c  */
#line 274 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateArgument); };
/* Line 1393 of yacc.c  */
#line 12353 "grammar.ec"
        break;
      case 216: /* class_entry */
/* Line 1393 of yacc.c  */
#line 248 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1393 of yacc.c  */
#line 12360 "grammar.ec"
        break;
      case 217: /* class_decl */
/* Line 1393 of yacc.c  */
#line 249 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1393 of yacc.c  */
#line 12367 "grammar.ec"
        break;
      case 218: /* class */
/* Line 1393 of yacc.c  */
#line 250 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12374 "grammar.ec"
        break;
      case 219: /* class_head */
/* Line 1393 of yacc.c  */
#line 250 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12381 "grammar.ec"
        break;
      case 220: /* class_error */
/* Line 1393 of yacc.c  */
#line 250 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12388 "grammar.ec"
        break;
      case 221: /* identifier */
/* Line 1393 of yacc.c  */
#line 204 "grammar.y"
        { FreeIdentifier(((*yyvaluep).id)); };
/* Line 1393 of yacc.c  */
#line 12395 "grammar.ec"
        break;
      case 222: /* primary_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12402 "grammar.ec"
        break;
      case 223: /* i18n_string */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12409 "grammar.ec"
        break;
      case 228: /* primary_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12416 "grammar.ec"
        break;
      case 229: /* postfix_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12423 "grammar.ec"
        break;
      case 230: /* argument_expression_list */
/* Line 1393 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12430 "grammar.ec"
        break;
      case 231: /* argument_expression_list_error */
/* Line 1393 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12437 "grammar.ec"
        break;
      case 233: /* unary_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12444 "grammar.ec"
        break;
      case 235: /* cast_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12451 "grammar.ec"
        break;
      case 236: /* multiplicative_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12458 "grammar.ec"
        break;
      case 237: /* additive_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12465 "grammar.ec"
        break;
      case 238: /* shift_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12472 "grammar.ec"
        break;
      case 240: /* relational_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12479 "grammar.ec"
        break;
      case 241: /* equality_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12486 "grammar.ec"
        break;
      case 242: /* and_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12493 "grammar.ec"
        break;
      case 243: /* exclusive_or_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12500 "grammar.ec"
        break;
      case 244: /* inclusive_or_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12507 "grammar.ec"
        break;
      case 245: /* logical_and_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12514 "grammar.ec"
        break;
      case 246: /* logical_or_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12521 "grammar.ec"
        break;
      case 247: /* conditional_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12528 "grammar.ec"
        break;
      case 248: /* assignment_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12535 "grammar.ec"
        break;
      case 250: /* expression */
/* Line 1393 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12542 "grammar.ec"
        break;
      case 252: /* postfix_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12549 "grammar.ec"
        break;
      case 254: /* unary_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12556 "grammar.ec"
        break;
      case 255: /* cast_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12563 "grammar.ec"
        break;
      case 256: /* multiplicative_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12570 "grammar.ec"
        break;
      case 257: /* additive_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12577 "grammar.ec"
        break;
      case 258: /* shift_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12584 "grammar.ec"
        break;
      case 259: /* relational_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12591 "grammar.ec"
        break;
      case 260: /* equality_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12598 "grammar.ec"
        break;
      case 261: /* and_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12605 "grammar.ec"
        break;
      case 262: /* exclusive_or_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12612 "grammar.ec"
        break;
      case 263: /* inclusive_or_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12619 "grammar.ec"
        break;
      case 264: /* logical_and_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12626 "grammar.ec"
        break;
      case 265: /* logical_or_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12633 "grammar.ec"
        break;
      case 266: /* conditional_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12640 "grammar.ec"
        break;
      case 267: /* assignment_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12647 "grammar.ec"
        break;
      case 268: /* expression_error */
/* Line 1393 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12654 "grammar.ec"
        break;
      case 270: /* constant_expression */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12661 "grammar.ec"
        break;
      case 271: /* constant_expression_error */
/* Line 1393 of yacc.c  */
#line 206 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12668 "grammar.ec"
        break;
      case 272: /* storage_class_specifier */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12675 "grammar.ec"
        break;
      case 273: /* external_storage_class_specifier */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12682 "grammar.ec"
        break;
      case 274: /* enumerator */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeEnumerator(((*yyvaluep).enumerator)); };
/* Line 1393 of yacc.c  */
#line 12689 "grammar.ec"
        break;
      case 275: /* enumerator_list */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeEnumerator); };
/* Line 1393 of yacc.c  */
#line 12696 "grammar.ec"
        break;
      case 277: /* enum_specifier_nocompound */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12703 "grammar.ec"
        break;
      case 278: /* enum_specifier_compound */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12710 "grammar.ec"
        break;
      case 279: /* enum_specifier_compound_error */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12717 "grammar.ec"
        break;
      case 281: /* enum_class */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12724 "grammar.ec"
        break;
      case 282: /* enum_class_error */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12731 "grammar.ec"
        break;
      case 283: /* class_specifier */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12738 "grammar.ec"
        break;
      case 284: /* class_specifier_error */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12745 "grammar.ec"
        break;
      case 285: /* ext_storage */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12752 "grammar.ec"
        break;
      case 286: /* type_qualifier */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12759 "grammar.ec"
        break;
      case 287: /* type_qualifier_list */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12766 "grammar.ec"
        break;
      case 288: /* type_specifier */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12773 "grammar.ec"
        break;
      case 289: /* strict_type_specifier */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12780 "grammar.ec"
        break;
      case 290: /* struct_declarator */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12787 "grammar.ec"
        break;
      case 291: /* struct_declarator_list */
/* Line 1393 of yacc.c  */
#line 259 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclarator); };
/* Line 1393 of yacc.c  */
#line 12794 "grammar.ec"
        break;
      case 292: /* struct_entry */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12801 "grammar.ec"
        break;
      case 293: /* struct_or_union_specifier_compound */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12808 "grammar.ec"
        break;
      case 294: /* struct_or_union_specifier_compound_error */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12815 "grammar.ec"
        break;
      case 295: /* struct_or_union_specifier_nocompound */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12822 "grammar.ec"
        break;
      case 296: /* struct_decl */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12829 "grammar.ec"
        break;
      case 297: /* struct_head */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12836 "grammar.ec"
        break;
      case 298: /* struct_class */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12843 "grammar.ec"
        break;
      case 299: /* struct_class_error */
/* Line 1393 of yacc.c  */
#line 217 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12850 "grammar.ec"
        break;
      case 301: /* specifier_qualifier_list */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12857 "grammar.ec"
        break;
      case 302: /* guess_specifier_qualifier_list */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12864 "grammar.ec"
        break;
      case 303: /* declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12871 "grammar.ec"
        break;
      case 304: /* guess_declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12878 "grammar.ec"
        break;
      case 305: /* external_guess_declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12885 "grammar.ec"
        break;
      case 306: /* external_guess_declaration_specifiers_error */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12892 "grammar.ec"
        break;
      case 307: /* _inheritance_specifiers */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12899 "grammar.ec"
        break;
      case 308: /* inheritance_specifiers */
/* Line 1393 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12906 "grammar.ec"
        break;
      case 312: /* identifier_list_error */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 12913 "grammar.ec"
        break;
      case 313: /* identifier_list */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 12920 "grammar.ec"
        break;
      case 314: /* direct_declarator_nofunction_type_ok */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12927 "grammar.ec"
        break;
      case 315: /* direct_declarator_nofunction */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12934 "grammar.ec"
        break;
      case 316: /* direct_declarator_function_start */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12941 "grammar.ec"
        break;
      case 317: /* direct_declarator_function */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12948 "grammar.ec"
        break;
      case 318: /* direct_declarator_function_error */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12955 "grammar.ec"
        break;
      case 319: /* direct_declarator */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12962 "grammar.ec"
        break;
      case 320: /* direct_declarator_function_start_type_ok */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12969 "grammar.ec"
        break;
      case 321: /* direct_declarator_function_type_ok */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12976 "grammar.ec"
        break;
      case 322: /* direct_declarator_function_error_type_ok */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12983 "grammar.ec"
        break;
      case 323: /* direct_declarator_type_ok */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12990 "grammar.ec"
        break;
      case 324: /* ext_decl */
/* Line 1393 of yacc.c  */
#line 277 "grammar.y"
        { FreeExtDecl(((*yyvaluep).extDecl)); };
/* Line 1393 of yacc.c  */
#line 12997 "grammar.ec"
        break;
      case 326: /* attribute_word */
/* Line 1393 of yacc.c  */
#line 252 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 13004 "grammar.ec"
        break;
      case 327: /* attribute */
/* Line 1393 of yacc.c  */
#line 278 "grammar.y"
        { FreeAttribute(((*yyvaluep).attribute)); };
/* Line 1393 of yacc.c  */
#line 13011 "grammar.ec"
        break;
      case 328: /* attribs_list */
/* Line 1393 of yacc.c  */
#line 279 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttribute); };
/* Line 1393 of yacc.c  */
#line 13018 "grammar.ec"
        break;
      case 329: /* attrib */
/* Line 1393 of yacc.c  */
#line 276 "grammar.y"
        { FreeAttrib(((*yyvaluep).attrib)); };
/* Line 1393 of yacc.c  */
#line 13025 "grammar.ec"
        break;
      case 330: /* multi_attrib */
/* Line 1393 of yacc.c  */
#line 280 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttrib); };
/* Line 1393 of yacc.c  */
#line 13032 "grammar.ec"
        break;
      case 331: /* direct_abstract_declarator */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13039 "grammar.ec"
        break;
      case 332: /* direct_abstract_declarator_noarray */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13046 "grammar.ec"
        break;
      case 333: /* pointer */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreePointer(((*yyvaluep).pointer)); };
/* Line 1393 of yacc.c  */
#line 13053 "grammar.ec"
        break;
      case 334: /* abstract_declarator */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13060 "grammar.ec"
        break;
      case 335: /* abstract_declarator_noarray */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13067 "grammar.ec"
        break;
      case 336: /* declarator */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13074 "grammar.ec"
        break;
      case 337: /* declarator_type_ok */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13081 "grammar.ec"
        break;
      case 338: /* declarator_function */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13088 "grammar.ec"
        break;
      case 339: /* declarator_function_error */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13095 "grammar.ec"
        break;
      case 340: /* declarator_function_type_ok */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13102 "grammar.ec"
        break;
      case 341: /* declarator_function_error_type_ok */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13109 "grammar.ec"
        break;
      case 342: /* declarator_nofunction_type_ok */
/* Line 1393 of yacc.c  */
#line 223 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13116 "grammar.ec"
        break;
      case 343: /* initializer */
/* Line 1393 of yacc.c  */
#line 229 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13123 "grammar.ec"
        break;
      case 345: /* initializer_error */
/* Line 1393 of yacc.c  */
#line 229 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13130 "grammar.ec"
        break;
      case 346: /* initializer_condition */
/* Line 1393 of yacc.c  */
#line 229 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13137 "grammar.ec"
        break;
      case 347: /* initializer_condition_error */
/* Line 1393 of yacc.c  */
#line 229 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13144 "grammar.ec"
        break;
      case 348: /* initializer_list */
/* Line 1393 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitializer); };
/* Line 1393 of yacc.c  */
#line 13151 "grammar.ec"
        break;
      case 349: /* init_declarator */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1393 of yacc.c  */
#line 13158 "grammar.ec"
        break;
      case 350: /* init_declarator_error */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1393 of yacc.c  */
#line 13165 "grammar.ec"
        break;
      case 351: /* init_declarator_list */
/* Line 1393 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1393 of yacc.c  */
#line 13172 "grammar.ec"
        break;
      case 352: /* init_declarator_list_error */
/* Line 1393 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1393 of yacc.c  */
#line 13179 "grammar.ec"
        break;
      case 353: /* type_name */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13186 "grammar.ec"
        break;
      case 354: /* guess_type_name */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13193 "grammar.ec"
        break;
      case 355: /* parameter_declaration */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13200 "grammar.ec"
        break;
      case 356: /* parameter_declaration_error */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13207 "grammar.ec"
        break;
      case 357: /* parameter_list */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13214 "grammar.ec"
        break;
      case 358: /* parameter_list_error */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13221 "grammar.ec"
        break;
      case 359: /* parameter_type_list */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13228 "grammar.ec"
        break;
      case 360: /* parameter_type_list_error */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13235 "grammar.ec"
        break;
      case 361: /* statement */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13242 "grammar.ec"
        break;
      case 362: /* statement_error */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13249 "grammar.ec"
        break;
      case 366: /* labeled_statement */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13256 "grammar.ec"
        break;
      case 367: /* labeled_statement_error */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13263 "grammar.ec"
        break;
      case 368: /* declaration_mode */
/* Line 1393 of yacc.c  */
#line 275 "grammar.y"
        { };
/* Line 1393 of yacc.c  */
#line 13270 "grammar.ec"
        break;
      case 370: /* declaration */
/* Line 1393 of yacc.c  */
#line 236 "grammar.y"
        { FreeDeclaration(((*yyvaluep).declaration)); };
/* Line 1393 of yacc.c  */
#line 13277 "grammar.ec"
        break;
      case 374: /* declaration_list */
/* Line 1393 of yacc.c  */
#line 260 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1393 of yacc.c  */
#line 13284 "grammar.ec"
        break;
      case 375: /* declaration_list_error */
/* Line 1393 of yacc.c  */
#line 260 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1393 of yacc.c  */
#line 13291 "grammar.ec"
        break;
      case 376: /* statement_list */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1393 of yacc.c  */
#line 13298 "grammar.ec"
        break;
      case 377: /* statement_list_error */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1393 of yacc.c  */
#line 13305 "grammar.ec"
        break;
      case 378: /* compound_inside */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13312 "grammar.ec"
        break;
      case 379: /* compound_inside_error */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13319 "grammar.ec"
        break;
      case 380: /* compound_start */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { PopContext(((*yyvaluep).context)); FreeContext(((*yyvaluep).context)); delete ((*yyvaluep).context); };
/* Line 1393 of yacc.c  */
#line 13326 "grammar.ec"
        break;
      case 381: /* compound_statement */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13333 "grammar.ec"
        break;
      case 382: /* compound_statement_error */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13340 "grammar.ec"
        break;
      case 383: /* expression_statement */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13347 "grammar.ec"
        break;
      case 384: /* selection_statement */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13354 "grammar.ec"
        break;
      case 385: /* selection_statement_error */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13361 "grammar.ec"
        break;
      case 386: /* iteration_statement */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13368 "grammar.ec"
        break;
      case 387: /* iteration_statement_error */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13375 "grammar.ec"
        break;
      case 388: /* jump_statement */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13382 "grammar.ec"
        break;
      case 389: /* jump_statement_error */
/* Line 1393 of yacc.c  */
#line 232 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13389 "grammar.ec"
        break;
      case 390: /* function_definition */
/* Line 1393 of yacc.c  */
#line 237 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1393 of yacc.c  */
#line 13396 "grammar.ec"
        break;
      case 391: /* function_definition_error */
/* Line 1393 of yacc.c  */
#line 237 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1393 of yacc.c  */
#line 13403 "grammar.ec"
        break;
      case 392: /* string_literal */
/* Line 1393 of yacc.c  */
#line 252 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 13410 "grammar.ec"
        break;
      case 393: /* external_declaration */
/* Line 1393 of yacc.c  */
#line 238 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1393 of yacc.c  */
#line 13417 "grammar.ec"
        break;
      case 394: /* external_declaration_error */
/* Line 1393 of yacc.c  */
#line 238 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1393 of yacc.c  */
#line 13424 "grammar.ec"
        break;
      case 395: /* translation_unit_error */
/* Line 1393 of yacc.c  */
#line 265 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1393 of yacc.c  */
#line 13431 "grammar.ec"
        break;
      case 396: /* translation_unit */
/* Line 1393 of yacc.c  */
#line 265 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1393 of yacc.c  */
#line 13438 "grammar.ec"
        break;

      default:
        break;
    }
}




/* The lookahead symbol.  */
int yychar;


#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;


/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
/* Line 1787 of yacc.c  */
#line 288 "grammar.y"
    {
      (yyval.specifier) = null;
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   }
    break;

  case 3:
/* Line 1787 of yacc.c  */
#line 307 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   }
    break;

  case 4:
/* Line 1787 of yacc.c  */
#line 345 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 5:
/* Line 1787 of yacc.c  */
#line 347 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   }
    break;

  case 6:
/* Line 1787 of yacc.c  */
#line 426 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); }
    break;

  case 7:
/* Line 1787 of yacc.c  */
#line 430 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 9:
/* Line 1787 of yacc.c  */
#line 434 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); }
    break;

  case 10:
/* Line 1787 of yacc.c  */
#line 436 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    }
    break;

  case 11:
/* Line 1787 of yacc.c  */
#line 475 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 12:
/* Line 1787 of yacc.c  */
#line 477 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 13:
/* Line 1787 of yacc.c  */
#line 482 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (3)].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 14:
/* Line 1787 of yacc.c  */
#line 487 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (4)].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 15:
/* Line 1787 of yacc.c  */
#line 492 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 16:
/* Line 1787 of yacc.c  */
#line 494 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 17:
/* Line 1787 of yacc.c  */
#line 499 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 18:
/* Line 1787 of yacc.c  */
#line 501 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 19:
/* Line 1787 of yacc.c  */
#line 506 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 20:
/* Line 1787 of yacc.c  */
#line 508 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 21:
/* Line 1787 of yacc.c  */
#line 513 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 22:
/* Line 1787 of yacc.c  */
#line 515 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 23:
/* Line 1787 of yacc.c  */
#line 517 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 24:
/* Line 1787 of yacc.c  */
#line 519 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 25:
/* Line 1787 of yacc.c  */
#line 521 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 26:
/* Line 1787 of yacc.c  */
#line 525 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 27:
/* Line 1787 of yacc.c  */
#line 529 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      }
    break;

  case 28:
/* Line 1787 of yacc.c  */
#line 542 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 29:
/* Line 1787 of yacc.c  */
#line 544 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 30:
/* Line 1787 of yacc.c  */
#line 546 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 31:
/* Line 1787 of yacc.c  */
#line 548 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 32:
/* Line 1787 of yacc.c  */
#line 550 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 33:
/* Line 1787 of yacc.c  */
#line 556 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 34:
/* Line 1787 of yacc.c  */
#line 558 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 35:
/* Line 1787 of yacc.c  */
#line 563 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 36:
/* Line 1787 of yacc.c  */
#line 568 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 37:
/* Line 1787 of yacc.c  */
#line 573 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 38:
/* Line 1787 of yacc.c  */
#line 575 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 39:
/* Line 1787 of yacc.c  */
#line 577 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 40:
/* Line 1787 of yacc.c  */
#line 581 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 41:
/* Line 1787 of yacc.c  */
#line 582 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 42:
/* Line 1787 of yacc.c  */
#line 586 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 43:
/* Line 1787 of yacc.c  */
#line 588 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      }
    break;

  case 44:
/* Line 1787 of yacc.c  */
#line 598 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 45:
/* Line 1787 of yacc.c  */
#line 602 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 46:
/* Line 1787 of yacc.c  */
#line 604 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 47:
/* Line 1787 of yacc.c  */
#line 606 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 48:
/* Line 1787 of yacc.c  */
#line 610 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 49:
/* Line 1787 of yacc.c  */
#line 612 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 50:
/* Line 1787 of yacc.c  */
#line 614 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 51:
/* Line 1787 of yacc.c  */
#line 617 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 52:
/* Line 1787 of yacc.c  */
#line 629 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 53:
/* Line 1787 of yacc.c  */
#line 640 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      }
    break;

  case 54:
/* Line 1787 of yacc.c  */
#line 659 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 55:
/* Line 1787 of yacc.c  */
#line 661 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 56:
/* Line 1787 of yacc.c  */
#line 665 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); }
    break;

  case 57:
/* Line 1787 of yacc.c  */
#line 666 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 58:
/* Line 1787 of yacc.c  */
#line 667 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 59:
/* Line 1787 of yacc.c  */
#line 668 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 60:
/* Line 1787 of yacc.c  */
#line 669 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 61:
/* Line 1787 of yacc.c  */
#line 670 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 63:
/* Line 1787 of yacc.c  */
#line 673 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   }
    break;

  case 64:
/* Line 1787 of yacc.c  */
#line 685 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  }
    break;

  case 66:
/* Line 1787 of yacc.c  */
#line 690 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 67:
/* Line 1787 of yacc.c  */
#line 691 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 68:
/* Line 1787 of yacc.c  */
#line 692 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 69:
/* Line 1787 of yacc.c  */
#line 696 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 70:
/* Line 1787 of yacc.c  */
#line 697 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 71:
/* Line 1787 of yacc.c  */
#line 698 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 72:
/* Line 1787 of yacc.c  */
#line 699 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 73:
/* Line 1787 of yacc.c  */
#line 700 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 74:
/* Line 1787 of yacc.c  */
#line 701 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 75:
/* Line 1787 of yacc.c  */
#line 702 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 76:
/* Line 1787 of yacc.c  */
#line 707 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 77:
/* Line 1787 of yacc.c  */
#line 709 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 78:
/* Line 1787 of yacc.c  */
#line 714 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 79:
/* Line 1787 of yacc.c  */
#line 716 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 80:
/* Line 1787 of yacc.c  */
#line 718 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 81:
/* Line 1787 of yacc.c  */
#line 720 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 82:
/* Line 1787 of yacc.c  */
#line 722 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 83:
/* Line 1787 of yacc.c  */
#line 752 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 84:
/* Line 1787 of yacc.c  */
#line 754 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 85:
/* Line 1787 of yacc.c  */
#line 759 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 86:
/* Line 1787 of yacc.c  */
#line 761 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 87:
/* Line 1787 of yacc.c  */
#line 763 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 88:
/* Line 1787 of yacc.c  */
#line 765 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 89:
/* Line 1787 of yacc.c  */
#line 767 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 90:
/* Line 1787 of yacc.c  */
#line 796 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 91:
/* Line 1787 of yacc.c  */
#line 798 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 92:
/* Line 1787 of yacc.c  */
#line 800 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;}
    break;

  case 93:
/* Line 1787 of yacc.c  */
#line 805 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 94:
/* Line 1787 of yacc.c  */
#line 807 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 95:
/* Line 1787 of yacc.c  */
#line 812 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 96:
/* Line 1787 of yacc.c  */
#line 814 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 97:
/* Line 1787 of yacc.c  */
#line 818 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 98:
/* Line 1787 of yacc.c  */
#line 820 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 99:
/* Line 1787 of yacc.c  */
#line 822 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 100:
/* Line 1787 of yacc.c  */
#line 824 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 101:
/* Line 1787 of yacc.c  */
#line 829 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 102:
/* Line 1787 of yacc.c  */
#line 832 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); }
    break;

  case 103:
/* Line 1787 of yacc.c  */
#line 835 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); }
    break;

  case 104:
/* Line 1787 of yacc.c  */
#line 838 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 105:
/* Line 1787 of yacc.c  */
#line 903 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 106:
/* Line 1787 of yacc.c  */
#line 905 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 107:
/* Line 1787 of yacc.c  */
#line 910 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 108:
/* Line 1787 of yacc.c  */
#line 912 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 109:
/* Line 1787 of yacc.c  */
#line 914 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 110:
/* Line 1787 of yacc.c  */
#line 916 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 111:
/* Line 1787 of yacc.c  */
#line 918 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 112:
/* Line 1787 of yacc.c  */
#line 948 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 113:
/* Line 1787 of yacc.c  */
#line 952 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 114:
/* Line 1787 of yacc.c  */
#line 953 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; }
    break;

  case 115:
/* Line 1787 of yacc.c  */
#line 954 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 116:
/* Line 1787 of yacc.c  */
#line 958 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 117:
/* Line 1787 of yacc.c  */
#line 959 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 118:
/* Line 1787 of yacc.c  */
#line 960 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 119:
/* Line 1787 of yacc.c  */
#line 964 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 120:
/* Line 1787 of yacc.c  */
#line 965 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 121:
/* Line 1787 of yacc.c  */
#line 966 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 123:
/* Line 1787 of yacc.c  */
#line 972 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 124:
/* Line 1787 of yacc.c  */
#line 975 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 125:
/* Line 1787 of yacc.c  */
#line 978 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 126:
/* Line 1787 of yacc.c  */
#line 981 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 127:
/* Line 1787 of yacc.c  */
#line 984 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 129:
/* Line 1787 of yacc.c  */
#line 990 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 130:
/* Line 1787 of yacc.c  */
#line 992 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 131:
/* Line 1787 of yacc.c  */
#line 994 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 132:
/* Line 1787 of yacc.c  */
#line 996 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; }
    break;

  case 133:
/* Line 1787 of yacc.c  */
#line 998 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); }
    break;

  case 134:
/* Line 1787 of yacc.c  */
#line 1002 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); }
    break;

  case 135:
/* Line 1787 of yacc.c  */
#line 1007 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 136:
/* Line 1787 of yacc.c  */
#line 1010 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 137:
/* Line 1787 of yacc.c  */
#line 1013 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 138:
/* Line 1787 of yacc.c  */
#line 1016 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 139:
/* Line 1787 of yacc.c  */
#line 1019 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 141:
/* Line 1787 of yacc.c  */
#line 1025 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 142:
/* Line 1787 of yacc.c  */
#line 1027 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 143:
/* Line 1787 of yacc.c  */
#line 1031 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 144:
/* Line 1787 of yacc.c  */
#line 1036 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); }
    break;

  case 145:
/* Line 1787 of yacc.c  */
#line 1038 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); }
    break;

  case 146:
/* Line 1787 of yacc.c  */
#line 1043 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 147:
/* Line 1787 of yacc.c  */
#line 1045 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); }
    break;

  case 148:
/* Line 1787 of yacc.c  */
#line 1050 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); }
    break;

  case 149:
/* Line 1787 of yacc.c  */
#line 1052 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); }
    break;

  case 150:
/* Line 1787 of yacc.c  */
#line 1057 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); }
    break;

  case 151:
/* Line 1787 of yacc.c  */
#line 1062 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); }
    break;

  case 152:
/* Line 1787 of yacc.c  */
#line 1064 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); }
    break;

  case 153:
/* Line 1787 of yacc.c  */
#line 1069 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); }
    break;

  case 154:
/* Line 1787 of yacc.c  */
#line 1071 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); }
    break;

  case 155:
/* Line 1787 of yacc.c  */
#line 1073 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); }
    break;

  case 156:
/* Line 1787 of yacc.c  */
#line 1075 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); }
    break;

  case 157:
/* Line 1787 of yacc.c  */
#line 1080 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); }
    break;

  case 158:
/* Line 1787 of yacc.c  */
#line 1082 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); }
    break;

  case 159:
/* Line 1787 of yacc.c  */
#line 1084 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); }
    break;

  case 160:
/* Line 1787 of yacc.c  */
#line 1086 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); }
    break;

  case 161:
/* Line 1787 of yacc.c  */
#line 1090 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 162:
/* Line 1787 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); }
    break;

  case 163:
/* Line 1787 of yacc.c  */
#line 1092 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 164:
/* Line 1787 of yacc.c  */
#line 1093 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 165:
/* Line 1787 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 166:
/* Line 1787 of yacc.c  */
#line 1095 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 167:
/* Line 1787 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); }
    break;

  case 168:
/* Line 1787 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; }
    break;

  case 169:
/* Line 1787 of yacc.c  */
#line 1098 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); }
    break;

  case 170:
/* Line 1787 of yacc.c  */
#line 1099 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); }
    break;

  case 171:
/* Line 1787 of yacc.c  */
#line 1100 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); }
    break;

  case 172:
/* Line 1787 of yacc.c  */
#line 1102 "grammar.y"
    { (yyval.classDef) = null; }
    break;

  case 173:
/* Line 1787 of yacc.c  */
#line 1103 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; }
    break;

  case 174:
/* Line 1787 of yacc.c  */
#line 1105 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); }
    break;

  case 175:
/* Line 1787 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 176:
/* Line 1787 of yacc.c  */
#line 1112 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 177:
/* Line 1787 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 178:
/* Line 1787 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 179:
/* Line 1787 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 180:
/* Line 1787 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 181:
/* Line 1787 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 182:
/* Line 1787 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); }
    break;

  case 183:
/* Line 1787 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); }
    break;

  case 184:
/* Line 1787 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 185:
/* Line 1787 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 186:
/* Line 1787 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); }
    break;

  case 187:
/* Line 1787 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 188:
/* Line 1787 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 189:
/* Line 1787 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); }
    break;

  case 190:
/* Line 1787 of yacc.c  */
#line 1127 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 191:
/* Line 1787 of yacc.c  */
#line 1128 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 192:
/* Line 1787 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 193:
/* Line 1787 of yacc.c  */
#line 1133 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 194:
/* Line 1787 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 195:
/* Line 1787 of yacc.c  */
#line 1138 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; }
    break;

  case 196:
/* Line 1787 of yacc.c  */
#line 1142 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 197:
/* Line 1787 of yacc.c  */
#line 1143 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 198:
/* Line 1787 of yacc.c  */
#line 1144 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 199:
/* Line 1787 of yacc.c  */
#line 1148 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 202:
/* Line 1787 of yacc.c  */
#line 1151 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 203:
/* Line 1787 of yacc.c  */
#line 1152 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 204:
/* Line 1787 of yacc.c  */
#line 1156 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); }
    break;

  case 205:
/* Line 1787 of yacc.c  */
#line 1157 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 206:
/* Line 1787 of yacc.c  */
#line 1169 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); }
    break;

  case 207:
/* Line 1787 of yacc.c  */
#line 1170 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); }
    break;

  case 208:
/* Line 1787 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); }
    break;

  case 209:
/* Line 1787 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 210:
/* Line 1787 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 211:
/* Line 1787 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 212:
/* Line 1787 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); }
    break;

  case 213:
/* Line 1787 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 214:
/* Line 1787 of yacc.c  */
#line 1180 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 215:
/* Line 1787 of yacc.c  */
#line 1181 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 216:
/* Line 1787 of yacc.c  */
#line 1185 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); }
    break;

  case 217:
/* Line 1787 of yacc.c  */
#line 1189 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); }
    break;

  case 218:
/* Line 1787 of yacc.c  */
#line 1190 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 219:
/* Line 1787 of yacc.c  */
#line 1194 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); }
    break;

  case 220:
/* Line 1787 of yacc.c  */
#line 1202 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 221:
/* Line 1787 of yacc.c  */
#line 1203 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); }
    break;

  case 225:
/* Line 1787 of yacc.c  */
#line 1213 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); }
    break;

  case 226:
/* Line 1787 of yacc.c  */
#line 1214 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); }
    break;

  case 230:
/* Line 1787 of yacc.c  */
#line 1221 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 231:
/* Line 1787 of yacc.c  */
#line 1222 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 232:
/* Line 1787 of yacc.c  */
#line 1223 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 233:
/* Line 1787 of yacc.c  */
#line 1263 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); }
    break;

  case 234:
/* Line 1787 of yacc.c  */
#line 1264 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 235:
/* Line 1787 of yacc.c  */
#line 1269 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   }
    break;

  case 236:
/* Line 1787 of yacc.c  */
#line 1276 "grammar.y"
    { (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 237:
/* Line 1787 of yacc.c  */
#line 1278 "grammar.y"
    {
      (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 238:
/* Line 1787 of yacc.c  */
#line 1285 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (3)].id)._class, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 239:
/* Line 1787 of yacc.c  */
#line 1286 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (3)].specifier).nsSpec, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 240:
/* Line 1787 of yacc.c  */
#line 1288 "grammar.y"
    { (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 241:
/* Line 1787 of yacc.c  */
#line 1290 "grammar.y"
    {
      (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (5)].specifier).nsSpec, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 242:
/* Line 1787 of yacc.c  */
#line 1298 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 243:
/* Line 1787 of yacc.c  */
#line 1299 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 244:
/* Line 1787 of yacc.c  */
#line 1304 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      }
    break;

  case 245:
/* Line 1787 of yacc.c  */
#line 1311 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 246:
/* Line 1787 of yacc.c  */
#line 1318 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 247:
/* Line 1787 of yacc.c  */
#line 1324 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 248:
/* Line 1787 of yacc.c  */
#line 1331 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[(2) - (3)].id)._class, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 249:
/* Line 1787 of yacc.c  */
#line 1337 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass((yyvsp[(2) - (3)].specifier).nsSpec, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 250:
/* Line 1787 of yacc.c  */
#line 1346 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      }
    break;

  case 251:
/* Line 1787 of yacc.c  */
#line 1353 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 252:
/* Line 1787 of yacc.c  */
#line 1359 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 253:
/* Line 1787 of yacc.c  */
#line 1365 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 254:
/* Line 1787 of yacc.c  */
#line 1371 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 255:
/* Line 1787 of yacc.c  */
#line 1377 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 256:
/* Line 1787 of yacc.c  */
#line 1383 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 257:
/* Line 1787 of yacc.c  */
#line 1394 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); }
    break;

  case 259:
/* Line 1787 of yacc.c  */
#line 1400 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 260:
/* Line 1787 of yacc.c  */
#line 1404 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 261:
/* Line 1787 of yacc.c  */
#line 1405 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 262:
/* Line 1787 of yacc.c  */
#line 1406 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 263:
/* Line 1787 of yacc.c  */
#line 1410 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 264:
/* Line 1787 of yacc.c  */
#line 1414 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 265:
/* Line 1787 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 266:
/* Line 1787 of yacc.c  */
#line 1416 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); }
    break;

  case 267:
/* Line 1787 of yacc.c  */
#line 1417 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 268:
/* Line 1787 of yacc.c  */
#line 1418 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 269:
/* Line 1787 of yacc.c  */
#line 1419 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); }
    break;

  case 270:
/* Line 1787 of yacc.c  */
#line 1421 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   }
    break;

  case 271:
/* Line 1787 of yacc.c  */
#line 1433 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); }
    break;

  case 273:
/* Line 1787 of yacc.c  */
#line 1435 "grammar.y"
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 274:
/* Line 1787 of yacc.c  */
#line 1436 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); }
    break;

  case 275:
/* Line 1787 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 276:
/* Line 1787 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 277:
/* Line 1787 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 278:
/* Line 1787 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 279:
/* Line 1787 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 280:
/* Line 1787 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 281:
/* Line 1787 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 282:
/* Line 1787 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 283:
/* Line 1787 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 284:
/* Line 1787 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 285:
/* Line 1787 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 286:
/* Line 1787 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 287:
/* Line 1787 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 288:
/* Line 1787 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 289:
/* Line 1787 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 290:
/* Line 1787 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 291:
/* Line 1787 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); }
    break;

  case 292:
/* Line 1787 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); }
    break;

  case 293:
/* Line 1787 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 294:
/* Line 1787 of yacc.c  */
#line 1456 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 295:
/* Line 1787 of yacc.c  */
#line 1457 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 300:
/* Line 1787 of yacc.c  */
#line 1463 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 301:
/* Line 1787 of yacc.c  */
#line 1464 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); }
    break;

  case 302:
/* Line 1787 of yacc.c  */
#line 1468 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 303:
/* Line 1787 of yacc.c  */
#line 1472 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 304:
/* Line 1787 of yacc.c  */
#line 1476 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 305:
/* Line 1787 of yacc.c  */
#line 1477 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 307:
/* Line 1787 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 308:
/* Line 1787 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 309:
/* Line 1787 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 310:
/* Line 1787 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 311:
/* Line 1787 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; }
    break;

  case 312:
/* Line 1787 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 313:
/* Line 1787 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 314:
/* Line 1787 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 315:
/* Line 1787 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 316:
/* Line 1787 of yacc.c  */
#line 1493 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 317:
/* Line 1787 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 318:
/* Line 1787 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 319:
/* Line 1787 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); }
    break;

  case 320:
/* Line 1787 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 321:
/* Line 1787 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 322:
/* Line 1787 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 323:
/* Line 1787 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 324:
/* Line 1787 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 325:
/* Line 1787 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 326:
/* Line 1787 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 327:
/* Line 1787 of yacc.c  */
#line 1530 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 328:
/* Line 1787 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 329:
/* Line 1787 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 330:
/* Line 1787 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 331:
/* Line 1787 of yacc.c  */
#line 1537 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 332:
/* Line 1787 of yacc.c  */
#line 1538 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); }
    break;

  case 333:
/* Line 1787 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 334:
/* Line 1787 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 335:
/* Line 1787 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 336:
/* Line 1787 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 337:
/* Line 1787 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 338:
/* Line 1787 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 339:
/* Line 1787 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 340:
/* Line 1787 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 341:
/* Line 1787 of yacc.c  */
#line 1553 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 342:
/* Line 1787 of yacc.c  */
#line 1554 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 343:
/* Line 1787 of yacc.c  */
#line 1556 "grammar.y"
    { (yyval.exp) = MkExpOffsetOf((yyvsp[(3) - (6)].typeName), (yyvsp[(5) - (6)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 346:
/* Line 1787 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.i) = '&'; }
    break;

  case 347:
/* Line 1787 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.i) = '*'; }
    break;

  case 348:
/* Line 1787 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.i) = '+'; }
    break;

  case 349:
/* Line 1787 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.i) = '-'; }
    break;

  case 350:
/* Line 1787 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.i) = '~'; }
    break;

  case 351:
/* Line 1787 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.i) = '!'; }
    break;

  case 352:
/* Line 1787 of yacc.c  */
#line 1576 "grammar.y"
    { (yyval.i) = DELETE; }
    break;

  case 353:
/* Line 1787 of yacc.c  */
#line 1577 "grammar.y"
    { (yyval.i) = _INCREF; }
    break;

  case 355:
/* Line 1787 of yacc.c  */
#line 1582 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 356:
/* Line 1787 of yacc.c  */
#line 1583 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 358:
/* Line 1787 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 359:
/* Line 1787 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 360:
/* Line 1787 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 361:
/* Line 1787 of yacc.c  */
#line 1591 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 362:
/* Line 1787 of yacc.c  */
#line 1592 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 363:
/* Line 1787 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 365:
/* Line 1787 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 366:
/* Line 1787 of yacc.c  */
#line 1599 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 367:
/* Line 1787 of yacc.c  */
#line 1600 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 368:
/* Line 1787 of yacc.c  */
#line 1601 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 370:
/* Line 1787 of yacc.c  */
#line 1606 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 371:
/* Line 1787 of yacc.c  */
#line 1607 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 372:
/* Line 1787 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 373:
/* Line 1787 of yacc.c  */
#line 1609 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 374:
/* Line 1787 of yacc.c  */
#line 1614 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   }
    break;

  case 376:
/* Line 1787 of yacc.c  */
#line 1622 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); }
    break;

  case 377:
/* Line 1787 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 378:
/* Line 1787 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 379:
/* Line 1787 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 380:
/* Line 1787 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 381:
/* Line 1787 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 382:
/* Line 1787 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 383:
/* Line 1787 of yacc.c  */
#line 1629 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 385:
/* Line 1787 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 386:
/* Line 1787 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 387:
/* Line 1787 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 388:
/* Line 1787 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 389:
/* Line 1787 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 390:
/* Line 1787 of yacc.c  */
#line 1640 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 391:
/* Line 1787 of yacc.c  */
#line 1641 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 392:
/* Line 1787 of yacc.c  */
#line 1642 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 394:
/* Line 1787 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 395:
/* Line 1787 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 396:
/* Line 1787 of yacc.c  */
#line 1650 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 397:
/* Line 1787 of yacc.c  */
#line 1651 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 399:
/* Line 1787 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 400:
/* Line 1787 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 401:
/* Line 1787 of yacc.c  */
#line 1659 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 402:
/* Line 1787 of yacc.c  */
#line 1660 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 404:
/* Line 1787 of yacc.c  */
#line 1665 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 405:
/* Line 1787 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 406:
/* Line 1787 of yacc.c  */
#line 1668 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 407:
/* Line 1787 of yacc.c  */
#line 1669 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 409:
/* Line 1787 of yacc.c  */
#line 1674 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 410:
/* Line 1787 of yacc.c  */
#line 1675 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 412:
/* Line 1787 of yacc.c  */
#line 1680 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 413:
/* Line 1787 of yacc.c  */
#line 1681 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 415:
/* Line 1787 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 416:
/* Line 1787 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 417:
/* Line 1787 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 418:
/* Line 1787 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 419:
/* Line 1787 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 420:
/* Line 1787 of yacc.c  */
#line 1692 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 421:
/* Line 1787 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 422:
/* Line 1787 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 423:
/* Line 1787 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 424:
/* Line 1787 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 425:
/* Line 1787 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 426:
/* Line 1787 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 427:
/* Line 1787 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 428:
/* Line 1787 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 429:
/* Line 1787 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 430:
/* Line 1787 of yacc.c  */
#line 1704 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 432:
/* Line 1787 of yacc.c  */
#line 1709 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 433:
/* Line 1787 of yacc.c  */
#line 1710 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 434:
/* Line 1787 of yacc.c  */
#line 1711 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 435:
/* Line 1787 of yacc.c  */
#line 1712 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 436:
/* Line 1787 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 437:
/* Line 1787 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 438:
/* Line 1787 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 439:
/* Line 1787 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 440:
/* Line 1787 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.i) = '='; }
    break;

  case 441:
/* Line 1787 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; }
    break;

  case 442:
/* Line 1787 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; }
    break;

  case 443:
/* Line 1787 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; }
    break;

  case 444:
/* Line 1787 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; }
    break;

  case 445:
/* Line 1787 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; }
    break;

  case 446:
/* Line 1787 of yacc.c  */
#line 1727 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; }
    break;

  case 447:
/* Line 1787 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; }
    break;

  case 448:
/* Line 1787 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.i) = AND_ASSIGN; }
    break;

  case 449:
/* Line 1787 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; }
    break;

  case 450:
/* Line 1787 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.i) = OR_ASSIGN; }
    break;

  case 451:
/* Line 1787 of yacc.c  */
#line 1735 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 452:
/* Line 1787 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 453:
/* Line 1787 of yacc.c  */
#line 1737 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 455:
/* Line 1787 of yacc.c  */
#line 1742 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 456:
/* Line 1787 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 457:
/* Line 1787 of yacc.c  */
#line 1744 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 459:
/* Line 1787 of yacc.c  */
#line 1749 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ }
    break;

  case 461:
/* Line 1787 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 462:
/* Line 1787 of yacc.c  */
#line 1753 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 463:
/* Line 1787 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 464:
/* Line 1787 of yacc.c  */
#line 1756 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 465:
/* Line 1787 of yacc.c  */
#line 1757 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 466:
/* Line 1787 of yacc.c  */
#line 1762 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 467:
/* Line 1787 of yacc.c  */
#line 1764 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 468:
/* Line 1787 of yacc.c  */
#line 1769 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 469:
/* Line 1787 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 470:
/* Line 1787 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 471:
/* Line 1787 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 472:
/* Line 1787 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 473:
/* Line 1787 of yacc.c  */
#line 1802 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 474:
/* Line 1787 of yacc.c  */
#line 1803 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 475:
/* Line 1787 of yacc.c  */
#line 1804 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 476:
/* Line 1787 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 477:
/* Line 1787 of yacc.c  */
#line 1807 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 478:
/* Line 1787 of yacc.c  */
#line 1808 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 482:
/* Line 1787 of yacc.c  */
#line 1823 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 484:
/* Line 1787 of yacc.c  */
#line 1828 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 485:
/* Line 1787 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 486:
/* Line 1787 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 487:
/* Line 1787 of yacc.c  */
#line 1831 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 488:
/* Line 1787 of yacc.c  */
#line 1832 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 489:
/* Line 1787 of yacc.c  */
#line 1833 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 491:
/* Line 1787 of yacc.c  */
#line 1838 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 492:
/* Line 1787 of yacc.c  */
#line 1842 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 493:
/* Line 1787 of yacc.c  */
#line 1846 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 494:
/* Line 1787 of yacc.c  */
#line 1850 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 496:
/* Line 1787 of yacc.c  */
#line 1858 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 497:
/* Line 1787 of yacc.c  */
#line 1859 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 498:
/* Line 1787 of yacc.c  */
#line 1860 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 499:
/* Line 1787 of yacc.c  */
#line 1861 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 501:
/* Line 1787 of yacc.c  */
#line 1867 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         _DeclClass((yyvsp[(1) - (2)].exp).identifier._class, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   }
    break;

  case 502:
/* Line 1787 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 503:
/* Line 1787 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 504:
/* Line 1787 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 505:
/* Line 1787 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 506:
/* Line 1787 of yacc.c  */
#line 1913 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 507:
/* Line 1787 of yacc.c  */
#line 1914 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 508:
/* Line 1787 of yacc.c  */
#line 1915 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 510:
/* Line 1787 of yacc.c  */
#line 1920 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 511:
/* Line 1787 of yacc.c  */
#line 1921 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 512:
/* Line 1787 of yacc.c  */
#line 1922 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 513:
/* Line 1787 of yacc.c  */
#line 1923 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 514:
/* Line 1787 of yacc.c  */
#line 1930 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 515:
/* Line 1787 of yacc.c  */
#line 1931 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 516:
/* Line 1787 of yacc.c  */
#line 1932 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 517:
/* Line 1787 of yacc.c  */
#line 1933 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 519:
/* Line 1787 of yacc.c  */
#line 1938 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 520:
/* Line 1787 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 521:
/* Line 1787 of yacc.c  */
#line 1941 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 522:
/* Line 1787 of yacc.c  */
#line 1942 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 524:
/* Line 1787 of yacc.c  */
#line 1947 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 525:
/* Line 1787 of yacc.c  */
#line 1948 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 526:
/* Line 1787 of yacc.c  */
#line 1950 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 527:
/* Line 1787 of yacc.c  */
#line 1951 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 529:
/* Line 1787 of yacc.c  */
#line 1956 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 530:
/* Line 1787 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 531:
/* Line 1787 of yacc.c  */
#line 1959 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 532:
/* Line 1787 of yacc.c  */
#line 1960 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 534:
/* Line 1787 of yacc.c  */
#line 1965 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 535:
/* Line 1787 of yacc.c  */
#line 1966 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 537:
/* Line 1787 of yacc.c  */
#line 1971 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 538:
/* Line 1787 of yacc.c  */
#line 1972 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 540:
/* Line 1787 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 541:
/* Line 1787 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 542:
/* Line 1787 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 543:
/* Line 1787 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 544:
/* Line 1787 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 545:
/* Line 1787 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 546:
/* Line 1787 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 547:
/* Line 1787 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 548:
/* Line 1787 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 549:
/* Line 1787 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 550:
/* Line 1787 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 551:
/* Line 1787 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 552:
/* Line 1787 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 553:
/* Line 1787 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 554:
/* Line 1787 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 555:
/* Line 1787 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 556:
/* Line 1787 of yacc.c  */
#line 1995 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 557:
/* Line 1787 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 558:
/* Line 1787 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 559:
/* Line 1787 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 560:
/* Line 1787 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 561:
/* Line 1787 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 562:
/* Line 1787 of yacc.c  */
#line 2002 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 563:
/* Line 1787 of yacc.c  */
#line 2003 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 564:
/* Line 1787 of yacc.c  */
#line 2006 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 565:
/* Line 1787 of yacc.c  */
#line 2014 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 566:
/* Line 1787 of yacc.c  */
#line 2018 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 567:
/* Line 1787 of yacc.c  */
#line 2023 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 569:
/* Line 1787 of yacc.c  */
#line 2030 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 570:
/* Line 1787 of yacc.c  */
#line 2034 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 571:
/* Line 1787 of yacc.c  */
#line 2039 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 572:
/* Line 1787 of yacc.c  */
#line 2040 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 573:
/* Line 1787 of yacc.c  */
#line 2044 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 574:
/* Line 1787 of yacc.c  */
#line 2045 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 575:
/* Line 1787 of yacc.c  */
#line 2046 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 576:
/* Line 1787 of yacc.c  */
#line 2047 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 577:
/* Line 1787 of yacc.c  */
#line 2053 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 578:
/* Line 1787 of yacc.c  */
#line 2054 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 579:
/* Line 1787 of yacc.c  */
#line 2055 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 580:
/* Line 1787 of yacc.c  */
#line 2059 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 581:
/* Line 1787 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 582:
/* Line 1787 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 583:
/* Line 1787 of yacc.c  */
#line 2062 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 586:
/* Line 1787 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); }
    break;

  case 587:
/* Line 1787 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 588:
/* Line 1787 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); }
    break;

  case 589:
/* Line 1787 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 590:
/* Line 1787 of yacc.c  */
#line 2076 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 591:
/* Line 1787 of yacc.c  */
#line 2077 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 592:
/* Line 1787 of yacc.c  */
#line 2078 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 593:
/* Line 1787 of yacc.c  */
#line 2082 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; }
    break;

  case 594:
/* Line 1787 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 595:
/* Line 1787 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; }
    break;

  case 596:
/* Line 1787 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 597:
/* Line 1787 of yacc.c  */
#line 2086 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 598:
/* Line 1787 of yacc.c  */
#line 2087 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 599:
/* Line 1787 of yacc.c  */
#line 2088 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 600:
/* Line 1787 of yacc.c  */
#line 2092 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null, null); }
    break;

  case 601:
/* Line 1787 of yacc.c  */
#line 2093 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 602:
/* Line 1787 of yacc.c  */
#line 2094 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 603:
/* Line 1787 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (2)].id), null, (yyvsp[(2) - (2)].list)); }
    break;

  case 604:
/* Line 1787 of yacc.c  */
#line 2096 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 605:
/* Line 1787 of yacc.c  */
#line 2097 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 606:
/* Line 1787 of yacc.c  */
#line 2101 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); }
    break;

  case 607:
/* Line 1787 of yacc.c  */
#line 2102 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); }
    break;

  case 609:
/* Line 1787 of yacc.c  */
#line 2107 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 610:
/* Line 1787 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 611:
/* Line 1787 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS; }
    break;

  case 612:
/* Line 1787 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); }
    break;

  case 613:
/* Line 1787 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 614:
/* Line 1787 of yacc.c  */
#line 2118 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 615:
/* Line 1787 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 616:
/* Line 1787 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 617:
/* Line 1787 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 618:
/* Line 1787 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 619:
/* Line 1787 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 620:
/* Line 1787 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 621:
/* Line 1787 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 622:
/* Line 1787 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 623:
/* Line 1787 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 624:
/* Line 1787 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 625:
/* Line 1787 of yacc.c  */
#line 2134 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 626:
/* Line 1787 of yacc.c  */
#line 2135 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 627:
/* Line 1787 of yacc.c  */
#line 2137 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 628:
/* Line 1787 of yacc.c  */
#line 2138 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 629:
/* Line 1787 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); }
    break;

  case 630:
/* Line 1787 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 631:
/* Line 1787 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 632:
/* Line 1787 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 633:
/* Line 1787 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 634:
/* Line 1787 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 635:
/* Line 1787 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 636:
/* Line 1787 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 637:
/* Line 1787 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 638:
/* Line 1787 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 639:
/* Line 1787 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 640:
/* Line 1787 of yacc.c  */
#line 2159 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 641:
/* Line 1787 of yacc.c  */
#line 2160 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 642:
/* Line 1787 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 643:
/* Line 1787 of yacc.c  */
#line 2163 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 644:
/* Line 1787 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 645:
/* Line 1787 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 646:
/* Line 1787 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 647:
/* Line 1787 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 648:
/* Line 1787 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 649:
/* Line 1787 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 650:
/* Line 1787 of yacc.c  */
#line 2172 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 651:
/* Line 1787 of yacc.c  */
#line 2173 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 652:
/* Line 1787 of yacc.c  */
#line 2174 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 653:
/* Line 1787 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 658:
/* Line 1787 of yacc.c  */
#line 2189 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); }
    break;

  case 659:
/* Line 1787 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); }
    break;

  case 660:
/* Line 1787 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); }
    break;

  case 661:
/* Line 1787 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 662:
/* Line 1787 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 663:
/* Line 1787 of yacc.c  */
#line 2201 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  }
    break;

  case 664:
/* Line 1787 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 665:
/* Line 1787 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 666:
/* Line 1787 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 667:
/* Line 1787 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 668:
/* Line 1787 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 669:
/* Line 1787 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 670:
/* Line 1787 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 671:
/* Line 1787 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 672:
/* Line 1787 of yacc.c  */
#line 2213 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT16); }
    break;

  case 673:
/* Line 1787 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 674:
/* Line 1787 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 675:
/* Line 1787 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 676:
/* Line 1787 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 677:
/* Line 1787 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 678:
/* Line 1787 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 679:
/* Line 1787 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 683:
/* Line 1787 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 684:
/* Line 1787 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 685:
/* Line 1787 of yacc.c  */
#line 2226 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 686:
/* Line 1787 of yacc.c  */
#line 2227 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 687:
/* Line 1787 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); }
    break;

  case 688:
/* Line 1787 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); }
    break;

  case 689:
/* Line 1787 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 690:
/* Line 1787 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 691:
/* Line 1787 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 692:
/* Line 1787 of yacc.c  */
#line 2233 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 693:
/* Line 1787 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 694:
/* Line 1787 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 695:
/* Line 1787 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 696:
/* Line 1787 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 697:
/* Line 1787 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 698:
/* Line 1787 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 699:
/* Line 1787 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 700:
/* Line 1787 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 701:
/* Line 1787 of yacc.c  */
#line 2245 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT16); }
    break;

  case 702:
/* Line 1787 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 703:
/* Line 1787 of yacc.c  */
#line 2247 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 704:
/* Line 1787 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 705:
/* Line 1787 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 706:
/* Line 1787 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 707:
/* Line 1787 of yacc.c  */
#line 2251 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 708:
/* Line 1787 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 712:
/* Line 1787 of yacc.c  */
#line 2256 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 713:
/* Line 1787 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 714:
/* Line 1787 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 715:
/* Line 1787 of yacc.c  */
#line 2259 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 716:
/* Line 1787 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 717:
/* Line 1787 of yacc.c  */
#line 2261 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 718:
/* Line 1787 of yacc.c  */
#line 2262 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 719:
/* Line 1787 of yacc.c  */
#line 2263 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 720:
/* Line 1787 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); }
    break;

  case 721:
/* Line 1787 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); }
    break;

  case 722:
/* Line 1787 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 723:
/* Line 1787 of yacc.c  */
#line 2276 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 724:
/* Line 1787 of yacc.c  */
#line 2278 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 725:
/* Line 1787 of yacc.c  */
#line 2280 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 726:
/* Line 1787 of yacc.c  */
#line 2282 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 727:
/* Line 1787 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 728:
/* Line 1787 of yacc.c  */
#line 2286 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 729:
/* Line 1787 of yacc.c  */
#line 2288 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 730:
/* Line 1787 of yacc.c  */
#line 2292 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); }
    break;

  case 731:
/* Line 1787 of yacc.c  */
#line 2293 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); }
    break;

  case 732:
/* Line 1787 of yacc.c  */
#line 2298 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 733:
/* Line 1787 of yacc.c  */
#line 2304 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      }
    break;

  case 734:
/* Line 1787 of yacc.c  */
#line 2310 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 735:
/* Line 1787 of yacc.c  */
#line 2317 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      }
    break;

  case 736:
/* Line 1787 of yacc.c  */
#line 2326 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 737:
/* Line 1787 of yacc.c  */
#line 2327 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 738:
/* Line 1787 of yacc.c  */
#line 2328 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 739:
/* Line 1787 of yacc.c  */
#line 2329 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 740:
/* Line 1787 of yacc.c  */
#line 2333 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 741:
/* Line 1787 of yacc.c  */
#line 2334 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 742:
/* Line 1787 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 743:
/* Line 1787 of yacc.c  */
#line 2337 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 744:
/* Line 1787 of yacc.c  */
#line 2338 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 745:
/* Line 1787 of yacc.c  */
#line 2339 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 746:
/* Line 1787 of yacc.c  */
#line 2341 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 747:
/* Line 1787 of yacc.c  */
#line 2342 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 748:
/* Line 1787 of yacc.c  */
#line 2343 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 749:
/* Line 1787 of yacc.c  */
#line 2347 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 750:
/* Line 1787 of yacc.c  */
#line 2352 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (1)].specifier).id._class, (yyvsp[(1) - (1)].specifier).id.string);
        }
     }
    break;

  case 751:
/* Line 1787 of yacc.c  */
#line 2360 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (4)].specifier).id._class, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   }
    break;

  case 752:
/* Line 1787 of yacc.c  */
#line 2369 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   }
    break;

  case 753:
/* Line 1787 of yacc.c  */
#line 2377 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 754:
/* Line 1787 of yacc.c  */
#line 2379 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 755:
/* Line 1787 of yacc.c  */
#line 2380 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 756:
/* Line 1787 of yacc.c  */
#line 2381 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 757:
/* Line 1787 of yacc.c  */
#line 2386 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 758:
/* Line 1787 of yacc.c  */
#line 2393 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 759:
/* Line 1787 of yacc.c  */
#line 2400 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);}
    break;

  case 760:
/* Line 1787 of yacc.c  */
#line 2403 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           (yyval.specifier).ctx = (yyvsp[(1) - (3)].specifier).ctx;
           (yyvsp[(1) - (3)].specifier).ctx = null;

           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 761:
/* Line 1787 of yacc.c  */
#line 2419 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 762:
/* Line 1787 of yacc.c  */
#line 2433 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 763:
/* Line 1787 of yacc.c  */
#line 2436 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS;  }
    break;

  case 764:
/* Line 1787 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 765:
/* Line 1787 of yacc.c  */
#line 2440 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 766:
/* Line 1787 of yacc.c  */
#line 2444 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 767:
/* Line 1787 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 768:
/* Line 1787 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 769:
/* Line 1787 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 770:
/* Line 1787 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 771:
/* Line 1787 of yacc.c  */
#line 2452 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 772:
/* Line 1787 of yacc.c  */
#line 2453 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 773:
/* Line 1787 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 774:
/* Line 1787 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 775:
/* Line 1787 of yacc.c  */
#line 2456 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 776:
/* Line 1787 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 777:
/* Line 1787 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 778:
/* Line 1787 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 779:
/* Line 1787 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 780:
/* Line 1787 of yacc.c  */
#line 2464 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 781:
/* Line 1787 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 782:
/* Line 1787 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 783:
/* Line 1787 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 784:
/* Line 1787 of yacc.c  */
#line 2468 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 785:
/* Line 1787 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 786:
/* Line 1787 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 787:
/* Line 1787 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 788:
/* Line 1787 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 789:
/* Line 1787 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 790:
/* Line 1787 of yacc.c  */
#line 2477 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 791:
/* Line 1787 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 792:
/* Line 1787 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 793:
/* Line 1787 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 794:
/* Line 1787 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 795:
/* Line 1787 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 796:
/* Line 1787 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 797:
/* Line 1787 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 798:
/* Line 1787 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 799:
/* Line 1787 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 800:
/* Line 1787 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 801:
/* Line 1787 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 802:
/* Line 1787 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 803:
/* Line 1787 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 804:
/* Line 1787 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 805:
/* Line 1787 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 806:
/* Line 1787 of yacc.c  */
#line 2496 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 807:
/* Line 1787 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 808:
/* Line 1787 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 809:
/* Line 1787 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 810:
/* Line 1787 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 811:
/* Line 1787 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 812:
/* Line 1787 of yacc.c  */
#line 2505 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 813:
/* Line 1787 of yacc.c  */
#line 2506 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 814:
/* Line 1787 of yacc.c  */
#line 2507 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 815:
/* Line 1787 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 816:
/* Line 1787 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 817:
/* Line 1787 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 818:
/* Line 1787 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 819:
/* Line 1787 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 820:
/* Line 1787 of yacc.c  */
#line 2519 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); }
    break;

  case 821:
/* Line 1787 of yacc.c  */
#line 2520 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); }
    break;

  case 822:
/* Line 1787 of yacc.c  */
#line 2521 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 823:
/* Line 1787 of yacc.c  */
#line 2522 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 824:
/* Line 1787 of yacc.c  */
#line 2523 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 825:
/* Line 1787 of yacc.c  */
#line 2524 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 826:
/* Line 1787 of yacc.c  */
#line 2525 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 827:
/* Line 1787 of yacc.c  */
#line 2526 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 828:
/* Line 1787 of yacc.c  */
#line 2528 "grammar.y"
    { _DeclClass((yyvsp[(1) - (1)].id)._class, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 829:
/* Line 1787 of yacc.c  */
#line 2529 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 830:
/* Line 1787 of yacc.c  */
#line 2532 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 831:
/* Line 1787 of yacc.c  */
#line 2540 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 833:
/* Line 1787 of yacc.c  */
#line 2550 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS; }
    break;

  case 834:
/* Line 1787 of yacc.c  */
#line 2554 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 835:
/* Line 1787 of yacc.c  */
#line 2555 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 836:
/* Line 1787 of yacc.c  */
#line 2556 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 837:
/* Line 1787 of yacc.c  */
#line 2557 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 838:
/* Line 1787 of yacc.c  */
#line 2558 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 839:
/* Line 1787 of yacc.c  */
#line 2559 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 840:
/* Line 1787 of yacc.c  */
#line 2560 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 841:
/* Line 1787 of yacc.c  */
#line 2561 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 842:
/* Line 1787 of yacc.c  */
#line 2563 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 843:
/* Line 1787 of yacc.c  */
#line 2571 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 844:
/* Line 1787 of yacc.c  */
#line 2579 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 845:
/* Line 1787 of yacc.c  */
#line 2580 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 846:
/* Line 1787 of yacc.c  */
#line 2581 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 847:
/* Line 1787 of yacc.c  */
#line 2582 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 848:
/* Line 1787 of yacc.c  */
#line 2583 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 849:
/* Line 1787 of yacc.c  */
#line 2584 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 850:
/* Line 1787 of yacc.c  */
#line 2585 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 851:
/* Line 1787 of yacc.c  */
#line 2586 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 852:
/* Line 1787 of yacc.c  */
#line 2587 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 853:
/* Line 1787 of yacc.c  */
#line 2588 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 854:
/* Line 1787 of yacc.c  */
#line 2589 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 855:
/* Line 1787 of yacc.c  */
#line 2590 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 856:
/* Line 1787 of yacc.c  */
#line 2592 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 857:
/* Line 1787 of yacc.c  */
#line 2600 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 858:
/* Line 1787 of yacc.c  */
#line 2608 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 859:
/* Line 1787 of yacc.c  */
#line 2609 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 860:
/* Line 1787 of yacc.c  */
#line 2610 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 861:
/* Line 1787 of yacc.c  */
#line 2611 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 862:
/* Line 1787 of yacc.c  */
#line 2612 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 863:
/* Line 1787 of yacc.c  */
#line 2613 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 864:
/* Line 1787 of yacc.c  */
#line 2614 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 865:
/* Line 1787 of yacc.c  */
#line 2615 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 866:
/* Line 1787 of yacc.c  */
#line 2616 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 867:
/* Line 1787 of yacc.c  */
#line 2617 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 868:
/* Line 1787 of yacc.c  */
#line 2618 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 869:
/* Line 1787 of yacc.c  */
#line 2619 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 870:
/* Line 1787 of yacc.c  */
#line 2621 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 871:
/* Line 1787 of yacc.c  */
#line 2629 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 872:
/* Line 1787 of yacc.c  */
#line 2637 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 873:
/* Line 1787 of yacc.c  */
#line 2638 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 874:
/* Line 1787 of yacc.c  */
#line 2642 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); }
    break;

  case 875:
/* Line 1787 of yacc.c  */
#line 2643 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 876:
/* Line 1787 of yacc.c  */
#line 2644 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 877:
/* Line 1787 of yacc.c  */
#line 2645 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 878:
/* Line 1787 of yacc.c  */
#line 2646 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 880:
/* Line 1787 of yacc.c  */
#line 2652 "grammar.y"
    {
      char * colon = (yyvsp[(1) - (1)].specifier).name ? RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false) : null;
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   }
    break;

  case 881:
/* Line 1787 of yacc.c  */
#line 2658 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); }
    break;

  case 882:
/* Line 1787 of yacc.c  */
#line 2661 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 883:
/* Line 1787 of yacc.c  */
#line 2670 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 884:
/* Line 1787 of yacc.c  */
#line 2679 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      }
    break;

  case 885:
/* Line 1787 of yacc.c  */
#line 2688 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      }
    break;

  case 886:
/* Line 1787 of yacc.c  */
#line 2696 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 887:
/* Line 1787 of yacc.c  */
#line 2697 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 888:
/* Line 1787 of yacc.c  */
#line 2698 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 889:
/* Line 1787 of yacc.c  */
#line 2699 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 890:
/* Line 1787 of yacc.c  */
#line 2703 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 891:
/* Line 1787 of yacc.c  */
#line 2704 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 892:
/* Line 1787 of yacc.c  */
#line 2705 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 893:
/* Line 1787 of yacc.c  */
#line 2706 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 894:
/* Line 1787 of yacc.c  */
#line 2707 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 895:
/* Line 1787 of yacc.c  */
#line 2708 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 896:
/* Line 1787 of yacc.c  */
#line 2709 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 897:
/* Line 1787 of yacc.c  */
#line 2710 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 898:
/* Line 1787 of yacc.c  */
#line 2711 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 900:
/* Line 1787 of yacc.c  */
#line 2719 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 901:
/* Line 1787 of yacc.c  */
#line 2720 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 902:
/* Line 1787 of yacc.c  */
#line 2721 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 903:
/* Line 1787 of yacc.c  */
#line 2722 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 904:
/* Line 1787 of yacc.c  */
#line 2723 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 905:
/* Line 1787 of yacc.c  */
#line 2729 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 906:
/* Line 1787 of yacc.c  */
#line 2738 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 907:
/* Line 1787 of yacc.c  */
#line 2747 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 908:
/* Line 1787 of yacc.c  */
#line 2756 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 912:
/* Line 1787 of yacc.c  */
#line 2779 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 913:
/* Line 1787 of yacc.c  */
#line 2780 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 914:
/* Line 1787 of yacc.c  */
#line 2781 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 915:
/* Line 1787 of yacc.c  */
#line 2782 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 916:
/* Line 1787 of yacc.c  */
#line 2783 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 917:
/* Line 1787 of yacc.c  */
#line 2789 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 918:
/* Line 1787 of yacc.c  */
#line 2798 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 919:
/* Line 1787 of yacc.c  */
#line 2807 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 920:
/* Line 1787 of yacc.c  */
#line 2816 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 923:
/* Line 1787 of yacc.c  */
#line 2879 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 924:
/* Line 1787 of yacc.c  */
#line 2880 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 925:
/* Line 1787 of yacc.c  */
#line 2883 "grammar.y"
    {
         TempFile f { };
         OutputExtDecl((yyvsp[(1) - (2)].extDecl), f);
         f.Putc(' ');
         f.Puts(yytext);
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExtDecl((yyvsp[(1) - (2)].extDecl));
         delete f;
      }
    break;

  case 926:
/* Line 1787 of yacc.c  */
#line 2894 "grammar.y"
    {
         TempFile f { };
         OutputExtDecl((yyvsp[(1) - (2)].extDecl), f);
         f.Putc(' ');
         f.Puts(yytext);
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExtDecl((yyvsp[(1) - (2)].extDecl));
         delete f;
      }
    break;

  case 927:
/* Line 1787 of yacc.c  */
#line 2904 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 928:
/* Line 1787 of yacc.c  */
#line 2905 "grammar.y"
    { (yyval.extDecl) = MkExtDeclMultiAttrib((yyvsp[(1) - (1)].list)); }
    break;

  case 929:
/* Line 1787 of yacc.c  */
#line 2907 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      }
    break;

  case 930:
/* Line 1787 of yacc.c  */
#line 2918 "grammar.y"
    { (yyval.i) = ATTRIB; }
    break;

  case 931:
/* Line 1787 of yacc.c  */
#line 2919 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; }
    break;

  case 932:
/* Line 1787 of yacc.c  */
#line 2920 "grammar.y"
    { (yyval.i) = __ATTRIB; }
    break;

  case 933:
/* Line 1787 of yacc.c  */
#line 2925 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 934:
/* Line 1787 of yacc.c  */
#line 2926 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 935:
/* Line 1787 of yacc.c  */
#line 2927 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 936:
/* Line 1787 of yacc.c  */
#line 2928 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 937:
/* Line 1787 of yacc.c  */
#line 2929 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 938:
/* Line 1787 of yacc.c  */
#line 2933 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); }
    break;

  case 939:
/* Line 1787 of yacc.c  */
#line 2934 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); }
    break;

  case 940:
/* Line 1787 of yacc.c  */
#line 2938 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); }
    break;

  case 941:
/* Line 1787 of yacc.c  */
#line 2939 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 942:
/* Line 1787 of yacc.c  */
#line 2940 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 943:
/* Line 1787 of yacc.c  */
#line 2944 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); }
    break;

  case 944:
/* Line 1787 of yacc.c  */
#line 2945 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); }
    break;

  case 945:
/* Line 1787 of yacc.c  */
#line 2949 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attrib)); }
    break;

  case 946:
/* Line 1787 of yacc.c  */
#line 2950 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attrib)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 947:
/* Line 1787 of yacc.c  */
#line 2954 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 948:
/* Line 1787 of yacc.c  */
#line 2955 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 949:
/* Line 1787 of yacc.c  */
#line 2956 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); }
    break;

  case 950:
/* Line 1787 of yacc.c  */
#line 2957 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 951:
/* Line 1787 of yacc.c  */
#line 2958 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 952:
/* Line 1787 of yacc.c  */
#line 2959 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); }
    break;

  case 953:
/* Line 1787 of yacc.c  */
#line 2960 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 954:
/* Line 1787 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 955:
/* Line 1787 of yacc.c  */
#line 2962 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 956:
/* Line 1787 of yacc.c  */
#line 2963 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 957:
/* Line 1787 of yacc.c  */
#line 2964 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 958:
/* Line 1787 of yacc.c  */
#line 2965 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 959:
/* Line 1787 of yacc.c  */
#line 2966 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 960:
/* Line 1787 of yacc.c  */
#line 2967 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 961:
/* Line 1787 of yacc.c  */
#line 2968 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 962:
/* Line 1787 of yacc.c  */
#line 2969 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 963:
/* Line 1787 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 964:
/* Line 1787 of yacc.c  */
#line 2974 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 965:
/* Line 1787 of yacc.c  */
#line 2975 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 966:
/* Line 1787 of yacc.c  */
#line 2976 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 967:
/* Line 1787 of yacc.c  */
#line 2977 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 968:
/* Line 1787 of yacc.c  */
#line 2978 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 969:
/* Line 1787 of yacc.c  */
#line 2979 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 970:
/* Line 1787 of yacc.c  */
#line 2980 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 971:
/* Line 1787 of yacc.c  */
#line 2984 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); }
    break;

  case 972:
/* Line 1787 of yacc.c  */
#line 2985 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); }
    break;

  case 973:
/* Line 1787 of yacc.c  */
#line 2986 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); }
    break;

  case 974:
/* Line 1787 of yacc.c  */
#line 2987 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); }
    break;

  case 975:
/* Line 1787 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 977:
/* Line 1787 of yacc.c  */
#line 2993 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 978:
/* Line 1787 of yacc.c  */
#line 2994 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 979:
/* Line 1787 of yacc.c  */
#line 2995 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 980:
/* Line 1787 of yacc.c  */
#line 2999 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 982:
/* Line 1787 of yacc.c  */
#line 3001 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 983:
/* Line 1787 of yacc.c  */
#line 3002 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 984:
/* Line 1787 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 986:
/* Line 1787 of yacc.c  */
#line 3009 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 987:
/* Line 1787 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 988:
/* Line 1787 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 989:
/* Line 1787 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 991:
/* Line 1787 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 992:
/* Line 1787 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 993:
/* Line 1787 of yacc.c  */
#line 3025 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 995:
/* Line 1787 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 996:
/* Line 1787 of yacc.c  */
#line 3031 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 997:
/* Line 1787 of yacc.c  */
#line 3032 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 999:
/* Line 1787 of yacc.c  */
#line 3037 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1000:
/* Line 1787 of yacc.c  */
#line 3038 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1001:
/* Line 1787 of yacc.c  */
#line 3039 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1003:
/* Line 1787 of yacc.c  */
#line 3044 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1004:
/* Line 1787 of yacc.c  */
#line 3045 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1005:
/* Line 1787 of yacc.c  */
#line 3046 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1007:
/* Line 1787 of yacc.c  */
#line 3051 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1008:
/* Line 1787 of yacc.c  */
#line 3052 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1009:
/* Line 1787 of yacc.c  */
#line 3053 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1011:
/* Line 1787 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1012:
/* Line 1787 of yacc.c  */
#line 3059 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1013:
/* Line 1787 of yacc.c  */
#line 3060 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1014:
/* Line 1787 of yacc.c  */
#line 3064 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1015:
/* Line 1787 of yacc.c  */
#line 3065 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1016:
/* Line 1787 of yacc.c  */
#line 3067 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1017:
/* Line 1787 of yacc.c  */
#line 3083 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1018:
/* Line 1787 of yacc.c  */
#line 3085 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1019:
/* Line 1787 of yacc.c  */
#line 3101 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1020:
/* Line 1787 of yacc.c  */
#line 3102 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1021:
/* Line 1787 of yacc.c  */
#line 3103 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1022:
/* Line 1787 of yacc.c  */
#line 3105 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      }
    break;

  case 1023:
/* Line 1787 of yacc.c  */
#line 3118 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      }
    break;

  case 1024:
/* Line 1787 of yacc.c  */
#line 3134 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1025:
/* Line 1787 of yacc.c  */
#line 3136 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1026:
/* Line 1787 of yacc.c  */
#line 3140 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1027:
/* Line 1787 of yacc.c  */
#line 3141 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1028:
/* Line 1787 of yacc.c  */
#line 3145 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1029:
/* Line 1787 of yacc.c  */
#line 3146 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1030:
/* Line 1787 of yacc.c  */
#line 3147 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1031:
/* Line 1787 of yacc.c  */
#line 3148 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1032:
/* Line 1787 of yacc.c  */
#line 3151 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1033:
/* Line 1787 of yacc.c  */
#line 3152 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1034:
/* Line 1787 of yacc.c  */
#line 3156 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1035:
/* Line 1787 of yacc.c  */
#line 3157 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1036:
/* Line 1787 of yacc.c  */
#line 3158 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1037:
/* Line 1787 of yacc.c  */
#line 3162 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1038:
/* Line 1787 of yacc.c  */
#line 3166 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1039:
/* Line 1787 of yacc.c  */
#line 3170 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1040:
/* Line 1787 of yacc.c  */
#line 3171 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1041:
/* Line 1787 of yacc.c  */
#line 3172 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1042:
/* Line 1787 of yacc.c  */
#line 3173 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1043:
/* Line 1787 of yacc.c  */
#line 3174 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__int128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1044:
/* Line 1787 of yacc.c  */
#line 3175 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__float128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1045:
/* Line 1787 of yacc.c  */
#line 3176 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("_Float16")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1046:
/* Line 1787 of yacc.c  */
#line 3178 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   }
    break;

  case 1047:
/* Line 1787 of yacc.c  */
#line 3186 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1048:
/* Line 1787 of yacc.c  */
#line 3195 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1049:
/* Line 1787 of yacc.c  */
#line 3196 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); }
    break;

  case 1050:
/* Line 1787 of yacc.c  */
#line 3197 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1051:
/* Line 1787 of yacc.c  */
#line 3198 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1052:
/* Line 1787 of yacc.c  */
#line 3202 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1053:
/* Line 1787 of yacc.c  */
#line 3203 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1054:
/* Line 1787 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1055:
/* Line 1787 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1056:
/* Line 1787 of yacc.c  */
#line 3213 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1057:
/* Line 1787 of yacc.c  */
#line 3214 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1058:
/* Line 1787 of yacc.c  */
#line 3215 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); }
    break;

  case 1059:
/* Line 1787 of yacc.c  */
#line 3216 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1060:
/* Line 1787 of yacc.c  */
#line 3217 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); }
    break;

  case 1061:
/* Line 1787 of yacc.c  */
#line 3219 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); }
    break;

  case 1062:
/* Line 1787 of yacc.c  */
#line 3237 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1063:
/* Line 1787 of yacc.c  */
#line 3238 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1064:
/* Line 1787 of yacc.c  */
#line 3242 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1065:
/* Line 1787 of yacc.c  */
#line 3243 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1066:
/* Line 1787 of yacc.c  */
#line 3244 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1067:
/* Line 1787 of yacc.c  */
#line 3245 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1068:
/* Line 1787 of yacc.c  */
#line 3246 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1069:
/* Line 1787 of yacc.c  */
#line 3247 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1070:
/* Line 1787 of yacc.c  */
#line 3249 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1071:
/* Line 1787 of yacc.c  */
#line 3250 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1072:
/* Line 1787 of yacc.c  */
#line 3251 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1073:
/* Line 1787 of yacc.c  */
#line 3252 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1074:
/* Line 1787 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1075:
/* Line 1787 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1076:
/* Line 1787 of yacc.c  */
#line 3258 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1077:
/* Line 1787 of yacc.c  */
#line 3259 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1078:
/* Line 1787 of yacc.c  */
#line 3260 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1079:
/* Line 1787 of yacc.c  */
#line 3262 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1080:
/* Line 1787 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1081:
/* Line 1787 of yacc.c  */
#line 3264 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1083:
/* Line 1787 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1084:
/* Line 1787 of yacc.c  */
#line 3270 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1085:
/* Line 1787 of yacc.c  */
#line 3271 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1086:
/* Line 1787 of yacc.c  */
#line 3272 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1087:
/* Line 1787 of yacc.c  */
#line 3273 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); }
    break;

  case 1089:
/* Line 1787 of yacc.c  */
#line 3278 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 1092:
/* Line 1787 of yacc.c  */
#line 3285 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 1094:
/* Line 1787 of yacc.c  */
#line 3287 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1095:
/* Line 1787 of yacc.c  */
#line 3288 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1096:
/* Line 1787 of yacc.c  */
#line 3289 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1104:
/* Line 1787 of yacc.c  */
#line 3300 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1105:
/* Line 1787 of yacc.c  */
#line 3301 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1106:
/* Line 1787 of yacc.c  */
#line 3302 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1107:
/* Line 1787 of yacc.c  */
#line 3303 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1108:
/* Line 1787 of yacc.c  */
#line 3304 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1109:
/* Line 1787 of yacc.c  */
#line 3305 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1110:
/* Line 1787 of yacc.c  */
#line 3306 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); }
    break;

  case 1111:
/* Line 1787 of yacc.c  */
#line 3310 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); }
    break;

  case 1112:
/* Line 1787 of yacc.c  */
#line 3311 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); }
    break;

  case 1113:
/* Line 1787 of yacc.c  */
#line 3312 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); }
    break;

  case 1114:
/* Line 1787 of yacc.c  */
#line 3316 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); }
    break;

  case 1115:
/* Line 1787 of yacc.c  */
#line 3317 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); }
    break;

  case 1116:
/* Line 1787 of yacc.c  */
#line 3318 "grammar.y"
    { (yyval.list) = null; }
    break;

  case 1117:
/* Line 1787 of yacc.c  */
#line 3322 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1118:
/* Line 1787 of yacc.c  */
#line 3323 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1119:
/* Line 1787 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1120:
/* Line 1787 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1121:
/* Line 1787 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1122:
/* Line 1787 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1123:
/* Line 1787 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1124:
/* Line 1787 of yacc.c  */
#line 3331 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1125:
/* Line 1787 of yacc.c  */
#line 3332 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1126:
/* Line 1787 of yacc.c  */
#line 3333 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1127:
/* Line 1787 of yacc.c  */
#line 3334 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1128:
/* Line 1787 of yacc.c  */
#line 3336 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1129:
/* Line 1787 of yacc.c  */
#line 3337 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1130:
/* Line 1787 of yacc.c  */
#line 3338 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1131:
/* Line 1787 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1132:
/* Line 1787 of yacc.c  */
#line 3343 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1133:
/* Line 1787 of yacc.c  */
#line 3344 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1134:
/* Line 1787 of yacc.c  */
#line 3345 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1135:
/* Line 1787 of yacc.c  */
#line 3346 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1136:
/* Line 1787 of yacc.c  */
#line 3348 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1137:
/* Line 1787 of yacc.c  */
#line 3349 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1138:
/* Line 1787 of yacc.c  */
#line 3350 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1139:
/* Line 1787 of yacc.c  */
#line 3351 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1140:
/* Line 1787 of yacc.c  */
#line 3352 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1141:
/* Line 1787 of yacc.c  */
#line 3356 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1142:
/* Line 1787 of yacc.c  */
#line 3357 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1143:
/* Line 1787 of yacc.c  */
#line 3358 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1144:
/* Line 1787 of yacc.c  */
#line 3359 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1145:
/* Line 1787 of yacc.c  */
#line 3360 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; }
    break;

  case 1146:
/* Line 1787 of yacc.c  */
#line 3361 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1147:
/* Line 1787 of yacc.c  */
#line 3362 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1148:
/* Line 1787 of yacc.c  */
#line 3364 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1149:
/* Line 1787 of yacc.c  */
#line 3365 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1150:
/* Line 1787 of yacc.c  */
#line 3366 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1151:
/* Line 1787 of yacc.c  */
#line 3367 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1152:
/* Line 1787 of yacc.c  */
#line 3368 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1153:
/* Line 1787 of yacc.c  */
#line 3372 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; }
    break;

  case 1154:
/* Line 1787 of yacc.c  */
#line 3373 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; }
    break;

  case 1155:
/* Line 1787 of yacc.c  */
#line 3374 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; }
    break;

  case 1156:
/* Line 1787 of yacc.c  */
#line 3378 "grammar.y"
    { (yyval.declMode) = publicAccess; }
    break;

  case 1157:
/* Line 1787 of yacc.c  */
#line 3379 "grammar.y"
    { (yyval.declMode) = privateAccess; }
    break;

  case 1158:
/* Line 1787 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1159:
/* Line 1787 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1160:
/* Line 1787 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1161:
/* Line 1787 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; }
    break;

  case 1162:
/* Line 1787 of yacc.c  */
#line 3387 "grammar.y"
    { (yyval.declaration) = MkExpDummy(); (yyval.declaration).loc = (yyloc); FreeList((yyvsp[(3) - (4)].list), FreeExpression); }
    break;

  case 1163:
/* Line 1787 of yacc.c  */
#line 3388 "grammar.y"
    { (yyval.declaration) = MkExpDummy(); (yyval.declaration).loc = (yyloc); FreeList((yyvsp[(3) - (6)].list), FreeExpression); delete (yyvsp[(5) - (6)].string); }
    break;

  case 1164:
/* Line 1787 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); }
    break;

  case 1165:
/* Line 1787 of yacc.c  */
#line 3393 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1166:
/* Line 1787 of yacc.c  */
#line 3394 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1167:
/* Line 1787 of yacc.c  */
#line 3396 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1168:
/* Line 1787 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1169:
/* Line 1787 of yacc.c  */
#line 3398 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1170:
/* Line 1787 of yacc.c  */
#line 3402 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; }
    break;

  case 1171:
/* Line 1787 of yacc.c  */
#line 3406 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1172:
/* Line 1787 of yacc.c  */
#line 3407 "grammar.y"
    { structDeclMode = defaultDeclMode;  }
    break;

  case 1173:
/* Line 1787 of yacc.c  */
#line 3409 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1174:
/* Line 1787 of yacc.c  */
#line 3410 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1175:
/* Line 1787 of yacc.c  */
#line 3411 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1176:
/* Line 1787 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ }
    break;

  case 1177:
/* Line 1787 of yacc.c  */
#line 3416 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1178:
/* Line 1787 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1179:
/* Line 1787 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 1180:
/* Line 1787 of yacc.c  */
#line 3422 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); }
    break;

  case 1181:
/* Line 1787 of yacc.c  */
#line 3423 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); }
    break;

  case 1182:
/* Line 1787 of yacc.c  */
#line 3427 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1183:
/* Line 1787 of yacc.c  */
#line 3428 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1184:
/* Line 1787 of yacc.c  */
#line 3429 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1185:
/* Line 1787 of yacc.c  */
#line 3433 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1186:
/* Line 1787 of yacc.c  */
#line 3434 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1187:
/* Line 1787 of yacc.c  */
#line 3435 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1188:
/* Line 1787 of yacc.c  */
#line 3436 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1189:
/* Line 1787 of yacc.c  */
#line 3437 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1190:
/* Line 1787 of yacc.c  */
#line 3438 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1191:
/* Line 1787 of yacc.c  */
#line 3439 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1192:
/* Line 1787 of yacc.c  */
#line 3443 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1193:
/* Line 1787 of yacc.c  */
#line 3444 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1194:
/* Line 1787 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1195:
/* Line 1787 of yacc.c  */
#line 3446 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1196:
/* Line 1787 of yacc.c  */
#line 3450 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1197:
/* Line 1787 of yacc.c  */
#line 3451 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1198:
/* Line 1787 of yacc.c  */
#line 3452 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1199:
/* Line 1787 of yacc.c  */
#line 3453 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1200:
/* Line 1787 of yacc.c  */
#line 3457 "grammar.y"
    { (yyval.context) = PushContext(); }
    break;

  case 1201:
/* Line 1787 of yacc.c  */
#line 3461 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1202:
/* Line 1787 of yacc.c  */
#line 3466 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1203:
/* Line 1787 of yacc.c  */
#line 3468 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1204:
/* Line 1787 of yacc.c  */
#line 3471 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1205:
/* Line 1787 of yacc.c  */
#line 3476 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1206:
/* Line 1787 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1207:
/* Line 1787 of yacc.c  */
#line 3478 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1208:
/* Line 1787 of yacc.c  */
#line 3482 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1209:
/* Line 1787 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1210:
/* Line 1787 of yacc.c  */
#line 3484 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1211:
/* Line 1787 of yacc.c  */
#line 3485 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1212:
/* Line 1787 of yacc.c  */
#line 3486 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1213:
/* Line 1787 of yacc.c  */
#line 3487 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1214:
/* Line 1787 of yacc.c  */
#line 3491 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1216:
/* Line 1787 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1217:
/* Line 1787 of yacc.c  */
#line 3497 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1218:
/* Line 1787 of yacc.c  */
#line 3498 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1219:
/* Line 1787 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1220:
/* Line 1787 of yacc.c  */
#line 3501 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1221:
/* Line 1787 of yacc.c  */
#line 3503 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1222:
/* Line 1787 of yacc.c  */
#line 3504 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1223:
/* Line 1787 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1224:
/* Line 1787 of yacc.c  */
#line 3506 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1225:
/* Line 1787 of yacc.c  */
#line 3507 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1226:
/* Line 1787 of yacc.c  */
#line 3509 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1227:
/* Line 1787 of yacc.c  */
#line 3510 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1228:
/* Line 1787 of yacc.c  */
#line 3514 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1229:
/* Line 1787 of yacc.c  */
#line 3515 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); }
    break;

  case 1230:
/* Line 1787 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1231:
/* Line 1787 of yacc.c  */
#line 3517 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); }
    break;

  case 1232:
/* Line 1787 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1233:
/* Line 1787 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1234:
/* Line 1787 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1235:
/* Line 1787 of yacc.c  */
#line 3524 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1236:
/* Line 1787 of yacc.c  */
#line 3526 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1237:
/* Line 1787 of yacc.c  */
#line 3527 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1238:
/* Line 1787 of yacc.c  */
#line 3528 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1239:
/* Line 1787 of yacc.c  */
#line 3529 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1240:
/* Line 1787 of yacc.c  */
#line 3530 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1241:
/* Line 1787 of yacc.c  */
#line 3531 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1242:
/* Line 1787 of yacc.c  */
#line 3532 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1243:
/* Line 1787 of yacc.c  */
#line 3535 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1244:
/* Line 1787 of yacc.c  */
#line 3539 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1245:
/* Line 1787 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1246:
/* Line 1787 of yacc.c  */
#line 3544 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1247:
/* Line 1787 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1248:
/* Line 1787 of yacc.c  */
#line 3549 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1249:
/* Line 1787 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1250:
/* Line 1787 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1251:
/* Line 1787 of yacc.c  */
#line 3552 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); }
    break;

  case 1252:
/* Line 1787 of yacc.c  */
#line 3553 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1253:
/* Line 1787 of yacc.c  */
#line 3554 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1254:
/* Line 1787 of yacc.c  */
#line 3555 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1255:
/* Line 1787 of yacc.c  */
#line 3556 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1256:
/* Line 1787 of yacc.c  */
#line 3560 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1257:
/* Line 1787 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1258:
/* Line 1787 of yacc.c  */
#line 3562 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; }
    break;

  case 1259:
/* Line 1787 of yacc.c  */
#line 3563 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1260:
/* Line 1787 of yacc.c  */
#line 3569 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1261:
/* Line 1787 of yacc.c  */
#line 3571 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1262:
/* Line 1787 of yacc.c  */
#line 3572 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1263:
/* Line 1787 of yacc.c  */
#line 3574 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1264:
/* Line 1787 of yacc.c  */
#line 3576 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1265:
/* Line 1787 of yacc.c  */
#line 3577 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);}
    break;

  case 1266:
/* Line 1787 of yacc.c  */
#line 3580 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1267:
/* Line 1787 of yacc.c  */
#line 3581 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1268:
/* Line 1787 of yacc.c  */
#line 3582 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1269:
/* Line 1787 of yacc.c  */
#line 3583 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1270:
/* Line 1787 of yacc.c  */
#line 3584 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1271:
/* Line 1787 of yacc.c  */
#line 3585 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 1272:
/* Line 1787 of yacc.c  */
#line 3589 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 1273:
/* Line 1787 of yacc.c  */
#line 3591 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   }
    break;

  case 1274:
/* Line 1787 of yacc.c  */
#line 3602 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1275:
/* Line 1787 of yacc.c  */
#line 3604 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1276:
/* Line 1787 of yacc.c  */
#line 3607 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); }
    break;

  case 1277:
/* Line 1787 of yacc.c  */
#line 3610 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1278:
/* Line 1787 of yacc.c  */
#line 3611 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1279:
/* Line 1787 of yacc.c  */
#line 3612 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1280:
/* Line 1787 of yacc.c  */
#line 3614 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   }
    break;

  case 1281:
/* Line 1787 of yacc.c  */
#line 3623 "grammar.y"
    { (yyval.external) = null; }
    break;

  case 1282:
/* Line 1787 of yacc.c  */
#line 3625 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1283:
/* Line 1787 of yacc.c  */
#line 3627 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1284:
/* Line 1787 of yacc.c  */
#line 3628 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1285:
/* Line 1787 of yacc.c  */
#line 3629 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1286:
/* Line 1787 of yacc.c  */
#line 3630 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1287:
/* Line 1787 of yacc.c  */
#line 3632 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   }
    break;

  case 1288:
/* Line 1787 of yacc.c  */
#line 3641 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; }
    break;

  case 1289:
/* Line 1787 of yacc.c  */
#line 3642 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; }
    break;

  case 1290:
/* Line 1787 of yacc.c  */
#line 3643 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); }
    break;

  case 1291:
/* Line 1787 of yacc.c  */
#line 3644 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); }
    break;

  case 1292:
/* Line 1787 of yacc.c  */
#line 3645 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1293:
/* Line 1787 of yacc.c  */
#line 3646 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1294:
/* Line 1787 of yacc.c  */
#line 3647 "grammar.y"
    { (yyval.external) = MkExternalPragma(yytext); (yyval.external).loc = (yyloc); }
    break;

  case 1295:
/* Line 1787 of yacc.c  */
#line 3648 "grammar.y"
    { (yyval.external) = MkExpDummy(); (yyval.external).loc = (yyloc); FreeList((yyvsp[(3) - (4)].list), FreeExpression); }
    break;

  case 1296:
/* Line 1787 of yacc.c  */
#line 3649 "grammar.y"
    { (yyval.external) = MkExpDummy(); (yyval.external).loc = (yyloc); FreeList((yyvsp[(3) - (6)].list), FreeExpression); delete (yyvsp[(5) - (6)].string); }
    break;

  case 1297:
/* Line 1787 of yacc.c  */
#line 3653 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1298:
/* Line 1787 of yacc.c  */
#line 3655 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   }
    break;

  case 1299:
/* Line 1787 of yacc.c  */
#line 3663 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1300:
/* Line 1787 of yacc.c  */
#line 3665 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1301:
/* Line 1787 of yacc.c  */
#line 3666 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1302:
/* Line 1787 of yacc.c  */
#line 3669 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1303:
/* Line 1787 of yacc.c  */
#line 3670 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1304:
/* Line 1787 of yacc.c  */
#line 3674 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1305:
/* Line 1787 of yacc.c  */
#line 3675 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1306:
/* Line 1787 of yacc.c  */
#line 3676 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1309:
/* Line 1787 of yacc.c  */
#line 3682 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1310:
/* Line 1787 of yacc.c  */
#line 3683 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1311:
/* Line 1787 of yacc.c  */
#line 3685 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1312:
/* Line 1787 of yacc.c  */
#line 3687 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1315:
/* Line 1787 of yacc.c  */
#line 3693 "grammar.y"
    { ast = MkList(); }
    break;

  case 1316:
/* Line 1787 of yacc.c  */
#line 3697 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1317:
/* Line 1787 of yacc.c  */
#line 3698 "grammar.y"
    { Symbol symbol = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1318:
/* Line 1787 of yacc.c  */
#line 3699 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); }
    break;

  case 1319:
/* Line 1787 of yacc.c  */
#line 3703 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); }
    break;

  case 1320:
/* Line 1787 of yacc.c  */
#line 3707 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); }
    break;

  case 1321:
/* Line 1787 of yacc.c  */
#line 3708 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); }
    break;

  case 1322:
/* Line 1787 of yacc.c  */
#line 3709 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); }
    break;

  case 1323:
/* Line 1787 of yacc.c  */
#line 3713 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); }
    break;

  case 1324:
/* Line 1787 of yacc.c  */
#line 3714 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); }
    break;

  case 1325:
/* Line 1787 of yacc.c  */
#line 3718 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); }
    break;

  case 1326:
/* Line 1787 of yacc.c  */
#line 3719 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); }
    break;

  case 1327:
/* Line 1787 of yacc.c  */
#line 3723 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1328:
/* Line 1787 of yacc.c  */
#line 3724 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1329:
/* Line 1787 of yacc.c  */
#line 3725 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1330:
/* Line 1787 of yacc.c  */
#line 3726 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1331:
/* Line 1787 of yacc.c  */
#line 3730 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); }
    break;

  case 1332:
/* Line 1787 of yacc.c  */
#line 3734 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1333:
/* Line 1787 of yacc.c  */
#line 3738 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1334:
/* Line 1787 of yacc.c  */
#line 3742 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); }
    break;


/* Line 1787 of yacc.c  */
#line 21732 "grammar.ec"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


/* Line 2050 of yacc.c  */
#line 3745 "grammar.y"

