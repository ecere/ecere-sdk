/* A Bison parser, made by GNU Bison 2.7.91-dirty.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7.91-dirty"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* Copy the first part of user declarations.  */
#line 1 "grammar.y" /* yacc.c:356  */

import "ecdefs"

#define YYSIZE_T size_t
#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:


#line 102 "grammar.ec" /* yacc.c:356  */

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar.h".  */
#ifndef YY_YY_GRAMMAR_H_INCLUDED
# define YY_YY_GRAMMAR_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENTIFIER = 258,
    CONSTANT = 259,
    STRING_LITERAL = 260,
    SIZEOF = 261,
    PTR_OP = 262,
    INC_OP = 263,
    DEC_OP = 264,
    LEFT_OP = 265,
    RIGHT_OP = 266,
    LE_OP = 267,
    GE_OP = 268,
    EQ_OP = 269,
    NE_OP = 270,
    AND_OP = 271,
    OR_OP = 272,
    MUL_ASSIGN = 273,
    DIV_ASSIGN = 274,
    MOD_ASSIGN = 275,
    ADD_ASSIGN = 276,
    SUB_ASSIGN = 277,
    LEFT_ASSIGN = 278,
    RIGHT_ASSIGN = 279,
    AND_ASSIGN = 280,
    XOR_ASSIGN = 281,
    OR_ASSIGN = 282,
    TYPE_NAME = 283,
    TYPEDEF = 284,
    EXTERN = 285,
    STATIC = 286,
    AUTO = 287,
    REGISTER = 288,
    CHAR = 289,
    SHORT = 290,
    INT = 291,
    UINT = 292,
    INT64 = 293,
    INT128 = 294,
    FLOAT128 = 295,
    LONG = 296,
    SIGNED = 297,
    UNSIGNED = 298,
    FLOAT = 299,
    DOUBLE = 300,
    CONST = 301,
    VOLATILE = 302,
    VOID = 303,
    VALIST = 304,
    STRUCT = 305,
    UNION = 306,
    ENUM = 307,
    ELLIPSIS = 308,
    CASE = 309,
    DEFAULT = 310,
    IF = 311,
    SWITCH = 312,
    WHILE = 313,
    DO = 314,
    FOR = 315,
    GOTO = 316,
    CONTINUE = 317,
    BREAK = 318,
    RETURN = 319,
    IFX = 320,
    ELSE = 321,
    CLASS = 322,
    THISCLASS = 323,
    PROPERTY = 324,
    SETPROP = 325,
    GETPROP = 326,
    NEWOP = 327,
    RENEW = 328,
    DELETE = 329,
    EXT_DECL = 330,
    EXT_STORAGE = 331,
    IMPORT = 332,
    DEFINE = 333,
    VIRTUAL = 334,
    ATTRIB = 335,
    PUBLIC = 336,
    PRIVATE = 337,
    TYPED_OBJECT = 338,
    ANY_OBJECT = 339,
    _INCREF = 340,
    EXTENSION = 341,
    ASM = 342,
    TYPEOF = 343,
    WATCH = 344,
    STOPWATCHING = 345,
    FIREWATCHERS = 346,
    WATCHABLE = 347,
    CLASS_DESIGNER = 348,
    CLASS_NO_EXPANSION = 349,
    CLASS_FIXED = 350,
    ISPROPSET = 351,
    CLASS_DEFAULT_PROPERTY = 352,
    PROPERTY_CATEGORY = 353,
    CLASS_DATA = 354,
    CLASS_PROPERTY = 355,
    SUBCLASS = 356,
    NAMESPACE = 357,
    NEW0OP = 358,
    RENEW0 = 359,
    VAARG = 360,
    DBTABLE = 361,
    DBFIELD = 362,
    DBINDEX = 363,
    DATABASE_OPEN = 364,
    ALIGNOF = 365,
    ATTRIB_DEP = 366,
    __ATTRIB = 367,
    BOOL = 368,
    _BOOL = 369,
    _COMPLEX = 370,
    _IMAGINARY = 371,
    RESTRICT = 372,
    THREAD = 373,
    WIDE_STRING_LITERAL = 374,
    BUILTIN_OFFSETOF = 375,
    PRAGMA = 376,
    STATIC_ASSERT = 377
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 39 "grammar.y" /* yacc.c:372  */

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;

#line 308 "grammar.ec" /* yacc.c:372  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


extern YYSTYPE yylval;
extern YYLTYPE yylloc;
int yyparse (void);

#endif /* !YY_YY_GRAMMAR_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 337 "grammar.ec" /* yacc.c:375  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  311
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   43347

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  148
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  259
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1331
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2225

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   377

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   142,     2,     2,   136,   144,   139,     2,
     126,   127,   123,   140,   131,   141,   134,   143,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   135,   129,
     124,   130,   125,   147,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   137,     2,   138,   145,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   133,   146,   132,   128,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   288,   288,   307,   346,   347,   427,   431,   434,   435,
     436,   475,   477,   482,   487,   492,   494,   499,   501,   506,
     508,   513,   515,   517,   519,   521,   525,   529,   542,   544,
     546,   548,   550,   556,   558,   563,   568,   573,   575,   577,
     582,   583,   587,   588,   599,   603,   604,   606,   611,   612,
     614,   617,   629,   640,   659,   661,   666,   667,   668,   669,
     670,   671,   672,   673,   686,   690,   691,   692,   693,   697,
     698,   699,   700,   701,   702,   703,   707,   709,   714,   716,
     718,   720,   722,   752,   754,   759,   761,   763,   765,   767,
     796,   798,   800,   805,   807,   812,   814,   818,   820,   822,
     824,   829,   832,   835,   838,   903,   905,   910,   912,   914,
     916,   918,   949,   953,   954,   955,   959,   960,   961,   965,
     966,   967,   968,   972,   975,   978,   981,   984,   989,   990,
     992,   994,   996,   998,  1003,  1007,  1010,  1013,  1016,  1019,
    1024,  1025,  1027,  1032,  1036,  1038,  1043,  1045,  1050,  1052,
    1057,  1062,  1064,  1069,  1071,  1073,  1075,  1080,  1082,  1084,
    1086,  1091,  1092,  1093,  1094,  1095,  1096,  1097,  1098,  1099,
    1100,  1101,  1103,  1104,  1106,  1110,  1113,  1114,  1115,  1116,
    1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,  1125,  1126,
    1128,  1129,  1133,  1134,  1135,  1139,  1143,  1144,  1145,  1149,
    1150,  1151,  1152,  1153,  1157,  1158,  1170,  1171,  1175,  1176,
    1177,  1178,  1179,  1180,  1181,  1182,  1186,  1190,  1191,  1195,
    1203,  1204,  1208,  1209,  1210,  1214,  1215,  1219,  1220,  1221,
    1222,  1223,  1224,  1264,  1265,  1269,  1277,  1278,  1286,  1287,
    1289,  1290,  1299,  1300,  1304,  1311,  1318,  1324,  1331,  1337,
    1346,  1353,  1359,  1365,  1371,  1377,  1383,  1394,  1399,  1400,
    1405,  1406,  1407,  1411,  1415,  1416,  1417,  1418,  1419,  1420,
    1421,  1434,  1435,  1436,  1437,  1438,  1439,  1440,  1441,  1442,
    1443,  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,  1452,
    1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,  1461,  1462,
    1464,  1465,  1473,  1477,  1481,  1482,  1486,  1488,  1489,  1490,
    1491,  1492,  1493,  1494,  1495,  1496,  1498,  1499,  1500,  1501,
    1502,  1503,  1504,  1505,  1532,  1533,  1534,  1535,  1539,  1540,
    1541,  1542,  1543,  1547,  1548,  1549,  1550,  1552,  1553,  1554,
    1555,  1558,  1559,  1561,  1565,  1566,  1575,  1576,  1577,  1578,
    1579,  1580,  1581,  1582,  1586,  1587,  1588,  1592,  1593,  1594,
    1595,  1596,  1597,  1598,  1602,  1603,  1604,  1605,  1606,  1610,
    1611,  1612,  1613,  1614,  1618,  1626,  1627,  1628,  1629,  1630,
    1631,  1632,  1633,  1634,  1638,  1639,  1640,  1641,  1642,  1644,
    1645,  1646,  1647,  1651,  1652,  1653,  1655,  1656,  1660,  1661,
    1662,  1664,  1665,  1669,  1670,  1671,  1673,  1674,  1678,  1679,
    1680,  1684,  1685,  1686,  1690,  1691,  1692,  1693,  1694,  1696,
    1697,  1698,  1699,  1701,  1702,  1703,  1704,  1706,  1707,  1708,
    1709,  1713,  1714,  1715,  1716,  1717,  1719,  1720,  1721,  1722,
    1726,  1727,  1728,  1729,  1730,  1731,  1732,  1733,  1734,  1735,
    1736,  1740,  1741,  1742,  1743,  1747,  1748,  1749,  1753,  1754,
    1755,  1756,  1758,  1759,  1761,  1762,  1767,  1769,  1774,  1802,
    1803,  1804,  1805,  1807,  1808,  1809,  1810,  1812,  1813,  1817,
    1818,  1827,  1828,  1832,  1833,  1834,  1835,  1836,  1837,  1838,
    1842,  1843,  1847,  1851,  1855,  1862,  1863,  1864,  1865,  1866,
    1870,  1871,  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1924,
    1925,  1926,  1927,  1928,  1935,  1936,  1937,  1938,  1942,  1943,
    1944,  1946,  1947,  1951,  1952,  1953,  1955,  1956,  1960,  1961,
    1962,  1964,  1965,  1969,  1970,  1971,  1975,  1976,  1977,  1981,
    1982,  1983,  1984,  1985,  1986,  1987,  1988,  1989,  1991,  1992,
    1993,  1994,  1995,  1996,  1997,  1998,  2000,  2001,  2002,  2003,
    2005,  2006,  2007,  2008,  2010,  2018,  2022,  2027,  2034,  2035,
    2039,  2044,  2045,  2049,  2050,  2051,  2052,  2058,  2059,  2060,
    2064,  2065,  2066,  2067,  2071,  2073,  2077,  2078,  2079,  2080,
    2081,  2082,  2083,  2087,  2088,  2089,  2090,  2091,  2092,  2093,
    2097,  2098,  2099,  2100,  2101,  2102,  2106,  2107,  2108,  2112,
    2116,  2117,  2121,  2122,  2123,  2127,  2128,  2130,  2131,  2132,
    2133,  2134,  2136,  2137,  2138,  2139,  2140,  2142,  2143,  2147,
    2148,  2152,  2153,  2154,  2158,  2159,  2160,  2161,  2162,  2163,
    2164,  2165,  2166,  2168,  2169,  2171,  2172,  2173,  2174,  2175,
    2177,  2178,  2179,  2180,  2184,  2185,  2189,  2190,  2194,  2198,
    2199,  2200,  2205,  2206,  2210,  2211,  2212,  2213,  2214,  2215,
    2216,  2217,  2218,  2219,  2220,  2221,  2222,  2223,  2224,  2225,
    2226,  2227,  2228,  2229,  2230,  2231,  2232,  2233,  2234,  2235,
    2236,  2237,  2241,  2242,  2243,  2244,  2245,  2246,  2247,  2248,
    2249,  2250,  2251,  2252,  2253,  2254,  2255,  2256,  2257,  2258,
    2259,  2260,  2261,  2262,  2263,  2264,  2265,  2266,  2272,  2274,
    2276,  2278,  2280,  2282,  2284,  2286,  2288,  2290,  2295,  2296,
    2300,  2306,  2312,  2319,  2329,  2330,  2331,  2332,  2336,  2337,
    2338,  2340,  2341,  2342,  2344,  2345,  2346,  2350,  2354,  2362,
    2371,  2380,  2381,  2383,  2384,  2388,  2395,  2402,  2405,  2421,
    2435,  2438,  2440,  2442,  2447,  2448,  2452,  2453,  2454,  2455,
    2456,  2457,  2458,  2459,  2463,  2464,  2465,  2466,  2467,  2468,
    2469,  2470,  2471,  2472,  2476,  2477,  2478,  2479,  2480,  2481,
    2482,  2483,  2484,  2485,  2489,  2490,  2491,  2492,  2493,  2494,
    2495,  2496,  2497,  2498,  2499,  2500,  2504,  2505,  2506,  2507,
    2508,  2509,  2510,  2511,  2512,  2513,  2517,  2518,  2522,  2523,
    2524,  2525,  2526,  2527,  2528,  2529,  2530,  2532,  2534,  2542,
    2552,  2553,  2557,  2558,  2559,  2560,  2561,  2562,  2563,  2564,
    2565,  2573,  2582,  2583,  2584,  2585,  2586,  2587,  2588,  2589,
    2590,  2591,  2592,  2593,  2594,  2602,  2611,  2612,  2613,  2614,
    2615,  2616,  2617,  2618,  2619,  2620,  2621,  2622,  2623,  2631,
    2640,  2641,  2645,  2646,  2647,  2648,  2649,  2653,  2654,  2661,
    2663,  2672,  2681,  2690,  2699,  2700,  2701,  2702,  2706,  2707,
    2708,  2709,  2710,  2711,  2712,  2713,  2714,  2718,  2722,  2723,
    2724,  2725,  2726,  2731,  2740,  2749,  2758,  2772,  2773,  2778,
    2782,  2783,  2784,  2785,  2786,  2791,  2800,  2809,  2818,  2832,
    2833,  2882,  2883,  2885,  2896,  2907,  2908,  2909,  2921,  2922,
    2923,  2928,  2929,  2930,  2931,  2932,  2936,  2937,  2941,  2942,
    2943,  2947,  2948,  2952,  2953,  2957,  2958,  2959,  2960,  2961,
    2962,  2963,  2964,  2965,  2966,  2967,  2968,  2969,  2970,  2971,
    2972,  2976,  2977,  2978,  2979,  2980,  2981,  2982,  2983,  2987,
    2988,  2989,  2990,  2994,  2995,  2996,  2997,  2998,  3002,  3003,
    3004,  3005,  3006,  3010,  3011,  3013,  3015,  3017,  3022,  3023,
    3025,  3027,  3032,  3033,  3034,  3035,  3039,  3040,  3041,  3042,
    3046,  3047,  3048,  3049,  3053,  3054,  3055,  3056,  3060,  3061,
    3062,  3063,  3067,  3068,  3069,  3086,  3087,  3104,  3105,  3106,
    3107,  3120,  3137,  3138,  3143,  3144,  3148,  3149,  3150,  3151,
    3154,  3155,  3159,  3160,  3161,  3165,  3169,  3173,  3174,  3175,
    3176,  3177,  3178,  3179,  3188,  3197,  3198,  3199,  3200,  3204,
    3205,  3209,  3210,  3215,  3216,  3217,  3218,  3219,  3220,  3239,
    3240,  3244,  3245,  3246,  3247,  3248,  3249,  3251,  3252,  3253,
    3254,  3258,  3259,  3260,  3261,  3262,  3264,  3265,  3266,  3270,
    3271,  3272,  3273,  3274,  3275,  3279,  3280,  3281,  3286,  3287,
    3288,  3289,  3290,  3291,  3292,  3293,  3294,  3295,  3296,  3297,
    3298,  3302,  3303,  3304,  3305,  3306,  3307,  3308,  3312,  3313,
    3314,  3318,  3319,  3320,  3324,  3325,  3326,  3327,  3329,  3330,
    3331,  3333,  3334,  3335,  3336,  3338,  3339,  3340,  3344,  3345,
    3346,  3347,  3348,  3350,  3351,  3352,  3353,  3354,  3358,  3359,
    3360,  3361,  3362,  3363,  3364,  3366,  3367,  3368,  3369,  3370,
    3374,  3375,  3376,  3380,  3381,  3385,  3386,  3387,  3388,  3389,
    3390,  3394,  3395,  3396,  3398,  3399,  3400,  3404,  3408,  3409,
    3411,  3412,  3413,  3417,  3418,  3419,  3420,  3424,  3425,  3429,
    3430,  3431,  3435,  3436,  3437,  3438,  3439,  3440,  3441,  3445,
    3446,  3447,  3448,  3452,  3453,  3454,  3455,  3459,  3463,  3467,
    3469,  3472,  3478,  3479,  3480,  3484,  3485,  3486,  3487,  3488,
    3489,  3493,  3494,  3498,  3499,  3500,  3502,  3503,  3505,  3506,
    3507,  3508,  3509,  3511,  3512,  3516,  3517,  3518,  3519,  3523,
    3524,  3525,  3526,  3528,  3529,  3530,  3531,  3532,  3533,  3534,
    3537,  3541,  3542,  3546,  3547,  3551,  3552,  3553,  3554,  3555,
    3556,  3557,  3558,  3562,  3563,  3564,  3565,  3571,  3572,  3574,
    3575,  3578,  3579,  3582,  3583,  3584,  3585,  3586,  3587,  3591,
    3592,  3604,  3605,  3608,  3611,  3613,  3614,  3615,  3625,  3627,
    3628,  3630,  3631,  3632,  3633,  3643,  3644,  3645,  3646,  3647,
    3648,  3649,  3650,  3651,  3655,  3656,  3665,  3667,  3668,  3670,
    3672,  3676,  3677,  3678,  3679,  3680,  3684,  3685,  3686,  3688,
    3693,  3694,  3695,  3699,  3700,  3701,  3705,  3709,  3710,  3711,
    3715,  3716,  3720,  3721,  3725,  3726,  3727,  3728,  3732,  3736,
    3740,  3744
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "INT128", "FLOAT128", "LONG", "SIGNED",
  "UNSIGNED", "FLOAT", "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST",
  "STRUCT", "UNION", "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH",
  "WHILE", "DO", "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX",
  "ELSE", "CLASS", "THISCLASS", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "THREAD",
  "WIDE_STRING_LITERAL", "BUILTIN_OFFSETOF", "PRAGMA", "STATIC_ASSERT",
  "'*'", "'<'", "'>'", "'('", "')'", "'~'", "';'", "'='", "','", "'}'",
  "'{'", "'.'", "':'", "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'",
  "'/'", "'%'", "'^'", "'|'", "'?'", "$accept", "guess_type", "type",
  "base_strict_type", "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "multi_attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_noexp",
  "initializer_error", "initializer_condition",
  "initializer_condition_error", "initializer_list", "init_declarator",
  "init_declarator_error", "init_declarator_list",
  "init_declarator_list_error", "type_name", "guess_type_name",
  "parameter_declaration", "parameter_declaration_error", "parameter_list",
  "parameter_list_error", "parameter_type_list",
  "parameter_type_list_error", "statement", "statement_error", "asm_field",
  "asm_field_list", "asm_statement", "labeled_statement",
  "labeled_statement_error", "declaration_mode", "member_access",
  "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    42,    60,    62,    40,    41,   126,    59,
      61,    44,   125,   123,    46,    58,    36,    91,    93,    38,
      43,    45,    33,    47,    37,    94,   124,    63
};
# endif

#define YYPACT_NINF -1735

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-1735)))

#define YYTABLE_NINF -1312

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
   40011, -1735, -1735, -1735, -1735,    58, -1735, -1735, -1735, -1735,
   -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735,
   -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735,
   -1735, -1735,   884,    82, -1735, -1735, -1735, -1735, -1735, -1735,
      -2,     7,   192,   842,   331, -1735, -1735, -1735, -1735, -1735,
   -1735, -1735, -1735, -1735,   232,  2365,  2610, -1735, -1735, -1735,
     257, -1735,   290,   842,   392, -1735,   949,   336,  1137, -1735,
     196, -1735,   606, -1735,   363, -1735, -1735, -1735, -1735, -1735,
    1034, -1735,  1067,   278, -1735,   449,  1191, 39603,  3076,    29,
   40315, -1735,   744,   312, -1735,   691,  1644, 43014, 38202, -1735,
   -1735, -1735, -1735, -1735, -1735, 40115, 39183,   607, -1735,    82,
   -1735, -1735,   331,   331,   616,   594,   331, 31071,   842, -1735,
   -1735,   413, 31071, -1735,  2365,   944, -1735, -1735,   582, -1735,
     485,  1036, -1735, -1735, 40416, -1735, -1735,  2959,  2655,  1708,
    1860,  1987, 25390, -1735,   630,   -52,   834, 32202, 42631, -1735,
   32332, -1735, -1735, -1735,   842, -1735,  1232,  1211,  1259,   138,
   42631, -1735, 42358, 32462, 42631, 32592, -1735, 32722, -1735, -1735,
    1290, -1735, -1735,   420,   659,   683,   696, -1735, -1735,  1020,
   -1735,   336,   512, -1735, -1735, -1735, -1735, -1735,  1287,  2084,
     744,  2655,  1550,  1987, 43014, 43014,   156, -1735,  1303,   707,
     738,   659,   683,   696,   507,   744,  1349, -1735, 29309,   761,
   -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735,
     628, -1735,   215, -1735,   801, -1735, -1735,   826, -1735,   854,
    2313,  8982,   272,   435, -1735, -1735,   568,   603,   847,   874,
   -1735, -1735,   442,   994, -1735, -1735,   957, -1735, -1735, -1735,
   -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735,
   -1735, -1735, -1735,  1002,  1007, -1735, -1735, -1735, -1735,  1010,
   -1735, -1735,   143,    68, -1735, -1735, -1735, -1735, -1735, -1735,
   -1735, 39807, -1735, 18971, 12661, 43225, 19114, -1735,  1032,  1121,
     936, -1735, -1735,   336, 39705, -1735, -1735, -1735, -1735, -1735,
   -1735, -1735,   363,   449, 40921, 43014, 41218, -1735, -1735, -1735,
   -1735, -1735,  1086,   616,   616, -1735, 31071,   308, -1735, -1735,
   31131, 31217, 31217,  1102, 42813, 31071, -1735, -1735,  1124,  1136,
   42813, 31071,  1146,  1151,  1154,  1163,  1170, 31277, -1735,  1173,
   -1735, 25642, -1735,   331, 26627, -1735, -1735, -1735, -1735,  1186,
   -1735,    80,  1194, -1735, -1735,    82, -1735, -1735, 13770, -1735,
    2247, 29369, -1735,   733,  1167,  1582, 31071,   775,  1362,  1214,
    1242,  1210,  1386,    67,  2247,  1310,   808, -1735,  2247, -1735,
     930,  1479,  1613,  1017,  1626,  1306,  1326,  1309,  1494,    85,
    2247,   616, -1735, -1735, -1735, -1735,  1410,   306, 42449,  1380,
    1423,  2247, 13928, 26713,  2247,  2247, -1735, 26799, -1735, -1735,
   29455, -1735, 29515, -1735,   629,   704,  1432,  1437,   876,   985,
    2655,  2322,  2468,   485, -1735, -1735,   968, -1735,   944, -1735,
     944,   944,  1124,  1186, -1735, -1735, -1735, -1735,   875,  1052,
   -1735,  1582, -1735,  1613, 37506, -1735, 25516, 42358, -1735,   928,
   42085, 41317, -1735, -1735,  1443, -1735,   842, -1735, -1735,    82,
   41515, 41119, 12206, 42722, -1735, -1735,  1111,  1446,  1446,  1021,
   -1735,  1458, -1735, -1735, -1735,   106,   671,   118, -1735, -1735,
   31544,  1465, -1735,  1370, -1735, -1735,   282, -1735, -1735, -1735,
    1472, 31682, 31812,   463,   197,   808, 38434, 40517, -1735,   744,
    1644, -1735, -1735, 38318, -1735, -1735,  1484, -1735,   842, -1735,
   -1735, -1735,  2272, 42813, -1735,   928, -1735, 31942, 32072,  1489,
    1504, -1735,  1076, -1735,  1515, -1735, -1735,  4294,  1471,   951,
   -1735, -1735, -1735, -1735,   939,   838, 37506,   922, -1735, 32852,
   32982, -1735,   922, -1735, 33112, 33242,   922, -1735, 33372, 33502,
   -1735, -1735,  2610,  2610,  2610,  2610,  2610, 23544,   329,  1287,
    2084,   968, -1735, 29601, 12661, -1735,  1032, 12661, -1735,  1032,
   -1735, -1735,  2610,  2610,   329, -1735, -1735,  1512,   169, -1735,
   -1735,  1519,  1522, 42176,  1480,  1530,  1541, -1735, 33632, -1735,
   33762,   621, -1735, 13542, 29687,  2610, -1735,  2169,   628, -1735,
   -1735, -1735, -1735, -1735,   485,  1575,   744,   534,   189,   636,
    1964,  1547, -1735, 41812,  1586, -1735, 41903,  1598, 41994,  1606,
   42267, -1735, -1735, -1735,  1209, -1735, 31071,   842, 31071, -1735,
   -1735,  1608, -1735, -1735,   420,   659,   683,   696, -1735,  1620,
   -1735, -1735, -1735, -1735, -1735,   744,  1400,   707, -1735, -1735,
    1629, -1735, 19257, -1735,  1032, -1735,   360, 29747,  1642,  1656,
    1675,   139, 19400,  1687,    82,  1683,  1689, 19543,  1124,  1688,
    1695,  1698,    82, -1735, -1735,  1186,  1697,  1701,  1703,  1496,
   17095, 17684, 26885, 17827, 39909, -1735, -1735, -1735, -1735, -1735,
   19686, 19829, 19972, 20115, -1735, -1735, -1735,  1032, 20258, -1735,
   -1735, -1735, 20401, -1735, -1735,   331,   331,   616,   589,   842,
    1501,  1694, -1735,   485,    29, -1735,   744,  2655, 43014, 43014,
   12661, -1735, -1735, 41020, 31071,   178,  1704,   242, -1735, 25784,
   -1735, -1735, 29833, -1735, -1735, -1735, -1735, 42813,  1712, -1735,
   -1735, -1735, -1735, -1735, 37738, 42813, 25926,    82, 37854, 42813,
   31071,   331,   331,   331, 31071, 25642, -1735, -1735,  5198, -1735,
   14129, 14283, -1735, -1735, -1735, -1735,  8526,  1707,   339, 23686,
   -1735, -1735,   131, -1735,  1087, -1735, 23828,  1709, -1735, 23970,
   -1735, -1735,  1648, -1735, -1735,  5909,  1706, 31071, -1735, -1735,
   -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, 29369,
     160, -1735, -1735, -1735, -1735, 31071, 31071, 31071, 31071, 31071,
   31071, 31071,  1582,  1613, 31071, 31071, -1735, 31071, 29369, 29369,
   29369, 29369, 29369, 31071, 31071, 14431, 29369, -1735,  1710, -1735,
   -1735, 12362,  1751, 31071, 29369, 31071, 31071, 31071, 31071, 31071,
   31071, 31071, 31071, 31071, 31071, 31071, 29369, 29369, 29369, 29369,
   29369, 31071, 31071, 14579, 29369, -1735, -1735,   564,   628, 42722,
   -1735, -1735, 39285, 42449, 42449, 29369, -1735, -1735, 31071, 14727,
   14875, 29369, -1735, 31071, 15023, -1735,  1702,  1716,  1717, -1735,
    1723,  1724,  1725, -1735, -1735, -1735, -1735,   485, -1735, -1735,
   -1735, -1735,  1711, -1735, -1735, 25390, 25390, 37390,   744,   595,
   -1735,   381,  1120,  1123, 37506,  1144,  1714,  1720, -1735, -1735,
   -1735,  2272,  6642, 41416, -1735, -1735,    82, -1735, -1735, -1735,
   38550,  1733,    82, 37622,  1686, 26052,  1473, 41614, -1735,  1738,
   -1735,  1032, -1735,  1032, -1735, -1735, -1735,  1032, -1735,  1740,
   -1735,   982, -1735, -1735,  1801,  1801,  1446,  1446, -1735,  1446,
     163, -1735,  1446,  1446, -1735, -1735,   144, -1735,  1472,   144,
   -1735,  1472,  1019, 29919,  2427, 31071,   660, -1735,  1739,   485,
   40618, -1735,   744,  2655, -1735, -1735,   995,   761,  8982, 31406,
     649,   442, -1735,   957,  2610, -1735, -1735, -1735, -1735,   175,
   -1735,   188, -1735,   463, 38434, 25390, -1735, -1735,  1755, -1735,
   -1735, -1735, 42358, 42358, 31071, -1735,  1220,    82, -1735, 33892,
     142, -1735,   526,   960, -1735, 42358,    82,   852,    82,  1293,
   -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735,  1446, -1735,
   -1735, -1735, -1735, -1735, 38658,  1577, -1735, 24112, 43120, 24254,
   -1735, -1735, 17242, -1735, -1735, 41713, -1735, -1735,   485,  1287,
   -1735,  2084, -1735,   485, -1735, 29601, -1735, -1735, -1735, -1735,
   -1735,  1032, -1735,  1032, -1735, -1735, -1735, -1735, -1735, -1735,
   -1735, -1735, -1735, -1735, -1735,  1515,   168,   180,  1748, -1735,
   34022, 34152,  1750, -1735, 34282, 34412, 34542, -1735,   334,   260,
     275,  1183,  1246,  1756,  1757,  1762, -1735,  1753,  1761,  1765,
     744,   329,  1987,   189, 40719, 30005,   534, -1735, -1735, 42540,
   -1735, -1735,   628, -1735, -1735, 42540, -1735, -1735,   628, -1735,
   -1735, 42540, -1735, -1735,   628, -1735, -1735, 42540, -1735,   628,
   -1735, -1735, -1735, -1735, -1735, -1735, -1735,  1767,  1786, -1735,
    1336,  1788,  1791,   343, 26945, -1735, 24396, -1735, -1735, 20544,
    1789,  1790, 20687, 31071, 31071, -1735, 30065, 30151,  1795,  1793,
    1800,  9458,  1805,    82, 27031,  2540,  1624, -1735,  1863, -1735,
   -1735, 27117,  1803, -1735, -1735, -1735,  1804,  1810, 27203, 17970,
     331,  1808, 31071, 31071,    82, -1735, -1735, -1735, -1735, 23260,
    1046,    84, -1735, 31071,  1629, 20830, 20973, 21116, 21259, -1735,
   -1735, -1735, 21402, -1735, -1735, -1735, 21545, -1735, -1735,   616,
     616,  1818,  1819, 37142, 37271,   329, -1735,   968, 12661, -1735,
   12661, -1735, -1735,  1822, 29369, -1735, 29369,   782, -1735,   463,
   -1735, -1735, -1735, -1735,  8526,  1825,  1828, 42904, 25390, 40214,
   31071,  1832, -1735, -1735, -1735, -1735, -1735,   744,  1831,  1833,
    1821,  1836, -1735, -1735, -1735, -1735, -1735, 37970, 27263,  1835,
    1837,  1839, 31071,  1826, 38086,  1838,   646,   103,   191,  1842,
    1840,  1843, -1735,    82, -1735, -1735, -1735, -1735, -1735, 30211,
     331,   218,  6164, 24538,  1844, -1735, 29369, -1735,   227, 38763,
   24680, -1735,   236, 38868, 24822, -1735, -1735, -1735, -1735,  1203,
    1841, -1735, -1735, -1735, 27349,  5724, -1735, -1735,  1844, -1735,
   -1735, -1735, -1735, -1735, -1735,   733,   930,   733,   930,  1167,
    1479,  1167,  1479,  1582,  1613,  1582,  1613,  1582,  1613, -1735,
   -1735,   775,  1017, -1735, -1735,   775,  1017, -1735, -1735,  1362,
    1626, -1735, -1735,  1214,  1306, -1735, -1735,  1242,  1326,  1210,
    1309,  1386,  1494, -1735,    78, -1735, 27409,  1845,  7085,  1851,
   -1735, -1735, -1735, -1735, -1735,  1298, -1735, -1735, -1735, 27495,
    8700, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735,   733,
     930,   733,   930,  1167,  1479,  1167,  1479,  1582,  1613,  1582,
    1613,  1582,  1613,  1582,  1613, -1735, -1735,   775,  1017, -1735,
   -1735,   775,  1017, -1735, -1735,  1362,  1626, -1735, -1735,  1214,
    1306, -1735, -1735,  1242,  1326,  1210,  1309,  1386,  1494, -1735,
   27555,  1857,  9770,  1859, -1735, -1735,    82,    82, -1735, -1735,
     402,  1108, -1735, -1735, -1735, 39391, 39497, -1735, -1735, -1735,
   -1735,   715, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735,
   -1735, -1735, -1735, -1735, -1735, -1735,  1375,  2749,   595, -1735,
   25390,    82, -1735, -1735, 25390, -1735,   795, -1735, -1735, -1735,
     357,   744,  2655, -1735, -1735,   344,  1739,  1711,   744,  2655,
   -1735,  1869, -1735,  1041,   393,   631,  2959,  1871, -1735, -1735,
   -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735,
    3133, -1735, -1735, -1735, -1735, -1735, 24964,  1486,   761,  8982,
   23118,   703,   329,   485, -1735,   968, 31071, -1735,   915, -1735,
   -1735, -1735,  1873,  1740,  1709,  1739,  1166, 25390,  1179,  1212,
   -1735, -1735, 31071, -1735, 34672, 34802,  1872, -1735,  4324, 42722,
   42722, 42722, 42722, -1735, -1735, -1735, 31071,  1875, 30297, -1735,
    1032, -1735, -1735, 30383, -1735, 30469, -1735, -1735, -1735,  1636,
    1577, -1735, -1735,  1446, -1735, -1735, -1735, -1735, -1735,  1636,
    1577, -1735, 30555, 10776, -1735, -1735, -1735, -1735, -1735, 21688,
   -1735, -1735,   148, -1735, -1735,   179,  1874, -1735, 34932, 35062,
     744,  1246,  1876, -1735, -1735, -1735, -1735, -1735, -1735,   329,
     534, -1735,  1880,  1881, -1735,  1877,  1878,  1885, -1735, -1735,
    8982, -1735, -1735, -1735, -1735, -1735, 31071,  1883,  1295, -1735,
   -1735, -1735, -1735, -1735, 31071,   248, 38973, 25106, -1735, -1735,
   -1735, 21831, 23260, 23260, -1735, -1735, -1735, 21974, 27641, 18113,
   27727, 27813, 13418, 27899, 18256, 23402,  1879,  1890, 23402, 31071,
   30641,  1912, 27985,  1810,  9076,   331, 23402,  1886, 17389,  9458,
   -1735,  1641, 28071, 11525, 28131, -1735, -1735, -1735, -1735, -1735,
      88,   331,  1899,  1319, -1735, -1735, -1735, -1735, 22117, -1735,
    1887,  1901,    82, 42358, -1735, -1735, -1735, -1735, 28217,  1893,
   12049,  1894, 28277,  1895, 12545,  1903,  1909,  1914, -1735, -1735,
   -1735, -1735, -1735, -1735, 15171, -1735, -1735,  1915,  1217, -1735,
    2877,  1918,  1919,  1920,  1910,  1911, 25390,  1833, 40820,  1831,
   31071, 25390, 31071,  1926, -1735, -1735, -1735, -1735, -1735,  1916,
   -1735, 30727, -1735, -1735,  1921,  1922, 31071, 31071,  1924,  5198,
   -1735,    82,    82, 31071, 15319,    82, 29601, -1735, -1735, -1735,
     616, -1735, -1735, -1735, -1735, -1735, -1735, -1735, 15467, -1735,
   -1735, -1735, -1735, 29369, 15615, 15763, 29369, 15911, 16059, -1735,
   -1735, -1735, 16207, 16355, 16503, 16651, -1735, -1735, -1735,   564,
    1929,   112, -1735, -1735, -1735,   744,   595,  2055,  1230, 25390,
   -1735, -1735,  1935,   329,   968,  1446,   329,  1711,  1940, -1735,
   -1735,  1938, -1735,   261, 39078, 25248, -1735,   744,   974, -1735,
     485, -1735, -1735,  1937,  1942, -1735, -1735, -1735,  1250, -1735,
   -1735, -1735, -1735, 35192,  1950, 35322, -1735,  1951, 37506, -1735,
    1952, -1735, 31071, 29601,  2783, -1735, -1735,  2783, -1735, -1735,
   -1735,  2783, -1735, -1735, 22260, 22403, -1735, -1735, -1735, 35452,
   -1735, 35582,   189,   534, -1735, -1735, -1735, -1735, -1735, -1735,
   -1735,  1987, 28363, -1735, -1735,   787, -1735, -1735, -1735, -1735,
   22546, -1735, -1735, -1735, 22689,  9458,  7879,  9458,  7879, 17536,
   -1735, 26141, 18399, -1735, -1735, 23402, 23402, 28449,  9458, 28535,
    9942,  1957, 13015, 28621,   117, 22832, -1735, 31071, -1735, 17536,
   -1735, 17389,  9458, 13252, 30813,    70,  1955,    70,   120,  1959,
   -1735,    82, 31071, 31071,    82, 29369, 29369, 29369, 29369, 29369,
   29369, 29369, 29369, 16799, 16947, -1735, -1735, -1735,   744,  1833,
    1967, -1735, -1735, -1735, -1735, -1735,  1272,  1831, -1735,  1974,
    1975,  1969,  1970,  1334,  1983,  1984, 25390, 31071, 25642, -1735,
   -1735, -1735,  1986,  1988,  1989,  1990, 31071,  1978,  1985,  1993,
    2004, -1735,  2005, 10532, -1735, -1735, -1735, -1735, -1735, -1735,
   -1735,   242, -1735, -1735, -1735,   242, -1735, -1735, -1735, -1735,
   -1735,   242, -1735, -1735, -1735,   242, -1735, -1735, -1735,   242,
   -1735, -1735, -1735,   242, -1735, -1735, -1735,   242, -1735, -1735,
   -1735,   242, -1735, -1735, -1735, -1735,  1397, -1735, -1735,  1711,
   29369, -1735, -1735, -1735, 31071, 31071, -1735, 35712, 35842, 35972,
   36102, 36232, 42722, -1735, 42722, -1735, 26283, 22975, -1735, -1735,
   -1735, 36362, 36492, 36622, 36752, -1735, -1735,  2047,  2068, -1735,
   -1735, -1735, -1735,  9458, 31071, 30899,  1955, 18542, 18685, 26369,
   -1735, 17536, 26141, 28707, 18828,    82, -1735,  1155,   328, -1735,
      98,    70,  2007,    70,   348,   372,  2010,  1366, -1735, -1735,
    1831, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735, -1735,
    1399,  2001,  2003,  2016, -1735, -1735, -1735, -1735,  2009,  2012,
   -1735, -1735, -1735, -1735, -1735, 28793, -1735, -1735,  2019, -1735,
   -1735, -1735, -1735, 36882, 37012, -1735, -1735, 28879, -1735, -1735,
    9458,  9458, 28965, 26455,  9458, 29051,  9942,  2022, -1735,  9458,
   31071, -1735, -1735, 26141, -1735, -1735,  2014,  2024,    70,    70,
   31071,    70,  2025,    70,  1440, -1735,   626,  1446,   469, -1735,
     410, -1735,  2028, -1735,    82, -1735, -1735, -1735, 30985, -1735,
   -1735, -1735, -1735, -1735, -1735, -1735,  2022,  9458, -1735, -1735,
   29137, -1735, -1735,   331, -1735, -1735,  1416,  2018,  1427, -1735,
    1476,  2029,    70,    70,  2033,    70, -1735, -1735, -1735, -1735,
     348,   450, 29601, -1735, -1735, -1735,  9458,   584,  2034, -1735,
    2038,  2040,    70, -1735,  1447,  1449, -1735,  1487,   428, -1735,
   26541, -1735, 31071, -1735, -1735, -1735,  1450,  2043,  2045,  2050,
      70, -1735, 29223, -1735,  2058,  2053, -1735, -1735, -1735,  1459,
   -1735, -1735, -1735,  2059, -1735
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1312,   257,     6,   593,   594,   595,   597,   598,   665,   666,
     667,   668,   669,   670,   671,   673,   676,   677,   674,   675,
     659,   660,   664,   672,   764,   765,   609,  1152,   235,   685,
     921,   922,     0,     0,   928,  1150,  1151,   686,   687,   678,
       0,     0,     0,     0,     0,   929,   930,   689,   688,   690,
     691,   599,   596,  1291,     0,   969,     0,  1278,   812,   681,
       8,     4,     0,     0,     0,  1272,     0,  1294,   888,   806,
       0,   680,     0,   654,   656,   814,   816,   661,   808,   810,
     747,   679,     0,     0,   655,   657,     0,     0,     0,     0,
       0,   992,   658,     0,   925,   926,     0,     0,     0,  1274,
    1299,  1271,  1296,  1306,  1301,     0,     0,     0,  1289,     0,
    1286,  1269,     0,     0,  1275,     0,     0,     0,     0,  1288,
    1287,     0,     0,   662,   970,   658,   971,   879,   878,   888,
     920,   877,   907,   983,     0,   919,   988,     0,     0,     0,
       0,     0,     0,  1164,     0,   237,   236,     0,     0,   245,
       0,   244,     2,     3,     0,     5,     0,   611,   610,     0,
       0,   631,     0,     0,     0,     0,   751,     0,   731,   730,
       0,  1167,   595,   668,   669,   670,   671,  1161,   813,     8,
    1273,  1295,   888,   807,   815,   817,   809,   811,   992,  1000,
     658,     0,     0,  1033,     0,     0,     0,  1045,     0,     0,
     879,     0,     0,     0,   878,     0,     0,   897,     0,     0,
     586,   587,   588,   590,   591,  1058,   592,   589,   902,   800,
     872,   794,     0,   804,     0,   796,   798,   747,   802,     0,
       0,  1057,     0,     0,  1061,  1071,     0,     0,     0,     0,
     924,   923,     0,     0,   944,   993,     0,   693,   694,   695,
     696,   697,   698,   699,   701,   704,   705,   702,   703,   692,
     700,   717,   706,     0,     0,   711,   710,   712,   713,     0,
    1197,   709,     0,     0,   784,   708,   790,   786,   788,   792,
     707,     0,  1173,     0,     0,     0,     0,  1262,  1268,   595,
       0,  1285,  1280,  1297,     0,  1281,  1300,  1279,  1298,  1290,
    1305,  1308,     0,     0,     0,     0,     0,  1303,  1304,  1307,
    1302,     1,     0,  1276,  1277,  1270,     0,     0,   459,   263,
       0,     0,     0,     0,     0,     0,   352,   353,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   273,     0,
     347,     0,   350,     0,     0,   346,   348,   349,   351,     0,
     265,     0,   264,   306,   272,   271,   258,   458,     0,   344,
     354,     0,   357,   364,   369,   375,     0,   384,   393,   398,
     403,   408,   411,   414,   431,     0,   480,   479,   481,   483,
     490,   495,   500,   509,   518,   523,   528,   533,   536,   539,
       0,   260,   296,   297,   298,   299,     0,     0,     0,     0,
       0,   354,     0,     0,   481,   568,   573,     0,   663,   972,
       0,   909,     0,   914,     0,     0,     0,     0,   924,   923,
       0,     0,     0,   920,   984,   989,     0,   889,   986,   891,
     991,   987,   678,     4,   229,   228,   227,   233,     0,   264,
     354,   219,   481,     0,   206,   249,     0,     0,   248,   255,
       0,     0,  1153,  1154,     0,   168,     0,   169,   170,     0,
       0,     0,     0,     0,   172,   246,     0,     0,     0,     0,
      29,    31,   163,   175,   188,     0,   187,     0,   116,   119,
       0,   195,   128,     0,   164,   140,     0,   167,   183,   196,
     199,     0,     0,   264,     0,     0,   176,     0,   996,   658,
       0,    12,    18,     0,   819,   818,   826,   820,     0,   822,
     824,   747,   831,   830,   250,   256,   247,     0,     0,   239,
     238,   644,   600,   606,   643,   647,   633,     0,     0,     0,
     222,   223,   224,   225,     0,   217,     0,   760,   753,     0,
       0,   750,   757,   752,     0,     0,   763,   754,     0,     0,
     733,   732,     0,     0,     0,     0,     0,     0,     0,   993,
    1001,     0,  1035,     0,     0,  1258,  1264,     0,  1260,  1266,
    1046,  1162,     0,     0,     0,  1163,   896,     0,   264,   584,
     585,     0,     0,     0,     0,   611,   610,   612,     0,   734,
       0,     0,   668,     0,     0,  1055,   801,     8,   888,   795,
     805,   797,   799,   803,   920,   877,   658,   974,   973,     0,
       0,     0,   901,     0,     0,   900,     0,     0,     0,  1087,
       0,   898,   899,   994,     0,   995,     0,     0,     0,  1171,
    1157,  1170,    76,  1168,   696,   697,   698,   699,  1155,   888,
     785,   791,   787,   789,   793,   658,     0,  1172,  1169,  1158,
       0,  1174,     0,  1261,  1267,  1175,     0,     0,     0,     0,
       0,     0,     0,     0,  1256,     0,     0,     0,   706,     0,
       0,     0,   157,  1091,  1092,   709,     0,     0,     0,   264,
       0,     0,     0,     0,  1089,  1179,  1182,  1097,  1088,  1101,
       0,     0,     0,     0,  1201,  1199,  1090,  1103,     0,  1104,
    1095,  1102,     0,  1105,  1198,     0,     0,  1282,   888,     0,
       0,     0,  1295,     0,   877,  1000,   658,     0,     0,     0,
       0,  1268,  1309,     0,     0,   414,     0,     0,   927,     0,
     337,   473,     0,   333,   469,   334,   470,     0,   866,   856,
     864,   858,   860,   862,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   341,   477,     0,   274,
       0,     0,   770,   766,   768,   772,  1049,     0,   261,     0,
     301,   302,     0,   325,     0,   324,     0,   461,    93,     0,
     270,   460,     0,   314,   315,     0,     0,     0,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   440,     0,
       0,   336,   472,   335,   471,     0,     0,     0,     0,     0,
       0,     0,   376,   501,     0,     0,   374,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   682,     0,   322,
     323,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   683,   684,     0,     0,     0,
    1324,  1325,     0,     0,     0,     0,   574,  1292,     0,     0,
       0,     0,   454,     0,     0,   883,     0,     0,     0,   887,
       0,     0,     0,   913,   912,   910,   911,   920,   984,   989,
     890,   892,  1011,    10,     9,     0,     0,     0,   658,   973,
     207,     0,     0,   264,   206,     0,     0,   838,   832,   834,
     836,     0,     0,     0,    16,    20,     0,   185,   184,   186,
       0,     0,     0,     0,   347,     0,   264,     0,    26,     0,
      21,    28,    24,     0,    25,    23,    22,    30,    32,   190,
      83,   191,   122,   162,     0,     0,     0,     0,   132,     0,
       0,   134,     0,     0,   143,   161,   200,   197,   202,   201,
     198,   203,   115,     0,     0,     0,   888,   728,   177,  1008,
       0,  1004,   658,     0,    11,    17,   718,   904,  1057,     0,
       0,     0,   997,     0,     0,   173,   165,   192,   181,     0,
     180,     0,   166,   888,   179,     0,   611,   610,   827,   821,
     823,   825,     0,     0,     0,   943,   603,   608,   646,     0,
       0,     7,   212,   208,   749,     0,     0,     0,     0,  1032,
    1039,  1040,  1041,  1042,  1043,    64,    53,    92,    39,    38,
      57,    69,    45,    48,     0,    74,    56,     0,     0,     0,
    1023,  1025,     0,  1022,  1024,     0,    41,    44,   920,   994,
     985,  1002,   990,  1011,  1003,     0,  1012,  1017,  1034,  1036,
    1257,  1263,  1259,  1265,  1038,  1047,  1044,  1048,   895,   893,
     894,  1084,  1066,  1075,   616,   615,     0,     0,   459,   735,
       0,     0,   459,   736,     0,     0,     0,   955,   888,     0,
       0,   658,   973,     0,     0,     0,   947,     0,     0,     0,
       0,     0,  1056,   976,     0,     0,   975,  1060,  1059,     0,
     871,  1083,   874,  1069,  1077,     0,   870,  1082,   873,  1067,
    1076,     0,  1086,  1080,   875,  1062,  1072,     0,  1081,   876,
    1064,  1073,   931,   932,   935,   934,   933,     0,   936,   938,
       0,     0,     0,     0,     0,    77,     0,  1156,  1176,     0,
       0,     0,     0,     0,     0,  1240,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   264,  1089,  1238,  1094,
    1096,     0,     0,  1246,  1247,  1248,     0,  1254,     0,     0,
       0,     0,     0,     0,   158,   144,  1100,  1099,  1098,     0,
       0,     0,  1093,     0,   459,     0,     0,     0,     0,  1180,
    1183,  1185,     0,  1181,  1184,  1186,     0,  1212,  1106,  1283,
    1284,   237,   236,     0,     0,     0,  1001,     0,     0,  1264,
       0,  1266,  1267,     0,     0,  1165,     0,     0,   778,   264,
     780,   774,   776,   782,  1051,     0,     0,     0,     0,     0,
       0,   867,   857,   865,   859,   861,   863,   658,   979,   978,
       0,   852,   842,   850,   844,   846,   848,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   259,     0,   771,   767,   769,   773,  1050,     0,
       0,   459,     0,     0,     0,   105,     0,   300,   459,     0,
       0,    94,   459,     0,     0,   462,   313,   309,   329,   464,
     465,   328,   466,   312,     0,     0,   436,   432,   303,   358,
     484,   359,   485,   360,   486,   365,   491,   366,   492,   370,
     496,   371,   497,   378,   503,   379,   504,   377,   502,   389,
     514,   385,   510,   390,   515,   386,   511,   396,   521,   394,
     519,   401,   526,   399,   524,   406,   531,   404,   529,   409,
     534,   412,   537,   564,     0,   580,     0,     0,     0,     0,
     438,   434,   463,   321,   318,     0,   467,   468,   320,     0,
       0,   437,   433,   361,   487,   362,   488,   363,   489,   367,
     493,   368,   494,   372,   498,   373,   499,   382,   507,   383,
     508,   380,   505,   381,   506,   391,   516,   387,   512,   392,
     517,   388,   513,   397,   522,   395,   520,   402,   527,   400,
     525,   407,   532,   405,   530,   410,   535,   413,   538,   565,
       0,     0,     0,     0,   439,   435,     0,     0,  1317,  1320,
       0,     0,  1315,  1326,  1327,     0,     0,   571,   569,   452,
     575,   260,   572,   570,   453,   576,   882,   880,   881,   886,
     884,   885,   234,   232,   231,   230,   264,   658,   976,   241,
       0,   207,   240,   127,     0,   125,   839,   833,   835,   837,
       0,   658,     0,    15,    19,     0,   182,  1008,   658,     0,
     139,     0,   137,   839,     0,   264,   658,     0,    27,    84,
     117,   120,   118,   121,   129,   130,   131,   133,   141,   142,
     114,   112,   113,    13,   720,   723,     0,     0,   916,  1057,
       0,     0,     0,  1009,  1005,     0,     0,   719,   888,   905,
     998,   999,   888,   193,   194,   178,     0,     0,     0,     0,
     601,   602,     0,   607,     0,     0,   636,   632,     0,     0,
       0,     0,     0,   226,   218,   216,     0,     0,     0,    36,
      37,    75,    54,     0,    55,     0,    63,    61,    72,    67,
      73,    60,    90,    39,    70,    62,    91,    59,    71,    68,
       0,    58,     0,   696,    33,    35,    34,  1026,  1027,     0,
     624,   614,     0,   619,   613,     0,   459,   737,     0,     0,
       0,   973,     0,   945,   956,   957,   950,   948,   949,     0,
     977,   958,     0,     0,   951,     0,     0,     0,  1070,  1078,
    1057,  1068,  1063,  1065,  1074,   942,     0,     0,     0,   939,
     714,   715,   716,  1159,     0,   459,     0,     0,  1131,  1141,
    1136,     0,     0,     0,  1132,  1143,  1137,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1237,  1225,     0,
    1202,   264,     0,     0,     0,  1245,  1251,  1252,  1249,  1250,
       0,     0,     0,     0,   145,  1128,  1138,  1133,     0,   159,
       0,     0,     0,     0,  1002,  1263,  1265,  1166,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   779,   781,
     775,   777,   783,  1052,     0,   293,   291,     0,     0,   963,
     658,     0,     0,     0,     0,     0,     0,   981,     0,   980,
       0,     0,     0,   853,   843,   851,   845,   847,   849,     0,
     267,     0,   266,   295,     0,     0,     0,     0,     0,     0,
    1331,     0,     0,     0,     0,     0,     0,   356,   482,   355,
     262,   108,   106,   327,   326,    99,   103,   310,     0,   311,
     307,   308,   581,     0,     0,     0,     0,     0,     0,   319,
     316,   317,     0,     0,     0,     0,  1319,  1318,  1322,     0,
       0,     0,  1314,  1313,  1293,     0,   973,   218,     0,     0,
     123,   126,     0,     0,     0,     0,     0,  1009,     0,   135,
     138,     0,    14,   459,     0,     0,   729,     0,   888,   917,
    1010,  1006,  1007,   721,   724,   906,   174,   828,     0,   243,
     242,   604,   605,     0,   635,     0,   213,   214,   204,   209,
     210,   220,     0,     0,    51,    46,    49,    52,    47,    50,
      37,    43,    40,    42,     0,     0,  1030,  1031,   623,     0,
     618,     0,   976,   975,   946,   959,   960,   953,   952,   954,
    1054,  1053,     0,   941,   940,   260,    79,  1129,  1139,  1134,
       0,  1130,  1140,  1135,     0,     0,     0,     0,     0,  1241,
    1215,     0,     0,  1214,  1244,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1222,     0,  1203,  1226,
    1204,  1227,     0,     0,     0,  1113,   927,  1113,     0,     0,
     155,     0,     0,     0,   160,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   474,   292,   868,     0,   978,
       0,   961,   964,   965,   277,   278,     0,   982,   966,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   268,
     281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   331,   330,   456,   582,   423,   556,
     415,   540,   427,   560,   419,   548,   457,   583,   424,   557,
     416,   541,   428,   561,   420,   549,   425,   558,   417,   542,
     429,   562,   421,   550,   426,   559,   418,   543,   430,   563,
     422,   551,  1321,  1323,  1316,   840,     0,   124,   150,  1010,
       0,   136,    86,   918,     0,     0,   829,     0,     0,     0,
       0,     0,     0,   205,     0,   221,     0,     0,  1028,  1029,
    1018,     0,     0,     0,     0,   937,  1160,  1205,  1206,  1209,
    1210,  1213,  1243,     0,     0,     0,     0,     0,     0,     0,
    1219,  1228,     0,     0,     0,     0,  1111,     0,  1108,  1121,
       0,  1113,     0,  1113,     0,     0,     0,     0,   476,   475,
     980,   962,   869,   967,   968,   275,   276,   854,   285,   286,
       0,     0,     0,     0,   279,   280,   289,   290,     0,     0,
     294,  1329,  1330,  1328,   343,     0,  1015,   841,     0,   722,
     725,   727,   726,     0,     0,   215,   211,     0,  1013,  1020,
       0,     0,     0,     0,     0,     0,     0,  1233,  1217,     0,
       0,  1218,  1230,     0,  1221,  1232,     0,     0,     0,  1113,
       0,  1113,     0,  1113,     0,  1114,     0,     0,     0,   148,
       0,   153,     0,   156,     0,   855,   283,   284,     0,   287,
     288,  1016,   171,  1014,  1207,  1208,     0,     0,  1216,  1223,
       0,  1220,  1231,     0,  1125,  1112,     0,     0,     0,  1122,
       0,     0,  1113,  1113,     0,  1113,   147,   146,   151,   149,
       0,     0,     0,   356,   482,   269,     0,     0,     0,  1109,
       0,     0,  1113,  1118,     0,     0,  1115,     0,     0,   154,
       0,  1224,     0,  1126,  1127,  1123,     0,     0,     0,     0,
    1113,   152,     0,  1013,     0,     0,  1119,  1120,  1116,     0,
    1014,  1110,  1124,     0,  1117
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1735,  2125,   -18, 10815, -1735,  2086, -1735, -1735, -1735, -1735,
   -1735, -1735,  1684,  1690,  -634, -1735, -1001,  -911,   216,   225,
    -945,  -927,  -248, -1735,  -756,  -582, -1735, -1735,  1691,  1696,
   -1735,   904,  6445, -1735,  -229,   709,   750, -1735, -1735, -1735,
   -1735,  1699, -1735, -1735, -1735,  -668, -1575,     9, -1735, -1735,
   -1735, -1735,  -175,   304,  -148,  -121,   648,  -814, -1735,  -885,
   -1735,  -889, -1735,  1182,  -128,  1311,  -942,   -47,  1904,   -22,
    1905,    -9,     0, -1735,  1261, -1735, -1735,  6768,  4119, -1735,
    6233,  -431,  1379, -1735,  4785, -1735,  -331,   600,   647,   -45,
   -1735,   686,  -662,   -10,   -82,   157,    97,   601, 10030,  3377,
    1073,  6535,  -801,  1405, -1735,  5332,  -326,   682,   685,   855,
     698,   165,   203,   288,   217,   307,  1784,  5628,  1110,  8544,
    -796,  2566,  2764, 11683,   -40,  1207,  -120,  1705, 11815,  9530,
   -1735, -1735, -1735,   -95,   -38,   -59, -1735,  8214, -1735,  1991,
    3248,   710,  -496,  1982, 10201, -1735, 12475, -1735, -1735, -1735,
     -46,  2257, -1735, -1735,  3771,  7628,   -31, -1735, -1735,  1260,
    1758,  1467,  1891,   -68,   -63,  3665, 11014,  2469,  3373,  -460,
    -137,  -393,   123,  -909,   -80,  3305, -1735, -1735, -1131, -1735,
    2789,  1715,  -560, -1235,  8692,  -265,  -723,   114,   351,   432,
    1773,  -280,  -818,  -435,  -490, -1735,  -557,  -960,  -955, -1734,
    1112,  1153,   -28,  1944,  -741,   279,   115,  -315,  -446, -1735,
    -116,   -79,  2977,  -316,    99,  -782, -1735, -1735, -1735,  2121,
   -1735,  2960,  2131,   -67,  3002,   -65,  1946,  1056,  1095, -1735,
   -1735, -1735,   -81,   -17, -1602,   -50, -1735, -1735, -1735,   116,
   -1735,  2140,   -61,    72,  2134,  1685, -1735, -1735, -1735,  2143,
    -836,   473, -1735,  -821,   952, -1735, -1735, -1735, -1735
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   219,    59,    60,  1012,   349,   466,   467,   468,   469,
     470,   471,   472,   473,  1028,  1029,  1030,  1031,  1032,  1033,
    1034,  1035,  1036,  1037,  1038,  1039,   272,   273,   474,   475,
      62,   350,   351,   771,   800,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,  2138,  2139,  2140,   488,   676,
     677,   678,   489,   490,   491,   492,  1827,   434,   530,   435,
     531,   436,   532,   533,   902,   437,   438,    63,    64,    65,
      66,    67,   352,   353,   354,   355,   356,  1040,  1041,   357,
     358,   774,  1300,   359,   401,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   402,
     854,   682,  1357,   376,   377,   404,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   405,   406,   407,
    1359,   581,   582,   221,    69,   523,   524,   222,    71,   223,
     224,    72,    73,    74,    75,    76,    77,   225,   124,   226,
     278,   967,   968,   227,   228,   229,    81,    82,    83,    84,
      85,   230,   766,  1234,   281,   496,    87,    88,   513,   514,
     912,  1257,   744,  1089,  1090,   130,    89,   497,    91,   498,
     133,   134,   135,   971,   136,   125,    93,  1138,  1139,  1140,
      94,    95,   607,  1248,   500,   609,  1250,   139,   193,   501,
     502,   195,   975,   141,  1577,  1749,  1578,  1046,  1047,  1579,
     196,   197,   198,   199,   767,  1235,   234,   235,   236,   237,
     238,   239,   685,   686,  2056,  2057,   687,   688,   689,    98,
     503,   282,    99,   100,   283,   284,   285,   692,   693,   694,
     695,   286,   696,   933,  1664,  1169,   699,   700,   701,  1170,
     703,   101,   102,   391,   103,   104,   105,   106,   107,   108,
     860,  1429,  1430,   861,   862,   392,   393,   394,   395
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      68,   424,   517,  1501,  1184,  1259,  1059,  1455,  1502,  1619,
     302,  1454,  1963,  1282,  1719,   539,   287,   544,   416,   548,
    1289,   154,   232,  1293,   719,  1263,  1433,   233,   185,   518,
     803,   296,   113,   115,   534,   804,  1557,   298,  1567,   527,
     982,  1434,   540,   120,   545,   144,   549,   183,  1106,   184,
    1893,   980,  1421,  1526,   424,   417,   129,  1423,   425,   303,
     206,   976,  1904,   146,  1514,   180,   414,   294,   155,   631,
     158,   415,   446,  1058,   304,   111,   292,    -8,   181,  1762,
     288,   777,  1453,   301,   824,     1,   169,   182,   129,   293,
     220,  1905,  1559,   315,  1569,  1474,   129,   441,    68,  2026,
     396,  2131,   852,   970,   114,    68,    68,   939,   315,   312,
    1560,   425,  1570,   565,   568,   772,   121,   315,   397,   941,
    1905,   400,   315,  2061,   116,   315,  1558,  1564,  1568,   564,
     567,  1544,  1284,   117,   220,   154,   109,   129,   129,   525,
    1155,     1,   439,  1536,   629,     1,   155,   493,   506,  1848,
     493,  -459,  -459,  -459,   520,   207,   522,   570,  1339,   522,
     506,  1308,   535,   493,   506,   493,   208,   493,   111,  1580,
     551,     1,     1,  1680,  1681,  1682,  1523,   566,   569,   900,
    1850,  1583,   155,     1,   313,   314,  1405,  1283,   317,  1524,
     577,   129,     1,   110,  1290,   824,   315,  1294,   962,     1,
     632,   192,   192,   653,   782,   783,   784,  2055,   578,   302,
     189,   302,   778,  -455,   825,  1906,   974,     2,     1,  -109,
     155,   690,   586,  1907,     2,  2132,   127,  1575,  -100,  2128,
     169,   598,   853,  2133,  1741,   185,   698,  -104,   940,   296,
     720,  2004,   129,     2,  2046,   298,   129,  2062,  1475,   -82,
     778,   421,  1907,   646,   183,  2063,   184,   709,   303,   852,
     303,   611,   -89,  1285,   183,  1156,   184,   654,  1073,   697,
     526,  1018,   630,   611,  1537,   723,   614,  1849,  -459,  1007,
    -622,   639,  1567,   888,   722, -1037,   679, -1037,   721,  1567,
     706,  2045,  1285,  1567,   708,   712,  1708,   293,  1114,   343,
    1581,  1120,   779,  1126,    68,  1131,    68,   940,  1851,     1,
    1007,  -617,  1584,   315,   560,   593,   957,   960,   118,   905,
     778,   812,  1742,   785,   738,  1224,   594,   963,  1093,   156,
     738,   786,     1,   315,   787,  -872,   111,     1,  1569,  1106,
     889,   578,   957,   960,   315,  1569,     1,     1,   584,  1569,
    -109,     1,   952,   953,  1299,   780,  1570,     2,   122,  -100,
       1,   648,   707,  1570,   957,   960,   127,  1570,  -104,   957,
     960,  1564,  1568,   957,   960,     1,  1200,  1204,  1564,  1568,
     -82,   142,  1564,  1568,     1,   930,   932,   934,   936,  1226,
    1626,   613,   876,   -89,   880,   192,     1,   155,   858,   612,
    1365,   441,   702,   613,  1563,     1,   616,   140,   192,  1011,
     578,   165,   578,     1,   954,   768,     1,   189,   315,   143,
     129,  1050,  2137,  1689,  1476,  1693,   129,   715,  1691,   979,
    1695,     1,    97,   856,   233,   728,   614,  1050,   243,   155,
    1080,     2,  1084,   719,   858,     1,   903,   535,  2200,   931,
     907,   598,   937,     1,  2130,    56,   918,   152,   153,   919,
     858,   907,   926,   858,  1075,  -872,     1,  1081,   151,  1085,
    1622,  1795,     1,  1280,  1309,  1311,  1313,  1094,  1052,  1310,
    1312,  1314,  1937,  1060,  2137,   976,  1062,  1864,   422,   649,
    1791,   493,   493,   155,  1052,   161,   966,   220,  1525,  2141,
     129,  1278,  2137,   993,  1373,  1375,  1377,   737,   997,  1374,
    1376,  1378,   169,   998,  1095,     1,  1711,   493,   493,   194,
     970,  1520,  1788,  1521,  1511,   147,  1800,   148,   425,  1013,
      97,  1778,  1106,  1779,  1729,   155,  1017,   305,    97,   493,
     493,  1738,  2178,  1600,   493,   493,   398,  1061,   493,   493,
    1063,   552,   129,   129,   129,   129,   129,  -879,   129,   976,
    2211,   129,   615,  1514,  1627,  2179,   616,     1,    56,   617,
     772,  1455,   129,   129,   129,  1787,  1097,  2199,   155,    28,
     970,   166,   610,   858,   522,  1818,   152,   153,   493,   315,
     493,   551,     1,  1088,   578,   129,   779,   772,   155,  1433,
    1433,   970,   270,  1811,   619,   772,  1812,   311,   129,  1142,
    1576,   411,  1842,  1112,  1434,  1434,  1118,  1843,  1124,   715,
    1129,   315,   412,  2179,     1,   772,  1567,  1143,   302,  2173,
     611,     1,  1093,  1473,     1,   152,   153,  1107,   556,  1461,
     698,   698,   698,   698,   410,   557,  1453,  1470,  1563,     2,
     617,   315,   970,  1218,  1220,  1563,  1539,  1831,  1484,  1563,
    1104,  1540,  1166,     1,  1172,  1260,  1019,  1019,  1019,  1019,
    1019,  1105,  1185,   697,   697,   697,   697,   303,  -265,  -265,
    -265,  1051,  1569,   183,  1054,   184,   192,   192,  1426,  1427,
     679,   679,   679,   679,  2070, -1079,   240,   241,  1072,   618,
    1570,  1219,  1221,  1222,   617,   614,  -888,  -888,   155,  1212,
    2202,  -888,   152,   153,   974,  1564,  1568,   129,  -888,   410,
     315,   897,   557,   598,   316,  1826,   194,  1829,  1113,  1229,
   -1085,  1119,   594,  1125,   620,  1130,   718,  1236,   305,   159,
    1347,   160,  -888,  -888,  1241,  1251,   578,  1261,  1241,  1251,
    1804,   152,   153,  2174,  1086,  1229,   883,  2128,   858,   445,
     613,  2175, -1054, -1054,   779,  1574,  1273, -1054,  1413,  1323,
    1325,    34,  1327,  1740,  1936,  1519, -1079,  1209,  1210,  1943,
     618,  1094,  1296,   152,   153,     1,  1303,   814,   815,  1561,
     553,  1571,   315,  1506,  1609,   958,   961,  1387,  1389,  1391,
    1393,  -265,    45,    46,  1567,  -265,   702,   702,   702,   702,
       2,  1343,  1614,   140,   554,   828,   829,   830,  1095,   240,
     241,   958,   961,  1266,  1267,  1268,  1592,   555,  1363,  1809,
   -1079,   884,  1368,  1629,   618,   616,  1635,     1,   573,  1409,
    1216,     1,  1784,   958,   961,     1,   715,  2006,   958,   961,
     441,   441,   958,   961,   416,     1,   805,  1428,   155,  1431,
    1569,  1534,   858,   858,   858,  1494,  1495,    55,  1496,   552,
       2,  1498,  1499,  1676,  1528,  1529,   806,   807,  1570,  1200,
    1204,  1200,  1204,   914,  1811,  1812,   893,     1,  1535,   111,
    1538,   417,   583,  1564,  1568,   439,  1456,   220,  1600,   816,
     817,  1013,  1510,   155,  1017,   957,   960,   415,   737,   957,
     960,   169,  1466,   598,  2036,   112,  1185,   725,     1,  1789,
     598,  1351,  1481,  1483,  1805,  1485,   725,   858,  1790,  -459,
    -459,  -459,   725,   587,   831,  -459,  -459,  -459,  1588,     1,
    1441,   111,   832,  2025,   140,   833,  1102,  1549,  1747,  1417,
     441,  -921,  -921,  1748,     1,   424,  1582,  1585,   447,   588,
       1,   152,   153,   448,   129,  1589,   155,   705,  1016,  1703,
     220,     1,  1707,   129,   621,   152,   153,     1,  1518,  1011,
    1349,   129,  1546,   129,  1522,  1340,   589,  1930,  1602,  -461,
    -461,  -461,  1563,   155,   966,   439,     2,   443,  1957,  -921,
     894,   622,   535,   535,  2080,   127,   895,   522,  1415,   493,
     522,  1550,   425,  1406,  1914,   535,  1545,   155,  1547,   240,
     241,   425,  1847,  1052,  1344,  1603,  -460,  -460,  -460,   842,
     843,  1853,   240,   241,  1270,  1571,   715,  1271,   152,   153,
    1350,  1815,  1571,   240,   241,   129,  1571,  1302,  -459,     1,
    2098,   476,  1410,   835,   476,     1,  -459,   772,  1058,  -459,
    -922,  -922,  -459,  -216,  1014,  -459,   517,   476,  1416,   476,
    1015,   476,   976,   836,   837,    34,   522,   522,   149,   970,
     493,   493,   150,    56,   493,   493,   493,  1605,   155,  1846,
    1541,   129,   129,   518,    56,  1542,  1216,   152,   153,   698,
    2013,   129,   698,   129,   220,   578,    45,    46,  -922,   858,
    1348,     1,   155,   111,  1291,   858,  -461,   715,   155,   970,
     624,   858,   970,  1712,   155,  2060,     1,   858,   626,   155,
    1516,  1352,   697,   627,  -216,   697,   628,  1679,  1414,   698,
       1,   844,   845,   155,   142,   698,   698,   698,   698,   679,
     935,   556,   679,  -460,   270,   718,    34,   410,   162,  1418,
    1713,  1166,   207,  1172,   704,  1789,  -908,  -748,   715,  -748,
    1563,  1661,   697,   208,  1799,   152,   153,  -216,   697,   697,
     697,   697,   896,  -216,  1674,   779,     1,    45,    46,   679,
    1303,    34,  1592,   441,     1,   679,   679,   679,   679,   109,
     163,  1685,   164,  1686,    28,   421,  1004,  2083,  2105,  1697,
    2106,     2,  1132,   493,   493,   129,   724,   129,  1286,     2,
     127,   813,    45,    46,  1608,  1287,  1853,   858,   737,   155,
    1611,   152,   153,   521,   858,     1,  1612,  1133,   439,   220,
     928,  1949,  1613,  2065,   270,  1459,   152,   153,  -216,     1,
     746,  1015,  1670,  1460,  -216,  1134,   779,  1723,   418,   419,
     152,   153,   747,    34,  1723,   702,    30,    31,   702,  1462,
      40,    34,   750,   155,     2,  1015,   140,   751,    40,  2134,
     752,  2136,  2127,   127,  1135,  1136,  2128,  2029,  -907,   753,
    2129,  1817,  1600,     1,    45,    46,   754,   895,  1132,   758,
      34,   443,    45,    46,  1819,   702,    55,   808,   809,   593,
    1015,   702,   702,   702,   702,   140,  1868,  1872,     2,   776,
     594,    30,    31,  1133,   167,   725,    34,   779,  1884,   610,
    1757,    45,    46,    40,  1758,   140,  1137,  1820,  1684,  1132,
    1054,  1134,  1927,  1015,  -630,  1860,  -630,  2166,   895,  2168,
    1532,  2170,  1750,   820,  2028,  2005,   822,    45,    46,   957,
     960,   895,  -907,  -907,  1133,   240,   241,  -907,    30,    31,
    1135,  1136,   593,    34,  -907,  2016,   818,   819,     1,  1571,
      40,   895,  1134,   594,   958,   961,  -216,   821,   958,   961,
    2194,  2195,  -629,  2197,  -629,   476,   476,  2072,  -907,  -907,
     970,   970,   823,   895,    45,    46,  1847,   990,  1315,  1317,
    2206,  1135,  1136,   957,   960,   441,  -907,  -907,  -907,   441,
     528,   476,   476,  1548,   541,  1769,  1776,  1777,  2219,  1758,
    1780,   155,   571,   799,   572,   858,   858,   827,  1379,  1381,
     946,   947,   422,   476,   476,   848,  1910,   826,   476,   476,
    1911,   834,   476,   476,   888,   850,   155,  1319,  1321,  2077,
    1456,  1547,   948,  1617,   439,   895,   949,  1618,   950,  1847,
    1792,   849,   129,  1846,   865,  1674,  2181,   871,   575,   129,
     572,  1074,   441,     1,  1801,   155,   129,  1383,  1385,     1,
    1316,  1318,   476,  2143,   476,  1320,  1322,  2144,   152,   153,
    -216,   441,   951,  1781,  1331,  1335,  -216,   129,   779,  1808,
     851,   889,   129,   863,     2,   129,  1332,  1336,   155,  1052,
    1380,  1382,  2097,   127,  2145,  1384,  1386,   439,   895,  1147,
     895,   572,  1397,  1401,   493,   493,  1846,   855,  2029,   858,
     858,   858,   858,  2188,  1398,  1402,  1840,  2128,  -888,  -888,
    2029,   562,   495,  -888,  2190,   495,   864,  1571,  2128,   885,
    -888,    30,    31,  2023,   886,  2042,    34,  2171,   495,   916,
     495,  2128,   495,    40,  2207,  2172,  2208,  2215,  2128,   270,
    2128,  2128,   698,   698,  -888,  -888,  2223,   938,   493,   493,
    2128,   129,   810,   811,   698,  1216,   945,    45,    46,   129,
     421,   955,  1939,  2191,  1010,  2028,   779,  2128,   995,    55,
     598,  2192,    56,  1002,  2209,   697,   697,  2028,  2128,   838,
     839,   965,  2210,   840,   841,    30,    31,   697,  1003,   779,
      34,  1189,   679,   679,  1213,  1684,   148,    40,  1054,  1940,
     846,   847,  1166,  1847,   679,  1166,  1007,     1,  1166,  1295,
    1068,     1,  1661,  1490,  1492,  2029,  1166,  1069,  2185,  1166,
    1070,    45,    46,  1076,  1020,  1021,  1022,  1023,  1024,  1324,
    1326,   441,  1328,  1057,  1077,  2017,   441,  2020,  1109, -1032,
     563, -1032,  1185,   535,  1064,  1066,   772,   772,   772,   772,
     772,   772,   772,   772,  1491,  1493,  1865,  1388,  1390,  1392,
    1394,  2031,  2018,  2033,  2021,    70,  1554,  1302,  1555,     1,
    1846,  1362,   208,     1,  2008,  1050,   439,  1115,   220,    30,
      31,   439,  2028,  -969,    34,  1065,  1067,  1894,  2032,  1121,
    2034,    40,    20,    21,    20,    21,  2122,  1127,  2125,  1273,
    1145,  1958,  1959,  1908,   441,  1962,  1195,  1197,   702,   702,
     443,   443,  1367,  1146,     1,    45,    46,   779,  1148,  1656,
     702,    30,    31,    30,    31,  1552,    34,  1553,    34,  1835,
      56,  1838,  1052,    40,   779,    40,  1897,  1152,  1836,  1428,
    1839,   772,  1153,    30,    31,  1196,  1198,   441,    34,   439,
     307,   310,    70,   129,   129,    40,   129,    45,    46,    45,
      46,  1154,   318,    70,     1,   319,   111,  2162,   155,    55,
      70,    70,  1173,  1171,  1180,  1435,  1436,  2183,  1174,    45,
      46,  1182,  2184,   493,  1183,   493,  1186,  1214,   858,     2,
    1187,   698,  1188,  1225,  1279,   427,  1238,   422,   958,   961,
    1446,  1291,   957,   960,  1464,   957,   960,  1463,   412,   493,
     443,   493,   129,   508,  1447,  1448,   957,   960,   957,   960,
     610,  1449,  1450,  1451,   697,   508,  1480,  1488,   323,   508,
    1507,  2103,  1489,   324,   325,  1166,  1166,  1166,  1166,  1527,
    -740,   679,  -743,  1593,  1594,  1166,  1166,   328,  1166,  1595,
    1166,  1596,   958,   961,  1615,  1301,   495,   495,  2104,  1597,
     329,   441,  1166,  1598,   330,   331,   332,   333,   334,   335,
     336,  1185,  1616,   476,  1674,  1620,  1684,  1054,  1621,  1649,
     338,  1657,   495,   495,  1632,  1633,  1650,   732,   957,   960,
    1648,  1652,  1665,  1666,  1671,    30,    31,   343,   344,  1667,
      34,  1301,  1683,   447,   495,   495,   439,    40,   578,   495,
     495,  1687,  1704,   495,   495,  1705,  1716,  1718,  1720,  1239,
    1721,  1861,  1731,  1736,  1732,  1108,  1733,  1744,  1759,  1739,
    1891,    45,    46,  1743,  1745,  1438,  1752,  2058,  1440,  2058,
    1765,  1443,    80,  1445,   476,   476,  1768,   429,   476,   476,
     476,    79,  1773,   495,  1775,   495,  1798,   702,  1802,    70,
    1816,  1823,   698,  1854,   698,  1832,  -746,  1855,  1856,    70,
    1863,    70,  1895,  1912,  1885,  1857,  1858,   493,   493,   493,
     493,   493,   858,  1859,   858,  1886,  1909,  1913,  1916,  1918,
    1920,   493,   493,   493,   493,   697,  1923,   697,  1922,    30,
      31,  1924,  1926,  1166,    34,  1931,  1932,  1933,  1934,  1935,
    1946,    40,   679,  1947,   679,  2126,  2176,  2177,  2003,  1950,
    1951,  1956,    30,    31,  1185,  1674,  -231,    34,  2007,    80,
    2010,  2011,  2014,   698,    40,    45,    46,  2015,   187,  2019,
      80,  2022,  2024,  2044,  2059,  -919,    61,    80,    80,    79,
   -1053, -1053,  2064,   443,  2071, -1053,    79,    79,    45,    46,
     727,  2073,  2074,   493,   493,  2090,   697,  2075,  2076,   727,
    1166,  1166,  2091,  2110,  1166,   727,  1166,   476,   476,  1166,
    2092,  2078,  2079,   679,  2084,    58,  2085,  2086,  2087,   119,
     511,  2093,  2094,  2058,  2111,  2058,  2135,  2142,  1674,  2146,
    1185,  2147,   511,  2148,  1185,  2189,   511,  2149,  2152,    61,
    2150,  2158,  2163,  2164,  2169,   508,   157,  1166,  2193,  -919,
    -919,  2180,  2196,  2203,  -919,  1057,   508,  2204,   702,  2205,
     702,  -919,  2216,    61,  2217,  -878,    61,  -878,  -878,  2218,
    1185,  1674,  2222,   271,    61,  2221,  1166,   986,  2224,  2198,
    1830,    61,    61,   987,   988,  -919,  -919,  1543,  1185,   989,
    2058,  2058,   992,  2058,    61,  2058,  1452,   399,   710,   711,
    1366,  1497,   178,  -919,  1533,  -919,  1264,  1806,   508,   923,
      61,   748,   602,    58,   915,   647,   306,  2165,   433,   295,
      58,    58,   691,   433,   271,  2187,   433,  1006,   297,   702,
     309,   299,     0,  -878,  2058,  2058,   271,  2058,    61,   433,
     271,   433,  2002,   433,  -878,     0,     0,    86,     0,     0,
       0,     0,     0,     0,  2058,   788,   789,   790,   791,   792,
     793,   794,   795,   796,   797,     1,    80,     0,     0,  -878,
     271,   271,  2058,     0,     0,   187,    80,     0,    80,  -878,
       0,     0,     0,   142,   433,   187,     0,    79,     0,     0,
       2,     0,     0,  1440,     0,     0,   410,     0,   585,  -878,
    -878,  -878,     0,     0,     0,   443,     1,    61,     0,   443,
       0,   958,   961,     0,   958,   961,     0,     0,     0,     0,
       0,     0,   764,     0,     0,   958,   961,   958,   961,     0,
       0,     2,     0,     0,    86,     0,     0,    30,    31,   495,
     495,     0,    34,     0,     0,    86,   596,     0,     0,    40,
       0,     0,    86,    86,     0,   725,   725,   271,   725,   725,
     271,   271,   675,   725,   725,   725,   725,   798,     0,     0,
      61,     0,   443,    45,    46,     0,     0,     0,    30,    31,
      61,   271,    61,    34,     0,     0,     0,    30,    31,     0,
      40,   443,    34,     0,     0,   512,     0,   958,   961,    40,
     271,    20,    21,     0,   495,     0,   271,   512,     0,   178,
       0,   512,     0,     0,    45,    46,     0,   433,    70,   178,
       1,    58,   511,    45,    46,   602,     0,     0,   476,   476,
      30,    31,     0,   511,     0,    34,   590,     0,     0,   890,
       0,     0,    40,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,   127,     0,     0,     0,     0,    90,
       0,     0,     0,     0,     0,     0,    45,    46,     0,     0,
       0,     0,     0,     0,    61,   495,   495,   602,    55,   495,
     495,   495,   476,   476,     0,   511,   433,     0,   433,     0,
       0,     0,    30,    31,     0,     0,     0,    34,   727,     0,
       0,     0,     0,     0,    40,     0,   725,   725,   725,   725,
     725,   725,   725,   725,     0,    90,     0,   602,     0,     0,
      61,     0,   433,    61,     0,     0,   271,    61,    45,    46,
       0,     0,   917,    30,    31,     0,    61,   271,    34,    61,
      55,    86,     0,    56,  1503,    40,    90,    90,     0,     0,
       0,    86,     0,    86,     0,    90,     0,    90,     0,   596,
       0,   443,     0,     0,    90,    90,   443,   433,   433,    45,
      46,     0,    61,    61,     0,     0,    20,    21,     0,   433,
       0,     0,     0,     0,   996,   891,     0,     0,     0,   271,
       0,     0,     0,   433,   433,     0,    90,    90,     0,     0,
       0,   725,     0,     1,     0,    30,    31,   508,   495,   495,
      34,   596,    61,     0,     0,   433,   433,    40,   508,     0,
     433,   433,     0,     0,   433,   433,     0,     0,     2,     0,
       0,     0,     0,   675,   443,     0,     0,   127,     0,     0,
     271,    45,    46,   271,     0,     0,     0,     0,     1,     0,
      90,   596,     0,     0,     0,     0,  1655,     0,     0,    61,
       0,     0,     0,     0,   433,     0,   433,     0,     0,    61,
     433,     0,     0,     2,     0,    30,    31,   443,     0,  1057,
      34,     0,   127,     0,     0,     0,     0,    40,     0,    61,
       0,     0,    61,     0,    61,    80,    61,   911,     0,     0,
       0,    90,     0,    61,   187,    90,     0,     0,   911,     0,
    1232,    45,    46,     0,     0,     0,     0,   476,     0,   476,
      30,    31,     0,    55,  1440,    34,    56,   764,     0,     0,
       0,     0,    40,     0,     0,     0,  1232,     0,     0,  1232,
      90,     0,     0,   476,     0,   476,     0,  1276,     0,     0,
       0,     0,     0,    90,     0,     0,    45,    46,     0,     0,
     911,     0,     0,    90,     0,    90,   675,   675,   675,   675,
       0,    56,     0,     0,     0,     0,     0,     0,     0,     0,
    -459,     0,     0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,   443,     0,     0,   271,   271,   271,     0,     0,    61,
       0,     0,     0,     0,     0,   433,     0,     0,     0,     0,
       0,     0,     0,   271,   418,   419,     0,     0,     0,    34,
     271,   271,   433,     0,   271,   271,    40,     0,     0,     0,
       0,   433,     0,     0,    61,     0,     0,     0,   178,     0,
     602,     0,    61,     0,  1228,   675,  1057,     0,     0,     0,
      45,    46,   675,     0,     0,   675,     0,     0,  1965,     0,
       0,     0,    55,  1440,     0,   897,  1445,     0,     0,     0,
    1228,     0,     0,  1228,   244,     0,   594,     0,     0,    90,
       0,   745,     0,     0,   511,   602,     0,   749,     0,     0,
       0,     0,     0,     0,   602,   511,     0,  -459,  -459,     0,
       0,   602,     0,     0,     0,     0,   764,  -459,   602,     0,
       0,   476,   476,   476,   476,   476,  -459,  -459,  -459,  -459,
    -459,    90,     0,     0,     0,   476,   476,   476,   476,   495,
     495,     0,     0,  1057,     0,    61,     0,     0,    61,    61,
      61,     0,   418,   419,  1057,     0,     0,    34,     0,     0,
       0,     0,     1,     0,    40,     0,     0,     0,     0,   602,
       0,     0,     0,     0,     0,     0,   877,     0,   881,     0,
      86,   433,   433,    61,   596,   602,     0,     2,    45,    46,
      61,     0,     0,   495,   495,     0,   127,     0,   271,    61,
      55,     0,     0,  1239,     0,     0,    61,   476,   476,   271,
       0,   433,     0,    61,     0,     0,     0,     0,     0,     0,
       0,    90,    90,    90,    90,    90,     0,    90,     0,   596,
      90,     0,     0,     0,   418,   419,     0,     0,   596,    34,
       0,    90,    90,    90,     0,   596,    40,     0,     0,     0,
       0,     0,   596,     0,     0,     0,    61,     0,     0,     0,
       0,     0,    90,     0,    61,     0,     0,     0,     0,     0,
      45,    46,     0,  1057,     0,   684,     0,     0,     0,     1,
      61,   433,    55,     0,     0,    56,     0,     0,    61,    61,
       0,     0,     0,     0,     0,   433,     0,     0,     0,     0,
       0,    61,     0,   596,     2,     0,     0,     0,     0,     0,
       0,     0,     0,   200,   201,   202,   203,     0,     0,   596,
       0,     0,     0,   675,   271,   675,     0,     0,     0,     0,
       0,   271,     0,     0,     0,     0,  1057,     0,     0,     0,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,    30,    31,     0,     0,     0,    34,     0,     0,     0,
    1098,     0,     0,    40,     0,     0,   433,   433,     0,   911,
     433,   433,   433,     0,   878,     0,   882,     0,     0,     0,
     911,     0,     0,     0,     0,     0,    90,    45,    46,     0,
      61,   433,    90,     0,     0,    61,     0,     0,     0,    55,
       0,    61,    56,     0,     0,  1057,     0,    61,     0,     0,
       0,     0,     0,    61,     0,     0,     0,  1057,     0,     0,
       0,     0,     0,  1150,     0,  1701,     0,     0,   495,     0,
     495,     0,   675,     0,     0,   675,     0,     0,   675,     0,
       0,     0,     0,     0,   651,   655,     0,     0,     0,     0,
       0,     0,     0,     0,   495,   929,   495,  -459,  -459,     0,
       0,     0,     0,     0,     0,     0,     0,  -459,     0,     0,
       0,     0,  -459,  -459,  -459,   675,  -459,  -459,  -459,  -459,
    -459,   675,   675,   675,   675,     0,   652,   656,     0,     0,
       0,     0,  1057,     0,     0,     0,     0,     0,     0,   433,
     433,     0,     0,     0,   271,    92,   271,     0,     0,     0,
    1057,  1005,     0,    61,     0,     0,     0,     0,     0,     0,
      61,     0,  1057,   271,   433,    61,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   271,     0,     0,     0,     0,     0,     0,
     271,     0,  1696,     0,     0,     0,     0,     0,  1099,  1698,
       0,   137,     0,     0,     0,     0,     0,     0,   271,   675,
       0,     0,     0,     0,     0,   271,   675,     0,     0,   271,
     675,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   170,   190,   205,    90,     0,   510,     0,     0,     0,
       0,   246,     0,    92,     0,     0,     0,     0,   510,     0,
      92,    92,   510,     0,     0,     0,     0,     0,     0,     0,
       0,  1151,   495,   495,   495,   495,   495,     0,     0,   132,
       0,     0,     0,    90,     0,     0,   495,   495,   495,   495,
       0,     0,   205,   426,   428,   430,   431,     0,     0,     0,
       0,  1167,   499,    90,     0,   499,     0,     0,     0,     0,
     188,   132,     0,     0,     0,     0,     0,     0,   499,   245,
     499,     0,   499,     0,     0,     0,     0,     0,     0,   684,
     684,   684,   684,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   375,     0,   561,   428,   430,     0,
     602,     0,     0,     0,     0,     0,     0,     0,   495,   495,
     132,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    61,    61,     0,   651,     0,     0,   651,     0,   643,
       0,  1504,     0,     0,     0,   591,   606,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   433,     0,  1971,  1975,
     433,  1981,  1985,     0,     0,     0,  1989,  1993,  1997,  2001,
      90,    90,     0,     0,   559,     0,   652,     0,     0,   652,
    1530,     0,   742,     0,     0,     0,     0,     0,   742,     0,
       0,     0,     0,     0,     0,     0,   645,     0,     0,     0,
       0,     0,   675,     0,     0,    61,     0,     0,     0,   190,
       0,   602,     0,     0,     0,     0,     0,     0,     0,   716,
       0,    92,     0,   433,     0,   623,     0,     0,     0,   625,
     433,   433,     0,     0,     0,    61,    61,    61,    61,     0,
       0,     0,     0,     0,   596,     0,     0,     0,     0,  1168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     651,   655,  1201,  1205,   132,     0,     0,     0,     0,     0,
       0,     0,     0,   681,     0,     0,     0,   188,     0,  1199,
    1203,  1606,     0,     0,   433,   433,     0,     0,     0,     0,
     651,     0,     0,     0,    90,     0,    90,     0,     0,     0,
       0,     0,   652,   656,  1202,  1206,    61,     0,   910,   727,
     727,   727,   727,   727,   727,   727,   727,     0,     0,   910,
       0,     0,   271,   675,     0,     0,     0,     0,   675,   675,
       0,   775,   652,  1646,     0,   426,   428,   430,     0,  1505,
     764,   675,     0,     0,   675,   596,     0,     0,     0,     0,
       0,     0,   675,     0,     0,     0,     0,     0,     0,   898,
       0,     0,     0,     0,     0,     0,   499,     0,     0,     0,
       0,  1001,     0,     0,     0,  1517,     0,   137,  1531,    61,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   132,   727,   244,   499,   499,     0,     0,
       0,   972,   433,   423,    61,   983,  1714,   433,   499,     0,
       0,     0,     0,     0,     0,     0,     0,   170,     0,   602,
       0,     0,   499,   499,     0,    61,     0,     0,  1734,     0,
       0,     0,     0,     0,     0,   132,     0,     0,     0,     0,
       0,   898,     0,     0,   499,   499,     0,     0,     0,   499,
     499,     0,     0,   499,   499,     0,   423,   205,   205,   205,
     205,   205,     0,     0,     0,     0,     0,     0,     0,  1607,
       0,     0,     0,   245,     0,   433,     0,   205,   205,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     271,   675,     0,   499,     0,   499,   604,     0,  1091,     0,
    1100,     0,     0,     0,     0,     0,     0,     0,     0,   433,
       0,   433,     0,     0,    61,   430,     0,     0,     0,     0,
       0,  1647,     0,     0,     0,   132,   132,   132,   132,   132,
       0,  1049,     0,     0,   625,   433,     0,   433,   684,   764,
    1056,   684,     0,     0,     0,   132,   132,   132,     0,     0,
    1167,     0,     0,   596,     0,    90,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,     0,     0,   713,
       0,   675,   675,     0,     0,     0,     0,     0,   684,     0,
       0,     0,     0,     0,   684,   684,   684,   684,     0,     0,
       0,     0,  1245,  1255,     0,     0,  1245,  1255,     0,     0,
       0,     0,     0,  1141,  1715,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1217,     0,     0,     0,  1735,     0,   716,     0,
       0,     0,   433,     0,   433,     0,     0,     0,     0,   681,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1247,
       0,     0,     0,  1247,     0,     0,     0,     0,     0,     0,
      90,     0,     0,     0,     0,     0,     0,   681,   681,   681,
     681,   898,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1813,     0,     0,   887,     0,     0,     0,     0,
     245,   892,     0,     0,     0,     0,     0,     0,  1821,     0,
       0,     0,     0,   433,   433,   433,   433,   433,    61,  1630,
      61,     0,  1636,     0,     0,     0,     0,   433,   433,   433,
     433,     0,     0,     0,     0,     0,  1628,  1265,     0,  1634,
       0,  1269,     0,     0,     0,     0,     0,     0,  1651,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1677,
       0,  1631,     0,     0,  1637,  1201,  1205,  1201,  1205,     0,
    1469,   969,   775,     0,     0,     0,  1675,     0,     0,     0,
       0,  1469,  1199,  1203,  1199,  1203,  1307,     0,   651,     0,
     651,     0,     0,     0,     0,     0,     0,     0,     0,   433,
     433,  1678,     0,     0,     0,     0,     0,  1202,  1206,  1202,
    1206,     0,  1457,  1361,     0,     0,     0,     0,   775,   898,
       0,  1372,     0,     0,     0,     0,   170,   898,  1471,     0,
     652,     0,   652,  1048,     0,  1478,  1053,     0,   898,     0,
    1486,  1425,     0,     0,     0,     0,     0,     0,     0,  1048,
       0,     0,  1307,     0,     0,  1439,     0,     0,  1372,     0,
    1444,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     604,     0,     0,     0,     0,     0,     0,     0,     0,   137,
       0,     0,     0,   604,     0,     0,     0,     0,  1515,     0,
    1814,     0,     0,   606,     0,     0,  1941,     0,  1944,   137,
       0,     0,     0,   643,     0,  1008,  1822,  -645,   132,   972,
       0,     0,  1952,  1954,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   499,     0,     0,     0,     0,     0,
       0,    90,  -645,     0,   428,  1824,     0,  -634,  1045,     0,
       0,  -645,  -645,  -645,  -645,     0,     0,   132,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     972,     0,  -634,     0,   623,     0,   625,   132,     0,     0,
       0,  -634,  -634,  -634,  -634,     0,     0,     0,     0,  -645,
    -645,     0,     0,     0,  -645,     0,     0,     0,     0,     0,
       0,  -645,   713,     0,     0,   499,   499,     0,   713,   499,
     499,   499,     0,     0,     0,     0,  1590,   426,     0,  -634,
    -634,     0,     0,     0,  -634,  -645,  -645,   430,     0,     0,
       0,  -634,     0,     0,     0,     0,     0,  -645,     0,     0,
    -645,   684,   684,  1009,     0,  1007,  -645,     0,     0,     0,
       0,  1167,  1056,  1167,   684,  -634,  -634,   684,     0,     0,
       0,     0,     0,     0,     0,   684,     0,  -634,  1167,     0,
    -634,     0,     0,  1825,     0,  1007,  -634,     0,     0,     0,
       0,     0,     0,     0,   132,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     802,     0,     0,     0,  1942,   643,  1945,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1953,  1955,     0,     0,     0,  1727,     0,     0,  1237,     0,
       0,     0,  1727,  2081,     0,     0,     0,     0,   499,   499,
       0,     0,  2088,     0,     0,     0,   681,     0,     0,   681,
       0,     0,     0,     0,     0,     0,     0,     0,   681,   898,
    1045,     0,   898,     0,  1710,     0,     0,  1045,     0,     0,
    1045,     0,     0,     0,     0,     0,     0,     0,     0,  1672,
    1673,     0,  1247,     0,     0,     0,   681,     0,     0,  1247,
    1439,     0,   681,   681,   681,   681,     0,     0,   713,     0,
    2099,  2101,     0,     0,     0,  1477,     0,     0,   623,     0,
     625,     0,  1869,  1873,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1630,     0,     0,  1636,  1867,
    1871,     0,     0,     0,     0,     0,  1677,     0,     0,  1880,
       0,  1883,  1628,     0,     0,  1634,     0,     0,     0,     0,
       0,     0,     0,  1675,  1870,  1874,  1896,     0,  1513,     0,
       0,     0,     0,   604,     0,     0,     0,   656,     0,     0,
     656,     0,     0,     0,     0,     0,     0,     0,   656,   969,
       0,     0,     0,  1754,  1167,  1167,  1167,  1167,     0,     0,
    1167,     0,     0,     0,   684,   684,     0,  1167,     0,  1167,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1167,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     969,  2082,     0,     0,     0,     0,     0,     0,     0,     0,
    2089,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   423,     0,     0,
       0,     0,  1785,     0,     0,     0,   604,     0,   604,     0,
       0,     0,     0,     0,     0,     0,     0,  1794,  2100,  2102,
       0,     0,     0,     0,   426,     0,  1177,     0,     0,     0,
       0,   205,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1045,  1045,
    1045,     0,  1807,     0,   606,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1167,     0,     0,     0,     0,     0,     0,   499,
     499,  1167,     0,  1167,     0,  1869,  1873,     0,     0,     0,
       0,     0,  2037,  2038,  2039,  2040,     0,     0,  2041,   132,
       0,     0,  1867,  1871,     0,  1880,     0,  1883,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2050,
     713,     0,   713,     0,     0,     0,     0,   656,   656,     0,
       0,     0,     0,   499,   499,     0,   426,     0,     0,  1167,
    1167,     0,   360,  1167,  1298,  1167,     0,     0,  1167,     0,
       0,     0,  1167,     0,     0,   606,     0,  1045,     0,     0,
       0,     0,     0,     0,     0,  1056,     0,   440,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1330,  1334,  1338,
    1342,  1346,     0,     0,  1355,     0,  1167,     0,     0,     0,
    1298,     0,     0,     0,     0,     0,  1056,     0,     0,     0,
       0,     0,     0,     0,   132,  1396,  1400,  1404,  1408,  1412,
       0,     0,  1355,     0,     0,  1167,     0,     0,     0,     0,
       0,     0,     0,     0,  1437,     0,     0,     0,     0,     0,
    1442,     0,     0,   440,     0,     0,     0,     0,     0,     0,
       0,  1439,     0,     0,     0,     0,     0,     0,     0,   681,
     681,     0,     0,     0,     0,  1928,     0,     0,     0,   681,
    2041,   681,   681,     0,     0,   681,     0,     0,     0,  2121,
       0,  2124,     0,   681,     0,     0,   681,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1045,  1045,     0,     0,     0,     0,     0,
    1045,  1045,     0,     0,  1045,  1045,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2154,  2155,     0,
       0,  2121,     0,  2124,     0,     0,  2159,     0,     0,     0,
    2161,   440,     0,     0,     0,   730,   733,   735,  1056,     0,
     440,     0,     0,     0,     0,     0,   440,     0,     0,     0,
    1960,     0,   756,  1056,     0,     0,     0,     0,   499,   360,
     499,     0,     0,   898,  2161,  1754,     0,   713,     0,     0,
    1439,     0,     0,  1444,  1797,     0,   440,     0,     0,     0,
       0,   440,     0,     0,   499,     0,   499,     0,     0,     0,
       0,     0,     0,  2201,     0,     0,   430,     0,     0,     0,
       0,     0,  1477,     0,   604,     0,     0,  1810,     0,     0,
    1053,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   440,     0,   440,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
    1056,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1056,     0,     0,     0,   132,     2,     0,     0,     0,
       0,   440,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,   681,   681,   681,   681,   887,     0,   681,     0,
       0,     0,   681,   681,   604,   681,    29,   681,     0,     0,
       0,     0,     0,    30,    31,   604,     0,  1045,    34,   681,
       0,    37,    38,  1653,    39,    40,    41,     0,     0,  2066,
    2067,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,     0,     0,     0,     0,     0,
       0,     0,   499,   499,   499,   499,   499,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   499,   499,   499,   499,
    1056,     0,   440,  1355,     0,  1355,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   440,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1045,  1045,     0,
       0,     0,     0,  1056,     0,     0,     0,     0,   499,   499,
       0,   360,     0,     0,     0,     0,     0,     0,     0,     0,
     681,     0,     0,     0,     0,     0,     0,     0,     0,   681,
       0,   681,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   440,     0,     0,     0,     0,     0,     0,   378,
       0,     0,     0,     0,     0,     0,     0,     0,   713,   713,
       0,  2009,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1056,     0,   442,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1056,     0,     0,   681,   681,     0,
       0,   681,     0,   681,     0,     0,   681,     0,     0,     0,
     681,     0,     0,     0,     0,     0,     0,  2167,     0,   440,
       0,     0,     0,     0,     0,     0,     0,  1048,     0,     0,
       0,     0,     0,     0,     0,  1056,     0,     0,     0,     0,
       0,     0,     0,     0,   681,   360,     0,     0,     0,   360,
     442,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   440,     0,     0,     0,     0,  1056,
       0,   440,     0,   681,   440,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1045,  1045,  1056,     0,  2214,
       0,     0,     0,     0,   360,     0,     0,     0,     0,  1056,
     440,   440,   440,   440,   440,   440,   440,     0,     0,   440,
     440,     0,   440,   440,   440,   440,   440,   440,   440,   440,
       0,   360,     0,     0,     0,     0,     0,     0,     0,   360,
     440,   440,   440,   440,   440,   440,   440,   440,   440,   440,
     440,   440,   440,   440,   440,   440,   440,   440,     0,   360,
       0,     0,     0,     0,     0,     0,     0,     0,   442,     0,
       0,     0,   731,   734,   736,     0,     0,   442,     0,     0,
       0,     0,     0,   442,     0,     0,     0,     0,     0,   757,
       0,     0,     0,     0,     0,     0,   378,     0,     0,     0,
     440,   440,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   442,     0,     0,     0,     0,   442,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   318,     0,     1,   319,   111,
     320,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,   442,     0,   442,   390,     0,     0,   440,     0,
     440,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   442,     0,
     440,     0,     0,     0,     0,     0,     0,     0,     0,   440,
       0,   323,     0,     0,     0,     0,   324,   325,   326,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   327,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   440,   329,   440,     0,     0,   330,   331,   332,
     333,   334,   335,   336,   337,     0,   580,     0,     0,     0,
       0,     0,     0,   338,   339,     0,     0,   340,     0,     0,
     341,   872,   342,     0,     0,   873,     0,     0,     0,     0,
     343,   344,  1761,   345,   346,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1964,     0,     0,
       0,     0,  1967,  1969,  1973,  1977,  1979,  1983,     0,   442,
     440,  1987,  1991,  1995,  1999,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,     0,     0,     0,     0,   442,     0,     0,     0,
       0,   440,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,   440,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   378,     0,
       0,     0,     0,     0,     0,     0,     0,   360,   360,     0,
       0,     0,   390,     0,     0,     0,   323,     0,     0,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,   442,
       0,     0,     0,     0,   327,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,   440,     0,   440,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,  1297,   342,   580,     0,
     580,     0,   769,     0,     0,   343,   344,   440,   345,   346,
     347,   348,     0,     0,     0,     0,   442,     0,     0,     0,
       0,     0,     0,     0,   440,     0,     0,     0,   440,     0,
       0,   360,     0,     0,     0,   440,     0,     0,     0,   440,
       0,     0,   378,     0,     0,     0,   378,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   442,     0,     0,     0,     0,     0,     0,   442,     0,
       0,   442,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   378,     0,     0,     0,     0,     0,   442,   442,   442,
     442,   442,   442,   442,     0,     0,   442,   442,     0,   442,
     442,   442,   442,   442,   442,   442,   442,     0,   378,     0,
       0,     0,     0,     0,     0,  1751,   378,   442,   442,   442,
     442,   442,   442,   442,   442,   442,   442,   442,   442,   442,
     442,   442,   442,   442,   442,  1044,   378,     0,     0,     0,
       0,     0,     2,   210,   211,   212,   213,   214,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
      20,    21,   259,   260,    24,    25,    26,     0,     0,     0,
       0,     0,   580,     0,     0,     0,     0,   442,   442,     0,
       0,     0,   261,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,   440,     0,     0,     0,   440,
     262,    40,   263,     0,   390,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   264,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   265,   266,   267,
     268,   216,   217,     0,     0,   580,     0,     0,     0,     0,
       0,   440,     0,     0,     0,   442,  -111,   442,     0,     0,
       0,   440,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   440,     0,     0,     0,     0,   440,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   442,     0,     0,
       0,   440,     0,   360,     0,     0,   442,     0,   440,     0,
     440,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   440,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   442,
       0,   442,     0,     0,     0,     0,     0,     0,   390,     0,
     494,     0,   390,   494,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   494,  1044,   494,     0,
     494,     0,     0,     0,  1044,     0,     0,  1044,     0,     0,
       0,     0,   440,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   442,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   390,     0,     0,     0,     0,     0,
       0,     0,   390,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   442,     0,
       0,     0,   390,     0,     0,     0,     0,     0,     0,   442,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   440,     0,     0,     0,   440,   440,   440,     0,     0,
       0,     0,     0,     0,   378,   378,   360,     0,     0,   680,
       0,   440,   440,     0,     0,     0,     0,     0,   360,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   440,
     440,     0,   440,   440,     0,     0,     0,   440,   440,   440,
     440,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     442,     0,   442,     0,   440,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     440,  1044,   477,   580,   442,   477,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   477,     0,
     477,   442,   477,     0,     0,   442,     0,   440,   378,     0,
       0,     0,   442,     0,     0,     0,   442,     0,     0,     0,
       0,     0,   580,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   403,     0,     0,
       0,     0,     0,     0,     0,  1044,     0,  1044,     0,     0,
       2,   210,   211,   212,   213,   214,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,    20,    21,
     259,   260,    24,    25,    26,     0,     0,   360,   360,     0,
     440,   440,   440,   440,   440,   440,   440,   440,     0,     0,
     261,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,   494,   494,     0,     0,   262,    40,
     263,   440,   440,   580,     0,     0,     0,     0,     0,     0,
       0,   440,     0,   264,     0,     0,     0,     0,     0,     0,
     494,   494,     0,    45,    46,   265,   266,   267,   268,   216,
     217,     0,     0,     0,     0,    55,     0,     0,   897,     0,
       0,     0,   494,   494,  1044,  1465,     0,   494,   494,   594,
       0,   494,   494,     0,     0,   580,     0,     0,     0,     0,
    1042,     0,   442,     0,     0,   440,   442,     0,     0,   440,
     440,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     390,   390,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   494,     0,   494,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   442,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   442,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   442,
       0,     0,     0,     0,   442,     0,     0,     0,   580,     0,
       0,     0,     0,     0,     0,     0,   760,     0,   442,     0,
     378,     0,     0,     0,     0,   442,     0,   442,     0,     0,
     580,     0,     0,     0,     0,   680,     0,     0,     0,     0,
       0,     0,     0,     0,   442,     0,     0,     0,     0,     0,
       0,  1044,     0,     0,   390,   360,     0,     0,  1044,     0,
       0,     0,  1044,   680,   680,   680,   680,     0,     0,     0,
       0,     0,     0,   360,     0,     0,   477,   477,   869,     0,
       0,     0,   874,     0,     0,     0,     0,     0,   991,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   442,
       0,     0,   477,   477,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   477,   477,     0,   360,     0,   477,
     477,     0,     0,   477,   477,     0,     0,   760,     0,     0,
       0,     0,  1042,     0,     0,     0,     0,     0,     0,  1042,
       0,     0,  1042,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   477,     0,   477,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   442,     0,
       0,     0,   442,   442,   442,     0,     0,     0,     0,     0,
       0,     0,     0,   378,     0,     0,     0,     0,   442,   442,
       0,     0,     0,     0,     0,   378,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,   442,   442,     0,   442,
     442,     0,     0,     0,   442,   442,   442,   442,     0,     0,
       0,     0,   773,     2,     0,     0,     0,     0,     0,     0,
       0,   442,     0,     0,     0,     0,     0,     0,     0,   801,
       0,     0,     0,     0,  1044,     0,     0,   442,     0,     0,
       0,     0,     0,     0,   580,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     0,     0,   324,   325,   326,
     580,     0,     0,  1144,   442,     0,     0,     0,     0,     0,
     327,   328,     0,     0,     0,     0,   390,   494,   494,     0,
       0,  1044,     0,  1044,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
    1044,     0,  1178,     0,   338,   339,     0,     0,   340,     0,
       0,   341,   872,   342,     0,     0,  1766,   869,   874,     0,
    1767,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   494,     0,   378,   378,     0,   442,   442,   442,
     442,   442,   442,   442,   442,  1044,     0,     0,     0,     0,
       0,     0,     0,     0,   760,     0,     0,   760,     0,     0,
    1042,     0,  1042,     0,     0,     0,     0,     0,   442,   442,
       0,  1258,     0,     0,     0,     0,     0,     0,   442,     0,
     760,     0,     0,     0,     0,   869,   874,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   494,   494,     0,     0,   494,   494,   494,
       0,     0,  1304,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   442,     0,     0,     0,   442,   442,   580,     0,
     580,     0,     0,     0,     0,     0,     0,     0,     0,   390,
    1356,     0,     0,     0,   580,   580,     0,     0,  1369,     0,
       0,   390,     0,     0,     0,     0,     0,     0,     0,  1042,
       0,     0,   680,     0,     0,   680,     0,     0,  1420,     0,
       0,     0,     0,     0,   680,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   869,   874,     0,     0,     0,   869,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   680,     0,     0,     0,     0,     0,   680,   680,
     680,   680,     0,  1044,     0,  1176,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   494,   494,     0,     0,
       0,     0,     0,     0,   477,     0,     0,     0,     0,     0,
     760,     0,   378,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     378,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1042,     0,     0,     0,
       0,     0,     0,  1042,     0,   477,   477,  1042,     0,   477,
     477,   477,     0,     0,   378,     0,     0,     0,     0,     0,
     390,   390,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   773,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1306,     0,     0,
       0,     0,     0,     0,     0,   580,     0,     0,     0,     0,
       0,     0,     0,     0,   580,     0,  1329,  1333,  1337,  1341,
    1345,     0,     0,  1354,  1360,     0,     0,     0,     0,   773,
       0,     0,  1371,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1395,  1399,  1403,  1407,  1411,     0,
       0,  1354,  1424,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1306,     0,     0,     0,     0,     0,  1371,
       0,     0,   580,   580,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   477,   477,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   869,
       0,     0,     0,     0,     0,     0,     0,     0,  1638,  1640,
       0,  1643,     0,     0,     0,     0,     0,     0,     0,  1178,
       0,     0,     0,     0,     0,     0,  1662,     0,     0,     0,
       0,     0,     0,   869,   874,     0,     0,     0,   231,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1042,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   390,  1688,
       0,  1692,   231,     0,     0,     0,     0,   494,   494,     0,
     444,     0,     0,     0,     0,     0,   390,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1042,     0,  1042,     0,
     536,     0,     0,   869,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   494,   494,     0,     0,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,     0,     0,     0,     0,   869,
     874,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1042,     0,     0,     0,     0,   680,   680,     0,     0,     0,
       0,     0,     0,     0,     0,   680,     0,   680,   680,     0,
     318,   680,     1,   319,   111,   320,     0,   321,   322,   680,
       0,   869,   680,   874,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   869,   874,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1176,  1157,  1158,  1159,   660,  1160,  1161,  1162,
    1163,   665,   666,  1164,     0,     0,   323,     0,     0,     0,
       0,   324,   325,   326,     0,   869,     0,   874,     0,    34,
       0,     0,     0,     0,   327,   328,  1165,     0,   670,   671,
     672,     0,     0,     0,     0,     0,     0,     0,   329,   477,
     477,     0,   330,   331,   332,   333,   334,   335,   336,   337,
      45,    46,  1354,     0,  1354,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,  -454,   342,   673,     0,
    -454,     0,   270,     0,   674,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,   859,     0,     0,     0,
       0,     0,     0,   477,   477,     0,     0,     0,  1042,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1753,     0,   494,     0,   494,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   904,   536,     0,     0,     0,   913,
       0,     0,   494,     0,   494,     0,     0,     0,   920,     0,
       0,   927,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   680,   680,
     680,   680,     0,     0,   680,     0,     0,     0,   680,   680,
       0,   680,     0,   680,     0,   978,     0,     0,     0,     0,
       0,   994,     0,     0,     0,   680,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1862,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   869,   874,   869,   874,     0,   869,  1882,
       0,     0,     0,     0,  1638,  1889,     0,  1662,     0,   874,
       0,     0,     0,     0,     0,     0,     0,   869,   874,  1662,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   231,     0,     0,    78,     0,     0,     0,     0,     0,
       0,   231,     0,   869,     0,   874,     0,   869,     0,   874,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   231,     0,     0,   231,     0,   231,     0,   231,     0,
     494,   494,   494,   494,   494,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   494,   494,   494,   494,   477,   123,
     477,     0,     0,     0,     0,     0,   680,     0,     0,     0,
       0,     0,     0,     0,     0,   680,     0,   680,     0,     0,
       0,     0,     0,     0,   477,     0,   477,     0,     0,     0,
       0,   186,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,    78,     0,     0,     0,     0,     0,     0,    78,
      78,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   494,   494,   408,     0,
       0,     0,     0,   680,   680,     0,     0,   680,     0,   680,
       0,     0,   680,     0,     0,     0,   680,     0,     0,     0,
       0,     0,   509,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   509,     0,     0,     0,   509,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     680,     0,     0,     0,     0,     0,     0,   869,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,   277,
       0,     0,     0,     0,     0,     0,     0,   869,     0,   680,
       0,     0,   874,     0,   869,  1882,     0,   874,  1662,     0,
    2047,     0,  2049,     0,     0,     0,     0,     0,   874,  2053,
       0,     0,     0,     0,     0,   601,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   477,   477,   477,   477,   477,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   477,   477,   477,   477,
       0,     0,     0,   760,     0,     0,     0,     0,     0,     0,
     859,   859,   859,     0,     0,   642,     0,     0,   277,   277,
     277,     0,     0,     0,     0,     0,     0,     0,   186,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   186,   277,
      78,     0,     0,   444,   444,   231,  1753,     0,     0,     1,
       0,  1966,  1968,  1972,  1976,  1978,  1982,     0,   741,     0,
    1986,  1990,  1994,  1998,   741,     0,     0,     0,   477,   477,
       0,     0,     0,     0,     2,   763,     0,     0,     0,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,  2112,
    2115,     0,   869,   874,   869,     0,     0,     0,   869,  1882,
       0,     0,     0,     0,    29,     0,     0,     0,  1509,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,   444,     0,     0,     0,    42,     0,     0,
     536,   536,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   536,     0,     0,     0,   869,   874,    55,
     869,  1882,   897,     0,     0,  2160,     0,     0,   601,     0,
       0,     0,     0,   594,   909,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   909,     0,     0,     0,     0,
       0,     0,     0,  1968,  1972,  1978,  1982,  1986,  1990,  1994,
    1998,     0,    96,     0,     0,   869,     0,     0,     0,     0,
       0,   318,     0,     1,   319,   111,   320,     0,   321,   322,
     601,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1000,     2,     0,
       0,     0,   231,     0,     0,     0,     0,   231,     0,     0,
       0,     0,     0,  1610,     0,     0,     0,   126,   138,  1610,
     601,     0,     0,     0,     0,   231,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   323,     0,     0,
       0,   277,   324,   325,   326,     0,     0,     0,   277,   191,
     138,   277,     0,     0,   242,   327,   328,     0,     0,     0,
      96,     0,     0,     0,     0,     0,     0,    96,    96,   329,
       0,     0,     0,   330,   331,   332,   333,   334,   335,   336,
     337,     0,     0,     0,     0,     0,   409,     0,     0,   338,
     339,     0,     0,   340,     0,     0,   341,   872,   342,   420,
     683,   873,     0,     0,     0,     0,   343,   344,  1771,   345,
     346,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   444,   231,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   558,  1181,     0,   761,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   574,     0,     0,
       0,     0,     0,     0,   277,   277,   277,   277,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   608,     0,     0,     0,     0,     0,     0,
       0,     0,   277,   277,   277,     0,     0,   186,     0,     0,
       0,     0,     0,  1231,     0,     0,     0,   870,     0,     0,
       0,   277,     0,     0,     0,     0,     0,     0,  1244,  1254,
     763,     0,  1244,  1254,     0,     0,     0,     0,     0,  1231,
       0,     0,  1231,   138,     0,     0,     0,     0,     0,     0,
    1275,     0,     0,   277,     0,     1,   191,     0,     0,     0,
     277,     0,     0,   277,     0,     0,   717,     0,    96,     0,
       0,     0,     0,     0,     0,     0,   761,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,   592,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,   859,   859,    37,    38,     0,    39,    40,
      41,     0,     0,   601,     0,     0,     0,   318,     0,     1,
     319,   111,   320,    42,   321,   322,     0,     0,   444,     0,
       0,     0,   444,    45,    46,    47,    48,    49,    50,   216,
     217,     0,     0,     0,     2,    55,     0,     0,   593,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   601,   594,
       0,   595,     0,     0,     0,     0,  1468,   601,     0,     0,
       0,     0,     0,     0,   601,     0,   899,  1468,   123,   763,
       0,   601,     0,   323,     0,     0,     0,     0,   324,   325,
     326,     0,     0,     0,   138,   444,     0,     0,     0,     0,
       0,   327,   328,     0,     0,     0,     0,   444,  1828,   444,
    1828,     0,     0,     0,     0,   329,     0,     0,     0,   330,
     331,   332,   333,   334,   335,   336,   337,     0,   973,     0,
       0,   981,   601,     0,     0,   338,   339,     0,     0,   340,
       0,     0,   341,   872,   342,  1669,     0,   873,   601,     0,
       0,  1179,   343,   344,     0,   345,   346,   347,   348,     0,
       0,     0,     0,     0,     0,     0,   870,     0,   899,     0,
       0,     0,     0,     0,   683,   683,   683,   683,     0,     0,
       0,     0,     0,     0,   138,   138,   138,   138,   138,     0,
       0,   277,   277,   277,     0,     0,     0,     0,     0,   642,
       0,     0,     0,     0,   138,   138,     0,     0,     0,     0,
       0,     0,     0,   761,     0,     0,   761,     0,     0,     0,
       0,     0,     0,     0,     0,  1092,     0,  1101,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1103,   761,
       0,     0,     0,     0,   870,     0,     0,     0,     0,     0,
       0,   536,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1305,     0,     0,     0,     0,     0,   574,     0,     0,
       0,     0,     0,     0,   444,     0,   231,     0,     0,   444,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     277,     0,     0,   277,     0,     0,   277,     0,     0,  1358,
       0,     0,     0,     0,     0,     0,     0,  1370,     0,  1181,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1422,     0,     0,
       0,     0,     0,   277,     0,     0,     0,     0,  1215,   277,
     277,   277,   277,   870,     0,   717,     0,   444,   870,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,     0,   277,     0,  1249,     0,     0,     0,
    1249,     0,     0,     0,     0,     0,     0,     0,  1700,     0,
       0,   642,     0,     0,     0,     0,     0,     0,   899,   318,
       0,     1,   319,   111,   320,     0,   321,   322,     0,   761,
       0,  1726,     0,     0,     0,     0,     0,     0,  1726,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   277,   277,     0,     0,
       0,     0,     0,   277,   277,     0,     0,   277,   277,     0,
       0,     0,  1157,  1158,  1159,   660,  1160,  1161,  1162,  1163,
     665,   666,  1164,     0,     0,   323,     0,     0,     0,     0,
     324,   325,   326,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,   327,   328,  1165,     0,   670,   671,   672,
       0,     0,     0,     0,     0,     0,     0,   329,     0,     0,
       0,   330,   331,   332,   333,   334,   335,   336,   337,    45,
      46,     0,     0,     0,   444,     0,     0,   338,   339,     0,
       0,   340,     0,     0,   341,     0,   342,   673,     0,   899,
    1458,   270,     0,   674,   343,   344,   899,   345,   346,   347,
     348,     0,     0,     0,   899,  1472,     0,     0,     0,     0,
       0,     0,  1479,     0,     0,   899,   126,   138,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   276,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     444,     0,   444,     0,     0,     0,   138,     0,     0,     0,
       0,     0,     0,     0,  1512,     0,     0,     0,     0,     0,
     608,     0,     0,     0,     0,     0,   138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   973,     0,   870,     0,
       0,     0,     0,   683,     0,     0,   683,  1639,  1641,     0,
    1644,     0,     0,     0,     0,     0,     0,     0,  1654,     0,
       0,     0,     0,     0,     0,  1663,     0,     0,     0,     0,
     277,     0,   870,   601,   276,   276,     0,     0,     0,     0,
       0,     0,     0,   683,     0,     0,     0,   973,     0,   683,
     683,   683,   683,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   600,     0,     0,     0,     0,     0,     0,  1690,     0,
    1694,   318,     0,     1,   319,   111,   320,     0,   321,   322,
       0,     0,     0,  1591,     0,     0,     0,     0,     0,     0,
       0,     0,  1599,     0,     0,     0,     0,     0,     2,     0,
       0,     0,   870,     0,     0,     0,     0,     0,     0,     0,
       0,   641,     0,     0,   276,   276,   276,     0,     0,     0,
       0,     0,     0,     0,   601,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   276,     0,   323,     0,     0,
     277,   277,   324,   325,   326,     0,   277,   277,   870,     0,
       0,     0,     0,     0,   740,   327,   328,     0,     0,   277,
     740,     0,   277,     0,     0,     0,     0,     0,     0,   329,
     277,   762,     0,   330,   331,   332,   333,   334,   335,   336,
     337,     0,     0,     0,     0,     0,     0,     0,     0,   338,
     339,     0,     0,   340,     0,     0,   341,   872,   342,     0,
     870,  1766,     0,     0,     0,  1774,   343,   344,     0,   345,
     346,   347,   348,   870,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   899,     0,     0,   899,
       0,  1249,     0,     0,     0,     0,     0,     0,     0,  1717,
       0,     0,     0,   318,     0,     1,   319,   111,   320,  1249,
     321,   322,     0,   763,     0,     0,  1249,     0,     0,     0,
       0,     0,     0,     0,   870,     0,     0,     0,     0,     0,
       2,     0,     0,     0,   600,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1157,  1158,  1159,   660,
    1160,  1161,  1162,  1163,   665,   666,  1164,     0,     0,   323,
       0,     0,     0,     0,   324,   325,   326,     0,   277,   277,
       0,     0,    34,     0,     0,     0,   600,   327,   328,  1165,
       0,   670,   671,   672,     0,     0,     0,     0,     0,     0,
       0,   329,   601,     0,     0,   330,   331,   332,   333,   334,
     335,   336,   337,    45,    46,     0,     0,     0,     0,     0,
       0,   338,   339,     0,     0,   340,   600,     0,   341,   872,
     342,   673,     0,   873,     0,   270,     0,   674,   343,   344,
       0,   345,   346,   347,   348,     0,     0,   276,     0,     0,
       0,     0,     0,     0,   276,     0,     0,   276,     0,   277,
     277,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1786,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   763,  1793,     0,     0,     0,     0,     0,     0,
    1796,     0,     0,     0,     0,     0,   683,   683,   420,     0,
       0,     0,   870,     0,   870,     0,     0,   870,   683,     0,
       0,     0,     0,  1887,  1890,     0,  1892,     0,     0,  1479,
       0,   608,     0,     0,     0,     0,   870,     0,  1903,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     276,   276,   276,   276,     0,     0,     0,     0,     0,     0,
       0,     0,   870,     0,     0,     0,   870,     0,   579,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   276,   276,
     276,     0,     0,     0,     0,     0,     0,     0,     0,  1230,
       0,     0,     0,     0,     0,     0,     0,   276,     0,     0,
       0,     0,     0,     0,  1243,  1253,   762,     0,  1243,  1253,
       0,     0,  1852,     0,     0,  1230,     0,     0,  1230,     0,
       0,     0,     0,     0,     0,     0,  1274,     0,   279,   276,
       0,     0,   608,     0,     0,     0,   276,     0,     0,   276,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   726,     0,     0,     0,
       0,     0,     0,     0,     0,   579,     0,     0,     0,     0,
       0,   579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   600,
       0,     0,     0,     0,     0,   279,   279,     0,     0,     0,
       0,     0,  1929,     0,     0,     0,   870,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   683,   870,     0,     0,     0,
       0,     0,   603,   870,   600,     0,     0,  1892,     0,  2048,
     579,     0,   579,   600,     0,     0,     0,     0,  2054,     0,
     600,     0,     0,     0,     0,   762,     0,   600,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1458,     0,     0,
       0,     0,   644,     0,     0,   279,   279,   279,     0,     0,
       0,     0,   761,     0,     0,     0,     0,     0,     0,  1796,
       0,     0,     0,     0,     0,     0,   279,     0,   600,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     899,     0,     0,     0,   600,   743,     0,     0,     0,     0,
       0,   743,     0,   318,     0,     1,   319,   111,   320,     0,
     321,   322,   765,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,   276,   276,   276,
       0,     0,     0,     0,     0,   641,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1043,  2113,  2116,
       0,   870,     0,   870,     0,     0,   683,   870,   683,   323,
       0,     0,     0,     0,   324,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,   328,     0,
    1717,     0,     0,     0,   579,     0,     0,     0,     0,     0,
       0,   329,     0,     0,     0,   330,   331,   332,   333,   334,
     335,   336,   337,     0,     0,   603,     0,     0,     0,     0,
       0,   338,   339,     0,     0,   340,   870,     0,   341,   870,
     342,     0,     0,  2095,  2096,  1055,     0,   683,   343,   344,
       0,   345,   346,   347,   348,     0,   276,     0,     0,   276,
       0,     0,   276,     0,     0,     0,     0,   579,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   603,     0,     0,
       0,     0,     0,     0,   870,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   276,
       0,     0,     0,     0,     0,   276,   276,   276,   276,     0,
       0,     0,     0,     0,     0,     0,     0,   603,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   276,     0,
     276,     0,     0,     0,  1223,     0,     0,     0,   279,     0,
       0,     0,     0,     0,  1699,   279,     0,   641,   279,     0,
       0,     0,     0,     0,     0,     0,     0,  -879,     0,     0,
    -879,  -879,  -879,     0,  -879,  -879,     0,  1725,     0,     0,
       0,     0,     0,     0,  1725,     0,     0,     0,     0,  1043,
       0,     0,     0,     0,     0,     0,  1043,     0,     0,  1043,
       0,     0,   276,   276,     0,     0,     0,     0,     0,   276,
     276,     0,     0,   276,   276,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -879,     0,     0,     0,     0,  -879,  -879,
    -879,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -879,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   128,     0,     0,     0,  -879,     0,     0,   145,  -879,
    -879,  -879,  -879,  -879,  -879,  -879,  -879,     0,     0,     0,
       0,   279,   279,   279,   279,  -879,  -879,     0,     0,     0,
       0,   168,   179,   204,  -879,  -879,     0,  -879,  -879,  -879,
       0,     0,  -879,  -879,     0,  -879,  -879,  -879,  -879,   279,
     279,   279,     0,     0,     0,     0,     0,     0,     0,     0,
    1233,     0,     0,     0,     0,     0,     0,     0,   279,     0,
       0,     0,     0,     0,     0,  1246,  1256,   765,     0,  1246,
    1256,     0,   128,   128,     0,     0,  1233,     0,     0,  1233,
       0,     0,     0,     0,     0,     0,     0,  1277,     0,   519,
     279,     0,     0,     0,     0,     0,     0,   279,     0,     0,
     279,     0,     0,     0,     0,   550,     0,     0,     0,     0,
       0,     0,     0,  1043,     0,   579,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   579,     0,   276,     0,     0,   600,
       0,     0,     0,     0,     0,   168,   597,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     603,     0,     0,     0,     0,     0,     0,  1043,     0,  1043,
     131,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   179,     0,     0,     0,
       0,   131,   131,     0,     0,   603,     0,     0,     0,   179,
       0,     0,     0,     0,   603,     0,     0,     0,     0,   597,
       0,   603,     0,     0,     0,     0,   765,     0,   603,     0,
       0,     0,     0,     0,     0,   579,     0,     0,     0,     0,
     600,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   131,     0,     0,     0,   276,   276,     0,     0,
       0,     0,   276,   276,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   276,  1043,     0,   276,   603,
       0,     0,     0,     0,     0,     0,   276,   579,     0,     0,
       0,     0,     0,     0,     0,   603,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   128,     0,     0,   279,   279,
     279,   128,     0,     0,     0,   605,   644,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   762,
     579,     0,     0,     0,     0,     0,     0,   597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   579,     0,     0,   131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,     0,
       0,   597,     0,  1043,     0,     0,     0,     0,   714,     0,
    1043,     0,     0,     0,  1043,     0,     0,   168,     0,     0,
       0,     0,     0,     0,   276,   276,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   279,     0,     0,
     279,     0,     0,   279,     0,     0,     0,     0,   600,     0,
       0,     0,     0,     0,     0,     0,     0,   128,   128,   128,
     128,   128,     0,   128,     0,     0,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   128,   128,   128,
     279,     0,     0,     0,     0,     0,   279,   279,   279,   279,
       0,     0,     0,     0,     0,     0,   550,     0,   597,     0,
     128,     0,     0,     0,     0,   276,   276,     0,     0,   279,
       0,   279,     0,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,  1702,     0,     0,   644,     0,
     605,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1728,     0,
       0,     0,     0,     0,     0,  1728,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,     0,   762,     0,
       0,     0,     0,   279,   279,     0,     0,     0,     0,     0,
     279,   279,     0,     0,   279,   279,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     605,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1211,     0,  1899,     0,     1,   319,
     111,   320,   128,   321,   322,     0,  1043,     0,   597,     0,
       0,     0,     0,     0,     0,     0,   579,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,   579,     0,     0,     0,   131,   131,   131,   131,
     131,     0,   131,     0,     0,   714,     0,     0,     0,     0,
       0,     0,     0,  1043,     0,  1043,   131,   131,   131,     0,
       0,     0,   323,     0,     0,     0,     0,   324,   325,   326,
       0,     0,  1043,     0,     0,     0,     0,   131,     0,   605,
     327,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   605,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,   872,   342,  1900,     0,   873,  1043,     0,     0,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   279,     0,     0,
     603,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   168,     0,   597,     0,
       0,   714,     0,     0,     0,   597,     0,   714,     0,     0,
     597,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     579,     0,   579,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   579,   579,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   128,
     274,     0,     0,     0,     0,     0,     0,     0,   128,     0,
       0,     0,     0,   597,  1970,  1974,     0,  1980,  1984,   128,
       0,     0,  1988,  1992,  1996,  2000,     0,     0,     0,   597,
       0,   603,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   279,   279,     0,
       0,   507,     0,   279,   279,  1043,     0,     0,     0,     0,
       0,     0,     0,   507,     0,     0,   279,   507,     0,   279,
       0,     0,     0,     0,     0,     0,     0,   279,     0,     0,
     597,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   274,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   128,   128,     0,     0,
       0,     0,   275,     0,   599,     0,   128,     0,   128,     0,
       0,     0,     0,     0,     0,     0,     0,   605,     0,     0,
       0,     0,     0,     0,   605,     0,     0,     0,     0,   131,
     765,     0,     0,     0,     0,  1970,  1974,  1980,  1984,  1988,
    1992,  1996,  2000,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   275,   640,     0,     0,   274,   274,   274,
       0,     0,     0,     0,     0,   275,     0,   579,   131,   275,
       0,     0,     0,     0,     0,     0,   579,   605,   274,     0,
       0,     0,   605,     0,     0,     0,     0,     0,   131,     0,
       0,     0,     0,     0,     0,   279,   279,   739,   605,   275,
     275,     0,     0,   739,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   603,
     128,     0,   128,     0,     0,     0,     0,     0,     0,     0,
    1043,     0,     0,     0,   579,   579,     0,     0,     0,     0,
     318,     0,     1,   319,   111,   320,     0,   321,   322,   605,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,   279,   279,     0,     0,
       0,     0,     0,     0,     0,     0,   275,     0,     0,   275,
     275,   275,     0,     0,     0,   131,   131,     0,     0,     0,
       0,     0,     0,     0,     0,   605,   323,   605,     0,     0,
     275,   324,   325,   326,     0,     0,     0,   599,     0,     0,
       0,     0,     0,   908,   327,   328,     0,     0,     0,   275,
       0,     0,     0,     0,   908,   275,     0,     0,   329,   765,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     0,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,   872,   342,     0,   599,
    1766,     0,     0,     0,  1917,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,   999,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   318,     0,     1,
     319,   111,   320,     0,   321,   322,     0,     0,     0,   599,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   714,
       0,   714,     0,     0,     2,     0,     0,     0,     0,     0,
     274,     0,     0,   127,     0,     0,     0,   274,     0,     0,
     274,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   275,     0,     0,     0,     0,
       0,     0,     0,   323,     0,     0,   275,     0,   324,   325,
     326,    30,    31,     0,     0,     0,    34,   128,     0,     0,
       0,   327,   328,    40,   128,     0,     0,     0,     0,     0,
       0,   128,     0,     0,     0,   329,     0,     0,     0,   330,
     331,   332,   333,   334,   335,   336,   337,    45,    46,     0,
       0,     0,   128,     0,   597,   338,   339,   128,   275,   924,
     128,     0,   925,   759,   342,     0,     0,     0,     0,     0,
       0,     0,   343,   344,     0,   345,   346,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   318,     0,     1,   319,   111,   320,     0,
     321,   322,   275,   274,   274,   274,   274,     0,     0,   275,
       0,     0,   275,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   274,   274,   274,     0,     0,   128,     0,     0,     0,
       0,     0,     0,     0,   128,     0,     0,     0,     0,     0,
     274,     0,     0,     0,     0,   597,     0,  1242,  1252,   323,
       0,  1242,  1252,     0,   324,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   327,   328,     0,
       0,     0,   274,     0,     0,     0,     0,     0,     0,   274,
       0,   329,   274,     0,     0,   330,   331,   332,   333,   334,
     335,   336,   337,     0,     0,     0,     0,     0,     0,     0,
       0,   338,   339,     0,     0,   340,   605,     0,   341,  1364,
     342,     0,     0,   605,     0,   769,     0,     0,   343,   344,
     131,   345,   346,   347,   348,   275,   275,   275,   275,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   605,     0,   605,     0,     0,   605,     0,     0,   605,
       0,     0,     0,   275,   275,   275,     0,     0,     0,     0,
       0,     0,   599,     0,     0,     0,   318,     0,     1,   319,
     111,   320,   275,   321,   322,     0,     0,     0,     0,   275,
     275,     0,     0,   275,   275,     0,     0,     0,     0,     0,
       0,     0,   280,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   275,     0,     0,   599,     0,     0,
       0,   275,     0,     0,   275,  1467,   599,     0,     0,     0,
       0,     0,     0,   599,     0,   131,  1467,     0,   128,   128,
     599,   128,   323,   605,     0,     0,     0,   324,   325,   326,
       0,     0,     0,   280,   605,     0,     0,     0,     0,     0,
     327,   328,     0,     0,     0,   280,     0,     0,     0,   280,
       0,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
       0,   599,   650,     0,   338,   339,     0,   128,   340,   280,
     280,   341,   872,   342,     0,     0,  1766,   599,     0,     0,
    1921,   343,   344,     0,   345,   346,   347,   348,     0,     2,
     210,   211,   212,   213,   214,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,    20,    21,   259,
     260,    24,    25,    26,     0,     0,     0,     0,     0,     0,
     274,   274,   274,     0,     0,     0,     0,   275,   640,   261,
       0,     0,     0,     0,     0,     0,    30,    31,   275,     0,
       0,    34,     0,     0,     0,     0,     0,   262,    40,   263,
       0,     0,     0,     0,     0,     0,   280,     0,     0,   280,
     280,   280,   264,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,   265,   266,   267,   268,   216,   217,
     280,     0,     0,   269,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   270,     0,     0,     0,     0,   280,
       0,     0,     0,     0,     0,   280,     0,   605,   605,     0,
     605,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   274,
       0,     0,   274,     0,     0,   274,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   275,   275,   275,     0,     0,     0,     0,     0,
     275,     0,     0,     0,     0,     0,   131,     0,     0,     0,
       0,     0,   274,     0,     0,     0,     0,     0,   274,   274,
     274,   274,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   274,     0,   274,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     640,     0,     0,     0,     0,   280,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   280,     0,     0,     0,
    1724,     0,     0,     0,     0,     0,     0,  1724,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   275,     0,     0,   275,   274,   274,   275,     0,     0,
       0,     0,   274,   274,     0,     0,   274,   274,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   280,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   275,     0,     0,     0,     0,     0,
     275,   275,   275,   275,     0,     0,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,     0,     0,
       0,     0,   280,   275,     0,   275,     0,     0,     0,   280,
       0,     0,   280,     2,     0,     0,     0,     0,     0,     0,
       0,     0,   275,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   275,     0,     0,     0,     0,     0,     0,   275,
       0,     0,   323,     0,     0,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,   275,   275,     0,
     327,   328,     0,     0,   275,   275,     0,     0,   275,   275,
       0,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,   872,   342,  1900,     0,   873,     0,     0,     0,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,     0,     0,     0,   280,   280,   280,   280,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   274,
       0,     0,   599,   280,   280,   280,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   280,     0,     0,     0,     0,     0,     0,   280,
     280,     0,     0,   280,   280,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   280,     0,     0,     0,     0,     0,
       0,   280,     0,  2051,   280,     1,   319,   111,   320,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   599,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   274,
     274,     0,     0,     0,     0,   274,   274,     0,     0,   323,
       0,   275,     0,     0,   324,   325,   326,     0,   274,     0,
       0,   274,     0,     0,     0,     0,     0,   327,   328,   274,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,     0,     0,     0,   330,   331,   332,   333,   334,
     335,   336,   337,     0,     0,     0,     0,     0,     0,     0,
       0,   338,   339,     0,     0,   340,     0,     0,   341,   872,
     342,  1900,     0,   873,     0,     0,     0,   280,   343,   344,
       0,   345,   346,   347,   348,     0,     0,     0,   280,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1879,
       0,     1,   319,   111,   320,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   275,   275,     0,     0,     0,     2,   275,   275,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     275,     0,     0,   275,     0,     0,     0,     0,     0,     0,
       0,   275,  1157,  1158,  1159,   660,  1160,  1161,  1162,  1163,
     665,   666,  1164,     0,     0,   323,     0,   274,   274,     0,
     324,   325,   326,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,   327,   328,  1165,     0,   670,   671,   672,
       0,   599,   280,   280,   280,     0,     0,   329,     0,     0,
     280,   330,   331,   332,   333,   334,   335,   336,   337,    45,
      46,     0,     0,     0,     0,     0,     0,   338,   339,     0,
       0,   340,     0,   209,   341,     1,   342,   673,     0,     0,
       0,   270,     0,   674,   343,   344,     0,   345,   346,   347,
     348,     0,     0,     0,     0,     0,     0,     0,   274,   274,
       2,   210,   211,   212,   213,   214,     8,     9,    10,   592,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   215,
      29,     0,     0,     0,     0,     0,     0,    30,    31,   275,
     275,   280,    34,     0,   280,    37,    38,   280,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   216,
     217,     0,     0,     0,   280,    55,     0,     0,   593,  1087,
     280,   280,   280,   280,     0,     0,     0,     0,     0,   594,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   280,     0,   280,     0,     0,     0,     0,
     275,   275,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   280,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   280,     0,     0,     0,     0,     0,     0,   280,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   280,   280,     0,
       0,     0,     0,     0,   280,   280,     0,     0,   280,   280,
    -345,   781,     0,  -345,  -345,  -345,  -345,   782,   783,   784,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,
       0,     0,  -345,  -345,  -345,  -345,  -345,     0,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,     0,  -345,
    -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,  -345,  -345,  -345,  -345,   785,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,   786,  -345,  -345,   787,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -451,   866,
       0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,   280,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,     0,     0,  -451,  -451,  -451,     0,     0,
    -451,  -451,  -451,  -451,  -451,     0,     0,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,     0,  -451,     0,  -451,  -451,  -451,
       0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   280,   280,     0,     0,     0,     0,   280,   280,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     280,     0,     0,   280,     0,     0,     0,     0,     0,  -304,
     318,   280,     1,   319,   111,   320,  -304,   321,   322,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,     2,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,     0,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,     0,     0,   323,  -304,  -304,     0,
       0,   324,   325,   326,  -304,  -304,     0,     0,  -304,  -304,
    -304,  -304,  -304,  -304,   327,   328,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,     0,  -304,     0,   329,  -304,
    -304,     0,   330,   331,   332,   333,   334,   335,   336,   337,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,   338,   339,
       0,  -304,   340,  -304,  -304,   341,  1272,   342,  -304,  -304,
    1193,  -304,  -304,  -304,  -304,   343,   344,  -304,   345,   346,
     347,   348,  -304,  -304,  -304,  -304,  -304,     0,     0,   280,
     280,     0,     0,  -305,   318,     0,     1,   319,   111,   320,
    -305,   321,   322,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,     2,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,     0,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,     0,
     323,  -305,  -305,     0,     0,   324,   325,   326,  -305,  -305,
     280,   280,  -305,  -305,  -305,  -305,  -305,  -305,   327,   328,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,
    -305,     0,   329,  -305,  -305,     0,   330,   331,   332,   333,
     334,   335,   336,   337,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,   338,   339,     0,  -305,   340,  -305,  -305,   341,
     872,   342,  -305,  -305,   873,  -305,  -305,  -305,  -305,   343,
     344,  -305,   345,   346,   347,   348,  -305,  -305,  -305,  -305,
    -305,  -566,   318,     0,     1,   319,   111,   320,  -566,   321,
     322,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,     2,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,     0,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,     0,     0,   323,  -566,
    -566,     0,     0,   324,   325,   326,  -566,  -566,     0,     0,
    -566,  -566,  -566,  -566,  -566,  -566,   327,   328,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,  -566,     0,
     329,  -566,  -566,     0,   330,   331,   332,   333,   334,   335,
     336,   337,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
     338,   339,     0,  -566,   340,  -566,  -566,   341,  -566,   342,
    -566,  -566,  -566,  -566,   769,  -566,  1353,   343,   344,  -566,
     345,   346,   347,   348,  -566,  -566,  -566,  -566,  -566,  -567,
     318,     0,     1,   319,   111,   320,  -567,   321,   322,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,     2,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,     0,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,     0,     0,   323,  -567,  -567,     0,
       0,   324,   325,   326,  -567,  -567,     0,     0,  -567,  -567,
    -567,  -567,  -567,  -567,   327,   328,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,     0,  -567,     0,   329,  -567,
    -567,     0,   330,   331,   332,   333,   334,   335,   336,   337,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,   338,   339,
       0,  -567,   340,  -567,  -567,   341,  -567,   342,  -567,  -567,
    -567,  -567,   769,  -567,  1419,   343,   344,  -567,   345,   346,
     347,   348,  -567,  -567,  -567,  -567,  -567,  -577,   318,     0,
       1,   319,   111,   320,  -577,   321,   322,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,     2,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,     0,   323,  -577,  -577,     0,     0,   324,
     325,   326,  -577,  -577,     0,     0,  -577,  -577,  -577,  -577,
    -577,  -577,   327,   328,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,     0,  -577,     0,   329,  -577,  -577,     0,
     330,   331,   332,   333,   334,   335,   336,   337,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,   338,   339,     0,  -577,
     340,  -577,  -577,   341,  -577,   342,  -577,  -577,  1193,  -577,
    -577,  -577,  -577,   343,   344,  -577,   345,   346,   347,   348,
    -577,  -577,  -577,  -577,  -577,  -579,   318,     0,     1,   319,
     111,   320,  -579,   321,   322,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,     2,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,     0,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
       0,     0,   323,  -579,  -579,     0,     0,   324,   325,   326,
    -579,  -579,     0,     0,  -579,  -579,  -579,  -579,  -579,  -579,
     327,   328,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,     0,  -579,     0,   329,  -579,  -579,     0,   330,   331,
     332,   333,   334,   335,   336,   337,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,   338,   339,     0,  -579,   340,  -579,
    -579,   341,   872,   342,  -579,  -579,   873,  -579,  -579,  -579,
    -579,   343,   344,  -579,   345,   346,   347,   348,  -579,  -579,
    -579,  -579,  -579,  -578,   318,     0,     1,   319,   111,   320,
    -578,   321,   322,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,     2,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,     0,
     323,  -578,  -578,     0,     0,   324,   325,   326,  -578,  -578,
       0,     0,  -578,  -578,  -578,  -578,  -578,  -578,   327,   328,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,
    -578,     0,   329,  -578,  -578,     0,   330,   331,   332,   333,
     334,   335,   336,   337,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,   338,   339,     0,  -578,   340,  -578,  -578,   341,
    -578,   342,  -578,  -578,  1193,  -578,  -578,  -578,  -578,   343,
     344,  -578,   345,   346,   347,   348,  -578,  -578,  -578,  -578,
    -578,  -338,  1925,     0,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,     0,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,     0,     0,  -338,  -338,
    -338,     0,     0,  -338,  -338,  -338,  -338,  -338,     0,     0,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,  -338,     0,
    -338,  -338,  -338,     0,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,     0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -342,
    1961,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,     0,     0,  -342,  -342,  -342,     0,
       0,  -342,  -342,  -342,  -342,  -342,     0,     0,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,     0,  -342,     0,  -342,  -342,
    -342,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
       0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -332,   318,     0,
       1,   319,   111,   320,  -332,   321,   322,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,     2,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
       0,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,     0,     0,   323,  -332,  -332,     0,     0,   324,
     325,   326,  -332,  -332,     0,     0,  -332,  -332,  -332,  -332,
    -332,  -332,   327,   328,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,     0,  -332,     0,   329,  -332,  -332,     0,
     330,   331,   332,   333,   334,   335,   336,   337,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,   338,   339,     0,  -332,
     340,  -332,  -332,   341,  -332,   342,  -332,  -332,  -332,  -332,
     769,  -332,  -332,   343,   344,  -332,   345,   346,   347,   348,
    -332,  -332,  -332,  -332,  -332,  -544,   318,     0,     1,   319,
     111,   320,  -544,   321,   322,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,     2,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,     0,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
       0,     0,   323,  -544,  -544,     0,     0,   324,   325,   326,
    -544,  -544,     0,     0,  -544,  -544,  -544,  -544,  -544,  -544,
     327,   328,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,     0,  -544,     0,   329,  -544,  -544,     0,   330,   331,
     332,   333,   334,   335,   336,   337,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,   338,   339,     0,  -544,   340,  -544,
    -544,   341,  -544,   342,  -544,  -544,  -544,  -544,   769,  -544,
    -544,   343,   344,  -544,   345,   346,   347,   348,  -544,  -544,
    -544,  -544,  -544,  -552,   318,     0,     1,   319,   111,   320,
    -552,   321,   322,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,     2,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,     0,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,     0,
     323,  -552,  -552,     0,     0,   324,   325,   326,  -552,  -552,
       0,     0,  -552,  -552,  -552,  -552,  -552,  -552,   327,   328,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,
    -552,     0,   329,  -552,  -552,     0,   330,   331,   332,   333,
     334,   335,   336,   337,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,   338,   339,     0,  -552,   340,  -552,  -552,   341,
    -552,   342,  -552,  -552,  -552,  -552,   769,  -552,  -552,   343,
     344,  -552,   345,   346,   347,   348,  -552,  -552,  -552,  -552,
    -552,  -545,   318,     0,     1,   319,   111,   320,  -545,   321,
     322,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     2,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,     0,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,     0,     0,   323,  -545,
    -545,     0,     0,   324,   325,   326,  -545,  -545,     0,     0,
    -545,  -545,  -545,  -545,  -545,  -545,   327,   328,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,  -545,     0,
     329,  -545,  -545,     0,   330,   331,   332,   333,   334,   335,
     336,   337,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
     338,   339,     0,  -545,   340,  -545,  -545,   341,  -545,   342,
    -545,  -545,  -545,  -545,   769,  -545,  -545,   343,   344,  -545,
     345,   346,   347,   348,  -545,  -545,  -545,  -545,  -545,  -553,
     318,     0,     1,   319,   111,   320,  -553,   321,   322,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,     2,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,     0,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,     0,     0,   323,  -553,  -553,     0,
       0,   324,   325,   326,  -553,  -553,     0,     0,  -553,  -553,
    -553,  -553,  -553,  -553,   327,   328,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,     0,  -553,     0,   329,  -553,
    -553,     0,   330,   331,   332,   333,   334,   335,   336,   337,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,   338,   339,
       0,  -553,   340,  -553,  -553,   341,  -553,   342,  -553,  -553,
    -553,  -553,   769,  -553,  -553,   343,   344,  -553,   345,   346,
     347,   348,  -553,  -553,  -553,  -553,  -553,  -546,   318,     0,
       1,   319,   111,   320,  -546,   321,   322,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,     2,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
       0,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,     0,     0,   323,  -546,  -546,     0,     0,   324,
     325,   326,  -546,  -546,     0,     0,  -546,  -546,  -546,  -546,
    -546,  -546,   327,   328,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,     0,  -546,     0,   329,  -546,  -546,     0,
     330,   331,   332,   333,   334,   335,   336,   337,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,   338,   339,     0,  -546,
     340,  -546,  -546,   341,  -546,   342,  -546,  -546,  -546,  -546,
     769,  -546,  -546,   343,   344,  -546,   345,   346,   347,   348,
    -546,  -546,  -546,  -546,  -546,  -554,   318,     0,     1,   319,
     111,   320,  -554,   321,   322,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,     2,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
       0,     0,   323,  -554,  -554,     0,     0,   324,   325,   326,
    -554,  -554,     0,     0,  -554,  -554,  -554,  -554,  -554,  -554,
     327,   328,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,     0,  -554,     0,   329,  -554,  -554,     0,   330,   331,
     332,   333,   334,   335,   336,   337,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,   338,   339,     0,  -554,   340,  -554,
    -554,   341,  -554,   342,  -554,  -554,  -554,  -554,   769,  -554,
    -554,   343,   344,  -554,   345,   346,   347,   348,  -554,  -554,
    -554,  -554,  -554,  -547,   318,     0,     1,   319,   111,   320,
    -547,   321,   322,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,     2,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,     0,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,     0,     0,
     323,  -547,  -547,     0,     0,   324,   325,   326,  -547,  -547,
       0,     0,  -547,  -547,  -547,  -547,  -547,  -547,   327,   328,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,     0,
    -547,     0,   329,  -547,  -547,     0,   330,   331,   332,   333,
     334,   335,   336,   337,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,   338,   339,     0,  -547,   340,  -547,  -547,   341,
    -547,   342,  -547,  -547,  -547,  -547,   769,  -547,  -547,   343,
     344,  -547,   345,   346,   347,   348,  -547,  -547,  -547,  -547,
    -547,  -555,   318,     0,     1,   319,   111,   320,  -555,   321,
     322,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,     2,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,     0,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,     0,     0,   323,  -555,
    -555,     0,     0,   324,   325,   326,  -555,  -555,     0,     0,
    -555,  -555,  -555,  -555,  -555,  -555,   327,   328,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,     0,  -555,     0,
     329,  -555,  -555,     0,   330,   331,   332,   333,   334,   335,
     336,   337,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
     338,   339,     0,  -555,   340,  -555,  -555,   341,  -555,   342,
    -555,  -555,  -555,  -555,   769,  -555,  -555,   343,   344,  -555,
     345,   346,   347,   348,  -555,  -555,  -555,  -555,  -555,  -340,
    2068,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,     0,     0,  -340,  -340,  -340,     0,
       0,  -340,  -340,  -340,  -340,  -340,     0,     0,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,     0,  -340,     0,  -340,  -340,
    -340,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
       0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -339,  2069,     0,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
       0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,     0,     0,  -339,  -339,  -339,     0,     0,  -339,
    -339,  -339,  -339,  -339,     0,     0,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,     0,  -339,     0,  -339,  -339,  -339,     0,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -345,   781,     0,  -345,  -345,
    -345,  -345,   782,   783,   784,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,     0,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,
    -345,  -345,     0,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,  -345,     0,  -345,  -345,  -345,     0,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,  -345,  -345,
    -345,   785,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  1190,
    -345,  -345,   787,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,   781,     0,     0,     0,     0,     0,   782,
     783,   784,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -345,     0,     0,     0,     0,     0,     0,  -345,  -345,     0,
       0,     0,  -345,     0,     0,     0,     0,     0,  -345,  -345,
    -345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -345,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,     0,     0,     0,  -345,  -345,  -345,   785,     0,
       0,  -345,  1572,  -345,  -345,     0,   786,     0,     0,   787,
       0,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,
    -459,     0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -459,     0,     0,     0,
       0,  -459,  -459,  -459,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -459,  -459,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -459,     0,
       0,     0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
       0,     0,     0,     0,     0,     0,     0,     0,  -459,  -459,
       0,     0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,     0,     0,  -459,     0,  -459,  -459,     0,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -459,     0,     0,     0,     0,  -459,  -459,
    -459,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -459,  -459,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -459,     0,     0,     0,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,     0,     0,
       0,     0,     0,     0,     0,  -459,  -459,     0,     0,  -459,
    -459,  -459,  -459,  -459,  -459,     0,  -459,  -459,     0,     0,
    -459,     0,  -459,  -459,     0,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -451,   866,     0,  -451,  -451,  -451,
    -451,     0,  -451,  -451,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,
       0,  -451,  -451,  -451,     0,     0,  -451,  -451,  -451,  -451,
    -451,     0,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
       0,  -451,     0,  -451,  -451,  -451,     0,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,     0,  -451,  -451,     0,     0,
    -451,  -451,  -451,  -451,     0,  -451,  -451,  -451,  1191,  -451,
    -451,  -451,     0,  -451,  -451,  -451,  -451, -1107,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
       0, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107, -1107,     0,     0,   323, -1107, -1107,     0,     0,   324,
     325,   326, -1107, -1107,     0,     0, -1107, -1107, -1107, -1107,
   -1107, -1107,   327,   328, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107,     0, -1107,     0,   329, -1107, -1107,     0,
     330,   331,   332,   333,   334,   335,   336,   337, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107,   338,   339,     0, -1107,
     340,     0,     0,   341,   872,   342, -1107,     0,   873, -1107,
   -1107,     0, -1107,   343,   344,     0,   345,   346,   347,   348,
   -1253,   318,     0,     1,   319,   111,   320,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1253,
   -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253,
   -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253,
   -1253, -1253, -1253,     0, -1253, -1253, -1253, -1253, -1253, -1253,
   -1253, -1253, -1253, -1253, -1253,     0,     0,   323, -1253, -1253,
       0,     0,   324,   325,   326, -1253, -1253,     0,     0, -1253,
   -1253, -1253, -1253, -1253, -1253,   327,   328, -1253, -1253, -1253,
   -1253, -1253, -1253, -1253, -1253, -1253,     0, -1253,     0,   329,
   -1253, -1253,     0,   330,   331,   332,   333,   334,   335,   336,
     337, -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253,   338,
     339,     0, -1253,   340,     0,     0,   341,   872,   342,  1669,
       0,   873, -1253, -1253,     0, -1253,   343,   344,     0,   345,
     346,   347,   348, -1211,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211,
   -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211,
   -1211, -1211, -1211, -1211, -1211, -1211,     0, -1211, -1211, -1211,
   -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211,     0,     0,
     323, -1211, -1211,     0,     0,   324,   325,   326, -1211, -1211,
       0,     0, -1211, -1211, -1211, -1211, -1211, -1211,   327,   328,
   -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211,     0,
   -1211,     0,   329, -1211, -1211,     0,   330,   331,   332,   333,
     334,   335,   336,   337, -1211, -1211, -1211, -1211, -1211, -1211,
   -1211, -1211,   338,   339,     0, -1211,   340,     0,     0,   341,
    1876,   342, -1211,     0,   873, -1211, -1211,     0, -1211,   343,
     344,     0,   345,   346,   347,   348, -1242,   318,     0,     1,
     319,   111,   320,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,     0,
     657,   658,   659,   660,   661,   662,   663,   664,   665,   666,
     667,     0,     0,   323, -1242, -1242,     0,     0,   324,   325,
     326, -1242, -1242,     0,     0, -1242,    34, -1242, -1242, -1242,
   -1242,   327,   328,  1165, -1242,   670,   671,   672, -1242, -1242,
   -1242, -1242,     0, -1242,     0,   329, -1242, -1242,     0,   330,
     331,   332,   333,   334,   335,   336,   337,    45,    46, -1242,
   -1242, -1242, -1242, -1242, -1242,   338,   339,     0, -1242,   340,
       0,     0,   341,   872,   342,   673,     0,   873, -1242,   270,
       0,   674,   343,   344,     0,   345,   346,   347,   348,  -578,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     0,     0,   323,  -578,  -578,     0,
       0,   324,   325,   326,  -578,  -578,     0,     0,  -578,  -578,
    -578,  -578,  -578,  -578,   327,   328,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,     0,  -578,     0,   329,  -578,
    -578,     0,   330,   331,   332,   333,   334,   335,   336,   337,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,   338,   339,
       0,  -578,   340,     0,     0,   341,  -578,   342,  1192,     0,
    1193,  -578,  -578,     0,  -578,   343,   344,     0,   345,   346,
     347,   348, -1234,   318,     0,     1,   319,   111,   320,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234,     0, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234,     0,     0,   323,
   -1234, -1234,     0,     0,   324,   325,   326, -1234, -1234,     0,
       0, -1234, -1234, -1234, -1234, -1234, -1234,   327,   328, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,     0, -1234,
       0,   329, -1234, -1234,     0,   330,   331,   332,   333,   334,
     335,   336,   337, -1234, -1234, -1234, -1234, -1234, -1234, -1234,
   -1234,   338,   339,     0, -1234,   340,     0,     0,   341,  2117,
     342, -1234,     0,  1193, -1234, -1234,     0, -1234,   343,   344,
       0,   345,   346,   347,   348, -1235,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,     0, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
       0,     0,   323, -1235, -1235,     0,     0,   324,   325,   326,
   -1235, -1235,     0,     0, -1235, -1235, -1235, -1235, -1235, -1235,
     327,   328, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235,     0, -1235,     0,   329, -1235, -1235,     0,   330,   331,
     332,   333,   334,   335,   336,   337, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235,   338,   339,     0, -1235,   340,     0,
       0,   341,   872,   342,  2118,     0,   873, -1235, -1235,     0,
   -1235,   343,   344,     0,   345,   346,   347,   348, -1229,   318,
       0,     1,   319,   111,   320,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229,     0,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,     0,     0,   323, -1229, -1229,     0,     0,
     324,   325,   326, -1229, -1229,     0,     0, -1229,    34, -1229,
   -1229, -1229, -1229,   327,   328,  1165, -1229,   670,   671,   672,
   -1229, -1229, -1229, -1229,     0, -1229,     0,   329, -1229, -1229,
       0,   330,   331,   332,   333,   334,   335,   336,   337,    45,
      46, -1229, -1229, -1229, -1229, -1229, -1229,   338,   339,     0,
   -1229,   340,     0,     0,   341,   872,   342,   673,     0,   873,
   -1229,   270,     0,   674,   343,   344,     0,   345,   346,   347,
     348, -1177,   648,     0, -1177, -1177, -1177, -1177,     0, -1177,
   -1177,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1177,
   -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177,
   -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177,
   -1177, -1177, -1177, -1177,     0, -1177, -1177, -1177, -1177, -1177,
   -1177, -1177, -1177, -1177, -1177, -1177,     0,     0, -1177, -1177,
   -1177,     0,     0, -1177, -1177, -1177, -1177, -1177,     0,     0,
   -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177,
   -1177, -1177, -1177, -1177, -1177, -1177, -1177,     0, -1177,     0,
   -1177, -1177, -1177,     0, -1177, -1177, -1177, -1177, -1177, -1177,
   -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177,
   -1177, -1177,     0, -1177, -1177,     0,     0, -1177,     0, -1177,
     649,     0, -1177, -1177, -1177,     0, -1177, -1177, -1177,     0,
   -1177, -1177, -1177, -1177, -1200,   318,     0,     1,   319,   111,
     320,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   210,   211,   212,   213,   214,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
      20,    21,   259,   260,    24,    25,    26,     0,   657,   658,
     659,   660,   661,   662,   663,   664,   665,   666,   667,     0,
       0,   323,   261, -1200,     0,     0,   324,   325,   326,    30,
      31,     0,     0, -1200,    34, -1200, -1200, -1200, -1200,   327,
     668,   669,   263,   670,   671,   672, -1200, -1200, -1200, -1200,
       0, -1200,     0,   329, -1200,   264,     0,   330,   331,   332,
     333,   334,   335,   336,   337,    45,    46,   265,   266,   267,
     268,   216,   217,   338,   339,     0,   269,   340,     0,     0,
     341,     0,   342,   673,     0, -1200, -1200,   270,     0,   674,
     343,   344,     0,   345,   346,   347,   348, -1178,   648,     0,
   -1178, -1178, -1178, -1178,     0, -1178, -1178,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1178, -1178, -1178, -1178, -1178,
   -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178,
   -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178,
       0, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178,
   -1178, -1178,     0,     0, -1178, -1178, -1178,     0,     0, -1178,
   -1178, -1178, -1178, -1178,     0,     0, -1178, -1178, -1178, -1178,
   -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178,
   -1178, -1178, -1178,     0, -1178,     0, -1178, -1178, -1178,     0,
   -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178,
   -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178,     0, -1178,
   -1178,     0,     0, -1178,     0, -1178,   649,     0, -1178, -1178,
   -1178,     0, -1178, -1178, -1178,     0, -1178, -1178, -1178, -1178,
   -1239,   318,     0,     1,   319,   111,   320,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239,     0,  1157,  1158,  1159,   660,  1160,  1161,
    1162,  1163,   665,   666,  1164,     0,     0,   323, -1239, -1239,
       0,     0,   324,   325,   326, -1239, -1239,     0,     0, -1239,
      34, -1239, -1239, -1239, -1239,   327,   328,  1165, -1239,   670,
     671,   672, -1239, -1239, -1239, -1239,     0, -1239,     0,   329,
   -1239, -1239,     0,   330,   331,   332,   333,   334,   335,   336,
     337,    45,    46, -1239, -1239, -1239, -1239, -1239, -1239,   338,
     339,     0, -1239,   340,     0,     0,   341,     0,   342,   673,
       0, -1239, -1239,   270,     0,   674,   343,   344,     0,   345,
     346,   347,   348, -1255,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1255, -1255, -1255, -1255, -1255, -1255, -1255, -1255,
   -1255, -1255, -1255, -1255, -1255, -1255, -1255, -1255, -1255, -1255,
   -1255, -1255, -1255, -1255, -1255, -1255,     0, -1255, -1255, -1255,
   -1255, -1255, -1255, -1255, -1255, -1255, -1255, -1255,     0,     0,
     323, -1255, -1255,     0,     0,   324,   325,   326, -1255, -1255,
       0,     0, -1255, -1255, -1255, -1255, -1255, -1255,   327,   328,
   -1255, -1255, -1255, -1255, -1255, -1255, -1255, -1255, -1255,     0,
   -1255,     0,   329, -1255, -1255,     0,   330,   331,   332,   333,
     334,   335,   336,   337, -1255, -1255, -1255, -1255, -1255, -1255,
   -1255, -1255,   338,   339,     0, -1255,   340,     0,     0,   341,
       0,   342,  1175,     0, -1255, -1255,   769,     0, -1255,   343,
     344,     0,   345,   346,   347,   348, -1190,  1194,     0,     1,
     319,   111,   320,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   210,   211,   212,   213,   214,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,    20,    21,   259,   260,    24,    25,    26,     0,
     657,   658,   659,   660,   661,   662,   663,   664,   665,   666,
     667,     0,     0,   323,   261, -1190,     0,     0,   324,   325,
     326,    30,    31,     0,     0, -1190,    34, -1190, -1190, -1190,
   -1190,   327,   668,   669,   263,   670,   671,   672, -1190, -1190,
   -1190, -1190,     0, -1190,     0,   329, -1190,   264,     0,   330,
     331,   332,   333,   334,   335,   336,   337,    45,    46,   265,
     266,   267,   268,   216,   217,   338,   339,     0,   269,   340,
       0,     0,   341,     0,   342,   673,     0, -1190, -1190,   270,
       0,   674,   343,   344,     0,   345,   346,   347,   348, -1194,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   210,   211,
     212,   213,   214,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,    20,    21,   259,   260,    24,
      25,    26,     0,   657,   658,   659,   660,   661,   662,   663,
     664,   665,   666,   667,     0,     0,   323,   261, -1194,     0,
       0,   324,   325,   326,    30,    31,     0,     0, -1194,    34,
   -1194, -1194, -1194, -1194,   327,   668,   669,   263,   670,   671,
     672, -1194, -1194, -1194, -1194,     0, -1194,     0,   329, -1194,
     264,     0,   330,   331,   332,   333,   334,   335,   336,   337,
      45,    46,   265,   266,   267,   268,   216,   217,   338,   339,
       0,   269,   340,     0,     0,   341,     0,   342,   673,     0,
   -1194, -1194,   270,     0,   674,   343,   344,     0,   345,   346,
     347,   348, -1189,   318,     0,     1,   319,   111,   320,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,    20,    21,
     259,   260,    24,    25,    26,     0,   657,   658,   659,   660,
     661,   662,   663,   664,   665,   666,   667,     0,     0,   323,
     261, -1189,     0,     0,   324,   325,   326,    30,    31,     0,
       0, -1189,    34, -1189, -1189, -1189, -1189,   327,   668,   669,
     263,   670,   671,   672, -1189, -1189, -1189, -1189,     0, -1189,
       0,   329, -1189,   264,     0,   330,   331,   332,   333,   334,
     335,   336,   337,    45,    46,   265,   266,   267,   268,   216,
     217,   338,   339,     0,   269,   340,     0,     0,   341,     0,
     342,   673,     0, -1189, -1189,   270,     0,   674,   343,   344,
       0,   345,   346,   347,   348, -1193,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   210,   211,   212,   213,   214,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,    20,    21,   259,   260,    24,    25,    26,     0,   657,
     658,   659,   660,   661,   662,   663,   664,   665,   666,   667,
       0,     0,   323,   261, -1193,     0,     0,   324,   325,   326,
      30,    31,     0,     0, -1193,    34, -1193, -1193, -1193, -1193,
     327,   668,   669,   263,   670,   671,   672, -1193, -1193, -1193,
   -1193,     0, -1193,     0,   329, -1193,   264,     0,   330,   331,
     332,   333,   334,   335,   336,   337,    45,    46,   265,   266,
     267,   268,   216,   217,   338,   339,     0,   269,   340,     0,
       0,   341,     0,   342,   673,     0, -1193, -1193,   270,     0,
     674,   343,   344,     0,   345,   346,   347,   348, -1094,  1207,
       0, -1094, -1094, -1094, -1094,     0, -1094, -1094,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094,     0, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094,     0,     0, -1094, -1094, -1094,     0,     0,
   -1094, -1094, -1094, -1094, -1094,     0,     0, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094,     0, -1094,     0, -1094, -1094, -1094,
       0, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,     0,
   -1094, -1094,     0,     0, -1094,     0, -1094, -1094,     0, -1094,
   -1094, -1094,     0, -1094, -1094, -1094,     0, -1094, -1094, -1094,
   -1094, -1096,  1208,     0, -1096, -1096, -1096, -1096,     0, -1096,
   -1096,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096,     0, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096,     0,     0, -1096, -1096,
   -1096,     0,     0, -1096, -1096, -1096, -1096, -1096,     0,     0,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096,     0, -1096,     0,
   -1096, -1096, -1096,     0, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096,     0, -1096, -1096,     0,     0, -1096,     0, -1096,
   -1096,     0, -1096, -1096, -1096,     0, -1096, -1096, -1096,     0,
   -1096, -1096, -1096, -1096, -1142,   318,     0,     1,   319,   111,
     320,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   210,   211,   212,   213,   214,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
      20,    21,   259,   260,    24,    25,    26,     0,   657,   658,
     659,   660,   661,   662,   663,   664,   665,   666,   667,     0,
       0,   323,   261, -1142,     0,     0,   324,   325,   326,    30,
      31,     0,     0, -1142,    34, -1142, -1142, -1142, -1142,   327,
     668,   669,   263,   670,   671,   672, -1142, -1142, -1142, -1142,
       0, -1142,     0,   329, -1142,   264,     0,   330,   331,   332,
     333,   334,   335,   336,   337,    45,    46,   265,   266,   267,
     268,   216,   217,   338,   339,     0,   269,   340,     0,     0,
     341,     0,   342,   673,     0, -1142, -1142,   270,     0,   674,
     343,   344,     0,   345,   346,   347,   348, -1144,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   210,   211,   212,   213,
     214,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,    20,    21,   259,   260,    24,    25,    26,
       0,   657,   658,   659,   660,   661,   662,   663,   664,   665,
     666,   667,     0,     0,   323,   261, -1144,     0,     0,   324,
     325,   326,    30,    31,     0,     0, -1144,    34, -1144, -1144,
   -1144, -1144,   327,   668,   669,   263,   670,   671,   672, -1144,
   -1144, -1144, -1144,     0, -1144,     0,   329, -1144,   264,     0,
     330,   331,   332,   333,   334,   335,   336,   337,    45,    46,
     265,   266,   267,   268,   216,   217,   338,   339,     0,   269,
     340,     0,     0,   341,     0,   342,   673,     0, -1144, -1144,
     270,     0,   674,   343,   344,     0,   345,   346,   347,   348,
   -1191,   318,     0,     1,   319,   111,   320,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   210,
     211,   212,   213,   214,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,    20,    21,   259,   260,
      24,    25,    26,     0,   657,   658,   659,   660,   661,   662,
     663,   664,   665,   666,   667,     0,     0,   323,   261, -1191,
       0,     0,   324,   325,   326,    30,    31,     0,     0, -1191,
      34, -1191, -1191, -1191, -1191,   327,   668,   669,   263,   670,
     671,   672, -1191, -1191, -1191, -1191,     0, -1191,     0,   329,
   -1191,   264,     0,   330,   331,   332,   333,   334,   335,   336,
     337,    45,    46,   265,   266,   267,   268,   216,   217,   338,
     339,     0,   269,   340,     0,     0,   341,     0,   342,   673,
       0, -1191, -1191,   270,     0,   674,   343,   344,     0,   345,
     346,   347,   348, -1195,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   210,   211,   212,   213,   214,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,    20,
      21,   259,   260,    24,    25,    26,     0,   657,   658,   659,
     660,   661,   662,   663,   664,   665,   666,   667,     0,     0,
     323,   261, -1195,     0,     0,   324,   325,   326,    30,    31,
       0,     0, -1195,    34, -1195, -1195, -1195, -1195,   327,   668,
     669,   263,   670,   671,   672, -1195, -1195, -1195, -1195,     0,
   -1195,     0,   329, -1195,   264,     0,   330,   331,   332,   333,
     334,   335,   336,   337,    45,    46,   265,   266,   267,   268,
     216,   217,   338,   339,     0,   269,   340,     0,     0,   341,
       0,   342,   673,     0, -1195, -1195,   270,     0,   674,   343,
     344,     0,   345,   346,   347,   348, -1192,   318,     0,     1,
     319,   111,   320,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   210,   211,   212,   213,   214,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,    20,    21,   259,   260,    24,    25,    26,     0,
     657,   658,   659,   660,   661,   662,   663,   664,   665,   666,
     667,     0,     0,   323,   261, -1192,     0,     0,   324,   325,
     326,    30,    31,     0,     0, -1192,    34, -1192, -1192, -1192,
   -1192,   327,   668,   669,   263,   670,   671,   672, -1192, -1192,
   -1192, -1192,     0, -1192,     0,   329, -1192,   264,     0,   330,
     331,   332,   333,   334,   335,   336,   337,    45,    46,   265,
     266,   267,   268,   216,   217,   338,   339,     0,   269,   340,
       0,     0,   341,     0,   342,   673,     0, -1192, -1192,   270,
       0,   674,   343,   344,     0,   345,   346,   347,   348, -1196,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   210,   211,
     212,   213,   214,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,    20,    21,   259,   260,    24,
      25,    26,     0,   657,   658,   659,   660,   661,   662,   663,
     664,   665,   666,   667,     0,     0,   323,   261, -1196,     0,
       0,   324,   325,   326,    30,    31,     0,     0, -1196,    34,
   -1196, -1196, -1196, -1196,   327,   668,   669,   263,   670,   671,
     672, -1196, -1196, -1196, -1196,     0, -1196,     0,   329, -1196,
     264,     0,   330,   331,   332,   333,   334,   335,   336,   337,
      45,    46,   265,   266,   267,   268,   216,   217,   338,   339,
       0,   269,   340,     0,     0,   341,     0,   342,   673,     0,
   -1196, -1196,   270,     0,   674,   343,   344,     0,   345,   346,
     347,   348, -1187,   648,     0, -1187, -1187, -1187, -1187,     0,
   -1187, -1187,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187, -1187, -1187,     0, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187, -1187, -1187, -1187, -1187,     0,     0, -1187,
   -1187, -1187,     0,     0, -1187, -1187, -1187, -1187, -1187,     0,
       0, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187,     0, -1187,
       0, -1187, -1187, -1187,     0, -1187, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187,     0, -1187, -1187,     0,     0, -1187,     0,
   -1187,   649,     0, -1187, -1187, -1187,     0, -1187, -1187, -1187,
       0, -1187, -1187, -1187, -1187, -1188,   648,     0, -1188, -1188,
   -1188, -1188,     0, -1188, -1188,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1188, -1188, -1188, -1188, -1188, -1188, -1188,
   -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188,
   -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188,     0, -1188,
   -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188,
       0,     0, -1188, -1188, -1188,     0,     0, -1188, -1188, -1188,
   -1188, -1188,     0,     0, -1188, -1188, -1188, -1188, -1188, -1188,
   -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188,
   -1188,     0, -1188,     0, -1188, -1188, -1188,     0, -1188, -1188,
   -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188, -1188,
   -1188, -1188, -1188, -1188, -1188, -1188,     0, -1188, -1188,     0,
       0, -1188,     0, -1188,   649,     0, -1188, -1188, -1188,     0,
   -1188, -1188, -1188,     0, -1188, -1188, -1188, -1188, -1019,   318,
       0,     1,   319,   111,   320,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019,     0, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019,     0,     0,   323, -1019, -1019,     0,     0,
     324,   325,   326, -1019, -1019,     0,     0, -1019, -1019, -1019,
   -1019, -1019, -1019,   327,   328, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019,     0, -1019,     0,   329, -1019, -1019,
       0,   330,   331,   332,   333,   334,   335,   336,   337, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019,   338,   339,     0,
   -1019,   340,     0,     0,   341,     0,   342, -1019,     0,  1844,
    1845,  1055,     0, -1019,   343,   344,     0,   345,   346,   347,
     348, -1148,   648,     0, -1148, -1148, -1148, -1148,     0, -1148,
   -1148,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148,     0, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148,     0,     0, -1148, -1148,
   -1148,     0,     0, -1148, -1148, -1148, -1148, -1148,     0,     0,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148,     0, -1148,     0,
   -1148, -1148, -1148,     0, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148,     0, -1148, -1148,     0,     0, -1148,     0, -1148,
     649,     0, -1148, -1148, -1148,     0, -1148, -1148, -1148,     0,
   -1148, -1148, -1148, -1148, -1149,   648,     0, -1149, -1149, -1149,
   -1149,     0, -1149, -1149,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149,     0, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,     0,
       0, -1149, -1149, -1149,     0,     0, -1149, -1149, -1149, -1149,
   -1149,     0,     0, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
       0, -1149,     0, -1149, -1149, -1149,     0, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149,     0, -1149, -1149,     0,     0,
   -1149,     0, -1149,   649,     0, -1149, -1149, -1149,     0, -1149,
   -1149, -1149,     0, -1149, -1149, -1149, -1149, -1145,   648,     0,
   -1145, -1145, -1145, -1145,     0, -1145, -1145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
       0, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145,     0,     0, -1145, -1145, -1145,     0,     0, -1145,
   -1145, -1145, -1145, -1145,     0,     0, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145,     0, -1145,     0, -1145, -1145, -1145,     0,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,     0, -1145,
   -1145,     0,     0, -1145,     0, -1145,   649,     0, -1145, -1145,
   -1145,     0, -1145, -1145, -1145,     0, -1145, -1145, -1145, -1145,
   -1021,   318,     0,     1,   319,   111,   320,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021,     0, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021,     0,     0,   323, -1021, -1021,
       0,     0,   324,   325,   326, -1021, -1021,     0,     0, -1021,
   -1021, -1021, -1021, -1021, -1021,   327,   328, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021,     0, -1021,     0,   329,
   -1021, -1021,     0,   330,   331,   332,   333,   334,   335,   336,
     337, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,   338,
     339,     0, -1021,   340,     0,     0,   341,     0,   342, -1021,
       0, -1021,  2027,  1055,     0, -1021,   343,   344,     0,   345,
     346,   347,   348, -1013,  2030,     0, -1013, -1013, -1013, -1013,
       0, -1013, -1013,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013,     0, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,     0,     0,
   -1013, -1013, -1013,     0,     0, -1013, -1013, -1013, -1013, -1013,
       0,     0, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,     0,
   -1013,     0, -1013, -1013, -1013,     0, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013,     0, -1013, -1013,     0,     0, -1013,
       0, -1013, -1013,     0, -1013, -1013, -1013,     0, -1013, -1013,
   -1013,     0, -1013, -1013, -1013, -1013, -1146,   648,     0, -1146,
   -1146, -1146, -1146,     0, -1146, -1146,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,     0,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146,     0,     0, -1146, -1146, -1146,     0,     0, -1146, -1146,
   -1146, -1146, -1146,     0,     0, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146,     0, -1146,     0, -1146, -1146, -1146,     0, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146,     0, -1146, -1146,
       0,     0, -1146,     0, -1146,   649,     0, -1146, -1146, -1146,
       0, -1146, -1146, -1146,     0, -1146, -1146, -1146, -1146, -1147,
     648,     0, -1147, -1147, -1147, -1147,     0, -1147, -1147,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147,     0, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147,     0,     0, -1147, -1147, -1147,     0,
       0, -1147, -1147, -1147, -1147, -1147,     0,     0, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147,     0, -1147,     0, -1147, -1147,
   -1147,     0, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
       0, -1147, -1147,     0,     0, -1147,     0, -1147,   649,     0,
   -1147, -1147, -1147,     0, -1147, -1147, -1147,     0, -1147, -1147,
   -1147, -1147, -1236,   318,     0,     1,   319,   111,   320,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236,
   -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236,
   -1236, -1236, -1236, -1236, -1236,     0, -1236, -1236, -1236, -1236,
   -1236, -1236, -1236, -1236, -1236, -1236, -1236,     0,     0,   323,
   -1236, -1236,     0,     0,   324,   325,   326, -1236, -1236,     0,
       0, -1236, -1236, -1236, -1236, -1236, -1236,   327,   328, -1236,
   -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236,     0, -1236,
       0,   329, -1236, -1236,     0,   330,   331,   332,   333,   334,
     335,   336,   337, -1236, -1236, -1236, -1236, -1236, -1236, -1236,
   -1236,   338,   339,     0, -1236,   340,     0,     0,   341,     0,
     342, -1236,     0, -1236, -1236, -1236,     0, -1236,   343,   344,
       0,   345,   346,   347,   348, -1014,  2109,     0, -1014, -1014,
   -1014, -1014,     0, -1014, -1014,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,     0, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
       0,     0, -1014, -1014, -1014,     0,     0, -1014, -1014, -1014,
   -1014, -1014,     0,     0, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014,     0, -1014,     0, -1014, -1014, -1014,     0, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014,     0, -1014, -1014,     0,
       0, -1014,     0, -1014, -1014,     0, -1014, -1014, -1014,     0,
   -1014, -1014, -1014,     0, -1014, -1014, -1014, -1014,  -915,   611,
       0,  -915,  -915,  -915,  -915,     0,  -915,  -915,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,
    -915,     0,     0,  -915,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -915,  -915,  -915,     0,     0,
    -915,  -915,  -915,  -915,  -915,     0,     0,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,     0,     0,
    -915,  -915,  -915,  -915,     0,  -915,     0,  -915,  -915,  -915,
       0,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,     0,
       0,  -915,     0,     0,  -915,   883,  -915,  -915,     0,   613,
    -915,  -915,     0,     0,  -915,  -915,     0,  -915,  -915,  -915,
    -915,   318,     0,     1,   319,   111,   320,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   210,
     211,   212,   213,   214,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,    20,    21,   259,   260,
      24,    25,    26,     0,   657,   658,   659,   660,   661,   662,
     663,   664,   665,   666,   667,     0,     0,   323,   261,     0,
       0,     0,   324,   325,   326,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   327,   668,   669,   263,   670,
     671,   672,     0,     0,     0,     0,     0,     0,     0,   329,
       0,   264,     0,   330,   331,   332,   333,   334,   335,   336,
     337,    45,    46,   265,   266,   267,   268,   216,   217,   338,
     339,     0,   269,   340,     0,     0,   341,     0,   342,   673,
       0,     0,     0,   270,     0,   674,   343,   344,     0,   345,
     346,   347,   348,   318,     0,     1,   319,   111,   320,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,    20,    21,
     259,   260,    24,    25,    26,     0,  1157,  1158,  1159,   660,
    1160,  1161,  1162,  1163,   665,   666,  1164,     0,     0,   323,
     261,     0,     0,     0,   324,   325,   326,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,   327,   668,   669,
     263,   670,   671,   672,     0,     0,     0,     0,     0,     0,
       0,   329,     0,   264,     0,   330,   331,   332,   333,   334,
     335,   336,   337,    45,    46,   265,   266,   267,   268,   216,
     217,   338,   339,     0,   269,   340,     0,     0,   341,     0,
     342,   673,     0,     0,     0,   270,     0,   674,   343,   344,
       0,   345,   346,   347,   348,   318,     0,     1,   319,   111,
     320,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   210,   211,   212,   213,   214,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
      20,    21,   259,   260,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   323,   261,     0,     0,     0,   324,   325,   326,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,   327,
     668,    40,   263,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   329,     0,   264,     0,   330,   331,   332,
     333,   334,   335,   336,   337,    45,    46,   265,   266,   267,
     268,   216,   217,   338,   339,     0,     0,   340,     0,     0,
     341,     0,   342,  1025,     0,  1026,  1027,   769,     0,     0,
     343,   344,     0,   345,   346,   347,   348,  1281,     0,     1,
     319,   111,   320,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   210,   211,   212,   213,   214,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,    20,    21,   259,   260,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   323,   261,     0,     0,     0,   324,   325,
     326,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   327,   668,    40,   263,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,     0,   264,     0,   330,
     331,   332,   333,   334,   335,   336,   337,    45,    46,   265,
     266,   267,   268,   216,   217,   338,   339,     0,     0,   340,
       0,     0,   341,     0,   342,  1025,     0,  1026,  -110,   769,
       0,     0,   343,   344,     0,   345,   346,   347,   348,  1288,
       0,     1,   319,   111,   320,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   210,   211,   212,
     213,   214,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,    20,    21,   259,   260,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,   261,     0,     0,     0,
     324,   325,   326,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,   327,   668,    40,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,     0,   264,
       0,   330,   331,   332,   333,   334,   335,   336,   337,    45,
      46,   265,   266,   267,   268,   216,   217,   338,   339,     0,
       0,   340,     0,     0,   341,     0,   342,  1025,     0,  1026,
     -98,   769,     0,     0,   343,   344,     0,   345,   346,   347,
     348,  1292,     0,     1,   319,   111,   320,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   210,
     211,   212,   213,   214,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,    20,    21,   259,   260,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   323,   261,     0,
       0,     0,   324,   325,   326,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   327,   668,    40,   263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
       0,   264,     0,   330,   331,   332,   333,   334,   335,   336,
     337,    45,    46,   265,   266,   267,   268,   216,   217,   338,
     339,     0,     0,   340,     0,     0,   341,     0,   342,  1025,
       0,  1026,  -102,   769,     0,     0,   343,   344,     0,   345,
     346,   347,   348,   318,     0,     1,   319,   111,   320,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,    20,    21,
     259,   260,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
     261,     0,     0,     0,   324,   325,   326,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,   327,   668,    40,
     263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,     0,   264,     0,   330,   331,   332,   333,   334,
     335,   336,   337,    45,    46,   265,   266,   267,   268,   216,
     217,   338,   339,     0,     0,   340,     0,     0,   341,     0,
     342,  1556,     0,  1026,   -65,   769,     0,     0,   343,   344,
       0,   345,   346,   347,   348,   318,     0,     1,   319,   111,
     320,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   210,   211,   212,   213,   214,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
      20,    21,   259,   260,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   323,   261,     0,     0,     0,   324,   325,   326,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,   327,
     668,    40,   263,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   329,     0,   264,     0,   330,   331,   332,
     333,   334,   335,   336,   337,    45,    46,   265,   266,   267,
     268,   216,   217,   338,   339,     0,     0,   340,     0,     0,
     341,     0,   342,  1565,     0,  1026,  1566,   769,     0,     0,
     343,   344,     0,   345,   346,   347,   348,  1625,     0,     1,
     319,   111,   320,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   210,   211,   212,   213,   214,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,    20,    21,   259,   260,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   323,   261,     0,     0,     0,   324,   325,
     326,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   327,   668,    40,   263,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,     0,   264,     0,   330,
     331,   332,   333,   334,   335,   336,   337,    45,    46,   265,
     266,   267,   268,   216,   217,   338,   339,     0,     0,   340,
       0,     0,   341,     0,   342,  1025,     0,  1026,   -81,   769,
       0,     0,   343,   344,     0,   345,   346,   347,   348,   318,
       0,     1,   319,   111,   320,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   210,   211,   212,
     213,   214,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,    20,    21,   259,   260,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,   261,     0,     0,     0,
     324,   325,   326,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,   327,   668,    40,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,     0,   264,
       0,   330,   331,   332,   333,   334,   335,   336,   337,    45,
      46,   265,   266,   267,   268,   216,   217,   338,   339,     0,
       0,   340,     0,     0,   341,     0,   342,  1565,     0,  1026,
    -107,   769,     0,     0,   343,   344,     0,   345,   346,   347,
     348,   318,     0,     1,   319,   111,   320,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   210,
     211,   212,   213,   214,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,    20,    21,   259,   260,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   323,   261,     0,
       0,     0,   324,   325,   326,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   327,   668,    40,   263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
       0,   264,     0,   330,   331,   332,   333,   334,   335,   336,
     337,    45,    46,   265,   266,   267,   268,   216,   217,   338,
     339,     0,     0,   340,     0,     0,   341,     0,   342,  1565,
       0,  1026,   -97,   769,     0,     0,   343,   344,     0,   345,
     346,   347,   348,   318,     0,     1,   319,   111,   320,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,    20,    21,
     259,   260,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
     261,     0,     0,     0,   324,   325,   326,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,   327,   668,    40,
     263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,     0,   264,     0,   330,   331,   332,   333,   334,
     335,   336,   337,    45,    46,   265,   266,   267,   268,   216,
     217,   338,   339,     0,     0,   340,     0,     0,   341,     0,
     342,  1565,     0,  1026,  -101,   769,     0,     0,   343,   344,
       0,   345,   346,   347,   348,  1803,     0,     1,   319,   111,
     320,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   210,   211,   212,   213,   214,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
      20,    21,   259,   260,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   323,   261,     0,     0,     0,   324,   325,   326,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,   327,
     668,    40,   263,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   329,     0,   264,     0,   330,   331,   332,
     333,   334,   335,   336,   337,    45,    46,   265,   266,   267,
     268,   216,   217,   338,   339,     0,     0,   340,     0,     0,
     341,     0,   342,  1025,     0,  1026,   -88,   769,     0,     0,
     343,   344,     0,   345,   346,   347,   348,   318,     0,     1,
     319,   111,   320,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   210,   211,   212,   213,   214,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,    20,    21,   259,   260,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   323,   261,     0,     0,     0,   324,   325,
     326,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   327,   668,    40,   263,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,     0,   264,     0,   330,
     331,   332,   333,   334,   335,   336,   337,    45,    46,   265,
     266,   267,   268,   216,   217,   338,   339,     0,     0,   340,
       0,     0,   341,     0,   342,  1565,     0,  1026,   -78,   769,
       0,     0,   343,   344,     0,   345,   346,   347,   348,   318,
       0,     1,   319,   111,   320,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   210,   211,   212,
     213,   214,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,    20,    21,   259,   260,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,   261,     0,     0,     0,
     324,   325,   326,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,   327,   668,    40,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,     0,   264,
       0,   330,   331,   332,   333,   334,   335,   336,   337,    45,
      46,   265,   266,   267,   268,   216,   217,   338,   339,     0,
       0,   340,     0,     0,   341,     0,   342,  1565,     0,  1026,
     -85,   769,     0,     0,   343,   344,     0,   345,   346,   347,
     348,   318,     0,     1,   319,   111,   320,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   210,
     211,   212,   213,   214,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   323,    29,     0,
       0,     0,   324,   325,   326,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,   327,   432,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
       0,    42,     0,   330,   331,   332,   333,   334,   335,   336,
     337,    45,    46,    47,    48,    49,    50,   216,   217,   338,
     339,     0,     0,   340,     0,     0,   341,   318,   342,     1,
     319,   111,   320,     0,   321,   322,   343,   344,     0,   345,
     346,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   210,   211,   212,   213,   214,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   901,    29,     0,     0,     0,   324,   325,
     326,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,   327,   432,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,     0,    42,     0,   330,
     331,   332,   333,   334,   335,   336,   337,    45,    46,    47,
      48,    49,    50,   216,   217,   338,   339,     0,     0,   340,
       0,     0,   341,   318,   342,     1,   319,   111,   320,     0,
     321,   322,   343,   344,     0,   345,   346,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,     0,     0,     0,   324,   325,   326,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,   327,   432,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,     0,    42,     0,   330,   331,   332,   333,   334,
     335,   336,   337,    45,    46,    47,    48,    49,    50,     0,
       0,   338,   339,     0,     0,   340,     0,     0,   341,   759,
     342,     0,     0,     0,     0,     0,     0,     0,   343,   344,
       0,   345,   346,   347,   348,   318,     0,     1,   319,   111,
     320,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1227,    29,     0,     0,     0,   324,   325,   326,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,   327,
     432,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   329,     0,    42,     0,   330,   331,   332,
     333,   334,   335,   336,   337,    45,    46,    47,    48,    49,
      50,     0,     0,   338,   339,     0,     0,   340,     0,     0,
     341,   759,   342,     0,     0,     0,     0,     0,     0,     0,
     343,   344,     0,   345,   346,   347,   348,   318,     0,     1,
     319,   111,   320,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   323,    29,     0,     0,     0,   324,   325,
     326,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,   327,   432,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,     0,    42,     0,   330,
     331,   332,   333,   334,   335,   336,   337,    45,    46,    47,
      48,    49,    50,     0,     0,   338,   339,     0,     0,   340,
       0,     0,   341,   318,   342,     1,   319,   111,   320,   270,
     321,   322,   343,   344,     0,   345,   346,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,   592,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,     0,     0,     0,   324,   325,   326,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,   327,   432,    40,
      41,     0,   318,     0,     1,   319,   111,   320,     0,   321,
     322,   329,     0,    42,     0,   330,   331,   332,   333,   334,
     335,   336,   337,    45,    46,    47,    48,    49,    50,     2,
       0,   338,   339,     0,     0,   924,     0,     0,   925,   759,
     342,     0,     0,     0,     0,     0,     0,     0,   343,   344,
       0,   345,   346,   347,   348,   657,   658,   659,   660,   661,
     662,   663,   664,   665,   666,   667,     0,     0,   323,     0,
       0,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,   327,   328,  1165,     0,
     670,   671,   672,     0,     0,     0,     0,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,    45,    46,     0,     0,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,     0,   342,
     673,     0,     0,     0,   270,     0,   674,   343,   344,     0,
     345,   346,   347,   348,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,     0,   324,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   328,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     2,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
       0,   342,     0,     0,  2107,  2108,  1055,     0,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   328,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     2,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,  2119,   342,  2120,     0,
    1193,     0,     0,     0,     0,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   328,   318,     0,     1,   319,   111,   320,     0,   321,
     322,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     2,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,   872,   342,  2118,     0,   873,     0,     0,     0,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   328,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     2,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,     0,   342,
       0,     0,  2212,  2213,  1055,     0,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     0,     0,   324,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   328,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     2,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   341,     0,   342,     0,     0,     0,     0,
     769,     0,     0,   343,   344,   770,   345,   346,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,     0,   324,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   328,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     2,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
     867,   342,     0,     0,   868,     0,     0,     0,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   328,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     2,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,   872,   342,     0,     0,
     873,     0,     0,     0,     0,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,   318,     0,     1,   319,
     111,   320,   323,   321,   322,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   328,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,   323,   342,  1192,     0,  1193,   324,   325,   326,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
     327,   328,   318,     0,     1,   319,   111,   320,     0,   321,
     322,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     2,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,  1623,   342,     0,     0,  1624,     0,     0,     0,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   328,  1658,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     2,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,     0,   342,
    1175,     0,     0,     0,   769,     0,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     0,     0,   324,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   328,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     2,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   341,  1659,   342,  1660,     0,     0,     0,
       0,     0,     0,   343,   344,     0,   345,   346,   347,   348,
       0,     0,     0,     0,   318,     0,     1,   319,   111,   320,
     323,   321,   322,     0,     0,   324,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   328,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     0,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
     323,   342,  1668,     0,  1193,   324,   325,   326,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,   327,   328,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     2,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
    1730,   342,     0,     0,  1193,     0,     0,     0,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,     0,     0,
     318,     0,     1,   319,   111,   320,   323,   321,   322,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   328,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     0,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,   323,   342,     0,     0,
    1193,   324,   325,   326,     0,   343,   344,  1760,   345,   346,
     347,   348,     0,     0,   327,   328,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     2,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,     0,   342,     0,     0,
    1763,     0,     0,     0,  1764,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,   318,     0,     1,   319,
     111,   320,   323,   321,   322,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   328,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,   323,   342,     0,     0,  1193,   324,   325,   326,
       0,   343,   344,  1770,   345,   346,   347,   348,     0,     0,
     327,   328,   318,     0,     1,   319,   111,   320,     0,   321,
     322,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     2,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,     0,   342,     0,     0,  1763,     0,     0,     0,
    1772,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   328,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     2,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,  1875,   342,
       0,     0,  1193,     0,     0,     0,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     0,     0,   324,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   328,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     2,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   341,  1877,   342,     0,     0,  1193,     0,
       0,     0,     0,   343,   344,     0,   345,   346,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,     0,   324,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   328,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     2,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
    1878,   342,     0,     0,   873,     0,     0,     0,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   328,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     2,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,  1881,   342,     0,     0,
    1193,     0,     0,     0,     0,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   328,   318,     0,     1,   319,   111,   320,     0,   321,
     322,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     2,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,  1659,   342,  1660,     0,     0,     0,     0,     0,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,  1901,     0,     1,   319,   111,   320,   323,   321,
     322,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   328,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     0,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,   323,   342,
    1898,     0,  1193,   324,   325,   326,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,   327,   328,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     2,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,  1902,   342,
    1660,     0,     0,     0,     0,     0,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,     0,     0,   318,     0,
       1,   319,   111,   320,   323,   321,   322,     0,     0,   324,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   328,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     0,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   341,   323,   342,     0,     0,  1763,   324,
     325,   326,  1915,   343,   344,     0,   345,   346,   347,   348,
       0,     0,   327,   328,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     2,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   341,     0,   342,     0,     0,  1763,     0,
       0,     0,  1919,   343,   344,     0,   345,   346,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,     0,   324,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   328,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     2,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
    2035,   342,     0,     0,  1193,     0,     0,     0,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   328,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     2,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,  1876,   342,     0,     0,
     873,     0,     0,     0,     0,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   328,   318,     0,     1,   319,   111,   320,     0,   321,
     322,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     2,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,  2043,   342,     0,     0,  1193,     0,     0,     0,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   328,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     2,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,  1902,   342,
    1660,     0,     0,     0,     0,     0,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     0,     0,   324,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   328,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     2,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   341,  2123,   342,     0,     0,  1193,     0,
       0,     0,     0,   343,   344,     0,   345,   346,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,     0,   324,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   328,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     2,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
       0,   342,     0,     0,     0,  2151,  1055,     0,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   328,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     2,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,     0,   342,     0,     0,
       0,  2153,  1055,     0,     0,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   328,   318,     0,     1,   319,   111,   320,     0,   321,
     322,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     2,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,  2156,   342,     0,     0,  1193,     0,     0,     0,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   328,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     2,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,  2157,   342,
       0,     0,  1193,     0,     0,     0,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     0,     0,   324,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   328,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     2,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   341,  2186,   342,     0,     0,  1193,     0,
       0,     0,     0,   343,   344,     0,   345,   346,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,     0,   324,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   328,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     2,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
       0,   342,     0,     0,     0,  2220,  1055,     0,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,     0,     0,
     318,     0,     1,   319,   111,   320,   323,   321,   322,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   328,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     0,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,   323,   342,     0,     0,
       0,   324,   325,   326,     0,   343,   344,   576,   345,   346,
     347,   348,     0,     0,   327,   328,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     2,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,     0,   342,     0,     0,
       0,     0,   769,     0,     0,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,   318,     0,     1,   319,
     111,   320,   323,   321,   322,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   328,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,   323,   342,     0,     0,     0,   324,   325,   326,
       0,   343,   344,   875,   345,   346,   347,   348,     0,     0,
     327,   328,   318,     0,     1,   319,   111,   320,     0,   321,
     322,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     2,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,     0,   342,     0,     0,     0,     0,     0,     0,
       0,   343,   344,   879,   345,   346,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   328,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     2,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,     0,   342,
       0,     0,     0,     0,  1055,     0,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,     0,     0,   318,     0,
       1,   319,   111,   320,   323,   321,   322,     0,     0,   324,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   328,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     0,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   341,   323,   342,     0,     0,     0,   324,
     325,   326,     0,   343,   344,  1096,   345,   346,   347,   348,
       0,     0,   327,   328,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     2,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   341,     0,   342,     0,     0,     0,     0,
       0,     0,  1149,   343,   344,     0,   345,   346,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,     0,   324,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   328,
    1500,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     2,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
     759,   342,     0,     0,     0,     0,     0,     0,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   328,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     2,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,     0,   342,     0,     0,
       0,     0,   769,     0,     0,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,   318,     0,     1,   319,
     111,   320,   323,   321,   322,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   328,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,   323,   342,     0,     0,     0,   324,   325,   326,
       0,   343,   344,  1604,   345,   346,   347,   348,     0,     0,
     327,   328,   318,     0,     1,   319,   111,   320,     0,   321,
     322,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     2,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,  1642,   342,     0,     0,     0,     0,     0,     0,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,   318,     0,     1,   319,   111,   320,   323,   321,
     322,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   328,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     0,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,   323,   342,
       0,     0,     0,   324,   325,   326,  1645,   343,   344,     0,
     345,   346,   347,   348,     0,     0,   327,   328,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     2,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,     0,   342,
       0,     0,     0,     0,  1746,     0,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     0,     0,   324,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   328,  1834,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     2,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   341,     0,   342,     0,     0,     0,     0,
    1833,     0,     0,   343,   344,     0,   345,   346,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,     0,   324,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   328,
    1837,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     2,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
       0,   342,     0,     0,     0,     0,   769,     0,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   328,  1841,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     2,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,     0,   342,     0,     0,
       0,     0,   769,     0,     0,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   328,   318,     0,     1,   319,   111,   320,     0,   321,
     322,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     2,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,     0,   342,     0,     0,     0,     0,   769,     0,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   328,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     2,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,  1888,   342,
       0,     0,     0,     0,     0,     0,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     0,     0,   324,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   328,   318,     0,     1,   319,   111,   320,
       0,   321,   322,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     2,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,  1948,     0,   342,     0,     0,     0,     0,
    1833,     0,     0,   343,   344,     0,   345,   346,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,     0,   324,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   327,   328,
     318,     0,     1,   319,   111,   320,     0,   321,   322,     0,
       0,     0,   329,     0,     0,     0,   330,   331,   332,   333,
     334,   335,   336,   337,     0,     0,     0,     2,     0,     0,
       0,     0,   338,   339,     0,     0,   340,     0,     0,   341,
    2052,   342,     0,     0,     0,     0,     0,     0,     0,   343,
     344,     0,   345,   346,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
       0,   324,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   327,   328,   318,     0,     1,   319,
     111,   320,     0,   321,   322,     0,     0,     0,   329,     0,
       0,     0,   330,   331,   332,   333,   334,   335,   336,   337,
       0,     0,     0,     2,     0,     0,     0,     0,   338,   339,
       0,     0,   340,     0,     0,   341,  2114,   342,     0,     0,
       0,     0,     0,     0,     0,   343,   344,     0,   345,   346,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     0,     0,   324,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     327,   328,   318,     0,     1,   319,   111,   320,     0,   321,
     322,     0,     0,     0,   329,     0,     0,     0,   330,   331,
     332,   333,   334,   335,   336,   337,     0,     0,     0,     2,
       0,     0,     0,     0,   338,   339,     0,     0,   340,     0,
       0,   341,     0,   342,     0,     0,     0,     0,  2182,     0,
       0,   343,   344,     0,   345,   346,   347,   348,     0,     0,
       0,     0,   318,     0,     1,   319,   111,   320,   323,   321,
     322,     0,     0,   324,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   327,   328,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     0,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   341,   323,   342,
       0,     0,     0,   324,   325,   326,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,   327,   328,   318,     0,
       1,   319,   111,   320,     0,   321,   322,     0,     0,     0,
     329,     0,     0,     0,   330,   331,   332,   333,   334,   335,
     336,   337,     0,     0,     0,     2,     0,     0,     0,     0,
     338,   339,     0,     0,   340,     0,     0,   729,     0,   342,
       0,     0,     0,     0,     0,     0,     0,   343,   344,     0,
     345,   346,   347,   348,     0,     0,     0,     0,   318,     0,
       1,   319,   111,   320,   323,   321,   322,     0,     0,   324,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   327,   328,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     0,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   732,   323,   342,     0,     0,     0,   324,
     325,   326,     0,   343,   344,     0,   345,   346,   347,   348,
       0,     0,   327,   328,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,     0,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,     0,     0,
       0,     0,     0,     0,     0,     0,   338,   339,     0,     0,
     340,     0,     0,   755,     0,   342,  -903,   611,     0,  -903,
    -903,  -903,     0,   343,   344,     0,   345,   346,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -903,  -903,  -903,  -903,  -903,  -903,
    -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,
    -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,     0,
       0,  -903,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -903,  -903,  -903,     0,     0,  -903,  -903,
       0,  -903,  -903,     0,     0,  -903,  -903,  -903,  -903,  -903,
    -903,     0,  -903,  -903,  -903,  -903,     0,     0,  -903,  -903,
    -903,  -903,     0,  -903,     0,  -903,  -903,  -903,     0,  -903,
    -903,  -903,  -903,  -903,  -903,  -903,     0,  -903,  -903,  -903,
    -903,  -903,  -903,  -903,  -903,  -903,     0,     0,     0,  -903,
       0,     0,  -903,   612,  -903,  -903,     0,   613,  -903,     0,
       0,     0,  -903,  -903,  -189,   942,     0,  -189,  -189,  -189,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,     0,  -189,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -189,  -189,  -189,     0,     0,  -189,  -189,     0,  -189,
    -189,     0,     0,  -189,  -189,  -189,  -189,  -189,  -189,     0,
    -189,  -189,  -189,  -189,     0,     0,  -189,  -189,  -189,  -189,
       0,  -189,     0,  -189,  -189,  -189,     0,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,     0,     0,     0,  -189,     0,     0,
    -189,     0,  -189,   943,     0,   944,  -189,     0,     0,     0,
    -189,  -189,  -253,   956,     0,     1,   319,   111,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,  -253,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,  -251,   959,  -253,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,  -251,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,  -254,   956,  -251,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,  -254,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,  -252,   959,  -254,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,  -252,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   449,  -252,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   515,   465,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   537,   516,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   542,   538,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   546,   543,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,   547,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -758,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  -759,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -755,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  -756,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -761,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,  1078,  -762,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,  1082,  1079,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   318,  1083,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  -653,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -738,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  -739,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -741,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,  1586,  -742,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  1587,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -648,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  -649,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -744,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   318,  -745,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   318,  -652,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   318,  -650,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   318,  -628,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  -627,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -641,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   318,  -642,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  -651,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -637,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  -638,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -625,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  -626,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -620,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   956,  -621,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   959,  -639,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,     0,   449,  -640,     1,   319,   111,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
      29,   450,     0,     0,   324,   325,     0,    30,    31,     0,
       0,   451,    34,   452,   453,    37,    38,     0,   432,    40,
      41,   454,     0,     0,   455,   456,   457,   458,     0,   459,
       0,   460,   461,    42,     0,   330,   331,   332,   333,   334,
     335,   336,     0,    45,    46,    47,    48,    49,    50,   216,
     217,   338,     0,     0,     0,    55,     0,     0,   462,     0,
     463,   464,   515,     0,     1,   319,   111,     0,   343,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     210,   211,   212,   213,   214,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,    29,
     450,     0,     0,   324,   325,     0,    30,    31,     0,     0,
     451,    34,   452,   453,    37,    38,     0,   432,    40,    41,
     454,     0,     0,   455,   456,   457,   458,     0,   459,     0,
     460,   461,    42,     0,   330,   331,   332,   333,   334,   335,
     336,     0,    45,    46,    47,    48,    49,    50,   216,   217,
     338,   209,     0,     1,    55,     0,     0,   462,     0,   463,
     464,     0,     0,     0,     0,     0,     0,   343,   344,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   210,
     211,   212,   213,   214,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   215,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,   216,   217,     1,
       0,     0,     0,    55,     0,     0,   897,  1087,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   594,     0,     0,
       0,     0,     0,     0,     2,   210,   211,   212,   213,   214,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   216,   217,     1,     0,     0,     0,    55,
       0,     0,   897,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   594,     0,     0,     0,     0,     0,     0,
       2,   210,   211,   212,   213,   214,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,    20,    21,
     259,   260,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     261,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   262,    40,
     263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   264,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,   265,   266,   267,   268,   216,
     217,     1,     0,     0,     0,    55,     0,     0,   897,     0,
       0,     0,     0,     0,     0,  1482,     0,     0,     0,   594,
       0,     0,     0,     0,     0,     0,     2,   210,   211,   212,
     213,   214,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,    20,    21,   259,   260,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   261,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,     0,   262,    40,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,   265,   266,   267,   268,   216,   217,     1,     0,     0,
       0,    55,     0,     0,  1239,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1240,     0,     0,     0,     0,
       0,     0,     2,   210,   211,   212,   213,   214,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
      20,    21,   259,   260,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   261,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     262,    40,   263,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   264,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   265,   266,   267,
     268,   216,   217,     1,     0,     0,     0,    55,     0,     0,
    1239,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1262,     0,     0,     0,     0,     0,     0,     2,   210,
     211,   212,   213,   214,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,    20,    21,   259,   260,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   261,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,     0,   262,    40,   263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,   265,   266,   267,   268,   216,   217,     1,
       0,     0,     0,    55,     0,     0,  1239,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1722,     0,     0,
       0,     0,     0,     0,     2,   210,   211,   212,   213,   214,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,    20,    21,   259,   260,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   261,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,     0,   262,    40,   263,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   264,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,   265,
     266,   267,   268,   216,   217,     1,     0,     0,     0,    55,
       0,     0,  1239,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1737,     0,     0,     0,     0,     0,     0,
       2,     3,     4,   289,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,     0,     0,     0,    30,    31,   290,
      33,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,    44,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,    51,
      52,     1,     0,     0,     0,    55,     0,     0,    56,     0,
       0,     0,     0,     0,     0,     0,     0,   291,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   210,   211,   212,
     213,   214,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,   450,     0,     0,
       0,     0,     0,    30,    31,     0,     0,   451,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,   216,   217,     1,     0,     0,
       0,    55,     0,     0,   984,     0,   463,     0,     0,     0,
       0,     0,     0,   985,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   210,   211,   212,   213,   214,     8,     9,
      10,   592,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   216,   217,     1,     0,     0,     0,    55,     0,     0,
     964,     0,     0,     0,     0,     0,     0,     0,     0,   965,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   210,
     211,   212,   213,   214,     8,     9,    10,   592,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,     0,     0,     0,     0,     0,     0,     0,  1551,
       0,    45,    46,    47,    48,    49,    50,   216,   217,     0,
       0,     0,     0,    55,     0,     0,    56,     0,     0,     0,
       0,     0,     0,     0,     0,   965,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -66,     0,     0,     0,
       0,     0,     0,   -66,   -66,     0,     0,     0,   -66,     0,
       0,     0,     0,     0,   -66,   -66,   -66,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -66,
       0,     0,     0,     0,  1755,     0,     0,     0,     0,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1552,     0,  1553,
     -66,     2,   210,   211,   212,   213,   214,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,    20,
      21,   259,   260,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   262,
      40,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   264,     0,     0,     0,     0,  1756,
       0,     0,     0,     0,    45,    46,   265,   266,   267,   268,
     216,   217,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -95,     2,   210,   211,   212,
     213,   214,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,    20,    21,   259,   260,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   261,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,     0,   262,    40,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
       0,     0,     0,     0,  1866,     0,     0,     0,     0,    45,
      46,   265,   266,   267,   268,   216,   217,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -96,     2,   210,   211,   212,   213,   214,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,    20,
      21,   259,   260,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   262,
      40,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   264,     0,     0,     0,     0,  2012,
       0,     0,     0,     0,    45,    46,   265,   266,   267,   268,
     216,   217,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -80,     2,   210,   211,   212,
     213,   214,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,    20,    21,   259,   260,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   261,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,     0,   262,    40,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
       0,     0,     0, -1310,   308,     0,     1,     0,     0,    45,
      46,   265,   266,   267,   268,   216,   217,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -87,     2,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,     0,     0,     0,    30,    31,
      32,    33,     0,    34,    35,    36,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,     0,     0,     1,    44,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
      51,    52,     0,     0,    53,    54,    55,     0,     0,    56,
       0,     0,    57,     2,   210,   211,   212,   213,   214,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,     0,   857,     1,     0,    45,    46,    47,    48,
      49,    50,   216,   217,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1432,     0,     2,
     210,   211,   212,   213,   214,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,   857,
       1,     0,    45,    46,    47,    48,    49,    50,   216,   217,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1782,     0,     2,   210,   211,   212,   213,
     214,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,     0,   171,   857,     1,     0,    45,    46,
      47,    48,    49,    50,   216,   217,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1783,
       0,     2,     3,     4,   172,     6,     7,     8,     9,    10,
     173,   174,   175,   176,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,   171,     0,     1,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
      51,    52,     0,     0,     0,     0,    55,     0,     0,    56,
       0,     0,   177,     2,     3,     4,   172,     6,     7,     8,
       9,    10,   173,   174,   175,   176,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,   633,     0,
       1,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,    51,    52,     0,     0,     0,     0,    55,     0,
       0,    56,     0,     0,   177,     2,   210,   211,   212,   213,
     214,   247,   248,   249,   634,   635,   636,   637,   254,   255,
     256,   257,   258,    20,    21,   259,   260,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   261,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   262,    40,   263,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   264,     0,
    -925,     0,  -925,     0,     0,     0,     0,     0,    45,    46,
     265,   266,   267,   268,   216,   217,     0,     0,     0,     0,
      55,     0,     0,    56,     0,     0,   638,  -925,  -925,  -925,
    -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,
    -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,
    -925,  -925,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -925,     0,     0,
       0,     0,     0,     0,  -925,  -925,     0,     0,     0,  -925,
       0,     0,     0,     0,     0,  -925,  -925,  -925,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -925,     0,     0,     0,     1,     0,     0,     0,     0,     0,
    -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,     0,     0,
       0,     0,  -925,     0,     0,  -925,     0,     0,  -925,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,     0,     0,     0,    30,    31,    32,    33,
       0,    34,    35,    36,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,    43,     0, -1311,   300,    44,     1,     0,
       0,     0,    45,    46,    47,    48,    49,    50,    51,    52,
       0,     0,    53,    54,    55,     0,     0,    56,     0,     0,
      57,     0,     0,     2,     3,     4,   172,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,    35,    36,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   209,    42,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,    51,    52,     0,     0,     0,     0,    55,     0,
       0,    56,     2,   210,   211,   212,   213,   214,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   215,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,   209,     0,     1,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   216,   217,     0,     0,     0,     0,    55,     0,     0,
    1239,  1709,     0,     2,   210,   211,   212,   213,   214,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   215,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,   209,     0,     1,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   216,   217,     0,     0,     0,     0,     0,     0,
       0,     0,   218,     0,     2,   210,   211,   212,   213,   214,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   215,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,   977,     0,
       1,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   216,   217,     0,     0,     0,     0,     0,
       0,     0,     0,   413,     0,     2,   210,   211,   212,   213,
     214,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   215,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,  1508,
       0,     1,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   216,   217,     0,     0,     0,     0,
       0,     0,     0,     0,   218,     0,     2,   210,   211,   212,
     213,   214,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   215,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
     209,     0,     1,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,   216,   217,     0,     0,     0,
       0,     0,     0,     0,     0,   413,     0,     2,   210,   211,
     212,   213,   214,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   215,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,   209,     0,     1,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,   216,   217,     0,     0,
       0,     0,     0,     0,     0,     0,  1601,     0,     2,   210,
     211,   212,   213,   214,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   215,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,   171,     0,     1,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,   216,   217,     0,
       0,     0,     0,     0,     0,     0,     0,  1938,     0,     2,
       3,     4,   172,     6,     7,     8,     9,    10,   592,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   171,    42,     1,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,    51,    52,
       0,     0,     0,     0,    55,     0,     0,    56,     2,     3,
       4,   172,     6,     7,     8,     9,    10,   592,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     921,    42,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,    51,    52,     0,
       0,     0,     0,    55,     0,     0,    56,     2,   210,   211,
     212,   213,   214,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,    20,    21,   259,   260,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   261,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,     0,     0,     0,   262,    40,   263,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     264,     1,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,   265,   266,   267,   268,   216,   217,     0,     0,
       0,     0,     0,     0,     0,   922,     2,     3,     4,   172,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       1,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,    51,    52,     0,     0,     0,
       0,    55,     0,     0,    56,     2,   210,   211,   212,   213,
     214,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   216,   217,     0,     0,     0,     0,
      55,     0,     0,    56,     2,   210,   211,   212,   213,   214,
       8,     9,    10,   592,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   216,   217,     0,     0,     0,     0,    55,
       0,     0,    56,     2,   210,   211,   212,   213,   214,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   216,   217,     0,     0,     0,     0,     0,     0,
       0,   747,     2,   210,   211,   212,   213,   214,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   216,   217,     0,     0,     0,     0,     0,     0,     0,
    1487,     2,   210,   211,   212,   213,   214,   247,   248,   249,
    1573,   251,   252,   253,   254,   255,   256,   257,   258,    20,
      21,   259,   260,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   262,
      40,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1110,   264,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,   265,   266,   267,   268,
     216,   217,     0,     0,     0,     0,    55,     0,     0,    56,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,  1111,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   215,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,  1116,     0,     1,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   216,
     217,     2,   210,   211,   212,   213,   214,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,  1117,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     215,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,  1122,     0,     1,     0,     0,
       0,     0,     0,     0,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     216,   217,     2,   210,   211,   212,   213,   214,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,  1123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   215,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,   906,     0,     1,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   216,   217,     2,   210,   211,   212,   213,   214,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,    20,    21,   259,   260,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   261,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   262,    40,   263,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,   264,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,   265,   266,
     267,   268,   216,   217,     2,   210,   211,   212,   213,   214,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,  1071,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   215,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   216,   217,     2,   210,   211,   212,   213,
     214,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    1128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   215,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   216,   217,     2,   210,   211,   212,
     213,   214,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   529,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,   216,   217,     2,   210,   211,
     212,   213,   214,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,     0,   857,     0,     0,
      45,    46,    47,    48,    49,    50,   216,   217,     2,   210,
     211,   212,   213,   214,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   215,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,   216,   217,     2,
     210,   211,   212,   213,   214,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,    20,    21,   259,
     260,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   261,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,   504,   505,     0,     0,     0,   262,    40,   263,
       0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,   264,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,   265,   266,   267,   268,   216,   217,
       2,   210,   211,   212,   213,   214,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   216,
     217,     2,   210,   211,   212,   213,   214,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,    20,
      21,   259,   260,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   262,
      40,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   264,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,   265,   266,   267,   268,
     216,   217,     2,   210,   211,   212,   213,   214,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
      20,    21,   259,   260,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   261,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     262,    40,   263,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   264,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   265,   266,   267,
     268,   216,   217,     0,     0,     0,     0,    55,     0,     0,
     897,  1706,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   594,     2,   210,   211,   212,   213,   214,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
      20,    21,   259,   260,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   261,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     262,    40,   263,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   264,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   265,   266,   267,
     268,   216,   217,     0,     0,     0,   269,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   270,     2,   210,
     211,   212,   213,   214,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,    20,    21,   259,   260,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   261,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,     0,   262,    40,   263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,   265,   266,   267,   268,   216,   217,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1562,     2,   210,   211,   212,   213,   214,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,    20,    21,   259,   260,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   261,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   262,    40,   263,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   264,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,   265,   266,
     267,   268,   216,   217,     0,     0,     0,   269
};

static const yytype_int16 yycheck[] =
{
       0,   138,   150,   963,   672,   746,   563,   896,   963,  1140,
     105,   896,  1746,   769,  1249,   163,    97,   165,   134,   167,
     776,    68,    90,   779,   304,   748,   862,    90,    87,   150,
     361,    98,    32,    33,   162,   361,  1037,    98,  1039,   159,
     500,   862,   163,    43,   165,    63,   167,    87,   608,    87,
    1652,   497,   853,   995,   191,   134,    56,   853,   138,   105,
      88,   496,  1664,    63,   973,    87,   134,    98,    68,     1,
      70,   134,   124,   563,   105,     5,    98,   129,    87,     1,
      97,     1,   896,   105,    17,     3,    86,    87,    88,    98,
      90,     3,  1037,     5,  1039,   913,    96,   142,    98,  1833,
     118,     3,    17,   496,    32,   105,   106,     1,     5,   109,
    1037,   191,  1039,   194,   195,   344,    44,     5,   118,     1,
       3,   121,     5,     3,   126,     5,  1037,  1038,  1039,   194,
     195,  1016,     1,   126,   134,   182,    78,   137,   138,     1,
       1,     3,   142,     1,     1,     3,   146,   147,   148,     1,
     150,     7,     8,     9,   154,   126,   156,     1,   820,   159,
     160,     1,   162,   163,   164,   165,   137,   167,     5,     1,
     170,     3,     3,    89,    90,    91,     1,   194,   195,   444,
       1,     1,   182,     3,   112,   113,   848,   769,   116,     1,
     208,   191,     3,   135,   776,    17,     5,   779,     1,     3,
     132,    87,    88,   284,     7,     8,     9,   137,   208,   304,
      87,   306,   132,   135,   147,   127,   496,    28,     3,     1,
     220,   286,   222,   135,    28,   127,    37,  1045,     1,   131,
     230,   231,   147,   135,   131,   294,   286,     1,   132,   306,
     305,   129,   242,    28,   127,   306,   246,   127,   916,     1,
     132,   137,   135,   281,   294,   135,   294,   304,   304,    17,
     306,     1,     1,   132,   304,   126,   304,   284,   583,   286,
     132,   536,   129,     1,   132,   306,     1,   129,   134,   131,
     132,   281,  1283,   420,   306,   129,   286,   131,   305,  1290,
     290,  1893,   132,  1294,   294,   304,  1238,   306,   613,   136,
     132,   616,   133,   618,   304,   620,   306,   132,   129,     3,
     131,   132,   132,     5,   191,   126,   491,   492,   126,   447,
     132,   366,   131,   126,   324,   147,   137,   130,   593,   133,
     330,   134,     3,     5,   137,     1,     5,     3,  1283,   899,
     420,   341,   517,   518,     5,  1290,     3,     3,   133,  1294,
     132,     3,    70,    71,   785,   355,  1283,    28,   126,   132,
       3,     1,   290,  1290,   539,   540,    37,  1294,   132,   544,
     545,  1282,  1283,   548,   549,     3,   692,   693,  1289,  1290,
     132,   124,  1293,  1294,     3,   466,   467,   468,   469,   147,
    1146,   131,   410,   132,   412,   281,     3,   397,   398,   127,
     831,   446,   286,   131,  1038,     3,   131,    56,   294,    28,
     410,   133,   412,     3,   132,   343,     3,   294,     5,   129,
     420,   558,    74,  1224,   920,  1226,   426,   304,  1224,   497,
    1226,     3,     0,   127,   497,   127,     1,   574,   126,   439,
     588,    28,   590,   723,   444,     3,   446,   447,  2182,   466,
     450,   451,   469,     3,   126,   126,   456,   123,   124,   459,
     460,   461,   462,   463,   584,   131,     3,   588,   132,   590,
     127,   127,     3,   134,   805,   806,   807,   593,   558,   805,
     806,   807,  1717,   564,    74,   920,   567,  1618,   137,   129,
     133,   491,   492,   493,   574,   132,   496,   497,   994,   127,
     500,   766,    74,   503,   835,   836,   837,   126,   508,   835,
     836,   837,   512,   513,   593,     3,  1239,   517,   518,    87,
     913,   981,  1464,   983,   970,   133,   133,   135,   608,   529,
      98,   129,  1092,   131,  1257,   535,   536,   105,   106,   539,
     540,  1264,   132,  1103,   544,   545,   133,   564,   548,   549,
     567,   131,   552,   553,   554,   555,   556,   137,   558,   994,
     132,   561,   127,  1472,  1146,  2140,   131,     3,   126,     1,
     799,  1460,   572,   573,   574,  1460,   594,   127,   578,    67,
     973,   132,   231,   583,   584,  1527,   123,   124,   588,     5,
     590,   591,     3,   593,   594,   595,   133,   826,   598,  1435,
    1436,   994,   133,  1512,     1,   834,  1515,     0,   608,   627,
    1045,   126,  1572,   613,  1435,  1436,   616,  1572,   618,   496,
     620,     5,   137,  2198,     3,   854,  1627,   627,   723,     3,
       1,     3,   897,   913,     3,   123,   124,     1,   131,   904,
     690,   691,   692,   693,   137,   133,  1460,   912,  1282,    28,
       1,     5,  1045,   718,   719,  1289,   130,  1546,   923,  1293,
     126,   135,   662,     3,   664,   746,   552,   553,   554,   555,
     556,   137,   672,   690,   691,   692,   693,   723,     7,     8,
       9,   558,  1627,   723,   561,   723,   572,   573,   124,   125,
     690,   691,   692,   693,  1929,   127,    75,    76,   583,   131,
    1627,   718,   719,   720,     1,     1,    75,    76,   708,   709,
     126,    80,   123,   124,   994,  1626,  1627,   717,    87,   137,
       5,   126,   133,   723,   130,  1539,   294,  1541,   613,   729,
     127,   616,   137,   618,   131,   620,   304,   737,   306,   133,
     822,   135,   111,   112,   744,   745,   746,   747,   748,   749,
    1506,   123,   124,   127,   133,   755,   127,   131,   758,   129,
     131,   135,   126,   127,   133,  1045,   766,   131,   850,   814,
     815,    80,   817,   127,  1716,   126,   127,   705,   706,  1721,
     131,   897,   782,   123,   124,     3,   786,    12,    13,  1037,
     131,  1039,     5,   133,  1109,   491,   492,   842,   843,   844,
     845,   130,   111,   112,  1805,   134,   690,   691,   692,   693,
      28,   821,  1127,   462,   131,     7,     8,     9,   897,    75,
      76,   517,   518,   751,   752,   753,  1091,   131,   828,   126,
     127,   127,   832,  1149,   131,   131,  1152,     3,   131,   849,
     717,     3,   127,   539,   540,     3,   723,  1789,   544,   545,
     895,   896,   548,   549,   970,     3,   123,   857,   858,   859,
    1805,  1009,   862,   863,   864,   946,   947,   123,   949,   131,
      28,   952,   953,  1189,  1002,  1003,   143,   144,  1805,  1195,
    1196,  1197,  1198,   451,  1793,  1794,    11,     3,  1009,     5,
    1010,   970,   131,  1804,  1805,   895,   896,   897,  1458,   124,
     125,   901,   970,   903,   904,  1080,  1081,   970,   126,  1084,
    1085,   911,   912,   913,   127,    31,   916,   316,     3,   124,
     920,   824,   922,   923,  1506,   925,   325,   927,   133,     7,
       8,     9,   331,   132,   126,     7,     8,     9,  1086,     3,
     868,     5,   134,  1832,   593,   137,   595,  1028,  1279,   852,
     995,    75,    76,  1279,     3,  1092,  1076,  1077,   124,   133,
       3,   123,   124,   129,   964,  1086,   966,    31,   130,  1234,
     970,     3,  1237,   973,   127,   123,   124,     3,   978,    28,
     823,   981,   130,   983,   984,   820,   132,  1710,  1104,     7,
       8,     9,  1626,   993,   994,   995,    28,   142,  1739,   123,
     125,   127,  1002,  1003,  1946,    37,   131,  1007,   851,  1009,
    1010,  1028,  1092,   848,  1682,  1015,  1016,  1017,  1018,    75,
      76,  1101,  1579,  1103,   821,  1104,     7,     8,     9,    12,
      13,  1591,    75,    76,   755,  1283,   913,   758,   123,   124,
     823,   126,  1290,    75,    76,  1045,  1294,     1,   126,     3,
    2010,   147,   849,   123,   150,     3,   134,  1286,  1548,   137,
      75,    76,   134,    11,   125,   137,  1214,   163,   851,   165,
     131,   167,  1507,   143,   144,    80,  1076,  1077,   129,  1472,
    1080,  1081,   133,   126,  1084,  1085,  1086,  1105,  1088,  1579,
     130,  1091,  1092,  1214,   126,   135,   973,   123,   124,  1149,
     126,  1101,  1152,  1103,  1104,  1105,   111,   112,   123,  1109,
     822,     3,  1112,     5,   132,  1115,   134,   994,  1118,  1512,
     126,  1121,  1515,  1239,  1124,  1907,     3,  1127,   126,  1129,
     135,   824,  1149,   126,    11,  1152,   126,    91,   850,  1189,
       3,   124,   125,  1143,   124,  1195,  1196,  1197,  1198,  1149,
     129,   131,  1152,   134,   133,   723,    80,   137,   124,   852,
    1239,  1161,   126,  1163,   132,   124,   130,   133,  1045,   135,
    1804,  1171,  1189,   137,   133,   123,   124,   125,  1195,  1196,
    1197,  1198,   130,   131,  1184,   133,     3,   111,   112,  1189,
    1190,    80,  1457,  1238,     3,  1195,  1196,  1197,  1198,    78,
     133,  1218,   135,  1220,    67,  1091,   130,  1948,  2022,  1227,
    2024,    28,     3,  1213,  1214,  1215,   130,  1217,   131,    28,
      37,   366,   111,   112,  1109,   138,  1786,  1227,   126,  1229,
    1115,   123,   124,     1,  1234,     3,  1121,    28,  1238,  1239,
     129,  1731,  1127,  1911,   133,   125,   123,   124,   125,     3,
     126,   131,  1180,   130,   131,    46,   133,  1257,    75,    76,
     123,   124,   126,    80,  1264,  1149,    75,    76,  1152,   125,
      87,    80,   126,  1273,    28,   131,   925,   126,    87,  2061,
     126,  2063,   127,    37,    75,    76,   131,  1844,     1,   126,
     135,   125,  1852,     3,   111,   112,   126,   131,     3,   126,
      80,   446,   111,   112,   125,  1189,   123,   140,   141,   126,
     131,  1195,  1196,  1197,  1198,   964,  1632,  1633,    28,   133,
     137,    75,    76,    28,   133,   724,    80,   133,  1644,   978,
     127,   111,   112,    87,   131,   984,   127,   125,  1215,     3,
    1217,    46,   125,   131,   133,  1610,   135,  2129,   131,  2131,
     130,  2133,  1280,   139,  1844,   125,   146,   111,   112,  1534,
    1535,   131,    75,    76,    28,    75,    76,    80,    75,    76,
      75,    76,   126,    80,    87,   125,    14,    15,     3,  1627,
      87,   131,    46,   137,  1080,  1081,    11,   145,  1084,  1085,
    2172,  2173,   133,  2175,   135,   491,   492,   125,   111,   112,
    1793,  1794,    16,   131,   111,   112,  1963,   503,   808,   809,
    2192,    75,    76,  1588,  1589,  1460,   129,   130,   131,  1464,
     160,   517,   518,   130,   164,   127,  1426,  1427,  2210,   131,
    1430,  1431,   129,   360,   131,  1435,  1436,   127,   838,   839,
      70,    71,  1091,   539,   540,   139,   127,   374,   544,   545,
     131,   378,   548,   549,  1591,   146,  1456,   810,   811,   125,
    1460,  1461,    92,   127,  1464,   131,    96,   131,    98,  2026,
    1470,   145,  1472,  1963,   401,  1475,  2144,   404,   129,  1479,
     131,     1,  1527,     3,  1484,  1485,  1486,   840,   841,     3,
     808,   809,   588,   127,   590,   810,   811,   131,   123,   124,
     125,  1546,   132,  1431,   818,   819,   131,  1507,   133,  1509,
      16,  1591,  1512,   133,    28,  1515,   818,   819,  1518,  1599,
     838,   839,   125,    37,   125,   840,   841,  1527,   131,   129,
     131,   131,   846,   847,  1534,  1535,  2026,   127,  2095,  1539,
    1540,  1541,  1542,   127,   846,   847,  1563,   131,    75,    76,
    2107,     1,   147,    80,   127,   150,   133,  1805,   131,   127,
      87,    75,    76,  1828,   127,  1881,    80,   127,   163,   126,
     165,   131,   167,    87,   127,   135,   127,   127,   131,   133,
     131,   131,  1632,  1633,   111,   112,   127,   129,  1588,  1589,
     131,  1591,    10,    11,  1644,  1472,   131,   111,   112,  1599,
    1486,   129,  1718,   127,   133,  2095,   133,   131,   124,   123,
    1610,   135,   126,   124,   127,  1632,  1633,  2107,   131,   140,
     141,   135,   135,    10,    11,    75,    76,  1644,   124,   133,
      80,   135,  1632,  1633,   133,  1512,   135,    87,  1515,  1718,
      14,    15,  1642,  2200,  1644,  1645,   131,     3,  1648,     1,
     138,     3,  1652,   944,   945,  2212,  1656,   138,  2148,  1659,
     138,   111,   112,   133,   552,   553,   554,   555,   556,   814,
     815,  1716,   817,   563,   133,  1823,  1721,  1825,   131,   129,
     130,   131,  1682,  1683,   572,   573,  1915,  1916,  1917,  1918,
    1919,  1920,  1921,  1922,   944,   945,  1624,   842,   843,   844,
     845,  1849,  1823,  1851,  1825,     0,   129,     1,   131,     3,
    2200,     1,   137,     3,  1795,  1852,  1716,   131,  1718,    75,
      76,  1721,  2212,    37,    80,   572,   573,  1655,  1849,   131,
    1851,    87,    46,    47,    46,    47,  2052,   131,  2054,  1739,
     132,  1741,  1742,  1671,  1789,  1745,   690,   691,  1632,  1633,
     895,   896,     1,   133,     3,   111,   112,   133,   129,   135,
    1644,    75,    76,    75,    76,   129,    80,   131,    80,  1553,
     126,  1555,  1852,    87,   133,    87,   135,   135,  1553,  1779,
    1555,  2010,   126,    75,    76,   690,   691,  1832,    80,  1789,
     105,   106,    87,  1793,  1794,    87,  1796,   111,   112,   111,
     112,   126,     1,    98,     3,     4,     5,  2123,  1808,   123,
     105,   106,   129,   126,   126,   863,   864,  2148,   129,   111,
     112,   126,  2148,  1823,   126,  1825,   129,   133,  1828,    28,
     129,  1881,   129,   129,   127,   127,   124,  1486,  1534,  1535,
     138,   132,  2017,  2018,   124,  2020,  2021,   133,   137,  1849,
     995,  1851,  1852,   148,   138,   138,  2031,  2032,  2033,  2034,
    1509,   138,   138,   138,  1881,   160,   133,   129,    67,   164,
     131,  2019,   132,    72,    73,  1875,  1876,  1877,  1878,   124,
     132,  1881,   132,   127,   127,  1885,  1886,    86,  1888,   127,
    1890,   138,  1588,  1589,   127,   785,   491,   492,  2019,   138,
      99,  1946,  1902,   138,   103,   104,   105,   106,   107,   108,
     109,  1911,   126,  1009,  1914,   127,  1793,  1794,   127,   126,
     119,    58,   517,   518,   135,   135,   126,   126,  2103,  2104,
     135,   126,   129,   129,   126,    75,    76,   136,   137,   129,
      80,   831,   124,   124,   539,   540,  1946,    87,  1948,   544,
     545,   129,   127,   548,   549,   127,   124,   126,   137,   126,
     124,  1610,   127,   137,   127,     1,   127,   127,   127,   131,
      58,   111,   112,   131,   131,   865,   132,  1905,   868,  1907,
     135,   871,     0,   873,  1080,  1081,   135,   127,  1084,  1085,
    1086,     0,   135,   588,   135,   590,   127,  1881,   127,   294,
     127,   129,  2052,   127,  2054,   130,   132,   127,   127,   304,
     127,   306,   126,   126,   135,   138,   138,  2017,  2018,  2019,
    2020,  2021,  2022,   138,  2024,   135,   127,   126,   135,   135,
     135,  2031,  2032,  2033,  2034,  2052,   127,  2054,   135,    75,
      76,   127,   127,  2043,    80,   127,   127,   127,   138,   138,
     124,    87,  2052,   137,  2054,  2055,  2137,  2138,   129,   138,
     138,   137,    75,    76,  2064,  2065,    11,    80,   133,    87,
     130,   133,   135,  2123,    87,   111,   112,   135,    87,   129,
      98,   130,   130,   126,   129,     1,     0,   105,   106,    98,
     126,   127,   133,  1238,   127,   131,   105,   106,   111,   112,
     316,   127,   127,  2103,  2104,   127,  2123,   138,   138,   325,
    2110,  2111,   127,    66,  2114,   331,  2116,  1213,  1214,  2119,
     127,   138,   138,  2123,   138,     0,   138,   138,   138,    43,
     148,   127,   127,  2061,    66,  2063,   129,   127,  2138,   138,
    2140,   138,   160,   127,  2144,   127,   164,   138,   129,    63,
     138,   129,   138,   129,   129,   450,    70,  2157,   129,    75,
      76,   133,   129,   129,    80,  1055,   461,   129,  2052,   129,
    2054,    87,   129,    87,   129,     6,    90,     8,     9,   129,
    2180,  2181,   129,    97,    98,   127,  2186,   503,   129,  2180,
    1542,   105,   106,   503,   503,   111,   112,  1015,  2198,   503,
    2128,  2129,   503,  2131,   118,  2133,   895,   121,   304,   304,
     831,   950,    87,   129,  1007,   131,   749,  1507,   513,   461,
     134,   330,   231,    98,   451,   281,   105,  2128,   142,    98,
     105,   106,   286,   147,   148,  2163,   150,   522,    98,  2123,
     106,    98,    -1,    74,  2172,  2173,   160,  2175,   162,   163,
     164,   165,  1779,   167,    85,    -1,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,  2192,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,     3,   294,    -1,    -1,   110,
     194,   195,  2210,    -1,    -1,   294,   304,    -1,   306,   120,
      -1,    -1,    -1,   124,   208,   304,    -1,   306,    -1,    -1,
      28,    -1,    -1,  1193,    -1,    -1,   137,    -1,   222,   140,
     141,   142,    -1,    -1,    -1,  1460,     3,   231,    -1,  1464,
      -1,  2017,  2018,    -1,  2020,  2021,    -1,    -1,    -1,    -1,
      -1,    -1,   341,    -1,    -1,  2031,  2032,  2033,  2034,    -1,
      -1,    28,    -1,    -1,    87,    -1,    -1,    75,    76,   944,
     945,    -1,    80,    -1,    -1,    98,   231,    -1,    -1,    87,
      -1,    -1,   105,   106,    -1,  1764,  1765,   281,  1767,  1768,
     284,   285,   286,  1772,  1773,  1774,  1775,   130,    -1,    -1,
     294,    -1,  1527,   111,   112,    -1,    -1,    -1,    75,    76,
     304,   305,   306,    80,    -1,    -1,    -1,    75,    76,    -1,
      87,  1546,    80,    -1,    -1,   148,    -1,  2103,  2104,    87,
     324,    46,    47,    -1,  1009,    -1,   330,   160,    -1,   294,
      -1,   164,    -1,    -1,   111,   112,    -1,   341,   723,   304,
       3,   306,   450,   111,   112,   444,    -1,    -1,  1534,  1535,
      75,    76,    -1,   461,    -1,    80,   133,    -1,    -1,   127,
      -1,    -1,    87,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,     0,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,    -1,    -1,
      -1,    -1,    -1,    -1,   398,  1080,  1081,   496,   123,  1084,
    1085,  1086,  1588,  1589,    -1,   513,   410,    -1,   412,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,   724,    -1,
      -1,    -1,    -1,    -1,    87,    -1,  1915,  1916,  1917,  1918,
    1919,  1920,  1921,  1922,    -1,    56,    -1,   536,    -1,    -1,
     444,    -1,   446,   447,    -1,    -1,   450,   451,   111,   112,
      -1,    -1,   456,    75,    76,    -1,   460,   461,    80,   463,
     123,   294,    -1,   126,   127,    87,    87,    88,    -1,    -1,
      -1,   304,    -1,   306,    -1,    96,    -1,    98,    -1,   444,
      -1,  1716,    -1,    -1,   105,   106,  1721,   491,   492,   111,
     112,    -1,   496,   497,    -1,    -1,    46,    47,    -1,   503,
      -1,    -1,    -1,    -1,   508,   127,    -1,    -1,    -1,   513,
      -1,    -1,    -1,   517,   518,    -1,   137,   138,    -1,    -1,
      -1,  2010,    -1,     3,    -1,    75,    76,   912,  1213,  1214,
      80,   496,   536,    -1,    -1,   539,   540,    87,   923,    -1,
     544,   545,    -1,    -1,   548,   549,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   557,  1789,    -1,    -1,    37,    -1,    -1,
     564,   111,   112,   567,    -1,    -1,    -1,    -1,     3,    -1,
     191,   536,    -1,    -1,    -1,    -1,   126,    -1,    -1,   583,
      -1,    -1,    -1,    -1,   588,    -1,   590,    -1,    -1,   593,
     594,    -1,    -1,    28,    -1,    75,    76,  1832,    -1,  1579,
      80,    -1,    37,    -1,    -1,    -1,    -1,    87,    -1,   613,
      -1,    -1,   616,    -1,   618,   723,   620,   450,    -1,    -1,
      -1,   242,    -1,   627,   723,   246,    -1,    -1,   461,    -1,
     729,   111,   112,    -1,    -1,    -1,    -1,  1823,    -1,  1825,
      75,    76,    -1,   123,  1624,    80,   126,   746,    -1,    -1,
      -1,    -1,    87,    -1,    -1,    -1,   755,    -1,    -1,   758,
     281,    -1,    -1,  1849,    -1,  1851,    -1,   766,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,   111,   112,    -1,    -1,
     513,    -1,    -1,   304,    -1,   306,   690,   691,   692,   693,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       7,    -1,    -1,    10,    11,    12,    13,    14,    15,    16,
      17,  1946,    -1,    -1,   718,   719,   720,    -1,    -1,   723,
      -1,    -1,    -1,    -1,    -1,   729,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   737,    75,    76,    -1,    -1,    -1,    80,
     744,   745,   746,    -1,   748,   749,    87,    -1,    -1,    -1,
      -1,   755,    -1,    -1,   758,    -1,    -1,    -1,   723,    -1,
     859,    -1,   766,    -1,   729,   769,  1746,    -1,    -1,    -1,
     111,   112,   776,    -1,    -1,   779,    -1,    -1,  1758,    -1,
      -1,    -1,   123,  1763,    -1,   126,  1766,    -1,    -1,    -1,
     755,    -1,    -1,   758,    95,    -1,   137,    -1,    -1,   420,
      -1,   325,    -1,    -1,   912,   904,    -1,   331,    -1,    -1,
      -1,    -1,    -1,    -1,   913,   923,    -1,   124,   125,    -1,
      -1,   920,    -1,    -1,    -1,    -1,   925,   134,   927,    -1,
      -1,  2017,  2018,  2019,  2020,  2021,   143,   144,   145,   146,
     147,   462,    -1,    -1,    -1,  2031,  2032,  2033,  2034,  1534,
    1535,    -1,    -1,  1833,    -1,   859,    -1,    -1,   862,   863,
     864,    -1,    75,    76,  1844,    -1,    -1,    80,    -1,    -1,
      -1,    -1,     3,    -1,    87,    -1,    -1,    -1,    -1,   978,
      -1,    -1,    -1,    -1,    -1,    -1,   410,    -1,   412,    -1,
     723,   895,   896,   897,   859,   994,    -1,    28,   111,   112,
     904,    -1,    -1,  1588,  1589,    -1,    37,    -1,   912,   913,
     123,    -1,    -1,   126,    -1,    -1,   920,  2103,  2104,   923,
      -1,   925,    -1,   927,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   552,   553,   554,   555,   556,    -1,   558,    -1,   904,
     561,    -1,    -1,    -1,    75,    76,    -1,    -1,   913,    80,
      -1,   572,   573,   574,    -1,   920,    87,    -1,    -1,    -1,
      -1,    -1,   927,    -1,    -1,    -1,   970,    -1,    -1,    -1,
      -1,    -1,   593,    -1,   978,    -1,    -1,    -1,    -1,    -1,
     111,   112,    -1,  1963,    -1,   286,    -1,    -1,    -1,     3,
     994,   995,   123,    -1,    -1,   126,    -1,    -1,  1002,  1003,
      -1,    -1,    -1,    -1,    -1,  1009,    -1,    -1,    -1,    -1,
      -1,  1015,    -1,   978,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    39,    40,    -1,    -1,   994,
      -1,    -1,    -1,  1037,  1038,  1039,    -1,    -1,    -1,    -1,
      -1,  1045,    -1,    -1,    -1,    -1,  2026,    -1,    -1,    -1,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
     594,    -1,    -1,    87,    -1,    -1,  1080,  1081,    -1,   912,
    1084,  1085,  1086,    -1,   410,    -1,   412,    -1,    -1,    -1,
     923,    -1,    -1,    -1,    -1,    -1,   717,   111,   112,    -1,
    1104,  1105,   723,    -1,    -1,  1109,    -1,    -1,    -1,   123,
      -1,  1115,   126,    -1,    -1,  2095,    -1,  1121,    -1,    -1,
      -1,    -1,    -1,  1127,    -1,    -1,    -1,  2107,    -1,    -1,
      -1,    -1,    -1,   657,    -1,  1234,    -1,    -1,  1823,    -1,
    1825,    -1,  1146,    -1,    -1,  1149,    -1,    -1,  1152,    -1,
      -1,    -1,    -1,    -1,   284,   285,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1849,   466,  1851,   124,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,
      -1,    -1,   139,   140,   141,  1189,   143,   144,   145,   146,
     147,  1195,  1196,  1197,  1198,    -1,   284,   285,    -1,    -1,
      -1,    -1,  2182,    -1,    -1,    -1,    -1,    -1,    -1,  1213,
    1214,    -1,    -1,    -1,  1218,     0,  1220,    -1,    -1,    -1,
    2200,   522,    -1,  1227,    -1,    -1,    -1,    -1,    -1,    -1,
    1234,    -1,  2212,  1237,  1238,  1239,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1257,    -1,    -1,    -1,    -1,    -1,    -1,
    1264,    -1,  1227,    -1,    -1,    -1,    -1,    -1,   594,  1234,
      -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,  1282,  1283,
      -1,    -1,    -1,    -1,    -1,  1289,  1290,    -1,    -1,  1293,
    1294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,   925,    -1,   148,    -1,    -1,    -1,
      -1,    96,    -1,    98,    -1,    -1,    -1,    -1,   160,    -1,
     105,   106,   164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   657,  2017,  2018,  2019,  2020,  2021,    -1,    -1,    56,
      -1,    -1,    -1,   964,    -1,    -1,  2031,  2032,  2033,  2034,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,   662,   147,   984,    -1,   150,    -1,    -1,    -1,    -1,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,   163,    96,
     165,    -1,   167,    -1,    -1,    -1,    -1,    -1,    -1,   690,
     691,   692,   693,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,   191,   192,   193,    -1,
    1509,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2103,  2104,
     137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1435,  1436,    -1,   564,    -1,    -1,   567,    -1,   281,
      -1,   965,    -1,    -1,    -1,   230,   231,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1460,    -1,  1764,  1765,
    1464,  1767,  1768,    -1,    -1,    -1,  1772,  1773,  1774,  1775,
    1091,  1092,    -1,    -1,   191,    -1,   564,    -1,    -1,   567,
    1004,    -1,   324,    -1,    -1,    -1,    -1,    -1,   330,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,    -1,
      -1,    -1,  1506,    -1,    -1,  1509,    -1,    -1,    -1,   294,
      -1,  1610,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   304,
      -1,   306,    -1,  1527,    -1,   242,    -1,    -1,    -1,   246,
    1534,  1535,    -1,    -1,    -1,  1539,  1540,  1541,  1542,    -1,
      -1,    -1,    -1,    -1,  1509,    -1,    -1,    -1,    -1,   662,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     690,   691,   692,   693,   281,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,    -1,    -1,    -1,   294,    -1,   692,
     693,  1105,    -1,    -1,  1588,  1589,    -1,    -1,    -1,    -1,
     720,    -1,    -1,    -1,  1215,    -1,  1217,    -1,    -1,    -1,
      -1,    -1,   690,   691,   692,   693,  1610,    -1,   450,  1915,
    1916,  1917,  1918,  1919,  1920,  1921,  1922,    -1,    -1,   461,
      -1,    -1,  1626,  1627,    -1,    -1,    -1,    -1,  1632,  1633,
      -1,   344,   720,  1157,    -1,   420,   421,   422,    -1,   965,
    1739,  1645,    -1,    -1,  1648,  1610,    -1,    -1,    -1,    -1,
      -1,    -1,  1656,    -1,    -1,    -1,    -1,    -1,    -1,   444,
      -1,    -1,    -1,    -1,    -1,    -1,   451,    -1,    -1,    -1,
      -1,   513,    -1,    -1,    -1,   976,    -1,   462,  1004,  1683,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   420,  2010,  1006,   491,   492,    -1,    -1,
      -1,   496,  1716,   138,  1718,   500,  1240,  1721,   503,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   512,    -1,  1828,
      -1,    -1,   517,   518,    -1,  1739,    -1,    -1,  1262,    -1,
      -1,    -1,    -1,    -1,    -1,   462,    -1,    -1,    -1,    -1,
      -1,   536,    -1,    -1,   539,   540,    -1,    -1,    -1,   544,
     545,    -1,    -1,   548,   549,    -1,   191,   552,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1105,
      -1,    -1,    -1,   500,    -1,  1789,    -1,   572,   573,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1804,  1805,    -1,   588,    -1,   590,   231,    -1,   593,    -1,
     595,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1823,
      -1,  1825,    -1,    -1,  1828,   610,    -1,    -1,    -1,    -1,
      -1,  1157,    -1,    -1,    -1,   552,   553,   554,   555,   556,
      -1,   558,    -1,    -1,   561,  1849,    -1,  1851,  1149,  1948,
     563,  1152,    -1,    -1,    -1,   572,   573,   574,    -1,    -1,
    1161,    -1,    -1,  1828,    -1,  1486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   593,    -1,    -1,   304,
      -1,  1885,  1886,    -1,    -1,    -1,    -1,    -1,  1189,    -1,
      -1,    -1,    -1,    -1,  1195,  1196,  1197,  1198,    -1,    -1,
      -1,    -1,   744,   745,    -1,    -1,   748,   749,    -1,    -1,
      -1,    -1,    -1,   626,  1240,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   717,    -1,    -1,    -1,  1262,    -1,   723,    -1,
      -1,    -1,  1946,    -1,  1948,    -1,    -1,    -1,    -1,   662,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   744,
      -1,    -1,    -1,   748,    -1,    -1,    -1,    -1,    -1,    -1,
    1591,    -1,    -1,    -1,    -1,    -1,    -1,   690,   691,   692,
     693,   766,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1516,    -1,    -1,   420,    -1,    -1,    -1,    -1,
     717,   426,    -1,    -1,    -1,    -1,    -1,    -1,  1532,    -1,
      -1,    -1,    -1,  2017,  2018,  2019,  2020,  2021,  2022,  1149,
    2024,    -1,  1152,    -1,    -1,    -1,    -1,  2031,  2032,  2033,
    2034,    -1,    -1,    -1,    -1,    -1,  1149,   750,    -1,  1152,
      -1,   754,    -1,    -1,    -1,    -1,    -1,    -1,  1161,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1189,
      -1,  1149,    -1,    -1,  1152,  1195,  1196,  1197,  1198,    -1,
     912,   496,   785,    -1,    -1,    -1,  1189,    -1,    -1,    -1,
      -1,   923,  1195,  1196,  1197,  1198,   799,    -1,  1218,    -1,
    1220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2103,
    2104,  1189,    -1,    -1,    -1,    -1,    -1,  1195,  1196,  1197,
    1198,    -1,   897,   826,    -1,    -1,    -1,    -1,   831,   904,
      -1,   834,    -1,    -1,    -1,    -1,   911,   912,   913,    -1,
    1218,    -1,  1220,   558,    -1,   920,   561,    -1,   923,    -1,
     925,   854,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   574,
      -1,    -1,   865,    -1,    -1,   868,    -1,    -1,   871,    -1,
     873,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     595,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   964,
      -1,    -1,    -1,   608,    -1,    -1,    -1,    -1,   973,    -1,
    1516,    -1,    -1,   978,    -1,    -1,  1720,    -1,  1722,   984,
      -1,    -1,    -1,  1045,    -1,     1,  1532,     3,   925,   994,
      -1,    -1,  1736,  1737,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1009,    -1,    -1,    -1,    -1,    -1,
      -1,  1852,    28,    -1,  1019,     1,    -1,     3,   557,    -1,
      -1,    37,    38,    39,    40,    -1,    -1,   964,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1045,    -1,    28,    -1,   981,    -1,   983,   984,    -1,    -1,
      -1,    37,    38,    39,    40,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    87,   717,    -1,    -1,  1080,  1081,    -1,   723,  1084,
    1085,  1086,    -1,    -1,    -1,    -1,  1091,  1092,    -1,    75,
      76,    -1,    -1,    -1,    80,   111,   112,  1102,    -1,    -1,
      -1,    87,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
     126,  1632,  1633,   129,    -1,   131,   132,    -1,    -1,    -1,
      -1,  1642,  1055,  1644,  1645,   111,   112,  1648,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1656,    -1,   123,  1659,    -1,
     126,    -1,    -1,   129,    -1,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1091,  1092,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     361,    -1,    -1,    -1,  1720,  1237,  1722,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1736,  1737,    -1,    -1,    -1,  1257,    -1,    -1,   737,    -1,
      -1,    -1,  1264,  1947,    -1,    -1,    -1,    -1,  1213,  1214,
      -1,    -1,  1956,    -1,    -1,    -1,  1149,    -1,    -1,  1152,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1161,  1234,
     769,    -1,  1237,    -1,  1239,    -1,    -1,   776,    -1,    -1,
     779,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1182,
    1183,    -1,  1257,    -1,    -1,    -1,  1189,    -1,    -1,  1264,
    1193,    -1,  1195,  1196,  1197,  1198,    -1,    -1,   913,    -1,
    2014,  2015,    -1,    -1,    -1,   920,    -1,    -1,  1215,    -1,
    1217,    -1,  1632,  1633,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1645,    -1,    -1,  1648,  1632,
    1633,    -1,    -1,    -1,    -1,    -1,  1656,    -1,    -1,  1642,
      -1,  1644,  1645,    -1,    -1,  1648,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1656,  1632,  1633,  1659,    -1,   973,    -1,
      -1,    -1,    -1,   978,    -1,    -1,    -1,  1645,    -1,    -1,
    1648,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1656,   994,
      -1,    -1,    -1,  1286,  1875,  1876,  1877,  1878,    -1,    -1,
    1881,    -1,    -1,    -1,  1885,  1886,    -1,  1888,    -1,  1890,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1902,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1045,  1947,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1956,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1092,    -1,    -1,
      -1,    -1,  1457,    -1,    -1,    -1,  1101,    -1,  1103,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1472,  2014,  2015,
      -1,    -1,    -1,    -1,  1479,    -1,   667,    -1,    -1,    -1,
      -1,  1486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1037,  1038,
    1039,    -1,  1507,    -1,  1509,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2043,    -1,    -1,    -1,    -1,    -1,    -1,  1534,
    1535,  2052,    -1,  2054,    -1,  1885,  1886,    -1,    -1,    -1,
      -1,    -1,  1875,  1876,  1877,  1878,    -1,    -1,  1881,  1486,
      -1,    -1,  1885,  1886,    -1,  1888,    -1,  1890,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1902,
    1215,    -1,  1217,    -1,    -1,    -1,    -1,  1885,  1886,    -1,
      -1,    -1,    -1,  1588,  1589,    -1,  1591,    -1,    -1,  2110,
    2111,    -1,   117,  2114,   785,  2116,    -1,    -1,  2119,    -1,
      -1,    -1,  2123,    -1,    -1,  1610,    -1,  1146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1548,    -1,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   818,   819,   820,
     821,   822,    -1,    -1,   825,    -1,  2157,    -1,    -1,    -1,
     831,    -1,    -1,    -1,    -1,    -1,  1579,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1591,   846,   847,   848,   849,   850,
      -1,    -1,   853,    -1,    -1,  2186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   865,    -1,    -1,    -1,    -1,    -1,
     871,    -1,    -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1624,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1632,
    1633,    -1,    -1,    -1,    -1,  1710,    -1,    -1,    -1,  1642,
    2043,  1644,  1645,    -1,    -1,  1648,    -1,    -1,    -1,  2052,
      -1,  2054,    -1,  1656,    -1,    -1,  1659,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1282,  1283,    -1,    -1,    -1,    -1,    -1,
    1289,  1290,    -1,    -1,  1293,  1294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2110,  2111,    -1,
      -1,  2114,    -1,  2116,    -1,    -1,  2119,    -1,    -1,    -1,
    2123,   316,    -1,    -1,    -1,   320,   321,   322,  1731,    -1,
     325,    -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,
    1743,    -1,   337,  1746,    -1,    -1,    -1,    -1,  1823,   344,
    1825,    -1,    -1,  1828,  2157,  1758,    -1,  1472,    -1,    -1,
    1763,    -1,    -1,  1766,  1479,    -1,   361,    -1,    -1,    -1,
      -1,   366,    -1,    -1,  1849,    -1,  1851,    -1,    -1,    -1,
      -1,    -1,    -1,  2186,    -1,    -1,  1861,    -1,    -1,    -1,
      -1,    -1,  1507,    -1,  1509,    -1,    -1,  1512,    -1,    -1,
    1515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   410,    -1,   412,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1833,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1844,    -1,    -1,    -1,  1852,    28,    -1,    -1,    -1,
      -1,   446,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,  1875,  1876,  1877,  1878,  1591,    -1,  1881,    -1,
      -1,    -1,  1885,  1886,  1599,  1888,    68,  1890,    -1,    -1,
      -1,    -1,    -1,    75,    76,  1610,    -1,  1506,    80,  1902,
      -1,    83,    84,  1164,    86,    87,    88,    -1,    -1,  1912,
    1913,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2017,  2018,  2019,  2020,  2021,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2031,  2032,  2033,  2034,
    1963,    -1,   557,  1224,    -1,  1226,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1626,  1627,    -1,
      -1,    -1,    -1,  2026,    -1,    -1,    -1,    -1,  2103,  2104,
      -1,   626,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2043,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2052,
      -1,  2054,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   657,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1793,  1794,
      -1,  1796,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2095,    -1,   142,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2107,    -1,    -1,  2110,  2111,    -1,
      -1,  2114,    -1,  2116,    -1,    -1,  2119,    -1,    -1,    -1,
    2123,    -1,    -1,    -1,    -1,    -1,    -1,  2130,    -1,   724,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1852,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2157,   750,    -1,    -1,    -1,   754,
     208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   769,    -1,    -1,    -1,    -1,  2182,
      -1,   776,    -1,  2186,   779,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1804,  1805,  2200,    -1,  2202,
      -1,    -1,    -1,    -1,   799,    -1,    -1,    -1,    -1,  2212,
     805,   806,   807,   808,   809,   810,   811,    -1,    -1,   814,
     815,    -1,   817,   818,   819,   820,   821,   822,   823,   824,
      -1,   826,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,    -1,   854,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,
      -1,    -1,   320,   321,   322,    -1,    -1,   325,    -1,    -1,
      -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    -1,   337,
      -1,    -1,    -1,    -1,    -1,    -1,   344,    -1,    -1,    -1,
     895,   896,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   361,    -1,    -1,    -1,    -1,   366,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   410,    -1,   412,   117,    -1,    -1,   963,    -1,
     965,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   446,    -1,
     995,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1004,
      -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1037,    99,  1039,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,   208,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,
     126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,
     136,   137,   138,   139,   140,   141,   142,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1758,    -1,    -1,
      -1,    -1,  1763,  1764,  1765,  1766,  1767,  1768,    -1,   557,
    1105,  1772,  1773,  1774,  1775,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,    -1,
      -1,  1146,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,  1157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   626,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1182,  1183,    -1,
      -1,    -1,   344,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,   657,
      -1,    -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,  1238,    -1,  1240,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,   127,   128,   410,    -1,
     412,    -1,   133,    -1,    -1,   136,   137,  1262,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,   724,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1279,    -1,    -1,    -1,  1283,    -1,
      -1,  1286,    -1,    -1,    -1,  1290,    -1,    -1,    -1,  1294,
      -1,    -1,   750,    -1,    -1,    -1,   754,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   769,    -1,    -1,    -1,    -1,    -1,    -1,   776,    -1,
      -1,   779,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   799,    -1,    -1,    -1,    -1,    -1,   805,   806,   807,
     808,   809,   810,   811,    -1,    -1,   814,   815,    -1,   817,
     818,   819,   820,   821,   822,   823,   824,    -1,   826,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   834,   835,   836,   837,
     838,   839,   840,   841,   842,   843,   844,   845,   846,   847,
     848,   849,   850,   851,   852,   557,   854,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,    -1,    -1,   895,   896,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,  1460,    -1,    -1,    -1,  1464,
      86,    87,    88,    -1,   626,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   657,    -1,    -1,    -1,    -1,
      -1,  1506,    -1,    -1,    -1,   963,   132,   965,    -1,    -1,
      -1,  1516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1527,    -1,    -1,    -1,    -1,  1532,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   995,    -1,    -1,
      -1,  1546,    -1,  1548,    -1,    -1,  1004,    -1,  1553,    -1,
    1555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1572,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1037,
      -1,  1039,    -1,    -1,    -1,    -1,    -1,    -1,   750,    -1,
     147,    -1,   754,   150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   163,   769,   165,    -1,
     167,    -1,    -1,    -1,   776,    -1,    -1,   779,    -1,    -1,
      -1,    -1,  1627,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   799,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1105,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   826,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   834,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1146,    -1,
      -1,    -1,   854,    -1,    -1,    -1,    -1,    -1,    -1,  1157,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1716,    -1,    -1,    -1,  1720,  1721,  1722,    -1,    -1,
      -1,    -1,    -1,    -1,  1182,  1183,  1731,    -1,    -1,   286,
      -1,  1736,  1737,    -1,    -1,    -1,    -1,    -1,  1743,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1764,
    1765,    -1,  1767,  1768,    -1,    -1,    -1,  1772,  1773,  1774,
    1775,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1238,    -1,  1240,    -1,  1789,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1805,   963,   147,   965,  1262,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   163,    -1,
     165,  1279,   167,    -1,    -1,  1283,    -1,  1832,  1286,    -1,
      -1,    -1,  1290,    -1,    -1,    -1,  1294,    -1,    -1,    -1,
      -1,    -1,  1004,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1037,    -1,  1039,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,  1912,  1913,    -1,
    1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,   491,   492,    -1,    -1,    86,    87,
      88,  1946,  1947,  1105,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1956,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
     517,   518,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
      -1,    -1,   539,   540,  1146,   133,    -1,   544,   545,   137,
      -1,   548,   549,    -1,    -1,  1157,    -1,    -1,    -1,    -1,
     557,    -1,  1460,    -1,    -1,  2010,  1464,    -1,    -1,  2014,
    2015,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1182,  1183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   588,    -1,   590,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1506,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1527,
      -1,    -1,    -1,    -1,  1532,    -1,    -1,    -1,  1240,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   341,    -1,  1546,    -1,
    1548,    -1,    -1,    -1,    -1,  1553,    -1,  1555,    -1,    -1,
    1262,    -1,    -1,    -1,    -1,   662,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1572,    -1,    -1,    -1,    -1,    -1,
      -1,  1283,    -1,    -1,  1286,  2130,    -1,    -1,  1290,    -1,
      -1,    -1,  1294,   690,   691,   692,   693,    -1,    -1,    -1,
      -1,    -1,    -1,  2148,    -1,    -1,   491,   492,   403,    -1,
      -1,    -1,   407,    -1,    -1,    -1,    -1,    -1,   503,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1627,
      -1,    -1,   517,   518,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   539,   540,    -1,  2202,    -1,   544,
     545,    -1,    -1,   548,   549,    -1,    -1,   462,    -1,    -1,
      -1,    -1,   769,    -1,    -1,    -1,    -1,    -1,    -1,   776,
      -1,    -1,   779,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   588,    -1,   590,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1716,    -1,
      -1,    -1,  1720,  1721,  1722,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1731,    -1,    -1,    -1,    -1,  1736,  1737,
      -1,    -1,    -1,    -1,    -1,  1743,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,  1764,  1765,    -1,  1767,
    1768,    -1,    -1,    -1,  1772,  1773,  1774,  1775,    -1,    -1,
      -1,    -1,   344,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1789,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   361,
      -1,    -1,    -1,    -1,  1506,    -1,    -1,  1805,    -1,    -1,
      -1,    -1,    -1,    -1,  1516,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
    1532,    -1,    -1,   628,  1832,    -1,    -1,    -1,    -1,    -1,
      85,    86,    -1,    -1,    -1,    -1,  1548,   944,   945,    -1,
      -1,  1553,    -1,  1555,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
    1572,    -1,   667,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,   127,   128,    -1,    -1,   131,   682,   683,    -1,
     135,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1009,    -1,  1912,  1913,    -1,  1915,  1916,  1917,
    1918,  1919,  1920,  1921,  1922,  1627,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   729,    -1,    -1,   732,    -1,    -1,
    1037,    -1,  1039,    -1,    -1,    -1,    -1,    -1,  1946,  1947,
      -1,   746,    -1,    -1,    -1,    -1,    -1,    -1,  1956,    -1,
     755,    -1,    -1,    -1,    -1,   760,   761,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1080,  1081,    -1,    -1,  1084,  1085,  1086,
      -1,    -1,   787,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2010,    -1,    -1,    -1,  2014,  2015,  1720,    -1,
    1722,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1731,
     825,    -1,    -1,    -1,  1736,  1737,    -1,    -1,   833,    -1,
      -1,  1743,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1146,
      -1,    -1,  1149,    -1,    -1,  1152,    -1,    -1,   853,    -1,
      -1,    -1,    -1,    -1,  1161,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   869,   870,    -1,    -1,    -1,   874,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1189,    -1,    -1,    -1,    -1,    -1,  1195,  1196,
    1197,  1198,    -1,  1805,    -1,   667,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1213,  1214,    -1,    -1,
      -1,    -1,    -1,    -1,  1009,    -1,    -1,    -1,    -1,    -1,
     925,    -1,  2130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1283,    -1,    -1,    -1,
      -1,    -1,    -1,  1290,    -1,  1080,  1081,  1294,    -1,  1084,
    1085,  1086,    -1,    -1,  2202,    -1,    -1,    -1,    -1,    -1,
    1912,  1913,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   785,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   799,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1947,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1956,    -1,   818,   819,   820,   821,
     822,    -1,    -1,   825,   826,    -1,    -1,    -1,    -1,   831,
      -1,    -1,   834,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   846,   847,   848,   849,   850,    -1,
      -1,   853,   854,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   865,    -1,    -1,    -1,    -1,    -1,   871,
      -1,    -1,  2014,  2015,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1213,  1214,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1153,  1154,
      -1,  1156,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1164,
      -1,    -1,    -1,    -1,    -1,    -1,  1171,    -1,    -1,    -1,
      -1,    -1,    -1,  1178,  1179,    -1,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1506,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2130,  1224,
      -1,  1226,   134,    -1,    -1,    -1,    -1,  1534,  1535,    -1,
     142,    -1,    -1,    -1,    -1,    -1,  2148,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1553,    -1,  1555,    -1,
     162,    -1,    -1,  1258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1588,  1589,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1304,
    1305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1627,    -1,    -1,    -1,    -1,  1632,  1633,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1642,    -1,  1644,  1645,    -1,
       1,  1648,     3,     4,     5,     6,    -1,     8,     9,  1656,
      -1,  1356,  1659,  1358,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1369,  1370,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1164,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,  1420,    -1,  1422,    -1,    80,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    89,    90,
      91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,  1534,
    1535,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,  1224,    -1,  1226,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,   127,   128,   129,    -1,
     131,    -1,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,   398,    -1,    -1,    -1,
      -1,    -1,    -1,  1588,  1589,    -1,    -1,    -1,  1805,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1286,    -1,  1823,    -1,  1825,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   446,   447,    -1,    -1,    -1,   451,
      -1,    -1,  1849,    -1,  1851,    -1,    -1,    -1,   460,    -1,
      -1,   463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1875,  1876,
    1877,  1878,    -1,    -1,  1881,    -1,    -1,    -1,  1885,  1886,
      -1,  1888,    -1,  1890,    -1,   497,    -1,    -1,    -1,    -1,
      -1,   503,    -1,    -1,    -1,  1902,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1616,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1638,  1639,  1640,  1641,    -1,  1643,  1644,
      -1,    -1,    -1,    -1,  1649,  1650,    -1,  1652,    -1,  1654,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1662,  1663,  1664,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   583,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
      -1,   593,    -1,  1688,    -1,  1690,    -1,  1692,    -1,  1694,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   613,    -1,    -1,   616,    -1,   618,    -1,   620,    -1,
    2017,  2018,  2019,  2020,  2021,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2031,  2032,  2033,  2034,  1823,    55,
    1825,    -1,    -1,    -1,    -1,    -1,  2043,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2052,    -1,  2054,    -1,    -1,
      -1,    -1,    -1,    -1,  1849,    -1,  1851,    -1,    -1,    -1,
      -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,   105,
     106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2103,  2104,   124,    -1,
      -1,    -1,    -1,  2110,  2111,    -1,    -1,  2114,    -1,  2116,
      -1,    -1,  2119,    -1,    -1,    -1,  2123,    -1,    -1,    -1,
      -1,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   160,    -1,    -1,    -1,   164,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2157,    -1,    -1,    -1,    -1,    -1,    -1,  1862,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,   195,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1882,    -1,  2186,
      -1,    -1,  1887,    -1,  1889,  1890,    -1,  1892,  1893,    -1,
    1895,    -1,  1897,    -1,    -1,    -1,    -1,    -1,  1903,  1904,
      -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2017,  2018,  2019,  2020,  2021,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2031,  2032,  2033,  2034,
      -1,    -1,    -1,  1948,    -1,    -1,    -1,    -1,    -1,    -1,
     862,   863,   864,    -1,    -1,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   304,   305,
     306,    -1,    -1,   895,   896,   897,  1758,    -1,    -1,     3,
      -1,  1763,  1764,  1765,  1766,  1767,  1768,    -1,   324,    -1,
    1772,  1773,  1774,  1775,   330,    -1,    -1,    -1,  2103,  2104,
      -1,    -1,    -1,    -1,    28,   341,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,  2044,
    2045,    -1,  2047,  2048,  2049,    -1,    -1,    -1,  2053,  2054,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,   970,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   995,    -1,    -1,    -1,   101,    -1,    -1,
    1002,  1003,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,  1015,    -1,    -1,    -1,  2112,  2113,   123,
    2115,  2116,   126,    -1,    -1,  2120,    -1,    -1,   444,    -1,
      -1,    -1,    -1,   137,   450,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1915,  1916,  1917,  1918,  1919,  1920,  1921,
    1922,    -1,     0,    -1,    -1,  2160,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,    28,    -1,
      -1,    -1,  1104,    -1,    -1,    -1,    -1,  1109,    -1,    -1,
      -1,    -1,    -1,  1115,    -1,    -1,    -1,    55,    56,  1121,
     536,    -1,    -1,    -1,    -1,  1127,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      -1,   557,    72,    73,    74,    -1,    -1,    -1,   564,    87,
      88,   567,    -1,    -1,    92,    85,    86,    -1,    -1,    -1,
      98,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,   119,
     120,    -1,    -1,   123,    -1,    -1,   126,   127,   128,   137,
     286,   131,    -1,    -1,    -1,    -1,   136,   137,   138,   139,
     140,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1238,  1239,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,   669,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    -1,   690,   691,   692,   693,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   718,   719,   720,    -1,    -1,   723,    -1,    -1,
      -1,    -1,    -1,   729,    -1,    -1,    -1,   403,    -1,    -1,
      -1,   737,    -1,    -1,    -1,    -1,    -1,    -1,   744,   745,
     746,    -1,   748,   749,    -1,    -1,    -1,    -1,    -1,   755,
      -1,    -1,   758,   281,    -1,    -1,    -1,    -1,    -1,    -1,
     766,    -1,    -1,   769,    -1,     3,   294,    -1,    -1,    -1,
     776,    -1,    -1,   779,    -1,    -1,   304,    -1,   306,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   462,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,  1435,  1436,    83,    84,    -1,    86,    87,
      88,    -1,    -1,   859,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,   101,     8,     9,    -1,    -1,  1460,    -1,
      -1,    -1,  1464,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    28,   123,    -1,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   904,   137,
      -1,   139,    -1,    -1,    -1,    -1,   912,   913,    -1,    -1,
      -1,    -1,    -1,    -1,   920,    -1,   444,   923,   924,   925,
      -1,   927,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,   462,  1527,    -1,    -1,    -1,    -1,
      -1,    85,    86,    -1,    -1,    -1,    -1,  1539,  1540,  1541,
    1542,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,   496,    -1,
      -1,   499,   978,    -1,    -1,   119,   120,    -1,    -1,   123,
      -1,    -1,   126,   127,   128,   129,    -1,   131,   994,    -1,
      -1,   667,   136,   137,    -1,   139,   140,   141,   142,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,    -1,   536,    -1,
      -1,    -1,    -1,    -1,   690,   691,   692,   693,    -1,    -1,
      -1,    -1,    -1,    -1,   552,   553,   554,   555,   556,    -1,
      -1,  1037,  1038,  1039,    -1,    -1,    -1,    -1,    -1,  1045,
      -1,    -1,    -1,    -1,   572,   573,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   729,    -1,    -1,   732,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   593,    -1,   595,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   606,   755,
      -1,    -1,    -1,    -1,   760,    -1,    -1,    -1,    -1,    -1,
      -1,  1683,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   787,    -1,    -1,    -1,    -1,    -1,   645,    -1,    -1,
      -1,    -1,    -1,    -1,  1716,    -1,  1718,    -1,    -1,  1721,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1146,    -1,    -1,  1149,    -1,    -1,  1152,    -1,    -1,   825,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   833,    -1,  1165,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   853,    -1,    -1,
      -1,    -1,    -1,  1189,    -1,    -1,    -1,    -1,   716,  1195,
    1196,  1197,  1198,   869,    -1,   723,    -1,  1789,   874,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1218,    -1,  1220,    -1,   744,    -1,    -1,    -1,
     748,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1234,    -1,
      -1,  1237,    -1,    -1,    -1,    -1,    -1,    -1,   766,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,   925,
      -1,  1257,    -1,    -1,    -1,    -1,    -1,    -1,  1264,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1282,  1283,    -1,    -1,
      -1,    -1,    -1,  1289,  1290,    -1,    -1,  1293,  1294,    -1,
      -1,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    89,    90,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,    -1,  1946,    -1,    -1,   119,   120,    -1,
      -1,   123,    -1,    -1,   126,    -1,   128,   129,    -1,   897,
     898,   133,    -1,   135,   136,   137,   904,   139,   140,   141,
     142,    -1,    -1,    -1,   912,   913,    -1,    -1,    -1,    -1,
      -1,    -1,   920,    -1,    -1,   923,   924,   925,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2022,    -1,  2024,    -1,    -1,    -1,   964,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   972,    -1,    -1,    -1,    -1,    -1,
     978,    -1,    -1,    -1,    -1,    -1,   984,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   994,    -1,  1144,    -1,
      -1,    -1,    -1,  1149,    -1,    -1,  1152,  1153,  1154,    -1,
    1156,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1164,    -1,
      -1,    -1,    -1,    -1,    -1,  1171,    -1,    -1,    -1,    -1,
    1506,    -1,  1178,  1509,   194,   195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1189,    -1,    -1,    -1,  1045,    -1,  1195,
    1196,  1197,  1198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,  1224,    -1,
    1226,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,  1091,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1100,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,  1258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   281,    -1,    -1,   284,   285,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1610,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   305,    -1,    67,    -1,    -1,
    1626,  1627,    72,    73,    74,    -1,  1632,  1633,  1304,    -1,
      -1,    -1,    -1,    -1,   324,    85,    86,    -1,    -1,  1645,
     330,    -1,  1648,    -1,    -1,    -1,    -1,    -1,    -1,    99,
    1656,   341,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,    -1,    -1,   123,    -1,    -1,   126,   127,   128,    -1,
    1356,   131,    -1,    -1,    -1,   135,   136,   137,    -1,   139,
     140,   141,   142,  1369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1234,    -1,    -1,  1237,
      -1,  1239,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1247,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,  1257,
       8,     9,    -1,  1739,    -1,    -1,  1264,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1420,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,   444,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,  1804,  1805,
      -1,    -1,    80,    -1,    -1,    -1,   496,    85,    86,    87,
      -1,    89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,  1828,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,   123,   536,    -1,   126,   127,
     128,   129,    -1,   131,    -1,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,   142,    -1,    -1,   557,    -1,    -1,
      -1,    -1,    -1,    -1,   564,    -1,    -1,   567,    -1,  1885,
    1886,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1948,  1471,    -1,    -1,    -1,    -1,    -1,    -1,
    1478,    -1,    -1,    -1,    -1,    -1,  1632,  1633,  1486,    -1,
      -1,    -1,  1638,    -1,  1640,    -1,    -1,  1643,  1644,    -1,
      -1,    -1,    -1,  1649,  1650,    -1,  1652,    -1,    -1,  1507,
      -1,  1509,    -1,    -1,    -1,    -1,  1662,    -1,  1664,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     690,   691,   692,   693,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1688,    -1,    -1,    -1,  1692,    -1,   208,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   718,   719,
     720,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   729,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   737,    -1,    -1,
      -1,    -1,    -1,    -1,   744,   745,   746,    -1,   748,   749,
      -1,    -1,  1590,    -1,    -1,   755,    -1,    -1,   758,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   766,    -1,    97,   769,
      -1,    -1,  1610,    -1,    -1,    -1,   776,    -1,    -1,   779,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   325,    -1,    -1,    -1,    -1,
      -1,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   859,
      -1,    -1,    -1,    -1,    -1,   194,   195,    -1,    -1,    -1,
      -1,    -1,  1710,    -1,    -1,    -1,  1862,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1881,  1882,    -1,    -1,    -1,
      -1,    -1,   231,  1889,   904,    -1,    -1,  1893,    -1,  1895,
     410,    -1,   412,   913,    -1,    -1,    -1,    -1,  1904,    -1,
     920,    -1,    -1,    -1,    -1,   925,    -1,   927,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1785,    -1,    -1,
      -1,    -1,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
      -1,    -1,  1948,    -1,    -1,    -1,    -1,    -1,    -1,  1807,
      -1,    -1,    -1,    -1,    -1,    -1,   305,    -1,   978,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1828,    -1,    -1,    -1,   994,   324,    -1,    -1,    -1,    -1,
      -1,   330,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,  1037,  1038,  1039,
      -1,    -1,    -1,    -1,    -1,  1045,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   557,  2044,  2045,
      -1,  2047,    -1,  2049,    -1,    -1,  2052,  2053,  2054,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,    -1,
    1928,    -1,    -1,    -1,   594,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,   444,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,   123,  2112,    -1,   126,  2115,
     128,    -1,    -1,   131,   132,   133,    -1,  2123,   136,   137,
      -1,   139,   140,   141,   142,    -1,  1146,    -1,    -1,  1149,
      -1,    -1,  1152,    -1,    -1,    -1,    -1,   657,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,  2160,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1189,
      -1,    -1,    -1,    -1,    -1,  1195,  1196,  1197,  1198,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1218,    -1,
    1220,    -1,    -1,    -1,   724,    -1,    -1,    -1,   557,    -1,
      -1,    -1,    -1,    -1,  1234,   564,    -1,  1237,   567,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
       4,     5,     6,    -1,     8,     9,    -1,  1257,    -1,    -1,
      -1,    -1,    -1,    -1,  1264,    -1,    -1,    -1,    -1,   769,
      -1,    -1,    -1,    -1,    -1,    -1,   776,    -1,    -1,   779,
      -1,    -1,  1282,  1283,    -1,    -1,    -1,    -1,    -1,  1289,
    1290,    -1,    -1,  1293,  1294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    56,    -1,    -1,    -1,    99,    -1,    -1,    63,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,   690,   691,   692,   693,   119,   120,    -1,    -1,    -1,
      -1,    86,    87,    88,   128,   129,    -1,   131,   132,   133,
      -1,    -1,   136,   137,    -1,   139,   140,   141,   142,   718,
     719,   720,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     729,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   737,    -1,
      -1,    -1,    -1,    -1,    -1,   744,   745,   746,    -1,   748,
     749,    -1,   137,   138,    -1,    -1,   755,    -1,    -1,   758,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   766,    -1,   154,
     769,    -1,    -1,    -1,    -1,    -1,    -1,   776,    -1,    -1,
     779,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   963,    -1,   965,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1004,    -1,  1506,    -1,    -1,  1509,
      -1,    -1,    -1,    -1,    -1,   230,   231,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     859,    -1,    -1,    -1,    -1,    -1,    -1,  1037,    -1,  1039,
      56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,    -1,
      -1,    87,    88,    -1,    -1,   904,    -1,    -1,    -1,   294,
      -1,    -1,    -1,    -1,   913,    -1,    -1,    -1,    -1,   304,
      -1,   920,    -1,    -1,    -1,    -1,   925,    -1,   927,    -1,
      -1,    -1,    -1,    -1,    -1,  1105,    -1,    -1,    -1,    -1,
    1610,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,   138,    -1,    -1,    -1,  1626,  1627,    -1,    -1,
      -1,    -1,  1632,  1633,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1645,  1146,    -1,  1648,   978,
      -1,    -1,    -1,    -1,    -1,    -1,  1656,  1157,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   994,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   420,    -1,    -1,  1037,  1038,
    1039,   426,    -1,    -1,    -1,   231,  1045,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1739,
    1240,    -1,    -1,    -1,    -1,    -1,    -1,   462,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1262,    -1,    -1,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,   496,    -1,  1283,    -1,    -1,    -1,    -1,   304,    -1,
    1290,    -1,    -1,    -1,  1294,    -1,    -1,   512,    -1,    -1,
      -1,    -1,    -1,    -1,  1804,  1805,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1146,    -1,    -1,
    1149,    -1,    -1,  1152,    -1,    -1,    -1,    -1,  1828,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   552,   553,   554,
     555,   556,    -1,   558,    -1,    -1,   561,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   572,   573,   574,
    1189,    -1,    -1,    -1,    -1,    -1,  1195,  1196,  1197,  1198,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,   593,    -1,
     595,    -1,    -1,    -1,    -1,  1885,  1886,    -1,    -1,  1218,
      -1,  1220,    -1,   608,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   420,  1234,    -1,    -1,  1237,    -1,
     426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1257,    -1,
      -1,    -1,    -1,    -1,    -1,  1264,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   462,    -1,  1948,    -1,
      -1,    -1,    -1,  1282,  1283,    -1,    -1,    -1,    -1,    -1,
    1289,  1290,    -1,    -1,  1293,  1294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   709,    -1,     1,    -1,     3,     4,
       5,     6,   717,     8,     9,    -1,  1506,    -1,   723,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1516,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1532,    -1,    -1,    -1,   552,   553,   554,   555,
     556,    -1,   558,    -1,    -1,   561,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1553,    -1,  1555,   572,   573,   574,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,  1572,    -1,    -1,    -1,    -1,   593,    -1,   595,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   608,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,   127,   128,   129,    -1,   131,  1627,    -1,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1506,    -1,    -1,
    1509,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   911,    -1,   913,    -1,
      -1,   717,    -1,    -1,    -1,   920,    -1,   723,    -1,    -1,
     925,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1720,    -1,  1722,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1736,  1737,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   964,
      97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   973,    -1,
      -1,    -1,    -1,   978,  1764,  1765,    -1,  1767,  1768,   984,
      -1,    -1,  1772,  1773,  1774,  1775,    -1,    -1,    -1,   994,
      -1,  1610,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1626,  1627,    -1,
      -1,   148,    -1,  1632,  1633,  1805,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   160,    -1,    -1,  1645,   164,    -1,  1648,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1656,    -1,    -1,
    1045,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,   195,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1091,  1092,    -1,    -1,
      -1,    -1,    97,    -1,   231,    -1,  1101,    -1,  1103,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   913,    -1,    -1,
      -1,    -1,    -1,    -1,   920,    -1,    -1,    -1,    -1,   925,
    1739,    -1,    -1,    -1,    -1,  1915,  1916,  1917,  1918,  1919,
    1920,  1921,  1922,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   148,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,    -1,    -1,    -1,   160,    -1,  1947,   964,   164,
      -1,    -1,    -1,    -1,    -1,    -1,  1956,   973,   305,    -1,
      -1,    -1,   978,    -1,    -1,    -1,    -1,    -1,   984,    -1,
      -1,    -1,    -1,    -1,    -1,  1804,  1805,   324,   994,   194,
     195,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1828,
    1215,    -1,  1217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2010,    -1,    -1,    -1,  2014,  2015,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,  1045,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1885,  1886,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,    -1,  1091,  1092,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1101,    67,  1103,    -1,    -1,
     305,    72,    73,    74,    -1,    -1,    -1,   444,    -1,    -1,
      -1,    -1,    -1,   450,    85,    86,    -1,    -1,    -1,   324,
      -1,    -1,    -1,    -1,   461,   330,    -1,    -1,    99,  1948,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,   127,   128,    -1,   496,
     131,    -1,    -1,    -1,   135,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,   513,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   536,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1215,
      -1,  1217,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,    37,    -1,    -1,    -1,   564,    -1,    -1,
     567,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,   461,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,  1472,    -1,    -1,
      -1,    85,    86,    87,  1479,    -1,    -1,    -1,    -1,    -1,
      -1,  1486,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,    -1,  1507,    -1,  1509,   119,   120,  1512,   513,   123,
    1515,    -1,   126,   127,   128,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   136,   137,    -1,   139,   140,   141,   142,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,   557,   690,   691,   692,   693,    -1,    -1,   564,
      -1,    -1,   567,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   718,   719,   720,    -1,    -1,  1591,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1599,    -1,    -1,    -1,    -1,    -1,
     737,    -1,    -1,    -1,    -1,  1610,    -1,   744,   745,    67,
      -1,   748,   749,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,    -1,
      -1,    -1,   769,    -1,    -1,    -1,    -1,    -1,    -1,   776,
      -1,    99,   779,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,   123,  1472,    -1,   126,   127,
     128,    -1,    -1,  1479,    -1,   133,    -1,    -1,   136,   137,
    1486,   139,   140,   141,   142,   690,   691,   692,   693,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1507,    -1,  1509,    -1,    -1,  1512,    -1,    -1,  1515,
      -1,    -1,    -1,   718,   719,   720,    -1,    -1,    -1,    -1,
      -1,    -1,   859,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,   737,     8,     9,    -1,    -1,    -1,    -1,   744,
     745,    -1,    -1,   748,   749,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   769,    -1,    -1,   904,    -1,    -1,
      -1,   776,    -1,    -1,   779,   912,   913,    -1,    -1,    -1,
      -1,    -1,    -1,   920,    -1,  1591,   923,    -1,  1793,  1794,
     927,  1796,    67,  1599,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,   148,  1610,    -1,    -1,    -1,    -1,    -1,
      85,    86,    -1,    -1,    -1,   160,    -1,    -1,    -1,   164,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,   978,     1,    -1,   119,   120,    -1,  1852,   123,   194,
     195,   126,   127,   128,    -1,    -1,   131,   994,    -1,    -1,
     135,   136,   137,    -1,   139,   140,   141,   142,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
    1037,  1038,  1039,    -1,    -1,    -1,    -1,   912,  1045,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,   923,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,   284,
     285,   286,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     305,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,   324,
      -1,    -1,    -1,    -1,    -1,   330,    -1,  1793,  1794,    -1,
    1796,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1146,
      -1,    -1,  1149,    -1,    -1,  1152,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1037,  1038,  1039,    -1,    -1,    -1,    -1,    -1,
    1045,    -1,    -1,    -1,    -1,    -1,  1852,    -1,    -1,    -1,
      -1,    -1,  1189,    -1,    -1,    -1,    -1,    -1,  1195,  1196,
    1197,  1198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1218,    -1,  1220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1237,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,
    1257,    -1,    -1,    -1,    -1,    -1,    -1,  1264,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1146,    -1,    -1,  1149,  1282,  1283,  1152,    -1,    -1,
      -1,    -1,  1289,  1290,    -1,    -1,  1293,  1294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1189,    -1,    -1,    -1,    -1,    -1,
    1195,  1196,  1197,  1198,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   557,  1218,    -1,  1220,    -1,    -1,    -1,   564,
      -1,    -1,   567,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1257,    -1,    -1,    -1,    -1,    -1,    -1,  1264,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1282,  1283,    -1,
      85,    86,    -1,    -1,  1289,  1290,    -1,    -1,  1293,  1294,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,   127,   128,   129,    -1,   131,    -1,    -1,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   690,   691,   692,   693,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1506,
      -1,    -1,  1509,   718,   719,   720,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   737,    -1,    -1,    -1,    -1,    -1,    -1,   744,
     745,    -1,    -1,   748,   749,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   769,    -1,    -1,    -1,    -1,    -1,
      -1,   776,    -1,     1,   779,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1610,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1626,
    1627,    -1,    -1,    -1,    -1,  1632,  1633,    -1,    -1,    67,
      -1,  1506,    -1,    -1,    72,    73,    74,    -1,  1645,    -1,
      -1,  1648,    -1,    -1,    -1,    -1,    -1,    85,    86,  1656,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,   127,
     128,   129,    -1,   131,    -1,    -1,    -1,   912,   136,   137,
      -1,   139,   140,   141,   142,    -1,    -1,    -1,   923,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1626,  1627,    -1,    -1,    -1,    28,  1632,  1633,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1645,    -1,    -1,  1648,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1656,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    -1,  1804,  1805,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    89,    90,    91,
      -1,  1828,  1037,  1038,  1039,    -1,    -1,    99,    -1,    -1,
    1045,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,
      -1,   123,    -1,     1,   126,     3,   128,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
     142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1885,  1886,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,  1804,
    1805,  1146,    80,    -1,  1149,    83,    84,  1152,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,  1189,   123,    -1,    -1,   126,   127,
    1195,  1196,  1197,  1198,    -1,    -1,    -1,    -1,    -1,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1218,    -1,  1220,    -1,    -1,    -1,    -1,
    1885,  1886,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1257,    -1,    -1,    -1,    -1,    -1,    -1,  1264,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1282,  1283,    -1,
      -1,    -1,    -1,    -1,  1289,  1290,    -1,    -1,  1293,  1294,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,  1506,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1626,  1627,    -1,    -1,    -1,    -1,  1632,  1633,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1645,    -1,    -1,  1648,    -1,    -1,    -1,    -1,    -1,     0,
       1,  1656,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,    -1,    -1,  1804,
    1805,    -1,    -1,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
    1885,  1886,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,   142,   143,   144,
     145,   146,   147,     1,    -1,    -1,    -1,    -1,    -1,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,   125,   126,    -1,
      -1,   129,   130,   131,   132,    -1,   134,    -1,    -1,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,   146,   147,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,   124,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,    -1,   136,   137,    -1,   139,   140,
     141,   142,   143,   144,   145,   146,   147,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,
     124,   125,   126,   127,   128,    -1,   130,   131,    -1,    -1,
     134,    -1,   136,   137,    -1,   139,   140,   141,   142,   143,
     144,   145,   146,   147,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,    -1,    -1,
     126,   127,   128,   129,    -1,   131,   132,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,   142,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,    -1,    -1,   126,   127,   128,   129,    -1,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,   142,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,    -1,    -1,   126,   127,   128,   129,
      -1,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,   142,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,    -1,    -1,   126,
     127,   128,   129,    -1,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,   142,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
      -1,    -1,   126,   127,   128,   129,    -1,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,   140,   141,   142,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,    -1,    -1,   126,   127,   128,   129,    -1,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,   142,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,    -1,    -1,   126,   127,
     128,   129,    -1,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,   142,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,    -1,
      -1,   126,   127,   128,   129,    -1,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,   142,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,    -1,    -1,   126,   127,   128,   129,    -1,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
     142,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,    -1,    -1,   126,    -1,   128,
     129,    -1,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,   142,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,    -1,    -1,
     126,    -1,   128,   129,    -1,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,   142,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,    -1,    -1,   126,    -1,   128,   129,    -1,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,   142,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,    -1,    -1,   126,    -1,   128,   129,
      -1,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,   142,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,    -1,    -1,   126,
      -1,   128,   129,    -1,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,   142,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
      -1,    -1,   126,    -1,   128,   129,    -1,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,   140,   141,   142,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,    -1,    -1,   126,    -1,   128,   129,    -1,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,   142,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,   142,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,    -1,
      -1,   126,    -1,   128,   129,    -1,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,   142,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,    -1,    -1,   126,    -1,   128,   129,    -1,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
     142,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,    -1,    -1,   126,    -1,   128,
     129,    -1,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,   142,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,    -1,    -1,
     126,    -1,   128,   129,    -1,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,   142,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,    -1,    -1,   126,    -1,   128,   129,    -1,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,   142,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,    -1,    -1,   126,    -1,   128,   129,
      -1,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,   142,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,    -1,    -1,   126,
      -1,   128,   129,    -1,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,   142,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
      -1,    -1,   126,    -1,   128,   129,    -1,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,   140,   141,   142,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,    -1,    -1,   126,    -1,   128,   129,    -1,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,   142,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,   142,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,    -1,
      -1,   126,    -1,   128,   129,    -1,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,   142,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,    -1,    -1,   126,    -1,   128,   129,    -1,   131,
     132,   133,    -1,   135,   136,   137,    -1,   139,   140,   141,
     142,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,    -1,    -1,   126,    -1,   128,
     129,    -1,   131,   132,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,   142,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,    -1,    -1,
     126,    -1,   128,   129,    -1,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,   141,   142,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,    -1,    -1,   126,    -1,   128,   129,    -1,   131,   132,
     133,    -1,   135,   136,   137,    -1,   139,   140,   141,   142,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,    -1,    -1,   126,    -1,   128,   129,
      -1,   131,   132,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,   142,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,    -1,    -1,   126,
      -1,   128,   129,    -1,   131,   132,   133,    -1,   135,   136,
     137,    -1,   139,   140,   141,   142,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
      -1,    -1,   126,    -1,   128,   129,    -1,   131,   132,   133,
      -1,   135,   136,   137,    -1,   139,   140,   141,   142,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,    -1,    -1,   126,    -1,   128,   129,    -1,
     131,   132,   133,    -1,   135,   136,   137,    -1,   139,   140,
     141,   142,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,   131,   132,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,   142,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,    -1,
      -1,   126,    -1,   128,   129,    -1,   131,   132,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,   142,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,   126,   127,   128,   129,    -1,   131,
     132,   133,    -1,    -1,   136,   137,    -1,   139,   140,   141,
     142,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,    -1,    -1,   126,    -1,   128,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,    -1,   139,
     140,   141,   142,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
      -1,   139,   140,   141,   142,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
     126,    -1,   128,   129,    -1,   131,   132,   133,    -1,    -1,
     136,   137,    -1,   139,   140,   141,   142,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,   126,    -1,   128,   129,    -1,   131,   132,   133,
      -1,    -1,   136,   137,    -1,   139,   140,   141,   142,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,   126,    -1,   128,   129,    -1,   131,
     132,   133,    -1,    -1,   136,   137,    -1,   139,   140,   141,
     142,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,   126,    -1,   128,   129,
      -1,   131,   132,   133,    -1,    -1,   136,   137,    -1,   139,
     140,   141,   142,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,   131,   132,   133,    -1,    -1,   136,   137,
      -1,   139,   140,   141,   142,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
     126,    -1,   128,   129,    -1,   131,   132,   133,    -1,    -1,
     136,   137,    -1,   139,   140,   141,   142,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,   126,    -1,   128,   129,    -1,   131,   132,   133,
      -1,    -1,   136,   137,    -1,   139,   140,   141,   142,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,   126,    -1,   128,   129,    -1,   131,
     132,   133,    -1,    -1,   136,   137,    -1,   139,   140,   141,
     142,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,   126,    -1,   128,   129,
      -1,   131,   132,   133,    -1,    -1,   136,   137,    -1,   139,
     140,   141,   142,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,   131,   132,   133,    -1,    -1,   136,   137,
      -1,   139,   140,   141,   142,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,   123,    -1,    -1,
     126,    -1,   128,   129,    -1,   131,   132,   133,    -1,    -1,
     136,   137,    -1,   139,   140,   141,   142,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,   126,    -1,   128,   129,    -1,   131,   132,   133,
      -1,    -1,   136,   137,    -1,   139,   140,   141,   142,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,   123,    -1,    -1,   126,    -1,   128,   129,    -1,   131,
     132,   133,    -1,    -1,   136,   137,    -1,   139,   140,   141,
     142,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,   123,    -1,    -1,   126,     1,   128,     3,
       4,     5,     6,    -1,     8,     9,   136,   137,    -1,   139,
     140,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,   126,     1,   128,     3,     4,     5,     6,    -1,
       8,     9,   136,   137,    -1,   139,   140,   141,   142,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
      -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,   127,
     128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,   137,
      -1,   139,   140,   141,   142,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,
     126,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     136,   137,    -1,   139,   140,   141,   142,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,    -1,   119,   120,    -1,    -1,   123,
      -1,    -1,   126,     1,   128,     3,     4,     5,     6,   133,
       8,     9,   136,   137,    -1,   139,   140,   141,   142,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    99,    -1,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    28,
      -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,   127,
     128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,   137,
      -1,   139,   140,   141,   142,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,   128,
     129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,    -1,
     139,   140,   141,   142,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,   127,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,   127,   128,   129,    -1,   131,    -1,    -1,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,    -1,   128,    -1,    -1,    -1,    -1,
     133,    -1,    -1,   136,   137,   138,   139,   140,   141,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
     127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,   127,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    67,     8,     9,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,    67,   128,   129,    -1,   131,    72,    73,    74,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,   128,
     129,    -1,    -1,    -1,   133,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,   127,   128,   129,    -1,    -1,    -1,
      -1,    -1,    -1,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      67,     8,     9,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
      67,   128,   129,    -1,   131,    72,    73,    74,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
     127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    67,     8,     9,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,    67,   128,    -1,    -1,
     131,    72,    73,    74,    -1,   136,   137,   138,   139,   140,
     141,   142,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,    -1,   128,    -1,    -1,
     131,    -1,    -1,    -1,   135,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    67,     8,     9,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,    67,   128,    -1,    -1,   131,    72,    73,    74,
      -1,   136,   137,   138,   139,   140,   141,   142,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,    -1,   128,    -1,    -1,   131,    -1,    -1,    -1,
     135,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,   127,   128,
      -1,    -1,   131,    -1,    -1,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,   127,   128,    -1,    -1,   131,    -1,
      -1,    -1,    -1,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
     127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,   127,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,   127,   128,   129,    -1,    -1,    -1,    -1,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    67,     8,
       9,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,    67,   128,
     129,    -1,   131,    72,    73,    74,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,   127,   128,
     129,    -1,    -1,    -1,    -1,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    67,     8,     9,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,    67,   128,    -1,    -1,   131,    72,
      73,    74,   135,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,    -1,   128,    -1,    -1,   131,    -1,
      -1,    -1,   135,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
     127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,   127,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,   127,   128,
     129,    -1,    -1,    -1,    -1,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,   127,   128,    -1,    -1,   131,    -1,
      -1,    -1,    -1,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
      -1,   128,    -1,    -1,    -1,   132,   133,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,    -1,   128,    -1,    -1,
      -1,   132,   133,    -1,    -1,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,   127,   128,
      -1,    -1,   131,    -1,    -1,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,   127,   128,    -1,    -1,   131,    -1,
      -1,    -1,    -1,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
      -1,   128,    -1,    -1,    -1,   132,   133,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    67,     8,     9,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,    67,   128,    -1,    -1,
      -1,    72,    73,    74,    -1,   136,   137,   138,   139,   140,
     141,   142,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,    -1,   128,    -1,    -1,
      -1,    -1,   133,    -1,    -1,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    67,     8,     9,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,    67,   128,    -1,    -1,    -1,    72,    73,    74,
      -1,   136,   137,   138,   139,   140,   141,   142,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,   137,   138,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,   128,
      -1,    -1,    -1,    -1,   133,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    67,     8,     9,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,    67,   128,    -1,    -1,    -1,    72,
      73,    74,    -1,   136,   137,   138,   139,   140,   141,   142,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,    -1,   128,    -1,    -1,    -1,    -1,
      -1,    -1,   135,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
     127,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,    -1,   128,    -1,    -1,
      -1,    -1,   133,    -1,    -1,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    67,     8,     9,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,    67,   128,    -1,    -1,    -1,    72,    73,    74,
      -1,   136,   137,   138,   139,   140,   141,   142,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    67,     8,
       9,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,    67,   128,
      -1,    -1,    -1,    72,    73,    74,   135,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,   128,
      -1,    -1,    -1,    -1,   133,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,    -1,   128,    -1,    -1,    -1,    -1,
     133,    -1,    -1,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
      -1,   128,    -1,    -1,    -1,    -1,   133,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,    -1,   128,    -1,    -1,
      -1,    -1,   133,    -1,    -1,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,    -1,   128,    -1,    -1,    -1,    -1,   133,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,   127,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,    -1,   128,    -1,    -1,    -1,    -1,
     133,    -1,    -1,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
     127,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,
     137,    -1,   139,   140,   141,   142,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,   123,    -1,    -1,   126,   127,   128,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   136,   137,    -1,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,    -1,   123,    -1,
      -1,   126,    -1,   128,    -1,    -1,    -1,    -1,   133,    -1,
      -1,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    67,     8,
       9,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,    67,   128,
      -1,    -1,    -1,    72,    73,    74,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    67,     8,     9,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,    67,   128,    -1,    -1,    -1,    72,
      73,    74,    -1,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,    -1,
     123,    -1,    -1,   126,    -1,   128,     0,     1,    -1,     3,
       4,     5,    -1,   136,   137,    -1,   139,   140,   141,   142,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,   123,
      -1,    -1,   126,   127,   128,   129,    -1,   131,   132,    -1,
      -1,    -1,   136,   137,     0,     1,    -1,     3,     4,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,   123,    -1,    -1,
     126,    -1,   128,   129,    -1,   131,   132,    -1,    -1,    -1,
     136,   137,     0,     1,    -1,     3,     4,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,     0,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,     0,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,     0,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,    -1,     1,   132,     3,     4,     5,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,     1,    -1,     3,     4,     5,    -1,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,     1,    -1,     3,   123,    -1,    -1,   126,    -1,   128,
     129,    -1,    -1,    -1,    -1,    -1,    -1,   136,   137,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,     3,
      -1,    -1,    -1,   123,    -1,    -1,   126,   127,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,     3,    -1,    -1,    -1,   123,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,     3,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,     3,    -1,    -1,
      -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,     3,    -1,    -1,    -1,   123,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,     3,
      -1,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,     3,    -1,    -1,    -1,   123,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      78,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,   106,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,     3,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    79,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,     3,    -1,    -1,
      -1,   123,    -1,    -1,   126,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,     3,    -1,    -1,    -1,   123,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   135,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,
     132,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   132,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     132,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   132,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,     0,     1,    -1,     3,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     132,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      77,    78,    -1,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,   102,    -1,    -1,     3,   106,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,
      -1,    -1,   129,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,   108,     3,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,   108,
       3,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   132,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,     1,   108,     3,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,
      -1,    -1,   129,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,   126,    -1,    -1,   129,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,    -1,    -1,   126,    -1,    -1,   129,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,   126,    -1,    -1,   129,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,
      -1,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,   102,    -1,     0,     1,   106,     3,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,
     129,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,   126,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,
     126,   127,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   127,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   127,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   127,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   127,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,   101,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,   123,    -1,    -1,   126,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   126,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,   123,    -1,    -1,   126,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,    -1,    -1,   126,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
      -1,    -1,   126,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,
     126,   127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,   122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   132,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,   122
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    55,    67,    68,
      75,    76,    77,    78,    80,    81,    82,    83,    84,    86,
      87,    88,   101,   102,   106,   111,   112,   113,   114,   115,
     116,   117,   118,   121,   122,   123,   126,   129,   149,   150,
     151,   153,   178,   215,   216,   217,   218,   219,   220,   272,
     275,   276,   279,   280,   281,   282,   283,   284,   285,   287,
     291,   294,   295,   296,   297,   298,   299,   304,   305,   314,
     315,   316,   323,   324,   328,   329,   332,   337,   367,   370,
     371,   389,   390,   392,   393,   394,   395,   396,   397,    78,
     135,     5,    31,   220,   391,   220,   126,   126,   126,   153,
     220,   391,   126,   285,   286,   323,   332,    37,   151,   220,
     313,   314,   316,   318,   319,   320,   322,   323,   332,   335,
     336,   341,   124,   129,   150,   151,   220,   133,   135,   129,
     133,   132,   123,   124,   215,   220,   133,   153,   220,   133,
     135,   132,   124,   133,   135,   133,   132,   133,   151,   220,
     323,     1,    31,    37,    38,    39,    40,   129,   149,   151,
     217,   219,   220,   272,   282,   283,   285,   287,   316,   320,
     323,   332,   335,   336,   337,   339,   348,   349,   350,   351,
      37,    38,    39,    40,   151,   323,   350,   126,   137,     1,
      29,    30,    31,    32,    33,    67,   117,   118,   127,   149,
     220,   271,   275,   277,   278,   285,   287,   291,   292,   293,
     299,   303,   311,   312,   354,   355,   356,   357,   358,   359,
      75,    76,   332,   126,   328,   316,   323,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    48,
      49,    68,    86,    88,   101,   113,   114,   115,   116,   122,
     133,   153,   174,   175,   271,   276,   277,   285,   288,   292,
     294,   302,   369,   372,   373,   374,   379,   380,   381,    31,
      77,   135,   217,   219,   304,   370,   371,   389,   390,   397,
       1,   217,   281,   298,   304,   337,   367,   393,     1,   392,
     393,     0,   220,   391,   391,     5,   130,   391,     1,     4,
       6,     8,     9,    67,    72,    73,    74,    85,    86,    99,
     103,   104,   105,   106,   107,   108,   109,   110,   119,   120,
     123,   126,   128,   136,   137,   139,   140,   141,   142,   153,
     179,   180,   220,   221,   222,   223,   224,   227,   228,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   391,   403,   404,   405,   406,   150,   220,   133,   153,
     220,   232,   247,   249,   253,   265,   266,   267,   285,   332,
     137,   126,   137,   127,   311,   312,   358,   359,    75,    76,
     332,   335,   336,   313,   318,   322,   323,   127,   323,   127,
     323,   323,    86,   153,   205,   207,   209,   213,   214,   220,
     232,   237,   253,   257,   303,   129,   124,   124,   129,     1,
      69,    79,    81,    82,    89,    92,    93,    94,    95,    97,
      99,   100,   126,   128,   129,   132,   154,   155,   156,   157,
     158,   159,   160,   161,   176,   177,   179,   180,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   196,   200,
     201,   202,   203,   220,   228,   251,   303,   315,   317,   323,
     332,   337,   338,   368,    81,    82,   220,   271,   275,   285,
     288,   291,   299,   306,   307,     1,   132,   202,   203,   151,
     220,     1,   220,   273,   274,     1,   132,   274,   307,    67,
     206,   208,   210,   211,   212,   220,   303,     1,   132,   202,
     203,   307,     1,   132,   202,   203,     1,   132,   202,   203,
     151,   220,   131,   131,   131,   131,   131,   133,   332,   316,
     320,   323,     1,   130,   373,   380,   381,   373,   380,   381,
       1,   129,   131,   131,   332,   129,   138,   150,   220,   246,
     265,   269,   270,   131,   133,   153,   220,   132,   133,   132,
     133,   323,    37,   126,   137,   139,   149,   151,   220,   271,
     277,   285,   287,   292,   313,   314,   323,   330,   332,   333,
     336,     1,   127,   131,     1,   127,   131,     1,   131,     1,
     131,   127,   127,   316,   126,   316,   126,   126,   126,     1,
     129,     1,   132,     1,    37,    38,    39,    40,   129,   220,
     271,   277,   285,   288,   292,   323,   350,   351,     1,   129,
       1,   369,   372,   380,   381,   369,   372,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    86,    87,
      89,    90,    91,   129,   135,   153,   197,   198,   199,   220,
     228,   247,   249,   267,   328,   360,   361,   364,   365,   366,
     373,   374,   375,   376,   377,   378,   380,   381,   383,   384,
     385,   386,   387,   388,   132,    31,   220,   391,   220,   215,
     216,   218,   219,   313,   314,   320,   323,   332,   337,   339,
     373,   381,   217,   304,   130,   245,   246,   264,   127,   126,
     232,   253,   126,   232,   253,   232,   253,   126,   220,   271,
     277,   285,   288,   292,   310,   269,   126,   126,   310,   269,
     126,   126,   126,   126,   126,   126,   232,   253,   126,   127,
     249,   267,   277,   285,   287,   292,   300,   352,   391,   133,
     138,   181,   182,   225,   229,   247,   133,     1,   132,   133,
     220,     1,     7,     8,     9,   126,   134,   137,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,   130,   248,
     182,   225,   226,   234,   254,   123,   143,   144,   140,   141,
      10,    11,   237,   257,    12,    13,   124,   125,    14,    15,
     139,   145,   146,    16,    17,   147,   248,   127,     7,     8,
       9,   126,   134,   137,   248,   123,   143,   144,   140,   141,
      10,    11,    12,    13,   124,   125,    14,    15,   139,   145,
     146,    16,    17,   147,   248,   127,   127,   108,   220,   303,
     398,   401,   402,   133,   133,   248,     1,   127,   131,   249,
     267,   248,   127,   131,   249,   138,   150,   269,   270,   138,
     150,   269,   270,   127,   127,   127,   127,   313,   318,   322,
     127,   127,   313,    11,   125,   131,   130,   126,   323,   332,
     333,    67,   212,   220,   303,   212,     1,   220,   271,   285,
     288,   299,   308,   303,   337,   338,   126,   153,   220,   220,
     303,     1,   126,   308,   123,   126,   220,   303,   129,   328,
     380,   381,   380,   381,   380,   129,   380,   381,   129,     1,
     132,     1,     1,   129,   131,   131,    70,    71,    92,    96,
      98,   132,    70,    71,   132,   129,     1,   200,   201,     1,
     200,   201,     1,   130,   126,   135,   220,   289,   290,   313,
     319,   321,   323,   332,   339,   340,   341,     1,   303,   311,
     356,   332,   317,   323,   126,   135,   160,   161,   176,   177,
     179,   180,   189,   220,   303,   124,   153,   220,   220,   271,
     285,   288,   124,   124,   130,   328,   329,   131,     1,   129,
     133,    28,   152,   220,   125,   131,   130,   220,   333,   335,
     348,   348,   348,   348,   348,   129,   131,   132,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     225,   226,   228,   246,   265,   302,   345,   346,   313,   316,
     318,   320,   322,   313,   320,   133,   247,   266,   342,   344,
     380,   381,   380,   381,   348,   349,   348,   349,   138,   138,
     138,    53,   354,   355,     1,   274,   133,   133,     1,   132,
     202,   203,     1,   132,   202,   203,   133,   127,   220,   311,
     312,   323,   332,   333,   358,   359,   138,   150,   269,   270,
     323,   332,   336,   332,   126,   137,   330,     1,     1,   131,
       1,    53,   220,   354,   355,   131,     1,    53,   220,   354,
     355,   131,     1,    53,   220,   354,   355,   131,    53,   220,
     354,   355,     3,    28,    46,    75,    76,   127,   325,   326,
     327,   247,   150,   220,   249,   132,   133,   129,   129,   135,
     269,   270,   135,   126,   126,     1,   126,    54,    55,    56,
      58,    59,    60,    61,    64,    87,   220,   328,   360,   383,
     387,   126,   220,   129,   129,   129,   225,   226,   249,   267,
     126,   285,   126,   126,   193,   220,   129,   129,   129,   135,
     134,   134,   129,   131,     1,   375,   376,   375,   376,   360,
     361,   369,   372,   360,   361,   369,   372,     1,     1,   391,
     391,   151,   220,   133,   133,   332,   320,   323,   373,   381,
     373,   381,   381,   246,   147,   129,   147,    67,   149,   220,
     277,   285,   287,   292,   301,   353,   220,   302,   124,   126,
     137,   220,   271,   277,   285,   288,   292,   323,   331,   332,
     334,   220,   271,   277,   285,   288,   292,   309,   249,   352,
     380,   220,   137,   334,   309,   247,   391,   391,   391,   247,
     353,   353,   127,   220,   277,   285,   287,   292,   333,   127,
     134,     1,   172,   173,     1,   132,   131,   138,     1,   172,
     173,   132,     1,   172,   173,     1,   220,   127,   226,   229,
     230,   266,     1,   220,   249,   267,   225,   247,     1,   234,
     254,   234,   254,   234,   254,   235,   255,   235,   255,   236,
     256,   236,   256,   237,   257,   237,   257,   237,   257,   225,
     226,   239,   258,   225,   226,   239,   258,   225,   226,   240,
     259,   225,   226,   241,   260,   225,   226,   242,   261,   243,
     262,   244,   263,   135,   225,   226,   249,   250,   267,   268,
     225,   247,     1,   220,   127,   229,   230,     1,   220,   249,
     267,   225,   247,   234,   254,   234,   254,   234,   254,   235,
     255,   235,   255,   236,   256,   236,   256,   237,   257,   237,
     257,   237,   257,   237,   257,   225,   226,   239,   258,   225,
     226,   239,   258,   225,   226,   240,   259,   225,   226,   241,
     260,   225,   226,   242,   261,   243,   262,   244,   263,   135,
     249,   250,   267,   268,   225,   247,   124,   125,   220,   399,
     400,   220,   132,   398,   401,   402,   402,   226,   266,   247,
     266,   391,   226,   266,   247,   266,   138,   138,   138,   138,
     138,   138,   213,   205,   207,   209,   220,   323,   332,   125,
     130,   333,   125,   133,   124,   133,   220,   271,   285,   288,
     333,   323,   332,   339,   340,   193,   290,   313,   323,   332,
     133,   220,   133,   220,   333,   220,   323,   126,   129,   132,
     183,   184,   183,   184,   380,   380,   380,   222,   380,   380,
       1,   345,   346,   127,   269,   270,   133,   131,     1,   303,
     311,   356,   332,   313,   321,   323,   135,   328,   220,   126,
     317,   317,   220,     1,     1,   290,   214,   124,   212,   212,
     269,   270,   130,   273,   202,   203,     1,   132,   274,   130,
     135,   130,   135,   211,   207,   220,   130,   220,   130,   380,
     381,     1,   129,   131,   129,   131,   129,   164,   165,   168,
     169,   170,   132,   162,   165,   129,   132,   164,   165,   168,
     169,   170,   130,    37,   339,   340,   341,   342,   344,   347,
       1,   132,   274,     1,   132,   274,     1,   132,   202,   203,
     323,   332,   333,   127,   127,   127,   138,   138,   138,   332,
     330,   127,   358,   359,   138,   150,   269,   270,   354,   355,
     303,   354,   354,   354,   355,   127,   126,   127,   131,   326,
     127,   127,   127,   127,   131,     1,   172,   173,   360,   361,
     369,   372,   135,   135,   360,   361,   369,   372,   249,   267,
     249,   267,   127,   249,   267,   135,   269,   270,   135,   126,
     126,   360,   126,   226,   267,   126,   135,    58,     1,   127,
     129,   220,   249,   267,   382,   129,   129,   129,   129,   129,
     391,   126,   247,   247,   220,   360,   361,   369,   372,    91,
      89,    90,    91,   124,   320,   381,   381,   129,   249,   250,
     267,   268,   249,   250,   267,   268,   149,   150,   149,   277,
     285,   287,   292,   333,   127,   127,   127,   333,   214,   127,
     323,   334,   358,   359,   269,   270,   124,   332,   126,   331,
     137,   124,   137,   220,   271,   277,   285,   288,   292,   334,
     127,   127,   127,   127,   269,   270,   137,   137,   334,   131,
     127,   131,   131,   131,   127,   131,   133,   234,   254,   343,
     391,     1,   132,   225,   247,     1,     1,   127,   131,   127,
     138,   138,     1,   131,   135,   135,   131,   135,   135,   127,
     138,   138,   135,   135,   135,   135,   220,   220,   129,   131,
     220,   391,   132,   132,   127,   323,   332,   207,   214,   124,
     133,   133,   220,   332,   323,   127,   332,   313,   127,   133,
     133,   220,   127,     1,   172,   173,   289,   323,   220,   126,
     313,   321,   321,   269,   270,   126,   127,   125,   214,   125,
     125,   269,   270,   129,     1,   129,   205,   204,   303,   205,
     204,   209,   130,   133,     1,   166,   167,     1,   166,   167,
     381,     1,   345,   346,   131,   132,   342,   344,     1,   129,
       1,   129,   332,   330,   127,   127,   127,   138,   138,   138,
     333,   336,   249,   127,   326,   391,     1,   360,   361,   369,
     372,   360,   361,   369,   372,   127,   127,   127,   127,     1,
     360,   127,   249,   360,   361,   135,   135,   267,   127,   249,
     267,    58,   267,   382,   391,   126,   360,   135,   129,     1,
     129,     1,   127,   267,   382,     3,   127,   135,   391,   127,
     127,   131,   126,   126,   193,   135,   135,   135,   135,   135,
     135,   135,   135,   127,   127,     1,   127,   125,   323,   332,
     334,   127,   127,   127,   138,   138,   214,   331,   127,   358,
     359,   269,   270,   214,   269,   270,   124,   137,   126,   342,
     138,   138,   269,   270,   269,   270,   137,   352,   220,   220,
     247,     1,   220,   347,   226,   266,   225,   226,   225,   226,
     246,   264,   225,   226,   246,   264,   225,   226,   225,   226,
     246,   264,   225,   226,   246,   264,   225,   226,   246,   264,
     225,   226,   246,   264,   225,   226,   246,   264,   225,   226,
     246,   264,   399,   129,   129,   125,   214,   133,   380,   313,
     130,   133,     1,   126,   135,   135,   125,   202,   203,   129,
     202,   203,   130,   333,   130,   209,   347,   132,   342,   344,
       1,   202,   203,   202,   203,   127,   127,   360,   360,   360,
     360,   360,   361,   127,   126,   382,   127,   249,   267,   249,
     360,     1,   127,   249,   267,   137,   362,   363,   391,   129,
     363,     3,   127,   135,   133,   193,   247,   247,     1,     1,
     331,   127,   125,   127,   127,   138,   138,   125,   138,   138,
     214,   269,   270,   352,   138,   138,   138,   138,   269,   270,
     127,   127,   127,   127,   127,   131,   132,   125,   345,   269,
     270,   269,   270,   202,   203,   205,   205,   131,   132,     1,
      66,    66,   249,   267,   127,   249,   267,   127,   129,   127,
     129,   360,   361,   127,   360,   361,   220,   127,   131,   135,
     126,     3,   127,   135,   363,   129,   363,    74,   193,   194,
     195,   127,   127,   127,   131,   125,   138,   138,   127,   138,
     138,   132,   129,   132,   360,   360,   127,   127,   129,   360,
     249,   360,   361,   138,   129,   362,   363,   247,   363,   129,
     363,   127,   135,     3,   127,   135,   380,   380,   132,   194,
     133,   193,   133,   234,   254,   342,   127,   391,   127,   127,
     127,   127,   135,   129,   363,   363,   129,   363,   195,   127,
     347,   360,   126,   129,   129,   129,   363,   127,   127,   127,
     135,   132,   131,   132,   247,   127,   129,   129,   129,   363,
     132,   127,   129,   127,   129
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   148,   149,   149,   150,   150,   151,   152,   153,   153,
     153,   154,   154,   155,   156,   157,   157,   158,   158,   159,
     159,   160,   160,   160,   160,   160,   160,   160,   161,   161,
     161,   161,   161,   162,   162,   163,   164,   165,   165,   165,
     166,   166,   167,   167,   167,   168,   168,   168,   169,   169,
     169,   169,   169,   169,   170,   170,   171,   171,   171,   171,
     171,   171,   171,   171,   171,   172,   172,   172,   172,   173,
     173,   173,   173,   173,   173,   173,   174,   174,   175,   175,
     175,   175,   175,   176,   176,   177,   177,   177,   177,   177,
     178,   178,   178,   179,   179,   180,   180,   180,   180,   180,
     180,   180,   180,   180,   180,   181,   181,   182,   182,   182,
     182,   182,   183,   184,   184,   184,   185,   185,   185,   186,
     186,   186,   186,   187,   187,   187,   187,   187,   188,   188,
     188,   188,   188,   188,   189,   190,   190,   190,   190,   190,
     191,   191,   191,   192,   193,   193,   194,   194,   195,   195,
     196,   197,   197,   198,   198,   198,   198,   199,   199,   199,
     199,   200,   200,   200,   200,   200,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   202,   202,   202,   203,
     203,   203,   203,   203,   204,   204,   205,   205,   206,   206,
     206,   206,   206,   206,   206,   206,   207,   208,   208,   209,
     210,   210,   211,   211,   211,   212,   212,   213,   213,   213,
     213,   213,   213,   214,   214,   215,   216,   216,   216,   216,
     216,   216,   216,   216,   217,   217,   217,   217,   217,   217,
     218,   219,   219,   219,   219,   219,   219,   220,   221,   221,
     222,   222,   222,   223,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   225,   226,   227,   227,   228,   228,   228,   228,
     228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
     228,   228,   228,   228,   229,   229,   229,   229,   230,   230,
     230,   230,   230,   231,   231,   231,   231,   231,   231,   231,
     231,   231,   231,   231,   232,   232,   233,   233,   233,   233,
     233,   233,   233,   233,   234,   234,   234,   235,   235,   235,
     235,   235,   235,   235,   236,   236,   236,   236,   236,   237,
     237,   237,   237,   237,   238,   239,   239,   239,   239,   239,
     239,   239,   239,   239,   240,   240,   240,   240,   240,   240,
     240,   240,   240,   241,   241,   241,   241,   241,   242,   242,
     242,   242,   242,   243,   243,   243,   243,   243,   244,   244,
     244,   245,   245,   245,   246,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   247,   247,   247,   247,   247,   247,   247,   247,   247,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
     248,   249,   249,   249,   249,   250,   250,   250,   251,   251,
     251,   251,   251,   251,   251,   251,   251,   251,   251,   252,
     252,   252,   252,   252,   252,   252,   252,   252,   252,   253,
     253,   254,   254,   255,   255,   255,   255,   255,   255,   255,
     256,   256,   256,   256,   256,   257,   257,   257,   257,   257,
     258,   258,   258,   258,   258,   258,   258,   258,   258,   259,
     259,   259,   259,   259,   259,   259,   259,   259,   260,   260,
     260,   260,   260,   261,   261,   261,   261,   261,   262,   262,
     262,   262,   262,   263,   263,   263,   264,   264,   264,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   266,   266,
     266,   266,   266,   267,   267,   267,   267,   267,   267,   267,
     268,   268,   268,   268,   269,   270,   271,   271,   271,   271,
     271,   271,   271,   272,   272,   272,   272,   272,   272,   272,
     273,   273,   273,   273,   273,   273,   274,   274,   274,   275,
     276,   276,   277,   277,   277,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   279,
     279,   280,   280,   280,   281,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   282,   282,   283,   283,   284,   285,
     285,   285,   286,   286,   287,   287,   287,   287,   287,   287,
     287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
     287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
     287,   287,   288,   288,   288,   288,   288,   288,   288,   288,
     288,   288,   288,   288,   288,   288,   288,   288,   288,   288,
     288,   288,   288,   288,   288,   288,   288,   288,   289,   289,
     289,   289,   289,   289,   289,   289,   289,   289,   290,   290,
     291,   291,   291,   291,   292,   292,   292,   292,   293,   293,
     293,   293,   293,   293,   293,   293,   293,   294,   295,   295,
     296,   297,   297,   297,   297,   298,   298,   298,   298,   298,
     298,   298,   298,   298,   299,   299,   300,   300,   300,   300,
     300,   300,   300,   300,   301,   301,   301,   301,   301,   301,
     301,   301,   301,   301,   302,   302,   302,   302,   302,   302,
     302,   302,   302,   302,   303,   303,   303,   303,   303,   303,
     303,   303,   303,   303,   303,   303,   304,   304,   304,   304,
     304,   304,   304,   304,   304,   304,   305,   305,   306,   306,
     306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
     307,   307,   308,   308,   308,   308,   308,   308,   308,   308,
     308,   308,   309,   309,   309,   309,   309,   309,   309,   309,
     309,   309,   309,   309,   309,   309,   310,   310,   310,   310,
     310,   310,   310,   310,   310,   310,   310,   310,   310,   310,
     311,   311,   312,   312,   312,   312,   312,   313,   313,   313,
     313,   313,   313,   313,   313,   313,   313,   313,   314,   314,
     314,   314,   314,   314,   314,   314,   314,   315,   316,   316,
     316,   316,   316,   317,   317,   317,   317,   318,   318,   319,
     320,   320,   320,   320,   320,   321,   321,   321,   321,   322,
     322,   323,   323,   323,   323,   323,   323,   323,   324,   324,
     324,   325,   325,   325,   325,   325,   326,   326,   327,   327,
     327,   328,   328,   329,   329,   330,   330,   330,   330,   330,
     330,   330,   330,   330,   330,   330,   330,   330,   330,   330,
     330,   331,   331,   331,   331,   331,   331,   331,   331,   332,
     332,   332,   332,   333,   333,   333,   333,   333,   334,   334,
     334,   334,   334,   335,   335,   335,   335,   335,   336,   336,
     336,   336,   337,   337,   337,   337,   338,   338,   338,   338,
     339,   339,   339,   339,   340,   340,   340,   340,   341,   341,
     341,   341,   342,   342,   342,   343,   343,   344,   344,   344,
     344,   344,   345,   345,   346,   346,   347,   347,   347,   347,
     347,   347,   348,   348,   348,   349,   349,   350,   350,   350,
     350,   350,   350,   350,   350,   351,   351,   351,   351,   352,
     352,   353,   353,   354,   354,   354,   354,   354,   354,   355,
     355,   356,   356,   356,   356,   356,   356,   356,   356,   356,
     356,   357,   357,   357,   357,   357,   357,   357,   357,   358,
     358,   358,   358,   358,   358,   359,   359,   359,   360,   360,
     360,   360,   360,   360,   360,   360,   360,   360,   360,   360,
     360,   361,   361,   361,   361,   361,   361,   361,   362,   362,
     362,   363,   363,   363,   364,   364,   364,   364,   364,   364,
     364,   364,   364,   364,   364,   364,   364,   364,   365,   365,
     365,   365,   365,   365,   365,   365,   365,   365,   366,   366,
     366,   366,   366,   366,   366,   366,   366,   366,   366,   366,
     367,   367,   367,   368,   368,   369,   369,   369,   369,   369,
     369,   370,   370,   370,   370,   370,   370,   371,   372,   372,
     372,   372,   372,   373,   373,   373,   373,   374,   374,   375,
     375,   375,   376,   376,   376,   376,   376,   376,   376,   377,
     377,   377,   377,   378,   378,   378,   378,   379,   380,   381,
     381,   381,   382,   382,   382,   383,   383,   383,   383,   383,
     383,   384,   384,   385,   385,   385,   385,   385,   385,   385,
     385,   385,   385,   385,   385,   386,   386,   386,   386,   386,
     386,   386,   386,   386,   386,   386,   386,   386,   386,   386,
     386,   386,   386,   386,   386,   387,   387,   387,   387,   387,
     387,   387,   387,   388,   388,   388,   388,   389,   389,   389,
     389,   389,   389,   390,   390,   390,   390,   390,   390,   391,
     391,   392,   392,   392,   392,   392,   392,   392,   392,   392,
     392,   392,   392,   392,   392,   392,   392,   392,   392,   392,
     392,   392,   392,   392,   393,   393,   393,   393,   393,   393,
     393,   394,   394,   394,   394,   394,   395,   395,   395,   395,
     396,   396,   396,   397,   397,   397,   398,   399,   399,   399,
     400,   400,   401,   401,   402,   402,   402,   402,   403,   404,
     405,   406
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4,     1,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     2,     1,     3,     3,     1,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     2,     5,     6,     6,     2,     5,     1,
       1,     1,     4,     1,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
       5,     5,     5,     5,     4,     4,     4,     4,     5,     5,
       5,     5,     4,     4,     4,     4,     5,     5,     5,     5,
       5,     5,     5,     5,     3,     3,     2,     2,     1,     3,
       3,     3,     3,     1,     2,     3,     3,     2,     2,     2,
       1,     2,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     4,     4,     1,     3,     2,     1,
       2,     2,     2,     4,     4,     3,     3,     4,     5,     4,
       6,     6,     4,     5,     4,     6,     6,     5,     5,     2,
       2,     2,     5,     3,     5,     6,     5,     7,     7,     8,
       8,     7,     7,     3,     3,     3,     4,     3,     5,     5,
       6,     7,     6,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     4,     1,     1,     2,
       2,     3,     5,     2,     3,     5,     5,     5,     1,     3,
       2,     2,     3,     3,     2,     3,     3,     4,     3,     3,
       3,     3,     3,     3,     4,     4,     4,     1,     1,     4,
       3,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       3,     3,     1,     3,     3,     3,     3,     1,     1,     1,
       4,     4,     4,     3,     4,     4,     4,     3,     1,     3,
       4,     3,     4,     4,     4,     4,     3,     2,     3,     3,
       3,     3,     2,     2,     2,     3,     4,     1,     1,     2,
       3,     3,     3,     3,     2,     2,     2,     3,     4,     1,
       1,     1,     1,     2,     2,     1,     1,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     2,
       3,     6,     5,     1,     2,     3,     4,     2,     3,     3,
       3,     3,     4,     4,     4,     2,     3,     3,     3,     4,
       4,     3,     4,     2,     3,     3,     3,     4,     4,     1,
       2,     2,     3,     1,     1,     2,     2,     3,     1,     1,
       2,     2,     3,     1,     2,     3,     2,     2,     1,     2,
       3,     2,     1,     2,     3,     3,     1,     2,     3,     3,
       1,     2,     3,     3,     1,     2,     3,     3,     1,     2,
       3,     3,     1,     3,     4,     3,     4,     1,     4,     2,
       5,     3,     1,     1,     1,     1,     1,     1,     3,     3,
       2,     2,     1,     1,     3,     2,     3,     1,     3,     3,
       3,     3,     3,     3,     3,     1,     2,     3,     3,     1,
       2,     1,     2,     2,     2,     2,     3,     1,     1,     3,
       3,     1,     3,     4,     3,     4,     3,     3,     4,     3,
       4,     1,     3,     3,     4,     3,     3,     3,     4,     1,
       3,     3,     3,     3,     3,     1,     3,     2,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     1,     2,     1,     1,     4,
       7,     1,     3,     0,     6,     8,    10,    12,     8,    10,
      10,     5,     7,     9,    11,     7,     9,     9,     3,     4,
       4,     3,     3,     3,     4,     4,     3,     3,     3,     4,
       4,     3,     2,     3,     2,     3,     4,     4,     3,     3,
       1,     1,     1,     1,     1,     2,     3,     2,     2,     4,
       6,     2,     3,     3,     2,     5,     6,     2,     2,     2,
       2,     2,     2,     1,     2,     2,     3,     1,     2,     1,
       2,     2,     1,     2,     2,     2,     2,     2,     2,     1,
       1,     2,     2,     1,     1,     2,     2,     1,     2,     2,
       1,     2,     1,     2,     2,     5,     5,     7,     7,     5,
       5,     3,     2,     5,     4,     4,     7,     6,     6,     5,
       7,     6,     4,     7,     9,     3,     4,     4,     5,     5,
       6,     7,     6,     6,     5,     5,     4,     3,     2,     1,
       2,     4,     3,     5,     4,     3,     2,     2,     2,     3,
       3,     3,     3,     2,     2,     1,     1,     4,     3,     4,
       3,     3,     2,     4,     3,     4,     3,     3,     2,     1,
       2,     1,     1,     2,     1,     2,     3,     3,     1,     2,
       2,     2,     3,     4,     4,     2,     2,     2,     2,     1,
       2,     1,     4,     6,     1,     2,     1,     2,     2,     1,
       2,     1,     2,     2,     2,     2,     1,     2,     2,     3,
       1,     1,     0,     6,     6,     5,     4,     1,     2,     2,
       1,     3,     3,     4,     1,     1,     2,     2,     6,     6,
       6,     4
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
          case 149: /* guess_type  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11121 "grammar.ec" /* yacc.c:1274  */
        break;

    case 150: /* type  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11127 "grammar.ec" /* yacc.c:1274  */
        break;

    case 151: /* base_strict_type  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11133 "grammar.ec" /* yacc.c:1274  */
        break;

    case 152: /* base_strict_type_name  */
#line 253 "grammar.y" /* yacc.c:1274  */
      { delete ((*yyvaluep).string); }
#line 11139 "grammar.ec" /* yacc.c:1274  */
        break;

    case 153: /* strict_type  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11145 "grammar.ec" /* yacc.c:1274  */
        break;

    case 154: /* class_function_definition_start  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11151 "grammar.ec" /* yacc.c:1274  */
        break;

    case 155: /* constructor_function_definition_start  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11157 "grammar.ec" /* yacc.c:1274  */
        break;

    case 156: /* destructor_function_definition_start  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11163 "grammar.ec" /* yacc.c:1274  */
        break;

    case 157: /* virtual_class_function_definition_start  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11169 "grammar.ec" /* yacc.c:1274  */
        break;

    case 158: /* class_function_definition_start_error  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11175 "grammar.ec" /* yacc.c:1274  */
        break;

    case 159: /* virtual_class_function_definition_start_error  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11181 "grammar.ec" /* yacc.c:1274  */
        break;

    case 160: /* class_function_definition  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11187 "grammar.ec" /* yacc.c:1274  */
        break;

    case 161: /* class_function_definition_error  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11193 "grammar.ec" /* yacc.c:1274  */
        break;

    case 162: /* instance_class_function_definition_start  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11199 "grammar.ec" /* yacc.c:1274  */
        break;

    case 163: /* instance_class_function_definition_start_error  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11205 "grammar.ec" /* yacc.c:1274  */
        break;

    case 164: /* instance_class_function_definition  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11211 "grammar.ec" /* yacc.c:1274  */
        break;

    case 165: /* instance_class_function_definition_error  */
#line 245 "grammar.y" /* yacc.c:1274  */
      { FreeClassFunction(((*yyvaluep).classFunction)); }
#line 11217 "grammar.ec" /* yacc.c:1274  */
        break;

    case 166: /* data_member_initialization  */
#line 243 "grammar.y" /* yacc.c:1274  */
      { FreeMemberInit(((*yyvaluep).memberInit)); }
#line 11223 "grammar.ec" /* yacc.c:1274  */
        break;

    case 167: /* data_member_initialization_error  */
#line 243 "grammar.y" /* yacc.c:1274  */
      { FreeMemberInit(((*yyvaluep).memberInit)); }
#line 11229 "grammar.ec" /* yacc.c:1274  */
        break;

    case 168: /* data_member_initialization_list  */
#line 268 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeMemberInit); }
#line 11235 "grammar.ec" /* yacc.c:1274  */
        break;

    case 169: /* data_member_initialization_list_error  */
#line 268 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeMemberInit); }
#line 11241 "grammar.ec" /* yacc.c:1274  */
        break;

    case 170: /* data_member_initialization_list_coloned  */
#line 268 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeMemberInit); }
#line 11247 "grammar.ec" /* yacc.c:1274  */
        break;

    case 171: /* members_initialization_list_coloned  */
#line 269 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeMembersInit); }
#line 11253 "grammar.ec" /* yacc.c:1274  */
        break;

    case 172: /* members_initialization_list  */
#line 269 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeMembersInit); }
#line 11259 "grammar.ec" /* yacc.c:1274  */
        break;

    case 173: /* members_initialization_list_error  */
#line 269 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeMembersInit); }
#line 11265 "grammar.ec" /* yacc.c:1274  */
        break;

    case 174: /* instantiation_named  */
#line 241 "grammar.y" /* yacc.c:1274  */
      { FreeInstance(((*yyvaluep).instance)); }
#line 11271 "grammar.ec" /* yacc.c:1274  */
        break;

    case 175: /* instantiation_named_error  */
#line 241 "grammar.y" /* yacc.c:1274  */
      { FreeInstance(((*yyvaluep).instance)); }
#line 11277 "grammar.ec" /* yacc.c:1274  */
        break;

    case 179: /* instantiation_unnamed  */
#line 241 "grammar.y" /* yacc.c:1274  */
      { FreeInstance(((*yyvaluep).instance)); }
#line 11283 "grammar.ec" /* yacc.c:1274  */
        break;

    case 180: /* instantiation_unnamed_error  */
#line 241 "grammar.y" /* yacc.c:1274  */
      { FreeInstance(((*yyvaluep).instance)); }
#line 11289 "grammar.ec" /* yacc.c:1274  */
        break;

    case 183: /* default_property  */
#line 243 "grammar.y" /* yacc.c:1274  */
      { FreeMemberInit(((*yyvaluep).memberInit)); }
#line 11295 "grammar.ec" /* yacc.c:1274  */
        break;

    case 184: /* default_property_error  */
#line 243 "grammar.y" /* yacc.c:1274  */
      { FreeMemberInit(((*yyvaluep).memberInit)); }
#line 11301 "grammar.ec" /* yacc.c:1274  */
        break;

    case 185: /* default_property_list  */
#line 268 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeMemberInit); }
#line 11307 "grammar.ec" /* yacc.c:1274  */
        break;

    case 186: /* default_property_list_error  */
#line 268 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeMemberInit); }
#line 11313 "grammar.ec" /* yacc.c:1274  */
        break;

    case 189: /* property  */
#line 254 "grammar.y" /* yacc.c:1274  */
      { FreeProperty(((*yyvaluep).prop)); }
#line 11319 "grammar.ec" /* yacc.c:1274  */
        break;

    case 200: /* struct_declaration  */
#line 252 "grammar.y" /* yacc.c:1274  */
      { FreeClassDef(((*yyvaluep).classDef)); }
#line 11325 "grammar.ec" /* yacc.c:1274  */
        break;

    case 201: /* struct_declaration_error  */
#line 252 "grammar.y" /* yacc.c:1274  */
      { FreeClassDef(((*yyvaluep).classDef)); }
#line 11331 "grammar.ec" /* yacc.c:1274  */
        break;

    case 202: /* struct_declaration_list  */
#line 267 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeClassDef); }
#line 11337 "grammar.ec" /* yacc.c:1274  */
        break;

    case 203: /* struct_declaration_list_error  */
#line 267 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeClassDef); }
#line 11343 "grammar.ec" /* yacc.c:1274  */
        break;

    case 204: /* template_datatype  */
#line 273 "grammar.y" /* yacc.c:1274  */
      { FreeTemplateDataType(((*yyvaluep).templateDatatype)); }
#line 11349 "grammar.ec" /* yacc.c:1274  */
        break;

    case 205: /* template_type_argument  */
#line 272 "grammar.y" /* yacc.c:1274  */
      { FreeTemplateArgument(((*yyvaluep).templateArgument)); }
#line 11355 "grammar.ec" /* yacc.c:1274  */
        break;

    case 206: /* template_type_parameter  */
#line 271 "grammar.y" /* yacc.c:1274  */
      { FreeTemplateParameter(((*yyvaluep).templateParameter)); }
#line 11361 "grammar.ec" /* yacc.c:1274  */
        break;

    case 207: /* template_identifier_argument  */
#line 272 "grammar.y" /* yacc.c:1274  */
      { FreeTemplateArgument(((*yyvaluep).templateArgument)); }
#line 11367 "grammar.ec" /* yacc.c:1274  */
        break;

    case 208: /* template_identifier_parameter  */
#line 271 "grammar.y" /* yacc.c:1274  */
      { FreeTemplateParameter(((*yyvaluep).templateParameter)); }
#line 11373 "grammar.ec" /* yacc.c:1274  */
        break;

    case 209: /* template_expression_argument  */
#line 272 "grammar.y" /* yacc.c:1274  */
      { FreeTemplateArgument(((*yyvaluep).templateArgument)); }
#line 11379 "grammar.ec" /* yacc.c:1274  */
        break;

    case 210: /* template_expression_parameter  */
#line 271 "grammar.y" /* yacc.c:1274  */
      { FreeTemplateParameter(((*yyvaluep).templateParameter)); }
#line 11385 "grammar.ec" /* yacc.c:1274  */
        break;

    case 211: /* template_parameter  */
#line 271 "grammar.y" /* yacc.c:1274  */
      { FreeTemplateParameter(((*yyvaluep).templateParameter)); }
#line 11391 "grammar.ec" /* yacc.c:1274  */
        break;

    case 212: /* template_parameters_list  */
#line 274 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeTemplateParameter); }
#line 11397 "grammar.ec" /* yacc.c:1274  */
        break;

    case 213: /* template_argument  */
#line 272 "grammar.y" /* yacc.c:1274  */
      { FreeTemplateArgument(((*yyvaluep).templateArgument)); }
#line 11403 "grammar.ec" /* yacc.c:1274  */
        break;

    case 214: /* template_arguments_list  */
#line 275 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeTemplateArgument); }
#line 11409 "grammar.ec" /* yacc.c:1274  */
        break;

    case 215: /* class_entry  */
#line 249 "grammar.y" /* yacc.c:1274  */
      { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; }
#line 11415 "grammar.ec" /* yacc.c:1274  */
        break;

    case 216: /* class_decl  */
#line 250 "grammar.y" /* yacc.c:1274  */
      { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; }
#line 11421 "grammar.ec" /* yacc.c:1274  */
        break;

    case 217: /* class  */
#line 251 "grammar.y" /* yacc.c:1274  */
      { FreeClass(((*yyvaluep)._class)); }
#line 11427 "grammar.ec" /* yacc.c:1274  */
        break;

    case 218: /* class_head  */
#line 251 "grammar.y" /* yacc.c:1274  */
      { FreeClass(((*yyvaluep)._class)); }
#line 11433 "grammar.ec" /* yacc.c:1274  */
        break;

    case 219: /* class_error  */
#line 251 "grammar.y" /* yacc.c:1274  */
      { FreeClass(((*yyvaluep)._class)); }
#line 11439 "grammar.ec" /* yacc.c:1274  */
        break;

    case 220: /* identifier  */
#line 205 "grammar.y" /* yacc.c:1274  */
      { FreeIdentifier(((*yyvaluep).id)); }
#line 11445 "grammar.ec" /* yacc.c:1274  */
        break;

    case 221: /* primary_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11451 "grammar.ec" /* yacc.c:1274  */
        break;

    case 222: /* i18n_string  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11457 "grammar.ec" /* yacc.c:1274  */
        break;

    case 227: /* primary_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11463 "grammar.ec" /* yacc.c:1274  */
        break;

    case 228: /* postfix_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11469 "grammar.ec" /* yacc.c:1274  */
        break;

    case 229: /* argument_expression_list  */
#line 256 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeExpression); }
#line 11475 "grammar.ec" /* yacc.c:1274  */
        break;

    case 230: /* argument_expression_list_error  */
#line 256 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeExpression); }
#line 11481 "grammar.ec" /* yacc.c:1274  */
        break;

    case 232: /* unary_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11487 "grammar.ec" /* yacc.c:1274  */
        break;

    case 234: /* cast_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11493 "grammar.ec" /* yacc.c:1274  */
        break;

    case 235: /* multiplicative_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11499 "grammar.ec" /* yacc.c:1274  */
        break;

    case 236: /* additive_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11505 "grammar.ec" /* yacc.c:1274  */
        break;

    case 237: /* shift_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11511 "grammar.ec" /* yacc.c:1274  */
        break;

    case 239: /* relational_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11517 "grammar.ec" /* yacc.c:1274  */
        break;

    case 240: /* equality_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11523 "grammar.ec" /* yacc.c:1274  */
        break;

    case 241: /* and_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11529 "grammar.ec" /* yacc.c:1274  */
        break;

    case 242: /* exclusive_or_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11535 "grammar.ec" /* yacc.c:1274  */
        break;

    case 243: /* inclusive_or_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11541 "grammar.ec" /* yacc.c:1274  */
        break;

    case 244: /* logical_and_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11547 "grammar.ec" /* yacc.c:1274  */
        break;

    case 245: /* logical_or_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11553 "grammar.ec" /* yacc.c:1274  */
        break;

    case 246: /* conditional_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11559 "grammar.ec" /* yacc.c:1274  */
        break;

    case 247: /* assignment_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11565 "grammar.ec" /* yacc.c:1274  */
        break;

    case 249: /* expression  */
#line 256 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeExpression); }
#line 11571 "grammar.ec" /* yacc.c:1274  */
        break;

    case 251: /* postfix_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11577 "grammar.ec" /* yacc.c:1274  */
        break;

    case 253: /* unary_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11583 "grammar.ec" /* yacc.c:1274  */
        break;

    case 254: /* cast_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11589 "grammar.ec" /* yacc.c:1274  */
        break;

    case 255: /* multiplicative_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11595 "grammar.ec" /* yacc.c:1274  */
        break;

    case 256: /* additive_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11601 "grammar.ec" /* yacc.c:1274  */
        break;

    case 257: /* shift_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11607 "grammar.ec" /* yacc.c:1274  */
        break;

    case 258: /* relational_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11613 "grammar.ec" /* yacc.c:1274  */
        break;

    case 259: /* equality_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11619 "grammar.ec" /* yacc.c:1274  */
        break;

    case 260: /* and_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11625 "grammar.ec" /* yacc.c:1274  */
        break;

    case 261: /* exclusive_or_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11631 "grammar.ec" /* yacc.c:1274  */
        break;

    case 262: /* inclusive_or_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11637 "grammar.ec" /* yacc.c:1274  */
        break;

    case 263: /* logical_and_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11643 "grammar.ec" /* yacc.c:1274  */
        break;

    case 264: /* logical_or_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11649 "grammar.ec" /* yacc.c:1274  */
        break;

    case 265: /* conditional_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11655 "grammar.ec" /* yacc.c:1274  */
        break;

    case 266: /* assignment_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11661 "grammar.ec" /* yacc.c:1274  */
        break;

    case 267: /* expression_error  */
#line 256 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeExpression); }
#line 11667 "grammar.ec" /* yacc.c:1274  */
        break;

    case 269: /* constant_expression  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11673 "grammar.ec" /* yacc.c:1274  */
        break;

    case 270: /* constant_expression_error  */
#line 207 "grammar.y" /* yacc.c:1274  */
      { FreeExpression(((*yyvaluep).exp)); }
#line 11679 "grammar.ec" /* yacc.c:1274  */
        break;

    case 271: /* storage_class_specifier  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11685 "grammar.ec" /* yacc.c:1274  */
        break;

    case 272: /* external_storage_class_specifier  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11691 "grammar.ec" /* yacc.c:1274  */
        break;

    case 273: /* enumerator  */
#line 223 "grammar.y" /* yacc.c:1274  */
      { FreeEnumerator(((*yyvaluep).enumerator)); }
#line 11697 "grammar.ec" /* yacc.c:1274  */
        break;

    case 274: /* enumerator_list  */
#line 257 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeEnumerator); }
#line 11703 "grammar.ec" /* yacc.c:1274  */
        break;

    case 276: /* enum_specifier_nocompound  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11709 "grammar.ec" /* yacc.c:1274  */
        break;

    case 277: /* enum_specifier_compound  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11715 "grammar.ec" /* yacc.c:1274  */
        break;

    case 278: /* enum_specifier_compound_error  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11721 "grammar.ec" /* yacc.c:1274  */
        break;

    case 280: /* enum_class  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11727 "grammar.ec" /* yacc.c:1274  */
        break;

    case 281: /* enum_class_error  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11733 "grammar.ec" /* yacc.c:1274  */
        break;

    case 282: /* class_specifier  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11739 "grammar.ec" /* yacc.c:1274  */
        break;

    case 283: /* class_specifier_error  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11745 "grammar.ec" /* yacc.c:1274  */
        break;

    case 284: /* ext_storage  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11751 "grammar.ec" /* yacc.c:1274  */
        break;

    case 285: /* type_qualifier  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11757 "grammar.ec" /* yacc.c:1274  */
        break;

    case 286: /* type_qualifier_list  */
#line 258 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeSpecifier); }
#line 11763 "grammar.ec" /* yacc.c:1274  */
        break;

    case 287: /* type_specifier  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11769 "grammar.ec" /* yacc.c:1274  */
        break;

    case 288: /* strict_type_specifier  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11775 "grammar.ec" /* yacc.c:1274  */
        break;

    case 289: /* struct_declarator  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11781 "grammar.ec" /* yacc.c:1274  */
        break;

    case 290: /* struct_declarator_list  */
#line 260 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeDeclarator); }
#line 11787 "grammar.ec" /* yacc.c:1274  */
        break;

    case 291: /* struct_entry  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11793 "grammar.ec" /* yacc.c:1274  */
        break;

    case 292: /* struct_or_union_specifier_compound  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11799 "grammar.ec" /* yacc.c:1274  */
        break;

    case 293: /* struct_or_union_specifier_compound_error  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11805 "grammar.ec" /* yacc.c:1274  */
        break;

    case 294: /* struct_or_union_specifier_nocompound  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11811 "grammar.ec" /* yacc.c:1274  */
        break;

    case 295: /* struct_decl  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11817 "grammar.ec" /* yacc.c:1274  */
        break;

    case 296: /* struct_head  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11823 "grammar.ec" /* yacc.c:1274  */
        break;

    case 297: /* struct_class  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11829 "grammar.ec" /* yacc.c:1274  */
        break;

    case 298: /* struct_class_error  */
#line 218 "grammar.y" /* yacc.c:1274  */
      { FreeSpecifier(((*yyvaluep).specifier)); }
#line 11835 "grammar.ec" /* yacc.c:1274  */
        break;

    case 300: /* specifier_qualifier_list  */
#line 258 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeSpecifier); }
#line 11841 "grammar.ec" /* yacc.c:1274  */
        break;

    case 301: /* guess_specifier_qualifier_list  */
#line 258 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeSpecifier); }
#line 11847 "grammar.ec" /* yacc.c:1274  */
        break;

    case 302: /* declaration_specifiers  */
#line 258 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeSpecifier); }
#line 11853 "grammar.ec" /* yacc.c:1274  */
        break;

    case 303: /* guess_declaration_specifiers  */
#line 258 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeSpecifier); }
#line 11859 "grammar.ec" /* yacc.c:1274  */
        break;

    case 304: /* external_guess_declaration_specifiers  */
#line 258 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeSpecifier); }
#line 11865 "grammar.ec" /* yacc.c:1274  */
        break;

    case 305: /* external_guess_declaration_specifiers_error  */
#line 258 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeSpecifier); }
#line 11871 "grammar.ec" /* yacc.c:1274  */
        break;

    case 306: /* _inheritance_specifiers  */
#line 258 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeSpecifier); }
#line 11877 "grammar.ec" /* yacc.c:1274  */
        break;

    case 307: /* inheritance_specifiers  */
#line 258 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeSpecifier); }
#line 11883 "grammar.ec" /* yacc.c:1274  */
        break;

    case 311: /* identifier_list_error  */
#line 264 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeTypeName); }
#line 11889 "grammar.ec" /* yacc.c:1274  */
        break;

    case 312: /* identifier_list  */
#line 264 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeTypeName); }
#line 11895 "grammar.ec" /* yacc.c:1274  */
        break;

    case 313: /* direct_declarator_nofunction_type_ok  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11901 "grammar.ec" /* yacc.c:1274  */
        break;

    case 314: /* direct_declarator_nofunction  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11907 "grammar.ec" /* yacc.c:1274  */
        break;

    case 315: /* direct_declarator_function_start  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11913 "grammar.ec" /* yacc.c:1274  */
        break;

    case 316: /* direct_declarator_function  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11919 "grammar.ec" /* yacc.c:1274  */
        break;

    case 317: /* direct_declarator_function_error  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11925 "grammar.ec" /* yacc.c:1274  */
        break;

    case 318: /* direct_declarator  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11931 "grammar.ec" /* yacc.c:1274  */
        break;

    case 319: /* direct_declarator_function_start_type_ok  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11937 "grammar.ec" /* yacc.c:1274  */
        break;

    case 320: /* direct_declarator_function_type_ok  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11943 "grammar.ec" /* yacc.c:1274  */
        break;

    case 321: /* direct_declarator_function_error_type_ok  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11949 "grammar.ec" /* yacc.c:1274  */
        break;

    case 322: /* direct_declarator_type_ok  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11955 "grammar.ec" /* yacc.c:1274  */
        break;

    case 323: /* ext_decl  */
#line 278 "grammar.y" /* yacc.c:1274  */
      { FreeExtDecl(((*yyvaluep).extDecl)); }
#line 11961 "grammar.ec" /* yacc.c:1274  */
        break;

    case 325: /* attribute_word  */
#line 253 "grammar.y" /* yacc.c:1274  */
      { delete ((*yyvaluep).string); }
#line 11967 "grammar.ec" /* yacc.c:1274  */
        break;

    case 326: /* attribute  */
#line 279 "grammar.y" /* yacc.c:1274  */
      { FreeAttribute(((*yyvaluep).attribute)); }
#line 11973 "grammar.ec" /* yacc.c:1274  */
        break;

    case 327: /* attribs_list  */
#line 280 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeAttribute); }
#line 11979 "grammar.ec" /* yacc.c:1274  */
        break;

    case 328: /* attrib  */
#line 277 "grammar.y" /* yacc.c:1274  */
      { FreeAttrib(((*yyvaluep).attrib)); }
#line 11985 "grammar.ec" /* yacc.c:1274  */
        break;

    case 329: /* multi_attrib  */
#line 281 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeAttrib); }
#line 11991 "grammar.ec" /* yacc.c:1274  */
        break;

    case 330: /* direct_abstract_declarator  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 11997 "grammar.ec" /* yacc.c:1274  */
        break;

    case 331: /* direct_abstract_declarator_noarray  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 12003 "grammar.ec" /* yacc.c:1274  */
        break;

    case 332: /* pointer  */
#line 206 "grammar.y" /* yacc.c:1274  */
      { FreePointer(((*yyvaluep).pointer)); }
#line 12009 "grammar.ec" /* yacc.c:1274  */
        break;

    case 333: /* abstract_declarator  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 12015 "grammar.ec" /* yacc.c:1274  */
        break;

    case 334: /* abstract_declarator_noarray  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 12021 "grammar.ec" /* yacc.c:1274  */
        break;

    case 335: /* declarator  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 12027 "grammar.ec" /* yacc.c:1274  */
        break;

    case 336: /* declarator_type_ok  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 12033 "grammar.ec" /* yacc.c:1274  */
        break;

    case 337: /* declarator_function  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 12039 "grammar.ec" /* yacc.c:1274  */
        break;

    case 338: /* declarator_function_error  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 12045 "grammar.ec" /* yacc.c:1274  */
        break;

    case 339: /* declarator_function_type_ok  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 12051 "grammar.ec" /* yacc.c:1274  */
        break;

    case 340: /* declarator_function_error_type_ok  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 12057 "grammar.ec" /* yacc.c:1274  */
        break;

    case 341: /* declarator_nofunction_type_ok  */
#line 224 "grammar.y" /* yacc.c:1274  */
      { FreeDeclarator(((*yyvaluep).declarator)); }
#line 12063 "grammar.ec" /* yacc.c:1274  */
        break;

    case 342: /* initializer  */
#line 230 "grammar.y" /* yacc.c:1274  */
      { FreeInitializer(((*yyvaluep).initializer)); }
#line 12069 "grammar.ec" /* yacc.c:1274  */
        break;

    case 344: /* initializer_error  */
#line 230 "grammar.y" /* yacc.c:1274  */
      { FreeInitializer(((*yyvaluep).initializer)); }
#line 12075 "grammar.ec" /* yacc.c:1274  */
        break;

    case 345: /* initializer_condition  */
#line 230 "grammar.y" /* yacc.c:1274  */
      { FreeInitializer(((*yyvaluep).initializer)); }
#line 12081 "grammar.ec" /* yacc.c:1274  */
        break;

    case 346: /* initializer_condition_error  */
#line 230 "grammar.y" /* yacc.c:1274  */
      { FreeInitializer(((*yyvaluep).initializer)); }
#line 12087 "grammar.ec" /* yacc.c:1274  */
        break;

    case 347: /* initializer_list  */
#line 262 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeInitializer); }
#line 12093 "grammar.ec" /* yacc.c:1274  */
        break;

    case 348: /* init_declarator  */
#line 231 "grammar.y" /* yacc.c:1274  */
      { FreeInitDeclarator(((*yyvaluep).initDeclarator)); }
#line 12099 "grammar.ec" /* yacc.c:1274  */
        break;

    case 349: /* init_declarator_error  */
#line 231 "grammar.y" /* yacc.c:1274  */
      { FreeInitDeclarator(((*yyvaluep).initDeclarator)); }
#line 12105 "grammar.ec" /* yacc.c:1274  */
        break;

    case 350: /* init_declarator_list  */
#line 263 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeInitDeclarator); }
#line 12111 "grammar.ec" /* yacc.c:1274  */
        break;

    case 351: /* init_declarator_list_error  */
#line 263 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeInitDeclarator); }
#line 12117 "grammar.ec" /* yacc.c:1274  */
        break;

    case 352: /* type_name  */
#line 232 "grammar.y" /* yacc.c:1274  */
      { FreeTypeName(((*yyvaluep).typeName)); }
#line 12123 "grammar.ec" /* yacc.c:1274  */
        break;

    case 353: /* guess_type_name  */
#line 232 "grammar.y" /* yacc.c:1274  */
      { FreeTypeName(((*yyvaluep).typeName)); }
#line 12129 "grammar.ec" /* yacc.c:1274  */
        break;

    case 354: /* parameter_declaration  */
#line 232 "grammar.y" /* yacc.c:1274  */
      { FreeTypeName(((*yyvaluep).typeName)); }
#line 12135 "grammar.ec" /* yacc.c:1274  */
        break;

    case 355: /* parameter_declaration_error  */
#line 232 "grammar.y" /* yacc.c:1274  */
      { FreeTypeName(((*yyvaluep).typeName)); }
#line 12141 "grammar.ec" /* yacc.c:1274  */
        break;

    case 356: /* parameter_list  */
#line 264 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeTypeName); }
#line 12147 "grammar.ec" /* yacc.c:1274  */
        break;

    case 357: /* parameter_list_error  */
#line 264 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeTypeName); }
#line 12153 "grammar.ec" /* yacc.c:1274  */
        break;

    case 358: /* parameter_type_list  */
#line 264 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeTypeName); }
#line 12159 "grammar.ec" /* yacc.c:1274  */
        break;

    case 359: /* parameter_type_list_error  */
#line 264 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeTypeName); }
#line 12165 "grammar.ec" /* yacc.c:1274  */
        break;

    case 360: /* statement  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12171 "grammar.ec" /* yacc.c:1274  */
        break;

    case 361: /* statement_error  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12177 "grammar.ec" /* yacc.c:1274  */
        break;

    case 365: /* labeled_statement  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12183 "grammar.ec" /* yacc.c:1274  */
        break;

    case 366: /* labeled_statement_error  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12189 "grammar.ec" /* yacc.c:1274  */
        break;

    case 367: /* declaration_mode  */
#line 276 "grammar.y" /* yacc.c:1274  */
      { }
#line 12195 "grammar.ec" /* yacc.c:1274  */
        break;

    case 369: /* declaration  */
#line 237 "grammar.y" /* yacc.c:1274  */
      { FreeDeclaration(((*yyvaluep).declaration)); }
#line 12201 "grammar.ec" /* yacc.c:1274  */
        break;

    case 373: /* declaration_list  */
#line 261 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeDeclaration); }
#line 12207 "grammar.ec" /* yacc.c:1274  */
        break;

    case 374: /* declaration_list_error  */
#line 261 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeDeclaration); }
#line 12213 "grammar.ec" /* yacc.c:1274  */
        break;

    case 375: /* statement_list  */
#line 265 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeStatement); }
#line 12219 "grammar.ec" /* yacc.c:1274  */
        break;

    case 376: /* statement_list_error  */
#line 265 "grammar.y" /* yacc.c:1274  */
      { FreeList(((*yyvaluep).list), FreeStatement); }
#line 12225 "grammar.ec" /* yacc.c:1274  */
        break;

    case 377: /* compound_inside  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12231 "grammar.ec" /* yacc.c:1274  */
        break;

    case 378: /* compound_inside_error  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12237 "grammar.ec" /* yacc.c:1274  */
        break;

    case 379: /* compound_start  */
#line 270 "grammar.y" /* yacc.c:1274  */
      { PopContext(((*yyvaluep).context)); FreeContext(((*yyvaluep).context)); delete ((*yyvaluep).context); }
#line 12243 "grammar.ec" /* yacc.c:1274  */
        break;

    case 380: /* compound_statement  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12249 "grammar.ec" /* yacc.c:1274  */
        break;

    case 381: /* compound_statement_error  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12255 "grammar.ec" /* yacc.c:1274  */
        break;

    case 382: /* expression_statement  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12261 "grammar.ec" /* yacc.c:1274  */
        break;

    case 383: /* selection_statement  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12267 "grammar.ec" /* yacc.c:1274  */
        break;

    case 384: /* selection_statement_error  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12273 "grammar.ec" /* yacc.c:1274  */
        break;

    case 385: /* iteration_statement  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12279 "grammar.ec" /* yacc.c:1274  */
        break;

    case 386: /* iteration_statement_error  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12285 "grammar.ec" /* yacc.c:1274  */
        break;

    case 387: /* jump_statement  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12291 "grammar.ec" /* yacc.c:1274  */
        break;

    case 388: /* jump_statement_error  */
#line 233 "grammar.y" /* yacc.c:1274  */
      { FreeStatement(((*yyvaluep).stmt)); }
#line 12297 "grammar.ec" /* yacc.c:1274  */
        break;

    case 389: /* function_definition  */
#line 238 "grammar.y" /* yacc.c:1274  */
      { FreeFunction(((*yyvaluep).function)); }
#line 12303 "grammar.ec" /* yacc.c:1274  */
        break;

    case 390: /* function_definition_error  */
#line 238 "grammar.y" /* yacc.c:1274  */
      { FreeFunction(((*yyvaluep).function)); }
#line 12309 "grammar.ec" /* yacc.c:1274  */
        break;

    case 391: /* string_literal  */
#line 253 "grammar.y" /* yacc.c:1274  */
      { delete ((*yyvaluep).string); }
#line 12315 "grammar.ec" /* yacc.c:1274  */
        break;

    case 392: /* external_declaration  */
#line 239 "grammar.y" /* yacc.c:1274  */
      { FreeExternal(((*yyvaluep).external)); }
#line 12321 "grammar.ec" /* yacc.c:1274  */
        break;

    case 393: /* external_declaration_error  */
#line 239 "grammar.y" /* yacc.c:1274  */
      { FreeExternal(((*yyvaluep).external)); }
#line 12327 "grammar.ec" /* yacc.c:1274  */
        break;

    case 394: /* translation_unit_error  */
#line 266 "grammar.y" /* yacc.c:1274  */
      { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); }
#line 12333 "grammar.ec" /* yacc.c:1274  */
        break;

    case 395: /* translation_unit  */
#line 266 "grammar.y" /* yacc.c:1274  */
      { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); }
#line 12339 "grammar.ec" /* yacc.c:1274  */
        break;


      default:
        break;
    }
}




/* The lookahead symbol.  */
int yychar;


#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE (yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;


/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 289 "grammar.y" /* yacc.c:1663  */
    {
      (yyval.specifier) = null;
      _DeclClass((yyvsp[-1].id)._class, (yyvsp[-1].id).string);

      FreeIdentifier((yyvsp[-1].id));

      fileInput.Seek((yylsp[-1]).start.pos, start);
      resetScannerPos(&(yylsp[-1]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   }
#line 12655 "grammar.ec" /* yacc.c:1663  */
    break;

  case 3:
#line 308 "grammar.y" /* yacc.c:1663  */
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      _DeclClass((yyvsp[-1].id)._class, (yyvsp[-1].id).string);

      FreeIdentifier((yyvsp[-1].id));

      fileInput.Seek((yylsp[-1]).start.pos, start);
      resetScannerPos(&(yylsp[-1]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   }
#line 12680 "grammar.ec" /* yacc.c:1663  */
    break;

  case 4:
#line 346 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[0].specifier); }
#line 12686 "grammar.ec" /* yacc.c:1663  */
    break;

  case 5:
#line 348 "grammar.y" /* yacc.c:1663  */
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[-1].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[-1].id).string);
         FreeIdentifier((yyvsp[-1].id));
         FreeIdentifier((yyvsp[0].id));
      }
      else
      {
         _DeclClass((yyvsp[-1].id)._class, (yyvsp[-1].id).string);

         FreeIdentifier((yyvsp[-1].id));
         FreeIdentifier((yyvsp[0].id));

         fileInput.Seek((yylsp[-1]).start.pos, start);
         resetScannerPos(&(yylsp[-1]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[0].id); yylloc = (yylsp[-1]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[-1].id).string);
         yylloc = tmpLoc; (yyvsp[0].id).badID = (yyvsp[-1].id);
   #endif
      }
   }
#line 12724 "grammar.ec" /* yacc.c:1663  */
    break;

  case 6:
#line 427 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifierName(yytext); }
#line 12730 "grammar.ec" /* yacc.c:1663  */
    break;

  case 7:
#line 431 "grammar.y" /* yacc.c:1663  */
    { (yyval.string) = CopyString(yytext); }
#line 12736 "grammar.ec" /* yacc.c:1663  */
    break;

  case 9:
#line 435 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-3].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[-1].list)); (yyval.specifier).loc = (yyloc); }
#line 12742 "grammar.ec" /* yacc.c:1663  */
    break;

  case 10:
#line 437 "grammar.y" /* yacc.c:1663  */
    {
      (yyval.specifier) = (yyvsp[-3].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[-1].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[0]).end.pos--;
      fileInput.Seek((yylsp[0]).end.pos, start);
      resetScannerPos(&(yylsp[0]).end);
      yyclearin;
    }
#line 12757 "grammar.ec" /* yacc.c:1663  */
    break;

  case 11:
#line 476 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction((yyvsp[-1].list), null, (yyvsp[0].declarator), null); (yyval.classFunction).loc = (yyloc); }
#line 12763 "grammar.ec" /* yacc.c:1663  */
    break;

  case 12:
#line 478 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[0].declarator), null); (yyval.classFunction).loc = (yyloc); }
#line 12769 "grammar.ec" /* yacc.c:1663  */
    break;

  case 13:
#line 483 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction((yyvsp[-2].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); }
#line 12775 "grammar.ec" /* yacc.c:1663  */
    break;

  case 14:
#line 488 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction((yyvsp[-2].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); }
#line 12781 "grammar.ec" /* yacc.c:1663  */
    break;

  case 15:
#line 493 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction((yyvsp[-1].list), null, (yyvsp[0].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
#line 12787 "grammar.ec" /* yacc.c:1663  */
    break;

  case 16:
#line 495 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[0].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
#line 12793 "grammar.ec" /* yacc.c:1663  */
    break;

  case 17:
#line 500 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction((yyvsp[-1].list), null, (yyvsp[0].declarator), null); (yyval.classFunction).loc = (yyloc); }
#line 12799 "grammar.ec" /* yacc.c:1663  */
    break;

  case 18:
#line 502 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[0].declarator), null); (yyval.classFunction).loc = (yyloc); }
#line 12805 "grammar.ec" /* yacc.c:1663  */
    break;

  case 19:
#line 507 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction((yyvsp[-1].list), null, (yyvsp[0].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
#line 12811 "grammar.ec" /* yacc.c:1663  */
    break;

  case 20:
#line 509 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[0].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
#line 12817 "grammar.ec" /* yacc.c:1663  */
    break;

  case 21:
#line 514 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), (yyvsp[0].stmt)); (yyval.classFunction).loc = (yyloc); }
#line 12823 "grammar.ec" /* yacc.c:1663  */
    break;

  case 22:
#line 516 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), (yyvsp[0].stmt)); (yyval.classFunction).loc = (yyloc); }
#line 12829 "grammar.ec" /* yacc.c:1663  */
    break;

  case 23:
#line 518 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), null); (yyval.classFunction).loc = (yyloc); }
#line 12835 "grammar.ec" /* yacc.c:1663  */
    break;

  case 24:
#line 520 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), (yyvsp[0].stmt)); (yyval.classFunction).loc = (yyloc); }
#line 12841 "grammar.ec" /* yacc.c:1663  */
    break;

  case 25:
#line 522 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), (yyvsp[0].stmt)); (yyval.classFunction).loc = (yyloc); }
#line 12847 "grammar.ec" /* yacc.c:1663  */
    break;

  case 26:
#line 526 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), null); (yyval.classFunction).loc = (yyloc); }
#line 12853 "grammar.ec" /* yacc.c:1663  */
    break;

  case 27:
#line 530 "grammar.y" /* yacc.c:1663  */
    {
         if((yyvsp[-2].classFunction).declarator)
         {
            (yyvsp[-2].classFunction).declarator = MkStructDeclarator((yyvsp[-2].classFunction).declarator, null);
            (yyvsp[-2].classFunction).declarator.structDecl.attrib = (yyvsp[-1].attrib);
         }
         ProcessClassFunctionBody((yyvsp[-2].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      }
#line 12867 "grammar.ec" /* yacc.c:1663  */
    break;

  case 28:
#line 543 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), (yyvsp[0].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[0].stmt).loc.end; }
#line 12873 "grammar.ec" /* yacc.c:1663  */
    break;

  case 29:
#line 545 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[0].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
#line 12879 "grammar.ec" /* yacc.c:1663  */
    break;

  case 30:
#line 547 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), (yyvsp[0].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[0].stmt).loc.end; }
#line 12885 "grammar.ec" /* yacc.c:1663  */
    break;

  case 31:
#line 549 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[0].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
#line 12891 "grammar.ec" /* yacc.c:1663  */
    break;

  case 32:
#line 551 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
#line 12897 "grammar.ec" /* yacc.c:1663  */
    break;

  case 33:
#line 557 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction((yyvsp[-1].list), null, (yyvsp[0].declarator), null); (yyval.classFunction).loc = (yyloc); }
#line 12903 "grammar.ec" /* yacc.c:1663  */
    break;

  case 34:
#line 559 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction((yyvsp[-1].list), null, MkDeclaratorFunction((yyvsp[0].declarator), null), null); (yyval.classFunction).loc = (yyloc); }
#line 12909 "grammar.ec" /* yacc.c:1663  */
    break;

  case 35:
#line 564 "grammar.y" /* yacc.c:1663  */
    { (yyval.classFunction) = MkClassFunction((yyvsp[-1].list), null, (yyvsp[0].declarator), null); (yyval.classFunction).loc = (yyloc); }
#line 12915 "grammar.ec" /* yacc.c:1663  */
    break;

  case 36:
#line 569 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), (yyvsp[0].stmt)); (yyval.classFunction).loc = (yyloc); }
#line 12921 "grammar.ec" /* yacc.c:1663  */
    break;

  case 37:
#line 574 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[-1].classFunction), (yyvsp[0].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[0].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
#line 12927 "grammar.ec" /* yacc.c:1663  */
    break;

  case 38:
#line 576 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[0].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
#line 12933 "grammar.ec" /* yacc.c:1663  */
    break;

  case 39:
#line 578 "grammar.y" /* yacc.c:1663  */
    { ProcessClassFunctionBody((yyvsp[0].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
#line 12939 "grammar.ec" /* yacc.c:1663  */
    break;

  case 40:
#line 582 "grammar.y" /* yacc.c:1663  */
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[-2].exp), (yyvsp[0].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[-1]).end;}
#line 12945 "grammar.ec" /* yacc.c:1663  */
    break;

  case 41:
#line 583 "grammar.y" /* yacc.c:1663  */
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[0].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
#line 12951 "grammar.ec" /* yacc.c:1663  */
    break;

  case 42:
#line 587 "grammar.y" /* yacc.c:1663  */
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[-2].exp), (yyvsp[0].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[-1]).end;}
#line 12957 "grammar.ec" /* yacc.c:1663  */
    break;

  case 43:
#line 589 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[-2].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[-1]).end;

         fileInput.Seek((yylsp[-1]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[-1]).end);
         (yyloc).start = (yylsp[-2]).start;
         (yyloc).end = (yylsp[-1]).end;
      }
#line 12972 "grammar.ec" /* yacc.c:1663  */
    break;

  case 44:
#line 599 "grammar.y" /* yacc.c:1663  */
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[0].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
#line 12978 "grammar.ec" /* yacc.c:1663  */
    break;

  case 45:
#line 603 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].memberInit)); }
#line 12984 "grammar.ec" /* yacc.c:1663  */
    break;

  case 46:
#line 605 "grammar.y" /* yacc.c:1663  */
    { ((MemberInit)(yyvsp[-2].list)->last).loc.end = (yylsp[0]).start; ListAdd((yyvsp[-2].list), (yyvsp[0].memberInit)); (yyval.list) = (yyvsp[-2].list); }
#line 12990 "grammar.ec" /* yacc.c:1663  */
    break;

  case 47:
#line 607 "grammar.y" /* yacc.c:1663  */
    { ((MemberInit)(yyvsp[-2].list)->last).loc.end = (yylsp[0]).start; ListAdd((yyvsp[-2].list), (yyvsp[0].memberInit)); (yyval.list) = (yyvsp[-2].list); }
#line 12996 "grammar.ec" /* yacc.c:1663  */
    break;

  case 48:
#line 611 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].memberInit)); }
#line 13002 "grammar.ec" /* yacc.c:1663  */
    break;

  case 49:
#line 613 "grammar.y" /* yacc.c:1663  */
    { ((MemberInit)(yyvsp[-2].list)->last).loc.end = (yylsp[0]).start; ListAdd((yyvsp[-2].list), (yyvsp[0].memberInit)); (yyval.list) = (yyvsp[-2].list); }
#line 13008 "grammar.ec" /* yacc.c:1663  */
    break;

  case 50:
#line 615 "grammar.y" /* yacc.c:1663  */
    { ((MemberInit)(yyvsp[-2].list)->last).loc.end = (yylsp[0]).start; ListAdd((yyvsp[-2].list), (yyvsp[0].memberInit)); (yyval.list) = (yyvsp[-2].list); }
#line 13014 "grammar.ec" /* yacc.c:1663  */
    break;

  case 51:
#line 618 "grammar.y" /* yacc.c:1663  */
    { ((MemberInit)(yyvsp[-2].list)->last).loc.end = (yylsp[-1]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[-1]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[-1]).end;
            ListAdd((yyvsp[-2].list), memberInit);
          }
          (yyval.list) = (yyvsp[-2].list);
       }
#line 13029 "grammar.ec" /* yacc.c:1663  */
    break;

  case 52:
#line 630 "grammar.y" /* yacc.c:1663  */
    { ((MemberInit)(yyvsp[-2].list)->last).loc.end = (yylsp[-1]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[-1]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[-1]).end;
            ListAdd((yyvsp[-2].list), memberInit);
          }
          (yyval.list) = (yyvsp[-2].list);
       }
#line 13044 "grammar.ec" /* yacc.c:1663  */
    break;

  case 53:
#line 641 "grammar.y" /* yacc.c:1663  */
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[0]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[0]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[0]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[0]).end;
         ListAdd((yyval.list), memberInit);
      }
#line 13064 "grammar.ec" /* yacc.c:1663  */
    break;

  case 54:
#line 660 "grammar.y" /* yacc.c:1663  */
    { if((yyvsp[-1].list)->last) ((MemberInit)(yyvsp[-1].list)->last).loc.end = (yylsp[0]).end; (yyval.list) = (yyvsp[-1].list); }
#line 13070 "grammar.ec" /* yacc.c:1663  */
    break;

  case 55:
#line 662 "grammar.y" /* yacc.c:1663  */
    { if((yyvsp[-1].list)->last) ((MemberInit)(yyvsp[-1].list)->last).loc.end = (yylsp[0]).end; (yyval.list) = (yyvsp[-1].list); }
#line 13076 "grammar.ec" /* yacc.c:1663  */
    break;

  case 56:
#line 666 "grammar.y" /* yacc.c:1663  */
    { MembersInit members = MkMembersInitList((yyvsp[0].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[0]); }
#line 13082 "grammar.ec" /* yacc.c:1663  */
    break;

  case 57:
#line 667 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[0].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); }
#line 13088 "grammar.ec" /* yacc.c:1663  */
    break;

  case 58:
#line 668 "grammar.y" /* yacc.c:1663  */
    { MembersInit members = MkMembersInitList((yyvsp[0].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[0]); (yyval.list) = (yyvsp[-1].list); }
#line 13094 "grammar.ec" /* yacc.c:1663  */
    break;

  case 59:
#line 669 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[0].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); (yyval.list) = (yyvsp[-1].list); }
#line 13100 "grammar.ec" /* yacc.c:1663  */
    break;

  case 60:
#line 670 "grammar.y" /* yacc.c:1663  */
    { MembersInit members = MkMembersInitList((yyvsp[0].list)); ListAdd((yyval.list), members); members.loc = (yylsp[0]); (yyval.list) = (yyvsp[-1].list); }
#line 13106 "grammar.ec" /* yacc.c:1663  */
    break;

  case 61:
#line 671 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[0].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); (yyval.list) = (yyvsp[-1].list); }
#line 13112 "grammar.ec" /* yacc.c:1663  */
    break;

  case 63:
#line 674 "grammar.y" /* yacc.c:1663  */
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[0]);
      }
      (yyval.list) = (yyvsp[-1].list);
   }
#line 13129 "grammar.ec" /* yacc.c:1663  */
    break;

  case 64:
#line 686 "grammar.y" /* yacc.c:1663  */
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[0]);  }
#line 13135 "grammar.ec" /* yacc.c:1663  */
    break;

  case 66:
#line 691 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[0].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); }
#line 13141 "grammar.ec" /* yacc.c:1663  */
    break;

  case 67:
#line 692 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyvsp[-1].list), MkMembersInitList((yyvsp[0].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); }
#line 13147 "grammar.ec" /* yacc.c:1663  */
    break;

  case 68:
#line 693 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyvsp[-1].list), MkMembersInitList((yyvsp[0].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); }
#line 13153 "grammar.ec" /* yacc.c:1663  */
    break;

  case 69:
#line 697 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[0].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); }
#line 13159 "grammar.ec" /* yacc.c:1663  */
    break;

  case 70:
#line 698 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[0].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); (yyval.list) = (yyvsp[-1].list); }
#line 13165 "grammar.ec" /* yacc.c:1663  */
    break;

  case 71:
#line 699 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[0].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); (yyval.list) = (yyvsp[-1].list); }
#line 13171 "grammar.ec" /* yacc.c:1663  */
    break;

  case 72:
#line 700 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[0].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); (yyval.list) = (yyvsp[-1].list); }
#line 13177 "grammar.ec" /* yacc.c:1663  */
    break;

  case 73:
#line 701 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[0].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); (yyval.list) = (yyvsp[-1].list); }
#line 13183 "grammar.ec" /* yacc.c:1663  */
    break;

  case 74:
#line 702 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[0].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); }
#line 13189 "grammar.ec" /* yacc.c:1663  */
    break;

  case 75:
#line 703 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[-1].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[0]); }
#line 13195 "grammar.ec" /* yacc.c:1663  */
    break;

  case 76:
#line 708 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[0]).start; (yyval.instance) = (yyvsp[-1].instance); }
#line 13201 "grammar.ec" /* yacc.c:1663  */
    break;

  case 77:
#line 710 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[-1]).start; (yyval.instance) = (yyvsp[-2].instance); }
#line 13207 "grammar.ec" /* yacc.c:1663  */
    break;

  case 78:
#line 715 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-3].list), MkExpIdentifier((yyvsp[-2].id)), (yyvsp[0].list)); (yyval.instance).exp.loc = (yylsp[-2]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-2]); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13213 "grammar.ec" /* yacc.c:1663  */
    break;

  case 79:
#line 717 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-4].list), MkExpIdentifier((yyvsp[-3].id)), (yyvsp[-1].list)); (yyval.instance).exp.loc = (yylsp[-3]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-3]); (yyval.instance).insideLoc.start = (yylsp[-2]).end; (yyval.instance).insideLoc.end = (yylsp[-1]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13219 "grammar.ec" /* yacc.c:1663  */
    break;

  case 80:
#line 719 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-3].list), MkExpIdentifier((yyvsp[-2].id)), (yyvsp[0].list)); (yyval.instance).exp.loc = (yylsp[-2]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-2]); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13225 "grammar.ec" /* yacc.c:1663  */
    break;

  case 81:
#line 721 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-2].list), MkExpIdentifier((yyvsp[-1].id)), null); (yyval.instance).exp.loc = (yylsp[-1]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-1]); (yyval.instance).insideLoc.start = (yylsp[0]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13231 "grammar.ec" /* yacc.c:1663  */
    break;

  case 82:
#line 723 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-3].list), MkExpIdentifier((yyvsp[-2].id)), null);(yyval.instance).exp.loc = (yylsp[-2]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-2]); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[-1]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13237 "grammar.ec" /* yacc.c:1663  */
    break;

  case 83:
#line 753 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[0]).start; }
#line 13243 "grammar.ec" /* yacc.c:1663  */
    break;

  case 84:
#line 755 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[-1]).start; }
#line 13249 "grammar.ec" /* yacc.c:1663  */
    break;

  case 85:
#line 760 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-3].list), MkExpIdentifier((yyvsp[-2].id)), (yyvsp[0].list));(yyval.instance).exp.loc = (yylsp[-2]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-2]); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13255 "grammar.ec" /* yacc.c:1663  */
    break;

  case 86:
#line 762 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-4].list), MkExpIdentifier((yyvsp[-3].id)), (yyvsp[-1].list)); (yyval.instance).exp.loc = (yylsp[-3]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-3]); (yyval.instance).insideLoc.start = (yylsp[-2]).end; (yyval.instance).insideLoc.end = (yylsp[-1]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13261 "grammar.ec" /* yacc.c:1663  */
    break;

  case 87:
#line 764 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-3].list), MkExpIdentifier((yyvsp[-2].id)), (yyvsp[0].list));(yyval.instance).exp.loc = (yylsp[-2]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-2]); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13267 "grammar.ec" /* yacc.c:1663  */
    break;

  case 88:
#line 766 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-2].list), MkExpIdentifier((yyvsp[-1].id)), null);(yyval.instance).exp.loc = (yylsp[-1]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-1]); (yyval.instance).insideLoc.start = (yylsp[0]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13273 "grammar.ec" /* yacc.c:1663  */
    break;

  case 89:
#line 768 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-3].list), MkExpIdentifier((yyvsp[-2].id)), null);(yyval.instance).exp.loc = (yylsp[-2]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-2]); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[-1]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13279 "grammar.ec" /* yacc.c:1663  */
    break;

  case 90:
#line 797 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-4].list), MkExpIdentifier((yyvsp[-3].id)), (yyvsp[-1].list)); (yyval.instance).exp.loc = (yylsp[-3]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-3]); (yyval.instance).insideLoc.start = (yylsp[-2]).end; (yyval.instance).insideLoc.end = (yylsp[0]).start;}
#line 13285 "grammar.ec" /* yacc.c:1663  */
    break;

  case 91:
#line 799 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-4].list), MkExpIdentifier((yyvsp[-3].id)), (yyvsp[-1].list)); (yyval.instance).exp.loc = (yylsp[-3]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-3]); (yyval.instance).insideLoc.start = (yylsp[-2]).end; (yyval.instance).insideLoc.end = (yylsp[0]).start;}
#line 13291 "grammar.ec" /* yacc.c:1663  */
    break;

  case 92:
#line 801 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiationNamed((yyvsp[-3].list), MkExpIdentifier((yyvsp[-2].id)), MkList());  (yyval.instance).exp.loc = (yylsp[-2]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[-2]); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).start;}
#line 13297 "grammar.ec" /* yacc.c:1663  */
    break;

  case 93:
#line 806 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[0]).start; (yyval.instance) = (yyvsp[-1].instance); }
#line 13303 "grammar.ec" /* yacc.c:1663  */
    break;

  case 94:
#line 808 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[-1]).start; (yyval.instance) = (yyvsp[-2].instance); }
#line 13309 "grammar.ec" /* yacc.c:1663  */
    break;

  case 95:
#line 813 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiation((yyvsp[-2].specifier), null, (yyvsp[0].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13315 "grammar.ec" /* yacc.c:1663  */
    break;

  case 96:
#line 815 "grammar.y" /* yacc.c:1663  */
    { Location tmpLoc = yylloc; yylloc = (yylsp[-2]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[-2].id).string), null, (yyvsp[0].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end; FreeIdentifier((yyvsp[-2].id)); }
#line 13322 "grammar.ec" /* yacc.c:1663  */
    break;

  case 97:
#line 819 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiation((yyvsp[-2].specifier), null, (yyvsp[0].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13328 "grammar.ec" /* yacc.c:1663  */
    break;

  case 98:
#line 821 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiation((yyvsp[-1].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[0]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13334 "grammar.ec" /* yacc.c:1663  */
    break;

  case 99:
#line 823 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiation((yyvsp[-3].specifier), null, (yyvsp[-1].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-2]).end; (yyval.instance).insideLoc.end = (yylsp[-1]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13340 "grammar.ec" /* yacc.c:1663  */
    break;

  case 100:
#line 825 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiation((yyvsp[-2].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[-1]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
#line 13346 "grammar.ec" /* yacc.c:1663  */
    break;

  case 101:
#line 830 "grammar.y" /* yacc.c:1663  */
    { Location tmpLoc = yylloc; yylloc = (yylsp[-2]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[-2].id).string), null, (yyvsp[0].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[-2].id)); }
#line 13353 "grammar.ec" /* yacc.c:1663  */
    break;

  case 102:
#line 833 "grammar.y" /* yacc.c:1663  */
    { Location tmpLoc = yylloc; yylloc = (yylsp[-1]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[-1].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[0]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[-1].id)); }
#line 13360 "grammar.ec" /* yacc.c:1663  */
    break;

  case 103:
#line 836 "grammar.y" /* yacc.c:1663  */
    { Location tmpLoc = yylloc; yylloc = (yylsp[-3]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[-3].id).string), null, (yyvsp[-1].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-2]).end; (yyval.instance).insideLoc.end = (yylsp[-1]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[-3].id)); }
#line 13367 "grammar.ec" /* yacc.c:1663  */
    break;

  case 104:
#line 839 "grammar.y" /* yacc.c:1663  */
    { Location tmpLoc = yylloc; yylloc = (yylsp[-2]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[-2].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[-1]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[-2].id)); }
#line 13374 "grammar.ec" /* yacc.c:1663  */
    break;

  case 105:
#line 904 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[0]).start; }
#line 13380 "grammar.ec" /* yacc.c:1663  */
    break;

  case 106:
#line 906 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[-1]).start; }
#line 13386 "grammar.ec" /* yacc.c:1663  */
    break;

  case 107:
#line 911 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[0].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13392 "grammar.ec" /* yacc.c:1663  */
    break;

  case 108:
#line 913 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[-1].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-2]).end; (yyval.instance).insideLoc.end = (yylsp[-1]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13398 "grammar.ec" /* yacc.c:1663  */
    break;

  case 109:
#line 915 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[-1]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
#line 13404 "grammar.ec" /* yacc.c:1663  */
    break;

  case 110:
#line 917 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[0]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13410 "grammar.ec" /* yacc.c:1663  */
    break;

  case 111:
#line 919 "grammar.y" /* yacc.c:1663  */
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[0].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[-1]).end; (yyval.instance).insideLoc.end = (yylsp[0]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
#line 13416 "grammar.ec" /* yacc.c:1663  */
    break;

  case 112:
#line 949 "grammar.y" /* yacc.c:1663  */
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[-2].exp), (yyvsp[0].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
#line 13422 "grammar.ec" /* yacc.c:1663  */
    break;

  case 113:
#line 953 "grammar.y" /* yacc.c:1663  */
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[-2].exp), (yyvsp[0].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[-1]).end; }
#line 13428 "grammar.ec" /* yacc.c:1663  */
    break;

  case 114:
#line 954 "grammar.y" /* yacc.c:1663  */
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[-2].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[-1]).end; (yyval.memberInit).initializer.loc.end = (yylsp[-1]).end; }
#line 13434 "grammar.ec" /* yacc.c:1663  */
    break;

  case 115:
#line 955 "grammar.y" /* yacc.c:1663  */
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[-1].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
#line 13440 "grammar.ec" /* yacc.c:1663  */
    break;

  case 116:
#line 959 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
#line 13446 "grammar.ec" /* yacc.c:1663  */
    break;

  case 117:
#line 960 "grammar.y" /* yacc.c:1663  */
    { ((MemberInit)(yyvsp[-2].list)->last).loc.end = (yylsp[0]).start; ListAdd((yyvsp[-2].list), (yyvsp[0].memberInit)); (yyval.list) = (yyvsp[-2].list); }
#line 13452 "grammar.ec" /* yacc.c:1663  */
    break;

  case 118:
#line 961 "grammar.y" /* yacc.c:1663  */
    { ((MemberInit)(yyvsp[-2].list)->last).loc.end = (yylsp[0]).start; ListAdd((yyvsp[-2].list), (yyvsp[0].memberInit)); (yyval.list) = (yyvsp[-2].list); }
#line 13458 "grammar.ec" /* yacc.c:1663  */
    break;

  case 119:
#line 965 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
#line 13464 "grammar.ec" /* yacc.c:1663  */
    break;

  case 120:
#line 966 "grammar.y" /* yacc.c:1663  */
    { ((MemberInit)(yyvsp[-2].list)->last).loc.end = (yylsp[0]).start; ListAdd((yyvsp[-2].list), (yyvsp[0].memberInit)); (yyval.list) = (yyvsp[-2].list); }
#line 13470 "grammar.ec" /* yacc.c:1663  */
    break;

  case 121:
#line 967 "grammar.y" /* yacc.c:1663  */
    { ((MemberInit)(yyvsp[-2].list)->last).loc.end = (yylsp[0]).start; ListAdd((yyvsp[-2].list), (yyvsp[0].memberInit)); (yyval.list) = (yyvsp[-2].list); }
#line 13476 "grammar.ec" /* yacc.c:1663  */
    break;

  case 123:
#line 973 "grammar.y" /* yacc.c:1663  */
    { (yyval.prop) = MkProperty((yyvsp[-2].list), null, (yyvsp[-1].id), null, null); (yyval.prop).loc = (yyloc); }
#line 13482 "grammar.ec" /* yacc.c:1663  */
    break;

  case 124:
#line 976 "grammar.y" /* yacc.c:1663  */
    { (yyval.prop) = MkProperty((yyvsp[-3].list), (yyvsp[-2].declarator), (yyvsp[-1].id), null, null); (yyval.prop).loc = (yyloc); }
#line 13488 "grammar.ec" /* yacc.c:1663  */
    break;

  case 125:
#line 979 "grammar.y" /* yacc.c:1663  */
    { (yyval.prop) = MkProperty((yyvsp[-1].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
#line 13494 "grammar.ec" /* yacc.c:1663  */
    break;

  case 126:
#line 982 "grammar.y" /* yacc.c:1663  */
    { (yyval.prop) = MkProperty((yyvsp[-2].list), (yyvsp[-1].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
#line 13500 "grammar.ec" /* yacc.c:1663  */
    break;

  case 127:
#line 985 "grammar.y" /* yacc.c:1663  */
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
#line 13506 "grammar.ec" /* yacc.c:1663  */
    break;

  case 129:
#line 991 "grammar.y" /* yacc.c:1663  */
    { (yyvsp[-2].prop).setStmt = (yyvsp[0].stmt); }
#line 13512 "grammar.ec" /* yacc.c:1663  */
    break;

  case 130:
#line 993 "grammar.y" /* yacc.c:1663  */
    { (yyvsp[-2].prop).getStmt = (yyvsp[0].stmt); }
#line 13518 "grammar.ec" /* yacc.c:1663  */
    break;

  case 131:
#line 995 "grammar.y" /* yacc.c:1663  */
    { (yyvsp[-2].prop).issetStmt = (yyvsp[0].stmt); }
#line 13524 "grammar.ec" /* yacc.c:1663  */
    break;

  case 132:
#line 997 "grammar.y" /* yacc.c:1663  */
    { (yyvsp[-1].prop).isWatchable = true; }
#line 13530 "grammar.ec" /* yacc.c:1663  */
    break;

  case 133:
#line 999 "grammar.y" /* yacc.c:1663  */
    { (yyvsp[-2].prop).category = (yyvsp[0].exp); }
#line 13536 "grammar.ec" /* yacc.c:1663  */
    break;

  case 134:
#line 1003 "grammar.y" /* yacc.c:1663  */
    { (yyvsp[-1].prop).loc.end = (yylsp[0]).end; (yyval.prop) = (yyvsp[-1].prop); }
#line 13542 "grammar.ec" /* yacc.c:1663  */
    break;

  case 135:
#line 1008 "grammar.y" /* yacc.c:1663  */
    { (yyval.prop) = MkProperty((yyvsp[-2].list), null, (yyvsp[-1].id), null, null); (yyval.prop).loc = (yyloc); }
#line 13548 "grammar.ec" /* yacc.c:1663  */
    break;

  case 136:
#line 1011 "grammar.y" /* yacc.c:1663  */
    { (yyval.prop) = MkProperty((yyvsp[-3].list), (yyvsp[-2].declarator), (yyvsp[-1].id), null, null); (yyval.prop).loc = (yyloc); }
#line 13554 "grammar.ec" /* yacc.c:1663  */
    break;

  case 137:
#line 1014 "grammar.y" /* yacc.c:1663  */
    { (yyval.prop) = MkProperty((yyvsp[-1].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
#line 13560 "grammar.ec" /* yacc.c:1663  */
    break;

  case 138:
#line 1017 "grammar.y" /* yacc.c:1663  */
    { (yyval.prop) = MkProperty((yyvsp[-2].list), (yyvsp[-1].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
#line 13566 "grammar.ec" /* yacc.c:1663  */
    break;

  case 139:
#line 1020 "grammar.y" /* yacc.c:1663  */
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
#line 13572 "grammar.ec" /* yacc.c:1663  */
    break;

  case 141:
#line 1026 "grammar.y" /* yacc.c:1663  */
    { (yyvsp[-2].prop).setStmt = (yyvsp[0].stmt); }
#line 13578 "grammar.ec" /* yacc.c:1663  */
    break;

  case 142:
#line 1028 "grammar.y" /* yacc.c:1663  */
    { (yyvsp[-2].prop).getStmt = (yyvsp[0].stmt); }
#line 13584 "grammar.ec" /* yacc.c:1663  */
    break;

  case 143:
#line 1032 "grammar.y" /* yacc.c:1663  */
    { (yyvsp[-1].prop).loc.end = (yylsp[0]).end; }
#line 13590 "grammar.ec" /* yacc.c:1663  */
    break;

  case 144:
#line 1037 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkListOne((yyvsp[0].id)); }
#line 13596 "grammar.ec" /* yacc.c:1663  */
    break;

  case 145:
#line 1039 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyvsp[-1].list), (yyvsp[0].id)); }
#line 13602 "grammar.ec" /* yacc.c:1663  */
    break;

  case 146:
#line 1044 "grammar.y" /* yacc.c:1663  */
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[-1].list), (yyvsp[0].stmt)); }
#line 13608 "grammar.ec" /* yacc.c:1663  */
    break;

  case 147:
#line 1046 "grammar.y" /* yacc.c:1663  */
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[0].stmt)); }
#line 13614 "grammar.ec" /* yacc.c:1663  */
    break;

  case 148:
#line 1051 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkListOne((yyvsp[0].propertyWatch)); }
#line 13620 "grammar.ec" /* yacc.c:1663  */
    break;

  case 149:
#line 1053 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyvsp[-1].list), (yyvsp[0].propertyWatch)); }
#line 13626 "grammar.ec" /* yacc.c:1663  */
    break;

  case 150:
#line 1058 "grammar.y" /* yacc.c:1663  */
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[-2].list), (yyvsp[0].stmt)); }
#line 13632 "grammar.ec" /* yacc.c:1663  */
    break;

  case 151:
#line 1063 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[-4].exp), (yyvsp[-1].list)); }
#line 13638 "grammar.ec" /* yacc.c:1663  */
    break;

  case 152:
#line 1065 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkWatchStmt((yyvsp[-8].exp), (yyvsp[-4].exp), (yyvsp[-1].list)); }
#line 13644 "grammar.ec" /* yacc.c:1663  */
    break;

  case 153:
#line 1070 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[-3].exp), (yyvsp[-1].list)); }
#line 13650 "grammar.ec" /* yacc.c:1663  */
    break;

  case 154:
#line 1072 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[-7].exp), (yyvsp[-3].exp), (yyvsp[-1].list)); }
#line 13656 "grammar.ec" /* yacc.c:1663  */
    break;

  case 155:
#line 1074 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[-1].exp), null); }
#line 13662 "grammar.ec" /* yacc.c:1663  */
    break;

  case 156:
#line 1076 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[-5].exp), (yyvsp[-1].exp), null); }
#line 13668 "grammar.ec" /* yacc.c:1663  */
    break;

  case 157:
#line 1081 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkFireWatchersStmt(null, null); }
#line 13674 "grammar.ec" /* yacc.c:1663  */
    break;

  case 158:
#line 1083 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[0].list)); }
#line 13680 "grammar.ec" /* yacc.c:1663  */
    break;

  case 159:
#line 1085 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[-2].exp), null); }
#line 13686 "grammar.ec" /* yacc.c:1663  */
    break;

  case 160:
#line 1087 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[-3].exp), (yyvsp[0].list)); }
#line 13692 "grammar.ec" /* yacc.c:1663  */
    break;

  case 161:
#line 1091 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = (yyvsp[-1].classDef); (yyval.classDef).loc.end = (yylsp[0]).end; }
#line 13698 "grammar.ec" /* yacc.c:1663  */
    break;

  case 162:
#line 1092 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[-1].list)); if((yyvsp[-1].list)->last) ((MemberInit)(yyvsp[-1].list)->last).loc.end = (yylsp[0]).start; (yyval.classDef).loc = (yyloc); }
#line 13704 "grammar.ec" /* yacc.c:1663  */
    break;

  case 163:
#line 1093 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefFunction((yyvsp[0].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
#line 13710 "grammar.ec" /* yacc.c:1663  */
    break;

  case 164:
#line 1094 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefProperty((yyvsp[0].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
#line 13716 "grammar.ec" /* yacc.c:1663  */
    break;

  case 165:
#line 1095 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefFunction((yyvsp[0].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[-1].declMode); }
#line 13722 "grammar.ec" /* yacc.c:1663  */
    break;

  case 166:
#line 1096 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefProperty((yyvsp[0].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[-1].declMode); }
#line 13728 "grammar.ec" /* yacc.c:1663  */
    break;

  case 167:
#line 1097 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[0].prop)); (yyval.classDef).loc = (yyloc); }
#line 13734 "grammar.ec" /* yacc.c:1663  */
    break;

  case 168:
#line 1098 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = null; deleteWatchable = true; }
#line 13740 "grammar.ec" /* yacc.c:1663  */
    break;

  case 169:
#line 1099 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefNoExpansion(); }
#line 13746 "grammar.ec" /* yacc.c:1663  */
    break;

  case 170:
#line 1100 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefFixed(); }
#line 13752 "grammar.ec" /* yacc.c:1663  */
    break;

  case 171:
#line 1101 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[-4].id), (yyvsp[-1].initializer)); (yyval.classDef).loc = (yyloc); }
#line 13758 "grammar.ec" /* yacc.c:1663  */
    break;

  case 172:
#line 1103 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = null; }
#line 13764 "grammar.ec" /* yacc.c:1663  */
    break;

  case 173:
#line 1104 "grammar.y" /* yacc.c:1663  */
    { memberAccessStack[defaultMemberAccess] = (yyvsp[-1].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[-1].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; }
#line 13770 "grammar.ec" /* yacc.c:1663  */
    break;

  case 174:
#line 1106 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[-3].declMode), (yyvsp[-1].id)); (yyval.classDef).loc = (yyloc); }
#line 13776 "grammar.ec" /* yacc.c:1663  */
    break;

  case 175:
#line 1110 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefFunction((yyvsp[0].classFunction)); (yyval.classDef).loc = (yyvsp[0].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
#line 13782 "grammar.ec" /* yacc.c:1663  */
    break;

  case 176:
#line 1113 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[0].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
#line 13788 "grammar.ec" /* yacc.c:1663  */
    break;

  case 177:
#line 1114 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[-1].list), (yyvsp[0].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
#line 13794 "grammar.ec" /* yacc.c:1663  */
    break;

  case 178:
#line 1115 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[-1].list), (yyvsp[0].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[-2].declMode); }
#line 13800 "grammar.ec" /* yacc.c:1663  */
    break;

  case 179:
#line 1116 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[0].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[-1].declMode); }
#line 13806 "grammar.ec" /* yacc.c:1663  */
    break;

  case 180:
#line 1117 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[0].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[-1].declMode); }
#line 13812 "grammar.ec" /* yacc.c:1663  */
    break;

  case 181:
#line 1118 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[0].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[-1].declMode); }
#line 13818 "grammar.ec" /* yacc.c:1663  */
    break;

  case 182:
#line 1119 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[-1].list), (yyvsp[0].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); }
#line 13824 "grammar.ec" /* yacc.c:1663  */
    break;

  case 183:
#line 1120 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[0].propertyWatch)); (yyval.classDef).loc = (yyloc); }
#line 13830 "grammar.ec" /* yacc.c:1663  */
    break;

  case 184:
#line 1121 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[0].id).string); FreeIdentifier((yyvsp[0].id)); }
#line 13836 "grammar.ec" /* yacc.c:1663  */
    break;

  case 185:
#line 1122 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[0].specifier).name); FreeSpecifier((yyvsp[0].specifier)); }
#line 13842 "grammar.ec" /* yacc.c:1663  */
    break;

  case 186:
#line 1123 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[0].id)); }
#line 13848 "grammar.ec" /* yacc.c:1663  */
    break;

  case 187:
#line 1124 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[0].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
#line 13854 "grammar.ec" /* yacc.c:1663  */
    break;

  case 188:
#line 1125 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[0].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
#line 13860 "grammar.ec" /* yacc.c:1663  */
    break;

  case 189:
#line 1126 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[0].list)); if((yyvsp[0].list)->last) ((MemberInit)(yyvsp[0].list)->last).loc.end = (yylsp[0]).end; (yyval.classDef).loc = (yyloc); }
#line 13866 "grammar.ec" /* yacc.c:1663  */
    break;

  case 190:
#line 1128 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[-1].instance))); (yyval.classDef).loc = (yyvsp[-1].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
#line 13872 "grammar.ec" /* yacc.c:1663  */
    break;

  case 191:
#line 1129 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[-1].instance))); (yyval.classDef).loc = (yyvsp[-1].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
#line 13878 "grammar.ec" /* yacc.c:1663  */
    break;

  case 192:
#line 1133 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefFunction((yyvsp[0].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[-1].declMode); }
#line 13884 "grammar.ec" /* yacc.c:1663  */
    break;

  case 193:
#line 1134 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[-1].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[-2].declMode); }
#line 13890 "grammar.ec" /* yacc.c:1663  */
    break;

  case 194:
#line 1135 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[-1].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[-2].declMode); }
#line 13896 "grammar.ec" /* yacc.c:1663  */
    break;

  case 195:
#line 1139 "grammar.y" /* yacc.c:1663  */
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[0].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; }
#line 13902 "grammar.ec" /* yacc.c:1663  */
    break;

  case 196:
#line 1143 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].classDef)); }
#line 13908 "grammar.ec" /* yacc.c:1663  */
    break;

  case 197:
#line 1144 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].classDef)); }
#line 13914 "grammar.ec" /* yacc.c:1663  */
    break;

  case 198:
#line 1145 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].classDef)); }
#line 13920 "grammar.ec" /* yacc.c:1663  */
    break;

  case 199:
#line 1149 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].classDef)); }
#line 13926 "grammar.ec" /* yacc.c:1663  */
    break;

  case 202:
#line 1152 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.list) = (yyvsp[-1].list); ListAdd((yyval.list), (yyvsp[0].classDef)); }
#line 13932 "grammar.ec" /* yacc.c:1663  */
    break;

  case 203:
#line 1153 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyval.list), (yyvsp[0].classDef)); }
#line 13938 "grammar.ec" /* yacc.c:1663  */
    break;

  case 204:
#line 1157 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[0].list), null); }
#line 13944 "grammar.ec" /* yacc.c:1663  */
    break;

  case 205:
#line 1158 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[-1].list), (yyvsp[0].declarator)); }
#line 13950 "grammar.ec" /* yacc.c:1663  */
    break;

  case 206:
#line 1170 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[0].list), null)); }
#line 13956 "grammar.ec" /* yacc.c:1663  */
    break;

  case 207:
#line 1171 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[-1].list), (yyvsp[0].declarator))); }
#line 13962 "grammar.ec" /* yacc.c:1663  */
    break;

  case 208:
#line 1175 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[0].id), null, null); }
#line 13968 "grammar.ec" /* yacc.c:1663  */
    break;

  case 209:
#line 1176 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[-2].id), null, (yyvsp[0].templateArgument)); }
#line 13974 "grammar.ec" /* yacc.c:1663  */
    break;

  case 210:
#line 1177 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[-2].id), (yyvsp[0].templateDatatype), null); }
#line 13980 "grammar.ec" /* yacc.c:1663  */
    break;

  case 211:
#line 1178 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[-4].id), (yyvsp[-2].templateDatatype), (yyvsp[0].templateArgument)); }
#line 13986 "grammar.ec" /* yacc.c:1663  */
    break;

  case 212:
#line 1179 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[0].string)), null, null); delete (yyvsp[0].string); }
#line 13992 "grammar.ec" /* yacc.c:1663  */
    break;

  case 213:
#line 1180 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[-2].string)), null, (yyvsp[0].templateArgument)); }
#line 13998 "grammar.ec" /* yacc.c:1663  */
    break;

  case 214:
#line 1181 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[-2].string)), (yyvsp[0].templateDatatype), null); }
#line 14004 "grammar.ec" /* yacc.c:1663  */
    break;

  case 215:
#line 1182 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[-4].string)), (yyvsp[-2].templateDatatype), (yyvsp[0].templateArgument)); }
#line 14010 "grammar.ec" /* yacc.c:1663  */
    break;

  case 216:
#line 1186 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[0].id)); }
#line 14016 "grammar.ec" /* yacc.c:1663  */
    break;

  case 217:
#line 1190 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[0].id), dataMember, null); }
#line 14022 "grammar.ec" /* yacc.c:1663  */
    break;

  case 218:
#line 1191 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[-2].id), dataMember, (yyvsp[0].templateArgument)); }
#line 14028 "grammar.ec" /* yacc.c:1663  */
    break;

  case 219:
#line 1195 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[0].exp)); }
#line 14034 "grammar.ec" /* yacc.c:1663  */
    break;

  case 220:
#line 1203 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[-2].id), MkTemplateDatatype((yyvsp[-3].list), null), (yyvsp[0].templateArgument)); }
#line 14040 "grammar.ec" /* yacc.c:1663  */
    break;

  case 221:
#line 1204 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[-2].id), MkTemplateDatatype((yyvsp[-4].list), (yyvsp[-3].declarator)), (yyvsp[0].templateArgument)); }
#line 14046 "grammar.ec" /* yacc.c:1663  */
    break;

  case 225:
#line 1214 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].templateParameter)); }
#line 14052 "grammar.ec" /* yacc.c:1663  */
    break;

  case 226:
#line 1215 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].templateParameter)); }
#line 14058 "grammar.ec" /* yacc.c:1663  */
    break;

  case 230:
#line 1222 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateArgument) = (yyvsp[0].templateArgument); (yyval.templateArgument).name = (yyvsp[-2].id); (yyval.templateArgument).loc = (yyloc); }
#line 14064 "grammar.ec" /* yacc.c:1663  */
    break;

  case 231:
#line 1223 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateArgument) = (yyvsp[0].templateArgument); (yyval.templateArgument).name = (yyvsp[-2].id); (yyval.templateArgument).loc = (yyloc); }
#line 14070 "grammar.ec" /* yacc.c:1663  */
    break;

  case 232:
#line 1224 "grammar.y" /* yacc.c:1663  */
    { (yyval.templateArgument) = (yyvsp[0].templateArgument); (yyval.templateArgument).name = (yyvsp[-2].id); (yyval.templateArgument).loc = (yyloc); }
#line 14076 "grammar.ec" /* yacc.c:1663  */
    break;

  case 233:
#line 1264 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].templateArgument)); }
#line 14082 "grammar.ec" /* yacc.c:1663  */
    break;

  case 234:
#line 1265 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].templateArgument)); }
#line 14088 "grammar.ec" /* yacc.c:1663  */
    break;

  case 235:
#line 1270 "grammar.y" /* yacc.c:1663  */
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   }
#line 14098 "grammar.ec" /* yacc.c:1663  */
    break;

  case 236:
#line 1277 "grammar.y" /* yacc.c:1663  */
    { (void)(yyvsp[-1].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[0].id)._class, (yyvsp[0].id).string); FreeIdentifier((yyvsp[0].id)); (yyval.symbol).nameLoc = (yylsp[0]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
#line 14104 "grammar.ec" /* yacc.c:1663  */
    break;

  case 237:
#line 1279 "grammar.y" /* yacc.c:1663  */
    {
      (void)(yyvsp[-1].context); (yyval.symbol) = DeclClass((yyvsp[0].specifier).nsSpec, (yyvsp[0].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[0]);
      FreeSpecifier((yyvsp[0].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
#line 14116 "grammar.ec" /* yacc.c:1663  */
    break;

  case 238:
#line 1286 "grammar.y" /* yacc.c:1663  */
    { (void)(yyvsp[-1].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[0].id)._class, (yyvsp[0].id).string); FreeIdentifier((yyvsp[-2].id)); FreeIdentifier((yyvsp[0].id)); (yyval.symbol).nameLoc = (yylsp[0]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
#line 14122 "grammar.ec" /* yacc.c:1663  */
    break;

  case 239:
#line 1287 "grammar.y" /* yacc.c:1663  */
    { (void)(yyvsp[-1].context); (yyval.symbol) = DeclClass((yyvsp[0].specifier).nsSpec, (yyvsp[0].specifier).name); FreeIdentifier((yyvsp[-2].id)); (yyval.symbol).nameLoc = (yylsp[0]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[0].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
#line 14128 "grammar.ec" /* yacc.c:1663  */
    break;

  case 240:
#line 1289 "grammar.y" /* yacc.c:1663  */
    { (void)(yyvsp[-4].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[-3].id)._class, (yyvsp[-3].id).string); (yyval.symbol).templateParams = (yyvsp[-1].list); FreeIdentifier((yyvsp[-3].id)); (yyval.symbol).nameLoc = (yylsp[-3]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
#line 14134 "grammar.ec" /* yacc.c:1663  */
    break;

  case 241:
#line 1291 "grammar.y" /* yacc.c:1663  */
    {
      (void)(yyvsp[-4].context); (yyval.symbol) = DeclClass((yyvsp[-3].specifier).nsSpec, (yyvsp[-3].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[-1].list);
      (yyval.symbol).nameLoc = (yylsp[-3]);
      FreeSpecifier((yyvsp[-3].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
#line 14147 "grammar.ec" /* yacc.c:1663  */
    break;

  case 242:
#line 1299 "grammar.y" /* yacc.c:1663  */
    { (void)(yyvsp[-4].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[-3].id)._class, (yyvsp[-3].id).string); (yyval.symbol).templateParams = (yyvsp[-1].list); FreeIdentifier((yyvsp[-5].id)); FreeIdentifier((yyvsp[-3].id)); (yyval.symbol).nameLoc = (yylsp[-3]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
#line 14153 "grammar.ec" /* yacc.c:1663  */
    break;

  case 243:
#line 1300 "grammar.y" /* yacc.c:1663  */
    { (void)(yyvsp[-4].context); (yyval.symbol) = DeclClass((yyvsp[-3].specifier).nsSpec, (yyvsp[-3].specifier).name); (yyval.symbol).templateParams = (yyvsp[-1].list); FreeIdentifier((yyvsp[-5].id)); (yyval.symbol).nameLoc = (yylsp[-3]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[-3].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
#line 14159 "grammar.ec" /* yacc.c:1663  */
    break;

  case 244:
#line 1305 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[-1]._class);
      }
#line 14168 "grammar.ec" /* yacc.c:1663  */
    break;

  case 245:
#line 1312 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class) = (yyvsp[-1]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[0]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14178 "grammar.ec" /* yacc.c:1663  */
    break;

  case 246:
#line 1319 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class) = MkClass((yyvsp[-2].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[-1]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14188 "grammar.ec" /* yacc.c:1663  */
    break;

  case 247:
#line 1325 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class) = (yyvsp[-2]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[-1]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14198 "grammar.ec" /* yacc.c:1663  */
    break;

  case 248:
#line 1332 "grammar.y" /* yacc.c:1663  */
    {
         (void)(yyvsp[-2].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[-1].id)._class, (yyvsp[-1].id).string), null, null); FreeIdentifier((yyvsp[-1].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14208 "grammar.ec" /* yacc.c:1663  */
    break;

  case 249:
#line 1338 "grammar.y" /* yacc.c:1663  */
    {
         (void)(yyvsp[-2].context); (yyval._class) = MkClass(DeclClass((yyvsp[-1].specifier).nsSpec, (yyvsp[-1].specifier).name), null, null); FreeSpecifier((yyvsp[-1].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14218 "grammar.ec" /* yacc.c:1663  */
    break;

  case 250:
#line 1347 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class) = MkClass((yyvsp[-2].symbol), (yyvsp[0].list), null);
      }
#line 14226 "grammar.ec" /* yacc.c:1663  */
    break;

  case 251:
#line 1354 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class) = MkClass((yyvsp[-2].symbol), null, (yyvsp[0].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[-1]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14236 "grammar.ec" /* yacc.c:1663  */
    break;

  case 252:
#line 1360 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class) = (yyvsp[-2]._class); (yyval._class).definitions = (yyvsp[0].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[-1]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14246 "grammar.ec" /* yacc.c:1663  */
    break;

  case 253:
#line 1366 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class) = MkClass((yyvsp[-2].symbol), null, (yyvsp[0].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[-1]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14256 "grammar.ec" /* yacc.c:1663  */
    break;

  case 254:
#line 1372 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class) = (yyvsp[-2]._class); (yyval._class).definitions = (yyvsp[0].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[-1]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14266 "grammar.ec" /* yacc.c:1663  */
    break;

  case 255:
#line 1378 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class) = MkClass((yyvsp[-2].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[-1]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14276 "grammar.ec" /* yacc.c:1663  */
    break;

  case 256:
#line 1384 "grammar.y" /* yacc.c:1663  */
    {
         (yyval._class) = (yyvsp[-2]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[-1]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
#line 14286 "grammar.ec" /* yacc.c:1663  */
    break;

  case 257:
#line 1395 "grammar.y" /* yacc.c:1663  */
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[0]); }
#line 14292 "grammar.ec" /* yacc.c:1663  */
    break;

  case 259:
#line 1401 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpBrackets((yyvsp[-1].list)); (yyval.exp).loc = (yyloc); }
#line 14298 "grammar.ec" /* yacc.c:1663  */
    break;

  case 260:
#line 1405 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpString((yyvsp[0].string)); delete (yyvsp[0].string); (yyval.exp).loc = (yyloc); }
#line 14304 "grammar.ec" /* yacc.c:1663  */
    break;

  case 261:
#line 1406 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpIntlString((yyvsp[0].string), null); delete (yyvsp[0].string); (yyval.exp).loc = (yyloc); }
#line 14310 "grammar.ec" /* yacc.c:1663  */
    break;

  case 262:
#line 1407 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpIntlString((yyvsp[0].string), (yyvsp[-2].string)); delete (yyvsp[-2].string); delete (yyvsp[0].string); (yyval.exp).loc = (yyloc); }
#line 14316 "grammar.ec" /* yacc.c:1663  */
    break;

  case 263:
#line 1411 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); }
#line 14322 "grammar.ec" /* yacc.c:1663  */
    break;

  case 264:
#line 1415 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpIdentifier((yyvsp[0].id)); (yyval.exp).loc = (yyloc); }
#line 14328 "grammar.ec" /* yacc.c:1663  */
    break;

  case 265:
#line 1416 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpInstance((yyvsp[0].instance)); (yyval.exp).loc = (yyloc); }
#line 14334 "grammar.ec" /* yacc.c:1663  */
    break;

  case 266:
#line 1417 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[-1].stmt)); (yyval.exp).loc = (yyloc); }
#line 14340 "grammar.ec" /* yacc.c:1663  */
    break;

  case 267:
#line 1418 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[-1].list)); (yyval.exp).loc = (yyloc); }
#line 14346 "grammar.ec" /* yacc.c:1663  */
    break;

  case 268:
#line 1419 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[-2].typeName), (yyvsp[0].initializer)); (yyval.exp).loc = (yyloc); }
#line 14352 "grammar.ec" /* yacc.c:1663  */
    break;

  case 269:
#line 1420 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[-5].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[-2].typeName), (yyvsp[0].initializer)))); (yyval.exp).loc = (yyloc); }
#line 14358 "grammar.ec" /* yacc.c:1663  */
    break;

  case 270:
#line 1422 "grammar.y" /* yacc.c:1663  */
    {
      char * constant = (yyvsp[-1].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[-1].exp), (yyvsp[0].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   }
#line 14375 "grammar.ec" /* yacc.c:1663  */
    break;

  case 271:
#line 1434 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = (yyvsp[0].exp); }
#line 14381 "grammar.ec" /* yacc.c:1663  */
    break;

  case 273:
#line 1436 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); }
#line 14387 "grammar.ec" /* yacc.c:1663  */
    break;

  case 274:
#line 1437 "grammar.y" /* yacc.c:1663  */
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[-1]).end; exp.loc.end = (yylsp[0]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); }
#line 14393 "grammar.ec" /* yacc.c:1663  */
    break;

  case 275:
#line 1438 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[-4].list),(yyvsp[-3].declarator)), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14399 "grammar.ec" /* yacc.c:1663  */
    break;

  case 276:
#line 1439 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[-4].list),(yyvsp[-3].declarator)), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14405 "grammar.ec" /* yacc.c:1663  */
    break;

  case 277:
#line 1440 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[-3].list),null), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14411 "grammar.ec" /* yacc.c:1663  */
    break;

  case 278:
#line 1441 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[-3].list),null), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14417 "grammar.ec" /* yacc.c:1663  */
    break;

  case 279:
#line 1442 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[-4].list),(yyvsp[-3].declarator)), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14423 "grammar.ec" /* yacc.c:1663  */
    break;

  case 280:
#line 1443 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[-4].list),(yyvsp[-3].declarator)), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14429 "grammar.ec" /* yacc.c:1663  */
    break;

  case 281:
#line 1444 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[-3].list),null), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14435 "grammar.ec" /* yacc.c:1663  */
    break;

  case 282:
#line 1445 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[-3].list),null), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14441 "grammar.ec" /* yacc.c:1663  */
    break;

  case 283:
#line 1446 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpRenew((yyvsp[-5].exp), MkTypeName((yyvsp[-4].list),(yyvsp[-3].declarator)), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14447 "grammar.ec" /* yacc.c:1663  */
    break;

  case 284:
#line 1447 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpRenew((yyvsp[-5].exp), MkTypeName((yyvsp[-4].list),(yyvsp[-3].declarator)), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14453 "grammar.ec" /* yacc.c:1663  */
    break;

  case 285:
#line 1448 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpRenew((yyvsp[-4].exp), MkTypeName((yyvsp[-3].list),null), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14459 "grammar.ec" /* yacc.c:1663  */
    break;

  case 286:
#line 1449 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpRenew((yyvsp[-4].exp), MkTypeName((yyvsp[-3].list),null), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14465 "grammar.ec" /* yacc.c:1663  */
    break;

  case 287:
#line 1450 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpRenew0((yyvsp[-5].exp), MkTypeName((yyvsp[-4].list),(yyvsp[-3].declarator)), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14471 "grammar.ec" /* yacc.c:1663  */
    break;

  case 288:
#line 1451 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpRenew0((yyvsp[-5].exp), MkTypeName((yyvsp[-4].list),(yyvsp[-3].declarator)), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14477 "grammar.ec" /* yacc.c:1663  */
    break;

  case 289:
#line 1452 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpRenew0((yyvsp[-4].exp), MkTypeName((yyvsp[-3].list),null), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14483 "grammar.ec" /* yacc.c:1663  */
    break;

  case 290:
#line 1453 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpRenew0((yyvsp[-4].exp), MkTypeName((yyvsp[-3].list),null), (yyvsp[-1].exp)); (yyval.exp).loc = (yyloc); }
#line 14489 "grammar.ec" /* yacc.c:1663  */
    break;

  case 291:
#line 1454 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpClass((yyvsp[-1].list), null); (yyval.exp).loc = (yyloc); }
#line 14495 "grammar.ec" /* yacc.c:1663  */
    break;

  case 292:
#line 1455 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpClass((yyvsp[-2].list), (yyvsp[-1].declarator)); (yyval.exp).loc = (yyloc); }
#line 14501 "grammar.ec" /* yacc.c:1663  */
    break;

  case 293:
#line 1456 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[-1].id).string)), null); FreeIdentifier((yyvsp[-1].id)); (yyval.exp).loc = (yyloc); }
#line 14507 "grammar.ec" /* yacc.c:1663  */
    break;

  case 294:
#line 1457 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpVaArg((yyvsp[-3].exp), (yyvsp[-1].typeName)); (yyval.exp).loc = (yyloc); }
#line 14513 "grammar.ec" /* yacc.c:1663  */
    break;

  case 295:
#line 1458 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpClassData((yyvsp[-1].id)); (yyval.exp).loc = (yyloc); }
#line 14519 "grammar.ec" /* yacc.c:1663  */
    break;

  case 300:
#line 1464 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpArray((yyvsp[-1].list)); (yyval.exp).loc = (yyloc); }
#line 14525 "grammar.ec" /* yacc.c:1663  */
    break;

  case 301:
#line 1465 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); }
#line 14531 "grammar.ec" /* yacc.c:1663  */
    break;

  case 302:
#line 1473 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpInstance((yyvsp[0].instance)); (yyval.exp).loc = (yyloc); }
#line 14537 "grammar.ec" /* yacc.c:1663  */
    break;

  case 303:
#line 1477 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpInstance((yyvsp[-1].instance)); (yyval.exp).loc = (yyloc); }
#line 14543 "grammar.ec" /* yacc.c:1663  */
    break;

  case 304:
#line 1481 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[0].list)); (yyval.exp).loc = (yyloc); }
#line 14549 "grammar.ec" /* yacc.c:1663  */
    break;

  case 305:
#line 1482 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpBrackets((yyvsp[0].list)); (yyval.exp).loc = (yyloc); }
#line 14555 "grammar.ec" /* yacc.c:1663  */
    break;

  case 307:
#line 1488 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpIndex((yyvsp[-3].exp), (yyvsp[-1].list)); (yyval.exp).loc = (yyloc); }
#line 14561 "grammar.ec" /* yacc.c:1663  */
    break;

  case 308:
#line 1489 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpIndex((yyvsp[-3].exp), (yyvsp[-1].list)); (yyval.exp).loc = (yyloc); }
#line 14567 "grammar.ec" /* yacc.c:1663  */
    break;

  case 309:
#line 1490 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCall((yyvsp[-2].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[-1]).start; (yyval.exp).call.argLoc.end = (yylsp[0]).end; (yyval.exp).loc = (yyloc); }
#line 14573 "grammar.ec" /* yacc.c:1663  */
    break;

  case 310:
#line 1491 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCall((yyvsp[-3].exp), (yyvsp[-1].list)); (yyval.exp).call.argLoc.start = (yylsp[-2]).start; (yyval.exp).call.argLoc.end = (yylsp[0]).end; (yyval.exp).loc = (yyloc); }
#line 14579 "grammar.ec" /* yacc.c:1663  */
    break;

  case 311:
#line 1492 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCall((yyvsp[-3].exp), (yyvsp[-1].list)); (yyval.exp).call.argLoc.start = (yylsp[-2]).start; (yyval.exp).call.argLoc.end = (yylsp[0]).end; (yyval.exp).loc = (yyloc); if((yyvsp[-1].list)->last) ((Expression)(yyvsp[-1].list)->last).loc.end = (yylsp[0]).start; }
#line 14585 "grammar.ec" /* yacc.c:1663  */
    break;

  case 312:
#line 1493 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpMember((yyvsp[-2].exp), (yyvsp[0].id)); (yyval.exp).loc = (yyloc); }
#line 14591 "grammar.ec" /* yacc.c:1663  */
    break;

  case 313:
#line 1494 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpPointer((yyvsp[-2].exp), (yyvsp[0].id)); (yyval.exp).loc = (yyloc); }
#line 14597 "grammar.ec" /* yacc.c:1663  */
    break;

  case 314:
#line 1495 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-1].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
#line 14603 "grammar.ec" /* yacc.c:1663  */
    break;

  case 315:
#line 1496 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-1].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
#line 14609 "grammar.ec" /* yacc.c:1663  */
    break;

  case 316:
#line 1498 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpIndex((yyvsp[-3].exp), (yyvsp[-1].list)); (yyval.exp).loc = (yyloc); }
#line 14615 "grammar.ec" /* yacc.c:1663  */
    break;

  case 317:
#line 1499 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpIndex((yyvsp[-3].exp), (yyvsp[-1].list)); (yyval.exp).loc = (yyloc); }
#line 14621 "grammar.ec" /* yacc.c:1663  */
    break;

  case 318:
#line 1500 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCall((yyvsp[-2].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[-1]).start; (yyval.exp).call.argLoc.end = (yylsp[0]).end; (yyval.exp).loc = (yyloc); }
#line 14627 "grammar.ec" /* yacc.c:1663  */
    break;

  case 319:
#line 1501 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCall((yyvsp[-3].exp), (yyvsp[-1].list)); (yyval.exp).call.argLoc.start = (yylsp[-2]).start; (yyval.exp).call.argLoc.end = (yylsp[0]).end;(yyval.exp).loc = (yyloc); }
#line 14633 "grammar.ec" /* yacc.c:1663  */
    break;

  case 320:
#line 1502 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpMember((yyvsp[-2].exp), (yyvsp[0].id)); (yyval.exp).loc = (yyloc); }
#line 14639 "grammar.ec" /* yacc.c:1663  */
    break;

  case 321:
#line 1503 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpPointer((yyvsp[-2].exp), (yyvsp[0].id)); (yyval.exp).loc = (yyloc); }
#line 14645 "grammar.ec" /* yacc.c:1663  */
    break;

  case 322:
#line 1504 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-1].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
#line 14651 "grammar.ec" /* yacc.c:1663  */
    break;

  case 323:
#line 1505 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-1].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
#line 14657 "grammar.ec" /* yacc.c:1663  */
    break;

  case 324:
#line 1532 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].exp)); }
#line 14663 "grammar.ec" /* yacc.c:1663  */
    break;

  case 325:
#line 1533 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].exp)); }
#line 14669 "grammar.ec" /* yacc.c:1663  */
    break;

  case 326:
#line 1534 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp));  }
#line 14675 "grammar.ec" /* yacc.c:1663  */
    break;

  case 327:
#line 1535 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp));  }
#line 14681 "grammar.ec" /* yacc.c:1663  */
    break;

  case 328:
#line 1539 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].exp)); }
#line 14687 "grammar.ec" /* yacc.c:1663  */
    break;

  case 329:
#line 1540 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].exp)); }
#line 14693 "grammar.ec" /* yacc.c:1663  */
    break;

  case 330:
#line 1541 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp));  }
#line 14699 "grammar.ec" /* yacc.c:1663  */
    break;

  case 331:
#line 1542 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp));  }
#line 14705 "grammar.ec" /* yacc.c:1663  */
    break;

  case 332:
#line 1543 "grammar.y" /* yacc.c:1663  */
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[0]).end; exp.loc.end = (yylsp[0]).end; (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), exp); }
#line 14711 "grammar.ec" /* yacc.c:1663  */
    break;

  case 333:
#line 1547 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14717 "grammar.ec" /* yacc.c:1663  */
    break;

  case 334:
#line 1548 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14723 "grammar.ec" /* yacc.c:1663  */
    break;

  case 335:
#line 1549 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14729 "grammar.ec" /* yacc.c:1663  */
    break;

  case 336:
#line 1550 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14735 "grammar.ec" /* yacc.c:1663  */
    break;

  case 337:
#line 1552 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14741 "grammar.ec" /* yacc.c:1663  */
    break;

  case 338:
#line 1553 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpTypeSize((yyvsp[-1].typeName)); (yyval.exp).loc = (yyloc); }
#line 14747 "grammar.ec" /* yacc.c:1663  */
    break;

  case 339:
#line 1554 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpClassSize((yyvsp[-1].specifier)); (yyval.exp).loc = (yyloc); }
#line 14753 "grammar.ec" /* yacc.c:1663  */
    break;

  case 340:
#line 1555 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpClassSize((yyvsp[-1].specifier)); (yyval.exp).loc = (yyloc); }
#line 14759 "grammar.ec" /* yacc.c:1663  */
    break;

  case 341:
#line 1558 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14765 "grammar.ec" /* yacc.c:1663  */
    break;

  case 342:
#line 1559 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpTypeAlign((yyvsp[-1].typeName)); (yyval.exp).loc = (yyloc); }
#line 14771 "grammar.ec" /* yacc.c:1663  */
    break;

  case 343:
#line 1561 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOffsetOf((yyvsp[-3].typeName), (yyvsp[-1].id)); (yyval.exp).loc = (yyloc); }
#line 14777 "grammar.ec" /* yacc.c:1663  */
    break;

  case 346:
#line 1575 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = '&'; }
#line 14783 "grammar.ec" /* yacc.c:1663  */
    break;

  case 347:
#line 1576 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = '*'; }
#line 14789 "grammar.ec" /* yacc.c:1663  */
    break;

  case 348:
#line 1577 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = '+'; }
#line 14795 "grammar.ec" /* yacc.c:1663  */
    break;

  case 349:
#line 1578 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = '-'; }
#line 14801 "grammar.ec" /* yacc.c:1663  */
    break;

  case 350:
#line 1579 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = '~'; }
#line 14807 "grammar.ec" /* yacc.c:1663  */
    break;

  case 351:
#line 1580 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = '!'; }
#line 14813 "grammar.ec" /* yacc.c:1663  */
    break;

  case 352:
#line 1581 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = DELETE; }
#line 14819 "grammar.ec" /* yacc.c:1663  */
    break;

  case 353:
#line 1582 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = _INCREF; }
#line 14825 "grammar.ec" /* yacc.c:1663  */
    break;

  case 355:
#line 1587 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[-2].typeName), (yyvsp[0].initializer)); (yyval.exp).loc = (yyloc); }
#line 14831 "grammar.ec" /* yacc.c:1663  */
    break;

  case 356:
#line 1588 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCast((yyvsp[-2].typeName), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14837 "grammar.ec" /* yacc.c:1663  */
    break;

  case 358:
#line 1593 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '*', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14843 "grammar.ec" /* yacc.c:1663  */
    break;

  case 359:
#line 1594 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '/', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14849 "grammar.ec" /* yacc.c:1663  */
    break;

  case 360:
#line 1595 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '%', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14855 "grammar.ec" /* yacc.c:1663  */
    break;

  case 361:
#line 1596 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '*', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14861 "grammar.ec" /* yacc.c:1663  */
    break;

  case 362:
#line 1597 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '/', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14867 "grammar.ec" /* yacc.c:1663  */
    break;

  case 363:
#line 1598 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '%', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14873 "grammar.ec" /* yacc.c:1663  */
    break;

  case 365:
#line 1603 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '+', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14879 "grammar.ec" /* yacc.c:1663  */
    break;

  case 366:
#line 1604 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '-', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14885 "grammar.ec" /* yacc.c:1663  */
    break;

  case 367:
#line 1605 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '+', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14891 "grammar.ec" /* yacc.c:1663  */
    break;

  case 368:
#line 1606 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '-', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14897 "grammar.ec" /* yacc.c:1663  */
    break;

  case 370:
#line 1611 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), LEFT_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14903 "grammar.ec" /* yacc.c:1663  */
    break;

  case 371:
#line 1612 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), RIGHT_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14909 "grammar.ec" /* yacc.c:1663  */
    break;

  case 372:
#line 1613 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), LEFT_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14915 "grammar.ec" /* yacc.c:1663  */
    break;

  case 373:
#line 1614 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), RIGHT_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14921 "grammar.ec" /* yacc.c:1663  */
    break;

  case 374:
#line 1619 "grammar.y" /* yacc.c:1663  */
    {
      (yyval.exp) = (yyvsp[-1].exp);
      skipErrors = true;
   }
#line 14930 "grammar.ec" /* yacc.c:1663  */
    break;

  case 376:
#line 1627 "grammar.y" /* yacc.c:1663  */
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[-1].exp), '<', (yyvsp[0].exp)/*$3*/); (yyval.exp).loc = (yyloc); }
#line 14936 "grammar.ec" /* yacc.c:1663  */
    break;

  case 377:
#line 1628 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '>', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14942 "grammar.ec" /* yacc.c:1663  */
    break;

  case 378:
#line 1629 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), LE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14948 "grammar.ec" /* yacc.c:1663  */
    break;

  case 379:
#line 1630 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), GE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14954 "grammar.ec" /* yacc.c:1663  */
    break;

  case 380:
#line 1631 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '<', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14960 "grammar.ec" /* yacc.c:1663  */
    break;

  case 381:
#line 1632 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '>', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14966 "grammar.ec" /* yacc.c:1663  */
    break;

  case 382:
#line 1633 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), LE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14972 "grammar.ec" /* yacc.c:1663  */
    break;

  case 383:
#line 1634 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), GE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14978 "grammar.ec" /* yacc.c:1663  */
    break;

  case 385:
#line 1639 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), EQ_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14984 "grammar.ec" /* yacc.c:1663  */
    break;

  case 386:
#line 1640 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), NE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14990 "grammar.ec" /* yacc.c:1663  */
    break;

  case 387:
#line 1641 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), EQ_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 14996 "grammar.ec" /* yacc.c:1663  */
    break;

  case 388:
#line 1642 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), NE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15002 "grammar.ec" /* yacc.c:1663  */
    break;

  case 389:
#line 1644 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), EQ_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15008 "grammar.ec" /* yacc.c:1663  */
    break;

  case 390:
#line 1645 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), NE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15014 "grammar.ec" /* yacc.c:1663  */
    break;

  case 391:
#line 1646 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), EQ_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15020 "grammar.ec" /* yacc.c:1663  */
    break;

  case 392:
#line 1647 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), NE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15026 "grammar.ec" /* yacc.c:1663  */
    break;

  case 394:
#line 1652 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '&', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15032 "grammar.ec" /* yacc.c:1663  */
    break;

  case 395:
#line 1653 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '&', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15038 "grammar.ec" /* yacc.c:1663  */
    break;

  case 396:
#line 1655 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '&', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15044 "grammar.ec" /* yacc.c:1663  */
    break;

  case 397:
#line 1656 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '&', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15050 "grammar.ec" /* yacc.c:1663  */
    break;

  case 399:
#line 1661 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '^', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15056 "grammar.ec" /* yacc.c:1663  */
    break;

  case 400:
#line 1662 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '^', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15062 "grammar.ec" /* yacc.c:1663  */
    break;

  case 401:
#line 1664 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '^', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15068 "grammar.ec" /* yacc.c:1663  */
    break;

  case 402:
#line 1665 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '^', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15074 "grammar.ec" /* yacc.c:1663  */
    break;

  case 404:
#line 1670 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '|', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15080 "grammar.ec" /* yacc.c:1663  */
    break;

  case 405:
#line 1671 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '|', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15086 "grammar.ec" /* yacc.c:1663  */
    break;

  case 406:
#line 1673 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '|', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15092 "grammar.ec" /* yacc.c:1663  */
    break;

  case 407:
#line 1674 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '|', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15098 "grammar.ec" /* yacc.c:1663  */
    break;

  case 409:
#line 1679 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), AND_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15104 "grammar.ec" /* yacc.c:1663  */
    break;

  case 410:
#line 1680 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), AND_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15110 "grammar.ec" /* yacc.c:1663  */
    break;

  case 412:
#line 1685 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), OR_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15116 "grammar.ec" /* yacc.c:1663  */
    break;

  case 413:
#line 1686 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), OR_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15122 "grammar.ec" /* yacc.c:1663  */
    break;

  case 415:
#line 1691 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15128 "grammar.ec" /* yacc.c:1663  */
    break;

  case 416:
#line 1692 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15134 "grammar.ec" /* yacc.c:1663  */
    break;

  case 417:
#line 1693 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15140 "grammar.ec" /* yacc.c:1663  */
    break;

  case 418:
#line 1694 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15146 "grammar.ec" /* yacc.c:1663  */
    break;

  case 419:
#line 1696 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15152 "grammar.ec" /* yacc.c:1663  */
    break;

  case 420:
#line 1697 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15158 "grammar.ec" /* yacc.c:1663  */
    break;

  case 421:
#line 1698 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15164 "grammar.ec" /* yacc.c:1663  */
    break;

  case 422:
#line 1699 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15170 "grammar.ec" /* yacc.c:1663  */
    break;

  case 423:
#line 1701 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15176 "grammar.ec" /* yacc.c:1663  */
    break;

  case 424:
#line 1702 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15182 "grammar.ec" /* yacc.c:1663  */
    break;

  case 425:
#line 1703 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15188 "grammar.ec" /* yacc.c:1663  */
    break;

  case 426:
#line 1704 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15194 "grammar.ec" /* yacc.c:1663  */
    break;

  case 427:
#line 1706 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15200 "grammar.ec" /* yacc.c:1663  */
    break;

  case 428:
#line 1707 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15206 "grammar.ec" /* yacc.c:1663  */
    break;

  case 429:
#line 1708 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15212 "grammar.ec" /* yacc.c:1663  */
    break;

  case 430:
#line 1709 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15218 "grammar.ec" /* yacc.c:1663  */
    break;

  case 432:
#line 1714 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15224 "grammar.ec" /* yacc.c:1663  */
    break;

  case 433:
#line 1715 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15230 "grammar.ec" /* yacc.c:1663  */
    break;

  case 434:
#line 1716 "grammar.y" /* yacc.c:1663  */
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15236 "grammar.ec" /* yacc.c:1663  */
    break;

  case 435:
#line 1717 "grammar.y" /* yacc.c:1663  */
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15242 "grammar.ec" /* yacc.c:1663  */
    break;

  case 436:
#line 1719 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15248 "grammar.ec" /* yacc.c:1663  */
    break;

  case 437:
#line 1720 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15254 "grammar.ec" /* yacc.c:1663  */
    break;

  case 438:
#line 1721 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15260 "grammar.ec" /* yacc.c:1663  */
    break;

  case 439:
#line 1722 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15266 "grammar.ec" /* yacc.c:1663  */
    break;

  case 440:
#line 1726 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = '='; }
#line 15272 "grammar.ec" /* yacc.c:1663  */
    break;

  case 441:
#line 1727 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = MUL_ASSIGN; }
#line 15278 "grammar.ec" /* yacc.c:1663  */
    break;

  case 442:
#line 1728 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = DIV_ASSIGN; }
#line 15284 "grammar.ec" /* yacc.c:1663  */
    break;

  case 443:
#line 1729 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = MOD_ASSIGN; }
#line 15290 "grammar.ec" /* yacc.c:1663  */
    break;

  case 444:
#line 1730 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = ADD_ASSIGN; }
#line 15296 "grammar.ec" /* yacc.c:1663  */
    break;

  case 445:
#line 1731 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = SUB_ASSIGN; }
#line 15302 "grammar.ec" /* yacc.c:1663  */
    break;

  case 446:
#line 1732 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = LEFT_ASSIGN; }
#line 15308 "grammar.ec" /* yacc.c:1663  */
    break;

  case 447:
#line 1733 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = RIGHT_ASSIGN; }
#line 15314 "grammar.ec" /* yacc.c:1663  */
    break;

  case 448:
#line 1734 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = AND_ASSIGN; }
#line 15320 "grammar.ec" /* yacc.c:1663  */
    break;

  case 449:
#line 1735 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = XOR_ASSIGN; }
#line 15326 "grammar.ec" /* yacc.c:1663  */
    break;

  case 450:
#line 1736 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = OR_ASSIGN; }
#line 15332 "grammar.ec" /* yacc.c:1663  */
    break;

  case 451:
#line 1740 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].exp)); }
#line 15338 "grammar.ec" /* yacc.c:1663  */
    break;

  case 452:
#line 1741 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp)); }
#line 15344 "grammar.ec" /* yacc.c:1663  */
    break;

  case 453:
#line 1742 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp)); }
#line 15350 "grammar.ec" /* yacc.c:1663  */
    break;

  case 455:
#line 1747 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].exp)); }
#line 15356 "grammar.ec" /* yacc.c:1663  */
    break;

  case 456:
#line 1748 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp)); }
#line 15362 "grammar.ec" /* yacc.c:1663  */
    break;

  case 457:
#line 1749 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp)); }
#line 15368 "grammar.ec" /* yacc.c:1663  */
    break;

  case 459:
#line 1754 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ }
#line 15374 "grammar.ec" /* yacc.c:1663  */
    break;

  case 461:
#line 1756 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpInstance((yyvsp[-1].instance)); (yyval.exp).loc = (yyloc); }
#line 15380 "grammar.ec" /* yacc.c:1663  */
    break;

  case 462:
#line 1758 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpPointer((yyvsp[-2].exp), null); (yyval.exp).loc = (yyloc); }
#line 15386 "grammar.ec" /* yacc.c:1663  */
    break;

  case 463:
#line 1759 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpPointer((yyvsp[-2].exp), null); (yyval.exp).loc = (yyloc); }
#line 15392 "grammar.ec" /* yacc.c:1663  */
    break;

  case 464:
#line 1761 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[-2].exp), (yyvsp[0].list)); (yyval.exp).call.argLoc.start = (yylsp[-1]).start; (yyval.exp).call.argLoc.end = (yylsp[0]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
#line 15398 "grammar.ec" /* yacc.c:1663  */
    break;

  case 465:
#line 1762 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCall((yyvsp[-2].exp), (yyvsp[0].list)); (yyval.exp).call.argLoc.start = (yylsp[-1]).start; (yyval.exp).call.argLoc.end = (yylsp[0]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
#line 15404 "grammar.ec" /* yacc.c:1663  */
    break;

  case 466:
#line 1767 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpMember((yyvsp[-2].exp), null); (yyval.exp).loc = (yyloc); }
#line 15410 "grammar.ec" /* yacc.c:1663  */
    break;

  case 467:
#line 1769 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCall((yyvsp[-2].exp), (yyvsp[0].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[-1]).start; (yyval.exp).call.argLoc.end = (yylsp[0]).end; (yyval.exp).call.argLoc.end.charPos++;}
#line 15416 "grammar.ec" /* yacc.c:1663  */
    break;

  case 468:
#line 1774 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpMember((yyvsp[-2].exp), null); (yyval.exp).loc = (yyloc); }
#line 15422 "grammar.ec" /* yacc.c:1663  */
    break;

  case 469:
#line 1802 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15428 "grammar.ec" /* yacc.c:1663  */
    break;

  case 470:
#line 1803 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15434 "grammar.ec" /* yacc.c:1663  */
    break;

  case 471:
#line 1804 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15440 "grammar.ec" /* yacc.c:1663  */
    break;

  case 472:
#line 1805 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15446 "grammar.ec" /* yacc.c:1663  */
    break;

  case 473:
#line 1807 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15452 "grammar.ec" /* yacc.c:1663  */
    break;

  case 474:
#line 1808 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpTypeSize((yyvsp[-2].typeName)); (yyval.exp).loc = (yyloc); }
#line 15458 "grammar.ec" /* yacc.c:1663  */
    break;

  case 475:
#line 1809 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpClassSize((yyvsp[-2].specifier)); (yyval.exp).loc = (yyloc); }
#line 15464 "grammar.ec" /* yacc.c:1663  */
    break;

  case 476:
#line 1810 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpClassSize((yyvsp[-2].specifier)); (yyval.exp).loc = (yyloc); }
#line 15470 "grammar.ec" /* yacc.c:1663  */
    break;

  case 477:
#line 1812 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15476 "grammar.ec" /* yacc.c:1663  */
    break;

  case 478:
#line 1813 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpTypeAlign((yyvsp[-2].typeName)); (yyval.exp).loc = (yyloc); }
#line 15482 "grammar.ec" /* yacc.c:1663  */
    break;

  case 482:
#line 1828 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCast((yyvsp[-2].typeName), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15488 "grammar.ec" /* yacc.c:1663  */
    break;

  case 484:
#line 1833 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '*', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15494 "grammar.ec" /* yacc.c:1663  */
    break;

  case 485:
#line 1834 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '/', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15500 "grammar.ec" /* yacc.c:1663  */
    break;

  case 486:
#line 1835 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '%', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15506 "grammar.ec" /* yacc.c:1663  */
    break;

  case 487:
#line 1836 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '*', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15512 "grammar.ec" /* yacc.c:1663  */
    break;

  case 488:
#line 1837 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '/', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15518 "grammar.ec" /* yacc.c:1663  */
    break;

  case 489:
#line 1838 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '%', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15524 "grammar.ec" /* yacc.c:1663  */
    break;

  case 491:
#line 1843 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '+', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15530 "grammar.ec" /* yacc.c:1663  */
    break;

  case 492:
#line 1847 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '-', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15536 "grammar.ec" /* yacc.c:1663  */
    break;

  case 493:
#line 1851 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '+', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15542 "grammar.ec" /* yacc.c:1663  */
    break;

  case 494:
#line 1855 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '-', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15548 "grammar.ec" /* yacc.c:1663  */
    break;

  case 496:
#line 1863 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), LEFT_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15554 "grammar.ec" /* yacc.c:1663  */
    break;

  case 497:
#line 1864 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), RIGHT_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15560 "grammar.ec" /* yacc.c:1663  */
    break;

  case 498:
#line 1865 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), LEFT_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15566 "grammar.ec" /* yacc.c:1663  */
    break;

  case 499:
#line 1866 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), RIGHT_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15572 "grammar.ec" /* yacc.c:1663  */
    break;

  case 501:
#line 1872 "grammar.y" /* yacc.c:1663  */
    {
      if((yyvsp[-1].exp).type == identifierExp)
      {
         _DeclClass((yyvsp[-1].exp).identifier._class, (yyvsp[-1].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[-1].exp));
         FreeExpression((yyvsp[0].exp));

         fileInput.Seek((yylsp[-1]).start.pos, start);
         resetScannerPos(&(yylsp[-1]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[-1].exp), '<', (yyvsp[0].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   }
#line 15619 "grammar.ec" /* yacc.c:1663  */
    break;

  case 502:
#line 1914 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '>', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15625 "grammar.ec" /* yacc.c:1663  */
    break;

  case 503:
#line 1915 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), LE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15631 "grammar.ec" /* yacc.c:1663  */
    break;

  case 504:
#line 1916 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), GE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15637 "grammar.ec" /* yacc.c:1663  */
    break;

  case 505:
#line 1917 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '<', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15643 "grammar.ec" /* yacc.c:1663  */
    break;

  case 506:
#line 1918 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '>', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15649 "grammar.ec" /* yacc.c:1663  */
    break;

  case 507:
#line 1919 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), LE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15655 "grammar.ec" /* yacc.c:1663  */
    break;

  case 508:
#line 1920 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), GE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15661 "grammar.ec" /* yacc.c:1663  */
    break;

  case 510:
#line 1925 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), EQ_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15667 "grammar.ec" /* yacc.c:1663  */
    break;

  case 511:
#line 1926 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), NE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15673 "grammar.ec" /* yacc.c:1663  */
    break;

  case 512:
#line 1927 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), EQ_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15679 "grammar.ec" /* yacc.c:1663  */
    break;

  case 513:
#line 1928 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), NE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15685 "grammar.ec" /* yacc.c:1663  */
    break;

  case 514:
#line 1935 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), EQ_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15691 "grammar.ec" /* yacc.c:1663  */
    break;

  case 515:
#line 1936 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), NE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15697 "grammar.ec" /* yacc.c:1663  */
    break;

  case 516:
#line 1937 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), EQ_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15703 "grammar.ec" /* yacc.c:1663  */
    break;

  case 517:
#line 1938 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), NE_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15709 "grammar.ec" /* yacc.c:1663  */
    break;

  case 519:
#line 1943 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '&', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15715 "grammar.ec" /* yacc.c:1663  */
    break;

  case 520:
#line 1944 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '&', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15721 "grammar.ec" /* yacc.c:1663  */
    break;

  case 521:
#line 1946 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '&', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15727 "grammar.ec" /* yacc.c:1663  */
    break;

  case 522:
#line 1947 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '&', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15733 "grammar.ec" /* yacc.c:1663  */
    break;

  case 524:
#line 1952 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '^', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15739 "grammar.ec" /* yacc.c:1663  */
    break;

  case 525:
#line 1953 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '^', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15745 "grammar.ec" /* yacc.c:1663  */
    break;

  case 526:
#line 1955 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '^', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15751 "grammar.ec" /* yacc.c:1663  */
    break;

  case 527:
#line 1956 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '^', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15757 "grammar.ec" /* yacc.c:1663  */
    break;

  case 529:
#line 1961 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '|', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15763 "grammar.ec" /* yacc.c:1663  */
    break;

  case 530:
#line 1962 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '|', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15769 "grammar.ec" /* yacc.c:1663  */
    break;

  case 531:
#line 1964 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '|', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15775 "grammar.ec" /* yacc.c:1663  */
    break;

  case 532:
#line 1965 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), '|', (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15781 "grammar.ec" /* yacc.c:1663  */
    break;

  case 534:
#line 1970 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), AND_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15787 "grammar.ec" /* yacc.c:1663  */
    break;

  case 535:
#line 1971 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), AND_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15793 "grammar.ec" /* yacc.c:1663  */
    break;

  case 537:
#line 1976 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), OR_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15799 "grammar.ec" /* yacc.c:1663  */
    break;

  case 538:
#line 1977 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), OR_OP, (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15805 "grammar.ec" /* yacc.c:1663  */
    break;

  case 540:
#line 1982 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15811 "grammar.ec" /* yacc.c:1663  */
    break;

  case 541:
#line 1983 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15817 "grammar.ec" /* yacc.c:1663  */
    break;

  case 542:
#line 1984 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15823 "grammar.ec" /* yacc.c:1663  */
    break;

  case 543:
#line 1985 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15829 "grammar.ec" /* yacc.c:1663  */
    break;

  case 544:
#line 1986 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-3].exp), (yyvsp[-1].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[-1]); }
#line 15835 "grammar.ec" /* yacc.c:1663  */
    break;

  case 545:
#line 1987 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-3].exp), (yyvsp[-1].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[-1]); }
#line 15841 "grammar.ec" /* yacc.c:1663  */
    break;

  case 546:
#line 1988 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-3].exp), (yyvsp[-1].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[-1]); }
#line 15847 "grammar.ec" /* yacc.c:1663  */
    break;

  case 547:
#line 1989 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-3].exp), (yyvsp[-1].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[-1]); }
#line 15853 "grammar.ec" /* yacc.c:1663  */
    break;

  case 548:
#line 1991 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15859 "grammar.ec" /* yacc.c:1663  */
    break;

  case 549:
#line 1992 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15865 "grammar.ec" /* yacc.c:1663  */
    break;

  case 550:
#line 1993 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15871 "grammar.ec" /* yacc.c:1663  */
    break;

  case 551:
#line 1994 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15877 "grammar.ec" /* yacc.c:1663  */
    break;

  case 552:
#line 1995 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-3].exp), (yyvsp[-1].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[-1]); }
#line 15883 "grammar.ec" /* yacc.c:1663  */
    break;

  case 553:
#line 1996 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-3].exp), (yyvsp[-1].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[-1]); }
#line 15889 "grammar.ec" /* yacc.c:1663  */
    break;

  case 554:
#line 1997 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-3].exp), (yyvsp[-1].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[-1]); }
#line 15895 "grammar.ec" /* yacc.c:1663  */
    break;

  case 555:
#line 1998 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-3].exp), (yyvsp[-1].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[-1]); }
#line 15901 "grammar.ec" /* yacc.c:1663  */
    break;

  case 556:
#line 2000 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15907 "grammar.ec" /* yacc.c:1663  */
    break;

  case 557:
#line 2001 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15913 "grammar.ec" /* yacc.c:1663  */
    break;

  case 558:
#line 2002 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15919 "grammar.ec" /* yacc.c:1663  */
    break;

  case 559:
#line 2003 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15925 "grammar.ec" /* yacc.c:1663  */
    break;

  case 560:
#line 2005 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15931 "grammar.ec" /* yacc.c:1663  */
    break;

  case 561:
#line 2006 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15937 "grammar.ec" /* yacc.c:1663  */
    break;

  case 562:
#line 2007 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15943 "grammar.ec" /* yacc.c:1663  */
    break;

  case 563:
#line 2008 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpCondition((yyvsp[-4].exp), (yyvsp[-2].list), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15949 "grammar.ec" /* yacc.c:1663  */
    break;

  case 564:
#line 2011 "grammar.y" /* yacc.c:1663  */
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[-2].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[-1]);
         (yyval.exp).cond.elseExp.loc = (yylsp[0]);
      }
#line 15961 "grammar.ec" /* yacc.c:1663  */
    break;

  case 565:
#line 2019 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.exp) = MkExpCondition((yyvsp[-2].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[-1]); (yyval.exp).cond.elseExp.loc = (yylsp[0]);
      }
#line 15969 "grammar.ec" /* yacc.c:1663  */
    break;

  case 566:
#line 2023 "grammar.y" /* yacc.c:1663  */
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[-1].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[0]); (yyval.exp).cond.elseExp.loc = (yylsp[0]);
      }
#line 15978 "grammar.ec" /* yacc.c:1663  */
    break;

  case 567:
#line 2028 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.exp) = MkExpCondition((yyvsp[-1].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[0]); (yyval.exp).cond.elseExp.loc = (yylsp[0]);
      }
#line 15986 "grammar.ec" /* yacc.c:1663  */
    break;

  case 569:
#line 2035 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15992 "grammar.ec" /* yacc.c:1663  */
    break;

  case 570:
#line 2039 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 15998 "grammar.ec" /* yacc.c:1663  */
    break;

  case 571:
#line 2044 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 16004 "grammar.ec" /* yacc.c:1663  */
    break;

  case 572:
#line 2045 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpOp((yyvsp[-2].exp), (yyvsp[-1].i), (yyvsp[0].exp)); (yyval.exp).loc = (yyloc); }
#line 16010 "grammar.ec" /* yacc.c:1663  */
    break;

  case 573:
#line 2049 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].exp)); }
#line 16016 "grammar.ec" /* yacc.c:1663  */
    break;

  case 574:
#line 2050 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[-1].exp)); }
#line 16022 "grammar.ec" /* yacc.c:1663  */
    break;

  case 575:
#line 2051 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp)); }
#line 16028 "grammar.ec" /* yacc.c:1663  */
    break;

  case 576:
#line 2052 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp)); }
#line 16034 "grammar.ec" /* yacc.c:1663  */
    break;

  case 577:
#line 2058 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.list) = (yyvsp[-1].list); FreeList((yyvsp[0].list), FreeExpression); }
#line 16040 "grammar.ec" /* yacc.c:1663  */
    break;

  case 578:
#line 2059 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); FreeList((yyvsp[0].list), FreeExpression); }
#line 16046 "grammar.ec" /* yacc.c:1663  */
    break;

  case 579:
#line 2060 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); FreeList((yyvsp[0].list), FreeExpression); }
#line 16052 "grammar.ec" /* yacc.c:1663  */
    break;

  case 580:
#line 2064 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].exp)); }
#line 16058 "grammar.ec" /* yacc.c:1663  */
    break;

  case 581:
#line 2065 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[-1].exp)); }
#line 16064 "grammar.ec" /* yacc.c:1663  */
    break;

  case 582:
#line 2066 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp)); }
#line 16070 "grammar.ec" /* yacc.c:1663  */
    break;

  case 583:
#line 2067 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].exp)); }
#line 16076 "grammar.ec" /* yacc.c:1663  */
    break;

  case 586:
#line 2077 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(TYPEDEF); }
#line 16082 "grammar.ec" /* yacc.c:1663  */
    break;

  case 587:
#line 2078 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(EXTERN); }
#line 16088 "grammar.ec" /* yacc.c:1663  */
    break;

  case 588:
#line 2079 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(STATIC); }
#line 16094 "grammar.ec" /* yacc.c:1663  */
    break;

  case 589:
#line 2080 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(THREAD); }
#line 16100 "grammar.ec" /* yacc.c:1663  */
    break;

  case 590:
#line 2081 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(AUTO); }
#line 16106 "grammar.ec" /* yacc.c:1663  */
    break;

  case 591:
#line 2082 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(REGISTER); }
#line 16112 "grammar.ec" /* yacc.c:1663  */
    break;

  case 592:
#line 2083 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
#line 16118 "grammar.ec" /* yacc.c:1663  */
    break;

  case 593:
#line 2087 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; }
#line 16124 "grammar.ec" /* yacc.c:1663  */
    break;

  case 594:
#line 2088 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(EXTERN); }
#line 16130 "grammar.ec" /* yacc.c:1663  */
    break;

  case 595:
#line 2089 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; }
#line 16136 "grammar.ec" /* yacc.c:1663  */
    break;

  case 596:
#line 2090 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(THREAD); }
#line 16142 "grammar.ec" /* yacc.c:1663  */
    break;

  case 597:
#line 2091 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(AUTO); }
#line 16148 "grammar.ec" /* yacc.c:1663  */
    break;

  case 598:
#line 2092 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(REGISTER); }
#line 16154 "grammar.ec" /* yacc.c:1663  */
    break;

  case 599:
#line 2093 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
#line 16160 "grammar.ec" /* yacc.c:1663  */
    break;

  case 600:
#line 2097 "grammar.y" /* yacc.c:1663  */
    { (yyval.enumerator) = MkEnumerator((yyvsp[0].id), null, null); }
#line 16166 "grammar.ec" /* yacc.c:1663  */
    break;

  case 601:
#line 2098 "grammar.y" /* yacc.c:1663  */
    { (yyval.enumerator) = MkEnumerator((yyvsp[-2].id), (yyvsp[0].exp), null); }
#line 16172 "grammar.ec" /* yacc.c:1663  */
    break;

  case 602:
#line 2099 "grammar.y" /* yacc.c:1663  */
    { (yyval.enumerator) = MkEnumerator((yyvsp[-2].id), (yyvsp[0].exp), null); }
#line 16178 "grammar.ec" /* yacc.c:1663  */
    break;

  case 603:
#line 2100 "grammar.y" /* yacc.c:1663  */
    { (yyval.enumerator) = MkEnumerator((yyvsp[-1].id), null, (yyvsp[0].list)); }
#line 16184 "grammar.ec" /* yacc.c:1663  */
    break;

  case 604:
#line 2101 "grammar.y" /* yacc.c:1663  */
    { (yyval.enumerator) = MkEnumerator((yyvsp[-3].id), (yyvsp[0].exp), (yyvsp[-2].list)); }
#line 16190 "grammar.ec" /* yacc.c:1663  */
    break;

  case 605:
#line 2102 "grammar.y" /* yacc.c:1663  */
    { (yyval.enumerator) = MkEnumerator((yyvsp[-3].id), (yyvsp[0].exp), (yyvsp[-2].list)); }
#line 16196 "grammar.ec" /* yacc.c:1663  */
    break;

  case 606:
#line 2106 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].enumerator)); }
#line 16202 "grammar.ec" /* yacc.c:1663  */
    break;

  case 607:
#line 2107 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].enumerator)); }
#line 16208 "grammar.ec" /* yacc.c:1663  */
    break;

  case 609:
#line 2112 "grammar.y" /* yacc.c:1663  */
    { memberAccessStack[++defaultMemberAccess] = publicAccess; }
#line 16214 "grammar.ec" /* yacc.c:1663  */
    break;

  case 610:
#line 2116 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[0].id), null); POP_DEFAULT_ACCESS; }
#line 16220 "grammar.ec" /* yacc.c:1663  */
    break;

  case 611:
#line 2117 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[0].specifier).name), null); POP_DEFAULT_ACCESS; }
#line 16226 "grammar.ec" /* yacc.c:1663  */
    break;

  case 612:
#line 2121 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[-1].specifier); }
#line 16232 "grammar.ec" /* yacc.c:1663  */
    break;

  case 613:
#line 2122 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-2].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16238 "grammar.ec" /* yacc.c:1663  */
    break;

  case 614:
#line 2123 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[-2].specifier).name), null); FreeSpecifier((yyvsp[-2].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16244 "grammar.ec" /* yacc.c:1663  */
    break;

  case 615:
#line 2127 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(null, (yyvsp[0].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16250 "grammar.ec" /* yacc.c:1663  */
    break;

  case 616:
#line 2128 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16256 "grammar.ec" /* yacc.c:1663  */
    break;

  case 617:
#line 2130 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-2].id), (yyvsp[0].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16262 "grammar.ec" /* yacc.c:1663  */
    break;

  case 618:
#line 2131 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-3].id), (yyvsp[-1].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16268 "grammar.ec" /* yacc.c:1663  */
    break;

  case 619:
#line 2132 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-2].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16274 "grammar.ec" /* yacc.c:1663  */
    break;

  case 620:
#line 2133 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-4].id), (yyvsp[-2].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[0].list);  POP_DEFAULT_ACCESS; }
#line 16280 "grammar.ec" /* yacc.c:1663  */
    break;

  case 621:
#line 2134 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-4].id), (yyvsp[-2].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[0].list);  POP_DEFAULT_ACCESS; }
#line 16286 "grammar.ec" /* yacc.c:1663  */
    break;

  case 622:
#line 2136 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[-2].specifier).name), (yyvsp[0].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[-2].specifier)); POP_DEFAULT_ACCESS; }
#line 16292 "grammar.ec" /* yacc.c:1663  */
    break;

  case 623:
#line 2137 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[-3].specifier).name), (yyvsp[-1].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[-3].specifier)); POP_DEFAULT_ACCESS; }
#line 16298 "grammar.ec" /* yacc.c:1663  */
    break;

  case 624:
#line 2138 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[-2].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[-2].specifier)); POP_DEFAULT_ACCESS; }
#line 16304 "grammar.ec" /* yacc.c:1663  */
    break;

  case 625:
#line 2139 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[-4].specifier).name), (yyvsp[-2].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[0].list); FreeSpecifier((yyvsp[-4].specifier)); POP_DEFAULT_ACCESS; }
#line 16310 "grammar.ec" /* yacc.c:1663  */
    break;

  case 626:
#line 2140 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[-4].specifier).name), (yyvsp[-2].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[0].list); FreeSpecifier((yyvsp[-4].specifier)); POP_DEFAULT_ACCESS; }
#line 16316 "grammar.ec" /* yacc.c:1663  */
    break;

  case 627:
#line 2142 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-3].id), (yyvsp[-1].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16322 "grammar.ec" /* yacc.c:1663  */
    break;

  case 628:
#line 2143 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[-3].specifier).name), (yyvsp[-1].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[-3].specifier)); POP_DEFAULT_ACCESS; }
#line 16328 "grammar.ec" /* yacc.c:1663  */
    break;

  case 629:
#line 2147 "grammar.y" /* yacc.c:1663  */
    { (yyval.id) = (yyvsp[0].id); if(declMode) DeclClassAddNameSpace((yyvsp[0].id)._class, (yyvsp[0].id).string); }
#line 16334 "grammar.ec" /* yacc.c:1663  */
    break;

  case 630:
#line 2148 "grammar.y" /* yacc.c:1663  */
    { (yyval.id) = MkIdentifier((yyvsp[0].specifier).name); if(declMode) DeclClass((yyvsp[0].specifier).nsSpec, (yyvsp[0].specifier).name); FreeSpecifier((yyvsp[0].specifier)); }
#line 16340 "grammar.ec" /* yacc.c:1663  */
    break;

  case 631:
#line 2152 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-1].specifier); (yyval.specifier).loc = (yyloc); }
#line 16346 "grammar.ec" /* yacc.c:1663  */
    break;

  case 632:
#line 2153 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-4].id), null); (yyval.specifier).baseSpecs = (yyvsp[-2].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16352 "grammar.ec" /* yacc.c:1663  */
    break;

  case 633:
#line 2154 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-2].id), null); POP_DEFAULT_ACCESS; }
#line 16358 "grammar.ec" /* yacc.c:1663  */
    break;

  case 634:
#line 2158 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-4].id), (yyvsp[0].list)); (yyval.specifier).baseSpecs = (yyvsp[-2].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16364 "grammar.ec" /* yacc.c:1663  */
    break;

  case 635:
#line 2159 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-5].id), (yyvsp[-1].list)); (yyval.specifier).baseSpecs = (yyvsp[-3].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16370 "grammar.ec" /* yacc.c:1663  */
    break;

  case 636:
#line 2160 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-4].id), null); (yyval.specifier).baseSpecs = (yyvsp[-2].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16376 "grammar.ec" /* yacc.c:1663  */
    break;

  case 637:
#line 2161 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-6].id), (yyvsp[-2].list)); (yyval.specifier).baseSpecs = (yyvsp[-4].list); (yyval.specifier).definitions = (yyvsp[0].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16382 "grammar.ec" /* yacc.c:1663  */
    break;

  case 638:
#line 2162 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-6].id), (yyvsp[-2].list)); (yyval.specifier).baseSpecs = (yyvsp[-4].list); (yyval.specifier).definitions = (yyvsp[0].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16388 "grammar.ec" /* yacc.c:1663  */
    break;

  case 639:
#line 2163 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-7].id), (yyvsp[-3].list)); (yyval.specifier).baseSpecs = (yyvsp[-5].list); (yyval.specifier).definitions = (yyvsp[0].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16394 "grammar.ec" /* yacc.c:1663  */
    break;

  case 640:
#line 2164 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-7].id), (yyvsp[-3].list)); (yyval.specifier).baseSpecs = (yyvsp[-5].list); (yyval.specifier).definitions = (yyvsp[0].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16400 "grammar.ec" /* yacc.c:1663  */
    break;

  case 641:
#line 2165 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-6].id), null); (yyval.specifier).baseSpecs = (yyvsp[-4].list); (yyval.specifier).definitions = (yyvsp[0].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16406 "grammar.ec" /* yacc.c:1663  */
    break;

  case 642:
#line 2166 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-6].id), null); (yyval.specifier).baseSpecs = (yyvsp[-4].list); (yyval.specifier).definitions = (yyvsp[0].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16412 "grammar.ec" /* yacc.c:1663  */
    break;

  case 643:
#line 2168 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(null, (yyvsp[0].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16418 "grammar.ec" /* yacc.c:1663  */
    break;

  case 644:
#line 2169 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16424 "grammar.ec" /* yacc.c:1663  */
    break;

  case 645:
#line 2171 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-2].id), (yyvsp[0].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16430 "grammar.ec" /* yacc.c:1663  */
    break;

  case 646:
#line 2172 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-3].id), (yyvsp[-1].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16436 "grammar.ec" /* yacc.c:1663  */
    break;

  case 647:
#line 2173 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-2].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16442 "grammar.ec" /* yacc.c:1663  */
    break;

  case 648:
#line 2174 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-4].id), (yyvsp[-2].list)); (yyval.specifier).definitions = (yyvsp[0].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16448 "grammar.ec" /* yacc.c:1663  */
    break;

  case 649:
#line 2175 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-4].id), (yyvsp[-2].list)); (yyval.specifier).definitions = (yyvsp[0].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16454 "grammar.ec" /* yacc.c:1663  */
    break;

  case 650:
#line 2177 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-5].id), (yyvsp[-1].list)); (yyval.specifier).baseSpecs = (yyvsp[-3].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16460 "grammar.ec" /* yacc.c:1663  */
    break;

  case 651:
#line 2178 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-6].id), (yyvsp[-2].list)); (yyval.specifier).baseSpecs = (yyvsp[-4].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16466 "grammar.ec" /* yacc.c:1663  */
    break;

  case 652:
#line 2179 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-5].id), null); (yyval.specifier).baseSpecs = (yyvsp[-3].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16472 "grammar.ec" /* yacc.c:1663  */
    break;

  case 653:
#line 2180 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkEnum((yyvsp[-3].id), (yyvsp[-1].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16478 "grammar.ec" /* yacc.c:1663  */
    break;

  case 658:
#line 2194 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[0].extDecl)); }
#line 16484 "grammar.ec" /* yacc.c:1663  */
    break;

  case 659:
#line 2198 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(CONST); }
#line 16490 "grammar.ec" /* yacc.c:1663  */
    break;

  case 660:
#line 2199 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(VOLATILE); }
#line 16496 "grammar.ec" /* yacc.c:1663  */
    break;

  case 661:
#line 2200 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[0].specifier); }
#line 16502 "grammar.ec" /* yacc.c:1663  */
    break;

  case 662:
#line 2205 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 16508 "grammar.ec" /* yacc.c:1663  */
    break;

  case 663:
#line 2206 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier));  }
#line 16514 "grammar.ec" /* yacc.c:1663  */
    break;

  case 664:
#line 2210 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(VOID); }
#line 16520 "grammar.ec" /* yacc.c:1663  */
    break;

  case 665:
#line 2211 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(CHAR); }
#line 16526 "grammar.ec" /* yacc.c:1663  */
    break;

  case 666:
#line 2212 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(SHORT); }
#line 16532 "grammar.ec" /* yacc.c:1663  */
    break;

  case 667:
#line 2213 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(INT); }
#line 16538 "grammar.ec" /* yacc.c:1663  */
    break;

  case 668:
#line 2214 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(UINT); }
#line 16544 "grammar.ec" /* yacc.c:1663  */
    break;

  case 669:
#line 2215 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(INT64); }
#line 16550 "grammar.ec" /* yacc.c:1663  */
    break;

  case 670:
#line 2216 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(INT128); }
#line 16556 "grammar.ec" /* yacc.c:1663  */
    break;

  case 671:
#line 2217 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
#line 16562 "grammar.ec" /* yacc.c:1663  */
    break;

  case 672:
#line 2218 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(VALIST); }
#line 16568 "grammar.ec" /* yacc.c:1663  */
    break;

  case 673:
#line 2219 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(LONG); }
#line 16574 "grammar.ec" /* yacc.c:1663  */
    break;

  case 674:
#line 2220 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(FLOAT); }
#line 16580 "grammar.ec" /* yacc.c:1663  */
    break;

  case 675:
#line 2221 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
#line 16586 "grammar.ec" /* yacc.c:1663  */
    break;

  case 676:
#line 2222 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(SIGNED); }
#line 16592 "grammar.ec" /* yacc.c:1663  */
    break;

  case 677:
#line 2223 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
#line 16598 "grammar.ec" /* yacc.c:1663  */
    break;

  case 678:
#line 2224 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
#line 16604 "grammar.ec" /* yacc.c:1663  */
    break;

  case 682:
#line 2228 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[-1].exp)); }
#line 16610 "grammar.ec" /* yacc.c:1663  */
    break;

  case 683:
#line 2229 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[-1].specifier)); }
#line 16616 "grammar.ec" /* yacc.c:1663  */
    break;

  case 684:
#line 2230 "grammar.y" /* yacc.c:1663  */
    { _DeclClass((yyvsp[-1].id)._class, (yyvsp[-1].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[-1].id).string)); FreeIdentifier((yyvsp[-1].id)); }
#line 16622 "grammar.ec" /* yacc.c:1663  */
    break;

  case 685:
#line 2231 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
#line 16628 "grammar.ec" /* yacc.c:1663  */
    break;

  case 686:
#line 2232 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); }
#line 16634 "grammar.ec" /* yacc.c:1663  */
    break;

  case 687:
#line 2233 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); }
#line 16640 "grammar.ec" /* yacc.c:1663  */
    break;

  case 688:
#line 2234 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(_BOOL); }
#line 16646 "grammar.ec" /* yacc.c:1663  */
    break;

  case 689:
#line 2235 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(BOOL); }
#line 16652 "grammar.ec" /* yacc.c:1663  */
    break;

  case 690:
#line 2236 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
#line 16658 "grammar.ec" /* yacc.c:1663  */
    break;

  case 691:
#line 2237 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
#line 16664 "grammar.ec" /* yacc.c:1663  */
    break;

  case 692:
#line 2241 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(VOID); }
#line 16670 "grammar.ec" /* yacc.c:1663  */
    break;

  case 693:
#line 2242 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(CHAR); }
#line 16676 "grammar.ec" /* yacc.c:1663  */
    break;

  case 694:
#line 2243 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(SHORT); }
#line 16682 "grammar.ec" /* yacc.c:1663  */
    break;

  case 695:
#line 2244 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(INT); }
#line 16688 "grammar.ec" /* yacc.c:1663  */
    break;

  case 696:
#line 2245 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(UINT); }
#line 16694 "grammar.ec" /* yacc.c:1663  */
    break;

  case 697:
#line 2246 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(INT64); }
#line 16700 "grammar.ec" /* yacc.c:1663  */
    break;

  case 698:
#line 2247 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(INT128); }
#line 16706 "grammar.ec" /* yacc.c:1663  */
    break;

  case 699:
#line 2248 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
#line 16712 "grammar.ec" /* yacc.c:1663  */
    break;

  case 700:
#line 2249 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(VALIST); }
#line 16718 "grammar.ec" /* yacc.c:1663  */
    break;

  case 701:
#line 2250 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(LONG); }
#line 16724 "grammar.ec" /* yacc.c:1663  */
    break;

  case 702:
#line 2251 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(FLOAT); }
#line 16730 "grammar.ec" /* yacc.c:1663  */
    break;

  case 703:
#line 2252 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
#line 16736 "grammar.ec" /* yacc.c:1663  */
    break;

  case 704:
#line 2253 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(SIGNED); }
#line 16742 "grammar.ec" /* yacc.c:1663  */
    break;

  case 705:
#line 2254 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
#line 16748 "grammar.ec" /* yacc.c:1663  */
    break;

  case 706:
#line 2255 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
#line 16754 "grammar.ec" /* yacc.c:1663  */
    break;

  case 710:
#line 2259 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(_BOOL); }
#line 16760 "grammar.ec" /* yacc.c:1663  */
    break;

  case 711:
#line 2260 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(BOOL); }
#line 16766 "grammar.ec" /* yacc.c:1663  */
    break;

  case 712:
#line 2261 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
#line 16772 "grammar.ec" /* yacc.c:1663  */
    break;

  case 713:
#line 2262 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
#line 16778 "grammar.ec" /* yacc.c:1663  */
    break;

  case 714:
#line 2263 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[-1].exp)); }
#line 16784 "grammar.ec" /* yacc.c:1663  */
    break;

  case 715:
#line 2264 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[-1].specifier)); }
#line 16790 "grammar.ec" /* yacc.c:1663  */
    break;

  case 716:
#line 2265 "grammar.y" /* yacc.c:1663  */
    { _DeclClass((yyvsp[-1].id)._class, (yyvsp[-1].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[-1].id).string)); FreeIdentifier((yyvsp[-1].id)); }
#line 16796 "grammar.ec" /* yacc.c:1663  */
    break;

  case 717:
#line 2266 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
#line 16802 "grammar.ec" /* yacc.c:1663  */
    break;

  case 718:
#line 2273 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkStructDeclarator((yyvsp[0].declarator), null); (yyval.declarator).loc = (yyloc); }
#line 16808 "grammar.ec" /* yacc.c:1663  */
    break;

  case 719:
#line 2275 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkStructDeclarator((yyvsp[-1].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[0].attrib); (yyval.declarator).loc = (yyloc); }
#line 16814 "grammar.ec" /* yacc.c:1663  */
    break;

  case 720:
#line 2277 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[0].exp));  (yyval.declarator).loc = (yyloc); }
#line 16820 "grammar.ec" /* yacc.c:1663  */
    break;

  case 721:
#line 2279 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkStructDeclarator((yyvsp[-2].declarator), (yyvsp[0].exp));  (yyval.declarator).loc = (yyloc); }
#line 16826 "grammar.ec" /* yacc.c:1663  */
    break;

  case 722:
#line 2281 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkStructDeclarator((yyvsp[-4].declarator), (yyvsp[-2].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[0].exp); (yyval.declarator).loc = (yyloc); }
#line 16832 "grammar.ec" /* yacc.c:1663  */
    break;

  case 723:
#line 2283 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[0].exp));  (yyval.declarator).loc = (yyloc); }
#line 16838 "grammar.ec" /* yacc.c:1663  */
    break;

  case 724:
#line 2285 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkStructDeclarator((yyvsp[-2].declarator), (yyvsp[0].exp));  (yyval.declarator).loc = (yyloc); }
#line 16844 "grammar.ec" /* yacc.c:1663  */
    break;

  case 725:
#line 2287 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkStructDeclarator((yyvsp[-4].declarator), (yyvsp[-2].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[0].exp); (yyval.declarator).loc = (yyloc); }
#line 16850 "grammar.ec" /* yacc.c:1663  */
    break;

  case 726:
#line 2289 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkStructDeclarator((yyvsp[-4].declarator), (yyvsp[-2].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[0].exp); (yyval.declarator).loc = (yyloc); }
#line 16856 "grammar.ec" /* yacc.c:1663  */
    break;

  case 727:
#line 2291 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkStructDeclarator((yyvsp[-4].declarator), (yyvsp[-2].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[0].exp); (yyval.declarator).loc = (yyloc); }
#line 16862 "grammar.ec" /* yacc.c:1663  */
    break;

  case 728:
#line 2295 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].declarator)); }
#line 16868 "grammar.ec" /* yacc.c:1663  */
    break;

  case 729:
#line 2296 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].declarator)); }
#line 16874 "grammar.ec" /* yacc.c:1663  */
    break;

  case 730:
#line 2301 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[-1].specifierType), (yyvsp[0].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
#line 16884 "grammar.ec" /* yacc.c:1663  */
    break;

  case 731:
#line 2307 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[-1].specifierType), MkIdentifier((yyvsp[0].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[0].specifier));
      }
#line 16894 "grammar.ec" /* yacc.c:1663  */
    break;

  case 732:
#line 2313 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifierType), (yyvsp[0].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[-1].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
#line 16905 "grammar.ec" /* yacc.c:1663  */
    break;

  case 733:
#line 2320 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifierType), MkIdentifier((yyvsp[0].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[-1].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[0].specifier));
      }
#line 16916 "grammar.ec" /* yacc.c:1663  */
    break;

  case 734:
#line 2329 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-1].specifier); (yyval.specifier).loc = (yyloc); }
#line 16922 "grammar.ec" /* yacc.c:1663  */
    break;

  case 735:
#line 2330 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-2].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); }
#line 16928 "grammar.ec" /* yacc.c:1663  */
    break;

  case 736:
#line 2331 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16934 "grammar.ec" /* yacc.c:1663  */
    break;

  case 737:
#line 2332 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-3].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[-2].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
#line 16940 "grammar.ec" /* yacc.c:1663  */
    break;

  case 738:
#line 2336 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-2].specifier); AddStructDefinitions((yyvsp[-2].specifier), (yyvsp[0].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
#line 16946 "grammar.ec" /* yacc.c:1663  */
    break;

  case 739:
#line 2337 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-2].specifier); AddStructDefinitions((yyvsp[-2].specifier), (yyvsp[0].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
#line 16952 "grammar.ec" /* yacc.c:1663  */
    break;

  case 740:
#line 2338 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-2].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
#line 16958 "grammar.ec" /* yacc.c:1663  */
    break;

  case 741:
#line 2340 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifierType), null, (yyvsp[0].list)); POP_DEFAULT_ACCESS; }
#line 16964 "grammar.ec" /* yacc.c:1663  */
    break;

  case 742:
#line 2341 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifierType), null, (yyvsp[0].list)); POP_DEFAULT_ACCESS; }
#line 16970 "grammar.ec" /* yacc.c:1663  */
    break;

  case 743:
#line 2342 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifierType), null, null); POP_DEFAULT_ACCESS; }
#line 16976 "grammar.ec" /* yacc.c:1663  */
    break;

  case 744:
#line 2344 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-3].specifierType), null, (yyvsp[0].list)); (yyval.specifier).extDeclStruct = (yyvsp[-2].extDecl); POP_DEFAULT_ACCESS; }
#line 16982 "grammar.ec" /* yacc.c:1663  */
    break;

  case 745:
#line 2345 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-3].specifierType), null, (yyvsp[0].list)); (yyval.specifier).extDeclStruct = (yyvsp[-2].extDecl); POP_DEFAULT_ACCESS; }
#line 16988 "grammar.ec" /* yacc.c:1663  */
    break;

  case 746:
#line 2346 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-3].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[-2].extDecl); POP_DEFAULT_ACCESS; }
#line 16994 "grammar.ec" /* yacc.c:1663  */
    break;

  case 747:
#line 2350 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[0].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
#line 17000 "grammar.ec" /* yacc.c:1663  */
    break;

  case 748:
#line 2355 "grammar.y" /* yacc.c:1663  */
    {
        (yyval.specifier) = (yyvsp[0].specifier);
        if(declMode)
        {
           ((yyvsp[0].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[0].specifier).id._class, (yyvsp[0].specifier).id.string);
        }
     }
#line 17012 "grammar.ec" /* yacc.c:1663  */
    break;

  case 749:
#line 2363 "grammar.y" /* yacc.c:1663  */
    {
      Symbol symbol = ((yyvsp[-3].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[-3].specifier).id._class, (yyvsp[-3].specifier).id.string);
      (yyval.specifier) = (yyvsp[-3].specifier);
      symbol.templateParams = (yyvsp[-1].list);
   }
#line 17022 "grammar.ec" /* yacc.c:1663  */
    break;

  case 750:
#line 2372 "grammar.y" /* yacc.c:1663  */
    {
      (yyval.specifier) = (yyvsp[-2].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[0].list);
      SetupBaseSpecs(null, (yyvsp[0].list));
   }
#line 17032 "grammar.ec" /* yacc.c:1663  */
    break;

  case 751:
#line 2380 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-1].specifier); (yyval.specifier).loc = (yyloc); }
#line 17038 "grammar.ec" /* yacc.c:1663  */
    break;

  case 752:
#line 2382 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-2].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
#line 17044 "grammar.ec" /* yacc.c:1663  */
    break;

  case 753:
#line 2383 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-2].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
#line 17050 "grammar.ec" /* yacc.c:1663  */
    break;

  case 754:
#line 2384 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifierType), null, null); POP_DEFAULT_ACCESS; }
#line 17056 "grammar.ec" /* yacc.c:1663  */
    break;

  case 755:
#line 2389 "grammar.y" /* yacc.c:1663  */
    {
      (yyval.specifier) = (yyvsp[-2].specifier);
      (yyval.specifier).definitions = (yyvsp[0].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
#line 17067 "grammar.ec" /* yacc.c:1663  */
    break;

  case 756:
#line 2396 "grammar.y" /* yacc.c:1663  */
    {
      (yyval.specifier) = (yyvsp[-2].specifier);
      (yyval.specifier).definitions = (yyvsp[0].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
#line 17078 "grammar.ec" /* yacc.c:1663  */
    break;

  case 757:
#line 2403 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-2].specifier); POP_DEFAULT_ACCESS PopContext(curContext);}
#line 17084 "grammar.ec" /* yacc.c:1663  */
    break;

  case 758:
#line 2406 "grammar.y" /* yacc.c:1663  */
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifier).type, (yyvsp[-2].specifier).id, (yyvsp[0].list));
           (yyvsp[-2].specifier).id = null;
           (yyval.specifier).ctx = (yyvsp[-2].specifier).ctx;
           (yyvsp[-2].specifier).ctx = null;

           FreeSpecifier((yyvsp[-2].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[0].list);
        POP_DEFAULT_ACCESS;
     }
#line 17104 "grammar.ec" /* yacc.c:1663  */
    break;

  case 759:
#line 2422 "grammar.y" /* yacc.c:1663  */
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifier).type, (yyvsp[-2].specifier).id, (yyvsp[0].list));
           (yyvsp[-2].specifier).id = null;
           FreeSpecifier((yyvsp[-2].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[0].list);
        POP_DEFAULT_ACCESS;
     }
#line 17122 "grammar.ec" /* yacc.c:1663  */
    break;

  case 760:
#line 2436 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = (yyvsp[-2].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
#line 17128 "grammar.ec" /* yacc.c:1663  */
    break;

  case 761:
#line 2439 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifierType), null, (yyvsp[0].list)); POP_DEFAULT_ACCESS;  }
#line 17134 "grammar.ec" /* yacc.c:1663  */
    break;

  case 762:
#line 2441 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifierType), null, (yyvsp[0].list)); POP_DEFAULT_ACCESS; }
#line 17140 "grammar.ec" /* yacc.c:1663  */
    break;

  case 763:
#line 2443 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifier) = MkStructOrUnion((yyvsp[-2].specifierType), null, null); POP_DEFAULT_ACCESS; }
#line 17146 "grammar.ec" /* yacc.c:1663  */
    break;

  case 764:
#line 2447 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
#line 17152 "grammar.ec" /* yacc.c:1663  */
    break;

  case 765:
#line 2448 "grammar.y" /* yacc.c:1663  */
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
#line 17158 "grammar.ec" /* yacc.c:1663  */
    break;

  case 766:
#line 2452 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17164 "grammar.ec" /* yacc.c:1663  */
    break;

  case 767:
#line 2453 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17170 "grammar.ec" /* yacc.c:1663  */
    break;

  case 768:
#line 2454 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17176 "grammar.ec" /* yacc.c:1663  */
    break;

  case 769:
#line 2455 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17182 "grammar.ec" /* yacc.c:1663  */
    break;

  case 770:
#line 2456 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17188 "grammar.ec" /* yacc.c:1663  */
    break;

  case 771:
#line 2457 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17194 "grammar.ec" /* yacc.c:1663  */
    break;

  case 772:
#line 2458 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17200 "grammar.ec" /* yacc.c:1663  */
    break;

  case 773:
#line 2459 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17206 "grammar.ec" /* yacc.c:1663  */
    break;

  case 774:
#line 2463 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17212 "grammar.ec" /* yacc.c:1663  */
    break;

  case 775:
#line 2464 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17218 "grammar.ec" /* yacc.c:1663  */
    break;

  case 776:
#line 2465 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17224 "grammar.ec" /* yacc.c:1663  */
    break;

  case 777:
#line 2466 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17230 "grammar.ec" /* yacc.c:1663  */
    break;

  case 778:
#line 2467 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17236 "grammar.ec" /* yacc.c:1663  */
    break;

  case 779:
#line 2468 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17242 "grammar.ec" /* yacc.c:1663  */
    break;

  case 780:
#line 2469 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17248 "grammar.ec" /* yacc.c:1663  */
    break;

  case 781:
#line 2470 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17254 "grammar.ec" /* yacc.c:1663  */
    break;

  case 782:
#line 2471 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17260 "grammar.ec" /* yacc.c:1663  */
    break;

  case 783:
#line 2472 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17266 "grammar.ec" /* yacc.c:1663  */
    break;

  case 784:
#line 2476 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17272 "grammar.ec" /* yacc.c:1663  */
    break;

  case 785:
#line 2477 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17278 "grammar.ec" /* yacc.c:1663  */
    break;

  case 786:
#line 2478 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17284 "grammar.ec" /* yacc.c:1663  */
    break;

  case 787:
#line 2479 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17290 "grammar.ec" /* yacc.c:1663  */
    break;

  case 788:
#line 2480 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17296 "grammar.ec" /* yacc.c:1663  */
    break;

  case 789:
#line 2481 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17302 "grammar.ec" /* yacc.c:1663  */
    break;

  case 790:
#line 2482 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17308 "grammar.ec" /* yacc.c:1663  */
    break;

  case 791:
#line 2483 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17314 "grammar.ec" /* yacc.c:1663  */
    break;

  case 792:
#line 2484 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17320 "grammar.ec" /* yacc.c:1663  */
    break;

  case 793:
#line 2485 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17326 "grammar.ec" /* yacc.c:1663  */
    break;

  case 794:
#line 2489 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17332 "grammar.ec" /* yacc.c:1663  */
    break;

  case 795:
#line 2490 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17338 "grammar.ec" /* yacc.c:1663  */
    break;

  case 796:
#line 2491 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17344 "grammar.ec" /* yacc.c:1663  */
    break;

  case 797:
#line 2492 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17350 "grammar.ec" /* yacc.c:1663  */
    break;

  case 798:
#line 2493 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17356 "grammar.ec" /* yacc.c:1663  */
    break;

  case 799:
#line 2494 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17362 "grammar.ec" /* yacc.c:1663  */
    break;

  case 800:
#line 2495 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17368 "grammar.ec" /* yacc.c:1663  */
    break;

  case 801:
#line 2496 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17374 "grammar.ec" /* yacc.c:1663  */
    break;

  case 802:
#line 2497 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17380 "grammar.ec" /* yacc.c:1663  */
    break;

  case 803:
#line 2498 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17386 "grammar.ec" /* yacc.c:1663  */
    break;

  case 804:
#line 2499 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17392 "grammar.ec" /* yacc.c:1663  */
    break;

  case 805:
#line 2500 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17398 "grammar.ec" /* yacc.c:1663  */
    break;

  case 806:
#line 2504 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17404 "grammar.ec" /* yacc.c:1663  */
    break;

  case 807:
#line 2505 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17410 "grammar.ec" /* yacc.c:1663  */
    break;

  case 808:
#line 2506 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17416 "grammar.ec" /* yacc.c:1663  */
    break;

  case 809:
#line 2507 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17422 "grammar.ec" /* yacc.c:1663  */
    break;

  case 810:
#line 2508 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17428 "grammar.ec" /* yacc.c:1663  */
    break;

  case 811:
#line 2509 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17434 "grammar.ec" /* yacc.c:1663  */
    break;

  case 812:
#line 2510 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17440 "grammar.ec" /* yacc.c:1663  */
    break;

  case 813:
#line 2511 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17446 "grammar.ec" /* yacc.c:1663  */
    break;

  case 814:
#line 2512 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17452 "grammar.ec" /* yacc.c:1663  */
    break;

  case 815:
#line 2513 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17458 "grammar.ec" /* yacc.c:1663  */
    break;

  case 816:
#line 2517 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17464 "grammar.ec" /* yacc.c:1663  */
    break;

  case 817:
#line 2518 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17470 "grammar.ec" /* yacc.c:1663  */
    break;

  case 818:
#line 2522 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); }
#line 17476 "grammar.ec" /* yacc.c:1663  */
    break;

  case 819:
#line 2523 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); }
#line 17482 "grammar.ec" /* yacc.c:1663  */
    break;

  case 820:
#line 2524 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17488 "grammar.ec" /* yacc.c:1663  */
    break;

  case 821:
#line 2525 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17494 "grammar.ec" /* yacc.c:1663  */
    break;

  case 822:
#line 2526 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17500 "grammar.ec" /* yacc.c:1663  */
    break;

  case 823:
#line 2527 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17506 "grammar.ec" /* yacc.c:1663  */
    break;

  case 824:
#line 2528 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17512 "grammar.ec" /* yacc.c:1663  */
    break;

  case 825:
#line 2529 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17518 "grammar.ec" /* yacc.c:1663  */
    break;

  case 826:
#line 2531 "grammar.y" /* yacc.c:1663  */
    { _DeclClass((yyvsp[0].id)._class, (yyvsp[0].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[0].id).string)); FreeIdentifier((yyvsp[0].id)); }
#line 17524 "grammar.ec" /* yacc.c:1663  */
    break;

  case 827:
#line 2532 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); _DeclClass((yyvsp[0].id)._class, (yyvsp[0].id).string); ListAdd((yyvsp[-1].list), MkSpecifierName((yyvsp[0].id).string)); FreeIdentifier((yyvsp[0].id)); }
#line 17530 "grammar.ec" /* yacc.c:1663  */
    break;

  case 828:
#line 2535 "grammar.y" /* yacc.c:1663  */
    {
         _DeclClass((yyvsp[-3].id)._class, (yyvsp[-3].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[-3].id).string, (yyvsp[-1].list)));
         FreeIdentifier((yyvsp[-3].id));
      }
#line 17542 "grammar.ec" /* yacc.c:1663  */
    break;

  case 829:
#line 2543 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.list) = (yyvsp[-4].list);
         _DeclClass((yyvsp[-3].id)._class, (yyvsp[-3].id).string);
         ListAdd((yyvsp[-4].list), MkSpecifierNameArgs((yyvsp[-3].id).string, (yyvsp[-1].list)));
         FreeIdentifier((yyvsp[-3].id));
      }
#line 17553 "grammar.ec" /* yacc.c:1663  */
    break;

  case 831:
#line 2553 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[0].specifierType), null, null)); POP_DEFAULT_ACCESS; }
#line 17559 "grammar.ec" /* yacc.c:1663  */
    break;

  case 832:
#line 2557 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17565 "grammar.ec" /* yacc.c:1663  */
    break;

  case 833:
#line 2558 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17571 "grammar.ec" /* yacc.c:1663  */
    break;

  case 834:
#line 2559 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17577 "grammar.ec" /* yacc.c:1663  */
    break;

  case 835:
#line 2560 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17583 "grammar.ec" /* yacc.c:1663  */
    break;

  case 836:
#line 2561 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17589 "grammar.ec" /* yacc.c:1663  */
    break;

  case 837:
#line 2562 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17595 "grammar.ec" /* yacc.c:1663  */
    break;

  case 838:
#line 2563 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[0].id).string)); FreeIdentifier((yyvsp[0].id)); }
#line 17601 "grammar.ec" /* yacc.c:1663  */
    break;

  case 839:
#line 2564 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), MkSpecifierName((yyvsp[0].id).string)); FreeIdentifier((yyvsp[0].id)); }
#line 17607 "grammar.ec" /* yacc.c:1663  */
    break;

  case 840:
#line 2566 "grammar.y" /* yacc.c:1663  */
    {
         _DeclClass((yyvsp[-3].id)._class, (yyvsp[-3].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[-3].id).string, (yyvsp[-1].list)));
         FreeIdentifier((yyvsp[-3].id));
      }
#line 17619 "grammar.ec" /* yacc.c:1663  */
    break;

  case 841:
#line 2574 "grammar.y" /* yacc.c:1663  */
    {
         _DeclClass((yyvsp[-3].id)._class, (yyvsp[-3].id).string);
         ListAdd((yyvsp[-4].list), MkSpecifierNameArgs((yyvsp[-3].id).string, (yyvsp[-1].list)));
         FreeIdentifier((yyvsp[-3].id));
      }
#line 17629 "grammar.ec" /* yacc.c:1663  */
    break;

  case 842:
#line 2582 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17635 "grammar.ec" /* yacc.c:1663  */
    break;

  case 843:
#line 2583 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17641 "grammar.ec" /* yacc.c:1663  */
    break;

  case 844:
#line 2584 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17647 "grammar.ec" /* yacc.c:1663  */
    break;

  case 845:
#line 2585 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17653 "grammar.ec" /* yacc.c:1663  */
    break;

  case 846:
#line 2586 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17659 "grammar.ec" /* yacc.c:1663  */
    break;

  case 847:
#line 2587 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17665 "grammar.ec" /* yacc.c:1663  */
    break;

  case 848:
#line 2588 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17671 "grammar.ec" /* yacc.c:1663  */
    break;

  case 849:
#line 2589 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17677 "grammar.ec" /* yacc.c:1663  */
    break;

  case 850:
#line 2590 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17683 "grammar.ec" /* yacc.c:1663  */
    break;

  case 851:
#line 2591 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17689 "grammar.ec" /* yacc.c:1663  */
    break;

  case 852:
#line 2592 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[0].id).string)); FreeIdentifier((yyvsp[0].id)); }
#line 17695 "grammar.ec" /* yacc.c:1663  */
    break;

  case 853:
#line 2593 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), MkSpecifierName((yyvsp[0].id).string)); FreeIdentifier((yyvsp[0].id)); }
#line 17701 "grammar.ec" /* yacc.c:1663  */
    break;

  case 854:
#line 2595 "grammar.y" /* yacc.c:1663  */
    {
         _DeclClass((yyvsp[-3].id)._class, (yyvsp[-3].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[-3].id).string, (yyvsp[-1].list)));
         FreeIdentifier((yyvsp[-3].id));
      }
#line 17713 "grammar.ec" /* yacc.c:1663  */
    break;

  case 855:
#line 2603 "grammar.y" /* yacc.c:1663  */
    {
         _DeclClass((yyvsp[-3].id)._class, (yyvsp[-3].id).string);
         ListAdd((yyvsp[-4].list), MkSpecifierNameArgs((yyvsp[-3].id).string, (yyvsp[-1].list)));
         FreeIdentifier((yyvsp[-3].id));
      }
#line 17723 "grammar.ec" /* yacc.c:1663  */
    break;

  case 856:
#line 2611 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17729 "grammar.ec" /* yacc.c:1663  */
    break;

  case 857:
#line 2612 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17735 "grammar.ec" /* yacc.c:1663  */
    break;

  case 858:
#line 2613 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17741 "grammar.ec" /* yacc.c:1663  */
    break;

  case 859:
#line 2614 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17747 "grammar.ec" /* yacc.c:1663  */
    break;

  case 860:
#line 2615 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17753 "grammar.ec" /* yacc.c:1663  */
    break;

  case 861:
#line 2616 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17759 "grammar.ec" /* yacc.c:1663  */
    break;

  case 862:
#line 2617 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17765 "grammar.ec" /* yacc.c:1663  */
    break;

  case 863:
#line 2618 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17771 "grammar.ec" /* yacc.c:1663  */
    break;

  case 864:
#line 2619 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].specifier)); }
#line 17777 "grammar.ec" /* yacc.c:1663  */
    break;

  case 865:
#line 2620 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].specifier)); }
#line 17783 "grammar.ec" /* yacc.c:1663  */
    break;

  case 866:
#line 2621 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[0].id).string)); FreeIdentifier((yyvsp[0].id)); }
#line 17789 "grammar.ec" /* yacc.c:1663  */
    break;

  case 867:
#line 2622 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), MkSpecifierName((yyvsp[0].id).string)); FreeIdentifier((yyvsp[0].id)); }
#line 17795 "grammar.ec" /* yacc.c:1663  */
    break;

  case 868:
#line 2624 "grammar.y" /* yacc.c:1663  */
    {
         _DeclClass((yyvsp[-3].id)._class, (yyvsp[-3].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[-3].id).string, (yyvsp[-1].list)));
         FreeIdentifier((yyvsp[-3].id));
      }
#line 17807 "grammar.ec" /* yacc.c:1663  */
    break;

  case 869:
#line 2632 "grammar.y" /* yacc.c:1663  */
    {
         _DeclClass((yyvsp[-3].id)._class, (yyvsp[-3].id).string);
         ListAdd((yyvsp[-4].list), MkSpecifierNameArgs((yyvsp[-3].id).string, (yyvsp[-1].list)));
         FreeIdentifier((yyvsp[-3].id));
      }
#line 17817 "grammar.ec" /* yacc.c:1663  */
    break;

  case 870:
#line 2640 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), null); }
#line 17823 "grammar.ec" /* yacc.c:1663  */
    break;

  case 871:
#line 2641 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), null); }
#line 17829 "grammar.ec" /* yacc.c:1663  */
    break;

  case 872:
#line 2645 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[0].id)))); }
#line 17835 "grammar.ec" /* yacc.c:1663  */
    break;

  case 873:
#line 2646 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[0].id)))); }
#line 17841 "grammar.ec" /* yacc.c:1663  */
    break;

  case 874:
#line 2647 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[0].id)))); }
#line 17847 "grammar.ec" /* yacc.c:1663  */
    break;

  case 875:
#line 2648 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[0].id)))); }
#line 17853 "grammar.ec" /* yacc.c:1663  */
    break;

  case 876:
#line 2649 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[0].id)))); }
#line 17859 "grammar.ec" /* yacc.c:1663  */
    break;

  case 878:
#line 2655 "grammar.y" /* yacc.c:1663  */
    {
      char * colon = (yyvsp[0].specifier).name ? RSearchString((yyvsp[0].specifier).name, "::", strlen((yyvsp[0].specifier).name), true, false) : null;
      String s = colon ? colon + 2 : (yyvsp[0].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[0].specifier));
   }
#line 17870 "grammar.ec" /* yacc.c:1663  */
    break;

  case 879:
#line 2661 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); }
#line 17876 "grammar.ec" /* yacc.c:1663  */
    break;

  case 880:
#line 2664 "grammar.y" /* yacc.c:1663  */
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[-3].specifier).name, "::", strlen((yyvsp[-3].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[-3].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[-3].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[-1].exp));
      }
#line 17889 "grammar.ec" /* yacc.c:1663  */
    break;

  case 881:
#line 2673 "grammar.y" /* yacc.c:1663  */
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[-3].specifier).name, "::", strlen((yyvsp[-3].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[-3].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[-3].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[-1].exp));
      }
#line 17902 "grammar.ec" /* yacc.c:1663  */
    break;

  case 882:
#line 2682 "grammar.y" /* yacc.c:1663  */
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[-3].specifier).name, "::", strlen((yyvsp[-3].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[-3].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[-3].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[-1].specifier));
      }
#line 17915 "grammar.ec" /* yacc.c:1663  */
    break;

  case 883:
#line 2691 "grammar.y" /* yacc.c:1663  */
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[-2].specifier).name, "::", strlen((yyvsp[-2].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[-2].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[-2].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      }
#line 17928 "grammar.ec" /* yacc.c:1663  */
    break;

  case 884:
#line 2699 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[-3].declarator), (yyvsp[-1].exp)); }
#line 17934 "grammar.ec" /* yacc.c:1663  */
    break;

  case 885:
#line 2700 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[-3].declarator), (yyvsp[-1].exp)); }
#line 17940 "grammar.ec" /* yacc.c:1663  */
    break;

  case 886:
#line 2701 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[-3].declarator), (yyvsp[-1].specifier)); }
#line 17946 "grammar.ec" /* yacc.c:1663  */
    break;

  case 887:
#line 2702 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[-2].declarator), null); }
#line 17952 "grammar.ec" /* yacc.c:1663  */
    break;

  case 888:
#line 2706 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[0].id)); }
#line 17958 "grammar.ec" /* yacc.c:1663  */
    break;

  case 889:
#line 2707 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[-1].declarator)); }
#line 17964 "grammar.ec" /* yacc.c:1663  */
    break;

  case 890:
#line 2708 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[-2].extDecl), (yyvsp[-1].declarator))); }
#line 17970 "grammar.ec" /* yacc.c:1663  */
    break;

  case 891:
#line 2709 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[-1].declarator)); }
#line 17976 "grammar.ec" /* yacc.c:1663  */
    break;

  case 892:
#line 2710 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[-2].extDecl), (yyvsp[-1].declarator))); }
#line 17982 "grammar.ec" /* yacc.c:1663  */
    break;

  case 893:
#line 2711 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[-3].declarator), (yyvsp[-1].exp)); }
#line 17988 "grammar.ec" /* yacc.c:1663  */
    break;

  case 894:
#line 2712 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[-3].declarator), (yyvsp[-1].exp)); }
#line 17994 "grammar.ec" /* yacc.c:1663  */
    break;

  case 895:
#line 2713 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[-3].declarator), (yyvsp[-1].specifier)); }
#line 18000 "grammar.ec" /* yacc.c:1663  */
    break;

  case 896:
#line 2714 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[-2].declarator), null); }
#line 18006 "grammar.ec" /* yacc.c:1663  */
    break;

  case 898:
#line 2722 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), (yyvsp[-1].list)); }
#line 18012 "grammar.ec" /* yacc.c:1663  */
    break;

  case 899:
#line 2723 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), (yyvsp[-1].list)); }
#line 18018 "grammar.ec" /* yacc.c:1663  */
    break;

  case 900:
#line 2724 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), (yyvsp[-1].list)); }
#line 18024 "grammar.ec" /* yacc.c:1663  */
    break;

  case 901:
#line 2725 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), (yyvsp[-1].list)); }
#line 18030 "grammar.ec" /* yacc.c:1663  */
    break;

  case 902:
#line 2726 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-1].declarator), null); }
#line 18036 "grammar.ec" /* yacc.c:1663  */
    break;

  case 903:
#line 2732 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[-1].declarator), (yyvsp[0].list));
         fileInput.Seek((yylsp[-1]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[-1]).end);
         (yyloc).start = (yylsp[-1]).start;
         (yyloc).end = (yylsp[-1]).end;
      }
#line 18049 "grammar.ec" /* yacc.c:1663  */
    break;

  case 904:
#line 2741 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[-1].declarator), null);
         fileInput.Seek((yylsp[-1]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[-1]).end);
         (yyloc).start = (yylsp[-1]).start;
         (yyloc).end = (yylsp[-1]).end;
      }
#line 18062 "grammar.ec" /* yacc.c:1663  */
    break;

  case 905:
#line 2750 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), (yyvsp[-1].list));
         fileInput.Seek((yylsp[-2]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[-2]).end);
         (yyloc).start = (yylsp[-2]).start;
         (yyloc).end = (yylsp[-2]).end;
      }
#line 18075 "grammar.ec" /* yacc.c:1663  */
    break;

  case 906:
#line 2759 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[-3].declarator), null);
         fileInput.Seek((yylsp[-3]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[-3]).end);
         (yyloc).start = (yylsp[-3]).start;
         (yyloc).end = (yylsp[-3]).end;
         FreeList((yyvsp[-2].list), FreeSpecifier);
         FreeIdentifier((yyvsp[-1].id));
      }
#line 18090 "grammar.ec" /* yacc.c:1663  */
    break;

  case 910:
#line 2782 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), (yyvsp[-1].list)); }
#line 18096 "grammar.ec" /* yacc.c:1663  */
    break;

  case 911:
#line 2783 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), (yyvsp[-1].list)); }
#line 18102 "grammar.ec" /* yacc.c:1663  */
    break;

  case 912:
#line 2784 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), (yyvsp[-1].list)); }
#line 18108 "grammar.ec" /* yacc.c:1663  */
    break;

  case 913:
#line 2785 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), (yyvsp[-1].list)); }
#line 18114 "grammar.ec" /* yacc.c:1663  */
    break;

  case 914:
#line 2786 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-1].declarator), null); }
#line 18120 "grammar.ec" /* yacc.c:1663  */
    break;

  case 915:
#line 2792 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[-1].declarator), (yyvsp[0].list));
         fileInput.Seek((yylsp[-1]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[-1]).end);
         (yyloc).start = (yylsp[-1]).start;
         (yyloc).end = (yylsp[-1]).end;
      }
#line 18133 "grammar.ec" /* yacc.c:1663  */
    break;

  case 916:
#line 2801 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[-1].declarator), null);
         fileInput.Seek((yylsp[-1]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[-1]).end);
         (yyloc).start = (yylsp[-1]).start;
         (yyloc).end = (yylsp[-1]).end;
      }
#line 18146 "grammar.ec" /* yacc.c:1663  */
    break;

  case 917:
#line 2810 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), (yyvsp[-1].list));
         fileInput.Seek((yylsp[-2]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[-2]).end);
         (yyloc).start = (yylsp[-2]).start;
         (yyloc).end = (yylsp[-2]).end;
      }
#line 18159 "grammar.ec" /* yacc.c:1663  */
    break;

  case 918:
#line 2819 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[-3].declarator), null);
         fileInput.Seek((yylsp[-3]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[-3]).end);
         (yyloc).start = (yylsp[-3]).start;
         (yyloc).end = (yylsp[-3]).end;
         FreeList((yyvsp[-2].list), FreeSpecifier);
         FreeIdentifier((yyvsp[-1].id));
      }
#line 18174 "grammar.ec" /* yacc.c:1663  */
    break;

  case 921:
#line 2882 "grammar.y" /* yacc.c:1663  */
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
#line 18180 "grammar.ec" /* yacc.c:1663  */
    break;

  case 922:
#line 2883 "grammar.y" /* yacc.c:1663  */
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
#line 18186 "grammar.ec" /* yacc.c:1663  */
    break;

  case 923:
#line 2886 "grammar.y" /* yacc.c:1663  */
    {
         TempFile f { };
         OutputExtDecl((yyvsp[-1].extDecl), f);
         f.Putc(' ');
         f.Puts(yytext);
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExtDecl((yyvsp[-1].extDecl));
         delete f;
      }
#line 18201 "grammar.ec" /* yacc.c:1663  */
    break;

  case 924:
#line 2897 "grammar.y" /* yacc.c:1663  */
    {
         TempFile f { };
         OutputExtDecl((yyvsp[-1].extDecl), f);
         f.Putc(' ');
         f.Puts(yytext);
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExtDecl((yyvsp[-1].extDecl));
         delete f;
      }
#line 18216 "grammar.ec" /* yacc.c:1663  */
    break;

  case 925:
#line 2907 "grammar.y" /* yacc.c:1663  */
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[0].attrib)); }
#line 18222 "grammar.ec" /* yacc.c:1663  */
    break;

  case 926:
#line 2908 "grammar.y" /* yacc.c:1663  */
    { (yyval.extDecl) = MkExtDeclMultiAttrib((yyvsp[0].list)); }
#line 18228 "grammar.ec" /* yacc.c:1663  */
    break;

  case 927:
#line 2910 "grammar.y" /* yacc.c:1663  */
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[-1].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[-1].string);
      }
#line 18241 "grammar.ec" /* yacc.c:1663  */
    break;

  case 928:
#line 2921 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = ATTRIB; }
#line 18247 "grammar.ec" /* yacc.c:1663  */
    break;

  case 929:
#line 2922 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = ATTRIB_DEP; }
#line 18253 "grammar.ec" /* yacc.c:1663  */
    break;

  case 930:
#line 2923 "grammar.y" /* yacc.c:1663  */
    { (yyval.i) = __ATTRIB; }
#line 18259 "grammar.ec" /* yacc.c:1663  */
    break;

  case 931:
#line 2928 "grammar.y" /* yacc.c:1663  */
    { (yyval.string)  = CopyString(yytext); }
#line 18265 "grammar.ec" /* yacc.c:1663  */
    break;

  case 932:
#line 2929 "grammar.y" /* yacc.c:1663  */
    { (yyval.string)  = CopyString(yytext); }
#line 18271 "grammar.ec" /* yacc.c:1663  */
    break;

  case 933:
#line 2930 "grammar.y" /* yacc.c:1663  */
    { (yyval.string)  = CopyString(yytext); }
#line 18277 "grammar.ec" /* yacc.c:1663  */
    break;

  case 934:
#line 2931 "grammar.y" /* yacc.c:1663  */
    { (yyval.string)  = CopyString(yytext); }
#line 18283 "grammar.ec" /* yacc.c:1663  */
    break;

  case 935:
#line 2932 "grammar.y" /* yacc.c:1663  */
    { (yyval.string)  = CopyString(yytext); }
#line 18289 "grammar.ec" /* yacc.c:1663  */
    break;

  case 936:
#line 2936 "grammar.y" /* yacc.c:1663  */
    { (yyval.attribute) = MkAttribute((yyvsp[0].string), null); (yyval.attribute).loc = (yyloc); }
#line 18295 "grammar.ec" /* yacc.c:1663  */
    break;

  case 937:
#line 2937 "grammar.y" /* yacc.c:1663  */
    { (yyval.attribute) = MkAttribute((yyvsp[-3].string), MkExpBrackets((yyvsp[-1].list))); (yyval.attribute).loc = (yyloc); }
#line 18301 "grammar.ec" /* yacc.c:1663  */
    break;

  case 938:
#line 2941 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkListOne((yyvsp[0].attribute)); }
#line 18307 "grammar.ec" /* yacc.c:1663  */
    break;

  case 939:
#line 2942 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyvsp[-1].list), (yyvsp[0].attribute)); (yyval.list) = (yyvsp[-1].list); }
#line 18313 "grammar.ec" /* yacc.c:1663  */
    break;

  case 940:
#line 2943 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyvsp[-2].list), (yyvsp[0].attribute)); (yyval.list) = (yyvsp[-2].list); }
#line 18319 "grammar.ec" /* yacc.c:1663  */
    break;

  case 941:
#line 2947 "grammar.y" /* yacc.c:1663  */
    { (yyval.attrib) = MkAttrib((yyvsp[-5].i), (yyvsp[-2].list)); (yyval.attrib).loc = (yyloc); }
#line 18325 "grammar.ec" /* yacc.c:1663  */
    break;

  case 942:
#line 2948 "grammar.y" /* yacc.c:1663  */
    { (yyval.attrib) = MkAttrib((yyvsp[-4].i), null); (yyval.attrib).loc = (yyloc); }
#line 18331 "grammar.ec" /* yacc.c:1663  */
    break;

  case 943:
#line 2952 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkListOne((yyvsp[0].attrib)); }
#line 18337 "grammar.ec" /* yacc.c:1663  */
    break;

  case 944:
#line 2953 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyvsp[-1].list), (yyvsp[0].attrib)); (yyval.list) = (yyvsp[-1].list); }
#line 18343 "grammar.ec" /* yacc.c:1663  */
    break;

  case 945:
#line 2957 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[-1].declarator)); }
#line 18349 "grammar.ec" /* yacc.c:1663  */
    break;

  case 946:
#line 2958 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[-2].extDecl), (yyvsp[-1].declarator))); }
#line 18355 "grammar.ec" /* yacc.c:1663  */
    break;

  case 947:
#line 2959 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray(null, null); }
#line 18361 "grammar.ec" /* yacc.c:1663  */
    break;

  case 948:
#line 2960 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[-1].exp)); }
#line 18367 "grammar.ec" /* yacc.c:1663  */
    break;

  case 949:
#line 2961 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[-1].exp)); }
#line 18373 "grammar.ec" /* yacc.c:1663  */
    break;

  case 950:
#line 2962 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[-1].specifier)); }
#line 18379 "grammar.ec" /* yacc.c:1663  */
    break;

  case 951:
#line 2963 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[-2].declarator), null); }
#line 18385 "grammar.ec" /* yacc.c:1663  */
    break;

  case 952:
#line 2964 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[-3].declarator), (yyvsp[-1].exp)); }
#line 18391 "grammar.ec" /* yacc.c:1663  */
    break;

  case 953:
#line 2965 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[-3].declarator), (yyvsp[-1].specifier)); }
#line 18397 "grammar.ec" /* yacc.c:1663  */
    break;

  case 954:
#line 2966 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[-3].declarator), (yyvsp[-1].exp)); }
#line 18403 "grammar.ec" /* yacc.c:1663  */
    break;

  case 955:
#line 2967 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
#line 18409 "grammar.ec" /* yacc.c:1663  */
    break;

  case 956:
#line 2968 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[-1].list)); }
#line 18415 "grammar.ec" /* yacc.c:1663  */
    break;

  case 957:
#line 2969 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[-1].list)); }
#line 18421 "grammar.ec" /* yacc.c:1663  */
    break;

  case 958:
#line 2970 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), null); }
#line 18427 "grammar.ec" /* yacc.c:1663  */
    break;

  case 959:
#line 2971 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-3].declarator), (yyvsp[-1].list)); }
#line 18433 "grammar.ec" /* yacc.c:1663  */
    break;

  case 960:
#line 2972 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-3].declarator), (yyvsp[-1].list)); }
#line 18439 "grammar.ec" /* yacc.c:1663  */
    break;

  case 961:
#line 2976 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[-1].declarator)); }
#line 18445 "grammar.ec" /* yacc.c:1663  */
    break;

  case 962:
#line 2977 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[-2].extDecl), (yyvsp[-1].declarator))); }
#line 18451 "grammar.ec" /* yacc.c:1663  */
    break;

  case 963:
#line 2978 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
#line 18457 "grammar.ec" /* yacc.c:1663  */
    break;

  case 964:
#line 2979 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[-1].list)); }
#line 18463 "grammar.ec" /* yacc.c:1663  */
    break;

  case 965:
#line 2980 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[-1].list)); }
#line 18469 "grammar.ec" /* yacc.c:1663  */
    break;

  case 966:
#line 2981 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-2].declarator), null); }
#line 18475 "grammar.ec" /* yacc.c:1663  */
    break;

  case 967:
#line 2982 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-3].declarator), (yyvsp[-1].list)); }
#line 18481 "grammar.ec" /* yacc.c:1663  */
    break;

  case 968:
#line 2983 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[-3].declarator), (yyvsp[-1].list)); }
#line 18487 "grammar.ec" /* yacc.c:1663  */
    break;

  case 969:
#line 2987 "grammar.y" /* yacc.c:1663  */
    { (yyval.pointer) = MkPointer(null, null); }
#line 18493 "grammar.ec" /* yacc.c:1663  */
    break;

  case 970:
#line 2988 "grammar.y" /* yacc.c:1663  */
    { (yyval.pointer) = MkPointer((yyvsp[0].list), null); }
#line 18499 "grammar.ec" /* yacc.c:1663  */
    break;

  case 971:
#line 2989 "grammar.y" /* yacc.c:1663  */
    { (yyval.pointer) = MkPointer(null, (yyvsp[0].pointer)); }
#line 18505 "grammar.ec" /* yacc.c:1663  */
    break;

  case 972:
#line 2990 "grammar.y" /* yacc.c:1663  */
    { (yyval.pointer) = MkPointer((yyvsp[-1].list), (yyvsp[0].pointer)); }
#line 18511 "grammar.ec" /* yacc.c:1663  */
    break;

  case 973:
#line 2994 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[0].pointer), null); }
#line 18517 "grammar.ec" /* yacc.c:1663  */
    break;

  case 975:
#line 2996 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator)); }
#line 18523 "grammar.ec" /* yacc.c:1663  */
    break;

  case 976:
#line 2997 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-1].extDecl), MkDeclaratorPointer((yyvsp[0].pointer), null)); }
#line 18529 "grammar.ec" /* yacc.c:1663  */
    break;

  case 977:
#line 2998 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-2].extDecl), MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator))); }
#line 18535 "grammar.ec" /* yacc.c:1663  */
    break;

  case 978:
#line 3002 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[0].pointer), null); }
#line 18541 "grammar.ec" /* yacc.c:1663  */
    break;

  case 980:
#line 3004 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator)); }
#line 18547 "grammar.ec" /* yacc.c:1663  */
    break;

  case 981:
#line 3005 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-1].extDecl), MkDeclaratorPointer((yyvsp[0].pointer), null)); }
#line 18553 "grammar.ec" /* yacc.c:1663  */
    break;

  case 982:
#line 3006 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-2].extDecl), MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator))); }
#line 18559 "grammar.ec" /* yacc.c:1663  */
    break;

  case 984:
#line 3012 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator)); }
#line 18565 "grammar.ec" /* yacc.c:1663  */
    break;

  case 985:
#line 3014 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-2].extDecl), MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator))); }
#line 18571 "grammar.ec" /* yacc.c:1663  */
    break;

  case 986:
#line 3016 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[0].extDecl), (yyvsp[-1].declarator)); }
#line 18577 "grammar.ec" /* yacc.c:1663  */
    break;

  case 987:
#line 3018 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[0].extDecl), (yyvsp[-1].declarator)); }
#line 18583 "grammar.ec" /* yacc.c:1663  */
    break;

  case 989:
#line 3024 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator)); }
#line 18589 "grammar.ec" /* yacc.c:1663  */
    break;

  case 990:
#line 3026 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-2].extDecl), MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator))); }
#line 18595 "grammar.ec" /* yacc.c:1663  */
    break;

  case 991:
#line 3028 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[0].extDecl), (yyvsp[-1].declarator)); }
#line 18601 "grammar.ec" /* yacc.c:1663  */
    break;

  case 993:
#line 3033 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator)); }
#line 18607 "grammar.ec" /* yacc.c:1663  */
    break;

  case 994:
#line 3034 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-2].extDecl), MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator))); }
#line 18613 "grammar.ec" /* yacc.c:1663  */
    break;

  case 995:
#line 3035 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-2].pointer), MkDeclaratorExtended((yyvsp[-1].extDecl), (yyvsp[0].declarator))); }
#line 18619 "grammar.ec" /* yacc.c:1663  */
    break;

  case 997:
#line 3040 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator)); }
#line 18625 "grammar.ec" /* yacc.c:1663  */
    break;

  case 998:
#line 3041 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-2].extDecl), MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator))); }
#line 18631 "grammar.ec" /* yacc.c:1663  */
    break;

  case 999:
#line 3042 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-2].pointer), MkDeclaratorExtended((yyvsp[-1].extDecl), (yyvsp[0].declarator))); }
#line 18637 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1001:
#line 3047 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator)); }
#line 18643 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1002:
#line 3048 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-2].extDecl), MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator))); }
#line 18649 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1003:
#line 3049 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-2].pointer), MkDeclaratorExtended((yyvsp[-1].extDecl), (yyvsp[0].declarator))); }
#line 18655 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1005:
#line 3054 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator)); }
#line 18661 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1006:
#line 3055 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-2].extDecl), MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator))); }
#line 18667 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1007:
#line 3056 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-2].pointer), MkDeclaratorExtended((yyvsp[-1].extDecl), (yyvsp[0].declarator))); }
#line 18673 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1009:
#line 3061 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator)); }
#line 18679 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1010:
#line 3062 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[-2].extDecl), MkDeclaratorPointer((yyvsp[-1].pointer), (yyvsp[0].declarator))); }
#line 18685 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1011:
#line 3063 "grammar.y" /* yacc.c:1663  */
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[-2].pointer), MkDeclaratorExtended((yyvsp[-1].extDecl), (yyvsp[0].declarator))); }
#line 18691 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1012:
#line 3067 "grammar.y" /* yacc.c:1663  */
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[0].exp)); (yyval.initializer).loc = (yyloc); }
#line 18697 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1013:
#line 3068 "grammar.y" /* yacc.c:1663  */
    { (yyval.initializer) = MkInitializerList((yyvsp[-1].list)); (yyval.initializer).loc = (yyloc); }
#line 18703 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1014:
#line 3070 "grammar.y" /* yacc.c:1663  */
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[-2].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[-1]);
            exp.loc = (yylsp[-1]);
            ListAdd((yyvsp[-2].list), init);
         }
      }
#line 18721 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1015:
#line 3086 "grammar.y" /* yacc.c:1663  */
    { (yyval.initializer) = MkInitializerList((yyvsp[-1].list)); (yyval.initializer).loc = (yyloc); }
#line 18727 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1016:
#line 3088 "grammar.y" /* yacc.c:1663  */
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[-2].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[-1]);
            exp.loc = (yylsp[-1]);
            ListAdd((yyvsp[-2].list), init);
         }
      }
#line 18745 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1017:
#line 3104 "grammar.y" /* yacc.c:1663  */
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[0].exp)); (yyval.initializer).loc = (yyloc); }
#line 18751 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1018:
#line 3105 "grammar.y" /* yacc.c:1663  */
    { (yyval.initializer) = MkInitializerList((yyvsp[-2].list)); (yyval.initializer).loc = (yyloc); }
#line 18757 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1019:
#line 3106 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[0].list)); (yyval.initializer).loc = (yyloc); }
#line 18763 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1020:
#line 3108 "grammar.y" /* yacc.c:1663  */
    {
         (yyval.initializer) = MkInitializerList((yyvsp[-3].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[-2]);
            exp.loc = (yylsp[-2]);
            ListAdd((yyvsp[-3].list), init);
         }
      }
#line 18780 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1021:
#line 3121 "grammar.y" /* yacc.c:1663  */
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[-1].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[0]);
            exp.loc = (yylsp[0]);
            ListAdd((yyvsp[-1].list), init);
         }
      }
#line 18798 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1022:
#line 3137 "grammar.y" /* yacc.c:1663  */
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[0].exp)); (yyval.initializer).loc = (yyloc); }
#line 18804 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1023:
#line 3139 "grammar.y" /* yacc.c:1663  */
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[0].exp)); (yyval.initializer).loc = (yyloc); }
#line 18810 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1024:
#line 3143 "grammar.y" /* yacc.c:1663  */
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[0].exp)); (yyval.initializer).loc = (yyloc); }
#line 18816 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1025:
#line 3144 "grammar.y" /* yacc.c:1663  */
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[0].exp)); (yyval.initializer).loc = (yyloc); }
#line 18822 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1026:
#line 3148 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].initializer)); }
#line 18828 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1027:
#line 3149 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].initializer)); }
#line 18834 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1028:
#line 3150 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].initializer)); }
#line 18840 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1029:
#line 3151 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].initializer)); }
#line 18846 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1030:
#line 3154 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].initializer)); }
#line 18852 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1031:
#line 3155 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].initializer)); }
#line 18858 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1032:
#line 3159 "grammar.y" /* yacc.c:1663  */
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[0].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
#line 18864 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1033:
#line 3160 "grammar.y" /* yacc.c:1663  */
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[0].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
#line 18870 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1034:
#line 3161 "grammar.y" /* yacc.c:1663  */
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[-2].declarator), (yyvsp[0].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[-1]).end; }
#line 18876 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1035:
#line 3165 "grammar.y" /* yacc.c:1663  */
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[-1].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
#line 18882 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1036:
#line 3169 "grammar.y" /* yacc.c:1663  */
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[-2].declarator), (yyvsp[0].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[-1]).end; }
#line 18888 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1037:
#line 3173 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].initDeclarator)); }
#line 18894 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1038:
#line 3174 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].initDeclarator)); }
#line 18900 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1039:
#line 3175 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[0].initDeclarator)); }
#line 18906 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1040:
#line 3176 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[0].initDeclarator)); }
#line 18912 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1041:
#line 3177 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__int128")), null)); ListAdd((yyval.list), (yyvsp[0].initDeclarator)); }
#line 18918 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1042:
#line 3178 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__float128")), null)); ListAdd((yyval.list), (yyvsp[0].initDeclarator)); }
#line 18924 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1043:
#line 3180 "grammar.y" /* yacc.c:1663  */
    {
      char * colon = RSearchString((yyvsp[-2].specifier).name, "::", strlen((yyvsp[-2].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[-2].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[0].initDeclarator));
      FreeSpecifier((yyvsp[-2].specifier));
   }
#line 18937 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1044:
#line 3188 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].initDeclarator)); }
#line 18943 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1045:
#line 3197 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].initDeclarator)); }
#line 18949 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1046:
#line 3198 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[-1].initDeclarator)); }
#line 18955 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1047:
#line 3199 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].initDeclarator)); }
#line 18961 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1048:
#line 3200 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].initDeclarator)); }
#line 18967 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1049:
#line 3204 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName((yyvsp[0].list), null); }
#line 18973 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1050:
#line 3205 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName((yyvsp[-1].list), (yyvsp[0].declarator)); }
#line 18979 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1051:
#line 3209 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName((yyvsp[0].list), null); }
#line 18985 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1052:
#line 3210 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName((yyvsp[-1].list), (yyvsp[0].declarator)); }
#line 18991 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1053:
#line 3215 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName((yyvsp[-1].list), (yyvsp[0].declarator)); }
#line 18997 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1054:
#line 3216 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName((yyvsp[-1].list), (yyvsp[0].declarator)); }
#line 19003 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1055:
#line 3217 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName((yyvsp[-1].list), MkDeclaratorPointer(MkPointer(null,null), null)); }
#line 19009 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1056:
#line 3218 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName((yyvsp[-2].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[0].declarator))); }
#line 19015 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1057:
#line 3219 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[0].list), null); }
#line 19021 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1058:
#line 3221 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); }
#line 19027 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1059:
#line 3239 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName((yyvsp[-2].list), (yyvsp[-1].declarator)); }
#line 19033 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1060:
#line 3240 "grammar.y" /* yacc.c:1663  */
    { (yyval.typeName) = MkTypeName((yyvsp[-2].list), (yyvsp[-1].declarator)); }
#line 19039 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1061:
#line 3244 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].typeName)); }
#line 19045 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1062:
#line 3245 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].typeName)); }
#line 19051 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1063:
#line 3246 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-3].list); ListAdd((yyvsp[-3].list), (yyvsp[0].typeName)); }
#line 19057 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1064:
#line 3247 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].typeName)); }
#line 19063 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1065:
#line 3248 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-3].list); ListAdd((yyvsp[-3].list), (yyvsp[0].typeName)); }
#line 19069 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1066:
#line 3249 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[0].typeName)); }
#line 19075 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1067:
#line 3251 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].typeName)); }
#line 19081 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1068:
#line 3252 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-3].list); ListAdd((yyvsp[-3].list), (yyvsp[0].typeName)); }
#line 19087 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1069:
#line 3253 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].typeName)); }
#line 19093 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1070:
#line 3254 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-3].list); ListAdd((yyvsp[-3].list), (yyvsp[0].typeName)); }
#line 19099 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1071:
#line 3258 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].typeName)); }
#line 19105 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1072:
#line 3259 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].typeName)); }
#line 19111 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1073:
#line 3260 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].typeName)); }
#line 19117 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1074:
#line 3261 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-3].list); ListAdd((yyvsp[-3].list), (yyvsp[0].typeName)); }
#line 19123 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1075:
#line 3262 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[0].typeName)); }
#line 19129 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1076:
#line 3264 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].typeName)); }
#line 19135 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1077:
#line 3265 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), (yyvsp[0].typeName)); }
#line 19141 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1078:
#line 3266 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-3].list); ListAdd((yyvsp[-3].list), (yyvsp[0].typeName)); }
#line 19147 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1080:
#line 3271 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), MkTypeName(null, null)); }
#line 19153 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1081:
#line 3272 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), MkTypeName(null, null)); }
#line 19159 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1082:
#line 3273 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), MkTypeName(null, null)); }
#line 19165 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1083:
#line 3274 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), MkTypeName(null, null)); }
#line 19171 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1084:
#line 3275 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); }
#line 19177 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1086:
#line 3280 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), null); }
#line 19183 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1089:
#line 3287 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[0].attrib)); }
#line 19189 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1091:
#line 3289 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkExpressionStmt(null); }
#line 19195 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1092:
#line 3290 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkExpressionStmt(null); }
#line 19201 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1093:
#line 3291 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkExpressionStmt((yyvsp[-1].list)); (yyval.stmt).loc = (yyloc); }
#line 19207 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1101:
#line 3302 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = (yyvsp[0].stmt); Compiler_Error($"syntax error\n"); }
#line 19213 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1102:
#line 3303 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = (yyvsp[0].stmt); Compiler_Error($"syntax error\n"); }
#line 19219 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1103:
#line 3304 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = (yyvsp[0].stmt); Compiler_Error($"syntax error\n"); }
#line 19225 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1104:
#line 3305 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = (yyvsp[0].stmt); Compiler_Error($"syntax error\n"); }
#line 19231 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1105:
#line 3306 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = (yyvsp[0].stmt); Compiler_Error($"syntax error\n"); }
#line 19237 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1106:
#line 3307 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = (yyvsp[-1].stmt); Compiler_Error($"syntax error\n"); }
#line 19243 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1107:
#line 3308 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkExpressionStmt((yyvsp[0].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[0]); }
#line 19249 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1108:
#line 3312 "grammar.y" /* yacc.c:1663  */
    { (yyval.asmField) = MkAsmField((yyvsp[0].string), null, null); (yyval.asmField).loc = (yylsp[0]); }
#line 19255 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1109:
#line 3313 "grammar.y" /* yacc.c:1663  */
    { (yyval.asmField) = MkAsmField((yyvsp[-3].string), (yyvsp[-1].exp), null); (yyval.asmField).loc = (yyloc); }
#line 19261 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1110:
#line 3314 "grammar.y" /* yacc.c:1663  */
    { (yyval.asmField) = MkAsmField((yyvsp[-3].string), (yyvsp[-1].exp), (yyvsp[-5].id)); (yyval.asmField).loc = (yyloc); }
#line 19267 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1111:
#line 3318 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkListOne((yyvsp[0].asmField)); }
#line 19273 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1112:
#line 3319 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyval.list), (yyvsp[0].asmField)); }
#line 19279 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1113:
#line 3320 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = null; }
#line 19285 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1114:
#line 3324 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt((yyvsp[-4].specifier), (yyvsp[-2].string), null, null, null); (yyval.stmt).loc = (yyloc); }
#line 19291 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1115:
#line 3325 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt((yyvsp[-6].specifier), (yyvsp[-4].string), (yyvsp[-2].list), null, null); (yyval.stmt).loc = (yyloc); }
#line 19297 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1116:
#line 3326 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt((yyvsp[-8].specifier), (yyvsp[-6].string), (yyvsp[-4].list), (yyvsp[-2].list), null); (yyval.stmt).loc = (yyloc); }
#line 19303 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1117:
#line 3327 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt((yyvsp[-10].specifier), (yyvsp[-8].string), (yyvsp[-6].list), (yyvsp[-4].list), (yyvsp[-2].list)); (yyval.stmt).loc = (yyloc); }
#line 19309 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1118:
#line 3329 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt((yyvsp[-6].specifier), (yyvsp[-4].string), null, (yyvsp[-2].list), null); (yyval.stmt).loc = (yyloc); }
#line 19315 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1119:
#line 3330 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt((yyvsp[-8].specifier), (yyvsp[-6].string), null, (yyvsp[-4].list), (yyvsp[-2].list)); (yyval.stmt).loc = (yyloc); }
#line 19321 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1120:
#line 3331 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt((yyvsp[-8].specifier), (yyvsp[-6].string), (yyvsp[-4].list), null, (yyvsp[-2].list)); (yyval.stmt).loc = (yyloc); }
#line 19327 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1121:
#line 3333 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[-2].string), null, null, null); (yyval.stmt).loc = (yyloc); }
#line 19333 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1122:
#line 3334 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[-4].string), (yyvsp[-2].list), null, null); (yyval.stmt).loc = (yyloc); }
#line 19339 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1123:
#line 3335 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[-6].string), (yyvsp[-4].list), (yyvsp[-2].list), null); (yyval.stmt).loc = (yyloc); }
#line 19345 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1124:
#line 3336 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[-8].string), (yyvsp[-6].list), (yyvsp[-4].list), (yyvsp[-2].list)); (yyval.stmt).loc = (yyloc); }
#line 19351 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1125:
#line 3338 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[-4].string), null, (yyvsp[-2].list), null); (yyval.stmt).loc = (yyloc); }
#line 19357 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1126:
#line 3339 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[-6].string), null, (yyvsp[-4].list), (yyvsp[-2].list)); (yyval.stmt).loc = (yyloc); }
#line 19363 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1127:
#line 3340 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[-6].string), (yyvsp[-4].list), null, (yyvsp[-2].list)); (yyval.stmt).loc = (yyloc); }
#line 19369 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1128:
#line 3344 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkLabeledStmt((yyvsp[-2].id), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19375 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1129:
#line 3345 "grammar.y" /* yacc.c:1663  */
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[-2].exp), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[-2].exp).loc.start = (yylsp[-3]).end; }
#line 19381 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1130:
#line 3346 "grammar.y" /* yacc.c:1663  */
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[-2].exp), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[-2].exp).loc.start = (yylsp[-3]).end; }
#line 19387 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1131:
#line 3347 "grammar.y" /* yacc.c:1663  */
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[0].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[-1]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[-2]).end; }
#line 19393 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1132:
#line 3348 "grammar.y" /* yacc.c:1663  */
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19399 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1133:
#line 3350 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[-2].id), stmt); (yyval.stmt).loc = (yyloc); }
#line 19405 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1134:
#line 3351 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[-2].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[-2].exp).loc.start = (yylsp[-3]).end; }
#line 19411 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1135:
#line 3352 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[-2].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[-2].exp).loc.start = (yylsp[-3]).end; }
#line 19417 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1136:
#line 3353 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[-1]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[-2]).end; }
#line 19423 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1137:
#line 3354 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
#line 19429 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1138:
#line 3358 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkLabeledStmt((yyvsp[-2].id), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19435 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1139:
#line 3359 "grammar.y" /* yacc.c:1663  */
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[-2].exp), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[-2].exp).loc.start = (yylsp[-3]).end; }
#line 19441 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1140:
#line 3360 "grammar.y" /* yacc.c:1663  */
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[-2].exp), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[-2].exp).loc.start = (yylsp[-3]).end; }
#line 19447 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1141:
#line 3361 "grammar.y" /* yacc.c:1663  */
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[0].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[-1]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[-2]).end; }
#line 19453 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1142:
#line 3362 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[0]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[-1]).end; }
#line 19459 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1143:
#line 3363 "grammar.y" /* yacc.c:1663  */
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19465 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1144:
#line 3364 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); }
#line 19471 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1145:
#line 3366 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[-2].id), stmt); (yyval.stmt).loc = (yyloc); }
#line 19477 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1146:
#line 3367 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[-2].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[-2].exp).loc.start = (yylsp[-3]).end; }
#line 19483 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1147:
#line 3368 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[-2].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[-2].exp).loc.start = (yylsp[-3]).end; }
#line 19489 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1148:
#line 3369 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[-1]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[-2]).end; }
#line 19495 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1149:
#line 3370 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
#line 19501 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1150:
#line 3374 "grammar.y" /* yacc.c:1663  */
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; }
#line 19507 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1151:
#line 3375 "grammar.y" /* yacc.c:1663  */
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; }
#line 19513 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1152:
#line 3376 "grammar.y" /* yacc.c:1663  */
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; }
#line 19519 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1153:
#line 3380 "grammar.y" /* yacc.c:1663  */
    { (yyval.declMode) = publicAccess; }
#line 19525 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1154:
#line 3381 "grammar.y" /* yacc.c:1663  */
    { (yyval.declMode) = privateAccess; }
#line 19531 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1155:
#line 3385 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclaration((yyvsp[-1].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
#line 19537 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1156:
#line 3386 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclaration((yyvsp[-2].list), (yyvsp[-1].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
#line 19543 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1157:
#line 3387 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclarationInst((yyvsp[-1].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
#line 19549 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1158:
#line 3388 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = (yyvsp[-1].declaration); structDeclMode = defaultDeclMode; }
#line 19555 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1159:
#line 3389 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkExpDummy(); (yyval.declaration).loc = (yyloc); FreeList((yyvsp[-1].list), FreeExpression); }
#line 19561 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1160:
#line 3390 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkExpDummy(); (yyval.declaration).loc = (yyloc); FreeList((yyvsp[-3].list), FreeExpression); delete (yyvsp[-1].string); }
#line 19567 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1161:
#line 3394 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclaration((yyvsp[-1].list), null); (yyval.declaration).loc = (yyloc); }
#line 19573 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1162:
#line 3395 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclaration((yyvsp[-2].list), (yyvsp[-1].list)); (yyval.declaration).loc = (yyloc); }
#line 19579 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1163:
#line 3396 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclaration((yyvsp[-2].list), (yyvsp[-1].list)); (yyval.declaration).loc = (yyloc); }
#line 19585 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1164:
#line 3398 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclarationInst((yyvsp[-1].instance)); (yyval.declaration).loc = (yyloc); }
#line 19591 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1165:
#line 3399 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[-3].id), (yyvsp[-1].exp)); (yyval.declaration).loc = (yyloc); }
#line 19597 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1166:
#line 3400 "grammar.y" /* yacc.c:1663  */
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[-3].id), (yyvsp[-1].exp)); (yyval.declaration).loc = (yyloc); }
#line 19603 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1167:
#line 3404 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclaration((yyvsp[-1].list), null); (yyval.declaration).loc = (yyloc); yyerrok; }
#line 19609 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1168:
#line 3408 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclaration((yyvsp[-1].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
#line 19615 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1169:
#line 3409 "grammar.y" /* yacc.c:1663  */
    { structDeclMode = defaultDeclMode;  }
#line 19621 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1170:
#line 3411 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclarationInst((yyvsp[-1].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
#line 19627 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1171:
#line 3412 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclarationInst((yyvsp[-1].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
#line 19633 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1172:
#line 3413 "grammar.y" /* yacc.c:1663  */
    { (yyval.declaration) = MkDeclaration((yyvsp[-1].list), (yyvsp[0].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
#line 19639 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1173:
#line 3417 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].declaration)); /*declMode = defaultDeclMode;*/ }
#line 19645 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1174:
#line 3418 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].declaration)); /*declMode = defaultDeclMode; */}
#line 19651 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1175:
#line 3419 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].declaration)); /*declMode = defaultDeclMode; */}
#line 19657 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1176:
#line 3420 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-2].list); }
#line 19663 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1177:
#line 3424 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].declaration)); }
#line 19669 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1178:
#line 3425 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].declaration)); }
#line 19675 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1179:
#line 3429 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].stmt)); }
#line 19681 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1180:
#line 3430 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].stmt)); }
#line 19687 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1181:
#line 3431 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].stmt)); }
#line 19693 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1182:
#line 3435 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].stmt)); }
#line 19699 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1183:
#line 3436 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].stmt)); }
#line 19705 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1184:
#line 3437 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].stmt)); }
#line 19711 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1185:
#line 3438 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), stmt); /*declMode = defaultDeclMode;*/ }
#line 19717 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1186:
#line 3439 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), stmt); /*declMode = defaultDeclMode;*/ }
#line 19723 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1187:
#line 3440 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), stmt); /*declMode = defaultDeclMode;*/ }
#line 19729 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1188:
#line 3441 "grammar.y" /* yacc.c:1663  */
    { Statement stmt = MkBadDeclStmt((yyvsp[0].declaration)); stmt.loc = (yylsp[0]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), stmt); /*declMode = defaultDeclMode;*/ }
#line 19735 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1189:
#line 3445 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[0].list)); }
#line 19741 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1190:
#line 3446 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCompoundStmt((yyvsp[0].list), null); }
#line 19747 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1191:
#line 3447 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCompoundStmt((yyvsp[-1].list), (yyvsp[0].list)); }
#line 19753 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1192:
#line 3448 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCompoundStmt((yyvsp[-1].list), (yyvsp[0].list)); }
#line 19759 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1193:
#line 3452 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[0].list)); }
#line 19765 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1194:
#line 3453 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCompoundStmt((yyvsp[0].list), null); }
#line 19771 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1195:
#line 3454 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCompoundStmt((yyvsp[-1].list), (yyvsp[0].list)); }
#line 19777 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1196:
#line 3455 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCompoundStmt((yyvsp[-1].list), (yyvsp[0].list)); }
#line 19783 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1197:
#line 3459 "grammar.y" /* yacc.c:1663  */
    { (yyval.context) = PushContext(); }
#line 19789 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1198:
#line 3463 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = (yyvsp[-1].stmt); (yyval.stmt).loc = (yyloc); }
#line 19795 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1199:
#line 3468 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = (yyvsp[0].stmt); (yyval.stmt).compound.context = (yyvsp[-1].context); PopContext((yyvsp[-1].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
#line 19801 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1200:
#line 3470 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[0].context); PopContext((yyvsp[0].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
#line 19807 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1201:
#line 3473 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = (yyvsp[0].stmt); (yyval.stmt).compound.context = (yyvsp[-1].context); PopContext((yyvsp[-1].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
#line 19813 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1202:
#line 3478 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); }
#line 19819 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1203:
#line 3479 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkExpressionStmt((yyvsp[-1].list)); (yyval.stmt).loc = (yyloc); }
#line 19825 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1204:
#line 3480 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkExpressionStmt((yyvsp[-1].list)); (yyval.stmt).loc = (yyloc); }
#line 19831 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1205:
#line 3484 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkIfStmt((yyvsp[-2].list), (yyvsp[0].stmt), null); (yyval.stmt).loc = (yyloc); }
#line 19837 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1206:
#line 3485 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkIfStmt((yyvsp[-2].list), (yyvsp[0].stmt), null); (yyval.stmt).loc = (yyloc); }
#line 19843 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1207:
#line 3486 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkIfStmt((yyvsp[-4].list), (yyvsp[-2].stmt), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19849 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1208:
#line 3487 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkIfStmt((yyvsp[-4].list), (yyvsp[-2].stmt), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19855 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1209:
#line 3488 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkSwitchStmt((yyvsp[-2].list), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19861 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1210:
#line 3489 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkSwitchStmt((yyvsp[-2].list), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19867 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1211:
#line 3493 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkIfStmt((yyvsp[0].list), null, null); (yyval.stmt).loc = (yyloc); }
#line 19873 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1213:
#line 3498 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkWhileStmt((yyvsp[-2].list), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19879 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1214:
#line 3499 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkWhileStmt((yyvsp[-1].list), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19885 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1215:
#line 3500 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19891 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1216:
#line 3502 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[-5].stmt), (yyvsp[-2].list)); (yyval.stmt).loc = (yyloc); }
#line 19897 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1217:
#line 3503 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[-4].stmt), (yyvsp[-1].list)); (yyval.stmt).loc = (yyloc); }
#line 19903 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1218:
#line 3505 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt((yyvsp[-3].stmt), (yyvsp[-2].stmt), null, (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19909 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1219:
#line 3506 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[-2].stmt), null, null, (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19915 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1220:
#line 3507 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt((yyvsp[-4].stmt), (yyvsp[-3].stmt), (yyvsp[-2].list), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19921 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1221:
#line 3508 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt((yyvsp[-3].stmt), (yyvsp[-2].stmt), (yyvsp[-1].list), (yyvsp[0].stmt) ); (yyval.stmt).loc = (yyloc); }
#line 19927 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1222:
#line 3509 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19933 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1223:
#line 3511 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForEachStmt((yyvsp[-4].id), (yyvsp[-2].list), null, (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19939 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1224:
#line 3512 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForEachStmt((yyvsp[-6].id), (yyvsp[-4].list), (yyvsp[-2].list), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19945 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1225:
#line 3516 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); }
#line 19951 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1226:
#line 3517 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[-1].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[-1]); (yyval.stmt).loc = (yyloc); }
#line 19957 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1227:
#line 3518 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt((yyvsp[-1].stmt), null, null, null); (yyval.stmt).loc = (yyloc); }
#line 19963 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1228:
#line 3519 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt((yyvsp[-2].stmt), MkExpressionStmt((yyvsp[-1].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[-1]); }
#line 19969 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1229:
#line 3523 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt((yyvsp[-2].stmt), (yyvsp[-1].stmt), (yyvsp[0].list), null); (yyval.stmt).loc = (yyloc); }
#line 19975 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1230:
#line 3524 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt((yyvsp[-3].stmt), (yyvsp[-2].stmt), null, (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19981 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1231:
#line 3525 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt((yyvsp[-4].stmt), (yyvsp[-3].stmt), (yyvsp[-2].list), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 19987 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1232:
#line 3526 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkForStmt((yyvsp[-3].stmt), (yyvsp[-2].stmt), (yyvsp[-1].list), (yyvsp[0].stmt) ); (yyval.stmt).loc = (yyloc); }
#line 19993 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1233:
#line 3528 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[-4].stmt), (yyvsp[-1].list)); (yyval.stmt).loc = (yyloc); }
#line 19999 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1234:
#line 3529 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[-3].stmt), (yyvsp[0].list)); (yyval.stmt).loc = (yyloc); }
#line 20005 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1235:
#line 3530 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[-3].stmt), (yyvsp[0].list)); (yyval.stmt).loc = (yyloc); }
#line 20011 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1236:
#line 3531 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[-2].stmt), null); (yyval.stmt).loc = (yyloc); }
#line 20017 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1237:
#line 3532 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[-1].stmt), null); (yyval.stmt).loc = (yyloc); }
#line 20023 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1238:
#line 3533 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[0].stmt), null); (yyval.stmt).loc = (yyloc); }
#line 20029 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1239:
#line 3534 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
#line 20035 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1240:
#line 3537 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
#line 20041 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1241:
#line 3541 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
#line 20047 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1242:
#line 3542 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkWhileStmt((yyvsp[0].list), null); (yyval.stmt).loc = (yyloc); }
#line 20053 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1243:
#line 3546 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkWhileStmt((yyvsp[-2].list), (yyvsp[0].stmt)); (yyval.stmt).loc = (yyloc); }
#line 20059 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1244:
#line 3547 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkWhileStmt((yyvsp[-1].list), (yyvsp[0].stmt) ); (yyval.stmt).loc = (yyloc); }
#line 20065 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1245:
#line 3551 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkGotoStmt((yyvsp[-1].id)); (yyval.stmt).loc = (yyloc); }
#line 20071 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1246:
#line 3552 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); }
#line 20077 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1247:
#line 3553 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); }
#line 20083 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1248:
#line 3554 "grammar.y" /* yacc.c:1663  */
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[0]); }
#line 20089 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1249:
#line 3555 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkReturnStmt((yyvsp[-1].list)); (yyval.stmt).loc = (yyloc); }
#line 20095 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1250:
#line 3556 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkReturnStmt((yyvsp[-1].list)); (yyval.stmt).loc = (yyloc); }
#line 20101 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1251:
#line 3557 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[-1].exp))); (yyval.stmt).loc = (yyloc); }
#line 20107 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1252:
#line 3558 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[-1].exp))); (yyval.stmt).loc = (yyloc); }
#line 20113 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1253:
#line 3562 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkReturnStmt((yyvsp[0].list)); (yyval.stmt).loc = (yyloc); }
#line 20119 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1254:
#line 3563 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[0].exp))); (yyval.stmt).loc = (yyloc); }
#line 20125 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1255:
#line 3564 "grammar.y" /* yacc.c:1663  */
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[0]).end; }
#line 20131 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1256:
#line 3565 "grammar.y" /* yacc.c:1663  */
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); }
#line 20137 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1257:
#line 3571 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction((yyvsp[-3].list), (yyvsp[-2].declarator), (yyvsp[-1].list)); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); }
#line 20143 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1258:
#line 3573 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction((yyvsp[-2].list), (yyvsp[-1].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); }
#line 20149 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1259:
#line 3574 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction((yyvsp[-3].list), (yyvsp[-2].declarator), (yyvsp[-1].list)); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); }
#line 20155 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1260:
#line 3576 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction((yyvsp[-2].list), (yyvsp[-1].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); }
#line 20161 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1261:
#line 3578 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction(null, (yyvsp[-2].declarator), (yyvsp[-1].list)); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); }
#line 20167 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1262:
#line 3579 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction(null, (yyvsp[-1].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc);}
#line 20173 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1263:
#line 3582 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction((yyvsp[-3].list), (yyvsp[-2].declarator), (yyvsp[-1].list)); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[0].stmt).loc.end; }
#line 20179 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1264:
#line 3583 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction((yyvsp[-2].list), (yyvsp[-1].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[0].stmt).loc.end; }
#line 20185 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1265:
#line 3584 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction((yyvsp[-3].list), (yyvsp[-2].declarator), (yyvsp[-1].list)); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[0].stmt).loc.end; }
#line 20191 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1266:
#line 3585 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction((yyvsp[-2].list), (yyvsp[-1].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[0].stmt).loc.end; }
#line 20197 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1267:
#line 3586 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction(null, (yyvsp[-2].declarator), (yyvsp[-1].list)); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[0].stmt).loc.end; }
#line 20203 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1268:
#line 3587 "grammar.y" /* yacc.c:1663  */
    { (yyval.function) = MkFunction(null, (yyvsp[-1].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[0].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[0].stmt).loc.end; }
#line 20209 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1269:
#line 3591 "grammar.y" /* yacc.c:1663  */
    { (yyval.string) = CopyString(yytext); }
#line 20215 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1270:
#line 3593 "grammar.y" /* yacc.c:1663  */
    {
      int len1 = strlen((yyvsp[-1].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[-1].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[-1].string);
   }
#line 20228 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1271:
#line 3604 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalFunction((yyvsp[0].function)); (yyval.external).loc = (yyloc); (yyvsp[0].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
#line 20234 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1272:
#line 3606 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalClass((yyvsp[0]._class));  (yyval.external).loc = (yyloc); (yyvsp[0]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
#line 20240 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1273:
#line 3609 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalClass((yyvsp[0]._class));  (yyval.external).loc = (yyloc); (yyvsp[0]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[-1].list), FreeSpecifier); }
#line 20246 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1274:
#line 3612 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalDeclaration((yyvsp[0].declaration));  (yyval.external).loc = (yyloc); (yyvsp[0].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
#line 20252 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1275:
#line 3613 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalImport((yyvsp[0].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
#line 20258 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1276:
#line 3614 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalImport((yyvsp[0].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
#line 20264 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1277:
#line 3616 "grammar.y" /* yacc.c:1663  */
    {
      bool isRemote = !strcmp((yyvsp[-1].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[0].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[-1].id));
      if(!isRemote)
         yyerror();
   }
#line 20277 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1278:
#line 3625 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = null; }
#line 20283 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1279:
#line 3627 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalFunction((yyvsp[0].function)); (yyval.external).loc = (yyloc); (yyvsp[0].function).declMode = (yyvsp[-1].declMode); structDeclMode = declMode = defaultDeclMode; }
#line 20289 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1280:
#line 3629 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalClass((yyvsp[0]._class));  (yyval.external).loc = (yyloc); (yyvsp[0]._class).declMode = ((yyvsp[-1].declMode) != defaultAccess) ? (yyvsp[-1].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
#line 20295 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1281:
#line 3630 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalDeclaration((yyvsp[0].declaration)); (yyval.external).loc = (yyloc); (yyvsp[0].declaration).declMode = (yyvsp[-1].declMode); structDeclMode = declMode = defaultDeclMode; }
#line 20301 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1282:
#line 3631 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalImport((yyvsp[0].string), normalImport, ((yyvsp[-2].declMode) != defaultAccess) ? (yyvsp[-2].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
#line 20307 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1283:
#line 3632 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalImport((yyvsp[0].string), staticImport, ((yyvsp[-3].declMode) != defaultAccess) ? (yyvsp[-3].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
#line 20313 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1284:
#line 3634 "grammar.y" /* yacc.c:1663  */
    {
      bool isRemote = !strcmp((yyvsp[-1].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[0].string), isRemote ? remoteImport : normalImport, ((yyvsp[-3].declMode) != defaultAccess) ? (yyvsp[-3].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[-1].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   }
#line 20327 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1285:
#line 3643 "grammar.y" /* yacc.c:1663  */
    { defaultDeclMode = (yyvsp[-1].declMode); (yyval.external) = null; }
#line 20333 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1286:
#line 3644 "grammar.y" /* yacc.c:1663  */
    { defaultDeclMode = staticAccess; (yyval.external) = null; }
#line 20339 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1287:
#line 3645 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalNameSpace((yyvsp[0].id)); (yyval.external).loc = (yyloc); }
#line 20345 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1288:
#line 3646 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[0].specifier).name)); FreeSpecifier((yyvsp[0].specifier)); (yyval.external).loc = (yyloc); }
#line 20351 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1289:
#line 3647 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalDBTable((yyvsp[0].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[0].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
#line 20357 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1290:
#line 3648 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalDBTable((yyvsp[0].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[0].dbtableDef).declMode = ((yyvsp[-1].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
#line 20363 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1291:
#line 3649 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExternalPragma(yytext); (yyval.external).loc = (yyloc); }
#line 20369 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1292:
#line 3650 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExpDummy(); (yyval.external).loc = (yyloc); FreeList((yyvsp[-1].list), FreeExpression); }
#line 20375 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1293:
#line 3651 "grammar.y" /* yacc.c:1663  */
    { (yyval.external) = MkExpDummy(); (yyval.external).loc = (yyloc); FreeList((yyvsp[-3].list), FreeExpression); delete (yyvsp[-1].string); }
#line 20381 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1294:
#line 3655 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[0]._class));  (yyval.external).loc = (yyvsp[0]._class).loc; (yyvsp[0]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
#line 20387 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1295:
#line 3657 "grammar.y" /* yacc.c:1663  */
    {
      yyerror();
      FreeList((yyvsp[-1].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[0]._class));
      (yyval.external).loc = (yyvsp[0]._class).loc;
      (yyvsp[0]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   }
#line 20400 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1296:
#line 3665 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[0].function)); (yyval.external).loc = (yyvsp[0].function).loc;  (yyvsp[0].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
#line 20406 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1297:
#line 3667 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[0]._class));  (yyval.external).loc = (yyvsp[0]._class).loc; (yyvsp[0]._class).declMode = ((yyvsp[-1].declMode) != defaultAccess) ? (yyvsp[-1].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
#line 20412 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1298:
#line 3668 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[0].function)); (yyval.external).loc = (yyvsp[0].function).loc; (yyvsp[0].function).declMode = (yyvsp[-1].declMode); structDeclMode = declMode = defaultDeclMode; }
#line 20418 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1299:
#line 3671 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[0].declaration));  (yyval.external).loc = (yyloc); (yyvsp[0].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
#line 20424 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1300:
#line 3672 "grammar.y" /* yacc.c:1663  */
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[0].declaration)); (yyval.external).loc = (yyloc); (yyvsp[0].declaration).declMode = (yyvsp[-1].declMode); structDeclMode = declMode = defaultDeclMode; }
#line 20430 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1301:
#line 3676 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].external)); ast = (yyval.list); }
#line 20436 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1302:
#line 3677 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].external)); }
#line 20442 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1303:
#line 3678 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].external)); }
#line 20448 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1306:
#line 3684 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].external)); ast = (yyval.list); }
#line 20454 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1307:
#line 3685 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), (yyvsp[0].external)); }
#line 20460 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1308:
#line 3687 "grammar.y" /* yacc.c:1663  */
    { External _class = MkExternalClass((yyvsp[0]._class)); (yyval.list) = (yyvsp[-1].list); ListAdd((yyvsp[-1].list), _class); _class.loc = (yylsp[0]);  (yyvsp[0]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
#line 20466 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1309:
#line 3689 "grammar.y" /* yacc.c:1663  */
    { External _class = MkExternalClass((yyvsp[0]._class)); (yyval.list) = (yyvsp[-2].list); ListAdd((yyvsp[-2].list), _class); _class.loc = (yylsp[0]);  (yyvsp[0]._class).declMode = ((yyvsp[-1].declMode) != defaultAccess) ? (yyvsp[-1].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
#line 20472 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1312:
#line 3695 "grammar.y" /* yacc.c:1663  */
    { ast = MkList(); }
#line 20478 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1313:
#line 3699 "grammar.y" /* yacc.c:1663  */
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[-3].id)._class, (yyvsp[-3].id).string); FreeIdentifier((yyvsp[-3].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[-4].string), symbol, (yyvsp[-1].list)); }
#line 20484 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1314:
#line 3700 "grammar.y" /* yacc.c:1663  */
    { Symbol symbol = DeclClass((yyvsp[-3].specifier).nsSpec, (yyvsp[-3].specifier).name); FreeSpecifier((yyvsp[-3].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[-4].string), symbol, (yyvsp[-1].list)); }
#line 20490 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1315:
#line 3701 "grammar.y" /* yacc.c:1663  */
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[-3].string), null, (yyvsp[-1].list)); }
#line 20496 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1316:
#line 3705 "grammar.y" /* yacc.c:1663  */
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[-3].list), null), (yyvsp[-2].id), (yyvsp[-1].string)); }
#line 20502 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1317:
#line 3709 "grammar.y" /* yacc.c:1663  */
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[0].id), ascending); }
#line 20508 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1318:
#line 3710 "grammar.y" /* yacc.c:1663  */
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[0].id), descending); }
#line 20514 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1319:
#line 3711 "grammar.y" /* yacc.c:1663  */
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[0].id), ascending); }
#line 20520 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1320:
#line 3715 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].dbindexItem)); }
#line 20526 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1321:
#line 3716 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyvsp[-2].list), (yyvsp[0].dbindexItem)); }
#line 20532 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1322:
#line 3720 "grammar.y" /* yacc.c:1663  */
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[-1].list), null); }
#line 20538 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1323:
#line 3721 "grammar.y" /* yacc.c:1663  */
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[-2].list), (yyvsp[-1].id)); }
#line 20544 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1324:
#line 3725 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].dbtableEntry)); }
#line 20550 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1325:
#line 3726 "grammar.y" /* yacc.c:1663  */
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[0].dbtableEntry)); }
#line 20556 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1326:
#line 3727 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyvsp[-1].list), (yyvsp[0].dbtableEntry)); }
#line 20562 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1327:
#line 3728 "grammar.y" /* yacc.c:1663  */
    { ListAdd((yyvsp[-1].list), (yyvsp[0].dbtableEntry)); }
#line 20568 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1328:
#line 3732 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpDBOpen((yyvsp[-3].exp), (yyvsp[-1].exp)); }
#line 20574 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1329:
#line 3736 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpDBField((yyvsp[-3].string), (yyvsp[-1].id)); }
#line 20580 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1330:
#line 3740 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpDBIndex((yyvsp[-3].string), (yyvsp[-1].id)); }
#line 20586 "grammar.ec" /* yacc.c:1663  */
    break;

  case 1331:
#line 3744 "grammar.y" /* yacc.c:1663  */
    { (yyval.exp) = MkExpDBTable((yyvsp[-1].string)); }
#line 20592 "grammar.ec" /* yacc.c:1663  */
    break;


#line 20596 "grammar.ec" /* yacc.c:1663  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 3747 "grammar.y" /* yacc.c:1923  */

