/* A Bison parser, made by GNU Bison 2.7.12-4996.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7.12-4996"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYSIZE_T size_t
#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:


/* Line 371 of yacc.c  */
#line 104 "grammar.ec"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar.h".  */
#ifndef YY_YY_GRAMMAR_H_INCLUDED
# define YY_YY_GRAMMAR_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     INT128 = 294,
     FLOAT128 = 295,
     LONG = 296,
     SIGNED = 297,
     UNSIGNED = 298,
     FLOAT = 299,
     DOUBLE = 300,
     CONST = 301,
     VOLATILE = 302,
     VOID = 303,
     VALIST = 304,
     STRUCT = 305,
     UNION = 306,
     ENUM = 307,
     ELLIPSIS = 308,
     CASE = 309,
     DEFAULT = 310,
     IF = 311,
     SWITCH = 312,
     WHILE = 313,
     DO = 314,
     FOR = 315,
     GOTO = 316,
     CONTINUE = 317,
     BREAK = 318,
     RETURN = 319,
     IFX = 320,
     ELSE = 321,
     CLASS = 322,
     THISCLASS = 323,
     PROPERTY = 324,
     SETPROP = 325,
     GETPROP = 326,
     NEWOP = 327,
     RENEW = 328,
     DELETE = 329,
     EXT_DECL = 330,
     EXT_STORAGE = 331,
     IMPORT = 332,
     DEFINE = 333,
     VIRTUAL = 334,
     ATTRIB = 335,
     PUBLIC = 336,
     PRIVATE = 337,
     TYPED_OBJECT = 338,
     ANY_OBJECT = 339,
     _INCREF = 340,
     EXTENSION = 341,
     ASM = 342,
     TYPEOF = 343,
     WATCH = 344,
     STOPWATCHING = 345,
     FIREWATCHERS = 346,
     WATCHABLE = 347,
     CLASS_DESIGNER = 348,
     CLASS_NO_EXPANSION = 349,
     CLASS_FIXED = 350,
     ISPROPSET = 351,
     CLASS_DEFAULT_PROPERTY = 352,
     PROPERTY_CATEGORY = 353,
     CLASS_DATA = 354,
     CLASS_PROPERTY = 355,
     SUBCLASS = 356,
     NAMESPACE = 357,
     NEW0OP = 358,
     RENEW0 = 359,
     VAARG = 360,
     DBTABLE = 361,
     DBFIELD = 362,
     DBINDEX = 363,
     DATABASE_OPEN = 364,
     ALIGNOF = 365,
     ATTRIB_DEP = 366,
     __ATTRIB = 367,
     BOOL = 368,
     _BOOL = 369,
     _COMPLEX = 370,
     _IMAGINARY = 371,
     RESTRICT = 372,
     THREAD = 373,
     WIDE_STRING_LITERAL = 374,
     BUILTIN_OFFSETOF = 375,
     PRAGMA = 376
   };
#endif


#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{
/* Line 387 of yacc.c  */
#line 39 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;


/* Line 387 of yacc.c  */
#line 312 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;
extern YYLTYPE yylloc;
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_YY_GRAMMAR_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 353 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif


/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  308
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   43579

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  147
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  259
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1327
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2211

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   376

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   141,     2,     2,   135,   143,   138,     2,
     125,   126,   122,   139,   130,   140,   133,   142,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   134,   128,
     123,   129,   124,   146,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   136,     2,   137,   144,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   132,   145,   131,   127,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   958,   961,   968,   975,   981,   987,
     994,  1001,  1007,  1013,  1021,  1029,  1036,  1043,  1051,  1059,
    1066,  1073,  1078,  1084,  1089,  1096,  1101,  1103,  1105,  1107,
    1109,  1113,  1116,  1118,  1121,  1124,  1127,  1129,  1134,  1139,
    1143,  1148,  1153,  1157,  1161,  1164,  1167,  1172,  1177,  1181,
    1186,  1190,  1194,  1197,  1200,  1202,  1204,  1208,  1212,  1214,
    1216,  1220,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1247,
    1253,  1259,  1262,  1267,  1274,  1276,  1278,  1280,  1282,  1284,
    1286,  1288,  1290,  1292,  1294,  1296,  1301,  1306,  1308,  1312,
    1316,  1320,  1324,  1328,  1332,  1334,  1338,  1342,  1346,  1350,
    1352,  1356,  1360,  1364,  1368,  1371,  1373,  1376,  1380,  1384,
    1388,  1392,  1396,  1400,  1404,  1406,  1410,  1414,  1418,  1422,
    1426,  1430,  1434,  1438,  1440,  1444,  1448,  1452,  1456,  1458,
    1462,  1466,  1470,  1474,  1476,  1480,  1484,  1488,  1492,  1494,
    1498,  1502,  1504,  1508,  1512,  1514,  1520,  1526,  1532,  1538,
    1544,  1550,  1556,  1562,  1568,  1574,  1580,  1586,  1592,  1598,
    1604,  1610,  1612,  1616,  1620,  1624,  1628,  1632,  1636,  1640,
    1644,  1646,  1648,  1650,  1652,  1654,  1656,  1658,  1660,  1662,
    1664,  1666,  1668,  1672,  1676,  1679,  1681,  1685,  1689,  1691,
    1693,  1696,  1699,  1703,  1707,  1711,  1715,  1719,  1723,  1727,
    1730,  1733,  1736,  1739,  1742,  1748,  1755,  1762,  1765,  1771,
    1773,  1775,  1777,  1782,  1784,  1788,  1792,  1796,  1800,  1804,
    1808,  1810,  1814,  1818,  1822,  1826,  1828,  1832,  1836,  1840,
    1844,  1846,  1849,  1853,  1857,  1861,  1865,  1869,  1873,  1877,
    1879,  1883,  1887,  1891,  1895,  1899,  1903,  1907,  1911,  1913,
    1917,  1921,  1925,  1929,  1931,  1935,  1939,  1943,  1947,  1949,
    1953,  1957,  1961,  1965,  1967,  1971,  1975,  1977,  1981,  1985,
    1987,  1993,  1999,  2005,  2011,  2016,  2021,  2026,  2031,  2037,
    2043,  2049,  2055,  2060,  2065,  2070,  2075,  2081,  2087,  2093,
    2099,  2105,  2111,  2117,  2123,  2127,  2131,  2134,  2137,  2139,
    2143,  2147,  2151,  2155,  2157,  2160,  2164,  2168,  2171,  2174,
    2177,  2179,  2182,  2186,  2190,  2192,  2194,  2196,  2198,  2200,
    2202,  2204,  2206,  2208,  2210,  2212,  2214,  2216,  2218,  2220,
    2222,  2224,  2228,  2232,  2235,  2240,  2245,  2247,  2251,  2254,
    2256,  2259,  2262,  2265,  2270,  2275,  2279,  2283,  2288,  2294,
    2299,  2306,  2313,  2318,  2324,  2329,  2336,  2343,  2349,  2355,
    2358,  2361,  2364,  2370,  2374,  2380,  2387,  2393,  2401,  2409,
    2418,  2427,  2435,  2443,  2447,  2451,  2455,  2460,  2464,  2470,
    2476,  2483,  2491,  2498,  2503,  2505,  2507,  2509,  2511,  2513,
    2515,  2517,  2519,  2521,  2524,  2526,  2528,  2530,  2532,  2534,
    2536,  2538,  2540,  2542,  2544,  2546,  2548,  2550,  2552,  2554,
    2556,  2558,  2560,  2565,  2570,  2575,  2577,  2579,  2581,  2583,
    2585,  2587,  2589,  2591,  2593,  2595,  2597,  2599,  2601,  2603,
    2605,  2607,  2609,  2611,  2613,  2615,  2617,  2619,  2621,  2623,
    2625,  2627,  2629,  2631,  2633,  2638,  2643,  2648,  2650,  2652,
    2655,  2658,  2662,  2668,  2671,  2675,  2681,  2687,  2693,  2695,
    2699,  2702,  2705,  2709,  2713,  2716,  2720,  2724,  2729,  2733,
    2737,  2741,  2745,  2749,  2753,  2758,  2763,  2768,  2770,  2772,
    2777,  2781,  2784,  2788,  2792,  2796,  2800,  2804,  2808,  2812,
    2816,  2820,  2824,  2828,  2832,  2834,  2836,  2838,  2841,  2843,
    2846,  2848,  2851,  2853,  2856,  2858,  2861,  2863,  2866,  2868,
    2871,  2873,  2876,  2878,  2881,  2883,  2886,  2888,  2891,  2893,
    2896,  2898,  2901,  2903,  2906,  2908,  2911,  2913,  2916,  2918,
    2921,  2923,  2926,  2928,  2931,  2933,  2936,  2938,  2941,  2943,
    2946,  2948,  2951,  2953,  2956,  2958,  2961,  2963,  2966,  2968,
    2970,  2972,  2975,  2977,  2980,  2982,  2985,  2987,  2990,  2995,
    3001,  3003,  3005,  3007,  3010,  3012,  3015,  3017,  3020,  3022,
    3025,  3030,  3036,  3038,  3041,  3043,  3046,  3048,  3051,  3053,
    3056,  3058,  3061,  3063,  3066,  3071,  3077,  3079,  3082,  3084,
    3087,  3089,  3092,  3094,  3097,  3099,  3102,  3104,  3107,  3112,
    3118,  3122,  3126,  3128,  3132,  3136,  3140,  3144,  3146,  3148,
    3150,  3155,  3160,  3165,  3169,  3174,  3179,  3184,  3188,  3190,
    3194,  3199,  3203,  3208,  3213,  3218,  3223,  3227,  3230,  3234,
    3238,  3242,  3246,  3249,  3252,  3255,  3259,  3264,  3266,  3268,
    3271,  3275,  3279,  3283,  3287,  3290,  3293,  3296,  3300,  3305,
    3307,  3309,  3311,  3313,  3316,  3319,  3321,  3323,  3328,  3330,
    3332,  3334,  3336,  3338,  3340,  3342,  3344,  3346,  3351,  3353,
    3356,  3360,  3367,  3373,  3375,  3378,  3382,  3387,  3390,  3394,
    3398,  3402,  3406,  3411,  3416,  3421,  3424,  3428,  3432,  3436,
    3441,  3446,  3450,  3455,  3458,  3462,  3466,  3470,  3475,  3480,
    3482,  3485,  3488,  3492,  3494,  3496,  3499,  3502,  3506,  3508,
    3510,  3513,  3516,  3520,  3522,  3525,  3529,  3532,  3535,  3537,
    3540,  3544,  3547,  3549,  3552,  3556,  3560,  3562,  3565,  3569,
    3573,  3575,  3578,  3582,  3586,  3588,  3591,  3595,  3599,  3601,
    3604,  3608,  3612,  3614,  3618,  3623,  3627,  3632,  3634,  3639,
    3642,  3648,  3652,  3654,  3656,  3658,  3660,  3662,  3664,  3668,
    3672,  3675,  3678,  3680,  3682,  3686,  3689,  3693,  3695,  3699,
    3703,  3707,  3711,  3715,  3719,  3723,  3725,  3728,  3732,  3736,
    3738,  3741,  3743,  3746,  3749,  3752,  3755,  3759,  3761,  3763,
    3767,  3771,  3773,  3777,  3782,  3786,  3791,  3795,  3799,  3804,
    3808,  3813,  3815,  3819,  3823,  3828,  3832,  3836,  3840,  3845,
    3847,  3851,  3855,  3859,  3863,  3867,  3869,  3873,  3876,  3878,
    3880,  3882,  3884,  3886,  3889,  3891,  3893,  3895,  3897,  3900,
    3903,  3906,  3908,  3910,  3912,  3914,  3916,  3919,  3921,  3923,
    3928,  3936,  3938,  3942,  3943,  3950,  3959,  3970,  3983,  3992,
    4003,  4014,  4020,  4028,  4038,  4050,  4058,  4068,  4078,  4082,
    4087,  4092,  4096,  4100,  4104,  4109,  4114,  4118,  4122,  4126,
    4131,  4136,  4140,  4143,  4147,  4150,  4154,  4159,  4164,  4168,
    4172,  4174,  4176,  4178,  4180,  4182,  4185,  4189,  4192,  4195,
    4198,  4202,  4206,  4209,  4215,  4222,  4225,  4228,  4231,  4234,
    4237,  4240,  4242,  4245,  4248,  4252,  4254,  4257,  4259,  4262,
    4265,  4267,  4270,  4273,  4276,  4279,  4282,  4285,  4287,  4289,
    4292,  4295,  4297,  4299,  4302,  4305,  4307,  4310,  4313,  4315,
    4318,  4320,  4323,  4326,  4332,  4338,  4346,  4354,  4360,  4366,
    4370,  4373,  4379,  4384,  4389,  4397,  4404,  4411,  4417,  4425,
    4432,  4437,  4445,  4455,  4459,  4464,  4469,  4475,  4481,  4488,
    4496,  4503,  4510,  4516,  4522,  4527,  4531,  4534,  4536,  4539,
    4544,  4548,  4554,  4559,  4563,  4566,  4569,  4572,  4576,  4580,
    4584,  4588,  4591,  4594,  4596,  4598,  4603,  4607,  4612,  4616,
    4620,  4623,  4628,  4632,  4637,  4641,  4645,  4648,  4650,  4653,
    4655,  4657,  4660,  4662,  4665,  4669,  4673,  4675,  4678,  4681,
    4684,  4688,  4693,  4698,  4701,  4704,  4707,  4710,  4712,  4715,
    4717,  4719,  4722,  4724,  4727,  4730,  4732,  4735,  4737,  4740,
    4743,  4746,  4749,  4751,  4754,  4757,  4761,  4763,  4765,  4766,
    4773,  4780,  4786,  4791,  4793,  4796,  4799,  4801,  4805,  4809,
    4814,  4816,  4818,  4821,  4824,  4831,  4838,  4845
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     395,     0,    -1,   219,   122,    -1,   219,   123,    -1,   152,
      -1,   219,   219,    -1,    28,    -1,    28,    -1,   150,    -1,
     150,   123,   213,   124,    -1,   150,   123,   213,    11,    -1,
     302,   338,    -1,   336,    -1,   302,   125,   126,    -1,   127,
     302,   125,   126,    -1,    79,   302,   338,    -1,    79,   336,
      -1,   302,   339,    -1,   337,    -1,    79,   302,   339,    -1,
      79,   337,    -1,   153,   379,    -1,   156,   379,    -1,   156,
     128,    -1,   154,   379,    -1,   155,   379,    -1,   153,   128,
      -1,   153,   327,   128,    -1,   153,   380,    -1,   157,    -1,
     156,   380,    -1,   158,    -1,   158,   128,    -1,   301,   338,
      -1,   301,   340,    -1,   301,   339,    -1,   161,   379,    -1,
     161,   380,    -1,   162,    -1,   161,    -1,   227,   129,   344,
      -1,   344,    -1,   227,   129,   345,    -1,   227,   129,     1,
      -1,   345,    -1,   165,    -1,   167,   130,   165,    -1,   168,
     130,   165,    -1,   166,    -1,   167,   130,   166,    -1,   168,
     130,   166,    -1,   167,   130,     1,    -1,   168,   130,     1,
      -1,   130,    -1,   167,   128,    -1,   168,   128,    -1,   169,
      -1,   163,    -1,   172,   169,    -1,   172,   163,    -1,   170,
     169,    -1,   170,   163,    -1,   172,   128,    -1,   170,   128,
      -1,   128,    -1,   170,    -1,   167,    -1,   170,   167,    -1,
     172,   167,    -1,   164,    -1,   171,   164,    -1,   172,   164,
      -1,   170,   164,    -1,   170,   168,    -1,   168,    -1,   167,
       1,    -1,   174,   131,    -1,   174,     1,   131,    -1,   301,
     219,   132,   172,    -1,   301,   219,   132,   171,     1,    -1,
     301,   219,   132,   171,    -1,   301,   219,   132,    -1,   301,
     219,   132,     1,    -1,   176,   131,    -1,   176,     1,   131,
      -1,   302,   219,   132,   172,    -1,   302,   219,   132,   171,
       1,    -1,   302,   219,   132,   171,    -1,   302,   219,   132,
      -1,   302,   219,   132,     1,    -1,   303,   219,   132,   171,
     131,    -1,   303,   219,   132,   172,   131,    -1,   303,   219,
     132,   131,    -1,   179,   131,    -1,   179,     1,   131,    -1,
     152,   132,   171,    -1,   219,   132,   171,    -1,   152,   132,
     172,    -1,   152,   132,    -1,   152,   132,   171,     1,    -1,
     152,   132,     1,    -1,   219,   132,   172,    -1,   219,   132,
      -1,   219,   132,   171,     1,    -1,   219,   132,     1,    -1,
     181,   131,    -1,   181,     1,   131,    -1,   132,   172,    -1,
     132,   171,     1,    -1,   132,     1,    -1,   132,    -1,   132,
     171,    -1,   227,   129,   344,    -1,   227,   129,   345,    -1,
     227,   129,     1,    -1,   227,     1,    -1,   182,    -1,   184,
     130,   182,    -1,   185,   130,   182,    -1,   183,    -1,   184,
     130,   183,    -1,   185,   130,   183,    -1,   184,     1,    -1,
      69,   307,   219,   132,    -1,    69,   307,   332,   219,   132,
      -1,    69,   307,   132,    -1,    69,   307,   332,   132,    -1,
      69,     1,   132,    -1,   186,    -1,   187,    70,   379,    -1,
     187,    71,   379,    -1,   187,    96,   379,    -1,   187,    92,
      -1,   187,    98,   221,    -1,   187,   131,    -1,   100,   307,
     219,   132,    -1,   100,   307,   332,   219,   132,    -1,   100,
     307,   132,    -1,   100,   307,   332,   132,    -1,   100,     1,
     132,    -1,   189,    -1,   190,    70,   379,    -1,   190,    71,
     379,    -1,   190,   131,    -1,   219,    -1,   192,   219,    -1,
     192,   379,    -1,    74,   379,    -1,   193,    -1,   194,   193,
      -1,    89,   125,   192,   126,   379,    -1,    89,   125,   246,
     126,   132,   194,   131,    -1,   246,   133,    89,   125,   246,
     126,   132,   194,   131,    -1,    90,   125,   246,   130,   192,
     126,    -1,   246,   133,    90,   125,   246,   130,   192,   126,
      -1,    90,   125,   246,   126,    -1,   246,   133,    90,   125,
     246,   126,    -1,    91,    -1,    91,   192,    -1,   227,   133,
      91,    -1,   246,   133,    91,   192,    -1,   200,   128,    -1,
     184,   128,    -1,   159,    -1,   188,    -1,   367,   159,    -1,
     367,   188,    -1,   191,    -1,    92,    -1,    94,    -1,    95,
      -1,   100,   125,   219,   126,   129,   344,   128,    -1,   128,
      -1,   367,   134,    -1,   367,   125,   219,   126,    -1,   160,
      -1,   302,    -1,   302,   289,    -1,   367,   302,   289,    -1,
     367,   302,    -1,   367,   178,    -1,   367,   175,    -1,    99,
     302,   289,    -1,   195,    -1,    93,   219,    -1,    93,   152,
      -1,    97,   219,    -1,   178,    -1,   175,    -1,   184,    -1,
     176,     1,    -1,   179,     1,    -1,   367,   160,    -1,   367,
     176,     1,    -1,   367,   179,     1,    -1,   185,    -1,   199,
      -1,   201,   199,    -1,   202,   199,    -1,   200,    -1,   201,
       1,    -1,   202,     1,    -1,   201,   200,    -1,   202,   200,
      -1,   302,    -1,   302,   332,    -1,   302,    -1,   302,   332,
      -1,    67,   219,    -1,    67,   219,   129,   204,    -1,    67,
     219,   134,   203,    -1,    67,   219,   134,   203,   129,   204,
      -1,    67,   151,    -1,    67,   151,   129,   204,    -1,    67,
     151,   134,   203,    -1,    67,   151,   134,   203,   129,   204,
      -1,   219,    -1,   219,    -1,   219,   129,   206,    -1,   236,
      -1,   302,   219,   129,   208,    -1,   302,   332,   219,   129,
     208,    -1,   205,    -1,   207,    -1,   209,    -1,   210,    -1,
     211,   130,   210,    -1,   208,    -1,   206,    -1,   204,    -1,
     219,   129,   208,    -1,   219,   129,   206,    -1,   219,   129,
     204,    -1,   212,    -1,   213,   130,   212,    -1,    67,    -1,
     214,   219,    -1,   214,   150,    -1,   219,   214,   219,    -1,
     219,   214,   150,    -1,   214,   219,   123,   211,   124,    -1,
     214,   150,   123,   211,   124,    -1,   219,   214,   219,   123,
     211,   124,    -1,   219,   214,   150,   123,   211,   124,    -1,
     218,   131,    -1,   217,   128,    -1,   215,   132,   131,    -1,
     217,   132,   131,    -1,   214,   219,   128,    -1,   214,   149,
     128,    -1,   215,   134,   306,    -1,   215,   132,   202,    -1,
     217,   132,   202,    -1,   215,   132,   201,    -1,   217,   132,
     201,    -1,   215,   132,     1,    -1,   217,   132,     1,    -1,
       3,    -1,   223,    -1,   125,   248,   126,    -1,   390,    -1,
     135,   390,    -1,   135,   390,   133,   390,    -1,     4,    -1,
     219,    -1,   178,    -1,    86,   125,   379,   126,    -1,    86,
     125,   248,   126,    -1,    86,   125,   351,   126,   341,    -1,
      86,   125,   351,   126,   125,   351,   126,   341,    -1,   222,
     219,    -1,   222,    -1,   221,    -1,   119,    -1,   125,   126,
      -1,    72,   309,   333,   136,   268,   137,    -1,    72,   309,
     333,   136,   269,   137,    -1,    72,   309,   136,   268,   137,
      -1,    72,   309,   136,   269,   137,    -1,   103,   309,   333,
     136,   268,   137,    -1,   103,   309,   333,   136,   269,   137,
      -1,   103,   309,   136,   268,   137,    -1,   103,   309,   136,
     269,   137,    -1,    73,   268,   308,   333,   136,   268,   137,
      -1,    73,   268,   308,   333,   136,   269,   137,    -1,    73,
     268,   308,   136,   268,   137,    -1,    73,   268,   308,   136,
     269,   137,    -1,   104,   268,   308,   333,   136,   268,   137,
      -1,   104,   268,   308,   333,   136,   269,   137,    -1,   104,
     268,   308,   136,   268,   137,    -1,   104,   268,   308,   136,
     269,   137,    -1,    67,   125,   301,   126,    -1,    67,   125,
     301,   332,   126,    -1,    67,   125,   219,   126,    -1,   105,
     125,   246,   130,   351,   126,    -1,    99,   125,   219,   126,
      -1,   402,    -1,   403,    -1,   404,    -1,   405,    -1,   136,
     228,   137,    -1,   136,   137,    -1,   180,    -1,   181,     1,
      -1,   125,   248,    -1,   125,   266,    -1,   220,    -1,   227,
     136,   248,   137,    -1,   227,   136,   266,   137,    -1,   227,
     125,   126,    -1,   227,   125,   228,   126,    -1,   227,   125,
     229,   126,    -1,   227,   133,   219,    -1,   227,     7,   219,
      -1,   227,     8,    -1,   227,     9,    -1,   250,   136,   248,
     137,    -1,   250,   136,   266,   137,    -1,   250,   125,   126,
      -1,   250,   125,   228,   126,    -1,   250,   133,   219,    -1,
     250,     7,   219,    -1,   250,     8,    -1,   250,     9,    -1,
     246,    -1,   224,    -1,   228,   130,   246,    -1,   228,   130,
     224,    -1,   265,    -1,   225,    -1,   228,   130,   265,    -1,
     228,   130,   225,    -1,   228,   130,    -1,     8,   231,    -1,
       9,   231,    -1,   232,   233,    -1,   232,   224,    -1,     6,
     231,    -1,     6,   125,   352,   126,    -1,     6,   125,    67,
     149,   126,    -1,     6,   125,    67,   148,   126,    -1,   110,
     231,    -1,   110,   125,   352,   126,    -1,   120,   125,   352,
     130,   219,   126,    -1,   230,    -1,   227,    -1,   138,    -1,
     122,    -1,   139,    -1,   140,    -1,   127,    -1,   141,    -1,
      74,    -1,    85,    -1,   231,    -1,   125,   351,   126,   342,
      -1,   125,   351,   126,   233,    -1,   233,    -1,   234,   122,
     233,    -1,   234,   142,   233,    -1,   234,   143,   233,    -1,
     254,   122,   233,    -1,   254,   142,   233,    -1,   254,   143,
     233,    -1,   234,    -1,   235,   139,   234,    -1,   235,   140,
     234,    -1,   255,   139,   234,    -1,   255,   140,   234,    -1,
     235,    -1,   236,    10,   235,    -1,   236,    11,   235,    -1,
     256,    10,   235,    -1,   256,    11,   235,    -1,   238,   123,
      -1,   236,    -1,   237,   236,    -1,   238,   124,   236,    -1,
     238,    12,   236,    -1,   238,    13,   236,    -1,   257,   123,
     236,    -1,   257,   124,   236,    -1,   257,    12,   236,    -1,
     257,    13,   236,    -1,   238,    -1,   239,    14,   238,    -1,
     239,    15,   238,    -1,   258,    14,   238,    -1,   258,    15,
     238,    -1,   239,    14,   224,    -1,   239,    15,   224,    -1,
     258,    14,   224,    -1,   258,    15,   224,    -1,   239,    -1,
     240,   138,   239,    -1,   259,   138,   239,    -1,   240,   138,
     224,    -1,   259,   138,   224,    -1,   240,    -1,   241,   144,
     240,    -1,   260,   144,   240,    -1,   241,   144,   224,    -1,
     260,   144,   224,    -1,   241,    -1,   242,   145,   241,    -1,
     261,   145,   241,    -1,   242,   145,   224,    -1,   261,   145,
     224,    -1,   242,    -1,   243,    16,   242,    -1,   262,    16,
     242,    -1,   243,    -1,   244,    17,   243,    -1,   263,    17,
     243,    -1,   244,    -1,   244,   146,   248,   134,   245,    -1,
     244,   146,   266,   134,   245,    -1,   263,   146,   248,   134,
     245,    -1,   263,   146,   266,   134,   245,    -1,   244,   146,
     249,   134,   245,    -1,   244,   146,   267,   134,   245,    -1,
     263,   146,   249,   134,   245,    -1,   263,   146,   267,   134,
     245,    -1,   244,   146,   248,   134,   224,    -1,   244,   146,
     266,   134,   224,    -1,   263,   146,   248,   134,   224,    -1,
     263,   146,   266,   134,   224,    -1,   244,   146,   249,   134,
     224,    -1,   244,   146,   267,   134,   224,    -1,   263,   146,
     249,   134,   224,    -1,   263,   146,   267,   134,   224,    -1,
     245,    -1,   231,   247,   246,    -1,   252,   247,   246,    -1,
     245,   247,   246,    -1,   264,   247,   246,    -1,   231,   247,
     224,    -1,   252,   247,   224,    -1,   245,   247,   224,    -1,
     264,   247,   224,    -1,   129,    -1,    18,    -1,    19,    -1,
      20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,    -1,
      25,    -1,    26,    -1,    27,    -1,   246,    -1,   248,   130,
     246,    -1,   266,   130,   246,    -1,   266,   126,    -1,   224,
      -1,   248,   130,   224,    -1,   266,   130,   224,    -1,   226,
      -1,     1,    -1,   227,     1,    -1,   179,     1,    -1,   227,
       7,     1,    -1,   250,     7,     1,    -1,   227,   125,   228,
      -1,   227,   125,   229,    -1,   227,   133,     1,    -1,   250,
     125,   229,    -1,   250,   133,     1,    -1,     8,   252,    -1,
       9,   252,    -1,   232,   253,    -1,   232,   225,    -1,     6,
     252,    -1,     6,   125,   352,   126,     1,    -1,     6,   125,
      67,   149,   126,     1,    -1,     6,   125,    67,   148,   126,
       1,    -1,   110,   252,    -1,   110,   125,   352,   126,     1,
      -1,   251,    -1,   250,    -1,   252,    -1,   125,   351,   126,
     253,    -1,   253,    -1,   234,   122,   253,    -1,   234,   142,
     253,    -1,   234,   143,   253,    -1,   254,   122,   253,    -1,
     254,   142,   253,    -1,   254,   143,   253,    -1,   254,    -1,
     235,   139,   254,    -1,   235,   140,   254,    -1,   255,   139,
     254,    -1,   255,   140,   254,    -1,   255,    -1,   236,    10,
     255,    -1,   236,    11,   255,    -1,   256,    10,   255,    -1,
     256,    11,   255,    -1,   256,    -1,   237,   256,    -1,   238,
     124,   256,    -1,   238,    12,   256,    -1,   238,    13,   256,
      -1,   257,   123,   256,    -1,   257,   124,   256,    -1,   257,
      12,   256,    -1,   257,    13,   256,    -1,   257,    -1,   239,
      14,   257,    -1,   239,    15,   257,    -1,   258,    14,   257,
      -1,   258,    15,   257,    -1,   239,    14,   225,    -1,   239,
      15,   225,    -1,   258,    14,   225,    -1,   258,    15,   225,
      -1,   258,    -1,   240,   138,   258,    -1,   259,   138,   258,
      -1,   240,   138,   225,    -1,   259,   138,   225,    -1,   259,
      -1,   241,   144,   259,    -1,   260,   144,   259,    -1,   241,
     144,   225,    -1,   260,   144,   225,    -1,   260,    -1,   242,
     145,   260,    -1,   261,   145,   260,    -1,   242,   145,   225,
      -1,   261,   145,   225,    -1,   261,    -1,   243,    16,   261,
      -1,   262,    16,   261,    -1,   262,    -1,   244,    17,   262,
      -1,   263,    17,   262,    -1,   263,    -1,   244,   146,   248,
     134,   263,    -1,   244,   146,   266,   134,   263,    -1,   263,
     146,   248,   134,   263,    -1,   263,   146,   266,   134,   263,
      -1,   244,   146,   248,   134,    -1,   244,   146,   266,   134,
      -1,   263,   146,   248,   134,    -1,   263,   146,   266,   134,
      -1,   244,   146,   249,   134,   263,    -1,   244,   146,   267,
     134,   263,    -1,   263,   146,   249,   134,   263,    -1,   263,
     146,   267,   134,   263,    -1,   244,   146,   249,   134,    -1,
     244,   146,   267,   134,    -1,   263,   146,   249,   134,    -1,
     263,   146,   267,   134,    -1,   244,   146,   248,   134,   225,
      -1,   244,   146,   266,   134,   225,    -1,   263,   146,   248,
     134,   225,    -1,   263,   146,   266,   134,   225,    -1,   244,
     146,   249,   134,   225,    -1,   244,   146,   267,   134,   225,
      -1,   263,   146,   249,   134,   225,    -1,   263,   146,   267,
     134,   225,    -1,   244,   146,   134,    -1,   263,   146,   134,
      -1,   244,   146,    -1,   263,   146,    -1,   264,    -1,   231,
     247,   265,    -1,   252,   247,   265,    -1,   231,   247,   225,
      -1,   252,   247,   225,    -1,   265,    -1,   246,     1,    -1,
     248,   130,   265,    -1,   266,   130,   265,    -1,   248,   248,
      -1,   266,   248,    -1,   248,   266,    -1,   225,    -1,   224,
       1,    -1,   248,   130,   225,    -1,   266,   130,   225,    -1,
     245,    -1,   264,    -1,    29,    -1,    30,    -1,    31,    -1,
     118,    -1,    32,    -1,    33,    -1,   117,    -1,    29,    -1,
      30,    -1,    31,    -1,   118,    -1,    32,    -1,    33,    -1,
     117,    -1,   219,    -1,   219,   129,   268,    -1,   219,   129,
     269,    -1,   219,   328,    -1,   219,   328,   129,   268,    -1,
     219,   328,   129,   269,    -1,   272,    -1,   273,   130,   272,
      -1,   273,   130,    -1,    52,    -1,   274,   219,    -1,   274,
     152,    -1,   277,   131,    -1,   274,   219,   132,   131,    -1,
     274,   152,   132,   131,    -1,   274,   132,   273,    -1,   274,
     132,     1,    -1,   274,   219,   132,   273,    -1,   274,   219,
     132,   273,     1,    -1,   274,   219,   132,     1,    -1,   274,
     219,   132,   273,   128,   201,    -1,   274,   219,   132,   273,
     128,   202,    -1,   274,   152,   132,   273,    -1,   274,   152,
     132,   273,     1,    -1,   274,   152,   132,     1,    -1,   274,
     152,   132,   273,   128,   201,    -1,   274,   152,   132,   273,
     128,   202,    -1,   274,   219,   132,   273,   128,    -1,   274,
     152,   132,   273,   128,    -1,   274,   219,    -1,   274,   152,
      -1,   280,   131,    -1,   278,   134,   306,   132,   131,    -1,
     278,   132,   131,    -1,   278,   134,   306,   132,   273,    -1,
     278,   134,   306,   132,   273,     1,    -1,   278,   134,   306,
     132,     1,    -1,   278,   134,   306,   132,   273,   128,   201,
      -1,   278,   134,   306,   132,   273,   128,   202,    -1,   278,
     134,   306,   132,   273,     1,   128,   201,    -1,   278,   134,
     306,   132,   273,     1,   128,   202,    -1,   278,   134,   306,
     132,     1,   128,   201,    -1,   278,   134,   306,   132,     1,
     128,   202,    -1,   274,   132,   273,    -1,   274,   132,     1,
      -1,   278,   132,   273,    -1,   278,   132,   273,     1,    -1,
     278,   132,     1,    -1,   278,   132,   273,   128,   201,    -1,
     278,   132,   273,   128,   202,    -1,   278,   134,   306,   132,
     273,   128,    -1,   278,   134,   306,   132,   273,     1,   128,
      -1,   278,   134,   306,   132,     1,   128,    -1,   278,   132,
     273,   128,    -1,   279,    -1,   296,    -1,   280,    -1,   297,
      -1,   322,    -1,    46,    -1,    47,    -1,   283,    -1,   284,
      -1,   285,   284,    -1,    48,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    39,    -1,    40,    -1,
      49,    -1,    41,    -1,    44,    -1,    45,    -1,    42,    -1,
      43,    -1,    86,    -1,   293,    -1,   275,    -1,   149,    -1,
      88,   125,   246,   126,    -1,   101,   125,   149,   126,    -1,
     101,   125,   219,   126,    -1,    68,    -1,    83,    -1,    84,
      -1,   114,    -1,   113,    -1,   115,    -1,   116,    -1,    48,
      -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,
      -1,    39,    -1,    40,    -1,    49,    -1,    41,    -1,    44,
      -1,    45,    -1,    42,    -1,    43,    -1,    86,    -1,   293,
      -1,   275,    -1,   152,    -1,   114,    -1,   113,    -1,   115,
      -1,   116,    -1,    88,   125,   246,   126,    -1,   101,   125,
     149,   126,    -1,   101,   125,   219,   126,    -1,    68,    -1,
     340,    -1,   340,   327,    -1,   134,   268,    -1,   340,   134,
     268,    -1,   340,   134,   268,   134,   268,    -1,   134,   269,
      -1,   340,   134,   269,    -1,   340,   134,   268,   134,   269,
      -1,   340,   134,   269,   134,   269,    -1,   340,   134,   269,
     134,   268,    -1,   288,    -1,   289,   130,   288,    -1,   298,
     219,    -1,   298,   150,    -1,   298,   322,   219,    -1,   298,
     322,   150,    -1,   292,   131,    -1,   290,   132,   131,    -1,
     298,   132,   131,    -1,   298,   322,   132,   131,    -1,   290,
     132,   201,    -1,   290,   132,   202,    -1,   290,   132,     1,
      -1,   298,   132,   201,    -1,   298,   132,   202,    -1,   298,
     132,     1,    -1,   298,   322,   132,   201,    -1,   298,   322,
     132,   202,    -1,   298,   322,   132,     1,    -1,   290,    -1,
     290,    -1,   290,   123,   211,   124,    -1,   294,   134,   306,
      -1,   297,   131,    -1,   295,   132,   131,    -1,   294,   132,
     131,    -1,   298,   132,   131,    -1,   295,   132,   201,    -1,
     295,   132,   202,    -1,   295,   132,     1,    -1,   294,   132,
     201,    -1,   294,   132,   202,    -1,   294,   132,     1,    -1,
     298,   132,   201,    -1,   298,   132,   202,    -1,   298,   132,
       1,    -1,    50,    -1,    51,    -1,   284,    -1,   299,   284,
      -1,   286,    -1,   299,   286,    -1,   276,    -1,   299,   276,
      -1,   291,    -1,   299,   291,    -1,   284,    -1,   300,   284,
      -1,   286,    -1,   300,   286,    -1,   148,    -1,   300,   148,
      -1,   276,    -1,   300,   276,    -1,   291,    -1,   300,   291,
      -1,   270,    -1,   301,   270,    -1,   284,    -1,   301,   284,
      -1,   287,    -1,   301,   287,    -1,   276,    -1,   301,   276,
      -1,   291,    -1,   301,   291,    -1,   270,    -1,   302,   270,
      -1,   284,    -1,   302,   284,    -1,   286,    -1,   302,   286,
      -1,   148,    -1,   302,   148,    -1,   291,    -1,   302,   291,
      -1,   276,    -1,   302,   276,    -1,   271,    -1,   303,   271,
      -1,   284,    -1,   303,   284,    -1,   286,    -1,   303,   286,
      -1,   148,    -1,   303,   148,    -1,   281,    -1,   303,   281,
      -1,   282,    -1,   303,   282,    -1,    82,    -1,    81,    -1,
     270,    -1,   305,   270,    -1,   284,    -1,   305,   284,    -1,
     287,    -1,   305,   287,    -1,   219,    -1,   305,   219,    -1,
     219,   123,   213,   124,    -1,   305,   219,   123,   213,   124,
      -1,   305,    -1,   298,    -1,   270,    -1,   307,   270,    -1,
     284,    -1,   307,   284,    -1,   287,    -1,   307,   287,    -1,
     219,    -1,   307,   219,    -1,   219,   123,   213,   124,    -1,
     307,   219,   123,   213,   124,    -1,   270,    -1,   308,   270,
      -1,   284,    -1,   308,   284,    -1,   287,    -1,   308,   287,
      -1,   291,    -1,   308,   291,    -1,   276,    -1,   308,   276,
      -1,   219,    -1,   308,   219,    -1,   219,   123,   213,   124,
      -1,   308,   219,   123,   213,   124,    -1,   270,    -1,   309,
     270,    -1,   284,    -1,   309,   284,    -1,   287,    -1,   309,
     287,    -1,   291,    -1,   309,   291,    -1,   276,    -1,   309,
     276,    -1,   219,    -1,   309,   219,    -1,   219,   123,   213,
     124,    -1,   309,   219,   123,   213,   124,    -1,   311,   130,
       1,    -1,   310,   130,     1,    -1,   219,    -1,   311,   130,
     219,    -1,   310,   130,   219,    -1,   355,   130,   219,    -1,
     356,   130,   219,    -1,   313,    -1,   150,    -1,    37,    -1,
     150,   136,   268,   137,    -1,   150,   136,   269,   137,    -1,
     150,   136,   149,   137,    -1,   150,   136,   137,    -1,   312,
     136,   268,   137,    -1,   312,   136,   269,   137,    -1,   312,
     136,   149,   137,    -1,   312,   136,   137,    -1,   219,    -1,
     125,   334,   126,    -1,   125,   322,   334,   126,    -1,   125,
     335,   126,    -1,   125,   322,   335,   126,    -1,   313,   136,
     268,   137,    -1,   313,   136,   269,   137,    -1,   313,   136,
     149,   137,    -1,   313,   136,   137,    -1,   313,   125,    -1,
     314,   357,   126,    -1,   314,   358,   126,    -1,   314,   311,
     126,    -1,   314,   310,   126,    -1,   314,   126,    -1,   314,
     310,    -1,   314,     1,    -1,   314,   355,   125,    -1,   314,
     302,   219,   125,    -1,   315,    -1,   313,    -1,   312,   125,
      -1,   318,   357,   126,    -1,   318,   358,   126,    -1,   318,
     311,   126,    -1,   318,   310,   126,    -1,   318,   126,    -1,
     318,   310,    -1,   318,     1,    -1,   318,   355,   125,    -1,
     318,   302,   219,   125,    -1,   319,    -1,   312,    -1,    75,
      -1,    76,    -1,   322,    76,    -1,   322,    75,    -1,   327,
      -1,   328,    -1,    87,   125,   390,   126,    -1,    80,    -1,
     111,    -1,   112,    -1,     3,    -1,    28,    -1,    76,    -1,
      75,    -1,    46,    -1,   324,    -1,   324,   125,   248,   126,
      -1,   325,    -1,   326,   325,    -1,   326,   130,   325,    -1,
     323,   125,   125,   326,   126,   126,    -1,   323,   125,   125,
     126,   126,    -1,   327,    -1,   328,   327,    -1,   125,   332,
     126,    -1,   125,   322,   332,   126,    -1,   136,   137,    -1,
     136,   268,   137,    -1,   136,   269,   137,    -1,   136,   149,
     137,    -1,   329,   136,   137,    -1,   329,   136,   268,   137,
      -1,   329,   136,   149,   137,    -1,   329,   136,   269,   137,
      -1,   125,   126,    -1,   125,   357,   126,    -1,   125,   358,
     126,    -1,   329,   125,   126,    -1,   329,   125,   357,   126,
      -1,   329,   125,   358,   126,    -1,   125,   333,   126,    -1,
     125,   322,   333,   126,    -1,   125,   126,    -1,   125,   357,
     126,    -1,   125,   358,   126,    -1,   330,   125,   126,    -1,
     330,   125,   357,   126,    -1,   330,   125,   358,   126,    -1,
     122,    -1,   122,   285,    -1,   122,   331,    -1,   122,   285,
     331,    -1,   331,    -1,   329,    -1,   331,   329,    -1,   322,
     331,    -1,   322,   331,   329,    -1,   331,    -1,   330,    -1,
     331,   330,    -1,   322,   331,    -1,   322,   331,   330,    -1,
     317,    -1,   331,   317,    -1,   322,   331,   317,    -1,   334,
     322,    -1,   340,   322,    -1,   321,    -1,   331,   321,    -1,
     322,   331,   321,    -1,   335,   322,    -1,   315,    -1,   331,
     315,    -1,   322,   331,   315,    -1,   331,   322,   315,    -1,
     316,    -1,   331,   316,    -1,   322,   331,   316,    -1,   331,
     322,   316,    -1,   319,    -1,   331,   319,    -1,   322,   331,
     319,    -1,   331,   322,   319,    -1,   320,    -1,   331,   320,
      -1,   322,   331,   320,    -1,   331,   322,   320,    -1,   312,
      -1,   331,   312,    -1,   322,   331,   312,    -1,   331,   322,
     312,    -1,   246,    -1,   132,   346,   131,    -1,   132,   346,
     130,   131,    -1,   132,   346,   131,    -1,   132,   346,   130,
     131,    -1,   265,    -1,   132,   346,   131,     1,    -1,   132,
     346,    -1,   132,   346,   130,   131,     1,    -1,   132,   346,
     130,    -1,   245,    -1,   224,    -1,   264,    -1,   225,    -1,
     341,    -1,   343,    -1,   346,   130,   341,    -1,   346,   130,
     343,    -1,   346,   341,    -1,   346,   343,    -1,   334,    -1,
     335,    -1,   334,   129,   341,    -1,   334,     1,    -1,   334,
     129,   343,    -1,   347,    -1,   349,   130,   347,    -1,    37,
     130,   347,    -1,    38,   130,   347,    -1,    39,   130,   347,
      -1,    40,   130,   347,    -1,   150,   130,   347,    -1,   350,
     130,   347,    -1,   348,    -1,   347,     1,    -1,   349,   130,
     348,    -1,   350,   130,   348,    -1,   299,    -1,   299,   332,
      -1,   300,    -1,   300,   332,    -1,   302,   335,    -1,   302,
     332,    -1,   302,   138,    -1,   302,   138,   335,    -1,   302,
      -1,    67,    -1,   302,   335,     1,    -1,   302,   332,     1,
      -1,   353,    -1,   355,   130,   353,    -1,   355,     1,   130,
     353,    -1,   356,   130,   353,    -1,   356,     1,   130,   353,
      -1,     1,   130,   353,    -1,   311,   130,   353,    -1,   311,
       1,   130,   353,    -1,   310,   130,   353,    -1,   310,     1,
     130,   353,    -1,   354,    -1,   355,   130,   354,    -1,   356,
     130,   354,    -1,   356,     1,   130,   354,    -1,     1,   130,
     354,    -1,   311,   130,   354,    -1,   310,   130,   354,    -1,
     310,     1,   130,   354,    -1,   355,    -1,   355,   130,    53,
      -1,   356,   130,    53,    -1,   311,   130,    53,    -1,   310,
     130,    53,    -1,     1,   130,    53,    -1,   356,    -1,   355,
     130,     1,    -1,   356,     1,    -1,   364,    -1,   327,    -1,
     379,    -1,   128,    -1,   134,    -1,   248,   128,    -1,   382,
      -1,   384,    -1,   386,    -1,   363,    -1,   198,   128,    -1,
     197,   128,    -1,   196,   128,    -1,   365,    -1,   385,    -1,
     380,    -1,   383,    -1,   387,    -1,   386,     1,    -1,   266,
      -1,   390,    -1,   390,   125,   246,   126,    -1,   136,   219,
     137,   390,   125,   246,   126,    -1,   361,    -1,   362,   130,
     361,    -1,    -1,    87,   284,   125,   390,   126,   128,    -1,
      87,   284,   125,   390,   134,   362,   126,   128,    -1,    87,
     284,   125,   390,   134,   362,   134,   362,   126,   128,    -1,
      87,   284,   125,   390,   134,   362,   134,   362,   134,   362,
     126,   128,    -1,    87,   284,   125,   390,     3,   362,   126,
     128,    -1,    87,   284,   125,   390,     3,   362,   134,   362,
     126,   128,    -1,    87,   284,   125,   390,   134,   362,     3,
     362,   126,   128,    -1,    87,   125,   390,   126,   128,    -1,
      87,   125,   390,   134,   362,   126,   128,    -1,    87,   125,
     390,   134,   362,   134,   362,   126,   128,    -1,    87,   125,
     390,   134,   362,   134,   362,   134,   362,   126,   128,    -1,
      87,   125,   390,     3,   362,   126,   128,    -1,    87,   125,
     390,     3,   362,   134,   362,   126,   128,    -1,    87,   125,
     390,   134,   362,     3,   362,   126,   128,    -1,   219,   134,
     359,    -1,    54,   268,   134,   359,    -1,    54,   269,   134,
     359,    -1,    54,   134,   359,    -1,    55,   134,   359,    -1,
     219,   134,   368,    -1,    54,   268,   134,   368,    -1,    54,
     269,   134,   368,    -1,    54,   134,   368,    -1,    55,   134,
     368,    -1,   219,   134,   360,    -1,    54,   268,   134,   360,
      -1,    54,   269,   134,   360,    -1,    54,   134,   360,    -1,
      54,   134,    -1,    55,   134,   360,    -1,    55,   134,    -1,
     219,   134,   371,    -1,    54,   268,   134,   371,    -1,    54,
     269,   134,   371,    -1,    54,   134,   371,    -1,    55,   134,
     371,    -1,    81,    -1,    82,    -1,    55,    -1,    81,    -1,
      82,    -1,   301,   128,    -1,   301,   349,   128,    -1,   173,
     128,    -1,   371,   128,    -1,   303,   128,    -1,   303,   349,
     128,    -1,   304,   349,   128,    -1,   177,   128,    -1,    78,
     219,   129,   245,   128,    -1,    31,    78,   219,   129,   245,
     128,    -1,   303,     1,    -1,   301,     1,    -1,   371,     1,
      -1,   174,     1,    -1,   173,     1,    -1,   301,   350,    -1,
     368,    -1,   372,   368,    -1,   373,   368,    -1,   372,     1,
     128,    -1,   371,    -1,   372,   371,    -1,   359,    -1,   374,
     359,    -1,   375,   359,    -1,   360,    -1,   374,   360,    -1,
     375,   360,    -1,   374,   368,    -1,   375,   368,    -1,   374,
     371,    -1,   375,   371,    -1,   374,    -1,   372,    -1,   372,
     374,    -1,   373,   374,    -1,   375,    -1,   373,    -1,   372,
     375,    -1,   373,   375,    -1,   132,    -1,   380,   131,    -1,
     378,   377,    -1,   378,    -1,   378,   376,    -1,   128,    -1,
     248,   128,    -1,   266,   128,    -1,    56,   125,   248,   126,
     359,    -1,    56,   125,   266,   126,   359,    -1,    56,   125,
     248,   126,   359,    66,   359,    -1,    56,   125,   266,   126,
     359,    66,   359,    -1,    57,   125,   248,   126,   359,    -1,
      57,   125,   266,   126,   359,    -1,    56,   125,   266,    -1,
     382,     1,    -1,    58,   125,   248,   126,   359,    -1,    58,
     125,   266,   359,    -1,    58,   125,   126,   359,    -1,    59,
     359,    58,   125,   248,   126,   128,    -1,    59,   359,    58,
     125,   266,   128,    -1,    60,   125,   381,   381,   126,   359,
      -1,    60,   125,   381,   126,   359,    -1,    60,   125,   381,
     381,   248,   126,   359,    -1,    60,   125,   381,   381,   266,
     359,    -1,    60,   125,   126,   359,    -1,    60,   125,   219,
     134,   248,   126,   359,    -1,    60,   125,   219,   134,   248,
     128,   248,   126,   359,    -1,    60,   125,     1,    -1,    60,
     125,   266,     1,    -1,    60,   125,   381,     1,    -1,    60,
     125,   381,   266,     1,    -1,    60,   125,   381,   381,   266,
      -1,    60,   125,   381,   381,   126,   360,    -1,    60,   125,
     381,   381,   248,   126,   360,    -1,    60,   125,   381,   381,
     266,   360,    -1,    59,   359,    58,   125,   248,   126,    -1,
      59,   359,    58,   125,   248,    -1,    59,   359,    58,   125,
     266,    -1,    59,   359,    58,   125,    -1,    59,   359,    58,
      -1,    59,   359,    -1,    59,    -1,    58,     1,    -1,    58,
     125,   126,     1,    -1,    58,   125,   266,    -1,    58,   125,
     248,   126,   360,    -1,    58,   125,   266,   360,    -1,    61,
     219,   128,    -1,    62,   128,    -1,    63,   128,    -1,    64,
     128,    -1,    64,   248,   128,    -1,    64,   266,   128,    -1,
      64,   224,   128,    -1,    64,   225,   128,    -1,    64,   266,
      -1,    64,   225,    -1,    64,    -1,    61,    -1,   303,   336,
     372,   379,    -1,   303,   336,   379,    -1,   303,   338,   372,
     379,    -1,   303,   338,   379,    -1,   336,   372,   379,    -1,
     336,   379,    -1,   303,   336,   372,   380,    -1,   303,   336,
     380,    -1,   303,   338,   372,   380,    -1,   303,   338,   380,
      -1,   336,   372,   380,    -1,   336,   380,    -1,     5,    -1,
     390,     5,    -1,   388,    -1,   216,    -1,   303,   216,    -1,
     369,    -1,    77,   390,    -1,    77,    31,   390,    -1,    77,
     219,   390,    -1,   128,    -1,   366,   388,    -1,   366,   216,
      -1,   366,   369,    -1,   366,    77,   390,    -1,   366,    77,
      31,   390,    -1,   366,    77,   219,   390,    -1,   366,   134,
      -1,    31,   134,    -1,   102,   219,    -1,   102,   152,    -1,
     396,    -1,   366,   396,    -1,   121,    -1,   218,    -1,   303,
     218,    -1,   389,    -1,   366,   218,    -1,   366,   389,    -1,
     370,    -1,   366,   370,    -1,   392,    -1,   394,   392,    -1,
     393,   392,    -1,   394,     1,    -1,   393,     1,    -1,   391,
      -1,   394,   391,    -1,   393,   216,    -1,   393,   366,   216,
      -1,   394,    -1,   393,    -1,    -1,   106,   390,   219,   132,
     401,   131,    -1,   106,   390,   152,   132,   401,   131,    -1,
     106,   390,   132,   401,   131,    -1,   302,   219,   390,   128,
      -1,   219,    -1,   124,   219,    -1,   123,   219,    -1,   398,
      -1,   399,   130,   398,    -1,   108,   399,   128,    -1,   108,
     399,   219,   128,    -1,   397,    -1,   400,    -1,   401,   397,
      -1,   401,   400,    -1,   109,   125,   246,   130,   246,   126,
      -1,   107,   125,   390,   130,   219,   126,    -1,   108,   125,
     390,   130,   219,   126,    -1,   106,   125,   390,   126,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   286,   286,   305,   344,   345,   425,   429,   432,   433,
     434,   473,   475,   480,   485,   490,   492,   497,   499,   504,
     506,   511,   513,   515,   517,   519,   523,   527,   540,   542,
     544,   546,   548,   554,   556,   561,   566,   571,   573,   575,
     580,   581,   585,   586,   597,   601,   602,   604,   609,   610,
     612,   615,   627,   638,   657,   659,   664,   665,   666,   667,
     668,   669,   670,   671,   684,   688,   689,   690,   691,   695,
     696,   697,   698,   699,   700,   701,   705,   707,   712,   714,
     716,   718,   720,   750,   752,   757,   759,   761,   763,   765,
     794,   796,   798,   803,   805,   810,   812,   816,   818,   820,
     822,   827,   830,   833,   836,   901,   903,   908,   910,   912,
     914,   916,   947,   951,   952,   953,   957,   958,   959,   963,
     964,   965,   966,   970,   973,   976,   979,   982,   987,   988,
     990,   992,   994,   996,  1001,  1005,  1008,  1011,  1014,  1017,
    1022,  1023,  1025,  1030,  1034,  1036,  1041,  1043,  1048,  1050,
    1055,  1060,  1062,  1067,  1069,  1071,  1073,  1078,  1080,  1082,
    1084,  1089,  1090,  1091,  1092,  1093,  1094,  1095,  1096,  1097,
    1098,  1099,  1101,  1102,  1104,  1108,  1111,  1112,  1113,  1114,
    1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,
    1126,  1127,  1131,  1132,  1133,  1137,  1141,  1142,  1143,  1147,
    1148,  1149,  1150,  1151,  1155,  1156,  1168,  1169,  1173,  1174,
    1175,  1176,  1177,  1178,  1179,  1180,  1184,  1188,  1189,  1193,
    1201,  1202,  1206,  1207,  1208,  1212,  1213,  1217,  1218,  1219,
    1220,  1221,  1222,  1262,  1263,  1267,  1275,  1276,  1284,  1285,
    1287,  1288,  1297,  1298,  1302,  1309,  1316,  1322,  1329,  1335,
    1344,  1351,  1357,  1363,  1369,  1375,  1381,  1392,  1397,  1398,
    1403,  1404,  1405,  1409,  1413,  1414,  1415,  1416,  1417,  1418,
    1419,  1432,  1433,  1434,  1435,  1436,  1437,  1438,  1439,  1440,
    1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,  1449,  1450,
    1451,  1452,  1453,  1454,  1455,  1457,  1458,  1459,  1460,  1461,
    1463,  1464,  1468,  1472,  1476,  1477,  1481,  1483,  1484,  1485,
    1486,  1487,  1488,  1489,  1490,  1491,  1493,  1494,  1495,  1496,
    1497,  1498,  1499,  1500,  1527,  1528,  1529,  1530,  1534,  1535,
    1536,  1537,  1538,  1542,  1543,  1544,  1545,  1547,  1548,  1549,
    1550,  1553,  1554,  1556,  1560,  1561,  1570,  1571,  1572,  1573,
    1574,  1575,  1576,  1577,  1581,  1582,  1583,  1587,  1588,  1589,
    1590,  1591,  1592,  1593,  1597,  1598,  1599,  1600,  1601,  1605,
    1606,  1607,  1608,  1609,  1613,  1621,  1622,  1623,  1624,  1625,
    1626,  1627,  1628,  1629,  1633,  1634,  1635,  1636,  1637,  1639,
    1640,  1641,  1642,  1646,  1647,  1648,  1650,  1651,  1655,  1656,
    1657,  1659,  1660,  1664,  1665,  1666,  1668,  1669,  1673,  1674,
    1675,  1679,  1680,  1681,  1685,  1686,  1687,  1688,  1689,  1691,
    1692,  1693,  1694,  1696,  1697,  1698,  1699,  1701,  1702,  1703,
    1704,  1708,  1709,  1710,  1711,  1712,  1714,  1715,  1716,  1717,
    1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,
    1731,  1735,  1736,  1737,  1738,  1742,  1743,  1744,  1748,  1749,
    1750,  1751,  1753,  1754,  1756,  1757,  1762,  1764,  1769,  1797,
    1798,  1799,  1800,  1802,  1803,  1804,  1805,  1807,  1808,  1812,
    1813,  1822,  1823,  1827,  1828,  1829,  1830,  1831,  1832,  1833,
    1837,  1838,  1842,  1846,  1850,  1857,  1858,  1859,  1860,  1861,
    1865,  1866,  1909,  1910,  1911,  1912,  1913,  1914,  1915,  1919,
    1920,  1921,  1922,  1923,  1930,  1931,  1932,  1933,  1937,  1938,
    1939,  1941,  1942,  1946,  1947,  1948,  1950,  1951,  1955,  1956,
    1957,  1959,  1960,  1964,  1965,  1966,  1970,  1971,  1972,  1976,
    1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,  1986,  1987,
    1988,  1989,  1990,  1991,  1992,  1993,  1995,  1996,  1997,  1998,
    2000,  2001,  2002,  2003,  2005,  2013,  2017,  2022,  2029,  2030,
    2034,  2039,  2040,  2044,  2045,  2046,  2047,  2053,  2054,  2055,
    2059,  2060,  2061,  2062,  2066,  2068,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,  2082,  2083,  2084,  2085,  2086,  2087,  2088,
    2092,  2093,  2094,  2095,  2096,  2097,  2101,  2102,  2103,  2107,
    2111,  2112,  2116,  2117,  2118,  2122,  2123,  2125,  2126,  2127,
    2128,  2129,  2131,  2132,  2133,  2134,  2135,  2137,  2138,  2142,
    2143,  2147,  2148,  2149,  2153,  2154,  2155,  2156,  2157,  2158,
    2159,  2160,  2161,  2163,  2164,  2166,  2167,  2168,  2169,  2170,
    2172,  2173,  2174,  2175,  2179,  2180,  2184,  2185,  2189,  2193,
    2194,  2195,  2200,  2201,  2205,  2206,  2207,  2208,  2209,  2210,
    2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,  2220,
    2221,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,
    2231,  2232,  2236,  2237,  2238,  2239,  2240,  2241,  2242,  2243,
    2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,  2253,
    2254,  2255,  2256,  2257,  2258,  2259,  2260,  2261,  2267,  2269,
    2271,  2273,  2275,  2277,  2279,  2281,  2283,  2285,  2290,  2291,
    2295,  2301,  2307,  2314,  2324,  2325,  2326,  2327,  2331,  2332,
    2333,  2335,  2336,  2337,  2339,  2340,  2341,  2345,  2349,  2357,
    2366,  2375,  2376,  2378,  2379,  2383,  2390,  2397,  2400,  2416,
    2430,  2433,  2435,  2437,  2442,  2443,  2447,  2448,  2449,  2450,
    2451,  2452,  2453,  2454,  2458,  2459,  2460,  2461,  2462,  2463,
    2464,  2465,  2466,  2467,  2471,  2472,  2473,  2474,  2475,  2476,
    2477,  2478,  2479,  2480,  2484,  2485,  2486,  2487,  2488,  2489,
    2490,  2491,  2492,  2493,  2494,  2495,  2499,  2500,  2501,  2502,
    2503,  2504,  2505,  2506,  2507,  2508,  2512,  2513,  2517,  2518,
    2519,  2520,  2521,  2522,  2523,  2524,  2525,  2527,  2529,  2537,
    2547,  2548,  2552,  2553,  2554,  2555,  2556,  2557,  2558,  2559,
    2560,  2568,  2577,  2578,  2579,  2580,  2581,  2582,  2583,  2584,
    2585,  2586,  2587,  2588,  2589,  2597,  2606,  2607,  2608,  2609,
    2610,  2611,  2612,  2613,  2614,  2615,  2616,  2617,  2618,  2626,
    2635,  2636,  2640,  2641,  2642,  2643,  2644,  2648,  2649,  2656,
    2658,  2667,  2676,  2685,  2694,  2695,  2696,  2697,  2701,  2702,
    2703,  2704,  2705,  2706,  2707,  2708,  2709,  2713,  2717,  2718,
    2719,  2720,  2721,  2726,  2735,  2744,  2753,  2767,  2768,  2773,
    2777,  2778,  2779,  2780,  2781,  2786,  2795,  2804,  2813,  2827,
    2828,  2877,  2878,  2880,  2891,  2902,  2903,  2904,  2916,  2917,
    2918,  2923,  2924,  2925,  2926,  2927,  2931,  2932,  2936,  2937,
    2938,  2942,  2943,  2947,  2948,  2952,  2953,  2954,  2955,  2956,
    2957,  2958,  2959,  2960,  2961,  2962,  2963,  2964,  2965,  2966,
    2967,  2971,  2972,  2973,  2974,  2975,  2976,  2977,  2978,  2982,
    2983,  2984,  2985,  2989,  2990,  2991,  2992,  2993,  2997,  2998,
    2999,  3000,  3001,  3005,  3006,  3008,  3010,  3012,  3017,  3018,
    3020,  3022,  3027,  3028,  3029,  3030,  3034,  3035,  3036,  3037,
    3041,  3042,  3043,  3044,  3048,  3049,  3050,  3051,  3055,  3056,
    3057,  3058,  3062,  3063,  3064,  3081,  3082,  3099,  3100,  3101,
    3102,  3115,  3132,  3133,  3138,  3139,  3143,  3144,  3145,  3146,
    3149,  3150,  3154,  3155,  3156,  3160,  3164,  3168,  3169,  3170,
    3171,  3172,  3173,  3174,  3183,  3192,  3193,  3194,  3195,  3199,
    3200,  3204,  3205,  3210,  3211,  3212,  3213,  3214,  3215,  3234,
    3235,  3239,  3240,  3241,  3242,  3243,  3244,  3246,  3247,  3248,
    3249,  3253,  3254,  3255,  3256,  3257,  3259,  3260,  3261,  3265,
    3266,  3267,  3268,  3269,  3270,  3274,  3275,  3276,  3281,  3282,
    3283,  3284,  3285,  3286,  3287,  3288,  3289,  3290,  3291,  3292,
    3293,  3297,  3298,  3299,  3300,  3301,  3302,  3303,  3307,  3308,
    3309,  3313,  3314,  3315,  3319,  3320,  3321,  3322,  3324,  3325,
    3326,  3328,  3329,  3330,  3331,  3333,  3334,  3335,  3339,  3340,
    3341,  3342,  3343,  3345,  3346,  3347,  3348,  3349,  3353,  3354,
    3355,  3356,  3357,  3358,  3359,  3361,  3362,  3363,  3364,  3365,
    3369,  3370,  3371,  3375,  3376,  3380,  3381,  3382,  3383,  3387,
    3388,  3389,  3391,  3392,  3393,  3397,  3401,  3402,  3404,  3405,
    3406,  3410,  3411,  3412,  3413,  3417,  3418,  3422,  3423,  3424,
    3428,  3429,  3430,  3431,  3432,  3433,  3434,  3438,  3439,  3440,
    3441,  3445,  3446,  3447,  3448,  3452,  3456,  3460,  3462,  3465,
    3471,  3472,  3473,  3477,  3478,  3479,  3480,  3481,  3482,  3486,
    3487,  3491,  3492,  3493,  3495,  3496,  3498,  3499,  3500,  3501,
    3502,  3504,  3505,  3509,  3510,  3511,  3512,  3516,  3517,  3518,
    3519,  3521,  3522,  3523,  3524,  3525,  3526,  3527,  3530,  3534,
    3535,  3539,  3540,  3544,  3545,  3546,  3547,  3548,  3549,  3550,
    3551,  3555,  3556,  3557,  3558,  3564,  3565,  3567,  3568,  3571,
    3572,  3575,  3576,  3577,  3578,  3579,  3580,  3584,  3585,  3597,
    3598,  3601,  3604,  3606,  3607,  3608,  3618,  3620,  3621,  3623,
    3624,  3625,  3626,  3636,  3637,  3638,  3639,  3640,  3641,  3642,
    3646,  3647,  3656,  3658,  3659,  3661,  3663,  3667,  3668,  3669,
    3670,  3671,  3675,  3676,  3677,  3679,  3684,  3685,  3686,  3690,
    3691,  3692,  3696,  3700,  3701,  3702,  3706,  3707,  3711,  3712,
    3716,  3717,  3718,  3719,  3723,  3727,  3731,  3735
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "INT128", "FLOAT128", "LONG", "SIGNED",
  "UNSIGNED", "FLOAT", "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST",
  "STRUCT", "UNION", "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH",
  "WHILE", "DO", "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX",
  "ELSE", "CLASS", "THISCLASS", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "THREAD",
  "WIDE_STRING_LITERAL", "BUILTIN_OFFSETOF", "PRAGMA", "'*'", "'<'", "'>'",
  "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'", "':'",
  "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'", "'^'",
  "'|'", "'?'", "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "multi_attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_noexp",
  "initializer_error", "initializer_condition",
  "initializer_condition_error", "initializer_list", "init_declarator",
  "init_declarator_error", "init_declarator_list",
  "init_declarator_list_error", "type_name", "guess_type_name",
  "parameter_declaration", "parameter_declaration_error", "parameter_list",
  "parameter_list_error", "parameter_type_list",
  "parameter_type_list_error", "statement", "statement_error", "asm_field",
  "asm_field_list", "asm_statement", "labeled_statement",
  "labeled_statement_error", "declaration_mode", "member_access",
  "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,    42,    60,    62,    40,    41,   126,    59,    61,
      44,   125,   123,    46,    58,    36,    91,    93,    38,    43,
      45,    33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   147,   148,   148,   149,   149,   150,   151,   152,   152,
     152,   153,   153,   154,   155,   156,   156,   157,   157,   158,
     158,   159,   159,   159,   159,   159,   159,   159,   160,   160,
     160,   160,   160,   161,   161,   162,   163,   164,   164,   164,
     165,   165,   166,   166,   166,   167,   167,   167,   168,   168,
     168,   168,   168,   168,   169,   169,   170,   170,   170,   170,
     170,   170,   170,   170,   170,   171,   171,   171,   171,   172,
     172,   172,   172,   172,   172,   172,   173,   173,   174,   174,
     174,   174,   174,   175,   175,   176,   176,   176,   176,   176,
     177,   177,   177,   178,   178,   179,   179,   179,   179,   179,
     179,   179,   179,   179,   179,   180,   180,   181,   181,   181,
     181,   181,   182,   183,   183,   183,   184,   184,   184,   185,
     185,   185,   185,   186,   186,   186,   186,   186,   187,   187,
     187,   187,   187,   187,   188,   189,   189,   189,   189,   189,
     190,   190,   190,   191,   192,   192,   193,   193,   194,   194,
     195,   196,   196,   197,   197,   197,   197,   198,   198,   198,
     198,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   200,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
     200,   200,   200,   200,   200,   200,   201,   201,   201,   202,
     202,   202,   202,   202,   203,   203,   204,   204,   205,   205,
     205,   205,   205,   205,   205,   205,   206,   207,   207,   208,
     209,   209,   210,   210,   210,   211,   211,   212,   212,   212,
     212,   212,   212,   213,   213,   214,   215,   215,   215,   215,
     215,   215,   215,   215,   216,   216,   216,   216,   216,   216,
     217,   218,   218,   218,   218,   218,   218,   219,   220,   220,
     221,   221,   221,   222,   223,   223,   223,   223,   223,   223,
     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
     223,   223,   224,   225,   226,   226,   227,   227,   227,   227,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     227,   227,   227,   227,   228,   228,   228,   228,   229,   229,
     229,   229,   229,   230,   230,   230,   230,   230,   230,   230,
     230,   230,   230,   230,   231,   231,   232,   232,   232,   232,
     232,   232,   232,   232,   233,   233,   233,   234,   234,   234,
     234,   234,   234,   234,   235,   235,   235,   235,   235,   236,
     236,   236,   236,   236,   237,   238,   238,   238,   238,   238,
     238,   238,   238,   238,   239,   239,   239,   239,   239,   239,
     239,   239,   239,   240,   240,   240,   240,   240,   241,   241,
     241,   241,   241,   242,   242,   242,   242,   242,   243,   243,
     243,   244,   244,   244,   245,   245,   245,   245,   245,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     245,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     247,   247,   247,   247,   247,   247,   247,   247,   247,   247,
     247,   248,   248,   248,   248,   249,   249,   249,   250,   250,
     250,   250,   250,   250,   250,   250,   250,   250,   250,   251,
     251,   251,   251,   251,   251,   251,   251,   251,   251,   252,
     252,   253,   253,   254,   254,   254,   254,   254,   254,   254,
     255,   255,   255,   255,   255,   256,   256,   256,   256,   256,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   258,
     258,   258,   258,   258,   258,   258,   258,   258,   259,   259,
     259,   259,   259,   260,   260,   260,   260,   260,   261,   261,
     261,   261,   261,   262,   262,   262,   263,   263,   263,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   265,   265,
     265,   265,   265,   266,   266,   266,   266,   266,   266,   266,
     267,   267,   267,   267,   268,   269,   270,   270,   270,   270,
     270,   270,   270,   271,   271,   271,   271,   271,   271,   271,
     272,   272,   272,   272,   272,   272,   273,   273,   273,   274,
     275,   275,   276,   276,   276,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   278,
     278,   279,   279,   279,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   281,   281,   282,   282,   283,   284,
     284,   284,   285,   285,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   287,   287,   287,   287,   287,   287,   287,   287,
     287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
     287,   287,   287,   287,   287,   287,   287,   287,   288,   288,
     288,   288,   288,   288,   288,   288,   288,   288,   289,   289,
     290,   290,   290,   290,   291,   291,   291,   291,   292,   292,
     292,   292,   292,   292,   292,   292,   292,   293,   294,   294,
     295,   296,   296,   296,   296,   297,   297,   297,   297,   297,
     297,   297,   297,   297,   298,   298,   299,   299,   299,   299,
     299,   299,   299,   299,   300,   300,   300,   300,   300,   300,
     300,   300,   300,   300,   301,   301,   301,   301,   301,   301,
     301,   301,   301,   301,   302,   302,   302,   302,   302,   302,
     302,   302,   302,   302,   302,   302,   303,   303,   303,   303,
     303,   303,   303,   303,   303,   303,   304,   304,   305,   305,
     305,   305,   305,   305,   305,   305,   305,   305,   305,   305,
     306,   306,   307,   307,   307,   307,   307,   307,   307,   307,
     307,   307,   308,   308,   308,   308,   308,   308,   308,   308,
     308,   308,   308,   308,   308,   308,   309,   309,   309,   309,
     309,   309,   309,   309,   309,   309,   309,   309,   309,   309,
     310,   310,   311,   311,   311,   311,   311,   312,   312,   312,
     312,   312,   312,   312,   312,   312,   312,   312,   313,   313,
     313,   313,   313,   313,   313,   313,   313,   314,   315,   315,
     315,   315,   315,   316,   316,   316,   316,   317,   317,   318,
     319,   319,   319,   319,   319,   320,   320,   320,   320,   321,
     321,   322,   322,   322,   322,   322,   322,   322,   323,   323,
     323,   324,   324,   324,   324,   324,   325,   325,   326,   326,
     326,   327,   327,   328,   328,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     329,   330,   330,   330,   330,   330,   330,   330,   330,   331,
     331,   331,   331,   332,   332,   332,   332,   332,   333,   333,
     333,   333,   333,   334,   334,   334,   334,   334,   335,   335,
     335,   335,   336,   336,   336,   336,   337,   337,   337,   337,
     338,   338,   338,   338,   339,   339,   339,   339,   340,   340,
     340,   340,   341,   341,   341,   342,   342,   343,   343,   343,
     343,   343,   344,   344,   345,   345,   346,   346,   346,   346,
     346,   346,   347,   347,   347,   348,   348,   349,   349,   349,
     349,   349,   349,   349,   349,   350,   350,   350,   350,   351,
     351,   352,   352,   353,   353,   353,   353,   353,   353,   354,
     354,   355,   355,   355,   355,   355,   355,   355,   355,   355,
     355,   356,   356,   356,   356,   356,   356,   356,   356,   357,
     357,   357,   357,   357,   357,   358,   358,   358,   359,   359,
     359,   359,   359,   359,   359,   359,   359,   359,   359,   359,
     359,   360,   360,   360,   360,   360,   360,   360,   361,   361,
     361,   362,   362,   362,   363,   363,   363,   363,   363,   363,
     363,   363,   363,   363,   363,   363,   363,   363,   364,   364,
     364,   364,   364,   364,   364,   364,   364,   364,   365,   365,
     365,   365,   365,   365,   365,   365,   365,   365,   365,   365,
     366,   366,   366,   367,   367,   368,   368,   368,   368,   369,
     369,   369,   369,   369,   369,   370,   371,   371,   371,   371,
     371,   372,   372,   372,   372,   373,   373,   374,   374,   374,
     375,   375,   375,   375,   375,   375,   375,   376,   376,   376,
     376,   377,   377,   377,   377,   378,   379,   380,   380,   380,
     381,   381,   381,   382,   382,   382,   382,   382,   382,   383,
     383,   384,   384,   384,   384,   384,   384,   384,   384,   384,
     384,   384,   384,   385,   385,   385,   385,   385,   385,   385,
     385,   385,   385,   385,   385,   385,   385,   385,   385,   385,
     385,   385,   385,   386,   386,   386,   386,   386,   386,   386,
     386,   387,   387,   387,   387,   388,   388,   388,   388,   388,
     388,   389,   389,   389,   389,   389,   389,   390,   390,   391,
     391,   391,   391,   391,   391,   391,   391,   391,   391,   391,
     391,   391,   391,   391,   391,   391,   391,   391,   391,   391,
     392,   392,   392,   392,   392,   392,   392,   393,   393,   393,
     393,   393,   394,   394,   394,   394,   395,   395,   395,   396,
     396,   396,   397,   398,   398,   398,   399,   399,   400,   400,
     401,   401,   401,   401,   402,   403,   404,   405
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4,     1,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     2,     1,     3,     3,     1,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     2,     5,     6,     6,     2,     5,     1,
       1,     1,     4,     1,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
       5,     5,     5,     5,     4,     4,     4,     4,     5,     5,
       5,     5,     4,     4,     4,     4,     5,     5,     5,     5,
       5,     5,     5,     5,     3,     3,     2,     2,     1,     3,
       3,     3,     3,     1,     2,     3,     3,     2,     2,     2,
       1,     2,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     4,     4,     1,     3,     2,     1,
       2,     2,     2,     4,     4,     3,     3,     4,     5,     4,
       6,     6,     4,     5,     4,     6,     6,     5,     5,     2,
       2,     2,     5,     3,     5,     6,     5,     7,     7,     8,
       8,     7,     7,     3,     3,     3,     4,     3,     5,     5,
       6,     7,     6,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     4,     1,     1,     2,
       2,     3,     5,     2,     3,     5,     5,     5,     1,     3,
       2,     2,     3,     3,     2,     3,     3,     4,     3,     3,
       3,     3,     3,     3,     4,     4,     4,     1,     1,     4,
       3,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       3,     3,     1,     3,     3,     3,     3,     1,     1,     1,
       4,     4,     4,     3,     4,     4,     4,     3,     1,     3,
       4,     3,     4,     4,     4,     4,     3,     2,     3,     3,
       3,     3,     2,     2,     2,     3,     4,     1,     1,     2,
       3,     3,     3,     3,     2,     2,     2,     3,     4,     1,
       1,     1,     1,     2,     2,     1,     1,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     2,
       3,     6,     5,     1,     2,     3,     4,     2,     3,     3,
       3,     3,     4,     4,     4,     2,     3,     3,     3,     4,
       4,     3,     4,     2,     3,     3,     3,     4,     4,     1,
       2,     2,     3,     1,     1,     2,     2,     3,     1,     1,
       2,     2,     3,     1,     2,     3,     2,     2,     1,     2,
       3,     2,     1,     2,     3,     3,     1,     2,     3,     3,
       1,     2,     3,     3,     1,     2,     3,     3,     1,     2,
       3,     3,     1,     3,     4,     3,     4,     1,     4,     2,
       5,     3,     1,     1,     1,     1,     1,     1,     3,     3,
       2,     2,     1,     1,     3,     2,     3,     1,     3,     3,
       3,     3,     3,     3,     3,     1,     2,     3,     3,     1,
       2,     1,     2,     2,     2,     2,     3,     1,     1,     3,
       3,     1,     3,     4,     3,     4,     3,     3,     4,     3,
       4,     1,     3,     3,     4,     3,     3,     3,     4,     1,
       3,     3,     3,     3,     3,     1,     3,     2,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     1,     2,     1,     1,     4,
       7,     1,     3,     0,     6,     8,    10,    12,     8,    10,
      10,     5,     7,     9,    11,     7,     9,     9,     3,     4,
       4,     3,     3,     3,     4,     4,     3,     3,     3,     4,
       4,     3,     2,     3,     2,     3,     4,     4,     3,     3,
       1,     1,     1,     1,     1,     2,     3,     2,     2,     2,
       3,     3,     2,     5,     6,     2,     2,     2,     2,     2,
       2,     1,     2,     2,     3,     1,     2,     1,     2,     2,
       1,     2,     2,     2,     2,     2,     2,     1,     1,     2,
       2,     1,     1,     2,     2,     1,     2,     2,     1,     2,
       1,     2,     2,     5,     5,     7,     7,     5,     5,     3,
       2,     5,     4,     4,     7,     6,     6,     5,     7,     6,
       4,     7,     9,     3,     4,     4,     5,     5,     6,     7,
       6,     6,     5,     5,     4,     3,     2,     1,     2,     4,
       3,     5,     4,     3,     2,     2,     2,     3,     3,     3,
       3,     2,     2,     1,     1,     4,     3,     4,     3,     3,
       2,     4,     3,     4,     3,     3,     2,     1,     2,     1,
       1,     2,     1,     2,     3,     3,     1,     2,     2,     2,
       3,     4,     4,     2,     2,     2,     2,     1,     2,     1,
       1,     2,     1,     2,     2,     1,     2,     1,     2,     2,
       2,     2,     1,     2,     2,     3,     1,     1,     0,     6,
       6,     5,     4,     1,     2,     2,     1,     3,     3,     4,
       1,     1,     2,     2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1308,   257,     6,   593,   594,   595,   597,   598,   665,   666,
     667,   668,   669,   670,   671,   673,   676,   677,   674,   675,
     659,   660,   664,   672,   764,   765,   609,  1152,   235,   685,
     921,   922,     0,     0,   928,  1150,  1151,   686,   687,   678,
       0,     0,     0,     0,     0,   929,   930,   689,   688,   690,
     691,   599,   596,  1289,   969,     0,  1276,   812,   681,     8,
       4,     0,     0,     0,  1270,     0,  1290,   888,   806,     0,
     680,     0,   654,   656,   814,   816,   661,   808,   810,   747,
     679,     0,     0,   655,   657,     0,     0,     0,     0,     0,
     992,   658,     0,   925,   926,     0,     0,     0,  1272,  1295,
    1269,  1292,  1302,  1297,     0,     0,     0,  1287,     0,  1284,
    1267,     0,     0,  1273,     0,     0,     0,     0,  1286,  1285,
       0,   662,   970,   658,   971,   879,   878,   888,   920,   877,
     907,   983,     0,   919,   988,     0,     0,     0,     0,     0,
       0,  1162,     0,   237,   236,     0,     0,   245,     0,   244,
       2,     3,     0,     5,     0,   611,   610,     0,     0,   631,
       0,     0,     0,     0,   751,     0,   731,   730,     0,  1165,
     595,   668,   669,   670,   671,  1159,   813,     8,  1271,  1291,
     888,   807,   815,   817,   809,   811,   992,  1000,   658,     0,
       0,  1033,     0,     0,     0,  1045,     0,     0,   879,     0,
       0,     0,   878,     0,     0,   897,     0,     0,   586,   587,
     588,   590,   591,  1058,   592,   589,   902,   800,   872,   794,
       0,   804,     0,   796,   798,   747,   802,     0,     0,  1057,
       0,     0,  1061,  1071,     0,     0,     0,     0,   924,   923,
       0,     0,   944,   993,     0,   693,   694,   695,   696,   697,
     698,   699,   701,   704,   705,   702,   703,   692,   700,   717,
     706,     0,     0,   711,   710,   712,   713,  1195,   709,     0,
       0,   784,   708,   790,   786,   788,   792,   707,     0,  1171,
       0,     0,     0,     0,  1260,  1266,   595,     0,  1283,  1278,
    1293,     0,  1279,  1296,  1277,  1294,  1288,  1301,  1304,     0,
       0,     0,     0,     0,  1299,  1300,  1303,  1298,     1,     0,
    1274,  1275,  1268,     0,     0,   459,   263,     0,     0,     0,
       0,     0,     0,   352,   353,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   273,     0,   347,     0,   350,
       0,     0,   346,   348,   349,   351,     0,   265,     0,   264,
     306,   272,   271,   258,   458,     0,   344,   354,     0,   357,
     364,   369,   375,     0,   384,   393,   398,   403,   408,   411,
     414,   431,     0,   480,   479,   481,   483,   490,   495,   500,
     509,   518,   523,   528,   533,   536,   539,     0,   260,   296,
     297,   298,   299,     0,     0,     0,     0,     0,   663,   972,
       0,   909,     0,   914,     0,     0,     0,     0,   924,   923,
       0,     0,     0,   920,   984,   989,     0,   889,   986,   891,
     991,   987,   678,     4,   229,   228,   227,   233,     0,   264,
     354,   219,   481,     0,   206,   249,     0,     0,   248,   255,
       0,     0,  1153,  1154,     0,   168,     0,   169,   170,     0,
       0,     0,     0,     0,   172,   246,     0,     0,     0,     0,
      29,    31,   163,   175,   188,     0,   187,     0,   116,   119,
       0,   195,   128,     0,   164,   140,     0,   167,   183,   196,
     199,     0,     0,   264,     0,     0,   176,     0,   996,   658,
       0,    12,    18,     0,   819,   818,   826,   820,     0,   822,
     824,   747,   831,   830,   250,   256,   247,     0,     0,   239,
     238,   644,   600,   606,   643,   647,   633,     0,     0,     0,
     222,   223,   224,   225,     0,   217,     0,   760,   753,     0,
       0,   750,   757,   752,     0,     0,   763,   754,     0,     0,
     733,   732,     0,     0,     0,     0,     0,     0,     0,   993,
    1001,     0,  1035,     0,     0,  1256,  1262,     0,  1258,  1264,
    1046,  1160,     0,     0,     0,  1161,   896,     0,   264,   584,
     585,     0,     0,     0,     0,   611,   610,   612,     0,   734,
       0,     0,   668,     0,     0,  1055,   801,     8,   888,   795,
     805,   797,   799,   803,   920,   877,   658,   974,   973,     0,
       0,     0,   901,     0,     0,   900,     0,     0,     0,  1087,
       0,   898,   899,   994,     0,   995,     0,     0,  1169,  1157,
    1168,    76,  1166,   696,   697,   698,   699,  1155,   888,   785,
     791,   787,   789,   793,   658,     0,  1170,  1167,  1158,     0,
    1172,     0,  1259,  1265,  1173,     0,     0,     0,     0,     0,
       0,     0,     0,  1254,     0,     0,     0,   706,     0,     0,
       0,   157,  1091,  1092,   709,     0,     0,     0,   264,     0,
     354,     0,     0,   481,   568,   573,     0,  1089,  1177,  1180,
    1097,  1088,  1101,     0,     0,     0,     0,  1199,  1197,  1090,
    1103,     0,  1104,  1095,  1102,     0,  1105,  1196,     0,     0,
    1280,   888,     0,     0,     0,  1291,     0,   877,  1000,   658,
       0,     0,     0,     0,  1266,  1305,     0,     0,   414,     0,
       0,   927,     0,   337,   473,     0,   333,   469,   334,   470,
       0,   866,   856,   864,   858,   860,   862,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   341,
     477,     0,   274,     0,     0,     0,   770,   766,   768,   772,
    1049,     0,   261,     0,   301,   302,     0,   325,     0,   324,
       0,   461,    93,     0,   270,   460,     0,   314,   315,     0,
       0,     0,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   440,     0,     0,   336,   472,   335,   471,     0,
       0,     0,     0,     0,     0,     0,   376,   501,     0,     0,
     374,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   682,     0,   322,   323,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   683,
     684,     0,     0,     0,  1320,  1321,     0,     0,     0,   883,
       0,     0,     0,   887,     0,     0,     0,   913,   912,   910,
     911,   920,   984,   989,   890,   892,  1011,    10,     9,     0,
       0,     0,   658,   973,   207,     0,     0,   264,   206,     0,
       0,   838,   832,   834,   836,     0,     0,     0,    16,    20,
       0,   185,   184,   186,     0,     0,     0,     0,   347,     0,
     264,     0,    26,     0,    21,    28,    24,     0,    25,    23,
      22,    30,    32,   190,    83,   191,   122,   162,     0,     0,
       0,     0,   132,     0,     0,   134,     0,     0,   143,   161,
     200,   197,   202,   201,   198,   203,   115,     0,     0,     0,
     888,   728,   177,  1008,     0,  1004,   658,     0,    11,    17,
     718,   904,  1057,     0,     0,     0,   997,     0,     0,   173,
     165,   192,   181,     0,   180,     0,   166,   888,   179,     0,
     611,   610,   827,   821,   823,   825,     0,     0,     0,   943,
     603,   608,   646,     0,     0,     7,   212,   208,   749,     0,
       0,     0,     0,  1032,  1039,  1040,  1041,  1042,  1043,    64,
      53,    92,    39,    38,    57,    69,    45,    48,     0,    74,
      56,     0,     0,     0,  1023,  1025,     0,  1022,  1024,     0,
      41,    44,   920,   994,   985,  1002,   990,  1011,  1003,     0,
    1012,  1017,  1034,  1036,  1255,  1261,  1257,  1263,  1038,  1047,
    1044,  1048,   895,   893,   894,  1084,  1066,  1075,   616,   615,
       0,     0,   459,   735,     0,     0,   459,   736,     0,     0,
       0,   955,   888,     0,     0,   658,   973,     0,     0,     0,
     947,     0,     0,     0,     0,     0,  1056,   976,     0,     0,
     975,  1060,  1059,     0,   871,  1083,   874,  1069,  1077,     0,
     870,  1082,   873,  1067,  1076,     0,  1086,  1080,   875,  1062,
    1072,     0,  1081,   876,  1064,  1073,   931,   932,   935,   934,
     933,     0,   936,   938,     0,     0,     0,     0,    77,     0,
    1156,  1174,     0,     0,     0,     0,     0,     0,  1238,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
       0,  1089,  1236,  1094,  1096,     0,     0,  1244,  1245,  1246,
       0,  1252,     0,     0,     0,     0,     0,     0,   158,   144,
    1100,  1099,  1098,     0,     0,     0,   574,     0,  1093,     0,
       0,     0,     0,   454,     0,     0,   459,     0,     0,     0,
       0,  1178,  1181,  1183,     0,  1179,  1182,  1184,     0,  1210,
    1106,  1281,  1282,   237,   236,     0,     0,     0,  1001,     0,
       0,  1262,     0,  1264,  1265,     0,     0,  1163,     0,     0,
     778,   264,   780,   774,   776,   782,  1051,     0,     0,     0,
       0,     0,     0,   867,   857,   865,   859,   861,   863,   658,
     979,   978,     0,   852,   842,   850,   844,   846,   848,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,   771,   767,   769,   773,
    1050,     0,     0,   459,     0,     0,     0,   105,     0,   300,
     459,     0,     0,    94,   459,     0,     0,   462,   313,   309,
     329,   464,   465,   328,   466,   312,     0,     0,   436,   432,
     303,   358,   484,   359,   485,   360,   486,   365,   491,   366,
     492,   370,   496,   371,   497,   378,   503,   379,   504,   377,
     502,   389,   514,   385,   510,   390,   515,   386,   511,   396,
     521,   394,   519,   401,   526,   399,   524,   406,   531,   404,
     529,   409,   534,   412,   537,   564,     0,   580,     0,     0,
       0,     0,   438,   434,   463,   321,   318,     0,   467,   468,
     320,     0,     0,   437,   433,   361,   487,   362,   488,   363,
     489,   367,   493,   368,   494,   372,   498,   373,   499,   382,
     507,   383,   508,   380,   505,   381,   506,   391,   516,   387,
     512,   392,   517,   388,   513,   397,   522,   395,   520,   402,
     527,   400,   525,   407,   532,   405,   530,   410,   535,   413,
     538,   565,     0,     0,     0,     0,   439,   435,     0,     0,
    1313,  1316,     0,     0,  1311,  1322,  1323,     0,     0,   882,
     880,   881,   886,   884,   885,   234,   232,   231,   230,   264,
     658,   976,   241,     0,   207,   240,   127,     0,   125,   839,
     833,   835,   837,     0,   658,     0,    15,    19,     0,   182,
    1008,   658,     0,   139,     0,   137,   839,     0,   264,   658,
       0,    27,    84,   117,   120,   118,   121,   129,   130,   131,
     133,   141,   142,   114,   112,   113,    13,   720,   723,     0,
       0,   916,  1057,     0,     0,     0,  1009,  1005,     0,     0,
     719,   888,   905,   998,   999,   888,   193,   194,   178,     0,
       0,     0,     0,   601,   602,     0,   607,     0,     0,   636,
     632,     0,     0,     0,     0,     0,   226,   218,   216,     0,
       0,     0,    36,    37,    75,    54,     0,    55,     0,    63,
      61,    72,    67,    73,    60,    90,    39,    70,    62,    91,
      59,    71,    68,     0,    58,     0,   696,    33,    35,    34,
    1026,  1027,     0,   624,   614,     0,   619,   613,     0,   459,
     737,     0,     0,     0,   973,     0,   945,   956,   957,   950,
     948,   949,     0,   977,   958,     0,     0,   951,     0,     0,
       0,  1070,  1078,  1057,  1068,  1063,  1065,  1074,   942,     0,
       0,     0,   939,   714,   715,   716,   459,     0,     0,  1131,
    1141,  1136,     0,     0,     0,  1132,  1143,  1137,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1235,  1223,
       0,  1200,   264,     0,     0,     0,  1243,  1249,  1250,  1247,
    1248,     0,     0,     0,     0,   145,  1128,  1138,  1133,     0,
     159,   571,   569,     0,     0,     0,   452,   575,   572,   570,
     453,   576,     0,  1002,  1261,  1263,  1164,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   779,   781,   775,
     777,   783,  1052,     0,   293,   291,     0,     0,   963,   658,
       0,     0,     0,     0,     0,     0,   981,     0,   980,     0,
       0,     0,   853,   843,   851,   845,   847,   849,     0,   267,
       0,   266,   295,     0,     0,     0,     0,     0,     0,  1327,
       0,     0,     0,     0,     0,     0,   356,   482,   355,   262,
     108,   106,   327,   326,    99,   103,   310,     0,   311,   307,
     308,   581,     0,     0,     0,     0,     0,     0,   319,   316,
     317,     0,     0,     0,     0,  1315,  1314,  1318,     0,     0,
       0,  1310,  1309,     0,   973,   218,     0,     0,   123,   126,
       0,     0,     0,     0,     0,  1009,     0,   135,   138,     0,
      14,   459,     0,     0,   729,     0,   888,   917,  1010,  1006,
    1007,   721,   724,   906,   174,   828,     0,   243,   242,   604,
     605,     0,   635,     0,   213,   214,   204,   209,   210,   220,
       0,     0,    51,    46,    49,    52,    47,    50,    37,    43,
      40,    42,     0,     0,  1030,  1031,   623,     0,   618,     0,
     976,   975,   946,   959,   960,   953,   952,   954,  1054,  1053,
       0,   941,   940,    79,  1129,  1139,  1134,     0,  1130,  1140,
    1135,     0,     0,     0,     0,     0,  1239,  1213,     0,     0,
    1212,  1242,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1220,     0,  1201,  1224,  1202,  1225,     0,
       0,     0,  1113,   927,  1113,     0,     0,   155,     0,     0,
       0,   160,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   474,   292,   868,     0,   978,     0,   961,   964,
     965,   277,   278,     0,   982,   966,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   268,   281,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   331,   330,   456,   582,   423,   556,   415,   540,   427,
     560,   419,   548,   457,   583,   424,   557,   416,   541,   428,
     561,   420,   549,   425,   558,   417,   542,   429,   562,   421,
     550,   426,   559,   418,   543,   430,   563,   422,   551,  1317,
    1319,  1312,   840,     0,   124,   150,  1010,     0,   136,    86,
     918,     0,     0,   829,     0,     0,     0,     0,     0,     0,
     205,     0,   221,     0,     0,  1028,  1029,  1018,     0,     0,
       0,     0,   937,  1203,  1204,  1207,  1208,  1211,  1241,     0,
       0,     0,     0,     0,     0,     0,  1217,  1226,     0,     0,
       0,     0,  1111,     0,  1108,  1121,     0,  1113,     0,  1113,
       0,     0,     0,     0,   476,   475,   980,   962,   869,   967,
     968,   275,   276,   854,   285,   286,     0,     0,     0,     0,
     279,   280,   289,   290,     0,     0,   294,  1325,  1326,  1324,
     343,     0,  1015,   841,     0,   722,   725,   727,   726,     0,
       0,   215,   211,     0,  1013,  1020,     0,     0,     0,     0,
       0,     0,     0,  1231,  1215,     0,     0,  1216,  1228,     0,
    1219,  1230,     0,     0,     0,  1113,     0,  1113,     0,  1113,
       0,  1114,     0,     0,     0,   148,     0,   153,     0,   156,
       0,   855,   283,   284,     0,   287,   288,  1016,   171,  1014,
    1205,  1206,     0,     0,  1214,  1221,     0,  1218,  1229,     0,
    1125,  1112,     0,     0,     0,  1122,     0,     0,  1113,  1113,
       0,  1113,   147,   146,   151,   149,     0,     0,     0,   356,
     482,   269,     0,     0,     0,  1109,     0,     0,  1113,  1118,
       0,     0,  1115,     0,     0,   154,     0,  1222,     0,  1126,
    1127,  1123,     0,     0,     0,     0,  1113,   152,     0,  1013,
       0,     0,  1119,  1120,  1116,     0,  1014,  1110,  1124,     0,
    1117
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   217,    58,    59,   996,   346,   456,   457,   458,   459,
     460,   461,   462,   463,  1012,  1013,  1014,  1015,  1016,  1017,
    1018,  1019,  1020,  1021,  1022,  1023,   269,   270,   464,   465,
      61,   347,   348,   765,   794,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,  2124,  2125,  2126,   478,   665,
     666,   667,   479,   480,   481,   482,  1815,   424,   520,   425,
     521,   426,   522,   523,   886,   427,   428,    62,    63,    64,
      65,    66,   349,   350,   351,   352,   353,  1024,  1025,   354,
     355,   768,  1292,   356,   670,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   753,
     848,   672,  1349,   373,   374,   673,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   674,   675,  1150,
    1351,   571,   572,   219,    68,   513,   514,   220,    70,   221,
     222,    71,    72,    73,    74,    75,    76,   223,   122,   224,
     275,   951,   952,   225,   226,   227,    80,    81,    82,    83,
      84,   228,   760,  1226,   278,   486,    86,    87,   503,   504,
     896,  1249,   737,  1073,  1074,   128,    88,   487,    90,   488,
     131,   132,   133,   955,   134,   123,    92,  1122,  1123,  1124,
      93,    94,   597,  1240,   490,   599,  1242,   137,   191,   491,
     492,   193,   959,   139,  1560,  1738,  1561,  1030,  1031,  1562,
     194,   195,   196,   197,   761,  1227,   232,   233,   234,   235,
     236,   237,   678,   679,  2042,  2043,   680,   681,   682,    97,
     493,   279,    98,    99,   280,   281,   282,   685,   686,   687,
     688,   283,   689,   917,  1645,  1153,   692,   693,   694,  1154,
     696,   100,   101,   388,   102,   103,   104,   105,   106,   107,
     854,  1421,  1422,   855,   856,   389,   390,   391,   392
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -2002
static const int yypact[] =
{
   40264, -2002, -2002, -2002, -2002,    61, -2002, -2002, -2002, -2002,
   -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002,
   -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002,
   -2002, -2002,   764,   188, -2002, -2002, -2002, -2002, -2002, -2002,
     109,   221,   288,   172,   454, -2002, -2002, -2002, -2002, -2002,
   -2002, -2002, -2002, -2002,  2440,  2759, -2002, -2002, -2002,    85,
   -2002,   300,   172,   621, -2002,   939,   416,   918, -2002,   264,
   -2002,   978, -2002,   468, -2002, -2002, -2002, -2002, -2002,   972,
   -2002,  1028,   422, -2002,   488,  1500, 39860,  2882,   687, 40566,
   -2002,   494,   514, -2002,    70,  1587, 43252, 38290, -2002, -2002,
   -2002, -2002, -2002, -2002, 40368, 39447,   663, -2002,   188, -2002,
   -2002,   454,   454,   673,   591,   454, 30819,   172, -2002, -2002,
     352, -2002,  2440,   102, -2002, -2002,   610, -2002,   774,  1089,
   -2002, -2002, 40665, -2002, -2002,  2977,  1887,  1959,  2028,  1124,
   23692, -2002,   679,   405,   740, 31995, 42870, -2002, 32124, -2002,
   -2002, -2002,   172, -2002,  1236,  1156,  1181,   184, 42870, -2002,
   42597, 32253, 42870, 32382, -2002, 32511, -2002, -2002,  1002, -2002,
   -2002,    34,   690,   699,   763, -2002, -2002,  1046, -2002,   416,
     344, -2002, -2002, -2002, -2002, -2002,   802,  1222,   494,  1887,
    1192,  1124, 43252, 43252,   244, -2002,  1207,   788,   826,   690,
     699,   763,   519,   494,  1226, -2002, 28927,   839, -2002, -2002,
   -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002,   751, -2002,
     307, -2002,   724, -2002, -2002,   844, -2002,   861,  1715, 37261,
     127,   423, -2002, -2002,   619,   626,   889,   910, -2002, -2002,
     367,   899, -2002, -2002,   863, -2002, -2002, -2002, -2002, -2002,
   -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002,
   -2002,   920,  1012, -2002, -2002, -2002, -2002, -2002, -2002,   330,
     101, -2002, -2002, -2002, -2002, -2002, -2002, -2002, 40062, -2002,
   17318, 38718, 43461, 17460, -2002,   969,  1092,   898, -2002, -2002,
     416, 39961, -2002, -2002, -2002, -2002, -2002, -2002, -2002,   468,
     488, 41160, 43252, 41457, -2002, -2002, -2002, -2002, -2002,   974,
     673,   673, -2002, 30819,   228, -2002, -2002, 30905, 30991, 30991,
    1022, 43052, 30819, -2002, -2002,  1071,  1087, 43052, 30819,  1090,
    1104,  1109,  1121,  1130, 31077, -2002,  1138, -2002, 23942, -2002,
     454, 10115, -2002, -2002, -2002, -2002,  1047, -2002,   117,  1142,
   -2002, -2002,   188, -2002, -2002, 12344, -2002,  2057, 29013, -2002,
     975,   574,  1596, 30819,  1030,  1354,  1161,  1139,  1165,  1307,
      84,  2057,  1206,   657, -2002,  2057, -2002,  1151,  1332,  1706,
    1061,  1705,  1239,  1213,  1240,  1398,   193,  2057,   673, -2002,
   -2002, -2002, -2002,  1269,   110, 42688,  1292,  1303, -2002, -2002,
   29099, -2002, 29185, -2002,   675,   735,  1330,  1365,   922,   979,
    1887,  2253,  2269,   774, -2002, -2002,  1476, -2002,   102, -2002,
     102,   102,  1071,  1047, -2002, -2002, -2002, -2002,   825,   602,
   -2002,  1596, -2002,  1706, 37377, -2002, 23817, 42597, -2002,   650,
   42324, 41556, -2002, -2002,  1315, -2002,   172, -2002, -2002,   188,
   41754, 41358,  8630, 42961, -2002, -2002,  1320,  1387,  1387,   958,
   -2002,  1404, -2002, -2002, -2002,   132,   698,   137, -2002, -2002,
   31342,  1412, -2002,  1526, -2002, -2002,   900, -2002, -2002, -2002,
    1419, 31479, 31608,   267,   215,   657, 38504, 40764, -2002,   494,
    1587, -2002, -2002, 38397, -2002, -2002,  1432, -2002,   172, -2002,
   -2002, -2002,  2118, 43052, -2002,   650, -2002, 31737, 31866,  1442,
    1447, -2002,  1069, -2002,  1443, -2002, -2002,  4297,  1430,   770,
   -2002, -2002, -2002, -2002,   678,   725, 37377,  1025, -2002, 32640,
   32769, -2002,  1025, -2002, 32898, 33027,  1025, -2002, 33156, 33285,
   -2002, -2002,  2759,  2759,  2759,  2759,  2759, 21859,   791,   802,
    1222,  1476, -2002, 29271, 38718, -2002,   969, 38718, -2002,   969,
   -2002, -2002,  2759,  2759,   791, -2002, -2002,  1462,   256, -2002,
   -2002,  1499,  1514, 42415,  1414,  1527,  1537, -2002, 33414, -2002,
   33543,   261, -2002, 12491, 29357,  2759, -2002,  1469,   751, -2002,
   -2002, -2002, -2002, -2002,   774,  1545,   494,   913,    78,   397,
     734,  1543, -2002, 42051,  1555, -2002, 42142,  1565, 42233,  1573,
   42506, -2002, -2002, -2002,  1388, -2002, 30819,   172, -2002, -2002,
    1578, -2002, -2002,    34,   690,   699,   763, -2002,  1579, -2002,
   -2002, -2002, -2002, -2002,   494,  1378,   788, -2002, -2002,  1597,
   -2002, 17602, -2002,   969, -2002,   376, 29443,  1595,  1610,  1621,
     148, 17744,  1622,   188,  1623,  1624, 17886,  1071,  2179,  1625,
    1630,   188, -2002, -2002,  1047,  1628,  1631,  1632,  1449, 15747,
    2057, 16040, 26175,  2057,  2057, -2002, 16182, 40163, -2002, -2002,
   -2002, -2002, -2002, 18028, 18170, 18312, 18454, -2002, -2002, -2002,
     969, 18596, -2002, -2002, -2002, 18738, -2002, -2002,   454,   454,
     673,   568,   172,  1487,  1629, -2002,   774,   687, -2002,   494,
    1887, 43252, 43252, 38718, -2002, -2002, 41259, 30819,   257,  1634,
     333, -2002, 24083, -2002, -2002, 29529, -2002, -2002, -2002, -2002,
   43052,  1640, -2002, -2002, -2002, -2002, -2002, 37725, 43052, 24224,
     188, 37841, 43052, 30819,   454,   454,   454, 30819, 23942, -2002,
   -2002,  8904, -2002, 12647, 12807, 12954, -2002, -2002, -2002, -2002,
   38176,  1638,   142, 22000, -2002, -2002,   150, -2002,   293, -2002,
   22141,  1636, -2002, 22282, -2002, -2002,  1627, -2002, -2002, 26261,
    1653, 30819, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002,
   -2002, -2002, -2002, 29013,   165, -2002, -2002, -2002, -2002, 30819,
   30819, 30819, 30819, 30819, 30819, 30819,  1596,  1706, 30819, 30819,
   -2002, 30819, 29013, 29013, 29013, 29013, 29013, 30819, 30819, 13101,
   29013, -2002,  1657, -2002, -2002, 26347,  1663, 30819, 29013, 30819,
   30819, 30819, 30819, 30819, 30819, 30819, 30819, 30819, 30819, 30819,
   29013, 29013, 29013, 29013, 29013, 30819, 30819, 13248, 29013, -2002,
   -2002,   726,   751, 42961, -2002, -2002, 39548, 42688, 42688, -2002,
    1633,  1635,  1642, -2002,  1643,  1646,  1648, -2002, -2002, -2002,
   -2002,   774, -2002, -2002, -2002, -2002,  1652, -2002, -2002, 23692,
   23692, 37145,   494,   973, -2002,   486,   865,  1249, 37377,   996,
    1639,  1651, -2002, -2002, -2002,  2118, 37493, 41655, -2002, -2002,
     188, -2002, -2002, -2002, 38611,  1661,   188, 37609,  1374, 24349,
    1314, 41853, -2002,  1666, -2002,   969, -2002,   969, -2002, -2002,
   -2002,   969, -2002,  1658, -2002,  1107, -2002, -2002,  4638,  4638,
    1387,  1387, -2002,  1387,   179, -2002,  1387,  1387, -2002, -2002,
     750, -2002,  1419,   750, -2002,  1419,   883, 29615,  2578, 30819,
     639, -2002,  1668,   774, 40863, -2002,   494,  1887, -2002, -2002,
     946,   839, 37261, 31205,   578,   367, -2002,   863,  2759, -2002,
   -2002, -2002, -2002,   185, -2002,   203, -2002,   267, 38504, 23692,
   -2002, -2002,  1677, -2002, -2002, -2002, 42597, 42597, 30819, -2002,
    1189,   188, -2002, 33672,   189, -2002,   806,  1057, -2002, 42597,
     188,   814,   188,  1805, -2002, -2002, -2002, -2002, -2002, -2002,
   -2002, -2002,  1387, -2002, -2002, -2002, -2002, -2002, 38823,  1540,
   -2002, 22423, 43357, 22564, -2002, -2002, 15893, -2002, -2002, 41952,
   -2002, -2002,   774,   802, -2002,  1222, -2002,   774, -2002, 29271,
   -2002, -2002, -2002, -2002, -2002,   969, -2002,   969, -2002, -2002,
   -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002,  1443,
     195,   218,  1670, -2002, 33801, 33930,  1672, -2002, 34059, 34188,
   34317, -2002,   557,   355,   380,  1091,  1205,  1678,  1679,  1680,
   -2002,  1675,  1681,  1682,   494,   791,  1124,    78, 40962, 29701,
     913, -2002, -2002, 42779, -2002, -2002,   751, -2002, -2002, 42779,
   -2002, -2002,   751, -2002, -2002, 42779, -2002, -2002,   751, -2002,
   -2002, 42779, -2002,   751, -2002, -2002, -2002, -2002, -2002, -2002,
   -2002,  1683,  1689, -2002,  1405,  1691,  1694,   339, -2002, 22705,
   -2002, -2002, 18880,  1673,  1696, 19022, 30819, 30819, -2002, 29787,
   29873,  1697,  1690,  1707, 24720,  1708,   188, 26433,  2206,  1550,
   26519, -2002,  1776, -2002, -2002, 26605,  1710, -2002, -2002, -2002,
    1713,  1714, 26691, 16324,   454,  1711, 30819, 30819,   188, -2002,
   -2002, -2002, -2002, 21577,   720, 29013, -2002,  1316, -2002, 30819,
   13395, 13542, 29013, -2002, 30819, 13689,  1597, 19164, 19306, 19448,
   19590, -2002, -2002, -2002, 19732, -2002, -2002, -2002, 19874, -2002,
   -2002,   673,   673,  1720,  1722, 36897, 37025,   791, -2002,  1476,
   38718, -2002, 38718, -2002, -2002,  1718, 29013, -2002, 29013,   590,
   -2002,   267, -2002, -2002, -2002, -2002, 38176,  1723,  1726, 43143,
   23692, 40467, 30819,  1730, -2002, -2002, -2002, -2002, -2002,   494,
    1729,  1731,  1719,  1734, -2002, -2002, -2002, -2002, -2002, 37957,
   26777,  1732,  1733,  1735, 30819,  1738, 38073,  1736,   392,   277,
     401,  1741,  1750,  1749, -2002,   188, -2002, -2002, -2002, -2002,
   -2002, 29959,   454,   214, 38927, 22846,  1753, -2002, 29013, -2002,
     236, 39031, 22987, -2002,   238, 39135, 23128, -2002, -2002, -2002,
   -2002,   772,  1760, -2002, -2002, -2002, 26863,  9033, -2002, -2002,
    1753, -2002, -2002, -2002, -2002, -2002, -2002,   975,  1151,   975,
    1151,   574,  1332,   574,  1332,  1596,  1706,  1596,  1706,  1596,
    1706, -2002, -2002,  1030,  1061, -2002, -2002,  1030,  1061, -2002,
   -2002,  1354,  1705, -2002, -2002,  1161,  1239, -2002, -2002,  1139,
    1213,  1165,  1240,  1307,  1398, -2002,    83, -2002, 26949,  1754,
   12054,  1757, -2002, -2002, -2002, -2002, -2002,  1118, -2002, -2002,
   -2002, 27035,  9797, -2002, -2002, -2002, -2002, -2002, -2002, -2002,
   -2002,   975,  1151,   975,  1151,   574,  1332,   574,  1332,  1596,
    1706,  1596,  1706,  1596,  1706,  1596,  1706, -2002, -2002,  1030,
    1061, -2002, -2002,  1030,  1061, -2002, -2002,  1354,  1705, -2002,
   -2002,  1161,  1239, -2002, -2002,  1139,  1213,  1165,  1240,  1307,
    1398, -2002, 27121,  1759, 25143,  1761, -2002, -2002,   188,   188,
   -2002, -2002,   350,   961, -2002, -2002, -2002, 39652, 39756, -2002,
   -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002,  1221,
    1861,   973, -2002, 23692,   188, -2002, -2002, 23692, -2002,   303,
   -2002, -2002, -2002,   379,   494,  1887, -2002, -2002,   398,  1668,
    1652,   494,  1887, -2002,  1770, -2002,   500,   389,  1251,  2977,
    1771, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002, -2002,
   -2002, -2002, -2002,  4530, -2002, -2002, -2002, -2002, -2002, 23269,
    1832,   839, 37261, 21436,   666,   791,   774, -2002,  1476, 30819,
   -2002,   822, -2002, -2002, -2002,  1780,  1658,  1636,  1668,   999,
   23692,  1127,  1212, -2002, -2002, 30819, -2002, 34446, 34575,  1782,
   -2002,  5184, 42961, 42961, 42961, 42961, -2002, -2002, -2002, 30819,
    1758, 30045, -2002,   969, -2002, -2002, 30131, -2002, 30217, -2002,
   -2002, -2002,  1558,  1540, -2002, -2002,  1387, -2002, -2002, -2002,
   -2002, -2002,  1558,  1540, -2002, 30303,  4783, -2002, -2002, -2002,
   -2002, -2002, 20016, -2002, -2002,   230, -2002, -2002,   248,  1783,
   -2002, 34704, 34833,   494,  1205,  1792, -2002, -2002, -2002, -2002,
   -2002, -2002,   791,   913, -2002,  1794,  1795, -2002,  1788,  1793,
    1801, -2002, -2002, 37261, -2002, -2002, -2002, -2002, -2002, 30819,
    1806,  1484, -2002, -2002, -2002, -2002,   253, 39239, 23410, -2002,
   -2002, -2002, 20158, 21577, 21577, -2002, -2002, -2002, 20300, 27207,
   16466, 27293, 27379, 24861, 27465, 16608, 21718,  1797,  1808, 21718,
   30819, 30389,  1881, 27551,  1714, 25229,   454, 21718,  1815, 11397,
   24720, -2002,  1559, 27637, 25315, 27723, -2002, -2002, -2002, -2002,
   -2002,   116,   454,  1819,  1136, -2002, -2002, -2002, -2002, 20442,
   -2002, -2002, -2002,  1821,  1822,   188, -2002, -2002, -2002, -2002,
   -2002, -2002, 42597, -2002, -2002, -2002, -2002, 27809,  1817, 25401,
    1818, 27895,  1824, 25487,  1825,  1823,  1829, -2002, -2002, -2002,
   -2002, -2002, -2002, 13836, -2002, -2002,  1830,  1231, -2002,  2576,
    1839,  1842,  1843,  1833,  1834, 23692,  1731, 41061,  1729, 30819,
   23692, 30819,  1852, -2002, -2002, -2002, -2002, -2002,  1840, -2002,
   30475, -2002, -2002,  1841,  1844, 30819, 30819,  1848,  8904, -2002,
     188,   188, 30819, 13983,   188, 29271, -2002, -2002, -2002,   673,
   -2002, -2002, -2002, -2002, -2002, -2002, -2002, 14130, -2002, -2002,
   -2002, -2002, 29013, 14277, 14424, 29013, 14571, 14718, -2002, -2002,
   -2002, 14865, 15012, 15159, 15306, -2002, -2002, -2002,   726,  1849,
     409, -2002, -2002,   494,   973,  1968,  1358, 23692, -2002, -2002,
    1853,   791,  1476,  1387,   791,  1652,  1851, -2002, -2002,  1856,
   -2002,   255, 39343, 23551, -2002,   494,   838, -2002,   774, -2002,
   -2002,  1857,  1860, -2002, -2002, -2002,  1370, -2002, -2002, -2002,
   -2002, 34962,  1867, 35091, -2002,  1871, 37377, -2002,  1873, -2002,
   30819, 29271,  3413, -2002, -2002,  3413, -2002, -2002, -2002,  3413,
   -2002, -2002, 20584, 20726, -2002, -2002, -2002, 35220, -2002, 35349,
      78,   913, -2002, -2002, -2002, -2002, -2002, -2002, -2002,  1124,
   27981, -2002, -2002, -2002, -2002, -2002, -2002, 20868, -2002, -2002,
   -2002, 21010, 24720, 24438, 24720, 24438, 11844, -2002, 25002, 16750,
   -2002, -2002, 21718, 21718, 28067, 24720, 28153, 24579,  1878, 25573,
   28239,   168, 21152, -2002, 30819, -2002, 11844, -2002, 11397, 24720,
   25659, 30561,    69,  1868,    69,   196,  1882, -2002,   188, 30819,
   30819,   188, 29013, 29013, 29013, 29013, 29013, 29013, 29013, 29013,
   15453, 15600, -2002, -2002, -2002,   494,  1731,  1884, -2002, -2002,
   -2002, -2002, -2002,  1397,  1729, -2002,  1890,  1896,  1876,  1886,
    1434,  1889,  1895, 23692, 30819, 23942, -2002, -2002, -2002,  1899,
    1900,  1910,  1911, 30819,  1907,  1923,  1927,  1928, -2002,  1929,
   25745, -2002, -2002, -2002, -2002, -2002, -2002, -2002,   333, -2002,
   -2002, -2002,   333, -2002, -2002, -2002, -2002, -2002,   333, -2002,
   -2002, -2002,   333, -2002, -2002, -2002,   333, -2002, -2002, -2002,
     333, -2002, -2002, -2002,   333, -2002, -2002, -2002,   333, -2002,
   -2002, -2002, -2002,  1439, -2002, -2002,  1652, 29013, -2002, -2002,
   -2002, 30819, 30819, -2002, 35478, 35607, 35736, 35865, 35994, 42961,
   -2002, 42961, -2002, 25831, 21294, -2002, -2002, -2002, 36123, 36252,
   36381, 36510, -2002,  1699,  1958, -2002, -2002, -2002, -2002, 24720,
   30819, 30647,  1868, 16892, 17034, 25917, -2002, 11844, 25002, 28325,
   17176,   188, -2002,  1311,   467, -2002,   121,    69,  1930,    69,
     368,   429,  1931,  1145, -2002, -2002,  1729, -2002, -2002, -2002,
   -2002, -2002, -2002, -2002, -2002, -2002,  1461,  1922,  1924,  1934,
   -2002, -2002, -2002, -2002,  1932,  1935, -2002, -2002, -2002, -2002,
   -2002, 28411, -2002, -2002,  1945, -2002, -2002, -2002, -2002, 36639,
   36768, -2002, -2002, 28497, -2002, -2002, 24720, 24720, 28583, 26003,
   24720, 28669, 24579,  1960, -2002, 24720, 30819, -2002, -2002, 25002,
   -2002, -2002,  1949,  1963,    69,    69, 30819,    69,  1964,    69,
    1363, -2002,   199,  1387,   445, -2002,   435, -2002,  1955, -2002,
     188, -2002, -2002, -2002, 30733, -2002, -2002, -2002, -2002, -2002,
   -2002, -2002,  1960, 24720, -2002, -2002, 28755, -2002, -2002,   454,
   -2002, -2002,  1344,  1967,  1379, -2002,  1381,  1966,    69,    69,
    1970,    69, -2002, -2002, -2002, -2002,   368,   430, 29271, -2002,
   -2002, -2002, 24720,   535,  1973, -2002,  1979,  1982,    69, -2002,
    1390,  1458, -2002,  1427,   562, -2002, 26089, -2002, 30819, -2002,
   -2002, -2002,  1468,  1983,  1984,  1985,    69, -2002, 28841, -2002,
    1969,  1986, -2002, -2002, -2002,  1474, -2002, -2002, -2002,  1988,
   -2002
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2002,   408,   -27,  9457, -2002,  2056, -2002, -2002, -2002, -2002,
   -2002, -2002,  1626,  1644,  -974, -2002, -1006,  -977,   156,   170,
    -996,  -987,  -963, -2002,  -742,  -714, -2002, -2002,  1656,  1662,
   -2002,  3490,  4667, -2002,  -261,   555,   793, -2002, -2002, -2002,
   -2002,  1664, -2002, -2002, -2002,  -657, -2001,   -49, -2002, -2002,
   -2002, -2002,  3061,  3620,  -124,    11,   595,  -868, -2002,  -857,
   -2002,  -867, -2002,  1123,  -152,  1248,  -906,    31,  1827,    25,
    1831,    40,     0, -2002,  1197, -2002, -2002,  9466,  5465, -2002,
    1219,  -683,  1310, -2002,  4635, -2002,  -356,   362,   473,   173,
   -2002,   534,  -645,   -65,   -44,    67,    87,   511,  9087,  3223,
    -248,  8829,  -833,   858, -2002,  5208,  -205,   526,   625,  2696,
     737,   138,   192,   202,   234,   245,   812,  5754,  2426,  7352,
    -756,   820,  1898, 10299,   -66,  1150,  -119,  2209, 10470,  8338,
   -2002, -2002, -2002,   -94,   -39,    -7, -2002,  6853, -2002,  1724,
    2240,   654,  -811,  3816,  8567, -2002, 11012, -2002, -2002, -2002,
     -43,  4078, -2002, -2002,  2423,  6209,   -26, -2002, -2002,  1473,
    1700,  1408,  1835,   -82,   -78,  6824,  6713,  3393,  5658,  -468,
    -117,  -245,  1413,  -854,   -48,  3209, -2002, -2002, -1095, -2002,
    2221,  1647,  -515, -1189,  7421,  2166,  -649,   126,   183,   391,
    1728,  -259,  -803,  -477,  -548, -2002,  -537,  -941,  -921, -1705,
    1134,  1170,   -12,  1885,  -738,    37,   171,  -496,  -434, -2002,
     -92,   -68,  6196,  -492,    42,  -872, -2002, -2002, -2002,  2060,
   -2002,  3438,  2068,   -32,  4212,   -37,  1888,  1054,  1056, -2002,
   -2002, -2002,   -93,   855, -1563,  -265, -2002, -2002, -2002,  -215,
   -2002,  2073,   -31,    19,  2069,  1637, -2002, -2002, -2002,  2078,
    -799,   411, -2002,  -780,   887, -2002, -2002, -2002, -2002
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1308
static const yytype_int16 yytable[] =
{
      67,  1251,   797,   284,  1168,  1042,  1484,   230,   524,   960,
     299,   231,  1436,  1438,  1413,  1540,  1043,  1550,   691,   414,
     181,  1274,   966,  1437,   507,  1542,  1485,  1552,  1281,  1602,
    1950,  1285,   112,   114,  1543,   142,  1553,   529,   517,   534,
     406,   538,   712,   119,  1541,  1547,  1551,   182,  1546,  1275,
     404,   113,  1708,   964,   405,   127,  1282,  1425,  1544,  1286,
    1554,   300,   144,   120,   407,   293,   295,   153,   695,   156,
    1880,   291,   414,  1509,   110,   204,  1426,  1057,   301,   183,
     766,     1,  1891,  1090,  1751,   167,   180,   127,   415,   218,
     393,  1415,  1255,  1459,  1457,   127,  1291,    67,   152,   555,
     558,   818,   620,  1497,    67,    67,     2,  1098,   309,   793,
    1104,   178,  1110,     1,  1115,   125,  2013,   394,   771,  1892,
     397,   312,   289,   820,  2117,  2165,   179,   828,   601,   298,
     310,   311,   218,   923,   314,   127,   127,   290,   925,   108,
     429,   415,  1357,  1527,   153,   483,   496,   312,   483,  1138,
      34,  1276,   510,   798,   512,   554,   557,   512,   496,   508,
     525,   483,   496,   483,   542,   483,  1300,  1508,   541,  1331,
    -879,  1892,   530,   312,   535,     1,   539,   238,   239,   567,
     153,    45,    46,  2165,   110,   515,  1506,     1,   642,   127,
    1519,     1,     1,  1192,  1196,   109,  1563,  1397,     1,  2047,
       2,   312,  2159,   583,  1507,  2041,   568,   299,   140,   299,
     846,   152,   190,   190,   584,  -109,   946,  -455,   153,  1566,
     576,     1,   776,   777,   778,   181,  1558,   958,   167,   588,
     819,  1836,   621,   312,   115,   181,   850,  -100,   138,  -104,
     127,   954,  1893,  1458,   127,   560,   683,  2118,   772,  1838,
    1894,  2114,   182,   602,   -82,  2119,   -89,   603,   300,     1,
     300,   411,   182,   924,     1,   713,   635,     1,   772,  1550,
       1,   293,   295,  1139,   818,  1272,  1550,   716,   628,  1552,
    1550,  1277,   312,   668,   183,   889,  1552,   699,  1553,     2,
    1552,   701,     2,   872,  2032,  1553,  1277,  1547,  1551,  1553,
    1546,    67,  1894,    67,  1547,  1551,   700,  1546,  1547,  1551,
       1,  1546,  1554,   431,   340,   516,   924,  2031,   412,  1554,
    1520,   731,  2048,  1554,  1697,  2160,  1564,   731,   715,  2114,
    2049,   618,   702,  2161,   772,     2,   238,   239,   568,   847,
     779,   705,     1,   290,   947,  -109,   116,     1,   780,  1567,
     846,   781,   774,     1,   721,     1,   601,   312,  1837,   762,
     991,  -622,   873,   914,   916,   918,   920,  -100,  1090,  -104,
       1,     1, -1037,   860, -1037,   864,  1839,   637,   991,  -617,
       2,   604,     1,  1678,   -82,  1682,   -89,  1607,   773,   150,
     151,    96,     1,  1070,   153,   852,   154,   312,  1091,   773,
     568,     1,   568,  1216,   190,   963,   312,  1730,    57,   231,
     127,    28,   600,   117,   312,  1608,   127,   190,   691,   691,
     691,   691,  1175,  1278,   604,  1182,  1777,   960,   141,   153,
    1279,  1034,     1,     1,   852,  1778,   887,   525,     1,   574,
     891,   588,  2123,  1301,  1303,  1305,   902,  1034,     1,   903,
     852,   891,   910,   852,  1064,  1059,  1068,   712,   619,   110,
    1680,  1044,  1684,  2186,  1046,  1605,   150,   151,   695,   695,
     695,   695,   312,  1365,  1367,  1369,   547,   192,  1767,  1218,
    1768,   483,   483,   153,   395,   603,   950,   218,    96,     1,
     127,  1078,    55,   977,   176,   302,    96,  1503,   981,  1504,
    1036,   960,   167,   982,   638,    57,  1852,   483,   483,  2123,
     606,  1779,    57,    57,   995,  1079,  1036,  1924,  1729,   997,
    1494,  1788, -1054, -1054,  1783,   153,  1001, -1054,   436,   483,
     483,  1731,   766,    -8,   483,   483,   806,  1991,   483,   483,
     312,  1776,   127,   127,   127,   127,   127,   149,   127,   605,
     415,   127,  1559,   606,   163,  2127,  2185,  1081,  -872,   766,
       1,  1090,   127,   127,   127,     1,  2164,   766,   153,   238,
     239,     1,  1583,   852,   512,  1436,  1438,   267,   483,   607,
     483,   541,  1700,  1072,   568,   127,  1775,   766,   153,  1065,
    1126,  1069,  2116,     1,  1302,  1304,  1306,  1592,   127,   159,
    1718,  1497,  1550,  1096,  1806,     1,  1102,  1727,  1108,   431,
    1113,   730,  1552,  -216,  1830,  1597,    54,  1127,     2,   164,
     607,  1553,   299,  1777,  1366,  1368,  1370,   609,  1425,  1425,
    1547,  1551,  1787,  1546,  1831,   138,  2123,   586,  1456,   241,
    1610,  1799,     1,  1616,  1800,  1554,  1252,  1426,  1426,   546,
     181,  1149,   954,  1156,  1814,   400,  1817,  -459,  -459,  -459,
    2188,  1169,  1819,   308,   822,   823,   824,   607,  1003,  1003,
    1003,  1003,  1003,   300,  1210,  1212,   601,   182,   312,   150,
     151,  1657,   192,   668,   668,   668,   668,  -872,   190,   190,
     150,   151,   711,  2197,   302,  1192,  1196,  1192,  1196,   176,
     547,   153,  1204,  1502, -1079,  -265,  -265,  -265,   608,   176,
     127,    57,   954,   802,   803,   730,   588,  1201,  1202,   958,
     313,  1294,  1221,     1,   150,   151,  -216,  2056,     1,     1,
    1228,   880,  -216,   954,   773,  1092,   604,  1233,  1243,   568,
    1253,  1233,  1243,     1,  1056, -1079,   400,  1792,  1221,   608,
    1335,   852, -1085,   145,     1,   146,   610,  -459,  -459,  -459,
    1265,   150,   151,  1258,  1259,  1260,   138,     1,  1086,   110,
    1557,  1489,  1339,     1,  1097,  1793,  1288,  1103,  1401,  1109,
    1295,  1114,   825,  -459,   954,  1262,  -459,  1550,  1263,  1078,
     826,  1797, -1079,   827,     1,   111,   608,  1552,   995,  1923,
    1405,   867,   998,  -907,  1930,   603,  1553,   435,   999,    30,
      31,  1660,   205,  1079,    34,  1547,  1551,     1,  1546,     2,
     543,    40,  1355,   206,   718,     1,  1360,  -265,   125,   544,
    1554,  -265,   898,   718,  1511,  1512,   877,  1477,  1478,   718,
    1479,     1,   586,  1481,  1482,    45,    46,   150,   151,  1418,
    1419,  1420,   153,  1423,  1000,   577,   852,   852,   852, -1053,
   -1053,   868,   406,   437, -1053,   606,     1,   691,   438,  1517,
     691,  1993,  1493,   150,   151,  1521,   405,  -907,  -907,   429,
    1439,   218,  -907,  -459,  1341,   997,   407,   153,  1001,  -907,
    -460,  -460,  -460,   545,   586,   167,  1449,   588,  1746,   401,
    1169,     1,  1747,   110,   588,  1343,  1464,  1466,   691,  1468,
     402,   852,  1407,  -907,  -907,  1736,    55,   695,   563,  1532,
     695,     1,   691,   691,   691,   691,  1583,  1799,  1800,   698,
    -907,  -907,  -907,  1409,   586,  1522,   150,   151,   238,   239,
    1523,  1565,  1568,  1529,   150,   151,  1571,  1803,   127,   878,
     153,   285,  1332,  2012,   218,   879,   542,   127,   695,   414,
     150,   151,  1501,  2000,     1,   127,   110,   127,  1505,   573,
     936,   937,   695,   695,   695,   695,   578,   153,   950,   429,
    1398,  1315,  1317,  1042,  1319,    28,   525,   525,    55,  1442,
    1944,   512,   579,   483,   512,   999,  1585,  -921,  -921,   525,
    1528,   153,  1530,   485,  1518,     1,   485,  1336,  1901,  1379,
    1381,  1383,  1385,   960,  1834,   611,  -460,   766,  1340,   485,
    1586,   485,  2046,   485,   614,  1835,    34,  2066,   415,   127,
       2,   938,  -459,  -459,  -459,  1402,   612,   415,  1088,  1036,
     150,   151,   808,   809,  -921,   616,  1406,   556,   559,  1089,
    1917,  1342,   431,   431,  -922,  -922,  2084,    45,    46,  1841,
     512,   512,  1588,  1344,   483,   483,  1737,   147,   483,   483,
     483,   148,   153,   836,   837,   127,   127,   238,   239,  1408,
    1499,  1572,   507,   150,   151,   127,   919,   127,   218,   568,
     267,  1410,   138,   852,     1,   160,   153,   799,   881,   852,
     697,  -922,   153,   717,  -748,   852,  -748,   711,   153,   584,
     157,   852,   158,   153,  -461,  -461,  -461,   800,   801,     2,
    1445,  1855,  1859,  1805,   176,   720,   999,   153,   125,   879,
    1220,   138,   668,  1871,   720,   668,   643,   617,   690,  1701,
     720,  2091,   738,  2092,  1149,   600,  1156,   730,   742,    34,
    -459,   138,   431,   810,   811,  1642,  1220,   714,  -459,  1220,
     161,  -459,   162,  1702,  1307,  1309,   408,   409,  1655,   140,
     108,    34,  1936,   668,  1295,  2120,   546,  2122,    40,   770,
      45,    46,   400,  1651,   838,   839,  1524,   668,   668,   668,
     668,  1525,  1686,   552,  1371,  1373,   739,  2069,   988,    30,
      31,   411,    45,    46,    34,   483,   483,   127,     1,   127,
     954,    40,   740,    54,   205,   743,   583,   508,  -908,   852,
     861,   153,   865,  -919,     1,   206,   852,   584,   718,   744,
     429,   218,  -216,     2,   745,    45,    46,   511,  1283,     1,
    -461,  2051,   125,  2152,  1758,  2154,   746,  2156,  1747,  1712,
     954,  1807,     1,   954,     1,   747,  1712,   999,   412,  1841,
    -216,   586,  1897,   751,  1591,   153,  1898,    30,    31,    34,
    1594,  2129,    34,   829,   773,  2130,  1595,  1311,  1313,    40,
      30,    31,  1596,   815,  2015,    34,  2180,  2181,  -630,  2183,
    -630,  1739,    40,   830,   831,  2016,   586,  -919,  -919,   814,
      45,    46,  -919,    45,    46,   586,  2192,  1375,  1377,  -919,
     816,   915,   586,  -629,   921,  -629,    45,    46,  1515,   586,
   -1032,   553, -1032,   817,  2205,  1583,  -888,  -888,  1308,  1310,
     583,  -888,   821,  -919,  -919,   561,  1808,   562,  -888,   485,
     485,   584,   999,   150,   151,  -216,  1323,  1327,   691,   691,
    -919,  -216,  -919,   773,   565,  1914,   562,   843,  1372,  1374,
     691,   879,  -888,  -888,   484,   485,   485,   484,   812,   813,
     586,   150,   151,  -216,  1389,  1393,  2028,   842,  1443,  -216,
     484,   773,   484,   773,   484,   844,   586,   485,   485,  -888,
    -888,  1116,   485,   485,  -888,   849,   485,   485,   695,   695,
      34,  -888,  1834,   431,  1082,  1663,  1664,  1665,  1116,  1045,
     695,  -969,  1047,  1835,   845,  1058,  1117,     1,  1765,  1766,
      20,    21,  1769,   153,   857,  -888,  -888,   852,   852,  1312,
    1314,    45,    46,  1117,  1118,   858,   485,  2113,   485,   153,
     900,  2114,  1770,  1439,  1530,  2115,   773,   429,   912,    30,
      31,  1118,   267,  1780,    34,   127,   869,   872,  1655,  1376,
    1378,    40,   127,  1119,  1120,  1834,  1133,  1789,   153,   127,
    2174,   832,   833,  2167,  2114,  -878,  1835,  -878,  -878,     1,
    1119,  1120,  1992,  1473,  1475,    45,    46,  1116,   879,  2157,
     127,   870,  1796,  2114,  2003,   127,    54,  2158,   127,   187,
     879,   153,   669,     1,     2,  2176,  1130,  2177,   562,  2114,
     429,  2114,  1117,   125,  1121,  2178,  2193,   483,   483,   267,
    2114,  2058,   852,   852,   852,   852,   873,   879,     2,   720,
    1118,  1600,   922,  2015,  1036,  1601,   954,   954,   690,   690,
     690,   690,   929,  -878,  2016,  2015,  2108,   939,  2111,  1324,
    1328,   238,   239,  2195,  -878,   979,  2016,  2114,  2063,  1119,
    1120,  2196,   994,  2083,   879,   986,  1211,  1213,  1214,   879,
     987,   483,   483,   991,   127,    30,    31,  1390,  1394,  -878,
      34,   773,   127,  1173,  2194,  2131,  2171,    40,  2114,  -878,
       1,   879,   140,   588,  2201,   411,   930,   931,  2114,  1052,
    2209,    55,   550,   691,  2114,   400,   804,   805,  -878,  -878,
    -878,    45,    46,   668,   668,  1926,   431,  2148,   932,  1205,
     431,   146,   933,  1149,   934,   668,  1149,  1685,  1287,  1149,
       1,   518,   165,  1642,  1687,   531,  1053,  1149,  1834,  1927,
    1149,   766,   766,   766,   766,   766,   766,   766,   766,  1835,
    2015,  1054,   412,   695,  1294,  1881,     1,   935,  1354,  1060,
       1,  2016,    30,    31,  1359,  1169,     1,    34,  1537,  1061,
    1538,  1895,   525,  1093,    40,   600,  1004,  1005,  1006,  1007,
    1008,   206,   773,   431,  1637,  1099,  1535,  2004,  1536,  2007,
    1995,   773,  1823,  1884,  1826,  1105,  1048,  1050,    45,    46,
     484,   484,   431,  1111,   187,   429,  1824,   218,  1827,  1128,
     429,  1129,    55,  2018,   708,  2020,   834,   835,     1,   840,
     841,  1474,  1476,  1034,    78,  1131,   484,   484,  1265,  1135,
    1945,  1946,  1049,  1051,  1949,  1136,   766,  1187,  1189,  1188,
    1190,   304,   307,     2,  1427,  1428,  1137,  1155,   484,   484,
    1166,  1157,  1158,   484,   484,  1167,  1170,   484,   484,  1171,
    1172,  1206,  1217,  1230,  1271,  2096,  1026,  1283,  1420,  1487,
    1429,  1446,  1430,   691,  1447,   691,  1849,   429,  2169,  1431,
    1432,   127,   127,  1433,   127,  1434,   485,   485,   402,  1472,
      30,    31,  1036,  1463,  1471,    34,   153,   484,  1490,   484,
    1510,  -740,    40,  -743,  1576,  1577,  1578,  1613,  1513,  1598,
     185,   483,  1579,   483,  1599,  1630,   852,  1603,  1580,  1581,
    1604,    78,  2005,   695,  2008,   695,    45,    46,    78,    78,
    1614,  1629,  1631,  1633,  1638,     1,  1652,   483,  1646,   483,
     127,  1647,  1648,  1672,   691,   437,  1676,   580,  2019,  1693,
    2021,   485,  1694,  1705,  1707,  1709,  1231,  1710,  1720,  1721,
       2,  1722,  1149,  1149,  1149,  1149,  1728,  1533,   668,   125,
     669,  1732,  1149,  1149,  1725,  1149,  1733,  1149,   431,  1734,
      30,    31,  2089,   431,  1741,    34,  1748,  1820,  1754,  1149,
       1,  1757,    40,  1762,   695,  1764,  1786,  1790,  1169,   708,
     586,  1655,   669,   669,   669,   669,  1804,    30,    31,  1589,
    1811,  2044,    34,  2044,  -746,     2,    45,    46,  1842,    40,
    1843,  1844,   485,   485,   125,  1845,   485,   485,   485,  2170,
    1846,  1872,  1851,   429,  1531,   568,   408,   409,  1847,  1878,
    1882,    34,  1873,    45,    46,  1896,  1899,  1900,    40,  1910,
     431,  1903,  1905,   592,    54,  1911,  1913,    55,  1907,  1909,
    1627,  1035,    30,    31,  1038,  1918,   949,    34,  1919,  1920,
    1921,  1922,    45,    46,    40,  1933,  1934,  1990,  1937,  -231,
    1997,  1938,  1026,    54,  1943,  1994,   881,   690,  1998,  1026,
     690,  2001,  1026,   431,  2002,  2006,  2045,   584,    45,    46,
    2009,   586,  2011,  2030,   483,   483,   483,   483,   483,   852,
    2057,   852,    55,  2061,  2050,   185,  2059,  2090,   483,   483,
     483,   483,  2060,  2062,  2097,   185,  2064,    78,   690,  1149,
    2162,  2163,  2065,  2076,    30,    31,  2070,  2071,   668,    34,
     668,  2112,   690,   690,   690,   690,    40,  2072,  2073,  2077,
    1169,  1655,  1703,  2078,  2079,  2080,    60,  2128,  2121,  2132,
    2134,  2133,   758,   485,   485,  1674,  2044,  1675,  2044,  2135,
      45,    46,  2136,  2138,  1723,   782,   783,   784,   785,   786,
     787,   788,   789,   790,   791,   417,  2149,  2166,  2144,   483,
     483,  2150,  2155,  2175,  2179,  2207,  1149,  1149,  2182,   118,
    1149,  2189,  1149,    30,    31,  1149,   431,  2190,    34,   668,
    2191,  2202,  2203,  2204,  2208,    40,  2210,  2184,    60,   970,
    1818,     1,  1526,  1208,  1655,   155,  1169,  1435,   703,   708,
    1169,  1480,   704,  2044,  2044,  1358,  2044,   971,  2044,    45,
      46,  1516,    60,  1149,  1794,    60,     2,   484,   484,   972,
    1256,   907,   268,    60,   419,   973,  2151,   976,   592,   990,
      60,    60,   741,   636,   303,   292,  1169,  1655,  2173,   899,
     294,   684,  1149,    60,   306,   296,   396,  2044,  2044,  1989,
    2044,     0,     0,     0,  1169,     0,   792,     0,    60,     0,
       0,     0,     0,    30,    31,     0,   423,  2044,    34,     0,
       0,   423,   268,     0,   423,    40,     0,     0,     0,    69,
     592,     0,   484,     0,   268,  2044,    60,   423,   268,   423,
       0,   423,     0,     0,   586,    20,    21,     0,     0,    45,
      46,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1026,     0,  1026,     0,     0,     0,     0,     0,   268,   268,
     592,     0,    20,    21,    30,    31,     0,     0,     0,    34,
       0,     0,   423,     0,   718,   718,    40,   718,   718,     0,
       0,     0,   718,   718,   718,   718,   575,     0,     0,     0,
       0,    30,    31,   484,   484,    60,    34,   484,   484,   484,
      45,    46,     0,    40,     0,    69,     0,     0,   862,     0,
     866,     0,     0,     0,  1164,     0,    69,     0,     0,     0,
     708,     0,     0,    69,    69,   242,     0,    45,    46,  1801,
       0,     0,     0,     0,     0,     0,     0,     0,    30,    31,
       0,  1636,     0,    34,   268,  1809,     0,   268,   268,   664,
      40,     0,     0,     0,    30,    31,     0,    60,  1026,    34,
       0,   669,     0,     0,   669,   498,    40,    60,   268,    60,
       0,     0,     0,   669,    45,    46,     0,   498,     0,     0,
    1208,   498,     0,     0,     0,   485,   485,   268,     0,   874,
      45,    46,     0,   268,     0,     0,   500,     0,     0,     0,
       0,   708,   669,     0,   423,   875,     0,     0,   500,     0,
       0,  1828,   500,     0,     0,     0,   669,   669,   669,   669,
       0,     0,     0,   718,   718,   718,   718,   718,   718,   718,
     718,     0,     0,     0,   484,   484,     0,     0,     0,   485,
     485,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     185,     0,   708,     0,     0,     0,  1224,     0,     0,     0,
       0,    60,     0,     0,     0,     0,   423,     0,   423,     0,
       0,     0,     0,   758,     0,     0,     0,     0,   690,   690,
       0,     0,  1224,     0,     0,  1224,     0,     0,     0,     0,
     690,     0,  1083,     0,  1268,     0,    20,    21,     0,     0,
      60,     0,   423,    60,  1026,     0,   268,    60,     0,     0,
      69,  1026,   901,     0,   677,  1026,    60,   268,   718,    60,
      69,     0,    69,     0,     0,    30,    31,     0,   632,     0,
      34,     0,     0,     0,     0,     0,     0,    40,     0,  1928,
       0,  1931,     0,     0,     0,     0,     0,   423,   423,     0,
       0,     0,    60,    60,  1134,  1939,  1941,     0,     0,   423,
       0,    45,    46,     0,   980,     0,     0,     0,     0,   268,
       0,   735,    54,   423,   423,  1958,  1962,   735,  1968,  1972,
       0,     0,     0,  1976,  1980,  1984,  1988,   592,     0,     0,
       0,     1,    60,     0,     0,   423,   423,     0,     0,     0,
     423,   423,     0,     0,   423,   423,     0,     0,     0,     0,
     884,     0,     0,   664,     0,     0,     2,     0,     0,     0,
     268,     0,   592,   268,     0,   125,     0,     0,     0,     0,
    1673,   592,  1038,     0,     0,     0,     0,     0,   592,    60,
       0,     0,     0,   758,   423,   592,   423,     0,     0,    60,
     423,     0,     0,     0,     0,     0,     0,     0,     0,   498,
       0,   408,   409,    30,    31,     0,    34,     0,    34,    60,
     498,     0,    60,    40,    60,    40,    60,     0,     0,   485,
       0,   485,     0,    60,     0,     0,     0,   913,     0,     0,
     894,     0,     0,     0,     0,     0,   592,    45,    46,    45,
      46,   894,  1002,     0,     0,   485,     0,   485,    54,     0,
      54,  1231,   592,    55,  1486,     0,     0,     0,  1026,     0,
       0,     0,   498,     0,   720,   720,   720,   720,   720,   720,
     720,   720,     0,   690,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   989,     0,     0,   484,   484,     0,   664,
     664,   664,   664,   985,     0,     0,     0,     0,     0,  1077,
       0,     0,     0,     0,  2067,  1026,     0,  1026,     0,     0,
       0,     0,     1,  2074,     0,     0,     0,   268,   268,   268,
       0,     0,    60,     0,     0,     0,     0,     0,   423,     0,
       0,     0,     0,     0,     0,     0,   268,     2,     0,     0,
     484,   484,     0,   268,   268,   423,   125,   268,   268,     0,
       0,     0,     0,     0,   423,     0,     0,    60,     0,   720,
       0,     0,     0,     0,     0,     0,    60,     0,     0,   664,
       0,  2085,  2087,     0,     0,     0,   664,  1026,     0,   664,
       0,     0,   669,   669,    30,    31,   433,     0,     0,    34,
       0,     0,   669,     0,   669,   669,    40,  1488,   669,     0,
       0,     0,     0,     0,     0,     0,   669,     0,     0,   669,
       0,     0,   485,   485,   485,   485,   485,     0,  1208,     0,
      45,    46,  1151,     0,     0,     0,   485,   485,   485,   485,
       0,    54,     0,     0,    55,     1,  1514,     0,     0,     0,
       0,     0,     0,   690,     0,   690,     0,     0,     0,     0,
       0,     0,     0,     0,   677,   677,   677,   677,  1673,    60,
       2,  1038,    60,    60,    60,     0,     0,     0,     0,   198,
     199,   200,   201,     0,     0,    69,  1270,     0,     0,     0,
       0,     0,     0,     0,     0,   423,   423,    60,     0,     0,
       0,     0,     0,     0,    60,     0,     0,   485,   485,     0,
    1690,     0,   268,    60,     0,     0,     0,    30,    31,     0,
      60,     0,    34,   268,   690,   423,     0,    60,     0,    40,
    1029,     0,     0,     0,     0,     0,     0,  1237,  1247,  1041,
       1,  1237,  1247,     0,     0,     0,     0,  1590,     0,     0,
       0,     0,     0,    45,    46,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    54,     2,     0,    55,     0,     0,
      60,     0,  1026,     0,   125,     0,     0,     0,    60,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     484,     0,   484,     0,    60,   423,     0,     0,  1628,     0,
       0,     0,    60,    60,     0,     0,     0,  1077,     0,   423,
       0,     0,   408,   409,  1444,    60,   484,    34,   484,   807,
       0,     0,  1453,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,  1467,     0,     0,     0,   664,   268,   664,
       0,   669,   669,   669,   669,   268,     0,   669,    45,    46,
       0,   669,   669,     0,   669,     0,   669,     0,     0,    54,
       0,     0,    55,     0,     0,   498,     0,     0,   669,     0,
       0,     0,     0,     0,     0,     0,   498,     0,     0,     0,
     423,   423,     0,     0,   423,   423,   423,     0,     0,     0,
    1704,     0,   433,     0,     0,     0,  1452,     0,     0,     0,
       0,     0,     0,     0,    60,   423,     0,  1452,     0,    60,
       0,     0,  1724,  1229,     0,    60,     0,     0,     0,     0,
       0,    60,     0,     0,     0,     0,     0,    60,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1500,     0,     0,     0,   664,  1029,     0,   664,     0,
       0,   664,     0,  1029,  1673,  1038,  1029,     0,     0,     0,
       0,     0,     0,     0,     0,  1293,     0,     0,     0,    91,
       0,   242,     0,     0,     0,     0,   592,     0,     0,     0,
       0,     0,     0,   484,   484,   484,   484,   484,     0,   664,
       0,     0,     0,     0,     0,     0,     0,   484,   484,   484,
     484,  1575,     0,   664,   664,   664,   664,     0,   669,     0,
       0,  1293,     0,     0,     0,     0,     0,   669,     0,   669,
       0,   423,   423,     0,   135,     0,   268,     0,   268,   632,
       0,     0,     0,     0,     0,    60,     0,     0,     0,     0,
       0,     0,    60,     0,     0,   268,   423,    60,     0,     0,
       0,     0,     0,     0,   168,   188,   203,     0,     0,     0,
       0,     0,     0,     0,   244,   268,    91,     0,   484,   484,
       0,     0,   268,    91,    91,   669,   669,   592,     0,   669,
       0,   669,     0,     0,   669,     0,     0,     0,   669,     0,
     268,   664,     0,     0,     0,     0,     0,   268,   664,   372,
       0,   268,   664,     0,   203,   416,   418,   420,   421,     0,
       0,     0,     0,   677,   489,     0,   677,   489,     0,     0,
       0,     0,   669,     0,     0,  1151,     0,     0,     0,     0,
     489,     0,   489,     0,   489,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   669,  1692,    89,   677,  1696,     0,  1802,   551,   418,
     420,     0,     0,     0,     0,     0,     0,     0,   677,   677,
     677,   677,     0,  1810,     0,     0,     0,     0,     0,     0,
    -459,     0,     0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,     0,     0,     0,     0,     0,     0,   581,   596,     0,
       0,     0,     0,     0,  1029,  1029,  1029,     0,    89,     0,
       0,     0,   758,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1041,     0,     0,     0,   632,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    89,
      89,     0,     0,    60,    60,     0,     0,   634,    89,  1716,
      89,     0,     0,     0,     0,     0,  1716,    89,    89,   423,
     188,     0,     0,   423,  1316,  1318,   671,  1320,     0,     0,
     709,     0,    91,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    89,    89,
       0,     0,  1380,  1382,  1384,  1386,  -459,  -459,     0,     0,
     592,     0,   941,   944,     0,   664,  -459,     0,    60,     0,
       0,     0,  1029,     0,     0,  -459,  -459,  -459,  -459,  -459,
       0,     0,     0,     0,   769,     0,   423,     0,   941,   944,
       0,     0,     0,   423,   423,   433,   433,     0,    60,    60,
      60,    60,    89,     0,     0,     0,     0,     0,     0,     0,
     941,   944,     0,     0,     0,   941,   944,     0,     0,   941,
     944,  1662,     0,     0,     0,  1667,  1575,  1929,  1669,  1932,
    1671,     0,     0,     0,     0,     0,     0,     0,     0,   416,
     418,   420,     0,  1940,  1942,     0,     0,   423,   423,     0,
       0,     0,     0,    89,     0,   466,     0,    89,   466,     0,
       0,     0,     0,   882,     0,     0,     0,     0,     0,    60,
     489,   466,     0,   466,     0,   466,     0,     0,     0,   758,
       0,   135,     0,   268,   664,     0,     0,     0,     0,   664,
     664,    89,     0,     0,     0,   433,     0,     0,     0,     0,
       0,     0,   664,     0,    89,   664,     0,     0,     0,     0,
     489,   489,     0,   664,    89,   956,    89,  1029,  1029,   967,
       0,     0,   489,     0,  1029,  1029,     0,     0,  1029,  1029,
       0,   168,     0,     0,     0,     0,   489,   489,     0,   640,
     644,     0,     0,     0,     0,     0,     0,     0,    60,     0,
       0,     0,     0,     0,     0,   882,     0,     0,   489,   489,
       0,     0,     0,   489,   489,     0,     0,   489,   489,     0,
       0,   203,   203,   203,   203,   203,     0,     0,     0,  1848,
       0,   423,     0,    60,     0,     0,   423,     0,     0,     0,
       0,   203,   203,     0,     0,     0,  1040,     0,     0,     0,
       0,     0,     0,     0,    60,     0,     0,   489,     0,   489,
       0,     0,  1075,     0,  1084,     0,     0,     0,     0,     0,
       0,     0,     0,    89,     0,     0,     0,     0,     0,   420,
       0,     0,     0,     0,     0,     0,    79,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2068,   423,   677,   677,     0,     0,     0,  1125,
       0,  2075,     0,     0,  1151,    89,  1151,   677,   268,   664,
     677,     0,     0,     0,     0,     0,     0,     0,   677,     0,
       0,  1151,     0,     0,     0,     0,     0,   423,     0,   423,
       0,     0,    60,     0,   671,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   423,     0,   423,     0,     0,     0,  2086,
    2088,     0,    79,     0,     0,     0,   671,   671,   671,   671,
       0,     0,  1029,    79,     0,     0,     0,     0,     0,  1209,
      79,    79,     0,     0,     0,   709,   433,     0,   664,   664,
       0,     0,     0,     0,     0,    89,    89,    89,    89,    89,
       0,    89,     0,     0,    89,     0,  1239,     0,     0,     0,
    1239,     0,     0,     0,     0,    89,    89,    89,     0,     0,
       0,     0,   501,     0,     0,     0,  1257,     0,     0,   882,
    1261,   466,   466,     0,   501,     0,    89,     0,   501,     0,
       0,     0,  2010,   974,     0,     0,     0,     0,  1041,   423,
       0,   423,   640,     0,     0,   640,     0,   466,   466,     0,
       0,     0,   769,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1299,     0,     0,   466,
     466,     0,     0,     0,   466,   466,     0,     0,   466,   466,
    1029,  1029,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1353,     0,     0,     0,     0,   769,     0,
       0,  1364,     0,     0,     0,     0,     0,     0,     0,     0,
     423,   423,   423,   423,   423,    60,     0,    60,   466,     0,
     466,  1417,     0,     0,   423,   423,   423,   423,    85,     0,
       0,     0,     0,  1151,  1151,  1151,  1151,     0,     0,  1151,
    1440,     0,     0,   677,   677,     0,  1151,   882,  1151,     0,
       0,   942,   945,    89,   168,   882,  1454,    79,     0,    89,
    1151,     0,     0,  1461,     0,     0,   882,    79,  1469,    79,
       0,   640,   644,  1193,  1197,   941,   944,   942,   945,   941,
     944,     0,     0,     0,     0,     0,     0,     0,     0,   433,
       0,     0,     0,   433,     0,   423,   423,     0,     0,   942,
     945,   640,     0,     0,   942,   945,     0,   135,   942,   945,
       0,  1041,     0,     0,    85,     0,  1498,     0,     0,     0,
       0,   596,     0,  1952,     0,    85,     0,   135,  1667,     0,
       0,  1671,    85,    85,     0,     0,     0,   956,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   489,     0,     0,     0,   433,     0,     0,     0,
       0,     0,   418,     0,     0,  1029,  1029,     0,     0,     0,
       0,     0,     0,     0,   502,   433,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   502,     0,   956,     0,
     502,     0,     0,     0,     0,     0,     0,  1041,     0,     0,
    1151,     0,     0,     0,     0,     0,   501,     0,  1041,  1151,
       0,  1151,  1040,     0,     0,     0,     0,   501,     0,     0,
       0,     0,     0,   489,   489,     0,     0,   489,   489,   489,
       0,     0,     0,     0,  1573,   416,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   420,     0,     0,   992,     0,
    -645,     0,    89,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1151,  1151,   501,
       0,  1151,     0,  1151,     0,  -645,  1151,     0,     0,     0,
    1151,     0,     0,     0,  -645,  -645,  -645,  -645,     0,     0,
       0,    89,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   671,     0,     0,   671,     0,
       0,    89,     0,     0,  1151,     0,     0,   671,     0,    85,
       0,     0,  -645,  -645,     0,     0,  1041,  -645,     0,    85,
       0,    85,     0,     0,  -645,     0,     0,     0,     0,  1653,
    1654,     0,     0,  1151,     0,     0,   671,     0,  1299,     0,
       0,   433,  1666,     0,     0,  1364,   433,  1670,  -645,  -645,
     671,   671,   671,   671,   489,   489,     0,     0,     0,  -645,
       0,     0,  -645,     0,     0,   993,     0,   991,  -645,     0,
       0,     0,     0,     0,     0,   882,     0,     0,   882,  1041,
    1699,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1239,     0,
       0,     0,     0,     0,     0,  1239,     0,     0,    89,    89,
       0,     0,     0,   433,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   466,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   641,   645,     0,     0,     0,     0,     0,
       0,  1743,     0,     0,     0,     0,     0,  1041,     0,     0,
       0,     0,     0,     0,     0,     0,   433,     0,   895,  1041,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   895,
       0,     0,    79,     0,     0,     0,     0,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,     0,
       0,     0,     0,     0,   466,   466,     0,     0,   466,   466,
     466,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1611,     0,     0,  1617,     0,     0,     0,     0,   941,   944,
       0,   895,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1041,     0,     0,     0,     0,     0,
      89,     0,    89,     0,     0,     0,     0,     0,     0,     0,
       0,  1658,  1041,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1041,  1193,  1197,  1193,  1197,   433,
       0,     0,   941,   944,     0,     0,     0,     0,     0,   315,
       0,     1,   316,   110,     0,     0,     0,     0,   640,  1773,
     640,     0,     0,  -459,  -459,     0,     0,     0,     0,     0,
       0,     0,     0,  -459,  1782,     0,     2,     0,  -459,  -459,
    -459,   416,  -459,  -459,  -459,  -459,  -459,     0,   203,     0,
       0,     0,     0,     0,   942,   945,     0,     0,   942,   945,
       0,     0,     0,     0,     0,   466,   466,     0,     0,  1795,
       0,   596,     0,     0,     0,   320,     0,     0,     0,     0,
     321,   322,   501,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   501,   325,     0,   489,   489,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   326,     0,     0,
       0,   327,   328,   329,   330,   331,   332,   333,     0,     0,
       0,   357,     0,     0,  1040,     0,     0,   335,     0,     0,
       0,     0,     0,   725,     0,     0,   641,     0,     0,   641,
       0,     0,     0,   340,   341,   430,     0,     0,     0,     0,
     489,   489,     0,   416,  -879,  1040,     0,  -879,  -879,  -879,
       0,  -879,  -879,     0,    85,     0,     0,     0,     0,     0,
       0,     0,   596,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   467,     0,     0,   467,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   467,     0,
     467,     0,   467,     0,     0,     0,   671,   671,     0,     0,
       0,   430,     0,     0,     0,     0,   671,     0,   671,   671,
    -879,     0,   671,     0,     0,  -879,  -879,  -879,     0,     0,
     671,     0,    89,   671,     0,     0,     0,     0,  -879,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -879,     0,     0,     0,  -879,  -879,  -879,  -879,
    -879,  -879,  -879,  -879,     0,   641,   645,  1194,  1198,     0,
       0,     0,  -879,  -879,     0,     0,     0,     0,  1915,     0,
    -879,  -879,     0,  -879,  -879,  -879,     0,     0,  -879,  -879,
       0,  -879,  -879,  -879,  -879,   641,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1040,     0,     0,     0,     0,   430,     0,
       0,     0,   723,   726,   728,  1947,     0,   430,  1040,     0,
       0,     0,     0,   430,     0,     0,     0,    89,     0,   749,
    1743,     0,     0,     0,   895,  1666,   357,     0,  1670,     0,
       0,     0,     0,     0,     0,   895,     0,     0,     0,     0,
       0,     0,     0,   430,     0,     0,     0,     0,   430,     0,
       0,     0,     0,     0,     0,     0,     0,   466,   466,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     489,     0,   489,     0,     0,   882,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   430,     0,   430,     0,     0,
       0,     0,     0,     0,  1040,     0,   489,     0,   489,     0,
       0,  1856,  1860,     0,     0,  1040,     0,     0,   420,     0,
       0,   466,   466,     0,  1611,   941,   944,  1617,   941,   944,
       0,   430,     0,     0,     0,  1658,     0,     0,     0,   941,
     944,   941,   944,     0,     0,   671,   671,   671,   671,     0,
       0,   671,     0,     0,     0,   671,   671,     0,   671,     0,
     671,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   671,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2052,  2053,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   942,   945,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   467,   467,
     941,   944,     0,     0,     0,     0,     0,     0,     0,     0,
     975,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1040,   467,   467,     0,     0,     0,     0,
       0,     0,   430,     0,     0,  1812,     0,  -634,     0,     0,
       0,   942,   945,     0,     0,     0,   467,   467,     0,     0,
       0,   467,   467,     0,     0,   467,   467,     0,     0,     0,
       0,     0,  -634,   489,   489,   489,   489,   489,     0,   430,
       0,  -634,  -634,  -634,  -634,     0,     0,   489,   489,   489,
     489,     0,     0,    89,     0,     0,  1040,     0,     0,     0,
       0,     0,     0,     0,     0,   467,     0,   467,     0,     0,
       0,   357,   671,     0,     0,     0,     0,     0,     0,  -634,
    -634,   671,     0,   671,  -634,     0,     0,     0,     0,     0,
       0,  -634,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   430,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -634,  -634,     0,   489,   489,
       0,   466,     0,   466,  1040,     0,  -634,     0,     0,  -634,
    1856,  1860,  1813,     0,   991,  -634,  1040,     0,     0,   671,
     671,     0,     0,   671,   375,   671,     0,   466,   671,   466,
       0,     0,   671,     0,     0,     0,     0,     0,     0,  2153,
       0,     0,     0,     0,  1612,     0,     0,  1618,   432,     0,
       0,     0,   430,     0,     0,     0,     0,  1040,     0,     0,
       0,     0,     0,     0,     0,     0,   671,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   357,     0,
       0,     0,   357,     0,     0,  1659,     0,     0,     0,     0,
       0,  1040,     0,     0,     0,   671,     0,     0,   430,  1194,
    1198,  1194,  1198,     0,     0,   430,     0,     0,   430,  1040,
       0,  2200,     0,     0,   432,     0,     0,     0,     0,     0,
       0,  1040,   641,     0,   641,     0,     0,     0,   357,     0,
       0,     0,     0,     0,   430,   430,   430,   430,   430,   430,
     430,     0,     0,   430,   430,     0,   430,   430,   430,   430,
     430,   430,   430,   430,     0,   357,     0,     0,     0,     0,
       0,     0,     0,   357,   430,   430,   430,   430,   430,   430,
     430,   430,   430,   430,   430,   430,   430,   430,   430,   430,
     430,   430,     0,   357,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   466,   466,   466,   466,   466,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   466,   466,
     466,   466,     0,     0,   430,   430,     0,     0,     0,     0,
       0,   432,     0,     0,     0,   724,   727,   729,     0,     0,
     432,     0,     0,     0,     0,     0,   432,     0,     0,     0,
       0,     0,   750,     0,     0,     0,     0,     0,     0,   375,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   432,     0,     0,     0,
       0,   432,     0,     0,     0,     0,     0,     0,     0,   466,
     466,     0,   430,     0,   430,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   432,     0,
     432,     0,     0,     0,   430,     0,     0,     0,     0,     0,
       0,     0,     0,   430,   942,   945,     0,   942,   945,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   942,   945,
     942,   945,     0,     0,   432,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   430,     0,   430,     0,
     467,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   942,
     945,     0,     0,   130,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   430,     0,     0,     0,     0,     0,
       0,   467,   467,     0,     0,   467,   467,   467,     0,     0,
       0,     0,     0,     0,   186,   130,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   432,     0,     0,     0,     0,
       0,     0,     0,     0,   430,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   430,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   432,   130,   130,     0,     0,     0,     0,     0,
       0,   357,   357,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   796,   375,  1857,  1861,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   645,     0,
       0,   645,     0,     0,     0,     0,     0,   549,     0,   645,
       0,     0,     0,     0,   432,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   430,     0,   430,     0,     0,
     387,     0,   467,   467,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   430,
       0,     0,     0,     0,     0,     0,     0,     0,   613,     0,
       0,     0,   615,     0,     0,     0,   430,     0,     0,     0,
     430,     0,     0,   357,     0,     0,     0,   430,     0,     0,
       0,   430,     0,     0,     0,   432,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   186,
       0,   375,     0,     0,     0,   375,     0,     0,     0,     0,
     570,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   432,     0,     0,     0,     0,     0,     0,   432,     0,
       0,   432,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   375,     0,     0,     0,     0,     0,   432,   432,   432,
     432,   432,   432,   432,     0,     0,   432,   432,     0,   432,
     432,   432,   432,   432,   432,   432,   432,     0,   375,     0,
       0,     0,     0,     0,     0,     0,   375,   432,   432,   432,
     432,   432,   432,   432,   432,   432,   432,   432,   432,   432,
     432,   432,   432,   432,   432,     0,   375,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   430,     0,
       0,     0,   430,     0,   645,   645,     0,   432,   432,     0,
       0,     0,     0,     0,     0,   387,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1161,     0,     0,   430,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   430,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   430,     0,     0,   243,     0,
     430,     0,     0,     0,   570,   432,   570,   432,     0,     0,
       0,     0,     0,     0,   430,     0,   357,     0,     0,     0,
       0,   430,     0,   430,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   467,   467,     0,   432,     0,     0,
     430,     0,     0,     0,     0,     0,   432,     0,     0,     0,
     130,   130,   130,   130,   130,     0,  1033,     0,     0,   615,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   130,   130,     0,     0,     0,     0,     0,     0,   432,
       0,   432,     0,     0,     0,     0,     0,     0,   467,   467,
       0,   130,     0,   430,  1290,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1322,  1326,  1330,
    1334,  1338,     0,     0,  1347,     0,     0,     0,     0,     0,
    1290,     0,     0,     0,     0,     0,     0,   432,   229,     0,
       0,  1028,     0,     0,     0,  1388,  1392,  1396,  1400,  1404,
       0,     0,  1347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   432,   570,     0,
     430,   229,     0,     0,   430,   430,   430,     0,   432,   434,
       0,     0,     0,     0,     0,   357,     0,     0,     0,     0,
     430,   430,     0,     0,     0,     0,     0,   357,   243,   526,
     387,     0,     0,     0,   375,   375,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   430,   430,
       0,   430,   430,     0,     0,     0,   430,   430,   430,   430,
     570,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   430,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   430,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   432,     0,
     432,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   430,     0,     0,     0,     0,
       0,     0,   432,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   467,   432,
     467,     0,     0,   432,     0,     0,   375,     0,     0,     0,
     432,     0,     0,     0,   432,     0,     0,   387,     0,     0,
       0,   387,     0,     0,   467,     0,   467,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1028,     0,     0,
       0,     0,     0,     0,  1028,     0,     0,  1028,     0,     0,
       0,     0,     0,     0,   357,   357,     0,   430,   430,   430,
     430,   430,   430,   430,   430,     0,     0,   387,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   430,   430,
       0,     0,     0,     0,   387,     0,     0,     0,   430,     0,
       0,     0,   387,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   387,     0,   853,     0,   130,     0,     0,     0,
       0,     0,  1634,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   613,     0,   615,   130,     0,     0,     0,
       0,     0,   430,     0,     0,     0,   430,   430,     0,     0,
    1661,     0,     0,     0,     0,   888,   526,  1668,     0,     0,
     897,   432,     0,     0,     0,   432,     0,     0,     0,   904,
       0,     0,   911,     0,     0,     0,     0,     0,     0,     0,
       0,   467,   467,   467,   467,   467,     0,     0,     0,     0,
       0,  1347,     0,  1347,     0,   467,   467,   467,   467,     0,
       0,     0,     0,     0,     0,     0,   962,   432,     0,     0,
       0,  1028,   978,   570,     0,     0,     0,   432,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   432,     0,
       0,     0,     0,   432,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   130,     0,     0,   432,     0,   375,
       0,     0,   570,     0,   432,     0,   432,     0,     0,     0,
       0,   357,     0,     0,     0,     0,   467,   467,     0,     0,
       0,     0,     0,   432,     0,     0,     0,     0,   129,   357,
       0,     0,     0,     0,     0,  1028,     0,  1028,     0,     0,
       0,     0,   229,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   229,     0,     0,     0,     0,     0,     0,   129,
     129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   229,     0,     0,   229,   432,   229,     0,   229,
       0,     0,     0,   357,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   570,     0,     0,     0,  1152,   129,   129,
       0,     0,     0,    77,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   613,     0,   615,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1191,  1195,  1028,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   570,     0,     0,     0,     0,     0,
       0,     0,   129,     0,     0,     0,     0,   121,     0,     0,
       0,     0,     0,   432,     0,     0,     0,   432,   432,   432,
     387,   387,     0,     0,     0,     0,     0,     0,   375,     0,
       0,     0,     0,   432,   432,     0,     0,     0,     0,   184,
     375,     0,   595,     0,     0,     0,     0,     0,     0,   274,
      77,     0,     0,     0,     0,     0,     0,    77,    77,     0,
     413,   432,   432,     0,   432,   432,     0,     0,     0,   432,
     432,   432,   432,     0,     0,   398,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   432,   570,     0,     0,     0,
       0,   129,     0,     0,     0,     0,     0,     0,     0,   499,
       0,   432,     0,     0,   129,     0,     0,     0,   570,     0,
       0,   499,     0,   413,   707,   499,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   432,  1028,
       0,     0,   387,     0,     0,     0,  1028,     0,     0,     0,
    1028,     0,     0,     0,     0,   274,   274,     0,     0,     0,
       0,     0,     0,   594,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   853,   853,   853,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   591,     0,     0,     0,     0,     0,   434,   434,
     229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   375,   375,     0,
     432,   432,   432,   432,   432,   432,   432,   432,     0,     0,
       0,     0,     0,   129,     0,   706,     0,   130,     0,   595,
       0,   631,     0,     0,   274,   274,   274,     0,     0,     0,
       0,   432,   432,     0,   184,     0,     0,     0,     0,     0,
       0,   432,     0,     0,   184,   274,    77,     0,     0,     0,
       0,     0,     0,  1492,     0,   129,     0,     0,     0,     0,
       0,     0,     0,     0,   734,     0,     0,     0,     0,     0,
     734,     0,     0,     0,     0,     0,     0,     0,   434,     0,
       0,   757,     0,     0,     0,   526,   526,     0,     0,   595,
       0,     0,     0,     0,     0,   432,     0,     0,   526,   432,
     432,     0,  1951,     0,     0,     0,     0,  1954,  1956,  1960,
    1964,  1966,  1970,     0,     0,     0,  1974,  1978,  1982,  1986,
       0,     0,   130,     0,   871,     0,     0,     0,     0,     0,
     876,     0,     0,  1028,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   570,     0,   129,   129,   129,   129,   129,
       0,   129,     0,     0,   707,     0,     0,     0,     0,   570,
       0,     0,     0,     0,     0,   129,   129,   129,     0,     0,
       0,     0,     0,     0,     0,   387,     0,   591,     0,     0,
    1028,     0,  1028,   893,     0,     0,   129,   229,   595,     0,
       0,     0,   229,     0,   893,     0,     0,     0,  1593,  1028,
     953,   595,     0,     0,  1593,     0,     0,     0,     0,     0,
     229,     0,     0,     0,   375,     0,     0,     0,  1609,     0,
       0,  1615,     0,     0,     0,     0,     0,     0,     0,   591,
    1632,     0,   375,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   984,     0,     0,     0,
       0,     0,  1028,     0,     0,     0,     0,     0,     0,  1656,
       0,     0,  1032,     0,     0,  1037,     0,     0,     0,   591,
       0,     0,     0,  1191,  1195,  1191,  1195,     0,  1032,     0,
       0,     0,     0,     0,     0,     0,   375,     0,     0,     0,
     274,     0,     0,     0,     0,     0,     0,   274,     0,   594,
     274,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    95,   594,   707,     0,     0,     0,     0,     0,   707,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   434,
     229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   570,     0,   570,     0,     0,     0,     0,
       0,     0,     0,     0,   387,   124,   136,     0,     0,   570,
     570,     0,     0,     0,     0,     0,   387,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   130,     0,
       0,     0,     0,     0,     0,     0,     0,   189,   136,     0,
       0,  1165,   240,     0,     0,     0,     0,     0,    95,     0,
       0,     0,     0,     0,     0,    95,    95,     0,     0,     0,
       0,     0,     0,     0,   706,     0,   274,   274,   274,   274,
     706,     0,     0,   399,     0,     0,     0,  1028,     0,     0,
       0,     0,     0,     0,     0,     0,   410,     0,     0,     0,
       0,     0,     0,     0,   274,   274,   274,     0,     0,   184,
       0,     0,     0,     0,     0,  1223,     0,     0,     0,     0,
       0,     0,     0,   274,     0,     0,     0,     0,     0,     0,
    1236,  1246,   757,     0,  1236,  1246,     0,     0,     0,     0,
       0,  1223,     0,     0,  1223,     0,     0,     0,     0,   548,
     595,     0,     0,  1267,     0,     0,   274,   595,     0,     0,
       0,     0,   129,   274,   564,     0,   274,     0,     0,     0,
       0,     0,     0,     0,     0,   676,   853,   853,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     598,     0,   434,   387,   387,     0,   434,     0,     0,     0,
       0,   129,     0,     0,     0,     0,     0,     0,     0,     0,
     595,     0,     0,     0,     0,   595,     0,     0,     0,     0,
       0,   129,     0,     0,     0,     0,     0,     0,   570,     0,
     755,   595,     0,     0,     0,     0,     0,   570,     0,   136,
       0,     0,     0,     0,     0,     0,   591,     0,     0,     0,
       0,     0,   189,     0,     0,     0,     0,     0,     0,   434,
       0,   706,   710,     0,    95,     0,     0,     0,  1460,     0,
       0,   434,  1816,   434,  1816,     0,     0,     0,     0,     0,
       0,   591,   595,     0,     0,     0,     0,     0,     0,  1451,
     591,     0,     0,     0,     0,   570,   570,   591,     0,     0,
    1451,   121,   757,     0,   591,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1496,     0,     0,     0,     0,   594,     0,   129,   129,
       0,     0,     0,     0,     0,     0,     0,     0,   595,     0,
     595,     0,   953,     0,   755,     0,     0,     0,     0,  1854,
    1858,     0,     0,     0,     0,   591,     0,     0,     0,  1867,
       0,  1870,  1609,     0,     0,  1615,     0,     0,     0,     0,
       0,   591,     0,  1656,     0,     0,  1883,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   953,     0,   883,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     387,     0,     0,   136,   274,   274,   274,     0,     0,     0,
       0,   526,   631,     0,     0,     0,     0,     0,   387,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     413,     0,     0,     0,     0,     0,     0,   957,     0,   594,
     965,   594,     0,     0,   434,     0,   229,     0,     0,   434,
     707,     0,   707,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   387,     0,     0,     0,     0,   883,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   136,   136,   136,   136,   136,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   274,   136,   136,   274,   434,     0,   274,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1165,     0,     0,  1076,     0,  1085,     0,  1163,     0,
       0,     0,     0,     0,     0,     0,     0,  1087,     0,     0,
       0,     0,     0,     0,  1181,     0,   274,     0,     0,     0,
       0,   706,     0,   706,     0,   676,   676,   676,   676,     0,
     274,   274,   274,   274,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   564,     0,     0,  2023,  2024,
    2025,  2026,     0,   274,  2027,   274,     0,     0,  1854,  1858,
       0,  1867,     0,  1870,   755,     0,     0,   755,     0,  1689,
       0,     0,   631,     0,     0,  2036,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     755,     0,  1715,     0,     0,     0,  1181,     0,     0,  1715,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   274,     0,
    1207,     0,     0,  1297,   274,   274,     0,   710,   274,   274,
       0,     0,   434,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1241,     0,
       0,     0,  1241,     0,     0,     0,     0,     0,   595,     0,
       0,  1350,     0,     0,     0,   595,     0,     0,     0,  1362,
       0,   883,   129,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1414,
       0,     0,     0,   595,     0,   595,     0,     0,   595,     0,
       0,   595,     0,     0,     0,     0,     0,     0,   434,     0,
     434,     0,     0,     0,     0,  2027,     0,     0,     0,     0,
       0,     0,     0,     0,  2107,     0,  2110,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   755,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   706,
       0,     0,     0,     0,     0,     0,  1785,   129,     0,     0,
       0,     0,  2140,  2141,     0,   595,  2107,     0,  2110,     0,
       0,  2145,   883,  1441,     0,  2147,   595,     0,     0,   883,
       0,     0,     0,     0,  1460,     0,   594,   883,  1455,  1798,
       0,     0,  1037,     0,     0,  1462,     0,     0,   883,   124,
     136,     0,     0,     0,     0,     0,     0,     0,     0,  2147,
       0,     0,   274,     0,     0,   591,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2187,   136,
       0,     0,     0,     0,     0,     0,     0,  1495,     0,     0,
       0,     0,     0,   598,     0,     0,     0,     0,     0,   136,
       0,     0,     0,     0,     0,     0,     0,     0,   871,   957,
       0,     0,     0,     0,     0,     0,   594,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   594,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   273,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   591,     0,     0,     0,
     957,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     274,   274,     0,     0,     0,     0,   274,   274,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   274,
       0,     0,   274,     0,   676,     0,     0,   676,  1620,  1622,
     274,  1625,     0,     0,   595,   595,  1574,   595,     0,  1635,
       0,     0,     0,     0,     0,  1582,     0,  1644,     0,     0,
       0,     0,     0,     0,  1181,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   676,     0,     0,     0,     0,
     273,   273,  1181,     0,     0,     0,     0,  1181,     0,   676,
     676,   676,   676,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   590,  1679,     0,
    1683,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   757,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1181,     0,     0,   706,   706,     0,  1996,     0,
       0,     0,     0,     0,     0,     0,   630,     0,     0,   273,
     273,   273,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   315,     0,     1,   316,   110,   317,     0,   318,   319,
     273,     0,     0,     0,     0,   274,   274,   883,  1181,     0,
     883,     0,  1241,     0,     0,     0,     0,     0,     2,   733,
    1706,     0,     0,   276,  1032,   733,     0,   125,     0,   591,
    1241,     0,     0,     0,     0,     0,   756,  1241,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
    1181,     0,   321,   322,   323,    30,    31,     0,     0,     0,
      34,     0,     0,  1181,     0,   324,   325,    40,     0,     0,
       0,     0,     0,     0,     0,   274,   274,     0,     0,   326,
       0,     0,     0,   327,   328,   329,   330,   331,   332,   333,
     334,    45,    46,     0,     0,     0,     0,     0,     0,   335,
     336,     0,   908,     0,     0,   909,   752,   339,     0,   276,
     276,     0,     0,     0,  1181,   340,   341,     0,   342,   343,
     344,   345,   590,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   757,     0,
       0,     0,     0,     0,     0,     0,   593,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   633,     0,     0,   276,   276,
     276,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1774,     0,     0,   590,     0,     0,     0,     0,   276,
       0,     0,     0,     0,     0,  1781,     0,     0,     0,     0,
       0,     0,  1784,     0,     0,   273,     0,     0,   736,     0,
     410,     0,   273,     0,   736,   273,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   759,     0,     1,     0,     0,
       0,  1462,     0,   598,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,   676,   676,     0,     0,     0,
       0,  1181,    29,  1181,     0,     0,  1181,   676,     0,    30,
      31,     0,  1874,  1877,    34,  1879,     0,    37,    38,     0,
      39,    40,    41,     0,  1840,  1181,     0,  1890,     0,     0,
       0,   593,     0,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,   598,    45,    46,    47,    48,    49,
      50,   273,   273,   273,   273,     0,     0,     0,     0,  1181,
       0,     0,     0,  1181,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,     0,     0,     0,   273,
     273,   273,     0,   593,     0,     0,     0,     0,     0,     0,
    1222,     2,     0,     0,     0,     0,     0,     0,   273,     0,
       0,     0,     0,     0,     0,  1235,  1245,   756,     0,  1235,
    1245,     0,     0,     0,     0,     0,  1222,     0,     0,  1222,
       0,     0,     0,   593,     0,     0,     0,     0,  1266,     0,
     320,   273,     0,     0,     0,   321,   322,   323,   273,     0,
       0,   273,     0,     0,   276,     0,     0,     0,   324,   325,
    1916,   276,     0,     0,   276,     0,     0,     0,     0,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     0,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,  1183,
     339,     0,     0,  1184,     0,     0,     0,   754,   340,   341,
    1750,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   590,     0,     0,  1441,     0,     0,     0,     0,     0,
       0,     0,  1181,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1784,     0,     0,     0,
     676,  1181,     0,     0,     0,     0,   590,     0,  1181,     0,
       0,     0,  1879,     0,  2034,   590,     0,   883,     0,     0,
       0,     0,   590,  2040,     0,     0,     0,   756,     0,   590,
     276,   276,   276,   276,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   276,   276,
     276,   754,     0,     0,     0,     0,     0,   755,     0,  1225,
       0,     0,     0,   569,     0,     0,     0,   276,     0,     0,
     590,     0,     0,     0,  1238,  1248,   759,     0,  1238,  1248,
       0,     0,     0,     0,     0,  1225,   590,     0,  1225,     0,
       0,     0,     0,     0,     0,     0,     0,  1269,     0,     0,
     276,     0,     0,     0,     0,     0,  1706,   276,     0,     0,
     276,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   273,
     273,   273,     0,     0,     0,     0,     0,   630,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2099,  2102,     0,  1181,     0,  1181,     0,     0,
     676,  1181,   676,     0,     0,     0,     0,     0,     0,     0,
     719,     0,     0,     0,     0,     0,     0,     0,     0,   569,
       0,     0,     0,     0,     0,   569,     0,     0,     0,     0,
     593,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1181,     0,     0,  1181,     0,   593,     0,     0,     0,     0,
       0,   676,     0,     0,   593,     0,     0,   273,     0,     0,
     273,   593,     0,   273,     0,     0,   759,     0,   593,     0,
       0,     0,     0,     0,     0,  1162,     0,   569,     0,   569,
       0,     0,     0,     0,     0,     0,     0,     0,  1181,     0,
       0,  1180,     0,     0,     0,  1185,     0,     0,     0,     0,
       0,   273,   126,     0,     0,     0,     0,     0,     0,   143,
       0,     0,     0,     0,     0,   273,   273,   273,   273,   593,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   166,   177,   202,   593,     0,     0,   273,     0,
     273,   754,     0,     0,   754,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1688,     0,     0,   630,  1250,     0,
       0,     0,     0,     0,     0,     0,     0,   754,     0,     0,
       0,     0,     0,  1180,  1185,     0,     0,  1714,   276,   276,
     276,     0,   126,   126,  1714,     0,   633,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   509,
    1296,     0,   273,   273,     0,     0,     0,     0,     0,   273,
     273,     0,     0,   273,   273,   540,     0,     0,     0,     0,
       0,     0,     0,     0,  1027,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,     0,  1348,     0,
       0,     0,     0,     0,     0,     0,  1361,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   569,     0,     0,     0,     0,  1412,     0,     0,     0,
       0,     0,     0,     0,     0,   166,   587,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   276,     0,     0,   276,
       0,     0,   276,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   569,     0,   177,     0,     0,   754,     0,
     276,     0,     0,     0,     0,     0,     0,     0,   177,     0,
       0,     0,     0,     0,   276,   276,   276,   276,   587,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   276,     0,   276,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1691,     0,     0,   633,     0,   315,     0,
       1,   316,   110,   317,  1215,   318,   319,   767,     0,     0,
       0,     0,     0,     0,     0,     0,  1717,     0,     0,     0,
       0,     0,     0,  1717,   795,     2,     0,   273,     0,     0,
     590,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   276,   276,     0,     0,     0,     0,     0,   276,   276,
    1027,     0,   276,   276,     0,     0,     0,  1027,     0,     0,
    1027,     0,     0,     0,   320,     0,     0,   126,     0,   321,
     322,   323,     0,   126,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,   587,
       0,     0,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,  1183,   339,     0,     0,  1184,     0,     0,
       0,   590,   340,   341,  1760,   342,   343,   344,   345,     0,
       0,     0,     0,   587,     0,   273,   273,     0,     0,     0,
       0,   273,   273,     0,     0,     0,     0,     0,     0,   166,
       0,     0,     0,     0,   273,  1619,  1621,   273,  1624,     0,
       0,     0,     0,     0,     0,   273,  1162,     0,     0,  1185,
       0,     0,     0,     0,  1643,     0,     0,     0,     0,     0,
       0,  1180,  1185,     0,     0,     0,     0,     0,     0,   126,
     126,   126,   126,   126,     0,   126,     0,     0,   126,  1180,
    1185,     0,     0,     0,  1180,     0,     0,     0,     0,   126,
     126,   126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1027,     0,   569,     0,   540,     0,
     587,     0,   126,     0,     0,  1677,     0,  1681,     0,     0,
       0,     0,     0,     0,     0,   126,   276,     0,     0,   593,
       0,     0,     0,     0,     0,     0,   756,     0,     0,     0,
       0,     0,     0,     0,     0,   569,     0,     0,     0,  1180,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1027,     0,
    1027,     0,     0,     0,     0,     0,   315,     0,     1,   316,
     110,   317,  1160,   318,   319,  1180,  1185,     0,     0,     0,
     273,   273,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   590,     0,     0,     0,     0,  1203,
     593,     0,     0,     0,     0,     0,     0,   126,     0,     0,
       0,     0,     0,   587,   276,   276,   569,  1180,     0,  1185,
     276,   276,   320,     0,     0,     0,     0,   321,   322,   323,
    1180,  1185,     0,   276,     0,     0,   276,     0,     0,     0,
     324,   325,     0,     0,   276,     0,     0,     0,     0,     0,
     273,   273,     0,     0,   326,     0,  1027,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,   569,     0,     0,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,  1180,   339,  1185,     0,   767,     0,   763,     0,     0,
     340,   341,   764,   342,   343,   344,   345,     0,     0,  1298,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   756,     0,     0,     0,     0,  1321,  1325,
    1329,  1333,  1337,     0,     0,  1346,  1352,     0,     0,     0,
       0,   767,     0,     0,  1363,   759,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1387,  1391,  1395,  1399,
    1403,     0,     0,  1346,  1416,     0,     0,     0,     0,   569,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   569,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   166,     0,   587,     0,     0,     0,     0,   276,
     276,   587,  1027,     0,     0,     0,   587,     0,     0,  1027,
       0,     0,     0,  1027,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   593,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   271,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,     0,     0,     0,     0,
       0,     0,     0,     0,   126,     0,     0,     0,     0,   587,
       0,     0,     0,     0,     0,   126,     0,     0,  1850,     0,
       0,     0,     0,     0,     0,   587,     0,     0,     0,   276,
     276,     0,     0,     0,     0,   497,     0,     0,  1180,  1185,
    1180,  1185,     0,  1180,  1869,     0,     0,   497,     0,  1619,
    1876,   497,  1643,     0,  1185,     0,     0,     0,     0,     0,
       0,     0,  1180,  1185,  1643,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   587,     0,     0,     0,
       0,   271,   271,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   759,     0,     0,     0,  1180,     0,  1185,     0,
    1180,     0,  1185,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   589,     0,
       0,     0,   126,   126,     0,     0,     0,     0,     0,     0,
       0,     0,   126,     0,   126,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   272,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1027,   629,     0,     0,
     271,   271,   271,     0,     0,     0,   569,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   271,   569,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1160,     0,     0,   272,     0,     0,     0,
     732,     0,     0,  1027,     0,  1027,   732,     0,   272,     0,
       0,     0,   272,     0,     0,     0,     0,     0,     0,     0,
       0,  1298,  1027,     0,     0,     0,     0,     0,  1363,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   272,   272,   126,     0,   126,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1180,
       0,     0,  1346,     0,  1346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1027,     0,     0,  1180,     0,
       0,     0,     0,  1185,     0,  1180,  1869,     0,  1185,  1643,
       0,  2033,     0,  2035,     0,     0,     0,     0,     0,  1185,
    2039,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   589,     0,     0,     0,     0,     0,   892,
       0,     0,     0,     0,  1742,     0,     0,     0,   272,     0,
     892,   272,   272,   272,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   754,     0,     0,     0,     0,     0,
       0,     0,   272,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   589,     0,     0,     0,     0,
       0,   272,     0,     0,     0,     0,   569,   272,   569,     0,
       0,     0,   983,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   569,   569,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   589,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1957,  1961,     0,  1967,  1971,     0,   271,     0,  1975,  1979,
    1983,  1987,     0,   271,     0,     0,   271,     0,     0,  2098,
    2101,     0,  1180,  1185,  1180,     0,     0,     0,  1180,  1869,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1027,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     272,     0,   126,     0,     0,     0,     0,     0,     0,   126,
       0,   272,     0,     0,     0,     0,   126,  1180,  1185,     0,
    1180,  1869,     0,     0,     0,  2146,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   126,     0,   587,
       0,     0,   126,     0,     0,   126,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   272,     0,  1180,     0,     0,     0,     0,
       0,     0,   271,   271,   271,   271,     0,     0,     0,  1957,
    1961,  1967,  1971,  1975,  1979,  1983,  1987,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     271,   271,   271,     0,     0,     0,     0,   272,     0,     0,
       0,   569,     0,     0,   272,     0,     0,   272,     0,   271,
     569,   126,     0,     0,     0,     0,  1234,  1244,     0,   126,
    1234,  1244,     0,     0,     0,     0,     0,     0,     0,     0,
     587,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   271,     0,     0,     0,     0,     0,     0,   271,
       0,     0,   271,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1027,     0,     0,     0,   569,   569,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   589,   272,   272,   272,   272,     0,   277,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     277,     0,     0,     0,   277,     0,     0,     0,     0,     0,
       0,   272,   272,   272,     0,     0,     0,   589,     0,     0,
       0,     0,     0,     0,     0,  1450,   589,     0,     0,     0,
     272,     0,     0,   589,   277,   277,  1450,   272,   272,     0,
     589,   272,   272,  1742,     0,     0,     0,     0,  1953,  1955,
    1959,  1963,  1965,  1969,     0,     0,     0,  1973,  1977,  1981,
    1985,     0,     0,   272,     0,     0,     0,     0,   126,   126,
     272,   126,     0,   272,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   589,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   589,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     277,     0,     0,   277,   277,   277,     0,   126,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,     0,     0,     0,     0,
     271,   271,   271,     0,     0,     0,     0,     0,   629,     0,
       0,     0,     0,   277,     0,     0,     0,     0,     0,   277,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   272,     0,  1955,  1959,
    1965,  1969,  1973,  1977,  1981,  1985,     0,   272,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -459,     0,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,     0,     0,   271,     0,
       0,   271,     0,     0,   271,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   277,  -459,     0,     0,     0,     0,  -459,
    -459,  -459,   271,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -459,  -459,     0,     0,   271,   271,   271,   271,
       0,   272,   272,   272,     0,     0,  -459,     0,     0,   272,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,   271,
       0,   271,     0,     0,     0,   277,  -459,  -459,     0,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,   629,     0,
    -459,     0,  -459,  -459,     0,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,     0,     0,     0,     0,  1713,     0,
       0,     0,     0,     0,     0,  1713,     0,     0,     0,   277,
       0,     0,     0,     0,     0,     0,   277,     0,     0,   277,
       0,     0,     0,   271,   271,     0,     0,     0,     0,     0,
     271,   271,     0,     0,   271,   271,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   272,
       0,     0,   272,     0,     0,   272,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   272,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   272,   272,   272,
     272,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     272,     0,   272,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   277,   277,   277,   277,   272,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   272,
       0,     0,     0,   277,   277,   277,   272,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,     0,   272,   272,     0,     0,     0,   277,
     277,   272,   272,   277,   277,   272,   272,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   277,     0,     0,     0,     0,
       0,     0,   277,     0,     0,   277,     0,     0,   271,     0,
       0,   589,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -459,     0,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   589,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   271,   271,   277,     0,
       0,  -459,   271,   271,     0,     0,  -459,  -459,  -459,   277,
       0,     0,     0,     0,     0,   271,     0,     0,   271,  -459,
    -459,     0,     0,     0,     0,     0,   271,     0,     0,     0,
       0,     0,     0,  -459,     0,     0,     0,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,     0,     0,     0,     0,   272,
       0,     0,     0,  -459,  -459,     0,  -459,  -459,  -459,  -459,
    -459,  -459,     0,  -459,  -459,     0,     0,  -459,     0,  -459,
    -459,     0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   277,   277,   277,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   315,     0,     1,   316,   110,
     317,     0,   318,   319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   272,   272,     0,
       0,     0,     2,   272,   272,     0,     0,     0,     0,     0,
       0,   271,   271,     0,     0,     0,   272,     0,     0,   272,
       0,     0,     0,     0,     0,     0,     0,   272,     0,     0,
       0,     0,     0,     0,     0,   589,     0,     0,     0,     0,
       0,   320,     0,     0,     0,     0,   321,   322,   323,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   324,
     325,   277,     0,     0,   277,     0,     0,   277,     0,     0,
       0,     0,     0,   326,     0,     0,     0,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,     0,     0,     0,
       0,   271,   271,   335,   336,     0,   337,     0,     0,   338,
    1183,   339,     0,     0,  1755,   277,     0,     0,  1756,   340,
     341,     0,   342,   343,   344,   345,     0,     0,     0,   277,
     277,   277,   277,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,     0,   277,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,   272,   272,     0,     0,     0,     0,   277,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   277,   277,     0,     0,
       0,     0,     0,   277,   277,     0,     0,   277,   277,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   272,   272,  -345,   775,     0,  -345,  -345,  -345,
    -345,   776,   777,   778,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,
       0,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,  -345,
    -345,     0,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,  -345,     0,  -345,  -345,  -345,     0,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,  -345,  -345,  -345,   779,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,   780,  -345,  -345,
     781,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,   207,     0,     1,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     208,   209,   210,   211,   212,     8,     9,    10,   582,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   213,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   214,   215,
       0,     0,     0,    54,     0,     0,   583,  1071,     0,   277,
     277,     0,     0,     0,     0,   277,   277,   584,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,     0,
       0,   277,     0,     0,     0,     0,     0,  -451,  1176,   277,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
       0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,     0,     0,  -451,  -451,  -451,     0,     0,  -451,
    -451,  -451,  -451,  -451,     0,     0,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,     0,  -451,     0,  -451,  -451,  -451,     0,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,     0,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,   277,     0,  -304,   315,     0,
       1,   316,   110,   317,  -304,   318,   319,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,     2,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
       0,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,     0,     0,   320,  -304,  -304,     0,     0,   321,
     322,   323,  -304,  -304,   277,   277,  -304,  -304,  -304,  -304,
    -304,  -304,   324,   325,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,     0,  -304,     0,   326,  -304,  -304,     0,
     327,   328,   329,   330,   331,   332,   333,   334,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,   335,   336,     0,   337,
    -304,  -304,   338,  1264,   339,  -304,  -304,  1179,  -304,  -304,
    -304,  -304,   340,   341,  -304,   342,   343,   344,   345,  -304,
    -304,  -304,  -304,  -304,  -305,   315,     0,     1,   316,   110,
     317,  -305,   318,   319,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,     2,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,
       0,   320,  -305,  -305,     0,     0,   321,   322,   323,  -305,
    -305,     0,     0,  -305,  -305,  -305,  -305,  -305,  -305,   324,
     325,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
       0,  -305,     0,   326,  -305,  -305,     0,   327,   328,   329,
     330,   331,   332,   333,   334,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,   335,   336,     0,   337,  -305,  -305,   338,
    1183,   339,  -305,  -305,  1184,  -305,  -305,  -305,  -305,   340,
     341,  -305,   342,   343,   344,   345,  -305,  -305,  -305,  -305,
    -305,  -566,   315,     0,     1,   316,   110,   317,  -566,   318,
     319,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,     2,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,     0,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,     0,     0,   320,  -566,
    -566,     0,     0,   321,   322,   323,  -566,  -566,     0,     0,
    -566,  -566,  -566,  -566,  -566,  -566,   324,   325,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,  -566,     0,
     326,  -566,  -566,     0,   327,   328,   329,   330,   331,   332,
     333,   334,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
     335,   336,     0,   337,  -566,  -566,   338,  -566,   339,  -566,
    -566,  -566,  -566,   763,  -566,  1345,   340,   341,  -566,   342,
     343,   344,   345,  -566,  -566,  -566,  -566,  -566,  -567,   315,
       0,     1,   316,   110,   317,  -567,   318,   319,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,     2,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,     0,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,     0,     0,   320,  -567,  -567,     0,     0,
     321,   322,   323,  -567,  -567,     0,     0,  -567,  -567,  -567,
    -567,  -567,  -567,   324,   325,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,     0,  -567,     0,   326,  -567,  -567,
       0,   327,   328,   329,   330,   331,   332,   333,   334,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,   335,   336,     0,
     337,  -567,  -567,   338,  -567,   339,  -567,  -567,  -567,  -567,
     763,  -567,  1411,   340,   341,  -567,   342,   343,   344,   345,
    -567,  -567,  -567,  -567,  -567,  -577,   315,     0,     1,   316,
     110,   317,  -577,   318,   319,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,     2,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,     0,   320,  -577,  -577,     0,     0,   321,   322,   323,
    -577,  -577,     0,     0,  -577,  -577,  -577,  -577,  -577,  -577,
     324,   325,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,     0,  -577,     0,   326,  -577,  -577,     0,   327,   328,
     329,   330,   331,   332,   333,   334,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,   335,   336,     0,   337,  -577,  -577,
     338,  -577,   339,  -577,  -577,  1179,  -577,  -577,  -577,  -577,
     340,   341,  -577,   342,   343,   344,   345,  -577,  -577,  -577,
    -577,  -577,  -579,   315,     0,     1,   316,   110,   317,  -579,
     318,   319,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
       2,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,     0,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,     0,     0,   320,
    -579,  -579,     0,     0,   321,   322,   323,  -579,  -579,     0,
       0,  -579,  -579,  -579,  -579,  -579,  -579,   324,   325,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,     0,  -579,
       0,   326,  -579,  -579,     0,   327,   328,   329,   330,   331,
     332,   333,   334,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,   335,   336,     0,   337,  -579,  -579,   338,  1183,   339,
    -579,  -579,  1184,  -579,  -579,  -579,  -579,   340,   341,  -579,
     342,   343,   344,   345,  -579,  -579,  -579,  -579,  -579,  -578,
     315,     0,     1,   316,   110,   317,  -578,   318,   319,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,     2,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     0,     0,   320,  -578,  -578,     0,
       0,   321,   322,   323,  -578,  -578,     0,     0,  -578,  -578,
    -578,  -578,  -578,  -578,   324,   325,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,     0,  -578,     0,   326,  -578,
    -578,     0,   327,   328,   329,   330,   331,   332,   333,   334,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,   335,   336,
       0,   337,  -578,  -578,   338,  -578,   339,  -578,  -578,  1179,
    -578,  -578,  -578,  -578,   340,   341,  -578,   342,   343,   344,
     345,  -578,  -578,  -578,  -578,  -578,  -338,  1912,     0,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,     0,     0,  -338,  -338,  -338,     0,     0,  -338,  -338,
    -338,  -338,  -338,     0,     0,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,     0,  -338,     0,  -338,  -338,  -338,     0,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -342,  1948,     0,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,     0,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,     0,     0,
    -342,  -342,  -342,     0,     0,  -342,  -342,  -342,  -342,  -342,
       0,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,     0,
    -342,     0,  -342,  -342,  -342,     0,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,     0,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -332,   315,     0,     1,   316,   110,   317,  -332,   318,   319,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,     2,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,     0,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,     0,     0,   320,  -332,  -332,
       0,     0,   321,   322,   323,  -332,  -332,     0,     0,  -332,
    -332,  -332,  -332,  -332,  -332,   324,   325,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,     0,  -332,     0,   326,
    -332,  -332,     0,   327,   328,   329,   330,   331,   332,   333,
     334,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,   335,
     336,     0,   337,  -332,  -332,   338,  -332,   339,  -332,  -332,
    -332,  -332,   763,  -332,  -332,   340,   341,  -332,   342,   343,
     344,   345,  -332,  -332,  -332,  -332,  -332,  -544,   315,     0,
       1,   316,   110,   317,  -544,   318,   319,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,     2,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
       0,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,     0,     0,   320,  -544,  -544,     0,     0,   321,
     322,   323,  -544,  -544,     0,     0,  -544,  -544,  -544,  -544,
    -544,  -544,   324,   325,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,     0,  -544,     0,   326,  -544,  -544,     0,
     327,   328,   329,   330,   331,   332,   333,   334,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,   335,   336,     0,   337,
    -544,  -544,   338,  -544,   339,  -544,  -544,  -544,  -544,   763,
    -544,  -544,   340,   341,  -544,   342,   343,   344,   345,  -544,
    -544,  -544,  -544,  -544,  -552,   315,     0,     1,   316,   110,
     317,  -552,   318,   319,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,     2,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,
       0,   320,  -552,  -552,     0,     0,   321,   322,   323,  -552,
    -552,     0,     0,  -552,  -552,  -552,  -552,  -552,  -552,   324,
     325,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
       0,  -552,     0,   326,  -552,  -552,     0,   327,   328,   329,
     330,   331,   332,   333,   334,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,   335,   336,     0,   337,  -552,  -552,   338,
    -552,   339,  -552,  -552,  -552,  -552,   763,  -552,  -552,   340,
     341,  -552,   342,   343,   344,   345,  -552,  -552,  -552,  -552,
    -552,  -545,   315,     0,     1,   316,   110,   317,  -545,   318,
     319,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     2,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,     0,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,     0,     0,   320,  -545,
    -545,     0,     0,   321,   322,   323,  -545,  -545,     0,     0,
    -545,  -545,  -545,  -545,  -545,  -545,   324,   325,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,  -545,     0,
     326,  -545,  -545,     0,   327,   328,   329,   330,   331,   332,
     333,   334,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
     335,   336,     0,   337,  -545,  -545,   338,  -545,   339,  -545,
    -545,  -545,  -545,   763,  -545,  -545,   340,   341,  -545,   342,
     343,   344,   345,  -545,  -545,  -545,  -545,  -545,  -553,   315,
       0,     1,   316,   110,   317,  -553,   318,   319,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,     2,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,     0,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,     0,     0,   320,  -553,  -553,     0,     0,
     321,   322,   323,  -553,  -553,     0,     0,  -553,  -553,  -553,
    -553,  -553,  -553,   324,   325,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,     0,  -553,     0,   326,  -553,  -553,
       0,   327,   328,   329,   330,   331,   332,   333,   334,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,   335,   336,     0,
     337,  -553,  -553,   338,  -553,   339,  -553,  -553,  -553,  -553,
     763,  -553,  -553,   340,   341,  -553,   342,   343,   344,   345,
    -553,  -553,  -553,  -553,  -553,  -546,   315,     0,     1,   316,
     110,   317,  -546,   318,   319,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,     2,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,     0,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
       0,     0,   320,  -546,  -546,     0,     0,   321,   322,   323,
    -546,  -546,     0,     0,  -546,  -546,  -546,  -546,  -546,  -546,
     324,   325,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,     0,  -546,     0,   326,  -546,  -546,     0,   327,   328,
     329,   330,   331,   332,   333,   334,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,   335,   336,     0,   337,  -546,  -546,
     338,  -546,   339,  -546,  -546,  -546,  -546,   763,  -546,  -546,
     340,   341,  -546,   342,   343,   344,   345,  -546,  -546,  -546,
    -546,  -546,  -554,   315,     0,     1,   316,   110,   317,  -554,
     318,   319,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
       2,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,     0,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,     0,   320,
    -554,  -554,     0,     0,   321,   322,   323,  -554,  -554,     0,
       0,  -554,  -554,  -554,  -554,  -554,  -554,   324,   325,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,  -554,
       0,   326,  -554,  -554,     0,   327,   328,   329,   330,   331,
     332,   333,   334,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,   335,   336,     0,   337,  -554,  -554,   338,  -554,   339,
    -554,  -554,  -554,  -554,   763,  -554,  -554,   340,   341,  -554,
     342,   343,   344,   345,  -554,  -554,  -554,  -554,  -554,  -547,
     315,     0,     1,   316,   110,   317,  -547,   318,   319,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,     2,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,     0,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,     0,     0,   320,  -547,  -547,     0,
       0,   321,   322,   323,  -547,  -547,     0,     0,  -547,  -547,
    -547,  -547,  -547,  -547,   324,   325,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,     0,  -547,     0,   326,  -547,
    -547,     0,   327,   328,   329,   330,   331,   332,   333,   334,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,   335,   336,
       0,   337,  -547,  -547,   338,  -547,   339,  -547,  -547,  -547,
    -547,   763,  -547,  -547,   340,   341,  -547,   342,   343,   344,
     345,  -547,  -547,  -547,  -547,  -547,  -555,   315,     0,     1,
     316,   110,   317,  -555,   318,   319,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,     2,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,     0,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,     0,     0,   320,  -555,  -555,     0,     0,   321,   322,
     323,  -555,  -555,     0,     0,  -555,  -555,  -555,  -555,  -555,
    -555,   324,   325,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,     0,  -555,     0,   326,  -555,  -555,     0,   327,
     328,   329,   330,   331,   332,   333,   334,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,   335,   336,     0,   337,  -555,
    -555,   338,  -555,   339,  -555,  -555,  -555,  -555,   763,  -555,
    -555,   340,   341,  -555,   342,   343,   344,   345,  -555,  -555,
    -555,  -555,  -555,  -340,  2054,     0,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,     0,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,     0,     0,
    -340,  -340,  -340,     0,     0,  -340,  -340,  -340,  -340,  -340,
       0,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,     0,
    -340,     0,  -340,  -340,  -340,     0,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,     0,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -339,  2055,     0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,     0,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,     0,     0,  -339,  -339,  -339,
       0,     0,  -339,  -339,  -339,  -339,  -339,     0,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,     0,  -339,     0,  -339,
    -339,  -339,     0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,     0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -345,   775,     0,
    -345,  -345,  -345,  -345,   776,   777,   778,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,     0,  -345,  -345,  -345,     0,     0,  -345,
    -345,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,     0,  -345,     0,  -345,  -345,  -345,     0,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,
    -345,  -345,   779,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    1174,  -345,  -345,   781,     0,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,   775,     0,     0,     0,     0,     0,
     776,   777,   778,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -345,     0,     0,     0,     0,     0,     0,  -345,  -345,
       0,     0,     0,  -345,     0,     0,     0,     0,     0,  -345,
    -345,  -345,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,     0,     0,  -345,  -345,  -345,   779,     0,
       0,  -345,  1555,  -345,  -345,     0,   780,     0,     0,   781,
       0,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,
    -451,  1176,     0,  -451,  -451,  -451,  -451,     0,  -451,  -451,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,     0,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,     0,     0,  -451,  -451,  -451,
       0,     0,  -451,  -451,  -451,  -451,  -451,     0,     0,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,     0,  -451,     0,  -451,
    -451,  -451,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,     0,  -451,     0,     0,  -451,  -451,  -451,  -451,     0,
    -451,  -451,  -451,  1177,  -451,  -451,  -451,     0,  -451,  -451,
    -451,  -451, -1107,   315,     0,     1,   316,   110,   317,     0,
     318,   319,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107,     0, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107,     0,     0,   320,
   -1107, -1107,     0,     0,   321,   322,   323, -1107, -1107,     0,
       0, -1107, -1107, -1107, -1107, -1107, -1107,   324,   325, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,     0, -1107,
       0,   326, -1107, -1107,     0,   327,   328,   329,   330,   331,
     332,   333,   334, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107,   335,   336,     0,   337,     0,     0,   338,  1183,   339,
   -1107,     0,  1184, -1107, -1107,     0, -1107,   340,   341,     0,
     342,   343,   344,   345, -1251,   315,     0,     1,   316,   110,
     317,     0,   318,   319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1251, -1251, -1251, -1251, -1251, -1251, -1251,
   -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251,
   -1251, -1251, -1251, -1251, -1251, -1251, -1251,     0, -1251, -1251,
   -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251,     0,
       0,   320, -1251, -1251,     0,     0,   321,   322,   323, -1251,
   -1251,     0,     0, -1251, -1251, -1251, -1251, -1251, -1251,   324,
     325, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251,
       0, -1251,     0,   326, -1251, -1251,     0,   327,   328,   329,
     330,   331,   332,   333,   334, -1251, -1251, -1251, -1251, -1251,
   -1251, -1251, -1251,   335,   336,     0,   337,     0,     0,   338,
    1183,   339,  1650,     0,  1184, -1251, -1251,     0, -1251,   340,
     341,     0,   342,   343,   344,   345, -1209,   315,     0,     1,
     316,   110,   317,     0,   318,   319,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1209, -1209, -1209, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209,     0,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209,
   -1209,     0,     0,   320, -1209, -1209,     0,     0,   321,   322,
     323, -1209, -1209,     0,     0, -1209, -1209, -1209, -1209, -1209,
   -1209,   324,   325, -1209, -1209, -1209, -1209, -1209, -1209, -1209,
   -1209, -1209,     0, -1209,     0,   326, -1209, -1209,     0,   327,
     328,   329,   330,   331,   332,   333,   334, -1209, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209,   335,   336,     0,   337,     0,
       0,   338,  1863,   339, -1209,     0,  1184, -1209, -1209,     0,
   -1209,   340,   341,     0,   342,   343,   344,   345, -1240,   315,
       0,     1,   316,   110,   317,     0,   318,   319,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240,     0,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,     0,     0,   320, -1240, -1240,     0,     0,
     321,   322,   323, -1240, -1240,     0,     0, -1240,    34, -1240,
   -1240, -1240, -1240,   324,   325,  1148, -1240,   659,   660,   661,
   -1240, -1240, -1240, -1240,     0, -1240,     0,   326, -1240, -1240,
       0,   327,   328,   329,   330,   331,   332,   333,   334,    45,
      46, -1240, -1240, -1240, -1240, -1240, -1240,   335,   336,     0,
     337,     0,     0,   338,  1183,   339,   662,     0,  1184, -1240,
     267,     0,   663,   340,   341,     0,   342,   343,   344,   345,
    -578,   315,     0,     1,   316,   110,   317,     0,   318,   319,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,     0,     0,   320,  -578,  -578,
       0,     0,   321,   322,   323,  -578,  -578,     0,     0,  -578,
    -578,  -578,  -578,  -578,  -578,   324,   325,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,     0,   326,
    -578,  -578,     0,   327,   328,   329,   330,   331,   332,   333,
     334,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,   335,
     336,     0,   337,     0,     0,   338,  -578,   339,  1178,     0,
    1179,  -578,  -578,     0,  -578,   340,   341,     0,   342,   343,
     344,   345, -1232,   315,     0,     1,   316,   110,   317,     0,
     318,   319,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232,
   -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232,
   -1232, -1232, -1232, -1232, -1232,     0, -1232, -1232, -1232, -1232,
   -1232, -1232, -1232, -1232, -1232, -1232, -1232,     0,     0,   320,
   -1232, -1232,     0,     0,   321,   322,   323, -1232, -1232,     0,
       0, -1232, -1232, -1232, -1232, -1232, -1232,   324,   325, -1232,
   -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232,     0, -1232,
       0,   326, -1232, -1232,     0,   327,   328,   329,   330,   331,
     332,   333,   334, -1232, -1232, -1232, -1232, -1232, -1232, -1232,
   -1232,   335,   336,     0,   337,     0,     0,   338,  2103,   339,
   -1232,     0,  1179, -1232, -1232,     0, -1232,   340,   341,     0,
     342,   343,   344,   345, -1233,   315,     0,     1,   316,   110,
     317,     0,   318,   319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1233, -1233, -1233, -1233, -1233, -1233, -1233,
   -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233,
   -1233, -1233, -1233, -1233, -1233, -1233, -1233,     0, -1233, -1233,
   -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233,     0,
       0,   320, -1233, -1233,     0,     0,   321,   322,   323, -1233,
   -1233,     0,     0, -1233, -1233, -1233, -1233, -1233, -1233,   324,
     325, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233,
       0, -1233,     0,   326, -1233, -1233,     0,   327,   328,   329,
     330,   331,   332,   333,   334, -1233, -1233, -1233, -1233, -1233,
   -1233, -1233, -1233,   335,   336,     0,   337,     0,     0,   338,
    1183,   339,  2104,     0,  1184, -1233, -1233,     0, -1233,   340,
     341,     0,   342,   343,   344,   345, -1227,   315,     0,     1,
     316,   110,   317,     0,   318,   319,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1227, -1227, -1227, -1227, -1227,
   -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227,
   -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227,     0,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,     0,     0,   320, -1227, -1227,     0,     0,   321,   322,
     323, -1227, -1227,     0,     0, -1227,    34, -1227, -1227, -1227,
   -1227,   324,   325,  1148, -1227,   659,   660,   661, -1227, -1227,
   -1227, -1227,     0, -1227,     0,   326, -1227, -1227,     0,   327,
     328,   329,   330,   331,   332,   333,   334,    45,    46, -1227,
   -1227, -1227, -1227, -1227, -1227,   335,   336,     0,   337,     0,
       0,   338,  1183,   339,   662,     0,  1184, -1227,   267,     0,
     663,   340,   341,     0,   342,   343,   344,   345, -1175,   637,
       0, -1175, -1175, -1175, -1175,     0, -1175, -1175,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175,     0, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175,     0,     0, -1175, -1175, -1175,     0,     0,
   -1175, -1175, -1175, -1175, -1175,     0,     0, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175,     0, -1175,     0, -1175, -1175, -1175,
       0, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,     0,
   -1175,     0,     0, -1175,     0, -1175,   638,     0, -1175, -1175,
   -1175,     0, -1175, -1175, -1175,     0, -1175, -1175, -1175, -1175,
   -1198,   315,     0,     1,   316,   110,   317,     0,   318,   319,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   208,
     209,   210,   211,   212,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,    20,    21,   257,   258,
      24,    25,    26,     0,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,     0,     0,   320,   259, -1198,
       0,     0,   321,   322,   323,    30,    31,     0,     0, -1198,
      34, -1198, -1198, -1198, -1198,   324,   657,   658,   261,   659,
     660,   661, -1198, -1198, -1198, -1198,     0, -1198,     0,   326,
   -1198,   262,     0,   327,   328,   329,   330,   331,   332,   333,
     334,    45,    46,   263,   264,   265,   266,   214,   215,   335,
     336,     0,   337,     0,     0,   338,     0,   339,   662,     0,
   -1198, -1198,   267,     0,   663,   340,   341,     0,   342,   343,
     344,   345, -1176,   637,     0, -1176, -1176, -1176, -1176,     0,
   -1176, -1176,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176,
   -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176,
   -1176, -1176, -1176, -1176, -1176,     0, -1176, -1176, -1176, -1176,
   -1176, -1176, -1176, -1176, -1176, -1176, -1176,     0,     0, -1176,
   -1176, -1176,     0,     0, -1176, -1176, -1176, -1176, -1176,     0,
       0, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176,
   -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176,     0, -1176,
       0, -1176, -1176, -1176,     0, -1176, -1176, -1176, -1176, -1176,
   -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176,
   -1176, -1176, -1176,     0, -1176,     0,     0, -1176,     0, -1176,
     638,     0, -1176, -1176, -1176,     0, -1176, -1176, -1176,     0,
   -1176, -1176, -1176, -1176, -1237,   315,     0,     1,   316,   110,
     317,     0,   318,   319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1237, -1237, -1237, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237,     0,  1140,  1141,
    1142,   649,  1143,  1144,  1145,  1146,   654,   655,  1147,     0,
       0,   320, -1237, -1237,     0,     0,   321,   322,   323, -1237,
   -1237,     0,     0, -1237,    34, -1237, -1237, -1237, -1237,   324,
     325,  1148, -1237,   659,   660,   661, -1237, -1237, -1237, -1237,
       0, -1237,     0,   326, -1237, -1237,     0,   327,   328,   329,
     330,   331,   332,   333,   334,    45,    46, -1237, -1237, -1237,
   -1237, -1237, -1237,   335,   336,     0,   337,     0,     0,   338,
       0,   339,   662,     0, -1237, -1237,   267,     0,   663,   340,
     341,     0,   342,   343,   344,   345, -1253,   315,     0,     1,
     316,   110,   317,     0,   318,   319,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1253, -1253, -1253, -1253, -1253,
   -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253,
   -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253,     0,
   -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253, -1253,
   -1253,     0,     0,   320, -1253, -1253,     0,     0,   321,   322,
     323, -1253, -1253,     0,     0, -1253, -1253, -1253, -1253, -1253,
   -1253,   324,   325, -1253, -1253, -1253, -1253, -1253, -1253, -1253,
   -1253, -1253,     0, -1253,     0,   326, -1253, -1253,     0,   327,
     328,   329,   330,   331,   332,   333,   334, -1253, -1253, -1253,
   -1253, -1253, -1253, -1253, -1253,   335,   336,     0,   337,     0,
       0,   338,     0,   339,  1159,     0, -1253, -1253,   763,     0,
   -1253,   340,   341,     0,   342,   343,   344,   345, -1188,  1186,
       0,     1,   316,   110,   317,     0,   318,   319,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   208,   209,   210,
     211,   212,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,    20,    21,   257,   258,    24,    25,
      26,     0,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,     0,     0,   320,   259, -1188,     0,     0,
     321,   322,   323,    30,    31,     0,     0, -1188,    34, -1188,
   -1188, -1188, -1188,   324,   657,   658,   261,   659,   660,   661,
   -1188, -1188, -1188, -1188,     0, -1188,     0,   326, -1188,   262,
       0,   327,   328,   329,   330,   331,   332,   333,   334,    45,
      46,   263,   264,   265,   266,   214,   215,   335,   336,     0,
     337,     0,     0,   338,     0,   339,   662,     0, -1188, -1188,
     267,     0,   663,   340,   341,     0,   342,   343,   344,   345,
   -1192,   315,     0,     1,   316,   110,   317,     0,   318,   319,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   208,
     209,   210,   211,   212,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,    20,    21,   257,   258,
      24,    25,    26,     0,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,     0,     0,   320,   259, -1192,
       0,     0,   321,   322,   323,    30,    31,     0,     0, -1192,
      34, -1192, -1192, -1192, -1192,   324,   657,   658,   261,   659,
     660,   661, -1192, -1192, -1192, -1192,     0, -1192,     0,   326,
   -1192,   262,     0,   327,   328,   329,   330,   331,   332,   333,
     334,    45,    46,   263,   264,   265,   266,   214,   215,   335,
     336,     0,   337,     0,     0,   338,     0,   339,   662,     0,
   -1192, -1192,   267,     0,   663,   340,   341,     0,   342,   343,
     344,   345, -1187,   315,     0,     1,   316,   110,   317,     0,
     318,   319,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   208,   209,   210,   211,   212,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,    20,    21,
     257,   258,    24,    25,    26,     0,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,     0,     0,   320,
     259, -1187,     0,     0,   321,   322,   323,    30,    31,     0,
       0, -1187,    34, -1187, -1187, -1187, -1187,   324,   657,   658,
     261,   659,   660,   661, -1187, -1187, -1187, -1187,     0, -1187,
       0,   326, -1187,   262,     0,   327,   328,   329,   330,   331,
     332,   333,   334,    45,    46,   263,   264,   265,   266,   214,
     215,   335,   336,     0,   337,     0,     0,   338,     0,   339,
     662,     0, -1187, -1187,   267,     0,   663,   340,   341,     0,
     342,   343,   344,   345, -1191,   315,     0,     1,   316,   110,
     317,     0,   318,   319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   208,   209,   210,   211,   212,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
      20,    21,   257,   258,    24,    25,    26,     0,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,     0,
       0,   320,   259, -1191,     0,     0,   321,   322,   323,    30,
      31,     0,     0, -1191,    34, -1191, -1191, -1191, -1191,   324,
     657,   658,   261,   659,   660,   661, -1191, -1191, -1191, -1191,
       0, -1191,     0,   326, -1191,   262,     0,   327,   328,   329,
     330,   331,   332,   333,   334,    45,    46,   263,   264,   265,
     266,   214,   215,   335,   336,     0,   337,     0,     0,   338,
       0,   339,   662,     0, -1191, -1191,   267,     0,   663,   340,
     341,     0,   342,   343,   344,   345, -1094,  1199,     0, -1094,
   -1094, -1094, -1094,     0, -1094, -1094,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,     0,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094,     0,     0, -1094, -1094, -1094,     0,     0, -1094, -1094,
   -1094, -1094, -1094,     0,     0, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094,     0, -1094,     0, -1094, -1094, -1094,     0, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094,     0, -1094,     0,
       0, -1094,     0, -1094, -1094,     0, -1094, -1094, -1094,     0,
   -1094, -1094, -1094,     0, -1094, -1094, -1094, -1094, -1096,  1200,
       0, -1096, -1096, -1096, -1096,     0, -1096, -1096,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096,     0, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096,     0,     0, -1096, -1096, -1096,     0,     0,
   -1096, -1096, -1096, -1096, -1096,     0,     0, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096,     0, -1096,     0, -1096, -1096, -1096,
       0, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,     0,
   -1096,     0,     0, -1096,     0, -1096, -1096,     0, -1096, -1096,
   -1096,     0, -1096, -1096, -1096,     0, -1096, -1096, -1096, -1096,
   -1142,   315,     0,     1,   316,   110,   317,     0,   318,   319,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   208,
     209,   210,   211,   212,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,    20,    21,   257,   258,
      24,    25,    26,     0,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,     0,     0,   320,   259, -1142,
       0,     0,   321,   322,   323,    30,    31,     0,     0, -1142,
      34, -1142, -1142, -1142, -1142,   324,   657,   658,   261,   659,
     660,   661, -1142, -1142, -1142, -1142,     0, -1142,     0,   326,
   -1142,   262,     0,   327,   328,   329,   330,   331,   332,   333,
     334,    45,    46,   263,   264,   265,   266,   214,   215,   335,
     336,     0,   337,     0,     0,   338,     0,   339,   662,     0,
   -1142, -1142,   267,     0,   663,   340,   341,     0,   342,   343,
     344,   345, -1144,   315,     0,     1,   316,   110,   317,     0,
     318,   319,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   208,   209,   210,   211,   212,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,    20,    21,
     257,   258,    24,    25,    26,     0,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,     0,     0,   320,
     259, -1144,     0,     0,   321,   322,   323,    30,    31,     0,
       0, -1144,    34, -1144, -1144, -1144, -1144,   324,   657,   658,
     261,   659,   660,   661, -1144, -1144, -1144, -1144,     0, -1144,
       0,   326, -1144,   262,     0,   327,   328,   329,   330,   331,
     332,   333,   334,    45,    46,   263,   264,   265,   266,   214,
     215,   335,   336,     0,   337,     0,     0,   338,     0,   339,
     662,     0, -1144, -1144,   267,     0,   663,   340,   341,     0,
     342,   343,   344,   345, -1189,   315,     0,     1,   316,   110,
     317,     0,   318,   319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   208,   209,   210,   211,   212,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
      20,    21,   257,   258,    24,    25,    26,     0,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,     0,
       0,   320,   259, -1189,     0,     0,   321,   322,   323,    30,
      31,     0,     0, -1189,    34, -1189, -1189, -1189, -1189,   324,
     657,   658,   261,   659,   660,   661, -1189, -1189, -1189, -1189,
       0, -1189,     0,   326, -1189,   262,     0,   327,   328,   329,
     330,   331,   332,   333,   334,    45,    46,   263,   264,   265,
     266,   214,   215,   335,   336,     0,   337,     0,     0,   338,
       0,   339,   662,     0, -1189, -1189,   267,     0,   663,   340,
     341,     0,   342,   343,   344,   345, -1193,   315,     0,     1,
     316,   110,   317,     0,   318,   319,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   208,   209,   210,   211,   212,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,    20,    21,   257,   258,    24,    25,    26,     0,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,     0,     0,   320,   259, -1193,     0,     0,   321,   322,
     323,    30,    31,     0,     0, -1193,    34, -1193, -1193, -1193,
   -1193,   324,   657,   658,   261,   659,   660,   661, -1193, -1193,
   -1193, -1193,     0, -1193,     0,   326, -1193,   262,     0,   327,
     328,   329,   330,   331,   332,   333,   334,    45,    46,   263,
     264,   265,   266,   214,   215,   335,   336,     0,   337,     0,
       0,   338,     0,   339,   662,     0, -1193, -1193,   267,     0,
     663,   340,   341,     0,   342,   343,   344,   345, -1190,   315,
       0,     1,   316,   110,   317,     0,   318,   319,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   208,   209,   210,
     211,   212,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,    20,    21,   257,   258,    24,    25,
      26,     0,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,     0,     0,   320,   259, -1190,     0,     0,
     321,   322,   323,    30,    31,     0,     0, -1190,    34, -1190,
   -1190, -1190, -1190,   324,   657,   658,   261,   659,   660,   661,
   -1190, -1190, -1190, -1190,     0, -1190,     0,   326, -1190,   262,
       0,   327,   328,   329,   330,   331,   332,   333,   334,    45,
      46,   263,   264,   265,   266,   214,   215,   335,   336,     0,
     337,     0,     0,   338,     0,   339,   662,     0, -1190, -1190,
     267,     0,   663,   340,   341,     0,   342,   343,   344,   345,
   -1194,   315,     0,     1,   316,   110,   317,     0,   318,   319,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   208,
     209,   210,   211,   212,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,    20,    21,   257,   258,
      24,    25,    26,     0,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,     0,     0,   320,   259, -1194,
       0,     0,   321,   322,   323,    30,    31,     0,     0, -1194,
      34, -1194, -1194, -1194, -1194,   324,   657,   658,   261,   659,
     660,   661, -1194, -1194, -1194, -1194,     0, -1194,     0,   326,
   -1194,   262,     0,   327,   328,   329,   330,   331,   332,   333,
     334,    45,    46,   263,   264,   265,   266,   214,   215,   335,
     336,     0,   337,     0,     0,   338,     0,   339,   662,     0,
   -1194, -1194,   267,     0,   663,   340,   341,     0,   342,   343,
     344,   345, -1185,   637,     0, -1185, -1185, -1185, -1185,     0,
   -1185, -1185,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185,     0, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185, -1185, -1185,     0,     0, -1185,
   -1185, -1185,     0,     0, -1185, -1185, -1185, -1185, -1185,     0,
       0, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185,     0, -1185,
       0, -1185, -1185, -1185,     0, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185, -1185,
   -1185, -1185, -1185,     0, -1185,     0,     0, -1185,     0, -1185,
     638,     0, -1185, -1185, -1185,     0, -1185, -1185, -1185,     0,
   -1185, -1185, -1185, -1185, -1186,   637,     0, -1186, -1186, -1186,
   -1186,     0, -1186, -1186,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186,     0, -1186, -1186,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186,     0,
       0, -1186, -1186, -1186,     0,     0, -1186, -1186, -1186, -1186,
   -1186,     0,     0, -1186, -1186, -1186, -1186, -1186, -1186, -1186,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186,
       0, -1186,     0, -1186, -1186, -1186,     0, -1186, -1186, -1186,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186,
   -1186, -1186, -1186, -1186, -1186,     0, -1186,     0,     0, -1186,
       0, -1186,   638,     0, -1186, -1186, -1186,     0, -1186, -1186,
   -1186,     0, -1186, -1186, -1186, -1186, -1019,   315,     0,     1,
     316,   110,   317,     0,   318,   319,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,     0,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019,     0,     0,   320, -1019, -1019,     0,     0,   321,   322,
     323, -1019, -1019,     0,     0, -1019, -1019, -1019, -1019, -1019,
   -1019,   324,   325, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019,     0, -1019,     0,   326, -1019, -1019,     0,   327,
     328,   329,   330,   331,   332,   333,   334, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019,   335,   336,     0,   337,     0,
       0,   338,     0,   339, -1019,     0,  1832,  1833,  1039,     0,
   -1019,   340,   341,     0,   342,   343,   344,   345, -1148,   637,
       0, -1148, -1148, -1148, -1148,     0, -1148, -1148,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148,     0, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148,     0,     0, -1148, -1148, -1148,     0,     0,
   -1148, -1148, -1148, -1148, -1148,     0,     0, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148,     0, -1148,     0, -1148, -1148, -1148,
       0, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,
   -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148, -1148,     0,
   -1148,     0,     0, -1148,     0, -1148,   638,     0, -1148, -1148,
   -1148,     0, -1148, -1148, -1148,     0, -1148, -1148, -1148, -1148,
   -1149,   637,     0, -1149, -1149, -1149, -1149,     0, -1149, -1149,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149,     0, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149,     0,     0, -1149, -1149, -1149,
       0,     0, -1149, -1149, -1149, -1149, -1149,     0,     0, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149,     0, -1149,     0, -1149,
   -1149, -1149,     0, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149, -1149,
   -1149,     0, -1149,     0,     0, -1149,     0, -1149,   638,     0,
   -1149, -1149, -1149,     0, -1149, -1149, -1149,     0, -1149, -1149,
   -1149, -1149, -1145,   637,     0, -1145, -1145, -1145, -1145,     0,
   -1145, -1145,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145,     0, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145,     0,     0, -1145,
   -1145, -1145,     0,     0, -1145, -1145, -1145, -1145, -1145,     0,
       0, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,     0, -1145,
       0, -1145, -1145, -1145,     0, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145,     0, -1145,     0,     0, -1145,     0, -1145,
     638,     0, -1145, -1145, -1145,     0, -1145, -1145, -1145,     0,
   -1145, -1145, -1145, -1145, -1021,   315,     0,     1,   316,   110,
     317,     0,   318,   319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021,     0, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,     0,
       0,   320, -1021, -1021,     0,     0,   321,   322,   323, -1021,
   -1021,     0,     0, -1021, -1021, -1021, -1021, -1021, -1021,   324,
     325, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
       0, -1021,     0,   326, -1021, -1021,     0,   327,   328,   329,
     330,   331,   332,   333,   334, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021,   335,   336,     0,   337,     0,     0,   338,
       0,   339, -1021,     0, -1021,  2014,  1039,     0, -1021,   340,
     341,     0,   342,   343,   344,   345, -1013,  2017,     0, -1013,
   -1013, -1013, -1013,     0, -1013, -1013,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,     0,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013,     0,     0, -1013, -1013, -1013,     0,     0, -1013, -1013,
   -1013, -1013, -1013,     0,     0, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013,     0, -1013,     0, -1013, -1013, -1013,     0, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013,     0, -1013,     0,
       0, -1013,     0, -1013, -1013,     0, -1013, -1013, -1013,     0,
   -1013, -1013, -1013,     0, -1013, -1013, -1013, -1013, -1146,   637,
       0, -1146, -1146, -1146, -1146,     0, -1146, -1146,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146,     0, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146,     0,     0, -1146, -1146, -1146,     0,     0,
   -1146, -1146, -1146, -1146, -1146,     0,     0, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146,     0, -1146,     0, -1146, -1146, -1146,
       0, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,     0,
   -1146,     0,     0, -1146,     0, -1146,   638,     0, -1146, -1146,
   -1146,     0, -1146, -1146, -1146,     0, -1146, -1146, -1146, -1146,
   -1147,   637,     0, -1147, -1147, -1147, -1147,     0, -1147, -1147,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147,     0, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147,     0,     0, -1147, -1147, -1147,
       0,     0, -1147, -1147, -1147, -1147, -1147,     0,     0, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147,     0, -1147,     0, -1147,
   -1147, -1147,     0, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147,     0, -1147,     0,     0, -1147,     0, -1147,   638,     0,
   -1147, -1147, -1147,     0, -1147, -1147, -1147,     0, -1147, -1147,
   -1147, -1147, -1234,   315,     0,     1,   316,   110,   317,     0,
     318,   319,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234,     0, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234,     0,     0,   320,
   -1234, -1234,     0,     0,   321,   322,   323, -1234, -1234,     0,
       0, -1234, -1234, -1234, -1234, -1234, -1234,   324,   325, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,     0, -1234,
       0,   326, -1234, -1234,     0,   327,   328,   329,   330,   331,
     332,   333,   334, -1234, -1234, -1234, -1234, -1234, -1234, -1234,
   -1234,   335,   336,     0,   337,     0,     0,   338,     0,   339,
   -1234,     0, -1234, -1234, -1234,     0, -1234,   340,   341,     0,
     342,   343,   344,   345, -1014,  2095,     0, -1014, -1014, -1014,
   -1014,     0, -1014, -1014,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014,     0, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,     0,
       0, -1014, -1014, -1014,     0,     0, -1014, -1014, -1014, -1014,
   -1014,     0,     0, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
       0, -1014,     0, -1014, -1014, -1014,     0, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014,     0, -1014,     0,     0, -1014,
       0, -1014, -1014,     0, -1014, -1014, -1014,     0, -1014, -1014,
   -1014,     0, -1014, -1014, -1014, -1014,  -915,   601,     0,  -915,
    -915,  -915,  -915,     0,  -915,  -915,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -915,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,     0,
       0,  -915,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -915,  -915,  -915,     0,     0,  -915,  -915,
    -915,  -915,  -915,     0,     0,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,     0,     0,  -915,  -915,
    -915,  -915,     0,  -915,     0,  -915,  -915,  -915,     0,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,     0,  -915,     0,
       0,  -915,   867,  -915,  -915,     0,   603,  -915,  -915,     0,
       0,  -915,  -915,     0,  -915,  -915,  -915,  -915,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   208,   209,   210,   211,
     212,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,    20,    21,   257,   258,    24,    25,    26,
       0,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,     0,     0,   320,   259,     0,     0,     0,   321,
     322,   323,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,   324,   657,   658,   261,   659,   660,   661,     0,
       0,     0,     0,     0,     0,     0,   326,     0,   262,     0,
     327,   328,   329,   330,   331,   332,   333,   334,    45,    46,
     263,   264,   265,   266,   214,   215,   335,   336,     0,   337,
       0,     0,   338,     0,   339,   662,     0,     0,     0,   267,
       0,   663,   340,   341,     0,   342,   343,   344,   345,   315,
       0,     1,   316,   110,   317,     0,   318,   319,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   208,   209,   210,
     211,   212,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,    20,    21,   257,   258,    24,    25,
      26,     0,  1140,  1141,  1142,   649,  1143,  1144,  1145,  1146,
     654,   655,  1147,     0,     0,   320,   259,     0,     0,     0,
     321,   322,   323,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,   324,   657,   658,   261,   659,   660,   661,
       0,     0,     0,     0,     0,     0,     0,   326,     0,   262,
       0,   327,   328,   329,   330,   331,   332,   333,   334,    45,
      46,   263,   264,   265,   266,   214,   215,   335,   336,     0,
     337,     0,     0,   338,     0,   339,   662,     0,     0,     0,
     267,     0,   663,   340,   341,     0,   342,   343,   344,   345,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   208,   209,
     210,   211,   212,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,    20,    21,   257,   258,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,   259,     0,     0,
       0,   321,   322,   323,    30,    31,     0,     0,     0,    34,
       0,     0,     0,     0,   324,   657,    40,   261,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   326,     0,
     262,     0,   327,   328,   329,   330,   331,   332,   333,   334,
      45,    46,   263,   264,   265,   266,   214,   215,   335,   336,
       0,   337,     0,     0,   338,     0,   339,  1009,     0,  1010,
    1011,   763,     0,     0,   340,   341,     0,   342,   343,   344,
     345,  1273,     0,     1,   316,   110,   317,     0,   318,   319,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   208,
     209,   210,   211,   212,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,    20,    21,   257,   258,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   320,   259,     0,
       0,     0,   321,   322,   323,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   324,   657,    40,   261,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   326,
       0,   262,     0,   327,   328,   329,   330,   331,   332,   333,
     334,    45,    46,   263,   264,   265,   266,   214,   215,   335,
     336,     0,   337,     0,     0,   338,     0,   339,  1009,     0,
    1010,  -110,   763,     0,     0,   340,   341,     0,   342,   343,
     344,   345,  1280,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     208,   209,   210,   211,   212,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,    20,    21,   257,
     258,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,   259,
       0,     0,     0,   321,   322,   323,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,   324,   657,    40,   261,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     326,     0,   262,     0,   327,   328,   329,   330,   331,   332,
     333,   334,    45,    46,   263,   264,   265,   266,   214,   215,
     335,   336,     0,   337,     0,     0,   338,     0,   339,  1009,
       0,  1010,   -98,   763,     0,     0,   340,   341,     0,   342,
     343,   344,   345,  1284,     0,     1,   316,   110,   317,     0,
     318,   319,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   208,   209,   210,   211,   212,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,    20,    21,
     257,   258,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   320,
     259,     0,     0,     0,   321,   322,   323,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,   324,   657,    40,
     261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   326,     0,   262,     0,   327,   328,   329,   330,   331,
     332,   333,   334,    45,    46,   263,   264,   265,   266,   214,
     215,   335,   336,     0,   337,     0,     0,   338,     0,   339,
    1009,     0,  1010,  -102,   763,     0,     0,   340,   341,     0,
     342,   343,   344,   345,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   208,   209,   210,   211,   212,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,    20,
      21,   257,   258,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,   259,     0,     0,     0,   321,   322,   323,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,   324,   657,
      40,   261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   326,     0,   262,     0,   327,   328,   329,   330,
     331,   332,   333,   334,    45,    46,   263,   264,   265,   266,
     214,   215,   335,   336,     0,   337,     0,     0,   338,     0,
     339,  1539,     0,  1010,   -65,   763,     0,     0,   340,   341,
       0,   342,   343,   344,   345,   315,     0,     1,   316,   110,
     317,     0,   318,   319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   208,   209,   210,   211,   212,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
      20,    21,   257,   258,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   320,   259,     0,     0,     0,   321,   322,   323,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,   324,
     657,    40,   261,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   326,     0,   262,     0,   327,   328,   329,
     330,   331,   332,   333,   334,    45,    46,   263,   264,   265,
     266,   214,   215,   335,   336,     0,   337,     0,     0,   338,
       0,   339,  1548,     0,  1010,  1549,   763,     0,     0,   340,
     341,     0,   342,   343,   344,   345,  1606,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   208,   209,   210,   211,   212,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,    20,    21,   257,   258,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,   259,     0,     0,     0,   321,   322,   323,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     324,   657,    40,   261,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   326,     0,   262,     0,   327,   328,
     329,   330,   331,   332,   333,   334,    45,    46,   263,   264,
     265,   266,   214,   215,   335,   336,     0,   337,     0,     0,
     338,     0,   339,  1009,     0,  1010,   -81,   763,     0,     0,
     340,   341,     0,   342,   343,   344,   345,   315,     0,     1,
     316,   110,   317,     0,   318,   319,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   208,   209,   210,   211,   212,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,    20,    21,   257,   258,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   320,   259,     0,     0,     0,   321,   322,
     323,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   324,   657,    40,   261,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   326,     0,   262,     0,   327,
     328,   329,   330,   331,   332,   333,   334,    45,    46,   263,
     264,   265,   266,   214,   215,   335,   336,     0,   337,     0,
       0,   338,     0,   339,  1548,     0,  1010,  -107,   763,     0,
       0,   340,   341,     0,   342,   343,   344,   345,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   208,   209,   210,   211,
     212,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,    20,    21,   257,   258,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,   259,     0,     0,     0,   321,
     322,   323,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,   324,   657,    40,   261,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   326,     0,   262,     0,
     327,   328,   329,   330,   331,   332,   333,   334,    45,    46,
     263,   264,   265,   266,   214,   215,   335,   336,     0,   337,
       0,     0,   338,     0,   339,  1548,     0,  1010,   -97,   763,
       0,     0,   340,   341,     0,   342,   343,   344,   345,   315,
       0,     1,   316,   110,   317,     0,   318,   319,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   208,   209,   210,
     211,   212,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,    20,    21,   257,   258,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   320,   259,     0,     0,     0,
     321,   322,   323,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,   324,   657,    40,   261,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   326,     0,   262,
       0,   327,   328,   329,   330,   331,   332,   333,   334,    45,
      46,   263,   264,   265,   266,   214,   215,   335,   336,     0,
     337,     0,     0,   338,     0,   339,  1548,     0,  1010,  -101,
     763,     0,     0,   340,   341,     0,   342,   343,   344,   345,
    1791,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   208,   209,
     210,   211,   212,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,    20,    21,   257,   258,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,   259,     0,     0,
       0,   321,   322,   323,    30,    31,     0,     0,     0,    34,
       0,     0,     0,     0,   324,   657,    40,   261,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   326,     0,
     262,     0,   327,   328,   329,   330,   331,   332,   333,   334,
      45,    46,   263,   264,   265,   266,   214,   215,   335,   336,
       0,   337,     0,     0,   338,     0,   339,  1009,     0,  1010,
     -88,   763,     0,     0,   340,   341,     0,   342,   343,   344,
     345,   315,     0,     1,   316,   110,   317,     0,   318,   319,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   208,
     209,   210,   211,   212,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,    20,    21,   257,   258,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   320,   259,     0,
       0,     0,   321,   322,   323,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   324,   657,    40,   261,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   326,
       0,   262,     0,   327,   328,   329,   330,   331,   332,   333,
     334,    45,    46,   263,   264,   265,   266,   214,   215,   335,
     336,     0,   337,     0,     0,   338,     0,   339,  1548,     0,
    1010,   -78,   763,     0,     0,   340,   341,     0,   342,   343,
     344,   345,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     208,   209,   210,   211,   212,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,    20,    21,   257,
     258,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,   259,
       0,     0,     0,   321,   322,   323,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,   324,   657,    40,   261,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     326,     0,   262,     0,   327,   328,   329,   330,   331,   332,
     333,   334,    45,    46,   263,   264,   265,   266,   214,   215,
     335,   336,     0,   337,     0,     0,   338,     0,   339,  1548,
       0,  1010,   -85,   763,     0,     0,   340,   341,     0,   342,
     343,   344,   345,   315,     0,     1,   316,   110,   317,     0,
     318,   319,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   208,   209,   210,   211,   212,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   320,
      29,     0,     0,     0,   321,   322,   323,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,   324,   422,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   326,     0,    42,     0,   327,   328,   329,   330,   331,
     332,   333,   334,    45,    46,    47,    48,    49,    50,   214,
     215,   335,   336,     0,   337,     0,     0,   338,   315,   339,
       1,   316,   110,   317,     0,   318,   319,   340,   341,     0,
     342,   343,   344,   345,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   208,   209,   210,   211,
     212,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   885,    29,     0,     0,     0,   321,
     322,   323,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,   324,   422,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   326,     0,    42,     0,
     327,   328,   329,   330,   331,   332,   333,   334,    45,    46,
      47,    48,    49,    50,   214,   215,   335,   336,     0,   337,
       0,     0,   338,   315,   339,     1,   316,   110,   317,     0,
     318,   319,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   320,
      29,     0,     0,     0,   321,   322,   323,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,   324,   422,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   326,     0,    42,     0,   327,   328,   329,   330,   331,
     332,   333,   334,    45,    46,    47,    48,    49,    50,     0,
       0,   335,   336,     0,   337,     0,     0,   338,   752,   339,
       0,     0,     0,     0,     0,     0,     0,   340,   341,     0,
     342,   343,   344,   345,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1219,    29,     0,     0,     0,   321,   322,   323,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,   324,   422,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   326,     0,    42,     0,   327,   328,   329,   330,
     331,   332,   333,   334,    45,    46,    47,    48,    49,    50,
       0,     0,   335,   336,     0,   337,     0,     0,   338,   752,
     339,     0,     0,     0,     0,     0,     0,     0,   340,   341,
       0,   342,   343,   344,   345,   315,     0,     1,   316,   110,
     317,     0,   318,   319,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   320,    29,     0,     0,     0,   321,   322,   323,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,   324,
     422,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   326,     0,    42,     0,   327,   328,   329,
     330,   331,   332,   333,   334,    45,    46,    47,    48,    49,
      50,     0,     0,   335,   336,     0,   337,     0,     0,   338,
     315,   339,     1,   316,   110,   317,   267,   318,   319,   340,
     341,     0,   342,   343,   344,   345,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     8,     9,    10,   582,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,    29,     0,     0,
       0,   321,   322,   323,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,   324,   422,    40,    41,     0,   315,
       0,     1,   316,   110,   317,     0,   318,   319,   326,     0,
      42,     0,   327,   328,   329,   330,   331,   332,   333,   334,
      45,    46,    47,    48,    49,    50,     2,     0,   335,   336,
       0,   908,     0,     0,   909,   752,   339,     0,     0,     0,
       0,     0,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,  1140,  1141,  1142,   649,  1143,  1144,  1145,  1146,
     654,   655,  1147,     0,     0,   320,     0,     0,     0,     0,
     321,   322,   323,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,   324,   325,  1148,     0,   659,   660,   661,
       0,     0,     0,     0,     0,     0,     0,   326,     0,     0,
       0,   327,   328,   329,   330,   331,   332,   333,   334,    45,
      46,     0,     0,     0,     0,     0,     0,   335,   336,     0,
     337,     0,     0,   338,  -454,   339,   662,     0,  -454,     0,
     267,     0,   663,   340,   341,     0,   342,   343,   344,   345,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1140,  1141,  1142,   649,  1143,  1144,  1145,
    1146,   654,   655,  1147,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,    34,
       0,     0,     0,     0,   324,   325,  1148,     0,   659,   660,
     661,     0,     0,     0,     0,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
      45,    46,     0,     0,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,  1183,   339,   662,     0,  1184,
       0,   267,     0,   663,   340,   341,     0,   342,   343,   344,
     345,   315,     0,     1,   316,   110,   317,     0,   318,   319,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1140,  1141,  1142,   649,  1143,  1144,
    1145,  1146,   654,   655,  1147,     0,     0,   320,     0,     0,
       0,     0,   321,   322,   323,     0,     0,     0,     0,     0,
      34,     0,     0,     0,     0,   324,   325,  1148,     0,   659,
     660,   661,     0,     0,     0,     0,     0,     0,     0,   326,
       0,     0,     0,   327,   328,   329,   330,   331,   332,   333,
     334,    45,    46,     0,     0,     0,     0,     0,     0,   335,
     336,     0,   337,     0,     0,   338,     0,   339,   662,     0,
       0,     0,   267,     0,   663,   340,   341,     0,   342,   343,
     344,   345,  1866,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1140,  1141,  1142,   649,  1143,
    1144,  1145,  1146,   654,   655,  1147,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,   324,   325,  1148,     0,
     659,   660,   661,     0,     0,     0,     0,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,    45,    46,     0,     0,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,     0,   339,   662,
       0,     0,     0,   267,     0,   663,   340,   341,     0,   342,
     343,   344,   345,   315,     0,     1,   316,   110,   317,     0,
     318,   319,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,     0,     0,   320,
       0,     0,     0,     0,   321,   322,   323,     0,     0,     0,
       0,     0,    34,     0,     0,     0,     0,   324,   325,  1148,
       0,   659,   660,   661,     0,     0,     0,     0,     0,     0,
       0,   326,     0,     0,     0,   327,   328,   329,   330,   331,
     332,   333,   334,    45,    46,     0,     0,     0,     0,     0,
       0,   335,   336,     0,   337,     0,     0,   338,     0,   339,
     662,     0,     0,     0,   267,     0,   663,   340,   341,     0,
     342,   343,   344,   345,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,  1183,
     339,     0,     0,  1755,     0,     0,     0,  1763,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,  1886,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,  1183,   339,  1650,     0,  1184,
       0,     0,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,  1183,   339,  1887,     0,  1184,     0,     0,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,  1183,   339,     0,
       0,  1755,     0,     0,     0,  1904,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,  1183,   339,     0,     0,  1755,     0,     0,
       0,  1908,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
    2037,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,  1183,
     339,  1887,     0,  1184,     0,     0,     0,     0,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,  1183,   339,  1887,     0,  1184,
       0,     0,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,     0,   339,     0,     0,  2081,  2082,  1039,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,     0,   339,     0,
       0,  2093,  2094,  1039,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,  2105,   339,  2106,     0,  1179,     0,     0,
       0,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,  1183,
     339,  2104,     0,  1184,     0,     0,     0,     0,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,     0,   339,     0,     0,  2198,
    2199,  1039,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,     0,   339,  1178,     0,  1179,     0,     0,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,  1289,   339,     0,
       0,     0,     0,   763,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,  1356,   339,     0,     0,     0,     0,   763,
       0,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,     0,
     339,  1159,     0,     0,     0,   763,     0,     0,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,  1639,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,  1183,   339,     0,     0,  1184,
       0,     0,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,  1640,   339,  1641,     0,     0,     0,     0,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,     0,   339,  1649,
       0,  1179,     0,     0,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,  1719,   339,     0,     0,  1179,     0,     0,
       0,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,     0,
     339,     0,     0,  1179,     0,     0,     0,     0,   340,   341,
    1749,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,     0,   339,     0,     0,  1752,
       0,     0,     0,  1753,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,     0,   339,     0,     0,  1179,     0,     0,     0,     0,
     340,   341,  1759,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,     0,   339,     0,
       0,  1752,     0,     0,     0,  1761,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,  1862,   339,     0,     0,  1179,     0,     0,
       0,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,  1864,
     339,     0,     0,  1179,     0,     0,     0,     0,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,  1865,   339,     0,     0,  1184,
       0,     0,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,  1868,   339,     0,     0,  1179,     0,     0,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,  1640,   339,  1641,
       0,     0,     0,     0,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,  1888,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,     0,   339,  1885,     0,  1179,     0,     0,
       0,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,  1889,
     339,  1641,     0,     0,     0,     0,     0,     0,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,     0,   339,     0,     0,  1752,
       0,     0,     0,  1902,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,     0,   339,     0,     0,  1752,     0,     0,     0,  1906,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,  2022,   339,     0,
       0,  1179,     0,     0,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,  1863,   339,     0,     0,  1184,     0,     0,
       0,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,  2029,
     339,     0,     0,  1179,     0,     0,     0,     0,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,  1889,   339,  1641,     0,     0,
       0,     0,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,  2109,   339,     0,     0,  1179,     0,     0,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,     0,   339,     0,
       0,     0,  2137,  1039,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,     0,   339,     0,     0,     0,  2139,  1039,
       0,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,  2142,
     339,     0,     0,  1179,     0,     0,     0,     0,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,  2143,   339,     0,     0,  1179,
       0,     0,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,  2172,   339,     0,     0,  1179,     0,     0,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,     0,   339,     0,
       0,     0,  2206,  1039,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,     0,   339,     0,     0,     0,     0,     0,
       0,     0,   340,   341,   566,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,     0,
     339,     0,     0,     0,     0,   763,     0,     0,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,     0,   339,     0,     0,     0,
       0,     0,     0,     0,   340,   341,   859,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,     0,   339,     0,     0,     0,     0,     0,     0,     0,
     340,   341,   863,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,     0,   339,     0,
       0,     0,     0,  1039,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,     0,   339,     0,     0,     0,     0,     0,
       0,     0,   340,   341,  1080,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,     0,
     339,     0,     0,     0,     0,     0,     0,  1132,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,  1483,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,   752,   339,     0,     0,     0,
       0,     0,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,     0,   339,     0,     0,     0,     0,   763,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,     0,   339,     0,
       0,     0,     0,     0,     0,     0,   340,   341,  1587,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,  1623,   339,     0,     0,     0,     0,     0,
       0,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,     0,
     339,     0,     0,     0,     0,     0,     0,  1626,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,     0,   339,     0,     0,     0,
       0,  1735,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,  1822,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     338,     0,   339,     0,     0,     0,     0,  1821,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,  1825,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,     0,   339,     0,
       0,     0,     0,   763,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,  1829,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,     0,   339,     0,     0,     0,     0,   763,
       0,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,     0,
     339,     0,     0,     0,     0,   763,     0,     0,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,  1875,   339,     0,     0,     0,
       0,     0,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
    1935,     0,   339,     0,     0,     0,     0,  1821,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   338,  2038,   339,     0,
       0,     0,     0,     0,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,   315,     0,     1,   316,   110,   317,
       0,   318,   319,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     2,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   338,  2100,   339,     0,     0,     0,     0,     0,
       0,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   324,   325,
     315,     0,     1,   316,   110,   317,     0,   318,   319,     0,
       0,     0,   326,     0,     0,     0,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     2,     0,     0,
       0,     0,   335,   336,     0,   337,     0,     0,   338,     0,
     339,     0,     0,     0,     0,  2168,     0,     0,   340,   341,
       0,   342,   343,   344,   345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   324,   325,   315,     0,     1,   316,
     110,   317,     0,   318,   319,     0,     0,     0,   326,     0,
       0,     0,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     2,     0,     0,     0,     0,   335,   336,
       0,   337,     0,     0,   338,     0,   339,     0,     0,     0,
       0,     0,     0,     0,   340,   341,     0,   342,   343,   344,
     345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     324,   325,   315,     0,     1,   316,   110,   317,     0,   318,
     319,     0,     0,     0,   326,     0,     0,     0,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     2,
       0,     0,     0,     0,   335,   336,     0,   337,     0,     0,
     722,     0,   339,     0,     0,     0,     0,     0,     0,     0,
     340,   341,     0,   342,   343,   344,   345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   324,   325,   315,     0,
       1,   316,   110,   317,     0,   318,   319,     0,     0,     0,
     326,     0,     0,     0,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     2,     0,     0,     0,     0,
     335,   336,     0,   337,     0,     0,   725,     0,   339,     0,
       0,     0,     0,     0,     0,     0,   340,   341,     0,   342,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   324,   325,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   326,     0,     0,     0,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     0,     0,     0,     0,     0,   335,   336,     0,   337,
       0,     0,   748,     0,   339,  -903,   601,     0,  -903,  -903,
    -903,     0,   340,   341,     0,   342,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -903,  -903,  -903,  -903,  -903,  -903,  -903,
    -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,
    -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,     0,     0,
    -903,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -903,  -903,  -903,     0,     0,  -903,  -903,     0,
    -903,  -903,     0,     0,  -903,  -903,  -903,  -903,  -903,  -903,
       0,  -903,  -903,  -903,  -903,     0,     0,  -903,  -903,  -903,
    -903,     0,  -903,     0,  -903,  -903,  -903,     0,  -903,  -903,
    -903,  -903,  -903,  -903,  -903,     0,  -903,  -903,  -903,  -903,
    -903,  -903,  -903,  -903,  -903,     0,     0,  -903,     0,     0,
    -903,   602,  -903,  -903,     0,   603,  -903,     0,     0,     0,
    -903,  -903,  -189,   926,     0,  -189,  -189,  -189,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,     0,     0,  -189,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -189,
    -189,  -189,     0,     0,  -189,  -189,     0,  -189,  -189,     0,
       0,  -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,
    -189,  -189,     0,     0,  -189,  -189,  -189,  -189,     0,  -189,
       0,  -189,  -189,  -189,     0,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,     0,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,     0,     0,  -189,     0,     0,  -189,     0,  -189,
     927,     0,   928,  -189,     0,     0,     0,  -189,  -189,  -253,
     940,     0,     1,   316,   110,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   208,   209,
     210,   211,   212,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,  -253,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,    29,   440,     0,
       0,   321,   322,     0,    30,    31,     0,     0,   441,    34,
     442,   443,    37,    38,     0,   422,    40,    41,   444,     0,
       0,   445,   446,   447,   448,     0,   449,     0,   450,   451,
      42,     0,   327,   328,   329,   330,   331,   332,   333,     0,
      45,    46,    47,    48,    49,    50,   214,   215,   335,     0,
       0,    54,     0,     0,   452,     0,   453,   454,  -251,   943,
    -253,     1,   316,   110,   340,   341,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   208,   209,   210,
     211,   212,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,  -251,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   320,    29,   440,     0,     0,
     321,   322,     0,    30,    31,     0,     0,   441,    34,   442,
     443,    37,    38,     0,   422,    40,    41,   444,     0,     0,
     445,   446,   447,   448,     0,   449,     0,   450,   451,    42,
       0,   327,   328,   329,   330,   331,   332,   333,     0,    45,
      46,    47,    48,    49,    50,   214,   215,   335,     0,     0,
      54,     0,     0,   452,     0,   453,   454,  -254,   940,  -251,
       1,   316,   110,   340,   341,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   208,   209,   210,   211,
     212,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,  -254,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,    29,   440,     0,     0,   321,
     322,     0,    30,    31,     0,     0,   441,    34,   442,   443,
      37,    38,     0,   422,    40,    41,   444,     0,     0,   445,
     446,   447,   448,     0,   449,     0,   450,   451,    42,     0,
     327,   328,   329,   330,   331,   332,   333,     0,    45,    46,
      47,    48,    49,    50,   214,   215,   335,     0,     0,    54,
       0,     0,   452,     0,   453,   454,  -252,   943,  -254,     1,
     316,   110,   340,   341,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   208,   209,   210,   211,   212,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,  -252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   320,    29,   440,     0,     0,   321,   322,
       0,    30,    31,     0,     0,   441,    34,   442,   443,    37,
      38,     0,   422,    40,    41,   444,     0,     0,   445,   446,
     447,   448,     0,   449,     0,   450,   451,    42,     0,   327,
     328,   329,   330,   331,   332,   333,     0,    45,    46,    47,
      48,    49,    50,   214,   215,   335,     0,     0,    54,     0,
       0,   452,     0,   453,   454,     0,   439,  -252,     1,   316,
     110,   340,   341,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   208,   209,   210,   211,   212,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,    29,   440,     0,     0,   321,   322,     0,
      30,    31,     0,     0,   441,    34,   442,   443,    37,    38,
       0,   422,    40,    41,   444,     0,     0,   445,   446,   447,
     448,     0,   449,     0,   450,   451,    42,     0,   327,   328,
     329,   330,   331,   332,   333,     0,    45,    46,    47,    48,
      49,    50,   214,   215,   335,     0,     0,    54,     0,     0,
     452,     0,   453,   454,     0,   505,   455,     1,   316,   110,
     340,   341,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   208,   209,   210,   211,   212,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   320,    29,   440,     0,     0,   321,   322,     0,    30,
      31,     0,     0,   441,    34,   442,   443,    37,    38,     0,
     422,    40,    41,   444,     0,     0,   445,   446,   447,   448,
       0,   449,     0,   450,   451,    42,     0,   327,   328,   329,
     330,   331,   332,   333,     0,    45,    46,    47,    48,    49,
      50,   214,   215,   335,     0,     0,    54,     0,     0,   452,
       0,   453,   454,     0,   527,   506,     1,   316,   110,   340,
     341,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   208,   209,   210,   211,   212,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,    29,   440,     0,     0,   321,   322,     0,    30,    31,
       0,     0,   441,    34,   442,   443,    37,    38,     0,   422,
      40,    41,   444,     0,     0,   445,   446,   447,   448,     0,
     449,     0,   450,   451,    42,     0,   327,   328,   329,   330,
     331,   332,   333,     0,    45,    46,    47,    48,    49,    50,
     214,   215,   335,     0,     0,    54,     0,     0,   452,     0,
     453,   454,     0,   532,   528,     1,   316,   110,   340,   341,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   208,   209,   210,   211,   212,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   320,
      29,   440,     0,     0,   321,   322,     0,    30,    31,     0,
       0,   441,    34,   442,   443,    37,    38,     0,   422,    40,
      41,   444,     0,     0,   445,   446,   447,   448,     0,   449,
       0,   450,   451,    42,     0,   327,   328,   329,   330,   331,
     332,   333,     0,    45,    46,    47,    48,    49,    50,   214,
     215,   335,     0,     0,    54,     0,     0,   452,     0,   453,
     454,     0,   536,   533,     1,   316,   110,   340,   341,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     208,   209,   210,   211,   212,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,    29,
     440,     0,     0,   321,   322,     0,    30,    31,     0,     0,
     441,    34,   442,   443,    37,    38,     0,   422,    40,    41,
     444,     0,     0,   445,   446,   447,   448,     0,   449,     0,
     450,   451,    42,     0,   327,   328,   329,   330,   331,   332,
     333,     0,    45,    46,    47,    48,    49,    50,   214,   215,
     335,     0,     0,    54,     0,     0,   452,     0,   453,   454,
       0,   940,   537,     1,   316,   110,   340,   341,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   208,
     209,   210,   211,   212,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   320,    29,   440,
       0,     0,   321,   322,     0,    30,    31,     0,     0,   441,
      34,   442,   443,    37,    38,     0,   422,    40,    41,   444,
       0,     0,   445,   446,   447,   448,     0,   449,     0,   450,
     451,    42,     0,   327,   328,   329,   330,   331,   332,   333,
       0,    45,    46,    47,    48,    49,    50,   214,   215,   335,
       0,     0,    54,     0,     0,   452,     0,   453,   454,     0,
     943,  -758,     1,   316,   110,   340,   341,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   208,   209,
     210,   211,   212,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,    29,   440,     0,
       0,   321,   322,     0,    30,    31,     0,     0,   441,    34,
     442,   443,    37,    38,     0,   422,    40,    41,   444,     0,
       0,   445,   446,   447,   448,     0,   449,     0,   450,   451,
      42,     0,   327,   328,   329,   330,   331,   332,   333,     0,
      45,    46,    47,    48,    49,    50,   214,   215,   335,     0,
       0,    54,     0,     0,   452,     0,   453,   454,     0,   940,
    -759,     1,   316,   110,   340,   341,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   208,   209,   210,
     211,   212,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   320,    29,   440,     0,     0,
     321,   322,     0,    30,    31,     0,     0,   441,    34,   442,
     443,    37,    38,     0,   422,    40,    41,   444,     0,     0,
     445,   446,   447,   448,     0,   449,     0,   450,   451,    42,
       0,   327,   328,   329,   330,   331,   332,   333,     0,    45,
      46,    47,    48,    49,    50,   214,   215,   335,     0,     0,
      54,     0,     0,   452,     0,   453,   454,     0,   943,  -755,
       1,   316,   110,   340,   341,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   208,   209,   210,   211,
     212,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,    29,   440,     0,     0,   321,
     322,     0,    30,    31,     0,     0,   441,    34,   442,   443,
      37,    38,     0,   422,    40,    41,   444,     0,     0,   445,
     446,   447,   448,     0,   449,     0,   450,   451,    42,     0,
     327,   328,   329,   330,   331,   332,   333,     0,    45,    46,
      47,    48,    49,    50,   214,   215,   335,     0,     0,    54,
       0,     0,   452,     0,   453,   454,     0,   940,  -756,     1,
     316,   110,   340,   341,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   208,   209,   210,   211,   212,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   320,    29,   440,     0,     0,   321,   322,
       0,    30,    31,     0,     0,   441,    34,   442,   443,    37,
      38,     0,   422,    40,    41,   444,     0,     0,   445,   446,
     447,   448,     0,   449,     0,   450,   451,    42,     0,   327,
     328,   329,   330,   331,   332,   333,     0,    45,    46,    47,
      48,    49,    50,   214,   215,   335,     0,     0,    54,     0,
       0,   452,     0,   453,   454,     0,   943,  -761,     1,   316,
     110,   340,   341,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   208,   209,   210,   211,   212,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,    29,   440,     0,     0,   321,   322,     0,
      30,    31,     0,     0,   441,    34,   442,   443,    37,    38,
       0,   422,    40,    41,   444,     0,     0,   445,   446,   447,
     448,     0,   449,     0,   450,   451,    42,     0,   327,   328,
     329,   330,   331,   332,   333,     0,    45,    46,    47,    48,
      49,    50,   214,   215,   335,     0,     0,    54,     0,     0,
     452,     0,   453,   454,     0,  1062,  -762,     1,   316,   110,
     340,   341,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   208,   209,   210,   211,   212,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   320,    29,   440,     0,     0,   321,   322,     0,    30,
      31,     0,     0,   441,    34,   442,   443,    37,    38,     0,
     422,    40,    41,   444,     0,     0,   445,   446,   447,   448,
       0,   449,     0,   450,   451,    42,     0,   327,   328,   329,
     330,   331,   332,   333,     0,    45,    46,    47,    48,    49,
      50,   214,   215,   335,     0,     0,    54,     0,     0,   452,
       0,   453,   454,     0,  1066,  1063,     1,   316,   110,   340,
     341,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   208,   209,   210,   211,   212,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,    29,   440,     0,     0,   321,   322,     0,    30,    31,
       0,     0,   441,    34,   442,   443,    37,    38,     0,   422,
      40,    41,   444,     0,     0,   445,   446,   447,   448,     0,
     449,     0,   450,   451,    42,     0,   327,   328,   329,   330,
     331,   332,   333,     0,    45,    46,    47,    48,    49,    50,
     214,   215,   335,     0,     0,    54,     0,     0,   452,     0,
     453,   454,     0,   315,  1067,     1,   316,   110,   340,   341,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   208,   209,   210,   211,   212,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   320,
      29,   440,     0,     0,   321,   322,     0,    30,    31,     0,
       0,   441,    34,   442,   443,    37,    38,     0,   422,    40,
      41,   444,     0,     0,   445,   446,   447,   448,     0,   449,
       0,   450,   451,    42,     0,   327,   328,   329,   330,   331,
     332,   333,     0,    45,    46,    47,    48,    49,    50,   214,
     215,   335,     0,     0,    54,     0,     0,   452,     0,   453,
     454,     0,   940,  -653,     1,   316,   110,   340,   341,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     208,   209,   210,   211,   212,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,    29,
     440,     0,     0,   321,   322,     0,    30,    31,     0,     0,
     441,    34,   442,   443,    37,    38,     0,   422,    40,    41,
     444,     0,     0,   445,   446,   447,   448,     0,   449,     0,
     450,   451,    42,     0,   327,   328,   329,   330,   331,   332,
     333,     0,    45,    46,    47,    48,    49,    50,   214,   215,
     335,     0,     0,    54,     0,     0,   452,     0,   453,   454,
       0,   943,  -738,     1,   316,   110,   340,   341,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   208,
     209,   210,   211,   212,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   320,    29,   440,
       0,     0,   321,   322,     0,    30,    31,     0,     0,   441,
      34,   442,   443,    37,    38,     0,   422,    40,    41,   444,
       0,     0,   445,   446,   447,   448,     0,   449,     0,   450,
     451,    42,     0,   327,   328,   329,   330,   331,   332,   333,
       0,    45,    46,    47,    48,    49,    50,   214,   215,   335,
       0,     0,    54,     0,     0,   452,     0,   453,   454,     0,
     940,  -739,     1,   316,   110,   340,   341,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   208,   209,
     210,   211,   212,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,    29,   440,     0,
       0,   321,   322,     0,    30,    31,     0,     0,   441,    34,
     442,   443,    37,    38,     0,   422,    40,    41,   444,     0,
       0,   445,   446,   447,   448,     0,   449,     0,   450,   451,
      42,     0,   327,   328,   329,   330,   331,   332,   333,     0,
      45,    46,    47,    48,    49,    50,   214,   215,   335,     0,
       0,    54,     0,     0,   452,     0,   453,   454,     0,   943,
    -741,     1,   316,   110,   340,   341,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   208,   209,   210,
     211,   212,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   320,    29,   440,     0,     0,
     321,   322,     0,    30,    31,     0,     0,   441,    34,   442,
     443,    37,    38,     0,   422,    40,    41,   444,     0,     0,
     445,   446,   447,   448,     0,   449,     0,   450,   451,    42,
       0,   327,   328,   329,   330,   331,   332,   333,     0,    45,
      46,    47,    48,    49,    50,   214,   215,   335,     0,     0,
      54,     0,     0,   452,     0,   453,   454,     0,  1569,  -742,
       1,   316,   110,   340,   341,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   208,   209,   210,   211,
     212,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,    29,   440,     0,     0,   321,
     322,     0,    30,    31,     0,     0,   441,    34,   442,   443,
      37,    38,     0,   422,    40,    41,   444,     0,     0,   445,
     446,   447,   448,     0,   449,     0,   450,   451,    42,     0,
     327,   328,   329,   330,   331,   332,   333,     0,    45,    46,
      47,    48,    49,    50,   214,   215,   335,     0,     0,    54,
       0,     0,   452,     0,   453,   454,     0,   940,  1570,     1,
     316,   110,   340,   341,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   208,   209,   210,   211,   212,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   320,    29,   440,     0,     0,   321,   322,
       0,    30,    31,     0,     0,   441,    34,   442,   443,    37,
      38,     0,   422,    40,    41,   444,     0,     0,   445,   446,
     447,   448,     0,   449,     0,   450,   451,    42,     0,   327,
     328,   329,   330,   331,   332,   333,     0,    45,    46,    47,
      48,    49,    50,   214,   215,   335,     0,     0,    54,     0,
       0,   452,     0,   453,   454,     0,   943,  -648,     1,   316,
     110,   340,   341,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   208,   209,   210,   211,   212,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,    29,   440,     0,     0,   321,   322,     0,
      30,    31,     0,     0,   441,    34,   442,   443,    37,    38,
       0,   422,    40,    41,   444,     0,     0,   445,   446,   447,
     448,     0,   449,     0,   450,   451,    42,     0,   327,   328,
     329,   330,   331,   332,   333,     0,    45,    46,    47,    48,
      49,    50,   214,   215,   335,     0,     0,    54,     0,     0,
     452,     0,   453,   454,     0,   940,  -649,     1,   316,   110,
     340,   341,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   208,   209,   210,   211,   212,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   320,    29,   440,     0,     0,   321,   322,     0,    30,
      31,     0,     0,   441,    34,   442,   443,    37,    38,     0,
     422,    40,    41,   444,     0,     0,   445,   446,   447,   448,
       0,   449,     0,   450,   451,    42,     0,   327,   328,   329,
     330,   331,   332,   333,     0,    45,    46,    47,    48,    49,
      50,   214,   215,   335,     0,     0,    54,     0,     0,   452,
       0,   453,   454,     0,   943,  -744,     1,   316,   110,   340,
     341,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   208,   209,   210,   211,   212,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,    29,   440,     0,     0,   321,   322,     0,    30,    31,
       0,     0,   441,    34,   442,   443,    37,    38,     0,   422,
      40,    41,   444,     0,     0,   445,   446,   447,   448,     0,
     449,     0,   450,   451,    42,     0,   327,   328,   329,   330,
     331,   332,   333,     0,    45,    46,    47,    48,    49,    50,
     214,   215,   335,     0,     0,    54,     0,     0,   452,     0,
     453,   454,     0,   315,  -745,     1,   316,   110,   340,   341,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   208,   209,   210,   211,   212,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   320,
      29,   440,     0,     0,   321,   322,     0,    30,    31,     0,
       0,   441,    34,   442,   443,    37,    38,     0,   422,    40,
      41,   444,     0,     0,   445,   446,   447,   448,     0,   449,
       0,   450,   451,    42,     0,   327,   328,   329,   330,   331,
     332,   333,     0,    45,    46,    47,    48,    49,    50,   214,
     215,   335,     0,     0,    54,     0,     0,   452,     0,   453,
     454,     0,   315,  -652,     1,   316,   110,   340,   341,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     208,   209,   210,   211,   212,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,    29,
     440,     0,     0,   321,   322,     0,    30,    31,     0,     0,
     441,    34,   442,   443,    37,    38,     0,   422,    40,    41,
     444,     0,     0,   445,   446,   447,   448,     0,   449,     0,
     450,   451,    42,     0,   327,   328,   329,   330,   331,   332,
     333,     0,    45,    46,    47,    48,    49,    50,   214,   215,
     335,     0,     0,    54,     0,     0,   452,     0,   453,   454,
       0,   315,  -650,     1,   316,   110,   340,   341,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   208,
     209,   210,   211,   212,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   320,    29,   440,
       0,     0,   321,   322,     0,    30,    31,     0,     0,   441,
      34,   442,   443,    37,    38,     0,   422,    40,    41,   444,
       0,     0,   445,   446,   447,   448,     0,   449,     0,   450,
     451,    42,     0,   327,   328,   329,   330,   331,   332,   333,
       0,    45,    46,    47,    48,    49,    50,   214,   215,   335,
       0,     0,    54,     0,     0,   452,     0,   453,   454,     0,
     315,  -628,     1,   316,   110,   340,   341,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   208,   209,
     210,   211,   212,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,    29,   440,     0,
       0,   321,   322,     0,    30,    31,     0,     0,   441,    34,
     442,   443,    37,    38,     0,   422,    40,    41,   444,     0,
       0,   445,   446,   447,   448,     0,   449,     0,   450,   451,
      42,     0,   327,   328,   329,   330,   331,   332,   333,     0,
      45,    46,    47,    48,    49,    50,   214,   215,   335,     0,
       0,    54,     0,     0,   452,     0,   453,   454,     0,   940,
    -627,     1,   316,   110,   340,   341,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   208,   209,   210,
     211,   212,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   320,    29,   440,     0,     0,
     321,   322,     0,    30,    31,     0,     0,   441,    34,   442,
     443,    37,    38,     0,   422,    40,    41,   444,     0,     0,
     445,   446,   447,   448,     0,   449,     0,   450,   451,    42,
       0,   327,   328,   329,   330,   331,   332,   333,     0,    45,
      46,    47,    48,    49,    50,   214,   215,   335,     0,     0,
      54,     0,     0,   452,     0,   453,   454,     0,   943,  -641,
       1,   316,   110,   340,   341,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   208,   209,   210,   211,
     212,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,    29,   440,     0,     0,   321,
     322,     0,    30,    31,     0,     0,   441,    34,   442,   443,
      37,    38,     0,   422,    40,    41,   444,     0,     0,   445,
     446,   447,   448,     0,   449,     0,   450,   451,    42,     0,
     327,   328,   329,   330,   331,   332,   333,     0,    45,    46,
      47,    48,    49,    50,   214,   215,   335,     0,     0,    54,
       0,     0,   452,     0,   453,   454,     0,   315,  -642,     1,
     316,   110,   340,   341,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   208,   209,   210,   211,   212,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   320,    29,   440,     0,     0,   321,   322,
       0,    30,    31,     0,     0,   441,    34,   442,   443,    37,
      38,     0,   422,    40,    41,   444,     0,     0,   445,   446,
     447,   448,     0,   449,     0,   450,   451,    42,     0,   327,
     328,   329,   330,   331,   332,   333,     0,    45,    46,    47,
      48,    49,    50,   214,   215,   335,     0,     0,    54,     0,
       0,   452,     0,   453,   454,     0,   940,  -651,     1,   316,
     110,   340,   341,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   208,   209,   210,   211,   212,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,    29,   440,     0,     0,   321,   322,     0,
      30,    31,     0,     0,   441,    34,   442,   443,    37,    38,
       0,   422,    40,    41,   444,     0,     0,   445,   446,   447,
     448,     0,   449,     0,   450,   451,    42,     0,   327,   328,
     329,   330,   331,   332,   333,     0,    45,    46,    47,    48,
      49,    50,   214,   215,   335,     0,     0,    54,     0,     0,
     452,     0,   453,   454,     0,   943,  -637,     1,   316,   110,
     340,   341,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   208,   209,   210,   211,   212,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   320,    29,   440,     0,     0,   321,   322,     0,    30,
      31,     0,     0,   441,    34,   442,   443,    37,    38,     0,
     422,    40,    41,   444,     0,     0,   445,   446,   447,   448,
       0,   449,     0,   450,   451,    42,     0,   327,   328,   329,
     330,   331,   332,   333,     0,    45,    46,    47,    48,    49,
      50,   214,   215,   335,     0,     0,    54,     0,     0,   452,
       0,   453,   454,     0,   940,  -638,     1,   316,   110,   340,
     341,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   208,   209,   210,   211,   212,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     320,    29,   440,     0,     0,   321,   322,     0,    30,    31,
       0,     0,   441,    34,   442,   443,    37,    38,     0,   422,
      40,    41,   444,     0,     0,   445,   446,   447,   448,     0,
     449,     0,   450,   451,    42,     0,   327,   328,   329,   330,
     331,   332,   333,     0,    45,    46,    47,    48,    49,    50,
     214,   215,   335,     0,     0,    54,     0,     0,   452,     0,
     453,   454,     0,   943,  -625,     1,   316,   110,   340,   341,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   208,   209,   210,   211,   212,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   320,
      29,   440,     0,     0,   321,   322,     0,    30,    31,     0,
       0,   441,    34,   442,   443,    37,    38,     0,   422,    40,
      41,   444,     0,     0,   445,   446,   447,   448,     0,   449,
       0,   450,   451,    42,     0,   327,   328,   329,   330,   331,
     332,   333,     0,    45,    46,    47,    48,    49,    50,   214,
     215,   335,     0,     0,    54,     0,     0,   452,     0,   453,
     454,     0,   940,  -626,     1,   316,   110,   340,   341,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     208,   209,   210,   211,   212,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   320,    29,
     440,     0,     0,   321,   322,     0,    30,    31,     0,     0,
     441,    34,   442,   443,    37,    38,     0,   422,    40,    41,
     444,     0,     0,   445,   446,   447,   448,     0,   449,     0,
     450,   451,    42,     0,   327,   328,   329,   330,   331,   332,
     333,     0,    45,    46,    47,    48,    49,    50,   214,   215,
     335,     0,     0,    54,     0,     0,   452,     0,   453,   454,
       0,   943,  -620,     1,   316,   110,   340,   341,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   208,
     209,   210,   211,   212,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   320,    29,   440,
       0,     0,   321,   322,     0,    30,    31,     0,     0,   441,
      34,   442,   443,    37,    38,     0,   422,    40,    41,   444,
       0,     0,   445,   446,   447,   448,     0,   449,     0,   450,
     451,    42,     0,   327,   328,   329,   330,   331,   332,   333,
       0,    45,    46,    47,    48,    49,    50,   214,   215,   335,
       0,     0,    54,     0,     0,   452,     0,   453,   454,     0,
     940,  -621,     1,   316,   110,   340,   341,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   208,   209,
     210,   211,   212,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   320,    29,   440,     0,
       0,   321,   322,     0,    30,    31,     0,     0,   441,    34,
     442,   443,    37,    38,     0,   422,    40,    41,   444,     0,
       0,   445,   446,   447,   448,     0,   449,     0,   450,   451,
      42,     0,   327,   328,   329,   330,   331,   332,   333,     0,
      45,    46,    47,    48,    49,    50,   214,   215,   335,     0,
       0,    54,     0,     0,   452,     0,   453,   454,     0,   943,
    -639,     1,   316,   110,   340,   341,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   208,   209,   210,
     211,   212,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   320,    29,   440,     0,     0,
     321,   322,     0,    30,    31,     0,     0,   441,    34,   442,
     443,    37,    38,     0,   422,    40,    41,   444,     0,     0,
     445,   446,   447,   448,     0,   449,     0,   450,   451,    42,
       0,   327,   328,   329,   330,   331,   332,   333,     0,    45,
      46,    47,    48,    49,    50,   214,   215,   335,     0,     0,
      54,     0,     0,   452,     0,   453,   454,     0,   439,  -640,
       1,   316,   110,   340,   341,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   208,   209,   210,   211,
     212,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   320,    29,   440,     0,     0,   321,
     322,     0,    30,    31,     0,     0,   441,    34,   442,   443,
      37,    38,     0,   422,    40,    41,   444,     0,     0,   445,
     446,   447,   448,     0,   449,     0,   450,   451,    42,     0,
     327,   328,   329,   330,   331,   332,   333,     0,    45,    46,
      47,    48,    49,    50,   214,   215,   335,     0,     0,    54,
       0,     0,   452,     0,   453,   454,   505,     0,     1,   316,
     110,     0,   340,   341,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   208,   209,   210,   211,   212,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   320,    29,   440,     0,     0,   321,   322,     0,
      30,    31,     0,     0,   441,    34,   442,   443,    37,    38,
       0,   422,    40,    41,   444,     0,     0,   445,   446,   447,
     448,     0,   449,     0,   450,   451,    42,     0,   327,   328,
     329,   330,   331,   332,   333,     0,    45,    46,    47,    48,
      49,    50,   214,   215,   335,     0,   207,    54,     1,     0,
     452,     0,   453,   454,     0,     0,     0,     0,     0,     0,
     340,   341,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   208,   209,   210,   211,   212,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   213,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   214,   215,     1,     0,     0,    54,     0,     0,
     881,  1071,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   584,     0,     0,     0,     0,     0,     0,     0,     2,
     208,   209,   210,   211,   212,     8,     9,    10,   582,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   214,   215,
       1,     0,     0,    54,     0,     0,   583,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   584,     0,   585,
       0,     0,     0,     0,     0,     2,   208,   209,   210,   211,
     212,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   214,   215,     1,     0,     0,    54,
       0,     0,   881,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   584,     0,     0,     0,     0,     0,     0,
       0,     2,   208,   209,   210,   211,   212,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,    20,
      21,   257,   258,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   260,
      40,   261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,   263,   264,   265,   266,
     214,   215,     1,     0,     0,    54,     0,     0,   881,     0,
       0,     0,     0,     0,     0,  1448,     0,     0,     0,   584,
       0,     0,     0,     0,     0,     0,     0,     2,   208,   209,
     210,   211,   212,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,    20,    21,   257,   258,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,     0,     0,     0,   260,    40,   261,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     262,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,   263,   264,   265,   266,   214,   215,     1,     0,
       0,    54,     0,     0,   881,     0,     0,     0,     0,     0,
       0,  1465,     0,     0,     0,   584,     0,     0,     0,     0,
       0,     0,     0,     2,   208,   209,   210,   211,   212,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,    20,    21,   257,   258,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   259,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   260,    40,   261,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   262,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,   263,   264,
     265,   266,   214,   215,     1,     0,     0,    54,     0,     0,
    1231,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1232,     0,     0,     0,     0,     0,     0,     0,     2,
     208,   209,   210,   211,   212,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,    20,    21,   257,
     258,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,     0,   260,    40,   261,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   262,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,   263,   264,   265,   266,   214,   215,
       1,     0,     0,    54,     0,     0,  1231,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1254,     0,     0,
       0,     0,     0,     0,     0,     2,   208,   209,   210,   211,
     212,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,    20,    21,   257,   258,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   260,    40,   261,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   262,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
     263,   264,   265,   266,   214,   215,     1,     0,     0,    54,
       0,     0,  1231,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1711,     0,     0,     0,     0,     0,     0,
       0,     2,   208,   209,   210,   211,   212,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,    20,
      21,   257,   258,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   260,
      40,   261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,     0,     0,     0,     0,     1,
       0,     0,     0,     0,    45,    46,   263,   264,   265,   266,
     214,   215,     0,     0,     0,    54,     0,     0,  1231,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,  1726,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,     1,     0,     0,     0,     0,    54,     0,
       0,   881,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   584,     0,     0,     0,     0,     0,     2,     3,
       4,   286,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,     0,     0,     0,    30,    31,   287,    33,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,     0,     0,     0,     0,    44,     0,     0,     0,
       1,    45,    46,    47,    48,    49,    50,    51,    52,     0,
       0,     0,    54,     0,     0,    55,     0,     0,     0,     0,
       0,     0,     0,     0,   288,     2,   208,   209,   210,   211,
     212,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,   440,     0,     0,     0,
       0,     0,    30,    31,     0,     0,   441,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     1,    45,    46,
      47,    48,    49,    50,   214,   215,     0,     0,     0,    54,
       0,     0,   968,     0,   453,     0,     0,     0,     0,     0,
       0,   969,     2,   208,   209,   210,   211,   212,     8,     9,
      10,   582,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     1,    45,    46,    47,    48,    49,
      50,   214,   215,     0,     0,     0,    54,     0,     0,   948,
       0,     0,     0,     0,     0,     0,     0,     0,   949,     2,
     208,   209,   210,   211,   212,     8,     9,    10,   582,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,   639,
       0,     0,    45,    46,    47,    48,    49,    50,   214,   215,
       0,     0,     0,    54,     0,     0,    55,     0,     0,     0,
       0,     0,     0,     0,     0,   949,     2,   208,   209,   210,
     211,   212,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,    20,    21,   257,   258,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,     0,   260,    40,   261,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   262,
       0,     0,     0,     0,  1534,     0,     0,     0,     0,    45,
      46,   263,   264,   265,   266,   214,   215,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     267,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -66,     0,     0,     0,     0,     0,     0,   -66,   -66,
       0,     0,     0,   -66,     0,     0,     0,     0,     0,   -66,
     -66,   -66,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -66,     0,     0,     0,  1740,     0,
       0,     0,     0,     0,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1535,     0,  1536,   -66,     2,   208,   209,   210,   211,
     212,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,    20,    21,   257,   258,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   260,    40,   261,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   262,     0,
       0,     0,  1744,     0,     0,     0,     0,     0,    45,    46,
     263,   264,   265,   266,   214,   215,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -111,     2,
     208,   209,   210,   211,   212,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,    20,    21,   257,
     258,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,     0,   260,    40,   261,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   262,     0,     0,     0,  1745,     0,     0,     0,
       0,     0,    45,    46,   263,   264,   265,   266,   214,   215,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -95,     2,   208,   209,   210,   211,   212,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,    20,    21,   257,   258,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   259,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   260,    40,   261,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   262,     0,     0,     0,
    1853,     0,     0,     0,     0,     0,    45,    46,   263,   264,
     265,   266,   214,   215,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -96,     2,   208,   209,
     210,   211,   212,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,    20,    21,   257,   258,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,     0,     0,     0,   260,    40,   261,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     262,     0,     0,     0,  1999,     0,     0,     0,     0,     0,
      45,    46,   263,   264,   265,   266,   214,   215,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -80,     2,   208,   209,   210,   211,   212,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,    20,
      21,   257,   258,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   260,
      40,   261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,     0,     0, -1306,   305,     0,
       1,     0,     0,     0,    45,    46,   263,   264,   265,   266,
     214,   215,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -87,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,     0,
       0,     0,    30,    31,    32,    33,     0,    34,    35,    36,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,    43,
       0,     1,     0,    44,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,    51,    52,     0,     0,    53,    54,
       0,     0,    55,     0,     0,    56,     2,   208,   209,   210,
     211,   212,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     1,   851,     0,     0,    45,
      46,    47,    48,    49,    50,   214,   215,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1424,
       2,   208,   209,   210,   211,   212,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     1,
     851,     0,     0,    45,    46,    47,    48,    49,    50,   214,
     215,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1771,     2,   208,   209,   210,   211,   212,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,   169,     0,     1,   851,     0,     0,    45,    46,    47,
      48,    49,    50,   214,   215,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1772,     2,     3,
       4,   170,     6,     7,     8,     9,    10,   171,   172,   173,
     174,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,   169,     0,     1,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,    51,    52,     0,
       0,     0,    54,     0,     0,    55,     0,     0,   175,     2,
       3,     4,   170,     6,     7,     8,     9,    10,   171,   172,
     173,   174,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,   622,     0,     1,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,    51,    52,
       0,     0,     0,    54,     0,     0,    55,     0,     0,   175,
       2,   208,   209,   210,   211,   212,   245,   246,   247,   623,
     624,   625,   626,   252,   253,   254,   255,   256,    20,    21,
     257,   258,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   260,    40,
     261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   262,  -925,     0,  -925,     0,     0,     0,
       0,     0,     0,    45,    46,   263,   264,   265,   266,   214,
     215,     0,     0,     0,    54,     0,     0,    55,     0,     0,
     627,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,
    -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,
    -925,  -925,  -925,  -925,  -925,  -925,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -925,     0,     0,     0,     0,     0,     0,  -925,  -925,
       0,     0,     0,  -925,     0,     0,     0,     0,     0,  -925,
    -925,  -925,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -925,     0,     0,     1,     0,     0,
       0,     0,     0,     0,  -925,  -925,  -925,  -925,  -925,  -925,
    -925,  -925,     0,     0,     0,  -925,     0,     0,  -925,     0,
       0,  -925,     2,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,     0,     0,     0,    30,
      31,    32,    33,     0,    34,    35,    36,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,    43,     0, -1307,   297,
      44,     1,     0,     0,     0,    45,    46,    47,    48,    49,
      50,    51,    52,     0,     0,    53,    54,     0,     0,    55,
       0,     0,    56,     0,     0,     0,     2,     3,     4,   170,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,    35,
      36,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   207,    42,
       1,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,    51,    52,     0,     0,     0,
      54,     0,     0,    55,     0,     2,   208,   209,   210,   211,
     212,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   213,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   207,    42,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   214,   215,     0,     0,     0,    54,
       0,     0,  1231,  1698,     2,   208,   209,   210,   211,   212,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   213,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   207,    42,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   214,   215,     0,     0,     0,     0,     0,
       0,     0,   216,     2,   208,   209,   210,   211,   212,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   213,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   961,    42,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   214,   215,     0,     0,     0,     0,     0,     0,
       0,   403,     2,   208,   209,   210,   211,   212,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   213,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1491,    42,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   214,   215,     0,     0,     0,     0,     0,     0,     0,
     216,     2,   208,   209,   210,   211,   212,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     213,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   207,    42,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     214,   215,     0,     0,     0,     0,     0,     0,     0,   403,
       2,   208,   209,   210,   211,   212,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   213,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   207,    42,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   214,
     215,     0,     0,     0,     0,     0,     0,     0,  1584,     2,
     208,   209,   210,   211,   212,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   213,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,    42,     1,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   214,   215,
       0,     0,     0,     0,     0,     0,     0,  1925,     2,     3,
       4,   170,     6,     7,     8,     9,    10,   582,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     169,    42,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,    51,    52,     0,
       0,     0,    54,     0,     0,    55,     0,     2,     3,     4,
     170,     6,     7,     8,     9,    10,   582,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   905,
      42,     1,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,    51,    52,     0,     0,
       0,    54,     0,     0,    55,     0,     2,   208,   209,   210,
     211,   212,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,    20,    21,   257,   258,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,     0,   260,    40,   261,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   262,
       1,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,   263,   264,   265,   266,   214,   215,     0,     0,     0,
       0,     0,     0,   906,     0,     2,     3,     4,   170,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,    51,    52,     0,     0,     0,    54,
       0,     0,    55,     0,     2,   208,   209,   210,   211,   212,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   214,   215,     0,     0,     0,    54,     0,
       0,    55,     0,     2,   208,   209,   210,   211,   212,     8,
       9,    10,   582,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   214,   215,     0,     0,     0,    54,     0,     0,
      55,     0,     2,   208,   209,   210,   211,   212,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   214,   215,     0,     0,     0,     0,     0,     0,   740,
       0,     2,   208,   209,   210,   211,   212,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     214,   215,     0,     0,     0,     0,     0,     0,  1470,     0,
       2,   208,   209,   210,   211,   212,   245,   246,   247,  1556,
     249,   250,   251,   252,   253,   254,   255,   256,    20,    21,
     257,   258,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   260,    40,
     261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1094,   262,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,   263,   264,   265,   266,   214,
     215,     0,     0,     0,    54,     0,     0,    55,     0,     2,
     208,   209,   210,   211,   212,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,  1095,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   213,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,  1100,     0,     1,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   214,   215,
       2,   208,   209,   210,   211,   212,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,  1101,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   213,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,  1106,     0,     1,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   214,
     215,     2,   208,   209,   210,   211,   212,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,  1107,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     213,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,   890,     0,     1,     0,     0,
       0,     0,     0,     0,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     214,   215,     2,   208,   209,   210,   211,   212,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
      20,    21,   257,   258,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   259,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     260,    40,   261,     0,     0,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,   262,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   263,   264,   265,
     266,   214,   215,     2,   208,   209,   210,   211,   212,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,  1055,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   213,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   214,   215,     2,   208,   209,   210,   211,   212,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,  1112,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   213,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   214,   215,     2,   208,   209,   210,   211,
     212,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   519,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   214,   215,     2,   208,   209,   210,
     211,   212,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,   851,     0,     0,    45,
      46,    47,    48,    49,    50,   214,   215,     2,   208,   209,
     210,   211,   212,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   213,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,   214,   215,     2,   208,
     209,   210,   211,   212,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,    20,    21,   257,   258,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,   494,   495,     0,     0,     0,   260,    40,   261,     0,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,   262,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,   263,   264,   265,   266,   214,   215,     2,
     208,   209,   210,   211,   212,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   214,   215,
       2,   208,   209,   210,   211,   212,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,    20,    21,
     257,   258,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   260,    40,
     261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   262,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,   263,   264,   265,   266,   214,
     215,     2,   208,   209,   210,   211,   212,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,    20,
      21,   257,   258,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   260,
      40,   261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,   263,   264,   265,   266,
     214,   215,     0,     0,     0,    54,     0,     0,   881,  1695,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   584,
       2,   208,   209,   210,   211,   212,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,    20,    21,
     257,   258,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   260,    40,
     261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   262,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,   263,   264,   265,   266,   214,
     215,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   267,     2,   208,   209,   210,   211,
     212,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,    20,    21,   257,   258,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   260,    40,   261,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   262,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
     263,   264,   265,   266,   214,   215,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1545,     2,
     208,   209,   210,   211,   212,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,    20,    21,   257,
     258,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,     0,   260,    40,   261,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   262,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,   263,   264,   265,   266,   214,   215
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-2002)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       0,   739,   358,    96,   661,   553,   947,    89,   160,   486,
     104,    89,   880,   880,   847,  1021,   553,  1023,   283,   136,
      86,   763,   490,   880,   148,  1021,   947,  1023,   770,  1124,
    1735,   773,    32,    33,  1021,    62,  1023,   161,   157,   163,
     132,   165,   301,    43,  1021,  1022,  1023,    86,  1022,   763,
     132,    32,  1241,   487,   132,    55,   770,   856,  1021,   773,
    1023,   104,    62,    44,   132,    97,    97,    67,   283,    69,
    1633,    97,   189,   979,     5,    87,   856,   573,   104,    86,
     341,     3,  1645,   598,     1,    85,    86,    87,   136,    89,
     117,   847,   741,   904,   897,    95,   779,    97,    67,   192,
     193,    17,     1,   957,   104,   105,    28,   603,   108,   357,
     606,    86,   608,     3,   610,    37,  1821,   117,     1,     3,
     120,     5,    97,   371,     3,  2126,    86,   375,     1,   104,
     111,   112,   132,     1,   115,   135,   136,    97,     1,    78,
     140,   189,   825,  1000,   144,   145,   146,     5,   148,     1,
      80,     1,   152,   358,   154,   192,   193,   157,   158,   148,
     160,   161,   162,   163,   130,   165,     1,   978,   168,   814,
     136,     3,   161,     5,   163,     3,   165,    75,    76,   206,
     180,   111,   112,  2184,     5,     1,     1,     3,   281,   189,
       1,     3,     3,   685,   686,   134,     1,   842,     3,     3,
      28,     5,     3,   125,     1,   136,   206,   301,   123,   303,
      17,   180,    86,    87,   136,     1,     1,   134,   218,     1,
     220,     3,     7,     8,     9,   291,  1029,   486,   228,   229,
     146,     1,   131,     5,   125,   301,   126,     1,    55,     1,
     240,   486,   126,   900,   244,     1,   283,   126,   131,     1,
     134,   130,   291,   126,     1,   134,     1,   130,   301,     3,
     303,   135,   301,   131,     3,   302,   278,     3,   131,  1275,
       3,   303,   303,   125,    17,   133,  1282,   303,   278,  1275,
    1286,   131,     5,   283,   291,   437,  1282,   287,  1275,    28,
    1286,   291,    28,   410,   126,  1282,   131,  1274,  1275,  1286,
    1274,   301,   134,   303,  1281,  1282,   287,  1281,  1285,  1286,
       3,  1285,  1275,   140,   135,   131,   131,  1880,   135,  1282,
     131,   321,   126,  1286,  1230,   126,   131,   327,   303,   130,
     134,     1,   301,   134,   131,    28,    75,    76,   338,   146,
     125,   301,     3,   303,   129,   131,   125,     3,   133,   131,
      17,   136,   352,     3,   126,     3,     1,     5,   128,   340,
     130,   131,   410,   456,   457,   458,   459,   131,   883,   131,
       3,     3,   128,   400,   130,   402,   128,     1,   130,   131,
      28,     1,     3,  1216,   131,  1218,   131,  1129,   132,   122,
     123,     0,     3,   132,   394,   395,   132,     5,     1,   132,
     400,     3,   402,   146,   278,   487,     5,   130,     0,   487,
     410,    67,   229,   125,     5,  1129,   416,   291,   683,   684,
     685,   686,   670,   130,     1,   673,   123,   904,   128,   429,
     137,   548,     3,     3,   434,   132,   436,   437,     3,   132,
     440,   441,    74,   799,   800,   801,   446,   564,     3,   449,
     450,   451,   452,   453,   578,   574,   580,   716,   128,     5,
    1216,   554,  1218,  2168,   557,   126,   122,   123,   683,   684,
     685,   686,     5,   829,   830,   831,   132,    86,   128,   146,
     130,   481,   482,   483,   132,   130,   486,   487,    97,     3,
     490,   583,   125,   493,    86,   104,   105,   965,   498,   967,
     548,   978,   502,   503,   128,    97,  1601,   507,   508,    74,
     130,   132,   104,   105,    28,   583,   564,  1706,   126,   519,
     954,   132,   125,   126,   126,   525,   526,   130,   123,   529,
     530,   130,   793,   128,   534,   535,   363,   128,   538,   539,
       5,  1447,   542,   543,   544,   545,   546,   131,   548,   126,
     598,   551,  1029,   130,   132,   126,   126,   584,     1,   820,
       3,  1076,   562,   563,   564,     3,   131,   828,   568,    75,
      76,     3,  1087,   573,   574,  1443,  1443,   132,   578,     1,
     580,   581,  1231,   583,   584,   585,  1443,   848,   588,   578,
     617,   580,   125,     3,   799,   800,   801,  1093,   598,   131,
    1249,  1455,  1608,   603,  1510,     3,   606,  1256,   608,   436,
     610,   125,  1608,    11,  1555,  1111,   122,   617,    28,   131,
       1,  1608,   716,   123,   829,   830,   831,     1,  1427,  1428,
    1607,  1608,   132,  1607,  1555,   452,    74,   229,   897,   125,
    1132,  1495,     3,  1135,  1498,  1608,   739,  1427,  1428,   130,
     716,   651,   897,   653,  1522,   136,  1524,     7,     8,     9,
     125,   661,  1529,     0,     7,     8,     9,     1,   542,   543,
     544,   545,   546,   716,   711,   712,     1,   716,     5,   122,
     123,  1173,   291,   683,   684,   685,   686,   130,   562,   563,
     122,   123,   301,   131,   303,  1187,  1188,  1189,  1190,   291,
     132,   701,   702,   125,   126,     7,     8,     9,   130,   301,
     710,   303,   957,   139,   140,   125,   716,   698,   699,   978,
     129,     1,   722,     3,   122,   123,   124,  1916,     3,     3,
     730,   129,   130,   978,   132,     1,     1,   737,   738,   739,
     740,   741,   742,     3,   573,   126,   136,  1489,   748,   130,
     815,   751,   126,   132,     3,   134,   130,     7,     8,     9,
     760,   122,   123,   744,   745,   746,   583,     3,   585,     5,
    1029,   132,   816,     3,   603,  1489,   776,   606,   843,   608,
     780,   610,   125,   133,  1029,   748,   136,  1793,   751,   881,
     133,   125,   126,   136,     3,    31,   130,  1793,    28,  1705,
     844,   126,   124,     1,  1710,   130,  1793,   128,   130,    75,
      76,    91,   125,   881,    80,  1792,  1793,     3,  1792,    28,
     130,    87,   822,   136,   313,     3,   826,   129,    37,   130,
    1793,   133,   441,   322,   986,   987,    11,   930,   931,   328,
     933,     3,   434,   936,   937,   111,   112,   122,   123,   123,
     124,   851,   852,   853,   129,   131,   856,   857,   858,   125,
     126,   126,   954,   123,   130,   130,     3,  1132,   128,   993,
    1135,  1777,   954,   122,   123,   994,   954,    75,    76,   879,
     880,   881,    80,   133,   817,   885,   954,   887,   888,    87,
       7,     8,     9,   130,   486,   895,   896,   897,   126,   125,
     900,     3,   130,     5,   904,   818,   906,   907,  1173,   909,
     136,   911,   845,   111,   112,  1271,   125,  1132,   130,  1012,
    1135,     3,  1187,  1188,  1189,  1190,  1441,  1781,  1782,    31,
     128,   129,   130,   846,   526,   129,   122,   123,    75,    76,
     134,  1060,  1061,   129,   122,   123,  1070,   125,   948,   124,
     950,    96,   814,  1820,   954,   130,   130,   957,  1173,  1076,
     122,   123,   962,   125,     3,   965,     5,   967,   968,   130,
      70,    71,  1187,  1188,  1189,  1190,   132,   977,   978,   979,
     842,   808,   809,  1531,   811,    67,   986,   987,   125,   124,
    1728,   991,   131,   993,   994,   130,  1088,    75,    76,   999,
    1000,  1001,  1002,   145,   993,     3,   148,   815,  1665,   836,
     837,   838,   839,  1490,  1562,   126,   133,  1278,   816,   161,
    1088,   163,  1894,   165,   125,  1562,    80,  1933,  1076,  1029,
      28,   131,     7,     8,     9,   843,   126,  1085,   125,  1087,
     122,   123,    12,    13,   122,   125,   844,   192,   193,   136,
    1699,   817,   879,   880,    75,    76,  1997,   111,   112,  1574,
    1060,  1061,  1089,   818,  1064,  1065,  1271,   128,  1068,  1069,
    1070,   132,  1072,    12,    13,  1075,  1076,    75,    76,   845,
     134,  1070,  1206,   122,   123,  1085,   128,  1087,  1088,  1089,
     132,   846,   909,  1093,     3,   123,  1096,   122,   125,  1099,
     131,   122,  1102,   129,   132,  1105,   134,   716,  1108,   136,
     132,  1111,   134,  1113,     7,     8,     9,   142,   143,    28,
     124,  1613,  1614,   124,   716,   313,   130,  1127,    37,   130,
     722,   948,  1132,  1625,   322,  1135,   281,   125,   283,  1231,
     328,  2009,   322,  2011,  1144,   962,  1146,   125,   328,    80,
     125,   968,   979,   123,   124,  1155,   748,   302,   133,   751,
     132,   136,   134,  1231,   802,   803,    75,    76,  1168,   123,
      78,    80,  1720,  1173,  1174,  2047,   130,  2049,    87,   132,
     111,   112,   136,  1164,   123,   124,   129,  1187,  1188,  1189,
    1190,   134,  1219,     1,   832,   833,   125,  1935,   129,    75,
      76,  1075,   111,   112,    80,  1205,  1206,  1207,     3,  1209,
    1455,    87,   125,   122,   125,   125,   125,  1206,   129,  1219,
     400,  1221,   402,     1,     3,   136,  1226,   136,   717,   125,
    1230,  1231,    11,    28,   125,   111,   112,     1,   131,     3,
     133,  1898,    37,  2115,   126,  2117,   125,  2119,   130,  1249,
    1495,   124,     3,  1498,     3,   125,  1256,   130,  1075,  1774,
      11,   853,   126,   125,  1093,  1265,   130,    75,    76,    80,
    1099,   126,    80,   122,   132,   130,  1105,   804,   805,    87,
      75,    76,  1111,   144,  1832,    80,  2158,  2159,   132,  2161,
     134,  1272,    87,   142,   143,  1832,   888,    75,    76,   138,
     111,   112,    80,   111,   112,   897,  2178,   834,   835,    87,
     145,   456,   904,   132,   459,   134,   111,   112,   129,   911,
     128,   129,   130,    16,  2196,  1840,    75,    76,   802,   803,
     125,    80,   126,   111,   112,   128,   124,   130,    87,   481,
     482,   136,   130,   122,   123,   124,   812,   813,  1613,  1614,
     128,   130,   130,   132,   128,   124,   130,   144,   832,   833,
    1625,   130,   111,   112,   145,   507,   508,   148,    14,    15,
     962,   122,   123,   124,   840,   841,  1868,   138,   129,   130,
     161,   132,   163,   132,   165,   145,   978,   529,   530,    75,
      76,     3,   534,   535,    80,   126,   538,   539,  1613,  1614,
      80,    87,  1950,  1230,   584,    89,    90,    91,     3,   554,
    1625,    37,   557,  1950,    16,     1,    28,     3,  1418,  1419,
      46,    47,  1422,  1423,   132,   111,   112,  1427,  1428,   804,
     805,   111,   112,    28,    46,   132,   578,   126,   580,  1439,
     125,   130,  1423,  1443,  1444,   134,   132,  1447,   128,    75,
      76,    46,   132,  1453,    80,  1455,   126,  1574,  1458,   834,
     835,    87,  1462,    75,    76,  2013,   646,  1467,  1468,  1469,
     126,   139,   140,  2130,   130,     6,  2013,     8,     9,     3,
      75,    76,   124,   928,   929,   111,   112,     3,   130,   126,
    1490,   126,  1492,   130,   124,  1495,   122,   134,  1498,    86,
     130,  1501,   283,     3,    28,   126,   128,   126,   130,   130,
    1510,   130,    28,    37,   126,   134,   126,  1517,  1518,   132,
     130,   124,  1522,  1523,  1524,  1525,  1574,   130,    28,   717,
      46,   126,   128,  2081,  1582,   130,  1781,  1782,   683,   684,
     685,   686,   130,    74,  2081,  2093,  2038,   128,  2040,   812,
     813,    75,    76,   126,    85,   123,  2093,   130,   124,    75,
      76,   134,   132,   124,   130,   123,   711,   712,   713,   130,
     123,  1571,  1572,   130,  1574,    75,    76,   840,   841,   110,
      80,   132,  1582,   134,   126,   124,  2134,    87,   130,   120,
       3,   130,   123,  1593,   126,  1469,    70,    71,   130,   137,
     126,   125,   189,  1868,   130,   136,    10,    11,   139,   140,
     141,   111,   112,  1613,  1614,  1707,  1443,  2109,    92,   132,
    1447,   134,    96,  1623,    98,  1625,  1626,  1219,     1,  1629,
       3,   158,   132,  1633,  1226,   162,   137,  1637,  2186,  1707,
    1640,  1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,  2186,
    2198,   137,  1469,  1868,     1,  1636,     3,   131,     1,   132,
       3,  2198,    75,    76,     1,  1665,     3,    80,   128,   132,
     130,  1652,  1672,   130,    87,  1492,   542,   543,   544,   545,
     546,   136,   132,  1510,   134,   130,   128,  1811,   130,  1813,
    1783,   132,  1536,   134,  1538,   130,   562,   563,   111,   112,
     481,   482,  1529,   130,   291,  1705,  1536,  1707,  1538,   131,
    1710,   132,   125,  1837,   301,  1839,    10,    11,     3,    14,
      15,   928,   929,  1840,     0,   128,   507,   508,  1728,   134,
    1730,  1731,   562,   563,  1734,   125,  1997,   683,   684,   683,
     684,   104,   105,    28,   857,   858,   125,   125,   529,   530,
     125,   128,   128,   534,   535,   125,   128,   538,   539,   128,
     128,   132,   128,   123,   126,    66,   547,   131,  1768,   949,
     137,   132,   137,  2038,   123,  2040,  1593,  1777,  2134,   137,
     137,  1781,  1782,   137,  1784,   137,   928,   929,   136,   131,
      75,    76,  1840,   132,   128,    80,  1796,   578,   130,   580,
     123,   131,    87,   131,   126,   126,   126,   134,   988,   126,
      86,  1811,   137,  1813,   125,   125,  1816,   126,   137,   137,
     126,    97,  1811,  2038,  1813,  2040,   111,   112,   104,   105,
     134,   134,   125,   125,    58,     3,   125,  1837,   128,  1839,
    1840,   128,   128,   123,  2109,   123,   128,   132,  1837,   126,
    1839,   993,   126,   123,   125,   136,   125,   123,   126,   126,
      28,   126,  1862,  1863,  1864,  1865,   130,  1012,  1868,    37,
     651,   130,  1872,  1873,   136,  1875,   126,  1877,  1705,   130,
      75,    76,  2006,  1710,   131,    80,   126,   129,   134,  1889,
       3,   134,    87,   134,  2109,   134,   126,   126,  1898,   486,
    1492,  1901,   683,   684,   685,   686,   126,    75,    76,  1089,
     128,  1892,    80,  1894,   131,    28,   111,   112,   126,    87,
     126,   126,  1064,  1065,    37,   137,  1068,  1069,  1070,  2134,
     137,   134,   126,  1933,   129,  1935,    75,    76,   137,    58,
     125,    80,   134,   111,   112,   126,   125,   125,    87,   126,
    1777,   134,   134,   229,   122,   126,   126,   125,   134,   134,
    1140,   548,    75,    76,   551,   126,   134,    80,   126,   126,
     137,   137,   111,   112,    87,   123,   136,   128,   137,    11,
     129,   137,   763,   122,   136,   132,   125,  1132,   132,   770,
    1135,   134,   773,  1820,   134,   128,   128,   136,   111,   112,
     129,  1593,   129,   125,  2004,  2005,  2006,  2007,  2008,  2009,
     126,  2011,   125,   137,   132,   291,   126,  2006,  2018,  2019,
    2020,  2021,   126,   137,    66,   301,   137,   303,  1173,  2029,
    2123,  2124,   137,   126,    75,    76,   137,   137,  2038,    80,
    2040,  2041,  1187,  1188,  1189,  1190,    87,   137,   137,   126,
    2050,  2051,  1232,   126,   126,   126,     0,   126,   128,   137,
     126,   137,   338,  1205,  1206,  1210,  2047,  1212,  2049,   137,
     111,   112,   137,   128,  1254,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,   126,   137,   132,   128,  2089,
    2090,   128,   128,   126,   128,   126,  2096,  2097,   128,    43,
    2100,   128,  2102,    75,    76,  2105,  1933,   128,    80,  2109,
     128,   128,   128,   128,   128,    87,   128,  2166,    62,   493,
    1525,     3,   999,   710,  2124,    69,  2126,   879,   301,   716,
    2130,   934,   301,  2114,  2115,   825,  2117,   493,  2119,   111,
     112,   991,    86,  2143,  1490,    89,    28,   928,   929,   493,
     742,   451,    96,    97,   126,   493,  2114,   493,   434,   512,
     104,   105,   327,   278,   104,    97,  2166,  2167,  2149,   441,
      97,   283,  2172,   117,   105,    97,   120,  2158,  2159,  1768,
    2161,    -1,    -1,    -1,  2184,    -1,   129,    -1,   132,    -1,
      -1,    -1,    -1,    75,    76,    -1,   140,  2178,    80,    -1,
      -1,   145,   146,    -1,   148,    87,    -1,    -1,    -1,     0,
     486,    -1,   993,    -1,   158,  2196,   160,   161,   162,   163,
      -1,   165,    -1,    -1,  1816,    46,    47,    -1,    -1,   111,
     112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1021,    -1,  1023,    -1,    -1,    -1,    -1,    -1,   192,   193,
     526,    -1,    46,    47,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,   206,    -1,  1753,  1754,    87,  1756,  1757,    -1,
      -1,    -1,  1761,  1762,  1763,  1764,   220,    -1,    -1,    -1,
      -1,    75,    76,  1064,  1065,   229,    80,  1068,  1069,  1070,
     111,   112,    -1,    87,    -1,    86,    -1,    -1,   400,    -1,
     402,    -1,    -1,    -1,   125,    -1,    97,    -1,    -1,    -1,
     897,    -1,    -1,   104,   105,    94,    -1,   111,   112,  1499,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,   125,    -1,    80,   278,  1515,    -1,   281,   282,   283,
      87,    -1,    -1,    -1,    75,    76,    -1,   291,  1129,    80,
      -1,  1132,    -1,    -1,  1135,   146,    87,   301,   302,   303,
      -1,    -1,    -1,  1144,   111,   112,    -1,   158,    -1,    -1,
     957,   162,    -1,    -1,    -1,  1517,  1518,   321,    -1,   126,
     111,   112,    -1,   327,    -1,    -1,   146,    -1,    -1,    -1,
      -1,   978,  1173,    -1,   338,   126,    -1,    -1,   158,    -1,
      -1,  1546,   162,    -1,    -1,    -1,  1187,  1188,  1189,  1190,
      -1,    -1,    -1,  1902,  1903,  1904,  1905,  1906,  1907,  1908,
    1909,    -1,    -1,    -1,  1205,  1206,    -1,    -1,    -1,  1571,
    1572,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     716,    -1,  1029,    -1,    -1,    -1,   722,    -1,    -1,    -1,
      -1,   395,    -1,    -1,    -1,    -1,   400,    -1,   402,    -1,
      -1,    -1,    -1,   739,    -1,    -1,    -1,    -1,  1613,  1614,
      -1,    -1,   748,    -1,    -1,   751,    -1,    -1,    -1,    -1,
    1625,    -1,   584,    -1,   760,    -1,    46,    47,    -1,    -1,
     434,    -1,   436,   437,  1275,    -1,   440,   441,    -1,    -1,
     291,  1282,   446,    -1,   283,  1286,   450,   451,  1997,   453,
     301,    -1,   303,    -1,    -1,    75,    76,    -1,   278,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    87,    -1,  1709,
      -1,  1711,    -1,    -1,    -1,    -1,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   646,  1725,  1726,    -1,    -1,   493,
      -1,   111,   112,    -1,   498,    -1,    -1,    -1,    -1,   503,
      -1,   321,   122,   507,   508,  1753,  1754,   327,  1756,  1757,
      -1,    -1,    -1,  1761,  1762,  1763,  1764,   853,    -1,    -1,
      -1,     3,   526,    -1,    -1,   529,   530,    -1,    -1,    -1,
     534,   535,    -1,    -1,   538,   539,    -1,    -1,    -1,    -1,
     434,    -1,    -1,   547,    -1,    -1,    28,    -1,    -1,    -1,
     554,    -1,   888,   557,    -1,    37,    -1,    -1,    -1,    -1,
    1207,   897,  1209,    -1,    -1,    -1,    -1,    -1,   904,   573,
      -1,    -1,    -1,   909,   578,   911,   580,    -1,    -1,   583,
     584,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   440,
      -1,    75,    76,    75,    76,    -1,    80,    -1,    80,   603,
     451,    -1,   606,    87,   608,    87,   610,    -1,    -1,  1811,
      -1,  1813,    -1,   617,    -1,    -1,    -1,   456,    -1,    -1,
     440,    -1,    -1,    -1,    -1,    -1,   962,   111,   112,   111,
     112,   451,   526,    -1,    -1,  1837,    -1,  1839,   122,    -1,
     122,   125,   978,   125,   126,    -1,    -1,    -1,  1489,    -1,
      -1,    -1,   503,    -1,  1902,  1903,  1904,  1905,  1906,  1907,
    1908,  1909,    -1,  1868,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   512,    -1,    -1,  1517,  1518,    -1,   683,
     684,   685,   686,   503,    -1,    -1,    -1,    -1,    -1,   583,
      -1,    -1,    -1,    -1,  1934,  1536,    -1,  1538,    -1,    -1,
      -1,    -1,     3,  1943,    -1,    -1,    -1,   711,   712,   713,
      -1,    -1,   716,    -1,    -1,    -1,    -1,    -1,   722,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   730,    28,    -1,    -1,
    1571,  1572,    -1,   737,   738,   739,    37,   741,   742,    -1,
      -1,    -1,    -1,    -1,   748,    -1,    -1,   751,    -1,  1997,
      -1,    -1,    -1,    -1,    -1,    -1,   760,    -1,    -1,   763,
      -1,  2001,  2002,    -1,    -1,    -1,   770,  1608,    -1,   773,
      -1,    -1,  1613,  1614,    75,    76,   140,    -1,    -1,    80,
      -1,    -1,  1623,    -1,  1625,  1626,    87,   949,  1629,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1637,    -1,    -1,  1640,
      -1,    -1,  2004,  2005,  2006,  2007,  2008,    -1,  1455,    -1,
     111,   112,   651,    -1,    -1,    -1,  2018,  2019,  2020,  2021,
      -1,   122,    -1,    -1,   125,     3,   988,    -1,    -1,    -1,
      -1,    -1,    -1,  2038,    -1,  2040,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   683,   684,   685,   686,  1495,   853,
      28,  1498,   856,   857,   858,    -1,    -1,    -1,    -1,    37,
      38,    39,    40,    -1,    -1,   716,   760,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   879,   880,   881,    -1,    -1,
      -1,    -1,    -1,    -1,   888,    -1,    -1,  2089,  2090,    -1,
    1226,    -1,   896,   897,    -1,    -1,    -1,    75,    76,    -1,
     904,    -1,    80,   907,  2109,   909,    -1,   911,    -1,    87,
     547,    -1,    -1,    -1,    -1,    -1,    -1,   737,   738,   553,
       3,   741,   742,    -1,    -1,    -1,    -1,  1089,    -1,    -1,
      -1,    -1,    -1,   111,   112,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,    28,    -1,   125,    -1,    -1,
     954,    -1,  1793,    -1,    37,    -1,    -1,    -1,   962,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1811,    -1,  1813,    -1,   978,   979,    -1,    -1,  1140,    -1,
      -1,    -1,   986,   987,    -1,    -1,    -1,   881,    -1,   993,
      -1,    -1,    75,    76,   888,   999,  1837,    80,  1839,   363,
      -1,    -1,   896,    -1,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   907,    -1,    -1,    -1,  1021,  1022,  1023,
      -1,  1862,  1863,  1864,  1865,  1029,    -1,  1868,   111,   112,
      -1,  1872,  1873,    -1,  1875,    -1,  1877,    -1,    -1,   122,
      -1,    -1,   125,    -1,    -1,   896,    -1,    -1,  1889,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   907,    -1,    -1,    -1,
    1064,  1065,    -1,    -1,  1068,  1069,  1070,    -1,    -1,    -1,
    1232,    -1,   436,    -1,    -1,    -1,   896,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1088,  1089,    -1,   907,    -1,  1093,
      -1,    -1,  1254,   730,    -1,  1099,    -1,    -1,    -1,    -1,
      -1,  1105,    -1,    -1,    -1,    -1,    -1,  1111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   960,    -1,    -1,    -1,  1129,   763,    -1,  1132,    -1,
      -1,  1135,    -1,   770,  1781,  1782,   773,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   779,    -1,    -1,    -1,     0,
      -1,   990,    -1,    -1,    -1,    -1,  1492,    -1,    -1,    -1,
      -1,    -1,    -1,  2004,  2005,  2006,  2007,  2008,    -1,  1173,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2018,  2019,  2020,
    2021,  1075,    -1,  1187,  1188,  1189,  1190,    -1,  2029,    -1,
      -1,   825,    -1,    -1,    -1,    -1,    -1,  2038,    -1,  2040,
      -1,  1205,  1206,    -1,    55,    -1,  1210,    -1,  1212,  1029,
      -1,    -1,    -1,    -1,    -1,  1219,    -1,    -1,    -1,    -1,
      -1,    -1,  1226,    -1,    -1,  1229,  1230,  1231,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    95,  1249,    97,    -1,  2089,  2090,
      -1,    -1,  1256,   104,   105,  2096,  2097,  1593,    -1,  2100,
      -1,  2102,    -1,    -1,  2105,    -1,    -1,    -1,  2109,    -1,
    1274,  1275,    -1,    -1,    -1,    -1,    -1,  1281,  1282,   116,
      -1,  1285,  1286,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,    -1,  1132,   145,    -1,  1135,   148,    -1,    -1,
      -1,    -1,  2143,    -1,    -1,  1144,    -1,    -1,    -1,    -1,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2172,  1226,     0,  1173,  1229,    -1,  1499,   189,   190,
     191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1187,  1188,
    1189,  1190,    -1,  1515,    -1,    -1,    -1,    -1,    -1,    -1,
       7,    -1,    -1,    10,    11,    12,    13,    14,    15,    16,
      17,    -1,    -1,    -1,    -1,    -1,    -1,   228,   229,    -1,
      -1,    -1,    -1,    -1,  1021,  1022,  1023,    -1,    55,    -1,
      -1,    -1,  1728,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1039,    -1,    -1,    -1,  1229,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,    -1,    -1,  1427,  1428,    -1,    -1,   278,    95,  1249,
      97,    -1,    -1,    -1,    -1,    -1,  1256,   104,   105,  1443,
     291,    -1,    -1,  1447,   808,   809,   283,   811,    -1,    -1,
     301,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   136,
      -1,    -1,   836,   837,   838,   839,   123,   124,    -1,    -1,
    1816,    -1,   481,   482,    -1,  1489,   133,    -1,  1492,    -1,
      -1,    -1,  1129,    -1,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   341,    -1,  1510,    -1,   507,   508,
      -1,    -1,    -1,  1517,  1518,   879,   880,    -1,  1522,  1523,
    1524,  1525,   189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     529,   530,    -1,    -1,    -1,   534,   535,    -1,    -1,   538,
     539,  1175,    -1,    -1,    -1,  1179,  1440,  1709,  1182,  1711,
    1184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   410,
     411,   412,    -1,  1725,  1726,    -1,    -1,  1571,  1572,    -1,
      -1,    -1,    -1,   240,    -1,   145,    -1,   244,   148,    -1,
      -1,    -1,    -1,   434,    -1,    -1,    -1,    -1,    -1,  1593,
     441,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,  1935,
      -1,   452,    -1,  1607,  1608,    -1,    -1,    -1,    -1,  1613,
    1614,   278,    -1,    -1,    -1,   979,    -1,    -1,    -1,    -1,
      -1,    -1,  1626,    -1,   291,  1629,    -1,    -1,    -1,    -1,
     481,   482,    -1,  1637,   301,   486,   303,  1274,  1275,   490,
      -1,    -1,   493,    -1,  1281,  1282,    -1,    -1,  1285,  1286,
      -1,   502,    -1,    -1,    -1,    -1,   507,   508,    -1,   281,
     282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1672,    -1,
      -1,    -1,    -1,    -1,    -1,   526,    -1,    -1,   529,   530,
      -1,    -1,    -1,   534,   535,    -1,    -1,   538,   539,    -1,
      -1,   542,   543,   544,   545,   546,    -1,    -1,    -1,  1593,
      -1,  1705,    -1,  1707,    -1,    -1,  1710,    -1,    -1,    -1,
      -1,   562,   563,    -1,    -1,    -1,   553,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1728,    -1,    -1,   578,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   410,    -1,    -1,    -1,    -1,    -1,   600,
      -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1934,  1777,  1613,  1614,    -1,    -1,    -1,   616,
      -1,  1943,    -1,    -1,  1623,   452,  1625,  1626,  1792,  1793,
    1629,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1637,    -1,
      -1,  1640,    -1,    -1,    -1,    -1,    -1,  1811,    -1,  1813,
      -1,    -1,  1816,    -1,   651,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1837,    -1,  1839,    -1,    -1,    -1,  2001,
    2002,    -1,    86,    -1,    -1,    -1,   683,   684,   685,   686,
      -1,    -1,  1489,    97,    -1,    -1,    -1,    -1,    -1,   710,
     104,   105,    -1,    -1,    -1,   716,  1230,    -1,  1872,  1873,
      -1,    -1,    -1,    -1,    -1,   542,   543,   544,   545,   546,
      -1,   548,    -1,    -1,   551,    -1,   737,    -1,    -1,    -1,
     741,    -1,    -1,    -1,    -1,   562,   563,   564,    -1,    -1,
      -1,    -1,   146,    -1,    -1,    -1,   743,    -1,    -1,   760,
     747,   481,   482,    -1,   158,    -1,   583,    -1,   162,    -1,
      -1,    -1,  1816,   493,    -1,    -1,    -1,    -1,  1562,  1933,
      -1,  1935,   554,    -1,    -1,   557,    -1,   507,   508,    -1,
      -1,    -1,   779,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   793,    -1,    -1,   529,
     530,    -1,    -1,    -1,   534,   535,    -1,    -1,   538,   539,
    1607,  1608,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   820,    -1,    -1,    -1,    -1,   825,    -1,
      -1,   828,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2004,  2005,  2006,  2007,  2008,  2009,    -1,  2011,   578,    -1,
     580,   848,    -1,    -1,  2018,  2019,  2020,  2021,     0,    -1,
      -1,    -1,    -1,  1862,  1863,  1864,  1865,    -1,    -1,  1868,
     881,    -1,    -1,  1872,  1873,    -1,  1875,   888,  1877,    -1,
      -1,   481,   482,   710,   895,   896,   897,   291,    -1,   716,
    1889,    -1,    -1,   904,    -1,    -1,   907,   301,   909,   303,
      -1,   683,   684,   685,   686,  1064,  1065,   507,   508,  1068,
    1069,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1443,
      -1,    -1,    -1,  1447,    -1,  2089,  2090,    -1,    -1,   529,
     530,   713,    -1,    -1,   534,   535,    -1,   948,   538,   539,
      -1,  1735,    -1,    -1,    86,    -1,   957,    -1,    -1,    -1,
      -1,   962,    -1,  1747,    -1,    97,    -1,   968,  1752,    -1,
      -1,  1755,   104,   105,    -1,    -1,    -1,   978,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   993,    -1,    -1,    -1,  1510,    -1,    -1,    -1,
      -1,    -1,  1003,    -1,    -1,  1792,  1793,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   146,  1529,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   158,    -1,  1029,    -1,
     162,    -1,    -1,    -1,    -1,    -1,    -1,  1821,    -1,    -1,
    2029,    -1,    -1,    -1,    -1,    -1,   440,    -1,  1832,  2038,
      -1,  2040,  1039,    -1,    -1,    -1,    -1,   451,    -1,    -1,
      -1,    -1,    -1,  1064,  1065,    -1,    -1,  1068,  1069,  1070,
      -1,    -1,    -1,    -1,  1075,  1076,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1086,    -1,    -1,     1,    -1,
       3,    -1,   909,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2096,  2097,   503,
      -1,  2100,    -1,  2102,    -1,    28,  2105,    -1,    -1,    -1,
    2109,    -1,    -1,    -1,    37,    38,    39,    40,    -1,    -1,
      -1,   948,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1132,    -1,    -1,  1135,    -1,
      -1,   968,    -1,    -1,  2143,    -1,    -1,  1144,    -1,   291,
      -1,    -1,    75,    76,    -1,    -1,  1950,    80,    -1,   301,
      -1,   303,    -1,    -1,    87,    -1,    -1,    -1,    -1,  1166,
    1167,    -1,    -1,  2172,    -1,    -1,  1173,    -1,  1175,    -1,
      -1,  1705,  1179,    -1,    -1,  1182,  1710,  1184,   111,   112,
    1187,  1188,  1189,  1190,  1205,  1206,    -1,    -1,    -1,   122,
      -1,    -1,   125,    -1,    -1,   128,    -1,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,  1226,    -1,    -1,  1229,  2013,
    1231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1249,    -1,
      -1,    -1,    -1,    -1,    -1,  1256,    -1,    -1,  1075,  1076,
      -1,    -1,    -1,  1777,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   993,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,    -1,    -1,    -1,    -1,
      -1,  1278,    -1,    -1,    -1,    -1,    -1,  2081,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1820,    -1,   440,  2093,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   451,
      -1,    -1,   716,    -1,    -1,    -1,    -1,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    -1,    -1,
      -1,    -1,    -1,    -1,  1064,  1065,    -1,    -1,  1068,  1069,
    1070,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1132,    -1,    -1,  1135,    -1,    -1,    -1,    -1,  1517,  1518,
      -1,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2168,    -1,    -1,    -1,    -1,    -1,
    1207,    -1,  1209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1173,  2186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2198,  1187,  1188,  1189,  1190,  1933,
      -1,    -1,  1571,  1572,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,    -1,    -1,    -1,    -1,  1210,  1440,
    1212,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,  1455,    -1,    28,    -1,   138,   139,
     140,  1462,   142,   143,   144,   145,   146,    -1,  1469,    -1,
      -1,    -1,    -1,    -1,  1064,  1065,    -1,    -1,  1068,  1069,
      -1,    -1,    -1,    -1,    -1,  1205,  1206,    -1,    -1,  1490,
      -1,  1492,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      72,    73,   896,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   907,    86,    -1,  1517,  1518,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,   116,    -1,    -1,  1531,    -1,    -1,   119,    -1,    -1,
      -1,    -1,    -1,   125,    -1,    -1,   554,    -1,    -1,   557,
      -1,    -1,    -1,   135,   136,   140,    -1,    -1,    -1,    -1,
    1571,  1572,    -1,  1574,     1,  1562,    -1,     4,     5,     6,
      -1,     8,     9,    -1,   716,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1593,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   145,    -1,    -1,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,  1613,  1614,    -1,    -1,
      -1,   206,    -1,    -1,    -1,    -1,  1623,    -1,  1625,  1626,
      67,    -1,  1629,    -1,    -1,    72,    73,    74,    -1,    -1,
    1637,    -1,  1469,  1640,    -1,    -1,    -1,    -1,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,   683,   684,   685,   686,    -1,
      -1,    -1,   119,   120,    -1,    -1,    -1,    -1,  1699,    -1,
     127,   128,    -1,   130,   131,   132,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,   713,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1720,    -1,    -1,    -1,    -1,   313,    -1,
      -1,    -1,   317,   318,   319,  1732,    -1,   322,  1735,    -1,
      -1,    -1,    -1,   328,    -1,    -1,    -1,  1574,    -1,   334,
    1747,    -1,    -1,    -1,   896,  1752,   341,    -1,  1755,    -1,
      -1,    -1,    -1,    -1,    -1,   907,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   358,    -1,    -1,    -1,    -1,   363,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1517,  1518,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1811,    -1,  1813,    -1,    -1,  1816,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   400,    -1,   402,    -1,    -1,
      -1,    -1,    -1,    -1,  1821,    -1,  1837,    -1,  1839,    -1,
      -1,  1613,  1614,    -1,    -1,  1832,    -1,    -1,  1849,    -1,
      -1,  1571,  1572,    -1,  1626,  2004,  2005,  1629,  2007,  2008,
      -1,   436,    -1,    -1,    -1,  1637,    -1,    -1,    -1,  2018,
    2019,  2020,  2021,    -1,    -1,  1862,  1863,  1864,  1865,    -1,
      -1,  1868,    -1,    -1,    -1,  1872,  1873,    -1,  1875,    -1,
    1877,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1889,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1899,  1900,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1517,  1518,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   481,   482,
    2089,  2090,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1950,   507,   508,    -1,    -1,    -1,    -1,
      -1,    -1,   547,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,  1571,  1572,    -1,    -1,    -1,   529,   530,    -1,    -1,
      -1,   534,   535,    -1,    -1,   538,   539,    -1,    -1,    -1,
      -1,    -1,    28,  2004,  2005,  2006,  2007,  2008,    -1,   584,
      -1,    37,    38,    39,    40,    -1,    -1,  2018,  2019,  2020,
    2021,    -1,    -1,  1840,    -1,    -1,  2013,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   578,    -1,   580,    -1,    -1,
      -1,   616,  2029,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,  2038,    -1,  2040,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   646,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,    -1,  2089,  2090,
      -1,  1811,    -1,  1813,  2081,    -1,   122,    -1,    -1,   125,
    1872,  1873,   128,    -1,   130,   131,  2093,    -1,    -1,  2096,
    2097,    -1,    -1,  2100,   116,  2102,    -1,  1837,  2105,  1839,
      -1,    -1,  2109,    -1,    -1,    -1,    -1,    -1,    -1,  2116,
      -1,    -1,    -1,    -1,  1132,    -1,    -1,  1135,   140,    -1,
      -1,    -1,   717,    -1,    -1,    -1,    -1,  2134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   743,    -1,
      -1,    -1,   747,    -1,    -1,  1173,    -1,    -1,    -1,    -1,
      -1,  2168,    -1,    -1,    -1,  2172,    -1,    -1,   763,  1187,
    1188,  1189,  1190,    -1,    -1,   770,    -1,    -1,   773,  2186,
      -1,  2188,    -1,    -1,   206,    -1,    -1,    -1,    -1,    -1,
      -1,  2198,  1210,    -1,  1212,    -1,    -1,    -1,   793,    -1,
      -1,    -1,    -1,    -1,   799,   800,   801,   802,   803,   804,
     805,    -1,    -1,   808,   809,    -1,   811,   812,   813,   814,
     815,   816,   817,   818,    -1,   820,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,    -1,   848,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2004,  2005,  2006,  2007,  2008,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2018,  2019,
    2020,  2021,    -1,    -1,   879,   880,    -1,    -1,    -1,    -1,
      -1,   313,    -1,    -1,    -1,   317,   318,   319,    -1,    -1,
     322,    -1,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,
      -1,    -1,   334,    -1,    -1,    -1,    -1,    -1,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,
      -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2089,
    2090,    -1,   947,    -1,   949,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,
     402,    -1,    -1,    -1,   979,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   988,  2004,  2005,    -1,  2007,  2008,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2018,  2019,
    2020,  2021,    -1,    -1,   436,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1021,    -1,  1023,    -1,
     993,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2089,
    2090,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1089,    -1,    -1,    -1,    -1,    -1,
      -1,  1064,  1065,    -1,    -1,  1068,  1069,  1070,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    -1,   547,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1129,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1140,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   135,   136,    -1,    -1,    -1,    -1,    -1,
      -1,  1166,  1167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   358,   616,  1613,  1614,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1626,    -1,
      -1,  1629,    -1,    -1,    -1,    -1,    -1,   189,    -1,  1637,
      -1,    -1,    -1,    -1,   646,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1230,    -1,  1232,    -1,    -1,
     116,    -1,  1205,  1206,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1254,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,    -1,    -1,    -1,  1271,    -1,    -1,    -1,
    1275,    -1,    -1,  1278,    -1,    -1,    -1,  1282,    -1,    -1,
      -1,  1286,    -1,    -1,    -1,   717,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,
      -1,   743,    -1,    -1,    -1,   747,    -1,    -1,    -1,    -1,
     206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   763,    -1,    -1,    -1,    -1,    -1,    -1,   770,    -1,
      -1,   773,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   793,    -1,    -1,    -1,    -1,    -1,   799,   800,   801,
     802,   803,   804,   805,    -1,    -1,   808,   809,    -1,   811,
     812,   813,   814,   815,   816,   817,   818,    -1,   820,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   828,   829,   830,   831,
     832,   833,   834,   835,   836,   837,   838,   839,   840,   841,
     842,   843,   844,   845,   846,    -1,   848,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   410,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1443,    -1,
      -1,    -1,  1447,    -1,  1872,  1873,    -1,   879,   880,    -1,
      -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     452,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   656,    -1,    -1,  1489,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1499,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1510,    -1,    -1,   490,    -1,
    1515,    -1,    -1,    -1,   400,   947,   402,   949,    -1,    -1,
      -1,    -1,    -1,    -1,  1529,    -1,  1531,    -1,    -1,    -1,
      -1,  1536,    -1,  1538,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1517,  1518,    -1,   979,    -1,    -1,
    1555,    -1,    -1,    -1,    -1,    -1,   988,    -1,    -1,    -1,
     542,   543,   544,   545,   546,    -1,   548,    -1,    -1,   551,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     562,   563,   564,    -1,    -1,    -1,    -1,    -1,    -1,  1021,
      -1,  1023,    -1,    -1,    -1,    -1,    -1,    -1,  1571,  1572,
      -1,   583,    -1,  1608,   779,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   812,   813,   814,
     815,   816,    -1,    -1,   819,    -1,    -1,    -1,    -1,    -1,
     825,    -1,    -1,    -1,    -1,    -1,    -1,  1089,    89,    -1,
      -1,   547,    -1,    -1,    -1,   840,   841,   842,   843,   844,
      -1,    -1,   847,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1129,   584,    -1,
    1705,   132,    -1,    -1,  1709,  1710,  1711,    -1,  1140,   140,
      -1,    -1,    -1,    -1,    -1,  1720,    -1,    -1,    -1,    -1,
    1725,  1726,    -1,    -1,    -1,    -1,    -1,  1732,   710,   160,
     616,    -1,    -1,    -1,  1166,  1167,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1753,  1754,
      -1,  1756,  1757,    -1,    -1,    -1,  1761,  1762,  1763,  1764,
     646,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1777,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1793,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1230,    -1,
    1232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1820,    -1,    -1,    -1,    -1,
      -1,    -1,  1254,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1811,  1271,
    1813,    -1,    -1,  1275,    -1,    -1,  1278,    -1,    -1,    -1,
    1282,    -1,    -1,    -1,  1286,    -1,    -1,   743,    -1,    -1,
      -1,   747,    -1,    -1,  1837,    -1,  1839,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   763,    -1,    -1,
      -1,    -1,    -1,    -1,   770,    -1,    -1,   773,    -1,    -1,
      -1,    -1,    -1,    -1,  1899,  1900,    -1,  1902,  1903,  1904,
    1905,  1906,  1907,  1908,  1909,    -1,    -1,   793,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   909,  1933,  1934,
      -1,    -1,    -1,    -1,   820,    -1,    -1,    -1,  1943,    -1,
      -1,    -1,   828,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   848,    -1,   395,    -1,   948,    -1,    -1,    -1,
      -1,    -1,  1147,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   965,    -1,   967,   968,    -1,    -1,    -1,
      -1,    -1,  1997,    -1,    -1,    -1,  2001,  2002,    -1,    -1,
    1175,    -1,    -1,    -1,    -1,   436,   437,  1182,    -1,    -1,
     441,  1443,    -1,    -1,    -1,  1447,    -1,    -1,    -1,   450,
      -1,    -1,   453,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2004,  2005,  2006,  2007,  2008,    -1,    -1,    -1,    -1,
      -1,  1216,    -1,  1218,    -1,  2018,  2019,  2020,  2021,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   487,  1489,    -1,    -1,
      -1,   947,   493,   949,    -1,    -1,    -1,  1499,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1510,    -1,
      -1,    -1,    -1,  1515,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1075,  1076,    -1,    -1,  1529,    -1,  1531,
      -1,    -1,   988,    -1,  1536,    -1,  1538,    -1,    -1,    -1,
      -1,  2116,    -1,    -1,    -1,    -1,  2089,  2090,    -1,    -1,
      -1,    -1,    -1,  1555,    -1,    -1,    -1,    -1,    55,  2134,
      -1,    -1,    -1,    -1,    -1,  1021,    -1,  1023,    -1,    -1,
      -1,    -1,   573,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   583,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   603,    -1,    -1,   606,  1608,   608,    -1,   610,
      -1,    -1,    -1,  2188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1089,    -1,    -1,    -1,   651,   135,   136,
      -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1207,    -1,  1209,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   685,   686,  1129,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    -1,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,  1705,    -1,    -1,    -1,  1709,  1710,  1711,
    1166,  1167,    -1,    -1,    -1,    -1,    -1,    -1,  1720,    -1,
      -1,    -1,    -1,  1725,  1726,    -1,    -1,    -1,    -1,    86,
    1732,    -1,   229,    -1,    -1,    -1,    -1,    -1,    -1,    96,
      97,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,    -1,
     136,  1753,  1754,    -1,  1756,  1757,    -1,    -1,    -1,  1761,
    1762,  1763,  1764,    -1,    -1,   122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1777,  1232,    -1,    -1,    -1,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
      -1,  1793,    -1,    -1,   291,    -1,    -1,    -1,  1254,    -1,
      -1,   158,    -1,   189,   301,   162,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1820,  1275,
      -1,    -1,  1278,    -1,    -1,    -1,  1282,    -1,    -1,    -1,
    1286,    -1,    -1,    -1,    -1,   192,   193,    -1,    -1,    -1,
      -1,    -1,    -1,   229,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   856,   857,   858,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   229,    -1,    -1,    -1,    -1,    -1,   879,   880,
     881,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1899,  1900,    -1,
    1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,    -1,    -1,
      -1,    -1,    -1,   410,    -1,   301,    -1,  1469,    -1,   416,
      -1,   278,    -1,    -1,   281,   282,   283,    -1,    -1,    -1,
      -1,  1933,  1934,    -1,   291,    -1,    -1,    -1,    -1,    -1,
      -1,  1943,    -1,    -1,   301,   302,   303,    -1,    -1,    -1,
      -1,    -1,    -1,   954,    -1,   452,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   321,    -1,    -1,    -1,    -1,    -1,
     327,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   979,    -1,
      -1,   338,    -1,    -1,    -1,   986,   987,    -1,    -1,   486,
      -1,    -1,    -1,    -1,    -1,  1997,    -1,    -1,   999,  2001,
    2002,    -1,  1747,    -1,    -1,    -1,    -1,  1752,  1753,  1754,
    1755,  1756,  1757,    -1,    -1,    -1,  1761,  1762,  1763,  1764,
      -1,    -1,  1574,    -1,   410,    -1,    -1,    -1,    -1,    -1,
     416,    -1,    -1,  1489,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1499,    -1,   542,   543,   544,   545,   546,
      -1,   548,    -1,    -1,   551,    -1,    -1,    -1,    -1,  1515,
      -1,    -1,    -1,    -1,    -1,   562,   563,   564,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1531,    -1,   434,    -1,    -1,
    1536,    -1,  1538,   440,    -1,    -1,   583,  1088,   585,    -1,
      -1,    -1,  1093,    -1,   451,    -1,    -1,    -1,  1099,  1555,
     486,   598,    -1,    -1,  1105,    -1,    -1,    -1,    -1,    -1,
    1111,    -1,    -1,    -1,  2116,    -1,    -1,    -1,  1132,    -1,
      -1,  1135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,
    1144,    -1,  2134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,    -1,
      -1,    -1,  1608,    -1,    -1,    -1,    -1,    -1,    -1,  1173,
      -1,    -1,   548,    -1,    -1,   551,    -1,    -1,    -1,   526,
      -1,    -1,    -1,  1187,  1188,  1189,  1190,    -1,   564,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2188,    -1,    -1,    -1,
     547,    -1,    -1,    -1,    -1,    -1,    -1,   554,    -1,   585,
     557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,   598,   710,    -1,    -1,    -1,    -1,    -1,   716,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1230,
    1231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1709,    -1,  1711,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1720,    54,    55,    -1,    -1,  1725,
    1726,    -1,    -1,    -1,    -1,    -1,  1732,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1840,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,
      -1,   658,    91,    -1,    -1,    -1,    -1,    -1,    97,    -1,
      -1,    -1,    -1,    -1,    -1,   104,   105,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   710,    -1,   683,   684,   685,   686,
     716,    -1,    -1,   122,    -1,    -1,    -1,  1793,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   711,   712,   713,    -1,    -1,   716,
      -1,    -1,    -1,    -1,    -1,   722,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   730,    -1,    -1,    -1,    -1,    -1,    -1,
     737,   738,   739,    -1,   741,   742,    -1,    -1,    -1,    -1,
      -1,   748,    -1,    -1,   751,    -1,    -1,    -1,    -1,   188,
     897,    -1,    -1,   760,    -1,    -1,   763,   904,    -1,    -1,
      -1,    -1,   909,   770,   203,    -1,   773,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,  1427,  1428,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     229,    -1,  1443,  1899,  1900,    -1,  1447,    -1,    -1,    -1,
      -1,   948,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     957,    -1,    -1,    -1,    -1,   962,    -1,    -1,    -1,    -1,
      -1,   968,    -1,    -1,    -1,    -1,    -1,    -1,  1934,    -1,
     338,   978,    -1,    -1,    -1,    -1,    -1,  1943,    -1,   278,
      -1,    -1,    -1,    -1,    -1,    -1,   853,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,    -1,  1510,
      -1,   897,   301,    -1,   303,    -1,    -1,    -1,   904,    -1,
      -1,  1522,  1523,  1524,  1525,    -1,    -1,    -1,    -1,    -1,
      -1,   888,  1029,    -1,    -1,    -1,    -1,    -1,    -1,   896,
     897,    -1,    -1,    -1,    -1,  2001,  2002,   904,    -1,    -1,
     907,   908,   909,    -1,   911,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   957,    -1,    -1,    -1,    -1,   962,    -1,  1075,  1076,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1085,    -1,
    1087,    -1,   978,    -1,   452,    -1,    -1,    -1,    -1,  1613,
    1614,    -1,    -1,    -1,    -1,   962,    -1,    -1,    -1,  1623,
      -1,  1625,  1626,    -1,    -1,  1629,    -1,    -1,    -1,    -1,
      -1,   978,    -1,  1637,    -1,    -1,  1640,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1029,    -1,   434,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2116,    -1,    -1,   452,  1021,  1022,  1023,    -1,    -1,    -1,
      -1,  1672,  1029,    -1,    -1,    -1,    -1,    -1,  2134,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1076,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,  1085,
     489,  1087,    -1,    -1,  1705,    -1,  1707,    -1,    -1,  1710,
    1207,    -1,  1209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2188,    -1,    -1,    -1,    -1,   526,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   542,   543,   544,   545,   546,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1129,   562,   563,  1132,  1777,    -1,  1135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1148,    -1,    -1,   583,    -1,   585,    -1,   656,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
      -1,    -1,    -1,    -1,   672,    -1,  1173,    -1,    -1,    -1,
      -1,  1207,    -1,  1209,    -1,   683,   684,   685,   686,    -1,
    1187,  1188,  1189,  1190,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   634,    -1,    -1,  1862,  1863,
    1864,  1865,    -1,  1210,  1868,  1212,    -1,    -1,  1872,  1873,
      -1,  1875,    -1,  1877,   722,    -1,    -1,   725,    -1,  1226,
      -1,    -1,  1229,    -1,    -1,  1889,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     748,    -1,  1249,    -1,    -1,    -1,   754,    -1,    -1,  1256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1274,  1275,    -1,
     709,    -1,    -1,   781,  1281,  1282,    -1,   716,  1285,  1286,
      -1,    -1,  1933,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   737,    -1,
      -1,    -1,   741,    -1,    -1,    -1,    -1,    -1,  1455,    -1,
      -1,   819,    -1,    -1,    -1,  1462,    -1,    -1,    -1,   827,
      -1,   760,  1469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   847,
      -1,    -1,    -1,  1490,    -1,  1492,    -1,    -1,  1495,    -1,
      -1,  1498,    -1,    -1,    -1,    -1,    -1,    -1,  2009,    -1,
    2011,    -1,    -1,    -1,    -1,  2029,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2038,    -1,  2040,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   909,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1455,
      -1,    -1,    -1,    -1,    -1,    -1,  1462,  1574,    -1,    -1,
      -1,    -1,  2096,  2097,    -1,  1582,  2100,    -1,  2102,    -1,
      -1,  2105,   881,   882,    -1,  2109,  1593,    -1,    -1,   888,
      -1,    -1,    -1,    -1,  1490,    -1,  1492,   896,   897,  1495,
      -1,    -1,  1498,    -1,    -1,   904,    -1,    -1,   907,   908,
     909,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2143,
      -1,    -1,  1489,    -1,    -1,  1492,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2172,   948,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   956,    -1,    -1,
      -1,    -1,    -1,   962,    -1,    -1,    -1,    -1,    -1,   968,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1574,   978,
      -1,    -1,    -1,    -1,    -1,    -1,  1582,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1593,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1593,    -1,    -1,    -1,
    1029,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1607,  1608,    -1,    -1,    -1,    -1,  1613,  1614,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1626,
      -1,    -1,  1629,    -1,  1132,    -1,    -1,  1135,  1136,  1137,
    1637,  1139,    -1,    -1,  1781,  1782,  1075,  1784,    -1,  1147,
      -1,    -1,    -1,    -1,    -1,  1084,    -1,  1155,    -1,    -1,
      -1,    -1,    -1,    -1,  1162,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1173,    -1,    -1,    -1,    -1,
     192,   193,  1180,    -1,    -1,    -1,    -1,  1185,    -1,  1187,
    1188,  1189,  1190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1840,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,  1216,    -1,
    1218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1728,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1250,    -1,    -1,  1781,  1782,    -1,  1784,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,   281,
     282,   283,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
     302,    -1,    -1,    -1,    -1,  1792,  1793,  1226,  1296,    -1,
    1229,    -1,  1231,    -1,    -1,    -1,    -1,    -1,    28,   321,
    1239,    -1,    -1,    96,  1840,   327,    -1,    37,    -1,  1816,
    1249,    -1,    -1,    -1,    -1,    -1,   338,  1256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    1348,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,  1361,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1872,  1873,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,    -1,   122,    -1,    -1,   125,   126,   127,    -1,   192,
     193,    -1,    -1,    -1,  1412,   135,   136,    -1,   138,   139,
     140,   141,   434,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1935,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   229,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,   281,   282,
     283,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1440,    -1,    -1,   526,    -1,    -1,    -1,    -1,   302,
      -1,    -1,    -1,    -1,    -1,  1454,    -1,    -1,    -1,    -1,
      -1,    -1,  1461,    -1,    -1,   547,    -1,    -1,   321,    -1,
    1469,    -1,   554,    -1,   327,   557,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   338,    -1,     3,    -1,    -1,
      -1,  1490,    -1,  1492,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1613,  1614,    -1,    -1,    -1,
      -1,  1619,    68,  1621,    -1,    -1,  1624,  1625,    -1,    75,
      76,    -1,  1630,  1631,    80,  1633,    -1,    83,    84,    -1,
      86,    87,    88,    -1,  1573,  1643,    -1,  1645,    -1,    -1,
      -1,   434,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1593,   111,   112,   113,   114,   115,
     116,   683,   684,   685,   686,    -1,    -1,    -1,    -1,  1677,
      -1,    -1,    -1,  1681,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,   711,
     712,   713,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,
     722,    28,    -1,    -1,    -1,    -1,    -1,    -1,   730,    -1,
      -1,    -1,    -1,    -1,    -1,   737,   738,   739,    -1,   741,
     742,    -1,    -1,    -1,    -1,    -1,   748,    -1,    -1,   751,
      -1,    -1,    -1,   526,    -1,    -1,    -1,    -1,   760,    -1,
      67,   763,    -1,    -1,    -1,    72,    73,    74,   770,    -1,
      -1,   773,    -1,    -1,   547,    -1,    -1,    -1,    85,    86,
    1699,   554,    -1,    -1,   557,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,   338,   135,   136,
     137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   853,    -1,    -1,  1773,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1850,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1795,    -1,    -1,    -1,
    1868,  1869,    -1,    -1,    -1,    -1,   888,    -1,  1876,    -1,
      -1,    -1,  1880,    -1,  1882,   897,    -1,  1816,    -1,    -1,
      -1,    -1,   904,  1891,    -1,    -1,    -1,   909,    -1,   911,
     683,   684,   685,   686,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   711,   712,
     713,   452,    -1,    -1,    -1,    -1,    -1,  1935,    -1,   722,
      -1,    -1,    -1,   206,    -1,    -1,    -1,   730,    -1,    -1,
     962,    -1,    -1,    -1,   737,   738,   739,    -1,   741,   742,
      -1,    -1,    -1,    -1,    -1,   748,   978,    -1,   751,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   760,    -1,    -1,
     763,    -1,    -1,    -1,    -1,    -1,  1915,   770,    -1,    -1,
     773,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1021,
    1022,  1023,    -1,    -1,    -1,    -1,    -1,  1029,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2030,  2031,    -1,  2033,    -1,  2035,    -1,    -1,
    2038,  2039,  2040,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     313,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   322,
      -1,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,
     853,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2098,    -1,    -1,  2101,    -1,   888,    -1,    -1,    -1,    -1,
      -1,  2109,    -1,    -1,   897,    -1,    -1,  1129,    -1,    -1,
    1132,   904,    -1,  1135,    -1,    -1,   909,    -1,   911,    -1,
      -1,    -1,    -1,    -1,    -1,   656,    -1,   400,    -1,   402,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2146,    -1,
      -1,   672,    -1,    -1,    -1,   676,    -1,    -1,    -1,    -1,
      -1,  1173,    55,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    -1,    -1,  1187,  1188,  1189,  1190,   962,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,   978,    -1,    -1,  1210,    -1,
    1212,   722,    -1,    -1,   725,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1226,    -1,    -1,  1229,   739,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   748,    -1,    -1,
      -1,    -1,    -1,   754,   755,    -1,    -1,  1249,  1021,  1022,
    1023,    -1,   135,   136,  1256,    -1,  1029,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
     781,    -1,  1274,  1275,    -1,    -1,    -1,    -1,    -1,  1281,
    1282,    -1,    -1,  1285,  1286,   168,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   547,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,   819,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   827,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   584,    -1,    -1,    -1,    -1,   847,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   228,   229,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1129,    -1,    -1,  1132,
      -1,    -1,  1135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   646,    -1,   278,    -1,    -1,   909,    -1,
    1173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,
      -1,    -1,    -1,    -1,  1187,  1188,  1189,  1190,   301,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1210,    -1,  1212,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1226,    -1,    -1,  1229,    -1,     1,    -1,
       3,     4,     5,     6,   717,     8,     9,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1249,    -1,    -1,    -1,
      -1,    -1,    -1,  1256,   358,    28,    -1,  1489,    -1,    -1,
    1492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1274,  1275,    -1,    -1,    -1,    -1,    -1,  1281,  1282,
     763,    -1,  1285,  1286,    -1,    -1,    -1,   770,    -1,    -1,
     773,    -1,    -1,    -1,    67,    -1,    -1,   410,    -1,    72,
      73,    74,    -1,   416,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,   452,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,
      -1,  1593,   135,   136,   137,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,   486,    -1,  1607,  1608,    -1,    -1,    -1,
      -1,  1613,  1614,    -1,    -1,    -1,    -1,    -1,    -1,   502,
      -1,    -1,    -1,    -1,  1626,  1136,  1137,  1629,  1139,    -1,
      -1,    -1,    -1,    -1,    -1,  1637,  1147,    -1,    -1,  1150,
      -1,    -1,    -1,    -1,  1155,    -1,    -1,    -1,    -1,    -1,
      -1,  1162,  1163,    -1,    -1,    -1,    -1,    -1,    -1,   542,
     543,   544,   545,   546,    -1,   548,    -1,    -1,   551,  1180,
    1181,    -1,    -1,    -1,  1185,    -1,    -1,    -1,    -1,   562,
     563,   564,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   947,    -1,   949,    -1,   581,    -1,
     583,    -1,   585,    -1,    -1,  1216,    -1,  1218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   598,  1489,    -1,    -1,  1492,
      -1,    -1,    -1,    -1,    -1,    -1,  1728,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   988,    -1,    -1,    -1,  1250,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1021,    -1,
    1023,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,   656,     8,     9,  1296,  1297,    -1,    -1,    -1,
    1792,  1793,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1816,    -1,    -1,    -1,    -1,   702,
    1593,    -1,    -1,    -1,    -1,    -1,    -1,   710,    -1,    -1,
      -1,    -1,    -1,   716,  1607,  1608,  1089,  1348,    -1,  1350,
    1613,  1614,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
    1361,  1362,    -1,  1626,    -1,    -1,  1629,    -1,    -1,    -1,
      85,    86,    -1,    -1,  1637,    -1,    -1,    -1,    -1,    -1,
    1872,  1873,    -1,    -1,    99,    -1,  1129,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,  1140,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,  1412,   127,  1414,    -1,   779,    -1,   132,    -1,    -1,
     135,   136,   137,   138,   139,   140,   141,    -1,    -1,   793,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1935,    -1,    -1,    -1,    -1,   812,   813,
     814,   815,   816,    -1,    -1,   819,   820,    -1,    -1,    -1,
      -1,   825,    -1,    -1,   828,  1728,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   840,   841,   842,   843,
     844,    -1,    -1,   847,   848,    -1,    -1,    -1,    -1,  1232,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1254,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   895,    -1,   897,    -1,    -1,    -1,    -1,  1792,
    1793,   904,  1275,    -1,    -1,    -1,   909,    -1,    -1,  1282,
      -1,    -1,    -1,  1286,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1816,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   948,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   957,    -1,    -1,    -1,    -1,   962,
      -1,    -1,    -1,    -1,    -1,   968,    -1,    -1,  1599,    -1,
      -1,    -1,    -1,    -1,    -1,   978,    -1,    -1,    -1,  1872,
    1873,    -1,    -1,    -1,    -1,   146,    -1,    -1,  1619,  1620,
    1621,  1622,    -1,  1624,  1625,    -1,    -1,   158,    -1,  1630,
    1631,   162,  1633,    -1,  1635,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1643,  1644,  1645,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1029,    -1,    -1,    -1,
      -1,   192,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1935,    -1,    -1,    -1,  1677,    -1,  1679,    -1,
    1681,    -1,  1683,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,    -1,
      -1,    -1,  1075,  1076,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1085,    -1,  1087,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1489,   278,    -1,    -1,
     281,   282,   283,    -1,    -1,    -1,  1499,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,  1515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1147,    -1,    -1,   146,    -1,    -1,    -1,
     321,    -1,    -1,  1536,    -1,  1538,   327,    -1,   158,    -1,
      -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1175,  1555,    -1,    -1,    -1,    -1,    -1,  1182,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   192,   193,  1207,    -1,  1209,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1850,
      -1,    -1,  1216,    -1,  1218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1608,    -1,    -1,  1869,    -1,
      -1,    -1,    -1,  1874,    -1,  1876,  1877,    -1,  1879,  1880,
      -1,  1882,    -1,  1884,    -1,    -1,    -1,    -1,    -1,  1890,
    1891,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   434,    -1,    -1,    -1,    -1,    -1,   440,
      -1,    -1,    -1,    -1,  1278,    -1,    -1,    -1,   278,    -1,
     451,   281,   282,   283,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1935,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,
      -1,   321,    -1,    -1,    -1,    -1,  1709,   327,  1711,    -1,
      -1,    -1,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1725,  1726,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   526,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1753,  1754,    -1,  1756,  1757,    -1,   547,    -1,  1761,  1762,
    1763,  1764,    -1,   554,    -1,    -1,   557,    -1,    -1,  2030,
    2031,    -1,  2033,  2034,  2035,    -1,    -1,    -1,  2039,  2040,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1793,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     440,    -1,  1455,    -1,    -1,    -1,    -1,    -1,    -1,  1462,
      -1,   451,    -1,    -1,    -1,    -1,  1469,  2098,  2099,    -1,
    2101,  2102,    -1,    -1,    -1,  2106,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1490,    -1,  1492,
      -1,    -1,  1495,    -1,    -1,  1498,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   503,    -1,  2146,    -1,    -1,    -1,    -1,
      -1,    -1,   683,   684,   685,   686,    -1,    -1,    -1,  1902,
    1903,  1904,  1905,  1906,  1907,  1908,  1909,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     711,   712,   713,    -1,    -1,    -1,    -1,   547,    -1,    -1,
      -1,  1934,    -1,    -1,   554,    -1,    -1,   557,    -1,   730,
    1943,  1574,    -1,    -1,    -1,    -1,   737,   738,    -1,  1582,
     741,   742,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1593,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   763,    -1,    -1,    -1,    -1,    -1,    -1,   770,
      -1,    -1,   773,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1997,    -1,    -1,    -1,  2001,  2002,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   853,   683,   684,   685,   686,    -1,   146,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     158,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,
      -1,   711,   712,   713,    -1,    -1,    -1,   888,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   896,   897,    -1,    -1,    -1,
     730,    -1,    -1,   904,   192,   193,   907,   737,   738,    -1,
     911,   741,   742,  1747,    -1,    -1,    -1,    -1,  1752,  1753,
    1754,  1755,  1756,  1757,    -1,    -1,    -1,  1761,  1762,  1763,
    1764,    -1,    -1,   763,    -1,    -1,    -1,    -1,  1781,  1782,
     770,  1784,    -1,   773,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   962,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   978,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     278,    -1,    -1,   281,   282,   283,    -1,  1840,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,
    1021,  1022,  1023,    -1,    -1,    -1,    -1,    -1,  1029,    -1,
      -1,    -1,    -1,   321,    -1,    -1,    -1,    -1,    -1,   327,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   896,    -1,  1902,  1903,
    1904,  1905,  1906,  1907,  1908,  1909,    -1,   907,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,  1129,    -1,
      -1,  1132,    -1,    -1,  1135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   451,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,  1173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    -1,    -1,  1187,  1188,  1189,  1190,
      -1,  1021,  1022,  1023,    -1,    -1,    99,    -1,    -1,  1029,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,  1210,
      -1,  1212,    -1,    -1,    -1,   503,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,   128,   129,   130,  1229,    -1,
     133,    -1,   135,   136,    -1,   138,   139,   140,   141,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,  1249,    -1,
      -1,    -1,    -1,    -1,    -1,  1256,    -1,    -1,    -1,   547,
      -1,    -1,    -1,    -1,    -1,    -1,   554,    -1,    -1,   557,
      -1,    -1,    -1,  1274,  1275,    -1,    -1,    -1,    -1,    -1,
    1281,  1282,    -1,    -1,  1285,  1286,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1129,
      -1,    -1,  1132,    -1,    -1,  1135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1173,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1187,  1188,  1189,
    1190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1210,    -1,  1212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   683,   684,   685,   686,  1229,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1249,
      -1,    -1,    -1,   711,   712,   713,  1256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   730,    -1,  1274,  1275,    -1,    -1,    -1,   737,
     738,  1281,  1282,   741,   742,  1285,  1286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   763,    -1,    -1,    -1,    -1,
      -1,    -1,   770,    -1,    -1,   773,    -1,    -1,  1489,    -1,
      -1,  1492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1593,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1607,  1608,   896,    -1,
      -1,    67,  1613,  1614,    -1,    -1,    72,    73,    74,   907,
      -1,    -1,    -1,    -1,    -1,  1626,    -1,    -1,  1629,    85,
      86,    -1,    -1,    -1,    -1,    -1,  1637,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,  1489,
      -1,    -1,    -1,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,    -1,   129,   130,    -1,    -1,   133,    -1,   135,
     136,    -1,   138,   139,   140,   141,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1021,  1022,  1023,    -1,    -1,    -1,    -1,
      -1,  1029,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1607,  1608,    -1,
      -1,    -1,    28,  1613,  1614,    -1,    -1,    -1,    -1,    -1,
      -1,  1792,  1793,    -1,    -1,    -1,  1626,    -1,    -1,  1629,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1637,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1816,    -1,    -1,    -1,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,
      86,  1129,    -1,    -1,  1132,    -1,    -1,  1135,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,  1872,  1873,   119,   120,    -1,   122,    -1,    -1,   125,
     126,   127,    -1,    -1,   130,  1173,    -1,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,  1187,
    1188,  1189,  1190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1210,    -1,  1212,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1249,  1792,  1793,    -1,    -1,    -1,    -1,  1256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1274,  1275,    -1,    -1,
      -1,    -1,    -1,  1281,  1282,    -1,    -1,  1285,  1286,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1872,  1873,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,  1489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,  1607,
    1608,    -1,    -1,    -1,    -1,  1613,  1614,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1626,    -1,
      -1,  1629,    -1,    -1,    -1,    -1,    -1,     0,     1,  1637,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1792,  1793,    -1,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,  1872,  1873,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
     143,   144,   145,   146,     1,    -1,    -1,    -1,    -1,    -1,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,   133,    -1,    -1,   136,
      -1,   138,   139,   140,    -1,   142,   143,   144,   145,   146,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,   131,   132,   133,   134,   135,   136,    -1,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,    -1,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,    -1,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,    -1,    -1,   125,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,    -1,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,   125,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,    -1,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,    -1,    -1,   125,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,    -1,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,    -1,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,    -1,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,    -1,
      -1,   125,    -1,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,    -1,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,    -1,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,    -1,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,    -1,
      -1,   125,    -1,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,    -1,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,    -1,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,    -1,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,    -1,
      -1,   125,    -1,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,    -1,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,    -1,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,    -1,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,    -1,
      -1,   125,    -1,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,    -1,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,    -1,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,    -1,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,    -1,
      -1,   125,    -1,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,    -1,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,    -1,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,    -1,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,    -1,
      -1,   125,   126,   127,   128,    -1,   130,   131,   132,    -1,
      -1,   135,   136,    -1,   138,   139,   140,   141,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
      -1,    -1,   125,    -1,   127,   128,    -1,    -1,    -1,   132,
      -1,   134,   135,   136,    -1,   138,   139,   140,   141,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,    -1,    -1,
     132,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,   130,
     131,   132,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,   132,    -1,    -1,   135,   136,    -1,   138,   139,
     140,   141,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,
      -1,   130,   131,   132,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,   130,   131,   132,    -1,    -1,   135,   136,    -1,
     138,   139,   140,   141,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,   122,    -1,    -1,   125,    -1,
     127,   128,    -1,   130,   131,   132,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,   130,   131,   132,    -1,    -1,   135,
     136,    -1,   138,   139,   140,   141,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,   122,    -1,    -1,
     125,    -1,   127,   128,    -1,   130,   131,   132,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,   122,    -1,
      -1,   125,    -1,   127,   128,    -1,   130,   131,   132,    -1,
      -1,   135,   136,    -1,   138,   139,   140,   141,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
      -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,   132,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,   130,   131,
     132,    -1,    -1,   135,   136,    -1,   138,   139,   140,   141,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,   130,
     131,   132,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
     130,   131,   132,    -1,    -1,   135,   136,    -1,   138,   139,
     140,   141,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,
      -1,   130,   131,   132,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,   122,    -1,    -1,   125,     1,   127,
       3,     4,     5,     6,    -1,     8,     9,   135,   136,    -1,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
      -1,    -1,   125,     1,   127,     3,     4,     5,     6,    -1,
       8,     9,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
      -1,   119,   120,    -1,   122,    -1,    -1,   125,   126,   127,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   136,    -1,
     138,   139,   140,   141,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,   126,
     127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,
       1,   127,     3,     4,     5,     6,   132,     8,     9,   135,
     136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    99,    -1,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    28,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,   126,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    89,    90,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,
     122,    -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,
     132,    -1,   134,   135,   136,    -1,   138,   139,   140,   141,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    89,    90,
      91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,   126,   127,   128,    -1,   130,
      -1,   132,    -1,   134,   135,   136,    -1,   138,   139,   140,
     141,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    89,
      90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
      -1,    -1,   132,    -1,   134,   135,   136,    -1,   138,   139,
     140,   141,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,
      -1,    -1,    -1,   132,    -1,   134,   135,   136,    -1,   138,
     139,   140,   141,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,    -1,    -1,   132,    -1,   134,   135,   136,    -1,
     138,   139,   140,   141,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,   134,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,   126,   127,   128,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,   126,   127,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,
      -1,   134,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,   126,
     127,   128,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,   126,   127,   128,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,    -1,   127,    -1,    -1,   130,   131,   132,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,    -1,
      -1,   130,   131,   132,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,   126,   127,   128,    -1,   130,    -1,    -1,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,   126,
     127,   128,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,    -1,   127,    -1,    -1,   130,
     131,   132,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,    -1,   127,   128,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,   126,   127,    -1,
      -1,    -1,    -1,   132,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,   126,   127,    -1,    -1,    -1,    -1,   132,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,    -1,
     127,   128,    -1,    -1,    -1,   132,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,   126,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,   128,
      -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,    -1,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
     137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,    -1,   127,    -1,    -1,   130,
      -1,    -1,    -1,   134,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,    -1,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,   137,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,   126,   127,   128,
      -1,    -1,    -1,    -1,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,    -1,   127,   128,    -1,   130,    -1,    -1,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,   126,
     127,   128,    -1,    -1,    -1,    -1,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,    -1,   127,    -1,    -1,   130,
      -1,    -1,    -1,   134,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,    -1,   127,    -1,    -1,   130,    -1,    -1,    -1,   134,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,   126,   127,    -1,
      -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,   126,   127,   128,    -1,    -1,
      -1,    -1,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,    -1,
      -1,    -1,   131,   132,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,    -1,   127,    -1,    -1,    -1,   131,   132,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,    -1,
      -1,    -1,   131,   132,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,    -1,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   135,   136,   137,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,    -1,
     127,    -1,    -1,    -1,    -1,   132,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,    -1,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,   136,   137,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,    -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     135,   136,   137,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,    -1,
      -1,    -1,    -1,   132,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,    -1,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   135,   136,   137,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,    -1,
     127,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,   126,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   135,   136,   137,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,   126,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,    -1,
     127,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,    -1,   127,    -1,    -1,    -1,
      -1,   132,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,    -1,
      -1,    -1,    -1,   132,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,    -1,   127,    -1,    -1,    -1,    -1,   132,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,    -1,
     127,    -1,    -1,    -1,    -1,   132,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,   126,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,   126,   127,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,   126,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,   125,    -1,
     127,    -1,    -1,    -1,    -1,   132,    -1,    -1,   135,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,   125,    -1,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
     125,    -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     135,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,   125,    -1,   127,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   135,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,   125,    -1,   127,     0,     1,    -1,     3,     4,
       5,    -1,   135,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,   131,    -1,    -1,    -1,
     135,   136,     0,     1,    -1,     3,     4,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,   130,   131,    -1,    -1,    -1,   135,   136,     0,
       1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,   125,    -1,   127,   128,     0,     1,
     131,     3,     4,     5,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,     0,     1,   131,
       3,     4,     5,   135,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,   125,    -1,   127,   128,     0,     1,   131,     3,
       4,     5,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,   125,    -1,   127,   128,    -1,     1,   131,     3,     4,
       5,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
     125,    -1,   127,   128,    -1,     1,   131,     3,     4,     5,
     135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,     1,   131,     3,     4,     5,   135,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,   125,    -1,
     127,   128,    -1,     1,   131,     3,     4,     5,   135,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,     1,   131,     3,     4,     5,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,   125,    -1,   127,   128,
      -1,     1,   131,     3,     4,     5,   135,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
       1,   131,     3,     4,     5,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,     1,
     131,     3,     4,     5,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,     1,   131,
       3,     4,     5,   135,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,   125,    -1,   127,   128,    -1,     1,   131,     3,
       4,     5,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,   125,    -1,   127,   128,    -1,     1,   131,     3,     4,
       5,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
     125,    -1,   127,   128,    -1,     1,   131,     3,     4,     5,
     135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,     1,   131,     3,     4,     5,   135,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,   125,    -1,
     127,   128,    -1,     1,   131,     3,     4,     5,   135,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,     1,   131,     3,     4,     5,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,   125,    -1,   127,   128,
      -1,     1,   131,     3,     4,     5,   135,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
       1,   131,     3,     4,     5,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,     1,
     131,     3,     4,     5,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,     1,   131,
       3,     4,     5,   135,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,   125,    -1,   127,   128,    -1,     1,   131,     3,
       4,     5,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,   125,    -1,   127,   128,    -1,     1,   131,     3,     4,
       5,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
     125,    -1,   127,   128,    -1,     1,   131,     3,     4,     5,
     135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,     1,   131,     3,     4,     5,   135,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,   125,    -1,
     127,   128,    -1,     1,   131,     3,     4,     5,   135,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,     1,   131,     3,     4,     5,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,   125,    -1,   127,   128,
      -1,     1,   131,     3,     4,     5,   135,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
       1,   131,     3,     4,     5,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,     1,
     131,     3,     4,     5,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,     1,   131,
       3,     4,     5,   135,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,   125,    -1,   127,   128,    -1,     1,   131,     3,
       4,     5,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,   125,    -1,   127,   128,    -1,     1,   131,     3,     4,
       5,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
     125,    -1,   127,   128,    -1,     1,   131,     3,     4,     5,
     135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,    -1,    -1,   125,
      -1,   127,   128,    -1,     1,   131,     3,     4,     5,   135,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,   125,    -1,
     127,   128,    -1,     1,   131,     3,     4,     5,   135,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,   125,    -1,   127,
     128,    -1,     1,   131,     3,     4,     5,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,   125,    -1,   127,   128,
      -1,     1,   131,     3,     4,     5,   135,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,
       1,   131,     3,     4,     5,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,   125,    -1,   127,   128,    -1,     1,
     131,     3,     4,     5,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,   125,    -1,   127,   128,    -1,     1,   131,
       3,     4,     5,   135,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,   125,    -1,   127,   128,     1,    -1,     3,     4,
       5,    -1,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,     1,   122,     3,    -1,
     125,    -1,   127,   128,    -1,    -1,    -1,    -1,    -1,    -1,
     135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,     3,    -1,    -1,   122,    -1,    -1,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
       3,    -1,    -1,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,   138,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,     3,    -1,    -1,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,     3,    -1,    -1,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    -1,   132,    -1,    -1,    -1,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,     3,    -1,
      -1,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
      -1,   132,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,     3,    -1,    -1,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
       3,    -1,    -1,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,     3,    -1,    -1,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   136,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,     3,    -1,    -1,    -1,    -1,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,
       3,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    79,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,   122,
      -1,    -1,   125,    -1,   127,    -1,    -1,    -1,    -1,    -1,
      -1,   134,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     132,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,     1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   128,    -1,   130,   131,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
       1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     131,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,     0,     1,    -1,
       3,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    78,    -1,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,
      -1,     3,    -1,   106,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,   122,
      -1,    -1,   125,    -1,    -1,   128,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,     3,   108,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,     3,
     108,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   131,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,     1,    -1,     3,   108,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,   122,    -1,    -1,   125,    -1,    -1,   128,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,   122,    -1,    -1,   125,    -1,    -1,   128,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,   122,    -1,    -1,   125,    -1,    -1,
     128,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,   122,    -1,    -1,   125,    -1,
      -1,   128,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,   102,    -1,     0,     1,
     106,     3,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,   122,    -1,    -1,   125,
      -1,    -1,   128,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   101,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
     122,    -1,    -1,   125,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   101,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,   122,
      -1,    -1,   125,   126,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,   101,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,   101,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,   122,    -1,    -1,   125,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
     101,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,   122,    -1,    -1,   125,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,   125,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,   122,
      -1,    -1,   125,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,   122,    -1,
      -1,   125,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,   122,    -1,    -1,
     125,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,   122,    -1,    -1,   125,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    55,    67,    68,
      75,    76,    77,    78,    80,    81,    82,    83,    84,    86,
      87,    88,   101,   102,   106,   111,   112,   113,   114,   115,
     116,   117,   118,   121,   122,   125,   128,   148,   149,   150,
     152,   177,   214,   215,   216,   217,   218,   219,   271,   274,
     275,   278,   279,   280,   281,   282,   283,   284,   286,   290,
     293,   294,   295,   296,   297,   298,   303,   304,   313,   314,
     315,   322,   323,   327,   328,   331,   336,   366,   369,   370,
     388,   389,   391,   392,   393,   394,   395,   396,    78,   134,
       5,    31,   219,   390,   219,   125,   125,   125,   152,   219,
     390,   284,   285,   322,   331,    37,   150,   219,   312,   313,
     315,   317,   318,   319,   321,   322,   331,   334,   335,   340,
     123,   128,   149,   150,   219,   132,   134,   128,   132,   131,
     122,   123,   214,   219,   132,   152,   219,   132,   134,   131,
     123,   132,   134,   132,   131,   132,   150,   219,   322,     1,
      31,    37,    38,    39,    40,   128,   148,   150,   216,   218,
     219,   271,   281,   282,   284,   286,   315,   319,   322,   331,
     334,   335,   336,   338,   347,   348,   349,   350,    37,    38,
      39,    40,   150,   322,   349,   125,   136,     1,    29,    30,
      31,    32,    33,    67,   117,   118,   126,   148,   219,   270,
     274,   276,   277,   284,   286,   290,   291,   292,   298,   302,
     310,   311,   353,   354,   355,   356,   357,   358,    75,    76,
     331,   125,   327,   315,   322,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    48,    49,    68,
      86,    88,   101,   113,   114,   115,   116,   132,   152,   173,
     174,   270,   275,   276,   284,   287,   291,   293,   301,   368,
     371,   372,   373,   378,   379,   380,    31,    77,   134,   216,
     218,   303,   369,   370,   388,   389,   396,     1,   216,   280,
     297,   303,   336,   366,   392,     1,   391,   392,     0,   219,
     390,   390,     5,   129,   390,     1,     4,     6,     8,     9,
      67,    72,    73,    74,    85,    86,    99,   103,   104,   105,
     106,   107,   108,   109,   110,   119,   120,   122,   125,   127,
     135,   136,   138,   139,   140,   141,   152,   178,   179,   219,
     220,   221,   222,   223,   226,   227,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   390,   402,
     403,   404,   405,   149,   219,   132,   152,   219,   284,   331,
     136,   125,   136,   126,   310,   311,   357,   358,    75,    76,
     331,   334,   335,   312,   317,   321,   322,   126,   322,   126,
     322,   322,    86,   152,   204,   206,   208,   212,   213,   219,
     231,   236,   252,   256,   302,   128,   123,   123,   128,     1,
      69,    79,    81,    82,    89,    92,    93,    94,    95,    97,
      99,   100,   125,   127,   128,   131,   153,   154,   155,   156,
     157,   158,   159,   160,   175,   176,   178,   179,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   195,   199,
     200,   201,   202,   219,   227,   250,   302,   314,   316,   322,
     331,   336,   337,   367,    81,    82,   219,   270,   274,   284,
     287,   290,   298,   305,   306,     1,   131,   201,   202,   150,
     219,     1,   219,   272,   273,     1,   131,   273,   306,    67,
     205,   207,   209,   210,   211,   219,   302,     1,   131,   201,
     202,   306,     1,   131,   201,   202,     1,   131,   201,   202,
     150,   219,   130,   130,   130,   130,   130,   132,   331,   315,
     319,   322,     1,   129,   372,   379,   380,   372,   379,   380,
       1,   128,   130,   130,   331,   128,   137,   149,   219,   245,
     264,   268,   269,   130,   132,   152,   219,   131,   132,   131,
     132,   322,    37,   125,   136,   138,   148,   150,   219,   270,
     276,   284,   286,   291,   312,   313,   322,   329,   331,   332,
     335,     1,   126,   130,     1,   126,   130,     1,   130,     1,
     130,   126,   126,   315,   125,   315,   125,   125,     1,   128,
       1,   131,     1,    37,    38,    39,    40,   128,   219,   270,
     276,   284,   287,   291,   322,   349,   350,     1,   128,     1,
     368,   371,   379,   380,   368,   371,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    86,    87,    89,
      90,    91,   128,   134,   152,   196,   197,   198,   219,   227,
     231,   246,   248,   252,   264,   265,   266,   327,   359,   360,
     363,   364,   365,   372,   373,   374,   375,   376,   377,   379,
     380,   382,   383,   384,   385,   386,   387,   131,    31,   219,
     390,   219,   214,   215,   217,   218,   312,   313,   319,   322,
     331,   336,   338,   372,   380,   216,   303,   129,   244,   245,
     263,   126,   125,   231,   252,   125,   231,   252,   231,   252,
     125,   219,   270,   276,   284,   287,   291,   309,   268,   125,
     125,   309,   268,   125,   125,   125,   125,   125,   125,   231,
     252,   125,   126,   246,   248,   266,   276,   284,   286,   291,
     299,   351,   390,   132,   137,   180,   181,   224,   228,   246,
     132,     1,   131,   132,   219,     1,     7,     8,     9,   125,
     133,   136,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,   129,   247,   181,   224,   225,   233,   253,   122,
     142,   143,   139,   140,    10,    11,   236,   256,    12,    13,
     123,   124,    14,    15,   138,   144,   145,    16,    17,   146,
     247,   126,     7,     8,     9,   125,   133,   136,   247,   122,
     142,   143,   139,   140,    10,    11,    12,    13,   123,   124,
      14,    15,   138,   144,   145,    16,    17,   146,   247,   126,
     126,   108,   219,   302,   397,   400,   401,   132,   132,   137,
     149,   268,   269,   137,   149,   268,   269,   126,   126,   126,
     126,   312,   317,   321,   126,   126,   312,    11,   124,   130,
     129,   125,   322,   331,   332,    67,   211,   219,   302,   211,
       1,   219,   270,   284,   287,   298,   307,   302,   336,   337,
     125,   152,   219,   219,   302,     1,   125,   307,   122,   125,
     219,   302,   128,   327,   379,   380,   379,   380,   379,   128,
     379,   380,   128,     1,   131,     1,     1,   128,   130,   130,
      70,    71,    92,    96,    98,   131,    70,    71,   131,   128,
       1,   199,   200,     1,   199,   200,     1,   129,   125,   134,
     219,   288,   289,   312,   318,   320,   322,   331,   338,   339,
     340,     1,   302,   310,   355,   331,   316,   322,   125,   134,
     159,   160,   175,   176,   178,   179,   188,   219,   302,   123,
     152,   219,   219,   270,   284,   287,   123,   123,   129,   327,
     328,   130,     1,   128,   132,    28,   151,   219,   124,   130,
     129,   219,   332,   334,   347,   347,   347,   347,   347,   128,
     130,   131,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   224,   225,   227,   245,   264,   301,
     344,   345,   312,   315,   317,   319,   321,   312,   319,   132,
     246,   265,   341,   343,   379,   380,   379,   380,   347,   348,
     347,   348,   137,   137,   137,    53,   353,   354,     1,   273,
     132,   132,     1,   131,   201,   202,     1,   131,   201,   202,
     132,   126,   219,   310,   311,   322,   331,   332,   357,   358,
     137,   149,   268,   269,   322,   331,   335,   331,   125,   136,
     329,     1,     1,   130,     1,    53,   219,   353,   354,   130,
       1,    53,   219,   353,   354,   130,     1,    53,   219,   353,
     354,   130,    53,   219,   353,   354,     3,    28,    46,    75,
      76,   126,   324,   325,   326,   246,   149,   219,   131,   132,
     128,   128,   134,   268,   269,   134,   125,   125,     1,   125,
      54,    55,    56,    58,    59,    60,    61,    64,    87,   219,
     266,   327,   359,   382,   386,   125,   219,   128,   128,   128,
     224,   225,   248,   266,   125,   284,   125,   125,   192,   219,
     128,   128,   128,   134,   133,   247,     1,   133,   128,   130,
     248,   266,   247,   126,   130,   248,     1,   374,   375,   374,
     375,   359,   360,   368,   371,   359,   360,   368,   371,     1,
       1,   390,   390,   150,   219,   132,   132,   331,   319,   322,
     372,   380,   372,   380,   380,   245,   146,   128,   146,    67,
     148,   219,   276,   284,   286,   291,   300,   352,   219,   301,
     123,   125,   136,   219,   270,   276,   284,   287,   291,   322,
     330,   331,   333,   219,   270,   276,   284,   287,   291,   308,
     248,   351,   379,   219,   136,   333,   308,   246,   390,   390,
     390,   246,   352,   352,   126,   219,   276,   284,   286,   291,
     332,   126,   133,     1,   171,   172,     1,   131,   130,   137,
       1,   171,   172,   131,     1,   171,   172,     1,   219,   126,
     225,   228,   229,   265,     1,   219,   248,   266,   224,   246,
       1,   233,   253,   233,   253,   233,   253,   234,   254,   234,
     254,   235,   255,   235,   255,   236,   256,   236,   256,   236,
     256,   224,   225,   238,   257,   224,   225,   238,   257,   224,
     225,   239,   258,   224,   225,   240,   259,   224,   225,   241,
     260,   242,   261,   243,   262,   134,   224,   225,   248,   249,
     266,   267,   224,   246,     1,   219,   126,   228,   229,     1,
     219,   248,   266,   224,   246,   233,   253,   233,   253,   233,
     253,   234,   254,   234,   254,   235,   255,   235,   255,   236,
     256,   236,   256,   236,   256,   236,   256,   224,   225,   238,
     257,   224,   225,   238,   257,   224,   225,   239,   258,   224,
     225,   240,   259,   224,   225,   241,   260,   242,   261,   243,
     262,   134,   248,   249,   266,   267,   224,   246,   123,   124,
     219,   398,   399,   219,   131,   397,   400,   401,   401,   137,
     137,   137,   137,   137,   137,   212,   204,   206,   208,   219,
     322,   331,   124,   129,   332,   124,   132,   123,   132,   219,
     270,   284,   287,   332,   322,   331,   338,   339,   192,   289,
     312,   322,   331,   132,   219,   132,   219,   332,   219,   322,
     125,   128,   131,   182,   183,   182,   183,   379,   379,   379,
     221,   379,   379,     1,   344,   345,   126,   268,   269,   132,
     130,     1,   302,   310,   355,   331,   312,   320,   322,   134,
     327,   219,   125,   316,   316,   219,     1,     1,   289,   213,
     123,   211,   211,   268,   269,   129,   272,   201,   202,     1,
     131,   273,   129,   134,   129,   134,   210,   206,   219,   129,
     219,   129,   379,   380,     1,   128,   130,   128,   130,   128,
     163,   164,   167,   168,   169,   131,   161,   164,   128,   131,
     163,   164,   167,   168,   169,   129,    37,   338,   339,   340,
     341,   343,   346,     1,   131,   273,     1,   131,   273,     1,
     131,   201,   202,   322,   331,   332,   126,   126,   126,   137,
     137,   137,   331,   329,   126,   357,   358,   137,   149,   268,
     269,   353,   354,   302,   353,   353,   353,   354,   126,   125,
     126,   130,   325,   126,   126,   126,     1,   171,   172,   359,
     360,   368,   371,   134,   134,   359,   360,   368,   371,   248,
     266,   248,   266,   126,   248,   266,   134,   268,   269,   134,
     125,   125,   359,   125,   225,   266,   125,   134,    58,     1,
     126,   128,   219,   248,   266,   381,   128,   128,   128,   128,
     128,   390,   125,   246,   246,   219,   359,   360,   368,   371,
      91,   225,   265,    89,    90,    91,   246,   265,   225,   265,
     246,   265,   123,   319,   380,   380,   128,   248,   249,   266,
     267,   248,   249,   266,   267,   148,   149,   148,   276,   284,
     286,   291,   332,   126,   126,   126,   332,   213,   126,   322,
     333,   357,   358,   268,   269,   123,   331,   125,   330,   136,
     123,   136,   219,   270,   276,   284,   287,   291,   333,   126,
     126,   126,   126,   268,   269,   136,   136,   333,   130,   126,
     130,   130,   130,   126,   130,   132,   233,   253,   342,   390,
       1,   131,   224,   246,     1,     1,   126,   130,   126,   137,
     137,     1,   130,   134,   134,   130,   134,   134,   126,   137,
     137,   134,   134,   134,   134,   219,   219,   128,   130,   219,
     390,   131,   131,   322,   331,   206,   213,   123,   132,   132,
     219,   331,   322,   126,   331,   312,   126,   132,   132,   219,
     126,     1,   171,   172,   288,   322,   219,   125,   312,   320,
     320,   268,   269,   125,   126,   124,   213,   124,   124,   268,
     269,   128,     1,   128,   204,   203,   302,   204,   203,   208,
     129,   132,     1,   165,   166,     1,   165,   166,   380,     1,
     344,   345,   130,   131,   341,   343,     1,   128,     1,   128,
     331,   329,   126,   126,   126,   137,   137,   137,   332,   335,
     248,   126,   325,     1,   359,   360,   368,   371,   359,   360,
     368,   371,   126,   126,   126,   126,     1,   359,   126,   248,
     359,   360,   134,   134,   266,   126,   248,   266,    58,   266,
     381,   390,   125,   359,   134,   128,     1,   128,     1,   126,
     266,   381,     3,   126,   134,   390,   126,   126,   130,   125,
     125,   192,   134,   134,   134,   134,   134,   134,   134,   134,
     126,   126,     1,   126,   124,   322,   331,   333,   126,   126,
     126,   137,   137,   213,   330,   126,   357,   358,   268,   269,
     213,   268,   269,   123,   136,   125,   341,   137,   137,   268,
     269,   268,   269,   136,   351,   219,   219,   246,     1,   219,
     346,   225,   265,   224,   225,   224,   225,   245,   263,   224,
     225,   245,   263,   224,   225,   224,   225,   245,   263,   224,
     225,   245,   263,   224,   225,   245,   263,   224,   225,   245,
     263,   224,   225,   245,   263,   224,   225,   245,   263,   398,
     128,   128,   124,   213,   132,   379,   312,   129,   132,     1,
     125,   134,   134,   124,   201,   202,   128,   201,   202,   129,
     332,   129,   208,   346,   131,   341,   343,     1,   201,   202,
     201,   202,   126,   359,   359,   359,   359,   359,   360,   126,
     125,   381,   126,   248,   266,   248,   359,     1,   126,   248,
     266,   136,   361,   362,   390,   128,   362,     3,   126,   134,
     132,   192,   246,   246,     1,     1,   330,   126,   124,   126,
     126,   137,   137,   124,   137,   137,   213,   268,   269,   351,
     137,   137,   137,   137,   268,   269,   126,   126,   126,   126,
     126,   130,   131,   124,   344,   268,   269,   268,   269,   201,
     202,   204,   204,   130,   131,     1,    66,    66,   248,   266,
     126,   248,   266,   126,   128,   126,   128,   359,   360,   126,
     359,   360,   219,   126,   130,   134,   125,     3,   126,   134,
     362,   128,   362,    74,   192,   193,   194,   126,   126,   126,
     130,   124,   137,   137,   126,   137,   137,   131,   128,   131,
     359,   359,   126,   126,   128,   359,   248,   359,   360,   137,
     128,   361,   362,   246,   362,   128,   362,   126,   134,     3,
     126,   134,   379,   379,   131,   193,   132,   192,   132,   233,
     253,   341,   126,   390,   126,   126,   126,   126,   134,   128,
     362,   362,   128,   362,   194,   126,   346,   359,   125,   128,
     128,   128,   362,   126,   126,   126,   134,   131,   130,   131,
     246,   126,   128,   128,   128,   362,   131,   126,   128,   126,
     128
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 148: /* guess_type */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 11929 "grammar.ec"
        break;
      case 149: /* type */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 11936 "grammar.ec"
        break;
      case 150: /* base_strict_type */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 11943 "grammar.ec"
        break;
      case 151: /* base_strict_type_name */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 11950 "grammar.ec"
        break;
      case 152: /* strict_type */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 11957 "grammar.ec"
        break;
      case 153: /* class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 11964 "grammar.ec"
        break;
      case 154: /* constructor_function_definition_start */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 11971 "grammar.ec"
        break;
      case 155: /* destructor_function_definition_start */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 11978 "grammar.ec"
        break;
      case 156: /* virtual_class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 11985 "grammar.ec"
        break;
      case 157: /* class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 11992 "grammar.ec"
        break;
      case 158: /* virtual_class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 11999 "grammar.ec"
        break;
      case 159: /* class_function_definition */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12006 "grammar.ec"
        break;
      case 160: /* class_function_definition_error */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12013 "grammar.ec"
        break;
      case 161: /* instance_class_function_definition_start */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12020 "grammar.ec"
        break;
      case 162: /* instance_class_function_definition_start_error */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12027 "grammar.ec"
        break;
      case 163: /* instance_class_function_definition */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12034 "grammar.ec"
        break;
      case 164: /* instance_class_function_definition_error */
/* Line 1393 of yacc.c  */
#line 243 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1393 of yacc.c  */
#line 12041 "grammar.ec"
        break;
      case 165: /* data_member_initialization */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12048 "grammar.ec"
        break;
      case 166: /* data_member_initialization_error */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12055 "grammar.ec"
        break;
      case 167: /* data_member_initialization_list */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12062 "grammar.ec"
        break;
      case 168: /* data_member_initialization_list_error */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12069 "grammar.ec"
        break;
      case 169: /* data_member_initialization_list_coloned */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12076 "grammar.ec"
        break;
      case 170: /* members_initialization_list_coloned */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12083 "grammar.ec"
        break;
      case 171: /* members_initialization_list */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12090 "grammar.ec"
        break;
      case 172: /* members_initialization_list_error */
/* Line 1393 of yacc.c  */
#line 267 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1393 of yacc.c  */
#line 12097 "grammar.ec"
        break;
      case 173: /* instantiation_named */
/* Line 1393 of yacc.c  */
#line 239 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12104 "grammar.ec"
        break;
      case 174: /* instantiation_named_error */
/* Line 1393 of yacc.c  */
#line 239 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12111 "grammar.ec"
        break;
      case 178: /* instantiation_unnamed */
/* Line 1393 of yacc.c  */
#line 239 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12118 "grammar.ec"
        break;
      case 179: /* instantiation_unnamed_error */
/* Line 1393 of yacc.c  */
#line 239 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1393 of yacc.c  */
#line 12125 "grammar.ec"
        break;
      case 182: /* default_property */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12132 "grammar.ec"
        break;
      case 183: /* default_property_error */
/* Line 1393 of yacc.c  */
#line 241 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1393 of yacc.c  */
#line 12139 "grammar.ec"
        break;
      case 184: /* default_property_list */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12146 "grammar.ec"
        break;
      case 185: /* default_property_list_error */
/* Line 1393 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1393 of yacc.c  */
#line 12153 "grammar.ec"
        break;
      case 188: /* property */
/* Line 1393 of yacc.c  */
#line 252 "grammar.y"
        { FreeProperty(((*yyvaluep).prop)); };
/* Line 1393 of yacc.c  */
#line 12160 "grammar.ec"
        break;
      case 199: /* struct_declaration */
/* Line 1393 of yacc.c  */
#line 250 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1393 of yacc.c  */
#line 12167 "grammar.ec"
        break;
      case 200: /* struct_declaration_error */
/* Line 1393 of yacc.c  */
#line 250 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1393 of yacc.c  */
#line 12174 "grammar.ec"
        break;
      case 201: /* struct_declaration_list */
/* Line 1393 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1393 of yacc.c  */
#line 12181 "grammar.ec"
        break;
      case 202: /* struct_declaration_list_error */
/* Line 1393 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1393 of yacc.c  */
#line 12188 "grammar.ec"
        break;
      case 203: /* template_datatype */
/* Line 1393 of yacc.c  */
#line 271 "grammar.y"
        { FreeTemplateDataType(((*yyvaluep).templateDatatype)); };
/* Line 1393 of yacc.c  */
#line 12195 "grammar.ec"
        break;
      case 204: /* template_type_argument */
/* Line 1393 of yacc.c  */
#line 270 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12202 "grammar.ec"
        break;
      case 205: /* template_type_parameter */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12209 "grammar.ec"
        break;
      case 206: /* template_identifier_argument */
/* Line 1393 of yacc.c  */
#line 270 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12216 "grammar.ec"
        break;
      case 207: /* template_identifier_parameter */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12223 "grammar.ec"
        break;
      case 208: /* template_expression_argument */
/* Line 1393 of yacc.c  */
#line 270 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12230 "grammar.ec"
        break;
      case 209: /* template_expression_parameter */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12237 "grammar.ec"
        break;
      case 210: /* template_parameter */
/* Line 1393 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1393 of yacc.c  */
#line 12244 "grammar.ec"
        break;
      case 211: /* template_parameters_list */
/* Line 1393 of yacc.c  */
#line 272 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateParameter); };
/* Line 1393 of yacc.c  */
#line 12251 "grammar.ec"
        break;
      case 212: /* template_argument */
/* Line 1393 of yacc.c  */
#line 270 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1393 of yacc.c  */
#line 12258 "grammar.ec"
        break;
      case 213: /* template_arguments_list */
/* Line 1393 of yacc.c  */
#line 273 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateArgument); };
/* Line 1393 of yacc.c  */
#line 12265 "grammar.ec"
        break;
      case 214: /* class_entry */
/* Line 1393 of yacc.c  */
#line 247 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1393 of yacc.c  */
#line 12272 "grammar.ec"
        break;
      case 215: /* class_decl */
/* Line 1393 of yacc.c  */
#line 248 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1393 of yacc.c  */
#line 12279 "grammar.ec"
        break;
      case 216: /* class */
/* Line 1393 of yacc.c  */
#line 249 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12286 "grammar.ec"
        break;
      case 217: /* class_head */
/* Line 1393 of yacc.c  */
#line 249 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12293 "grammar.ec"
        break;
      case 218: /* class_error */
/* Line 1393 of yacc.c  */
#line 249 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1393 of yacc.c  */
#line 12300 "grammar.ec"
        break;
      case 219: /* identifier */
/* Line 1393 of yacc.c  */
#line 203 "grammar.y"
        { FreeIdentifier(((*yyvaluep).id)); };
/* Line 1393 of yacc.c  */
#line 12307 "grammar.ec"
        break;
      case 220: /* primary_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12314 "grammar.ec"
        break;
      case 221: /* i18n_string */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12321 "grammar.ec"
        break;
      case 226: /* primary_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12328 "grammar.ec"
        break;
      case 227: /* postfix_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12335 "grammar.ec"
        break;
      case 228: /* argument_expression_list */
/* Line 1393 of yacc.c  */
#line 254 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12342 "grammar.ec"
        break;
      case 229: /* argument_expression_list_error */
/* Line 1393 of yacc.c  */
#line 254 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12349 "grammar.ec"
        break;
      case 231: /* unary_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12356 "grammar.ec"
        break;
      case 233: /* cast_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12363 "grammar.ec"
        break;
      case 234: /* multiplicative_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12370 "grammar.ec"
        break;
      case 235: /* additive_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12377 "grammar.ec"
        break;
      case 236: /* shift_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12384 "grammar.ec"
        break;
      case 238: /* relational_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12391 "grammar.ec"
        break;
      case 239: /* equality_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12398 "grammar.ec"
        break;
      case 240: /* and_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12405 "grammar.ec"
        break;
      case 241: /* exclusive_or_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12412 "grammar.ec"
        break;
      case 242: /* inclusive_or_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12419 "grammar.ec"
        break;
      case 243: /* logical_and_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12426 "grammar.ec"
        break;
      case 244: /* logical_or_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12433 "grammar.ec"
        break;
      case 245: /* conditional_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12440 "grammar.ec"
        break;
      case 246: /* assignment_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12447 "grammar.ec"
        break;
      case 248: /* expression */
/* Line 1393 of yacc.c  */
#line 254 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12454 "grammar.ec"
        break;
      case 250: /* postfix_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12461 "grammar.ec"
        break;
      case 252: /* unary_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12468 "grammar.ec"
        break;
      case 253: /* cast_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12475 "grammar.ec"
        break;
      case 254: /* multiplicative_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12482 "grammar.ec"
        break;
      case 255: /* additive_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12489 "grammar.ec"
        break;
      case 256: /* shift_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12496 "grammar.ec"
        break;
      case 257: /* relational_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12503 "grammar.ec"
        break;
      case 258: /* equality_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12510 "grammar.ec"
        break;
      case 259: /* and_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12517 "grammar.ec"
        break;
      case 260: /* exclusive_or_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12524 "grammar.ec"
        break;
      case 261: /* inclusive_or_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12531 "grammar.ec"
        break;
      case 262: /* logical_and_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12538 "grammar.ec"
        break;
      case 263: /* logical_or_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12545 "grammar.ec"
        break;
      case 264: /* conditional_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12552 "grammar.ec"
        break;
      case 265: /* assignment_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12559 "grammar.ec"
        break;
      case 266: /* expression_error */
/* Line 1393 of yacc.c  */
#line 254 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1393 of yacc.c  */
#line 12566 "grammar.ec"
        break;
      case 268: /* constant_expression */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12573 "grammar.ec"
        break;
      case 269: /* constant_expression_error */
/* Line 1393 of yacc.c  */
#line 205 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1393 of yacc.c  */
#line 12580 "grammar.ec"
        break;
      case 270: /* storage_class_specifier */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12587 "grammar.ec"
        break;
      case 271: /* external_storage_class_specifier */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12594 "grammar.ec"
        break;
      case 272: /* enumerator */
/* Line 1393 of yacc.c  */
#line 221 "grammar.y"
        { FreeEnumerator(((*yyvaluep).enumerator)); };
/* Line 1393 of yacc.c  */
#line 12601 "grammar.ec"
        break;
      case 273: /* enumerator_list */
/* Line 1393 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeEnumerator); };
/* Line 1393 of yacc.c  */
#line 12608 "grammar.ec"
        break;
      case 275: /* enum_specifier_nocompound */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12615 "grammar.ec"
        break;
      case 276: /* enum_specifier_compound */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12622 "grammar.ec"
        break;
      case 277: /* enum_specifier_compound_error */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12629 "grammar.ec"
        break;
      case 279: /* enum_class */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12636 "grammar.ec"
        break;
      case 280: /* enum_class_error */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12643 "grammar.ec"
        break;
      case 281: /* class_specifier */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12650 "grammar.ec"
        break;
      case 282: /* class_specifier_error */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12657 "grammar.ec"
        break;
      case 283: /* ext_storage */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12664 "grammar.ec"
        break;
      case 284: /* type_qualifier */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12671 "grammar.ec"
        break;
      case 285: /* type_qualifier_list */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12678 "grammar.ec"
        break;
      case 286: /* type_specifier */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12685 "grammar.ec"
        break;
      case 287: /* strict_type_specifier */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12692 "grammar.ec"
        break;
      case 288: /* struct_declarator */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12699 "grammar.ec"
        break;
      case 289: /* struct_declarator_list */
/* Line 1393 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclarator); };
/* Line 1393 of yacc.c  */
#line 12706 "grammar.ec"
        break;
      case 290: /* struct_entry */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12713 "grammar.ec"
        break;
      case 291: /* struct_or_union_specifier_compound */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12720 "grammar.ec"
        break;
      case 292: /* struct_or_union_specifier_compound_error */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12727 "grammar.ec"
        break;
      case 293: /* struct_or_union_specifier_nocompound */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12734 "grammar.ec"
        break;
      case 294: /* struct_decl */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12741 "grammar.ec"
        break;
      case 295: /* struct_head */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12748 "grammar.ec"
        break;
      case 296: /* struct_class */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12755 "grammar.ec"
        break;
      case 297: /* struct_class_error */
/* Line 1393 of yacc.c  */
#line 216 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1393 of yacc.c  */
#line 12762 "grammar.ec"
        break;
      case 299: /* specifier_qualifier_list */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12769 "grammar.ec"
        break;
      case 300: /* guess_specifier_qualifier_list */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12776 "grammar.ec"
        break;
      case 301: /* declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12783 "grammar.ec"
        break;
      case 302: /* guess_declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12790 "grammar.ec"
        break;
      case 303: /* external_guess_declaration_specifiers */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12797 "grammar.ec"
        break;
      case 304: /* external_guess_declaration_specifiers_error */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12804 "grammar.ec"
        break;
      case 305: /* _inheritance_specifiers */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12811 "grammar.ec"
        break;
      case 306: /* inheritance_specifiers */
/* Line 1393 of yacc.c  */
#line 256 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1393 of yacc.c  */
#line 12818 "grammar.ec"
        break;
      case 310: /* identifier_list_error */
/* Line 1393 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 12825 "grammar.ec"
        break;
      case 311: /* identifier_list */
/* Line 1393 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 12832 "grammar.ec"
        break;
      case 312: /* direct_declarator_nofunction_type_ok */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12839 "grammar.ec"
        break;
      case 313: /* direct_declarator_nofunction */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12846 "grammar.ec"
        break;
      case 314: /* direct_declarator_function_start */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12853 "grammar.ec"
        break;
      case 315: /* direct_declarator_function */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12860 "grammar.ec"
        break;
      case 316: /* direct_declarator_function_error */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12867 "grammar.ec"
        break;
      case 317: /* direct_declarator */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12874 "grammar.ec"
        break;
      case 318: /* direct_declarator_function_start_type_ok */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12881 "grammar.ec"
        break;
      case 319: /* direct_declarator_function_type_ok */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12888 "grammar.ec"
        break;
      case 320: /* direct_declarator_function_error_type_ok */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12895 "grammar.ec"
        break;
      case 321: /* direct_declarator_type_ok */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12902 "grammar.ec"
        break;
      case 322: /* ext_decl */
/* Line 1393 of yacc.c  */
#line 276 "grammar.y"
        { FreeExtDecl(((*yyvaluep).extDecl)); };
/* Line 1393 of yacc.c  */
#line 12909 "grammar.ec"
        break;
      case 324: /* attribute_word */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 12916 "grammar.ec"
        break;
      case 325: /* attribute */
/* Line 1393 of yacc.c  */
#line 277 "grammar.y"
        { FreeAttribute(((*yyvaluep).attribute)); };
/* Line 1393 of yacc.c  */
#line 12923 "grammar.ec"
        break;
      case 326: /* attribs_list */
/* Line 1393 of yacc.c  */
#line 278 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttribute); };
/* Line 1393 of yacc.c  */
#line 12930 "grammar.ec"
        break;
      case 327: /* attrib */
/* Line 1393 of yacc.c  */
#line 275 "grammar.y"
        { FreeAttrib(((*yyvaluep).attrib)); };
/* Line 1393 of yacc.c  */
#line 12937 "grammar.ec"
        break;
      case 328: /* multi_attrib */
/* Line 1393 of yacc.c  */
#line 279 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttrib); };
/* Line 1393 of yacc.c  */
#line 12944 "grammar.ec"
        break;
      case 329: /* direct_abstract_declarator */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12951 "grammar.ec"
        break;
      case 330: /* direct_abstract_declarator_noarray */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12958 "grammar.ec"
        break;
      case 331: /* pointer */
/* Line 1393 of yacc.c  */
#line 204 "grammar.y"
        { FreePointer(((*yyvaluep).pointer)); };
/* Line 1393 of yacc.c  */
#line 12965 "grammar.ec"
        break;
      case 332: /* abstract_declarator */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12972 "grammar.ec"
        break;
      case 333: /* abstract_declarator_noarray */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12979 "grammar.ec"
        break;
      case 334: /* declarator */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12986 "grammar.ec"
        break;
      case 335: /* declarator_type_ok */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 12993 "grammar.ec"
        break;
      case 336: /* declarator_function */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13000 "grammar.ec"
        break;
      case 337: /* declarator_function_error */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13007 "grammar.ec"
        break;
      case 338: /* declarator_function_type_ok */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13014 "grammar.ec"
        break;
      case 339: /* declarator_function_error_type_ok */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13021 "grammar.ec"
        break;
      case 340: /* declarator_nofunction_type_ok */
/* Line 1393 of yacc.c  */
#line 222 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1393 of yacc.c  */
#line 13028 "grammar.ec"
        break;
      case 341: /* initializer */
/* Line 1393 of yacc.c  */
#line 228 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13035 "grammar.ec"
        break;
      case 343: /* initializer_error */
/* Line 1393 of yacc.c  */
#line 228 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13042 "grammar.ec"
        break;
      case 344: /* initializer_condition */
/* Line 1393 of yacc.c  */
#line 228 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13049 "grammar.ec"
        break;
      case 345: /* initializer_condition_error */
/* Line 1393 of yacc.c  */
#line 228 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1393 of yacc.c  */
#line 13056 "grammar.ec"
        break;
      case 346: /* initializer_list */
/* Line 1393 of yacc.c  */
#line 260 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitializer); };
/* Line 1393 of yacc.c  */
#line 13063 "grammar.ec"
        break;
      case 347: /* init_declarator */
/* Line 1393 of yacc.c  */
#line 229 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1393 of yacc.c  */
#line 13070 "grammar.ec"
        break;
      case 348: /* init_declarator_error */
/* Line 1393 of yacc.c  */
#line 229 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1393 of yacc.c  */
#line 13077 "grammar.ec"
        break;
      case 349: /* init_declarator_list */
/* Line 1393 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1393 of yacc.c  */
#line 13084 "grammar.ec"
        break;
      case 350: /* init_declarator_list_error */
/* Line 1393 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1393 of yacc.c  */
#line 13091 "grammar.ec"
        break;
      case 351: /* type_name */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13098 "grammar.ec"
        break;
      case 352: /* guess_type_name */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13105 "grammar.ec"
        break;
      case 353: /* parameter_declaration */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13112 "grammar.ec"
        break;
      case 354: /* parameter_declaration_error */
/* Line 1393 of yacc.c  */
#line 230 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1393 of yacc.c  */
#line 13119 "grammar.ec"
        break;
      case 355: /* parameter_list */
/* Line 1393 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13126 "grammar.ec"
        break;
      case 356: /* parameter_list_error */
/* Line 1393 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13133 "grammar.ec"
        break;
      case 357: /* parameter_type_list */
/* Line 1393 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13140 "grammar.ec"
        break;
      case 358: /* parameter_type_list_error */
/* Line 1393 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1393 of yacc.c  */
#line 13147 "grammar.ec"
        break;
      case 359: /* statement */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13154 "grammar.ec"
        break;
      case 360: /* statement_error */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13161 "grammar.ec"
        break;
      case 364: /* labeled_statement */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13168 "grammar.ec"
        break;
      case 365: /* labeled_statement_error */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13175 "grammar.ec"
        break;
      case 366: /* declaration_mode */
/* Line 1393 of yacc.c  */
#line 274 "grammar.y"
        { };
/* Line 1393 of yacc.c  */
#line 13182 "grammar.ec"
        break;
      case 368: /* declaration */
/* Line 1393 of yacc.c  */
#line 235 "grammar.y"
        { FreeDeclaration(((*yyvaluep).declaration)); };
/* Line 1393 of yacc.c  */
#line 13189 "grammar.ec"
        break;
      case 372: /* declaration_list */
/* Line 1393 of yacc.c  */
#line 259 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1393 of yacc.c  */
#line 13196 "grammar.ec"
        break;
      case 373: /* declaration_list_error */
/* Line 1393 of yacc.c  */
#line 259 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1393 of yacc.c  */
#line 13203 "grammar.ec"
        break;
      case 374: /* statement_list */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1393 of yacc.c  */
#line 13210 "grammar.ec"
        break;
      case 375: /* statement_list_error */
/* Line 1393 of yacc.c  */
#line 263 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1393 of yacc.c  */
#line 13217 "grammar.ec"
        break;
      case 376: /* compound_inside */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13224 "grammar.ec"
        break;
      case 377: /* compound_inside_error */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13231 "grammar.ec"
        break;
      case 378: /* compound_start */
/* Line 1393 of yacc.c  */
#line 268 "grammar.y"
        { PopContext(((*yyvaluep).context)); FreeContext(((*yyvaluep).context)); delete ((*yyvaluep).context); };
/* Line 1393 of yacc.c  */
#line 13238 "grammar.ec"
        break;
      case 379: /* compound_statement */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13245 "grammar.ec"
        break;
      case 380: /* compound_statement_error */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13252 "grammar.ec"
        break;
      case 381: /* expression_statement */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13259 "grammar.ec"
        break;
      case 382: /* selection_statement */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13266 "grammar.ec"
        break;
      case 383: /* selection_statement_error */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13273 "grammar.ec"
        break;
      case 384: /* iteration_statement */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13280 "grammar.ec"
        break;
      case 385: /* iteration_statement_error */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13287 "grammar.ec"
        break;
      case 386: /* jump_statement */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13294 "grammar.ec"
        break;
      case 387: /* jump_statement_error */
/* Line 1393 of yacc.c  */
#line 231 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1393 of yacc.c  */
#line 13301 "grammar.ec"
        break;
      case 388: /* function_definition */
/* Line 1393 of yacc.c  */
#line 236 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1393 of yacc.c  */
#line 13308 "grammar.ec"
        break;
      case 389: /* function_definition_error */
/* Line 1393 of yacc.c  */
#line 236 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1393 of yacc.c  */
#line 13315 "grammar.ec"
        break;
      case 390: /* string_literal */
/* Line 1393 of yacc.c  */
#line 251 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1393 of yacc.c  */
#line 13322 "grammar.ec"
        break;
      case 391: /* external_declaration */
/* Line 1393 of yacc.c  */
#line 237 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1393 of yacc.c  */
#line 13329 "grammar.ec"
        break;
      case 392: /* external_declaration_error */
/* Line 1393 of yacc.c  */
#line 237 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1393 of yacc.c  */
#line 13336 "grammar.ec"
        break;
      case 393: /* translation_unit_error */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1393 of yacc.c  */
#line 13343 "grammar.ec"
        break;
      case 394: /* translation_unit */
/* Line 1393 of yacc.c  */
#line 264 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1393 of yacc.c  */
#line 13350 "grammar.ec"
        break;

      default:
        break;
    }
}




/* The lookahead symbol.  */
int yychar;


#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;


/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
/* Line 1787 of yacc.c  */
#line 287 "grammar.y"
    {
      (yyval.specifier) = null;
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   }
    break;

  case 3:
/* Line 1787 of yacc.c  */
#line 306 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   }
    break;

  case 4:
/* Line 1787 of yacc.c  */
#line 344 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 5:
/* Line 1787 of yacc.c  */
#line 346 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   }
    break;

  case 6:
/* Line 1787 of yacc.c  */
#line 425 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); }
    break;

  case 7:
/* Line 1787 of yacc.c  */
#line 429 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 9:
/* Line 1787 of yacc.c  */
#line 433 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); }
    break;

  case 10:
/* Line 1787 of yacc.c  */
#line 435 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    }
    break;

  case 11:
/* Line 1787 of yacc.c  */
#line 474 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 12:
/* Line 1787 of yacc.c  */
#line 476 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 13:
/* Line 1787 of yacc.c  */
#line 481 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (3)].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 14:
/* Line 1787 of yacc.c  */
#line 486 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (4)].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 15:
/* Line 1787 of yacc.c  */
#line 491 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 16:
/* Line 1787 of yacc.c  */
#line 493 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 17:
/* Line 1787 of yacc.c  */
#line 498 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 18:
/* Line 1787 of yacc.c  */
#line 500 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 19:
/* Line 1787 of yacc.c  */
#line 505 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 20:
/* Line 1787 of yacc.c  */
#line 507 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 21:
/* Line 1787 of yacc.c  */
#line 512 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 22:
/* Line 1787 of yacc.c  */
#line 514 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 23:
/* Line 1787 of yacc.c  */
#line 516 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 24:
/* Line 1787 of yacc.c  */
#line 518 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 25:
/* Line 1787 of yacc.c  */
#line 520 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 26:
/* Line 1787 of yacc.c  */
#line 524 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 27:
/* Line 1787 of yacc.c  */
#line 528 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      }
    break;

  case 28:
/* Line 1787 of yacc.c  */
#line 541 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 29:
/* Line 1787 of yacc.c  */
#line 543 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 30:
/* Line 1787 of yacc.c  */
#line 545 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 31:
/* Line 1787 of yacc.c  */
#line 547 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 32:
/* Line 1787 of yacc.c  */
#line 549 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 33:
/* Line 1787 of yacc.c  */
#line 555 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 34:
/* Line 1787 of yacc.c  */
#line 557 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 35:
/* Line 1787 of yacc.c  */
#line 562 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 36:
/* Line 1787 of yacc.c  */
#line 567 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 37:
/* Line 1787 of yacc.c  */
#line 572 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 38:
/* Line 1787 of yacc.c  */
#line 574 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 39:
/* Line 1787 of yacc.c  */
#line 576 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 40:
/* Line 1787 of yacc.c  */
#line 580 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 41:
/* Line 1787 of yacc.c  */
#line 581 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 42:
/* Line 1787 of yacc.c  */
#line 585 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 43:
/* Line 1787 of yacc.c  */
#line 587 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      }
    break;

  case 44:
/* Line 1787 of yacc.c  */
#line 597 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 45:
/* Line 1787 of yacc.c  */
#line 601 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 46:
/* Line 1787 of yacc.c  */
#line 603 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 47:
/* Line 1787 of yacc.c  */
#line 605 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 48:
/* Line 1787 of yacc.c  */
#line 609 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 49:
/* Line 1787 of yacc.c  */
#line 611 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 50:
/* Line 1787 of yacc.c  */
#line 613 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 51:
/* Line 1787 of yacc.c  */
#line 616 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 52:
/* Line 1787 of yacc.c  */
#line 628 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 53:
/* Line 1787 of yacc.c  */
#line 639 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      }
    break;

  case 54:
/* Line 1787 of yacc.c  */
#line 658 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 55:
/* Line 1787 of yacc.c  */
#line 660 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 56:
/* Line 1787 of yacc.c  */
#line 664 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); }
    break;

  case 57:
/* Line 1787 of yacc.c  */
#line 665 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 58:
/* Line 1787 of yacc.c  */
#line 666 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 59:
/* Line 1787 of yacc.c  */
#line 667 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 60:
/* Line 1787 of yacc.c  */
#line 668 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 61:
/* Line 1787 of yacc.c  */
#line 669 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 63:
/* Line 1787 of yacc.c  */
#line 672 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   }
    break;

  case 64:
/* Line 1787 of yacc.c  */
#line 684 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  }
    break;

  case 66:
/* Line 1787 of yacc.c  */
#line 689 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 67:
/* Line 1787 of yacc.c  */
#line 690 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 68:
/* Line 1787 of yacc.c  */
#line 691 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 69:
/* Line 1787 of yacc.c  */
#line 695 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 70:
/* Line 1787 of yacc.c  */
#line 696 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 71:
/* Line 1787 of yacc.c  */
#line 697 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 72:
/* Line 1787 of yacc.c  */
#line 698 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 73:
/* Line 1787 of yacc.c  */
#line 699 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 74:
/* Line 1787 of yacc.c  */
#line 700 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 75:
/* Line 1787 of yacc.c  */
#line 701 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 76:
/* Line 1787 of yacc.c  */
#line 706 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 77:
/* Line 1787 of yacc.c  */
#line 708 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 78:
/* Line 1787 of yacc.c  */
#line 713 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 79:
/* Line 1787 of yacc.c  */
#line 715 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 80:
/* Line 1787 of yacc.c  */
#line 717 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 81:
/* Line 1787 of yacc.c  */
#line 719 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 82:
/* Line 1787 of yacc.c  */
#line 721 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 83:
/* Line 1787 of yacc.c  */
#line 751 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 84:
/* Line 1787 of yacc.c  */
#line 753 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 85:
/* Line 1787 of yacc.c  */
#line 758 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 86:
/* Line 1787 of yacc.c  */
#line 760 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 87:
/* Line 1787 of yacc.c  */
#line 762 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 88:
/* Line 1787 of yacc.c  */
#line 764 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 89:
/* Line 1787 of yacc.c  */
#line 766 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 90:
/* Line 1787 of yacc.c  */
#line 795 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 91:
/* Line 1787 of yacc.c  */
#line 797 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 92:
/* Line 1787 of yacc.c  */
#line 799 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;}
    break;

  case 93:
/* Line 1787 of yacc.c  */
#line 804 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 94:
/* Line 1787 of yacc.c  */
#line 806 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 95:
/* Line 1787 of yacc.c  */
#line 811 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 96:
/* Line 1787 of yacc.c  */
#line 813 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 97:
/* Line 1787 of yacc.c  */
#line 817 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 98:
/* Line 1787 of yacc.c  */
#line 819 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 99:
/* Line 1787 of yacc.c  */
#line 821 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 100:
/* Line 1787 of yacc.c  */
#line 823 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 101:
/* Line 1787 of yacc.c  */
#line 828 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 102:
/* Line 1787 of yacc.c  */
#line 831 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); }
    break;

  case 103:
/* Line 1787 of yacc.c  */
#line 834 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); }
    break;

  case 104:
/* Line 1787 of yacc.c  */
#line 837 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 105:
/* Line 1787 of yacc.c  */
#line 902 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 106:
/* Line 1787 of yacc.c  */
#line 904 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 107:
/* Line 1787 of yacc.c  */
#line 909 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 108:
/* Line 1787 of yacc.c  */
#line 911 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 109:
/* Line 1787 of yacc.c  */
#line 913 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 110:
/* Line 1787 of yacc.c  */
#line 915 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 111:
/* Line 1787 of yacc.c  */
#line 917 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 112:
/* Line 1787 of yacc.c  */
#line 947 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 113:
/* Line 1787 of yacc.c  */
#line 951 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 114:
/* Line 1787 of yacc.c  */
#line 952 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; }
    break;

  case 115:
/* Line 1787 of yacc.c  */
#line 953 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 116:
/* Line 1787 of yacc.c  */
#line 957 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 117:
/* Line 1787 of yacc.c  */
#line 958 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 118:
/* Line 1787 of yacc.c  */
#line 959 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 119:
/* Line 1787 of yacc.c  */
#line 963 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 120:
/* Line 1787 of yacc.c  */
#line 964 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 121:
/* Line 1787 of yacc.c  */
#line 965 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 123:
/* Line 1787 of yacc.c  */
#line 971 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 124:
/* Line 1787 of yacc.c  */
#line 974 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 125:
/* Line 1787 of yacc.c  */
#line 977 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 126:
/* Line 1787 of yacc.c  */
#line 980 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 127:
/* Line 1787 of yacc.c  */
#line 983 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 129:
/* Line 1787 of yacc.c  */
#line 989 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 130:
/* Line 1787 of yacc.c  */
#line 991 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 131:
/* Line 1787 of yacc.c  */
#line 993 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 132:
/* Line 1787 of yacc.c  */
#line 995 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; }
    break;

  case 133:
/* Line 1787 of yacc.c  */
#line 997 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); }
    break;

  case 134:
/* Line 1787 of yacc.c  */
#line 1001 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); }
    break;

  case 135:
/* Line 1787 of yacc.c  */
#line 1006 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 136:
/* Line 1787 of yacc.c  */
#line 1009 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 137:
/* Line 1787 of yacc.c  */
#line 1012 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 138:
/* Line 1787 of yacc.c  */
#line 1015 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 139:
/* Line 1787 of yacc.c  */
#line 1018 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 141:
/* Line 1787 of yacc.c  */
#line 1024 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 142:
/* Line 1787 of yacc.c  */
#line 1026 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 143:
/* Line 1787 of yacc.c  */
#line 1030 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 144:
/* Line 1787 of yacc.c  */
#line 1035 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); }
    break;

  case 145:
/* Line 1787 of yacc.c  */
#line 1037 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); }
    break;

  case 146:
/* Line 1787 of yacc.c  */
#line 1042 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 147:
/* Line 1787 of yacc.c  */
#line 1044 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); }
    break;

  case 148:
/* Line 1787 of yacc.c  */
#line 1049 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); }
    break;

  case 149:
/* Line 1787 of yacc.c  */
#line 1051 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); }
    break;

  case 150:
/* Line 1787 of yacc.c  */
#line 1056 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); }
    break;

  case 151:
/* Line 1787 of yacc.c  */
#line 1061 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); }
    break;

  case 152:
/* Line 1787 of yacc.c  */
#line 1063 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); }
    break;

  case 153:
/* Line 1787 of yacc.c  */
#line 1068 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); }
    break;

  case 154:
/* Line 1787 of yacc.c  */
#line 1070 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); }
    break;

  case 155:
/* Line 1787 of yacc.c  */
#line 1072 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); }
    break;

  case 156:
/* Line 1787 of yacc.c  */
#line 1074 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); }
    break;

  case 157:
/* Line 1787 of yacc.c  */
#line 1079 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); }
    break;

  case 158:
/* Line 1787 of yacc.c  */
#line 1081 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); }
    break;

  case 159:
/* Line 1787 of yacc.c  */
#line 1083 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); }
    break;

  case 160:
/* Line 1787 of yacc.c  */
#line 1085 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); }
    break;

  case 161:
/* Line 1787 of yacc.c  */
#line 1089 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 162:
/* Line 1787 of yacc.c  */
#line 1090 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); }
    break;

  case 163:
/* Line 1787 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 164:
/* Line 1787 of yacc.c  */
#line 1092 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 165:
/* Line 1787 of yacc.c  */
#line 1093 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 166:
/* Line 1787 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 167:
/* Line 1787 of yacc.c  */
#line 1095 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); }
    break;

  case 168:
/* Line 1787 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; }
    break;

  case 169:
/* Line 1787 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); }
    break;

  case 170:
/* Line 1787 of yacc.c  */
#line 1098 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); }
    break;

  case 171:
/* Line 1787 of yacc.c  */
#line 1099 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); }
    break;

  case 172:
/* Line 1787 of yacc.c  */
#line 1101 "grammar.y"
    { (yyval.classDef) = null; }
    break;

  case 173:
/* Line 1787 of yacc.c  */
#line 1102 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; }
    break;

  case 174:
/* Line 1787 of yacc.c  */
#line 1104 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); }
    break;

  case 175:
/* Line 1787 of yacc.c  */
#line 1108 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 176:
/* Line 1787 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 177:
/* Line 1787 of yacc.c  */
#line 1112 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 178:
/* Line 1787 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 179:
/* Line 1787 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 180:
/* Line 1787 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 181:
/* Line 1787 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 182:
/* Line 1787 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); }
    break;

  case 183:
/* Line 1787 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); }
    break;

  case 184:
/* Line 1787 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 185:
/* Line 1787 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 186:
/* Line 1787 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); }
    break;

  case 187:
/* Line 1787 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 188:
/* Line 1787 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 189:
/* Line 1787 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); }
    break;

  case 190:
/* Line 1787 of yacc.c  */
#line 1126 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 191:
/* Line 1787 of yacc.c  */
#line 1127 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 192:
/* Line 1787 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 193:
/* Line 1787 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 194:
/* Line 1787 of yacc.c  */
#line 1133 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 195:
/* Line 1787 of yacc.c  */
#line 1137 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; }
    break;

  case 196:
/* Line 1787 of yacc.c  */
#line 1141 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 197:
/* Line 1787 of yacc.c  */
#line 1142 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 198:
/* Line 1787 of yacc.c  */
#line 1143 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 199:
/* Line 1787 of yacc.c  */
#line 1147 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 202:
/* Line 1787 of yacc.c  */
#line 1150 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 203:
/* Line 1787 of yacc.c  */
#line 1151 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 204:
/* Line 1787 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); }
    break;

  case 205:
/* Line 1787 of yacc.c  */
#line 1156 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 206:
/* Line 1787 of yacc.c  */
#line 1168 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); }
    break;

  case 207:
/* Line 1787 of yacc.c  */
#line 1169 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); }
    break;

  case 208:
/* Line 1787 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); }
    break;

  case 209:
/* Line 1787 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 210:
/* Line 1787 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 211:
/* Line 1787 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 212:
/* Line 1787 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); }
    break;

  case 213:
/* Line 1787 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 214:
/* Line 1787 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 215:
/* Line 1787 of yacc.c  */
#line 1180 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 216:
/* Line 1787 of yacc.c  */
#line 1184 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); }
    break;

  case 217:
/* Line 1787 of yacc.c  */
#line 1188 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); }
    break;

  case 218:
/* Line 1787 of yacc.c  */
#line 1189 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 219:
/* Line 1787 of yacc.c  */
#line 1193 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); }
    break;

  case 220:
/* Line 1787 of yacc.c  */
#line 1201 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 221:
/* Line 1787 of yacc.c  */
#line 1202 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); }
    break;

  case 225:
/* Line 1787 of yacc.c  */
#line 1212 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); }
    break;

  case 226:
/* Line 1787 of yacc.c  */
#line 1213 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); }
    break;

  case 230:
/* Line 1787 of yacc.c  */
#line 1220 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 231:
/* Line 1787 of yacc.c  */
#line 1221 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 232:
/* Line 1787 of yacc.c  */
#line 1222 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 233:
/* Line 1787 of yacc.c  */
#line 1262 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); }
    break;

  case 234:
/* Line 1787 of yacc.c  */
#line 1263 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 235:
/* Line 1787 of yacc.c  */
#line 1268 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   }
    break;

  case 236:
/* Line 1787 of yacc.c  */
#line 1275 "grammar.y"
    { (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 237:
/* Line 1787 of yacc.c  */
#line 1277 "grammar.y"
    {
      (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 238:
/* Line 1787 of yacc.c  */
#line 1284 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (3)].id)._class, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 239:
/* Line 1787 of yacc.c  */
#line 1285 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (3)].specifier).nsSpec, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 240:
/* Line 1787 of yacc.c  */
#line 1287 "grammar.y"
    { (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 241:
/* Line 1787 of yacc.c  */
#line 1289 "grammar.y"
    {
      (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (5)].specifier).nsSpec, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 242:
/* Line 1787 of yacc.c  */
#line 1297 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 243:
/* Line 1787 of yacc.c  */
#line 1298 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 244:
/* Line 1787 of yacc.c  */
#line 1303 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      }
    break;

  case 245:
/* Line 1787 of yacc.c  */
#line 1310 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 246:
/* Line 1787 of yacc.c  */
#line 1317 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 247:
/* Line 1787 of yacc.c  */
#line 1323 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 248:
/* Line 1787 of yacc.c  */
#line 1330 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[(2) - (3)].id)._class, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 249:
/* Line 1787 of yacc.c  */
#line 1336 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass((yyvsp[(2) - (3)].specifier).nsSpec, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 250:
/* Line 1787 of yacc.c  */
#line 1345 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      }
    break;

  case 251:
/* Line 1787 of yacc.c  */
#line 1352 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 252:
/* Line 1787 of yacc.c  */
#line 1358 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 253:
/* Line 1787 of yacc.c  */
#line 1364 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 254:
/* Line 1787 of yacc.c  */
#line 1370 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 255:
/* Line 1787 of yacc.c  */
#line 1376 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 256:
/* Line 1787 of yacc.c  */
#line 1382 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 257:
/* Line 1787 of yacc.c  */
#line 1393 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); }
    break;

  case 259:
/* Line 1787 of yacc.c  */
#line 1399 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 260:
/* Line 1787 of yacc.c  */
#line 1403 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 261:
/* Line 1787 of yacc.c  */
#line 1404 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 262:
/* Line 1787 of yacc.c  */
#line 1405 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 263:
/* Line 1787 of yacc.c  */
#line 1409 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 264:
/* Line 1787 of yacc.c  */
#line 1413 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 265:
/* Line 1787 of yacc.c  */
#line 1414 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 266:
/* Line 1787 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); }
    break;

  case 267:
/* Line 1787 of yacc.c  */
#line 1416 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 268:
/* Line 1787 of yacc.c  */
#line 1417 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 269:
/* Line 1787 of yacc.c  */
#line 1418 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); }
    break;

  case 270:
/* Line 1787 of yacc.c  */
#line 1420 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   }
    break;

  case 271:
/* Line 1787 of yacc.c  */
#line 1432 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); }
    break;

  case 273:
/* Line 1787 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 274:
/* Line 1787 of yacc.c  */
#line 1435 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); }
    break;

  case 275:
/* Line 1787 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 276:
/* Line 1787 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 277:
/* Line 1787 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 278:
/* Line 1787 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 279:
/* Line 1787 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 280:
/* Line 1787 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 281:
/* Line 1787 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 282:
/* Line 1787 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 283:
/* Line 1787 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 284:
/* Line 1787 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 285:
/* Line 1787 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 286:
/* Line 1787 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 287:
/* Line 1787 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 288:
/* Line 1787 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 289:
/* Line 1787 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 290:
/* Line 1787 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 291:
/* Line 1787 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); }
    break;

  case 292:
/* Line 1787 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); }
    break;

  case 293:
/* Line 1787 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 294:
/* Line 1787 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 295:
/* Line 1787 of yacc.c  */
#line 1457 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 300:
/* Line 1787 of yacc.c  */
#line 1463 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 301:
/* Line 1787 of yacc.c  */
#line 1464 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); }
    break;

  case 302:
/* Line 1787 of yacc.c  */
#line 1468 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 303:
/* Line 1787 of yacc.c  */
#line 1472 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 304:
/* Line 1787 of yacc.c  */
#line 1476 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 305:
/* Line 1787 of yacc.c  */
#line 1477 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 307:
/* Line 1787 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 308:
/* Line 1787 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 309:
/* Line 1787 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 310:
/* Line 1787 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 311:
/* Line 1787 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; }
    break;

  case 312:
/* Line 1787 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 313:
/* Line 1787 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 314:
/* Line 1787 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 315:
/* Line 1787 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 316:
/* Line 1787 of yacc.c  */
#line 1493 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 317:
/* Line 1787 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 318:
/* Line 1787 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 319:
/* Line 1787 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); }
    break;

  case 320:
/* Line 1787 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 321:
/* Line 1787 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 322:
/* Line 1787 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 323:
/* Line 1787 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 324:
/* Line 1787 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 325:
/* Line 1787 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 326:
/* Line 1787 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 327:
/* Line 1787 of yacc.c  */
#line 1530 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 328:
/* Line 1787 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 329:
/* Line 1787 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 330:
/* Line 1787 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 331:
/* Line 1787 of yacc.c  */
#line 1537 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 332:
/* Line 1787 of yacc.c  */
#line 1538 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); }
    break;

  case 333:
/* Line 1787 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 334:
/* Line 1787 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 335:
/* Line 1787 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 336:
/* Line 1787 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 337:
/* Line 1787 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 338:
/* Line 1787 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 339:
/* Line 1787 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 340:
/* Line 1787 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 341:
/* Line 1787 of yacc.c  */
#line 1553 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 342:
/* Line 1787 of yacc.c  */
#line 1554 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 343:
/* Line 1787 of yacc.c  */
#line 1556 "grammar.y"
    { (yyval.exp) = MkExpOffsetOf((yyvsp[(3) - (6)].typeName), (yyvsp[(5) - (6)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 346:
/* Line 1787 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.i) = '&'; }
    break;

  case 347:
/* Line 1787 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.i) = '*'; }
    break;

  case 348:
/* Line 1787 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.i) = '+'; }
    break;

  case 349:
/* Line 1787 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.i) = '-'; }
    break;

  case 350:
/* Line 1787 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.i) = '~'; }
    break;

  case 351:
/* Line 1787 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.i) = '!'; }
    break;

  case 352:
/* Line 1787 of yacc.c  */
#line 1576 "grammar.y"
    { (yyval.i) = DELETE; }
    break;

  case 353:
/* Line 1787 of yacc.c  */
#line 1577 "grammar.y"
    { (yyval.i) = _INCREF; }
    break;

  case 355:
/* Line 1787 of yacc.c  */
#line 1582 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 356:
/* Line 1787 of yacc.c  */
#line 1583 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 358:
/* Line 1787 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 359:
/* Line 1787 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 360:
/* Line 1787 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 361:
/* Line 1787 of yacc.c  */
#line 1591 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 362:
/* Line 1787 of yacc.c  */
#line 1592 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 363:
/* Line 1787 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 365:
/* Line 1787 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 366:
/* Line 1787 of yacc.c  */
#line 1599 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 367:
/* Line 1787 of yacc.c  */
#line 1600 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 368:
/* Line 1787 of yacc.c  */
#line 1601 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 370:
/* Line 1787 of yacc.c  */
#line 1606 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 371:
/* Line 1787 of yacc.c  */
#line 1607 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 372:
/* Line 1787 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 373:
/* Line 1787 of yacc.c  */
#line 1609 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 374:
/* Line 1787 of yacc.c  */
#line 1614 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   }
    break;

  case 376:
/* Line 1787 of yacc.c  */
#line 1622 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); }
    break;

  case 377:
/* Line 1787 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 378:
/* Line 1787 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 379:
/* Line 1787 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 380:
/* Line 1787 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 381:
/* Line 1787 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 382:
/* Line 1787 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 383:
/* Line 1787 of yacc.c  */
#line 1629 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 385:
/* Line 1787 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 386:
/* Line 1787 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 387:
/* Line 1787 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 388:
/* Line 1787 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 389:
/* Line 1787 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 390:
/* Line 1787 of yacc.c  */
#line 1640 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 391:
/* Line 1787 of yacc.c  */
#line 1641 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 392:
/* Line 1787 of yacc.c  */
#line 1642 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 394:
/* Line 1787 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 395:
/* Line 1787 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 396:
/* Line 1787 of yacc.c  */
#line 1650 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 397:
/* Line 1787 of yacc.c  */
#line 1651 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 399:
/* Line 1787 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 400:
/* Line 1787 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 401:
/* Line 1787 of yacc.c  */
#line 1659 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 402:
/* Line 1787 of yacc.c  */
#line 1660 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 404:
/* Line 1787 of yacc.c  */
#line 1665 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 405:
/* Line 1787 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 406:
/* Line 1787 of yacc.c  */
#line 1668 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 407:
/* Line 1787 of yacc.c  */
#line 1669 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 409:
/* Line 1787 of yacc.c  */
#line 1674 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 410:
/* Line 1787 of yacc.c  */
#line 1675 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 412:
/* Line 1787 of yacc.c  */
#line 1680 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 413:
/* Line 1787 of yacc.c  */
#line 1681 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 415:
/* Line 1787 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 416:
/* Line 1787 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 417:
/* Line 1787 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 418:
/* Line 1787 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 419:
/* Line 1787 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 420:
/* Line 1787 of yacc.c  */
#line 1692 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 421:
/* Line 1787 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 422:
/* Line 1787 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 423:
/* Line 1787 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 424:
/* Line 1787 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 425:
/* Line 1787 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 426:
/* Line 1787 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 427:
/* Line 1787 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 428:
/* Line 1787 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 429:
/* Line 1787 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 430:
/* Line 1787 of yacc.c  */
#line 1704 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 432:
/* Line 1787 of yacc.c  */
#line 1709 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 433:
/* Line 1787 of yacc.c  */
#line 1710 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 434:
/* Line 1787 of yacc.c  */
#line 1711 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 435:
/* Line 1787 of yacc.c  */
#line 1712 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 436:
/* Line 1787 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 437:
/* Line 1787 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 438:
/* Line 1787 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 439:
/* Line 1787 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 440:
/* Line 1787 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.i) = '='; }
    break;

  case 441:
/* Line 1787 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; }
    break;

  case 442:
/* Line 1787 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; }
    break;

  case 443:
/* Line 1787 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; }
    break;

  case 444:
/* Line 1787 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; }
    break;

  case 445:
/* Line 1787 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; }
    break;

  case 446:
/* Line 1787 of yacc.c  */
#line 1727 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; }
    break;

  case 447:
/* Line 1787 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; }
    break;

  case 448:
/* Line 1787 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.i) = AND_ASSIGN; }
    break;

  case 449:
/* Line 1787 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; }
    break;

  case 450:
/* Line 1787 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.i) = OR_ASSIGN; }
    break;

  case 451:
/* Line 1787 of yacc.c  */
#line 1735 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 452:
/* Line 1787 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 453:
/* Line 1787 of yacc.c  */
#line 1737 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 455:
/* Line 1787 of yacc.c  */
#line 1742 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 456:
/* Line 1787 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 457:
/* Line 1787 of yacc.c  */
#line 1744 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 459:
/* Line 1787 of yacc.c  */
#line 1749 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ }
    break;

  case 461:
/* Line 1787 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 462:
/* Line 1787 of yacc.c  */
#line 1753 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 463:
/* Line 1787 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 464:
/* Line 1787 of yacc.c  */
#line 1756 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 465:
/* Line 1787 of yacc.c  */
#line 1757 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 466:
/* Line 1787 of yacc.c  */
#line 1762 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 467:
/* Line 1787 of yacc.c  */
#line 1764 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 468:
/* Line 1787 of yacc.c  */
#line 1769 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 469:
/* Line 1787 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 470:
/* Line 1787 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 471:
/* Line 1787 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 472:
/* Line 1787 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 473:
/* Line 1787 of yacc.c  */
#line 1802 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 474:
/* Line 1787 of yacc.c  */
#line 1803 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 475:
/* Line 1787 of yacc.c  */
#line 1804 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 476:
/* Line 1787 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 477:
/* Line 1787 of yacc.c  */
#line 1807 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 478:
/* Line 1787 of yacc.c  */
#line 1808 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 482:
/* Line 1787 of yacc.c  */
#line 1823 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 484:
/* Line 1787 of yacc.c  */
#line 1828 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 485:
/* Line 1787 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 486:
/* Line 1787 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 487:
/* Line 1787 of yacc.c  */
#line 1831 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 488:
/* Line 1787 of yacc.c  */
#line 1832 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 489:
/* Line 1787 of yacc.c  */
#line 1833 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 491:
/* Line 1787 of yacc.c  */
#line 1838 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 492:
/* Line 1787 of yacc.c  */
#line 1842 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 493:
/* Line 1787 of yacc.c  */
#line 1846 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 494:
/* Line 1787 of yacc.c  */
#line 1850 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 496:
/* Line 1787 of yacc.c  */
#line 1858 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 497:
/* Line 1787 of yacc.c  */
#line 1859 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 498:
/* Line 1787 of yacc.c  */
#line 1860 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 499:
/* Line 1787 of yacc.c  */
#line 1861 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 501:
/* Line 1787 of yacc.c  */
#line 1867 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         _DeclClass((yyvsp[(1) - (2)].exp).identifier._class, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   }
    break;

  case 502:
/* Line 1787 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 503:
/* Line 1787 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 504:
/* Line 1787 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 505:
/* Line 1787 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 506:
/* Line 1787 of yacc.c  */
#line 1913 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 507:
/* Line 1787 of yacc.c  */
#line 1914 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 508:
/* Line 1787 of yacc.c  */
#line 1915 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 510:
/* Line 1787 of yacc.c  */
#line 1920 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 511:
/* Line 1787 of yacc.c  */
#line 1921 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 512:
/* Line 1787 of yacc.c  */
#line 1922 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 513:
/* Line 1787 of yacc.c  */
#line 1923 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 514:
/* Line 1787 of yacc.c  */
#line 1930 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 515:
/* Line 1787 of yacc.c  */
#line 1931 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 516:
/* Line 1787 of yacc.c  */
#line 1932 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 517:
/* Line 1787 of yacc.c  */
#line 1933 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 519:
/* Line 1787 of yacc.c  */
#line 1938 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 520:
/* Line 1787 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 521:
/* Line 1787 of yacc.c  */
#line 1941 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 522:
/* Line 1787 of yacc.c  */
#line 1942 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 524:
/* Line 1787 of yacc.c  */
#line 1947 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 525:
/* Line 1787 of yacc.c  */
#line 1948 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 526:
/* Line 1787 of yacc.c  */
#line 1950 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 527:
/* Line 1787 of yacc.c  */
#line 1951 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 529:
/* Line 1787 of yacc.c  */
#line 1956 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 530:
/* Line 1787 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 531:
/* Line 1787 of yacc.c  */
#line 1959 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 532:
/* Line 1787 of yacc.c  */
#line 1960 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 534:
/* Line 1787 of yacc.c  */
#line 1965 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 535:
/* Line 1787 of yacc.c  */
#line 1966 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 537:
/* Line 1787 of yacc.c  */
#line 1971 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 538:
/* Line 1787 of yacc.c  */
#line 1972 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 540:
/* Line 1787 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 541:
/* Line 1787 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 542:
/* Line 1787 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 543:
/* Line 1787 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 544:
/* Line 1787 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 545:
/* Line 1787 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 546:
/* Line 1787 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 547:
/* Line 1787 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 548:
/* Line 1787 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 549:
/* Line 1787 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 550:
/* Line 1787 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 551:
/* Line 1787 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 552:
/* Line 1787 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 553:
/* Line 1787 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 554:
/* Line 1787 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 555:
/* Line 1787 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 556:
/* Line 1787 of yacc.c  */
#line 1995 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 557:
/* Line 1787 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 558:
/* Line 1787 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 559:
/* Line 1787 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 560:
/* Line 1787 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 561:
/* Line 1787 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 562:
/* Line 1787 of yacc.c  */
#line 2002 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 563:
/* Line 1787 of yacc.c  */
#line 2003 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 564:
/* Line 1787 of yacc.c  */
#line 2006 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 565:
/* Line 1787 of yacc.c  */
#line 2014 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 566:
/* Line 1787 of yacc.c  */
#line 2018 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 567:
/* Line 1787 of yacc.c  */
#line 2023 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 569:
/* Line 1787 of yacc.c  */
#line 2030 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 570:
/* Line 1787 of yacc.c  */
#line 2034 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 571:
/* Line 1787 of yacc.c  */
#line 2039 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 572:
/* Line 1787 of yacc.c  */
#line 2040 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 573:
/* Line 1787 of yacc.c  */
#line 2044 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 574:
/* Line 1787 of yacc.c  */
#line 2045 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 575:
/* Line 1787 of yacc.c  */
#line 2046 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 576:
/* Line 1787 of yacc.c  */
#line 2047 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 577:
/* Line 1787 of yacc.c  */
#line 2053 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 578:
/* Line 1787 of yacc.c  */
#line 2054 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 579:
/* Line 1787 of yacc.c  */
#line 2055 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 580:
/* Line 1787 of yacc.c  */
#line 2059 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 581:
/* Line 1787 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 582:
/* Line 1787 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 583:
/* Line 1787 of yacc.c  */
#line 2062 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 586:
/* Line 1787 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); }
    break;

  case 587:
/* Line 1787 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 588:
/* Line 1787 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); }
    break;

  case 589:
/* Line 1787 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 590:
/* Line 1787 of yacc.c  */
#line 2076 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 591:
/* Line 1787 of yacc.c  */
#line 2077 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 592:
/* Line 1787 of yacc.c  */
#line 2078 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 593:
/* Line 1787 of yacc.c  */
#line 2082 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; }
    break;

  case 594:
/* Line 1787 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 595:
/* Line 1787 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; }
    break;

  case 596:
/* Line 1787 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 597:
/* Line 1787 of yacc.c  */
#line 2086 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 598:
/* Line 1787 of yacc.c  */
#line 2087 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 599:
/* Line 1787 of yacc.c  */
#line 2088 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 600:
/* Line 1787 of yacc.c  */
#line 2092 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null, null); }
    break;

  case 601:
/* Line 1787 of yacc.c  */
#line 2093 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 602:
/* Line 1787 of yacc.c  */
#line 2094 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 603:
/* Line 1787 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (2)].id), null, (yyvsp[(2) - (2)].list)); }
    break;

  case 604:
/* Line 1787 of yacc.c  */
#line 2096 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 605:
/* Line 1787 of yacc.c  */
#line 2097 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 606:
/* Line 1787 of yacc.c  */
#line 2101 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); }
    break;

  case 607:
/* Line 1787 of yacc.c  */
#line 2102 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); }
    break;

  case 609:
/* Line 1787 of yacc.c  */
#line 2107 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 610:
/* Line 1787 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 611:
/* Line 1787 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS; }
    break;

  case 612:
/* Line 1787 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); }
    break;

  case 613:
/* Line 1787 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 614:
/* Line 1787 of yacc.c  */
#line 2118 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 615:
/* Line 1787 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 616:
/* Line 1787 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 617:
/* Line 1787 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 618:
/* Line 1787 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 619:
/* Line 1787 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 620:
/* Line 1787 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 621:
/* Line 1787 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 622:
/* Line 1787 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 623:
/* Line 1787 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 624:
/* Line 1787 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 625:
/* Line 1787 of yacc.c  */
#line 2134 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 626:
/* Line 1787 of yacc.c  */
#line 2135 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 627:
/* Line 1787 of yacc.c  */
#line 2137 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 628:
/* Line 1787 of yacc.c  */
#line 2138 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 629:
/* Line 1787 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); }
    break;

  case 630:
/* Line 1787 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 631:
/* Line 1787 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 632:
/* Line 1787 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 633:
/* Line 1787 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 634:
/* Line 1787 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 635:
/* Line 1787 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 636:
/* Line 1787 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 637:
/* Line 1787 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 638:
/* Line 1787 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 639:
/* Line 1787 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 640:
/* Line 1787 of yacc.c  */
#line 2159 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 641:
/* Line 1787 of yacc.c  */
#line 2160 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 642:
/* Line 1787 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 643:
/* Line 1787 of yacc.c  */
#line 2163 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 644:
/* Line 1787 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 645:
/* Line 1787 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 646:
/* Line 1787 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 647:
/* Line 1787 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 648:
/* Line 1787 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 649:
/* Line 1787 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 650:
/* Line 1787 of yacc.c  */
#line 2172 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 651:
/* Line 1787 of yacc.c  */
#line 2173 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 652:
/* Line 1787 of yacc.c  */
#line 2174 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 653:
/* Line 1787 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 658:
/* Line 1787 of yacc.c  */
#line 2189 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); }
    break;

  case 659:
/* Line 1787 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); }
    break;

  case 660:
/* Line 1787 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); }
    break;

  case 661:
/* Line 1787 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 662:
/* Line 1787 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 663:
/* Line 1787 of yacc.c  */
#line 2201 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  }
    break;

  case 664:
/* Line 1787 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 665:
/* Line 1787 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 666:
/* Line 1787 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 667:
/* Line 1787 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 668:
/* Line 1787 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 669:
/* Line 1787 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 670:
/* Line 1787 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 671:
/* Line 1787 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 672:
/* Line 1787 of yacc.c  */
#line 2213 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 673:
/* Line 1787 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 674:
/* Line 1787 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 675:
/* Line 1787 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 676:
/* Line 1787 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 677:
/* Line 1787 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 678:
/* Line 1787 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 682:
/* Line 1787 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 683:
/* Line 1787 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 684:
/* Line 1787 of yacc.c  */
#line 2225 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 685:
/* Line 1787 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 686:
/* Line 1787 of yacc.c  */
#line 2227 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); }
    break;

  case 687:
/* Line 1787 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); }
    break;

  case 688:
/* Line 1787 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 689:
/* Line 1787 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 690:
/* Line 1787 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 691:
/* Line 1787 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 692:
/* Line 1787 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 693:
/* Line 1787 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 694:
/* Line 1787 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 695:
/* Line 1787 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 696:
/* Line 1787 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 697:
/* Line 1787 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 698:
/* Line 1787 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 699:
/* Line 1787 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 700:
/* Line 1787 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 701:
/* Line 1787 of yacc.c  */
#line 2245 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 702:
/* Line 1787 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 703:
/* Line 1787 of yacc.c  */
#line 2247 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 704:
/* Line 1787 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 705:
/* Line 1787 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 706:
/* Line 1787 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 710:
/* Line 1787 of yacc.c  */
#line 2254 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 711:
/* Line 1787 of yacc.c  */
#line 2255 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 712:
/* Line 1787 of yacc.c  */
#line 2256 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 713:
/* Line 1787 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 714:
/* Line 1787 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 715:
/* Line 1787 of yacc.c  */
#line 2259 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 716:
/* Line 1787 of yacc.c  */
#line 2260 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 717:
/* Line 1787 of yacc.c  */
#line 2261 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 718:
/* Line 1787 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); }
    break;

  case 719:
/* Line 1787 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); }
    break;

  case 720:
/* Line 1787 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 721:
/* Line 1787 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 722:
/* Line 1787 of yacc.c  */
#line 2276 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 723:
/* Line 1787 of yacc.c  */
#line 2278 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 724:
/* Line 1787 of yacc.c  */
#line 2280 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 725:
/* Line 1787 of yacc.c  */
#line 2282 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 726:
/* Line 1787 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 727:
/* Line 1787 of yacc.c  */
#line 2286 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 728:
/* Line 1787 of yacc.c  */
#line 2290 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); }
    break;

  case 729:
/* Line 1787 of yacc.c  */
#line 2291 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); }
    break;

  case 730:
/* Line 1787 of yacc.c  */
#line 2296 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 731:
/* Line 1787 of yacc.c  */
#line 2302 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      }
    break;

  case 732:
/* Line 1787 of yacc.c  */
#line 2308 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 733:
/* Line 1787 of yacc.c  */
#line 2315 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      }
    break;

  case 734:
/* Line 1787 of yacc.c  */
#line 2324 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 735:
/* Line 1787 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 736:
/* Line 1787 of yacc.c  */
#line 2326 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 737:
/* Line 1787 of yacc.c  */
#line 2327 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 738:
/* Line 1787 of yacc.c  */
#line 2331 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 739:
/* Line 1787 of yacc.c  */
#line 2332 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 740:
/* Line 1787 of yacc.c  */
#line 2333 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 741:
/* Line 1787 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 742:
/* Line 1787 of yacc.c  */
#line 2336 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 743:
/* Line 1787 of yacc.c  */
#line 2337 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 744:
/* Line 1787 of yacc.c  */
#line 2339 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 745:
/* Line 1787 of yacc.c  */
#line 2340 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 746:
/* Line 1787 of yacc.c  */
#line 2341 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 747:
/* Line 1787 of yacc.c  */
#line 2345 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 748:
/* Line 1787 of yacc.c  */
#line 2350 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (1)].specifier).id._class, (yyvsp[(1) - (1)].specifier).id.string);
        }
     }
    break;

  case 749:
/* Line 1787 of yacc.c  */
#line 2358 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (4)].specifier).id._class, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   }
    break;

  case 750:
/* Line 1787 of yacc.c  */
#line 2367 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   }
    break;

  case 751:
/* Line 1787 of yacc.c  */
#line 2375 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 752:
/* Line 1787 of yacc.c  */
#line 2377 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 753:
/* Line 1787 of yacc.c  */
#line 2378 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 754:
/* Line 1787 of yacc.c  */
#line 2379 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 755:
/* Line 1787 of yacc.c  */
#line 2384 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 756:
/* Line 1787 of yacc.c  */
#line 2391 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 757:
/* Line 1787 of yacc.c  */
#line 2398 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);}
    break;

  case 758:
/* Line 1787 of yacc.c  */
#line 2401 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           (yyval.specifier).ctx = (yyvsp[(1) - (3)].specifier).ctx;
           (yyvsp[(1) - (3)].specifier).ctx = null;

           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 759:
/* Line 1787 of yacc.c  */
#line 2417 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 760:
/* Line 1787 of yacc.c  */
#line 2431 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 761:
/* Line 1787 of yacc.c  */
#line 2434 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS;  }
    break;

  case 762:
/* Line 1787 of yacc.c  */
#line 2436 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 763:
/* Line 1787 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 764:
/* Line 1787 of yacc.c  */
#line 2442 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 765:
/* Line 1787 of yacc.c  */
#line 2443 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 766:
/* Line 1787 of yacc.c  */
#line 2447 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 767:
/* Line 1787 of yacc.c  */
#line 2448 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 768:
/* Line 1787 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 769:
/* Line 1787 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 770:
/* Line 1787 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 771:
/* Line 1787 of yacc.c  */
#line 2452 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 772:
/* Line 1787 of yacc.c  */
#line 2453 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 773:
/* Line 1787 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 774:
/* Line 1787 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 775:
/* Line 1787 of yacc.c  */
#line 2459 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 776:
/* Line 1787 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 777:
/* Line 1787 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 778:
/* Line 1787 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 779:
/* Line 1787 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 780:
/* Line 1787 of yacc.c  */
#line 2464 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 781:
/* Line 1787 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 782:
/* Line 1787 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 783:
/* Line 1787 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 784:
/* Line 1787 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 785:
/* Line 1787 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 786:
/* Line 1787 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 787:
/* Line 1787 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 788:
/* Line 1787 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 789:
/* Line 1787 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 790:
/* Line 1787 of yacc.c  */
#line 2477 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 791:
/* Line 1787 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 792:
/* Line 1787 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 793:
/* Line 1787 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 794:
/* Line 1787 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 795:
/* Line 1787 of yacc.c  */
#line 2485 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 796:
/* Line 1787 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 797:
/* Line 1787 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 798:
/* Line 1787 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 799:
/* Line 1787 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 800:
/* Line 1787 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 801:
/* Line 1787 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 802:
/* Line 1787 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 803:
/* Line 1787 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 804:
/* Line 1787 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 805:
/* Line 1787 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 806:
/* Line 1787 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 807:
/* Line 1787 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 808:
/* Line 1787 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 809:
/* Line 1787 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 810:
/* Line 1787 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 811:
/* Line 1787 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 812:
/* Line 1787 of yacc.c  */
#line 2505 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 813:
/* Line 1787 of yacc.c  */
#line 2506 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 814:
/* Line 1787 of yacc.c  */
#line 2507 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 815:
/* Line 1787 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 816:
/* Line 1787 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 817:
/* Line 1787 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 818:
/* Line 1787 of yacc.c  */
#line 2517 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); }
    break;

  case 819:
/* Line 1787 of yacc.c  */
#line 2518 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); }
    break;

  case 820:
/* Line 1787 of yacc.c  */
#line 2519 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 821:
/* Line 1787 of yacc.c  */
#line 2520 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 822:
/* Line 1787 of yacc.c  */
#line 2521 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 823:
/* Line 1787 of yacc.c  */
#line 2522 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 824:
/* Line 1787 of yacc.c  */
#line 2523 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 825:
/* Line 1787 of yacc.c  */
#line 2524 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 826:
/* Line 1787 of yacc.c  */
#line 2526 "grammar.y"
    { _DeclClass((yyvsp[(1) - (1)].id)._class, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 827:
/* Line 1787 of yacc.c  */
#line 2527 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 828:
/* Line 1787 of yacc.c  */
#line 2530 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 829:
/* Line 1787 of yacc.c  */
#line 2538 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 831:
/* Line 1787 of yacc.c  */
#line 2548 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS; }
    break;

  case 832:
/* Line 1787 of yacc.c  */
#line 2552 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 833:
/* Line 1787 of yacc.c  */
#line 2553 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 834:
/* Line 1787 of yacc.c  */
#line 2554 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 835:
/* Line 1787 of yacc.c  */
#line 2555 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 836:
/* Line 1787 of yacc.c  */
#line 2556 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 837:
/* Line 1787 of yacc.c  */
#line 2557 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 838:
/* Line 1787 of yacc.c  */
#line 2558 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 839:
/* Line 1787 of yacc.c  */
#line 2559 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 840:
/* Line 1787 of yacc.c  */
#line 2561 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 841:
/* Line 1787 of yacc.c  */
#line 2569 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 842:
/* Line 1787 of yacc.c  */
#line 2577 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 843:
/* Line 1787 of yacc.c  */
#line 2578 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 844:
/* Line 1787 of yacc.c  */
#line 2579 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 845:
/* Line 1787 of yacc.c  */
#line 2580 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 846:
/* Line 1787 of yacc.c  */
#line 2581 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 847:
/* Line 1787 of yacc.c  */
#line 2582 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 848:
/* Line 1787 of yacc.c  */
#line 2583 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 849:
/* Line 1787 of yacc.c  */
#line 2584 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 850:
/* Line 1787 of yacc.c  */
#line 2585 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 851:
/* Line 1787 of yacc.c  */
#line 2586 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 852:
/* Line 1787 of yacc.c  */
#line 2587 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 853:
/* Line 1787 of yacc.c  */
#line 2588 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 854:
/* Line 1787 of yacc.c  */
#line 2590 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 855:
/* Line 1787 of yacc.c  */
#line 2598 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 856:
/* Line 1787 of yacc.c  */
#line 2606 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 857:
/* Line 1787 of yacc.c  */
#line 2607 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 858:
/* Line 1787 of yacc.c  */
#line 2608 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 859:
/* Line 1787 of yacc.c  */
#line 2609 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 860:
/* Line 1787 of yacc.c  */
#line 2610 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 861:
/* Line 1787 of yacc.c  */
#line 2611 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 862:
/* Line 1787 of yacc.c  */
#line 2612 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 863:
/* Line 1787 of yacc.c  */
#line 2613 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 864:
/* Line 1787 of yacc.c  */
#line 2614 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 865:
/* Line 1787 of yacc.c  */
#line 2615 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 866:
/* Line 1787 of yacc.c  */
#line 2616 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 867:
/* Line 1787 of yacc.c  */
#line 2617 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 868:
/* Line 1787 of yacc.c  */
#line 2619 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 869:
/* Line 1787 of yacc.c  */
#line 2627 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 870:
/* Line 1787 of yacc.c  */
#line 2635 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 871:
/* Line 1787 of yacc.c  */
#line 2636 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 872:
/* Line 1787 of yacc.c  */
#line 2640 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); }
    break;

  case 873:
/* Line 1787 of yacc.c  */
#line 2641 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 874:
/* Line 1787 of yacc.c  */
#line 2642 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 875:
/* Line 1787 of yacc.c  */
#line 2643 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 876:
/* Line 1787 of yacc.c  */
#line 2644 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 878:
/* Line 1787 of yacc.c  */
#line 2650 "grammar.y"
    {
      char * colon = (yyvsp[(1) - (1)].specifier).name ? RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false) : null;
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   }
    break;

  case 879:
/* Line 1787 of yacc.c  */
#line 2656 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); }
    break;

  case 880:
/* Line 1787 of yacc.c  */
#line 2659 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 881:
/* Line 1787 of yacc.c  */
#line 2668 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 882:
/* Line 1787 of yacc.c  */
#line 2677 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      }
    break;

  case 883:
/* Line 1787 of yacc.c  */
#line 2686 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      }
    break;

  case 884:
/* Line 1787 of yacc.c  */
#line 2694 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 885:
/* Line 1787 of yacc.c  */
#line 2695 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 886:
/* Line 1787 of yacc.c  */
#line 2696 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 887:
/* Line 1787 of yacc.c  */
#line 2697 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 888:
/* Line 1787 of yacc.c  */
#line 2701 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 889:
/* Line 1787 of yacc.c  */
#line 2702 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 890:
/* Line 1787 of yacc.c  */
#line 2703 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 891:
/* Line 1787 of yacc.c  */
#line 2704 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 892:
/* Line 1787 of yacc.c  */
#line 2705 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 893:
/* Line 1787 of yacc.c  */
#line 2706 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 894:
/* Line 1787 of yacc.c  */
#line 2707 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 895:
/* Line 1787 of yacc.c  */
#line 2708 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 896:
/* Line 1787 of yacc.c  */
#line 2709 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 898:
/* Line 1787 of yacc.c  */
#line 2717 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 899:
/* Line 1787 of yacc.c  */
#line 2718 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 900:
/* Line 1787 of yacc.c  */
#line 2719 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 901:
/* Line 1787 of yacc.c  */
#line 2720 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 902:
/* Line 1787 of yacc.c  */
#line 2721 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 903:
/* Line 1787 of yacc.c  */
#line 2727 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 904:
/* Line 1787 of yacc.c  */
#line 2736 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 905:
/* Line 1787 of yacc.c  */
#line 2745 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 906:
/* Line 1787 of yacc.c  */
#line 2754 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 910:
/* Line 1787 of yacc.c  */
#line 2777 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 911:
/* Line 1787 of yacc.c  */
#line 2778 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 912:
/* Line 1787 of yacc.c  */
#line 2779 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 913:
/* Line 1787 of yacc.c  */
#line 2780 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 914:
/* Line 1787 of yacc.c  */
#line 2781 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 915:
/* Line 1787 of yacc.c  */
#line 2787 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 916:
/* Line 1787 of yacc.c  */
#line 2796 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 917:
/* Line 1787 of yacc.c  */
#line 2805 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 918:
/* Line 1787 of yacc.c  */
#line 2814 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 921:
/* Line 1787 of yacc.c  */
#line 2877 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 922:
/* Line 1787 of yacc.c  */
#line 2878 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 923:
/* Line 1787 of yacc.c  */
#line 2881 "grammar.y"
    {
         TempFile f { };
         OutputExtDecl((yyvsp[(1) - (2)].extDecl), f);
         f.Putc(' ');
         f.Puts(yytext);
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExtDecl((yyvsp[(1) - (2)].extDecl));
         delete f;
      }
    break;

  case 924:
/* Line 1787 of yacc.c  */
#line 2892 "grammar.y"
    {
         TempFile f { };
         OutputExtDecl((yyvsp[(1) - (2)].extDecl), f);
         f.Putc(' ');
         f.Puts(yytext);
         f.Putc(0);
         (yyval.extDecl) = MkExtDeclString((String)f.StealBuffer());
         FreeExtDecl((yyvsp[(1) - (2)].extDecl));
         delete f;
      }
    break;

  case 925:
/* Line 1787 of yacc.c  */
#line 2902 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 926:
/* Line 1787 of yacc.c  */
#line 2903 "grammar.y"
    { (yyval.extDecl) = MkExtDeclMultiAttrib((yyvsp[(1) - (1)].list)); }
    break;

  case 927:
/* Line 1787 of yacc.c  */
#line 2905 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      }
    break;

  case 928:
/* Line 1787 of yacc.c  */
#line 2916 "grammar.y"
    { (yyval.i) = ATTRIB; }
    break;

  case 929:
/* Line 1787 of yacc.c  */
#line 2917 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; }
    break;

  case 930:
/* Line 1787 of yacc.c  */
#line 2918 "grammar.y"
    { (yyval.i) = __ATTRIB; }
    break;

  case 931:
/* Line 1787 of yacc.c  */
#line 2923 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 932:
/* Line 1787 of yacc.c  */
#line 2924 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 933:
/* Line 1787 of yacc.c  */
#line 2925 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 934:
/* Line 1787 of yacc.c  */
#line 2926 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 935:
/* Line 1787 of yacc.c  */
#line 2927 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 936:
/* Line 1787 of yacc.c  */
#line 2931 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); }
    break;

  case 937:
/* Line 1787 of yacc.c  */
#line 2932 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); }
    break;

  case 938:
/* Line 1787 of yacc.c  */
#line 2936 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); }
    break;

  case 939:
/* Line 1787 of yacc.c  */
#line 2937 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 940:
/* Line 1787 of yacc.c  */
#line 2938 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 941:
/* Line 1787 of yacc.c  */
#line 2942 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); }
    break;

  case 942:
/* Line 1787 of yacc.c  */
#line 2943 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); }
    break;

  case 943:
/* Line 1787 of yacc.c  */
#line 2947 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attrib)); }
    break;

  case 944:
/* Line 1787 of yacc.c  */
#line 2948 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attrib)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 945:
/* Line 1787 of yacc.c  */
#line 2952 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 946:
/* Line 1787 of yacc.c  */
#line 2953 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 947:
/* Line 1787 of yacc.c  */
#line 2954 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); }
    break;

  case 948:
/* Line 1787 of yacc.c  */
#line 2955 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 949:
/* Line 1787 of yacc.c  */
#line 2956 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 950:
/* Line 1787 of yacc.c  */
#line 2957 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); }
    break;

  case 951:
/* Line 1787 of yacc.c  */
#line 2958 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 952:
/* Line 1787 of yacc.c  */
#line 2959 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 953:
/* Line 1787 of yacc.c  */
#line 2960 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 954:
/* Line 1787 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 955:
/* Line 1787 of yacc.c  */
#line 2962 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 956:
/* Line 1787 of yacc.c  */
#line 2963 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 957:
/* Line 1787 of yacc.c  */
#line 2964 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 958:
/* Line 1787 of yacc.c  */
#line 2965 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 959:
/* Line 1787 of yacc.c  */
#line 2966 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 960:
/* Line 1787 of yacc.c  */
#line 2967 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 961:
/* Line 1787 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 962:
/* Line 1787 of yacc.c  */
#line 2972 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 963:
/* Line 1787 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 964:
/* Line 1787 of yacc.c  */
#line 2974 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 965:
/* Line 1787 of yacc.c  */
#line 2975 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 966:
/* Line 1787 of yacc.c  */
#line 2976 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 967:
/* Line 1787 of yacc.c  */
#line 2977 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 968:
/* Line 1787 of yacc.c  */
#line 2978 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 969:
/* Line 1787 of yacc.c  */
#line 2982 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); }
    break;

  case 970:
/* Line 1787 of yacc.c  */
#line 2983 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); }
    break;

  case 971:
/* Line 1787 of yacc.c  */
#line 2984 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); }
    break;

  case 972:
/* Line 1787 of yacc.c  */
#line 2985 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); }
    break;

  case 973:
/* Line 1787 of yacc.c  */
#line 2989 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 975:
/* Line 1787 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 976:
/* Line 1787 of yacc.c  */
#line 2992 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 977:
/* Line 1787 of yacc.c  */
#line 2993 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 978:
/* Line 1787 of yacc.c  */
#line 2997 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 980:
/* Line 1787 of yacc.c  */
#line 2999 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 981:
/* Line 1787 of yacc.c  */
#line 3000 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 982:
/* Line 1787 of yacc.c  */
#line 3001 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 984:
/* Line 1787 of yacc.c  */
#line 3007 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 985:
/* Line 1787 of yacc.c  */
#line 3009 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 986:
/* Line 1787 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 987:
/* Line 1787 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 989:
/* Line 1787 of yacc.c  */
#line 3019 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 990:
/* Line 1787 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 991:
/* Line 1787 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 993:
/* Line 1787 of yacc.c  */
#line 3028 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 994:
/* Line 1787 of yacc.c  */
#line 3029 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 995:
/* Line 1787 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 997:
/* Line 1787 of yacc.c  */
#line 3035 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 998:
/* Line 1787 of yacc.c  */
#line 3036 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 999:
/* Line 1787 of yacc.c  */
#line 3037 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1001:
/* Line 1787 of yacc.c  */
#line 3042 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1002:
/* Line 1787 of yacc.c  */
#line 3043 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1003:
/* Line 1787 of yacc.c  */
#line 3044 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1005:
/* Line 1787 of yacc.c  */
#line 3049 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1006:
/* Line 1787 of yacc.c  */
#line 3050 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1007:
/* Line 1787 of yacc.c  */
#line 3051 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1009:
/* Line 1787 of yacc.c  */
#line 3056 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1010:
/* Line 1787 of yacc.c  */
#line 3057 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1011:
/* Line 1787 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1012:
/* Line 1787 of yacc.c  */
#line 3062 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1013:
/* Line 1787 of yacc.c  */
#line 3063 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1014:
/* Line 1787 of yacc.c  */
#line 3065 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1015:
/* Line 1787 of yacc.c  */
#line 3081 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1016:
/* Line 1787 of yacc.c  */
#line 3083 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1017:
/* Line 1787 of yacc.c  */
#line 3099 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1018:
/* Line 1787 of yacc.c  */
#line 3100 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1019:
/* Line 1787 of yacc.c  */
#line 3101 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1020:
/* Line 1787 of yacc.c  */
#line 3103 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      }
    break;

  case 1021:
/* Line 1787 of yacc.c  */
#line 3116 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      }
    break;

  case 1022:
/* Line 1787 of yacc.c  */
#line 3132 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1023:
/* Line 1787 of yacc.c  */
#line 3134 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1024:
/* Line 1787 of yacc.c  */
#line 3138 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1025:
/* Line 1787 of yacc.c  */
#line 3139 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1026:
/* Line 1787 of yacc.c  */
#line 3143 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1027:
/* Line 1787 of yacc.c  */
#line 3144 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1028:
/* Line 1787 of yacc.c  */
#line 3145 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1029:
/* Line 1787 of yacc.c  */
#line 3146 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1030:
/* Line 1787 of yacc.c  */
#line 3149 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1031:
/* Line 1787 of yacc.c  */
#line 3150 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1032:
/* Line 1787 of yacc.c  */
#line 3154 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1033:
/* Line 1787 of yacc.c  */
#line 3155 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1034:
/* Line 1787 of yacc.c  */
#line 3156 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1035:
/* Line 1787 of yacc.c  */
#line 3160 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1036:
/* Line 1787 of yacc.c  */
#line 3164 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1037:
/* Line 1787 of yacc.c  */
#line 3168 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1038:
/* Line 1787 of yacc.c  */
#line 3169 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1039:
/* Line 1787 of yacc.c  */
#line 3170 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1040:
/* Line 1787 of yacc.c  */
#line 3171 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1041:
/* Line 1787 of yacc.c  */
#line 3172 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__int128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1042:
/* Line 1787 of yacc.c  */
#line 3173 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__float128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1043:
/* Line 1787 of yacc.c  */
#line 3175 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   }
    break;

  case 1044:
/* Line 1787 of yacc.c  */
#line 3183 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1045:
/* Line 1787 of yacc.c  */
#line 3192 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1046:
/* Line 1787 of yacc.c  */
#line 3193 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); }
    break;

  case 1047:
/* Line 1787 of yacc.c  */
#line 3194 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1048:
/* Line 1787 of yacc.c  */
#line 3195 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1049:
/* Line 1787 of yacc.c  */
#line 3199 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1050:
/* Line 1787 of yacc.c  */
#line 3200 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1051:
/* Line 1787 of yacc.c  */
#line 3204 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1052:
/* Line 1787 of yacc.c  */
#line 3205 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1053:
/* Line 1787 of yacc.c  */
#line 3210 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1054:
/* Line 1787 of yacc.c  */
#line 3211 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1055:
/* Line 1787 of yacc.c  */
#line 3212 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); }
    break;

  case 1056:
/* Line 1787 of yacc.c  */
#line 3213 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1057:
/* Line 1787 of yacc.c  */
#line 3214 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); }
    break;

  case 1058:
/* Line 1787 of yacc.c  */
#line 3216 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); }
    break;

  case 1059:
/* Line 1787 of yacc.c  */
#line 3234 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1060:
/* Line 1787 of yacc.c  */
#line 3235 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1061:
/* Line 1787 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1062:
/* Line 1787 of yacc.c  */
#line 3240 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1063:
/* Line 1787 of yacc.c  */
#line 3241 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1064:
/* Line 1787 of yacc.c  */
#line 3242 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1065:
/* Line 1787 of yacc.c  */
#line 3243 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1066:
/* Line 1787 of yacc.c  */
#line 3244 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1067:
/* Line 1787 of yacc.c  */
#line 3246 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1068:
/* Line 1787 of yacc.c  */
#line 3247 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1069:
/* Line 1787 of yacc.c  */
#line 3248 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1070:
/* Line 1787 of yacc.c  */
#line 3249 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1071:
/* Line 1787 of yacc.c  */
#line 3253 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1072:
/* Line 1787 of yacc.c  */
#line 3254 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1073:
/* Line 1787 of yacc.c  */
#line 3255 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1074:
/* Line 1787 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1075:
/* Line 1787 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1076:
/* Line 1787 of yacc.c  */
#line 3259 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1077:
/* Line 1787 of yacc.c  */
#line 3260 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1078:
/* Line 1787 of yacc.c  */
#line 3261 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1080:
/* Line 1787 of yacc.c  */
#line 3266 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1081:
/* Line 1787 of yacc.c  */
#line 3267 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1082:
/* Line 1787 of yacc.c  */
#line 3268 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1083:
/* Line 1787 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1084:
/* Line 1787 of yacc.c  */
#line 3270 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); }
    break;

  case 1086:
/* Line 1787 of yacc.c  */
#line 3275 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 1089:
/* Line 1787 of yacc.c  */
#line 3282 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 1091:
/* Line 1787 of yacc.c  */
#line 3284 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1092:
/* Line 1787 of yacc.c  */
#line 3285 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1093:
/* Line 1787 of yacc.c  */
#line 3286 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1101:
/* Line 1787 of yacc.c  */
#line 3297 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1102:
/* Line 1787 of yacc.c  */
#line 3298 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1103:
/* Line 1787 of yacc.c  */
#line 3299 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1104:
/* Line 1787 of yacc.c  */
#line 3300 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1105:
/* Line 1787 of yacc.c  */
#line 3301 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1106:
/* Line 1787 of yacc.c  */
#line 3302 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1107:
/* Line 1787 of yacc.c  */
#line 3303 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); }
    break;

  case 1108:
/* Line 1787 of yacc.c  */
#line 3307 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); }
    break;

  case 1109:
/* Line 1787 of yacc.c  */
#line 3308 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); }
    break;

  case 1110:
/* Line 1787 of yacc.c  */
#line 3309 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); }
    break;

  case 1111:
/* Line 1787 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); }
    break;

  case 1112:
/* Line 1787 of yacc.c  */
#line 3314 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); }
    break;

  case 1113:
/* Line 1787 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.list) = null; }
    break;

  case 1114:
/* Line 1787 of yacc.c  */
#line 3319 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1115:
/* Line 1787 of yacc.c  */
#line 3320 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1116:
/* Line 1787 of yacc.c  */
#line 3321 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1117:
/* Line 1787 of yacc.c  */
#line 3322 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1118:
/* Line 1787 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1119:
/* Line 1787 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1120:
/* Line 1787 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1121:
/* Line 1787 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1122:
/* Line 1787 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1123:
/* Line 1787 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1124:
/* Line 1787 of yacc.c  */
#line 3331 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1125:
/* Line 1787 of yacc.c  */
#line 3333 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1126:
/* Line 1787 of yacc.c  */
#line 3334 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1127:
/* Line 1787 of yacc.c  */
#line 3335 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1128:
/* Line 1787 of yacc.c  */
#line 3339 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1129:
/* Line 1787 of yacc.c  */
#line 3340 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1130:
/* Line 1787 of yacc.c  */
#line 3341 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1131:
/* Line 1787 of yacc.c  */
#line 3342 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1132:
/* Line 1787 of yacc.c  */
#line 3343 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1133:
/* Line 1787 of yacc.c  */
#line 3345 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1134:
/* Line 1787 of yacc.c  */
#line 3346 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1135:
/* Line 1787 of yacc.c  */
#line 3347 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1136:
/* Line 1787 of yacc.c  */
#line 3348 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1137:
/* Line 1787 of yacc.c  */
#line 3349 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1138:
/* Line 1787 of yacc.c  */
#line 3353 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1139:
/* Line 1787 of yacc.c  */
#line 3354 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1140:
/* Line 1787 of yacc.c  */
#line 3355 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1141:
/* Line 1787 of yacc.c  */
#line 3356 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1142:
/* Line 1787 of yacc.c  */
#line 3357 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; }
    break;

  case 1143:
/* Line 1787 of yacc.c  */
#line 3358 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1144:
/* Line 1787 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1145:
/* Line 1787 of yacc.c  */
#line 3361 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1146:
/* Line 1787 of yacc.c  */
#line 3362 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1147:
/* Line 1787 of yacc.c  */
#line 3363 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1148:
/* Line 1787 of yacc.c  */
#line 3364 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1149:
/* Line 1787 of yacc.c  */
#line 3365 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1150:
/* Line 1787 of yacc.c  */
#line 3369 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; }
    break;

  case 1151:
/* Line 1787 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; }
    break;

  case 1152:
/* Line 1787 of yacc.c  */
#line 3371 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; }
    break;

  case 1153:
/* Line 1787 of yacc.c  */
#line 3375 "grammar.y"
    { (yyval.declMode) = publicAccess; }
    break;

  case 1154:
/* Line 1787 of yacc.c  */
#line 3376 "grammar.y"
    { (yyval.declMode) = privateAccess; }
    break;

  case 1155:
/* Line 1787 of yacc.c  */
#line 3380 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1156:
/* Line 1787 of yacc.c  */
#line 3381 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1157:
/* Line 1787 of yacc.c  */
#line 3382 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1158:
/* Line 1787 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; }
    break;

  case 1159:
/* Line 1787 of yacc.c  */
#line 3387 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); }
    break;

  case 1160:
/* Line 1787 of yacc.c  */
#line 3388 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1161:
/* Line 1787 of yacc.c  */
#line 3389 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1162:
/* Line 1787 of yacc.c  */
#line 3391 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1163:
/* Line 1787 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1164:
/* Line 1787 of yacc.c  */
#line 3393 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1165:
/* Line 1787 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; }
    break;

  case 1166:
/* Line 1787 of yacc.c  */
#line 3401 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1167:
/* Line 1787 of yacc.c  */
#line 3402 "grammar.y"
    { structDeclMode = defaultDeclMode;  }
    break;

  case 1168:
/* Line 1787 of yacc.c  */
#line 3404 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1169:
/* Line 1787 of yacc.c  */
#line 3405 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1170:
/* Line 1787 of yacc.c  */
#line 3406 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1171:
/* Line 1787 of yacc.c  */
#line 3410 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ }
    break;

  case 1172:
/* Line 1787 of yacc.c  */
#line 3411 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1173:
/* Line 1787 of yacc.c  */
#line 3412 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1174:
/* Line 1787 of yacc.c  */
#line 3413 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 1175:
/* Line 1787 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); }
    break;

  case 1176:
/* Line 1787 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); }
    break;

  case 1177:
/* Line 1787 of yacc.c  */
#line 3422 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1178:
/* Line 1787 of yacc.c  */
#line 3423 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1179:
/* Line 1787 of yacc.c  */
#line 3424 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1180:
/* Line 1787 of yacc.c  */
#line 3428 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1181:
/* Line 1787 of yacc.c  */
#line 3429 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1182:
/* Line 1787 of yacc.c  */
#line 3430 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1183:
/* Line 1787 of yacc.c  */
#line 3431 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1184:
/* Line 1787 of yacc.c  */
#line 3432 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1185:
/* Line 1787 of yacc.c  */
#line 3433 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1186:
/* Line 1787 of yacc.c  */
#line 3434 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1187:
/* Line 1787 of yacc.c  */
#line 3438 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1188:
/* Line 1787 of yacc.c  */
#line 3439 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1189:
/* Line 1787 of yacc.c  */
#line 3440 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1190:
/* Line 1787 of yacc.c  */
#line 3441 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1191:
/* Line 1787 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1192:
/* Line 1787 of yacc.c  */
#line 3446 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1193:
/* Line 1787 of yacc.c  */
#line 3447 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1194:
/* Line 1787 of yacc.c  */
#line 3448 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1195:
/* Line 1787 of yacc.c  */
#line 3452 "grammar.y"
    { (yyval.context) = PushContext(); }
    break;

  case 1196:
/* Line 1787 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1197:
/* Line 1787 of yacc.c  */
#line 3461 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1198:
/* Line 1787 of yacc.c  */
#line 3463 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1199:
/* Line 1787 of yacc.c  */
#line 3466 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1200:
/* Line 1787 of yacc.c  */
#line 3471 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1201:
/* Line 1787 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1202:
/* Line 1787 of yacc.c  */
#line 3473 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1203:
/* Line 1787 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1204:
/* Line 1787 of yacc.c  */
#line 3478 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1205:
/* Line 1787 of yacc.c  */
#line 3479 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1206:
/* Line 1787 of yacc.c  */
#line 3480 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1207:
/* Line 1787 of yacc.c  */
#line 3481 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1208:
/* Line 1787 of yacc.c  */
#line 3482 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1209:
/* Line 1787 of yacc.c  */
#line 3486 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1211:
/* Line 1787 of yacc.c  */
#line 3491 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1212:
/* Line 1787 of yacc.c  */
#line 3492 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1213:
/* Line 1787 of yacc.c  */
#line 3493 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1214:
/* Line 1787 of yacc.c  */
#line 3495 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1215:
/* Line 1787 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1216:
/* Line 1787 of yacc.c  */
#line 3498 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1217:
/* Line 1787 of yacc.c  */
#line 3499 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1218:
/* Line 1787 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1219:
/* Line 1787 of yacc.c  */
#line 3501 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1220:
/* Line 1787 of yacc.c  */
#line 3502 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1221:
/* Line 1787 of yacc.c  */
#line 3504 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1222:
/* Line 1787 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1223:
/* Line 1787 of yacc.c  */
#line 3509 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1224:
/* Line 1787 of yacc.c  */
#line 3510 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); }
    break;

  case 1225:
/* Line 1787 of yacc.c  */
#line 3511 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1226:
/* Line 1787 of yacc.c  */
#line 3512 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); }
    break;

  case 1227:
/* Line 1787 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1228:
/* Line 1787 of yacc.c  */
#line 3517 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1229:
/* Line 1787 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1230:
/* Line 1787 of yacc.c  */
#line 3519 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1231:
/* Line 1787 of yacc.c  */
#line 3521 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1232:
/* Line 1787 of yacc.c  */
#line 3522 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1233:
/* Line 1787 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1234:
/* Line 1787 of yacc.c  */
#line 3524 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1235:
/* Line 1787 of yacc.c  */
#line 3525 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1236:
/* Line 1787 of yacc.c  */
#line 3526 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1237:
/* Line 1787 of yacc.c  */
#line 3527 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1238:
/* Line 1787 of yacc.c  */
#line 3530 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1239:
/* Line 1787 of yacc.c  */
#line 3534 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1240:
/* Line 1787 of yacc.c  */
#line 3535 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1241:
/* Line 1787 of yacc.c  */
#line 3539 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1242:
/* Line 1787 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1243:
/* Line 1787 of yacc.c  */
#line 3544 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1244:
/* Line 1787 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1245:
/* Line 1787 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1246:
/* Line 1787 of yacc.c  */
#line 3547 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); }
    break;

  case 1247:
/* Line 1787 of yacc.c  */
#line 3548 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1248:
/* Line 1787 of yacc.c  */
#line 3549 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1249:
/* Line 1787 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1250:
/* Line 1787 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1251:
/* Line 1787 of yacc.c  */
#line 3555 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1252:
/* Line 1787 of yacc.c  */
#line 3556 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1253:
/* Line 1787 of yacc.c  */
#line 3557 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; }
    break;

  case 1254:
/* Line 1787 of yacc.c  */
#line 3558 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1255:
/* Line 1787 of yacc.c  */
#line 3564 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1256:
/* Line 1787 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1257:
/* Line 1787 of yacc.c  */
#line 3567 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1258:
/* Line 1787 of yacc.c  */
#line 3569 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1259:
/* Line 1787 of yacc.c  */
#line 3571 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1260:
/* Line 1787 of yacc.c  */
#line 3572 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);}
    break;

  case 1261:
/* Line 1787 of yacc.c  */
#line 3575 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1262:
/* Line 1787 of yacc.c  */
#line 3576 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1263:
/* Line 1787 of yacc.c  */
#line 3577 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1264:
/* Line 1787 of yacc.c  */
#line 3578 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1265:
/* Line 1787 of yacc.c  */
#line 3579 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1266:
/* Line 1787 of yacc.c  */
#line 3580 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 1267:
/* Line 1787 of yacc.c  */
#line 3584 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 1268:
/* Line 1787 of yacc.c  */
#line 3586 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   }
    break;

  case 1269:
/* Line 1787 of yacc.c  */
#line 3597 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1270:
/* Line 1787 of yacc.c  */
#line 3599 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1271:
/* Line 1787 of yacc.c  */
#line 3602 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); }
    break;

  case 1272:
/* Line 1787 of yacc.c  */
#line 3605 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1273:
/* Line 1787 of yacc.c  */
#line 3606 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1274:
/* Line 1787 of yacc.c  */
#line 3607 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1275:
/* Line 1787 of yacc.c  */
#line 3609 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   }
    break;

  case 1276:
/* Line 1787 of yacc.c  */
#line 3618 "grammar.y"
    { (yyval.external) = null; }
    break;

  case 1277:
/* Line 1787 of yacc.c  */
#line 3620 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1278:
/* Line 1787 of yacc.c  */
#line 3622 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1279:
/* Line 1787 of yacc.c  */
#line 3623 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1280:
/* Line 1787 of yacc.c  */
#line 3624 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1281:
/* Line 1787 of yacc.c  */
#line 3625 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1282:
/* Line 1787 of yacc.c  */
#line 3627 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   }
    break;

  case 1283:
/* Line 1787 of yacc.c  */
#line 3636 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; }
    break;

  case 1284:
/* Line 1787 of yacc.c  */
#line 3637 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; }
    break;

  case 1285:
/* Line 1787 of yacc.c  */
#line 3638 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); }
    break;

  case 1286:
/* Line 1787 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); }
    break;

  case 1287:
/* Line 1787 of yacc.c  */
#line 3640 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1288:
/* Line 1787 of yacc.c  */
#line 3641 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1289:
/* Line 1787 of yacc.c  */
#line 3642 "grammar.y"
    { (yyval.external) = MkExternalPragma(yytext); (yyval.external).loc = (yyloc); }
    break;

  case 1290:
/* Line 1787 of yacc.c  */
#line 3646 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1291:
/* Line 1787 of yacc.c  */
#line 3648 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   }
    break;

  case 1292:
/* Line 1787 of yacc.c  */
#line 3656 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1293:
/* Line 1787 of yacc.c  */
#line 3658 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1294:
/* Line 1787 of yacc.c  */
#line 3659 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1295:
/* Line 1787 of yacc.c  */
#line 3662 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1296:
/* Line 1787 of yacc.c  */
#line 3663 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1297:
/* Line 1787 of yacc.c  */
#line 3667 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1298:
/* Line 1787 of yacc.c  */
#line 3668 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1299:
/* Line 1787 of yacc.c  */
#line 3669 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1302:
/* Line 1787 of yacc.c  */
#line 3675 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1303:
/* Line 1787 of yacc.c  */
#line 3676 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1304:
/* Line 1787 of yacc.c  */
#line 3678 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1305:
/* Line 1787 of yacc.c  */
#line 3680 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1308:
/* Line 1787 of yacc.c  */
#line 3686 "grammar.y"
    { ast = MkList(); }
    break;

  case 1309:
/* Line 1787 of yacc.c  */
#line 3690 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1310:
/* Line 1787 of yacc.c  */
#line 3691 "grammar.y"
    { Symbol symbol = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1311:
/* Line 1787 of yacc.c  */
#line 3692 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); }
    break;

  case 1312:
/* Line 1787 of yacc.c  */
#line 3696 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); }
    break;

  case 1313:
/* Line 1787 of yacc.c  */
#line 3700 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); }
    break;

  case 1314:
/* Line 1787 of yacc.c  */
#line 3701 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); }
    break;

  case 1315:
/* Line 1787 of yacc.c  */
#line 3702 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); }
    break;

  case 1316:
/* Line 1787 of yacc.c  */
#line 3706 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); }
    break;

  case 1317:
/* Line 1787 of yacc.c  */
#line 3707 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); }
    break;

  case 1318:
/* Line 1787 of yacc.c  */
#line 3711 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); }
    break;

  case 1319:
/* Line 1787 of yacc.c  */
#line 3712 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); }
    break;

  case 1320:
/* Line 1787 of yacc.c  */
#line 3716 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1321:
/* Line 1787 of yacc.c  */
#line 3717 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1322:
/* Line 1787 of yacc.c  */
#line 3718 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1323:
/* Line 1787 of yacc.c  */
#line 3719 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1324:
/* Line 1787 of yacc.c  */
#line 3723 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); }
    break;

  case 1325:
/* Line 1787 of yacc.c  */
#line 3727 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1326:
/* Line 1787 of yacc.c  */
#line 3731 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1327:
/* Line 1787 of yacc.c  */
#line 3735 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); }
    break;


/* Line 1787 of yacc.c  */
#line 21602 "grammar.ec"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


/* Line 2050 of yacc.c  */
#line 3738 "grammar.y"

