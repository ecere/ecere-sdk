/* A Bison parser, made by GNU Bison 2.7.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYSIZE_T size_t
#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:


/* Line 371 of yacc.c  */
#line 104 "grammar.ec"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar.h".  */
#ifndef YY_YY_GRAMMAR_H_INCLUDED
# define YY_YY_GRAMMAR_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     INT128 = 294,
     FLOAT128 = 295,
     LONG = 296,
     SIGNED = 297,
     UNSIGNED = 298,
     FLOAT = 299,
     DOUBLE = 300,
     CONST = 301,
     VOLATILE = 302,
     VOID = 303,
     VALIST = 304,
     STRUCT = 305,
     UNION = 306,
     ENUM = 307,
     ELLIPSIS = 308,
     CASE = 309,
     DEFAULT = 310,
     IF = 311,
     SWITCH = 312,
     WHILE = 313,
     DO = 314,
     FOR = 315,
     GOTO = 316,
     CONTINUE = 317,
     BREAK = 318,
     RETURN = 319,
     IFX = 320,
     ELSE = 321,
     CLASS = 322,
     THISCLASS = 323,
     PROPERTY = 324,
     SETPROP = 325,
     GETPROP = 326,
     NEWOP = 327,
     RENEW = 328,
     DELETE = 329,
     EXT_DECL = 330,
     EXT_STORAGE = 331,
     IMPORT = 332,
     DEFINE = 333,
     VIRTUAL = 334,
     ATTRIB = 335,
     PUBLIC = 336,
     PRIVATE = 337,
     TYPED_OBJECT = 338,
     ANY_OBJECT = 339,
     _INCREF = 340,
     EXTENSION = 341,
     ASM = 342,
     TYPEOF = 343,
     WATCH = 344,
     STOPWATCHING = 345,
     FIREWATCHERS = 346,
     WATCHABLE = 347,
     CLASS_DESIGNER = 348,
     CLASS_NO_EXPANSION = 349,
     CLASS_FIXED = 350,
     ISPROPSET = 351,
     CLASS_DEFAULT_PROPERTY = 352,
     PROPERTY_CATEGORY = 353,
     CLASS_DATA = 354,
     CLASS_PROPERTY = 355,
     SUBCLASS = 356,
     NAMESPACE = 357,
     NEW0OP = 358,
     RENEW0 = 359,
     VAARG = 360,
     DBTABLE = 361,
     DBFIELD = 362,
     DBINDEX = 363,
     DATABASE_OPEN = 364,
     ALIGNOF = 365,
     ATTRIB_DEP = 366,
     __ATTRIB = 367,
     BOOL = 368,
     _BOOL = 369,
     _COMPLEX = 370,
     _IMAGINARY = 371,
     RESTRICT = 372,
     THREAD = 373,
     WIDE_STRING_LITERAL = 374,
     BUILTIN_OFFSETOF = 375
   };
#endif


#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{
/* Line 387 of yacc.c  */
#line 39 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;


/* Line 387 of yacc.c  */
#line 311 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;
extern YYLTYPE yylloc;
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_YY_GRAMMAR_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 352 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  305
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   41765

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  146
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  258
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1321
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2195

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   375

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   140,     2,     2,   134,   142,   137,     2,
     124,   125,   121,   138,   129,   139,   132,   141,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   133,   127,
     122,   128,   123,   145,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   135,     2,   136,   143,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   131,   144,   130,   126,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   958,   961,   968,   975,   981,   987,
     994,  1001,  1007,  1013,  1021,  1029,  1036,  1043,  1051,  1059,
    1066,  1073,  1078,  1084,  1089,  1096,  1101,  1103,  1105,  1107,
    1109,  1113,  1116,  1118,  1121,  1124,  1127,  1129,  1134,  1139,
    1143,  1148,  1153,  1157,  1161,  1164,  1167,  1172,  1177,  1181,
    1186,  1190,  1194,  1197,  1200,  1202,  1204,  1208,  1212,  1214,
    1216,  1220,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1247,
    1253,  1259,  1262,  1267,  1274,  1276,  1278,  1280,  1282,  1284,
    1286,  1288,  1290,  1292,  1294,  1296,  1301,  1303,  1307,  1311,
    1315,  1319,  1323,  1327,  1329,  1333,  1337,  1341,  1345,  1347,
    1351,  1355,  1359,  1363,  1366,  1368,  1371,  1375,  1379,  1383,
    1387,  1391,  1395,  1399,  1401,  1405,  1409,  1413,  1417,  1421,
    1425,  1429,  1433,  1435,  1439,  1443,  1447,  1451,  1453,  1457,
    1461,  1465,  1469,  1471,  1475,  1479,  1483,  1487,  1489,  1493,
    1497,  1499,  1503,  1507,  1509,  1515,  1521,  1527,  1533,  1539,
    1545,  1551,  1557,  1563,  1569,  1575,  1581,  1587,  1593,  1599,
    1605,  1607,  1611,  1615,  1619,  1623,  1627,  1631,  1635,  1639,
    1641,  1643,  1645,  1647,  1649,  1651,  1653,  1655,  1657,  1659,
    1661,  1663,  1667,  1671,  1674,  1676,  1680,  1684,  1686,  1688,
    1691,  1694,  1698,  1702,  1706,  1710,  1714,  1718,  1722,  1725,
    1728,  1731,  1734,  1737,  1743,  1750,  1757,  1760,  1766,  1768,
    1770,  1772,  1777,  1779,  1783,  1787,  1791,  1795,  1799,  1803,
    1805,  1809,  1813,  1817,  1821,  1823,  1827,  1831,  1835,  1839,
    1841,  1844,  1848,  1852,  1856,  1860,  1864,  1868,  1872,  1874,
    1878,  1882,  1886,  1890,  1894,  1898,  1902,  1906,  1908,  1912,
    1916,  1920,  1924,  1926,  1930,  1934,  1938,  1942,  1944,  1948,
    1952,  1956,  1960,  1962,  1966,  1970,  1972,  1976,  1980,  1982,
    1988,  1994,  2000,  2006,  2011,  2016,  2021,  2026,  2032,  2038,
    2044,  2050,  2055,  2060,  2065,  2070,  2076,  2082,  2088,  2094,
    2100,  2106,  2112,  2118,  2122,  2126,  2129,  2132,  2134,  2138,
    2142,  2146,  2150,  2152,  2155,  2159,  2163,  2166,  2169,  2172,
    2174,  2177,  2181,  2185,  2187,  2189,  2191,  2193,  2195,  2197,
    2199,  2201,  2203,  2205,  2207,  2209,  2211,  2213,  2215,  2217,
    2219,  2223,  2227,  2230,  2235,  2240,  2242,  2246,  2249,  2251,
    2254,  2257,  2260,  2265,  2270,  2274,  2278,  2283,  2289,  2294,
    2301,  2308,  2313,  2319,  2324,  2331,  2338,  2344,  2350,  2353,
    2356,  2359,  2365,  2369,  2375,  2382,  2388,  2396,  2404,  2413,
    2422,  2430,  2438,  2442,  2446,  2450,  2455,  2459,  2465,  2471,
    2478,  2486,  2493,  2498,  2500,  2502,  2504,  2506,  2508,  2510,
    2512,  2514,  2516,  2519,  2521,  2523,  2525,  2527,  2529,  2531,
    2533,  2535,  2537,  2539,  2541,  2543,  2545,  2547,  2549,  2551,
    2553,  2555,  2560,  2565,  2570,  2572,  2574,  2576,  2578,  2580,
    2582,  2584,  2586,  2588,  2590,  2592,  2594,  2596,  2598,  2600,
    2602,  2604,  2606,  2608,  2610,  2612,  2614,  2616,  2618,  2620,
    2622,  2624,  2626,  2628,  2633,  2638,  2643,  2645,  2647,  2650,
    2653,  2657,  2663,  2666,  2670,  2676,  2682,  2688,  2690,  2694,
    2697,  2700,  2704,  2708,  2711,  2715,  2719,  2724,  2728,  2732,
    2736,  2740,  2744,  2748,  2753,  2758,  2763,  2765,  2767,  2772,
    2776,  2779,  2783,  2787,  2791,  2795,  2799,  2803,  2807,  2811,
    2815,  2819,  2823,  2827,  2829,  2831,  2833,  2836,  2838,  2841,
    2843,  2846,  2848,  2851,  2853,  2856,  2858,  2861,  2863,  2866,
    2868,  2871,  2873,  2876,  2878,  2881,  2883,  2886,  2888,  2891,
    2893,  2896,  2898,  2901,  2903,  2906,  2908,  2911,  2913,  2916,
    2918,  2921,  2923,  2926,  2928,  2931,  2933,  2936,  2938,  2941,
    2943,  2946,  2948,  2951,  2953,  2956,  2958,  2961,  2963,  2965,
    2967,  2970,  2972,  2975,  2977,  2980,  2982,  2985,  2990,  2996,
    2998,  3000,  3002,  3005,  3007,  3010,  3012,  3015,  3017,  3020,
    3025,  3031,  3033,  3036,  3038,  3041,  3043,  3046,  3048,  3051,
    3053,  3056,  3058,  3061,  3066,  3072,  3074,  3077,  3079,  3082,
    3084,  3087,  3089,  3092,  3094,  3097,  3099,  3102,  3107,  3113,
    3117,  3121,  3123,  3127,  3131,  3135,  3139,  3141,  3143,  3145,
    3150,  3155,  3160,  3164,  3169,  3174,  3179,  3183,  3185,  3189,
    3194,  3198,  3203,  3208,  3213,  3218,  3222,  3225,  3229,  3233,
    3237,  3241,  3244,  3247,  3250,  3254,  3259,  3261,  3263,  3266,
    3270,  3274,  3278,  3282,  3285,  3288,  3291,  3295,  3300,  3302,
    3304,  3306,  3308,  3310,  3312,  3317,  3319,  3321,  3323,  3325,
    3327,  3329,  3331,  3333,  3335,  3340,  3342,  3345,  3349,  3356,
    3362,  3364,  3367,  3371,  3376,  3379,  3383,  3387,  3391,  3395,
    3400,  3405,  3410,  3413,  3417,  3421,  3425,  3430,  3435,  3439,
    3444,  3447,  3451,  3455,  3459,  3464,  3469,  3471,  3474,  3477,
    3481,  3483,  3485,  3488,  3491,  3495,  3497,  3499,  3502,  3505,
    3509,  3511,  3514,  3518,  3521,  3524,  3526,  3529,  3533,  3536,
    3538,  3541,  3545,  3549,  3551,  3554,  3558,  3562,  3564,  3567,
    3571,  3575,  3577,  3580,  3584,  3588,  3590,  3593,  3597,  3601,
    3603,  3607,  3612,  3614,  3619,  3622,  3628,  3632,  3634,  3636,
    3638,  3640,  3642,  3644,  3648,  3652,  3655,  3658,  3660,  3662,
    3666,  3669,  3673,  3675,  3679,  3683,  3687,  3691,  3695,  3699,
    3703,  3705,  3708,  3712,  3716,  3718,  3721,  3723,  3726,  3729,
    3732,  3735,  3739,  3741,  3743,  3747,  3751,  3753,  3757,  3762,
    3766,  3771,  3775,  3779,  3784,  3788,  3793,  3795,  3799,  3803,
    3808,  3812,  3816,  3820,  3825,  3827,  3831,  3835,  3839,  3843,
    3847,  3849,  3853,  3856,  3858,  3860,  3862,  3864,  3866,  3869,
    3871,  3873,  3875,  3877,  3880,  3883,  3886,  3888,  3890,  3892,
    3894,  3896,  3899,  3901,  3903,  3908,  3916,  3918,  3922,  3923,
    3930,  3939,  3950,  3963,  3972,  3983,  3994,  4000,  4008,  4018,
    4030,  4038,  4048,  4058,  4062,  4067,  4072,  4076,  4080,  4084,
    4089,  4094,  4098,  4102,  4106,  4111,  4116,  4120,  4123,  4127,
    4130,  4134,  4139,  4144,  4148,  4152,  4154,  4156,  4158,  4160,
    4162,  4165,  4169,  4172,  4175,  4178,  4182,  4186,  4189,  4195,
    4202,  4205,  4208,  4211,  4214,  4217,  4220,  4222,  4225,  4228,
    4232,  4234,  4237,  4239,  4242,  4245,  4247,  4250,  4253,  4256,
    4259,  4262,  4265,  4267,  4269,  4272,  4275,  4277,  4279,  4282,
    4285,  4287,  4290,  4293,  4295,  4298,  4300,  4303,  4306,  4312,
    4318,  4326,  4334,  4340,  4346,  4350,  4353,  4359,  4364,  4369,
    4377,  4384,  4391,  4397,  4405,  4412,  4417,  4425,  4435,  4439,
    4444,  4449,  4455,  4461,  4468,  4476,  4483,  4490,  4496,  4502,
    4507,  4511,  4514,  4516,  4519,  4524,  4528,  4534,  4539,  4543,
    4546,  4549,  4552,  4556,  4560,  4564,  4568,  4571,  4574,  4576,
    4578,  4583,  4587,  4592,  4596,  4600,  4603,  4608,  4612,  4617,
    4621,  4625,  4628,  4630,  4633,  4635,  4637,  4640,  4642,  4645,
    4649,  4653,  4655,  4658,  4661,  4664,  4668,  4673,  4678,  4681,
    4684,  4687,  4690,  4692,  4695,  4697,  4700,  4702,  4705,  4708,
    4710,  4713,  4715,  4718,  4721,  4724,  4727,  4729,  4732,  4735,
    4739,  4741,  4743,  4744,  4751,  4758,  4764,  4769,  4771,  4774,
    4777,  4779,  4783,  4787,  4792,  4794,  4796,  4799,  4802,  4809,
    4816,  4823
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     393,     0,    -1,   218,   121,    -1,   218,   122,    -1,   151,
      -1,   218,   218,    -1,    28,    -1,    28,    -1,   149,    -1,
     149,   122,   212,   123,    -1,   149,   122,   212,    11,    -1,
     301,   337,    -1,   335,    -1,   301,   124,   125,    -1,   126,
     301,   124,   125,    -1,    79,   301,   337,    -1,    79,   335,
      -1,   301,   338,    -1,   336,    -1,    79,   301,   338,    -1,
      79,   336,    -1,   152,   377,    -1,   155,   377,    -1,   155,
     127,    -1,   153,   377,    -1,   154,   377,    -1,   152,   127,
      -1,   152,   326,   127,    -1,   152,   378,    -1,   156,    -1,
     155,   378,    -1,   157,    -1,   157,   127,    -1,   300,   337,
      -1,   300,   339,    -1,   300,   338,    -1,   160,   377,    -1,
     160,   378,    -1,   161,    -1,   160,    -1,   226,   128,   342,
      -1,   342,    -1,   226,   128,   343,    -1,   226,   128,     1,
      -1,   343,    -1,   164,    -1,   166,   129,   164,    -1,   167,
     129,   164,    -1,   165,    -1,   166,   129,   165,    -1,   167,
     129,   165,    -1,   166,   129,     1,    -1,   167,   129,     1,
      -1,   129,    -1,   166,   127,    -1,   167,   127,    -1,   168,
      -1,   162,    -1,   171,   168,    -1,   171,   162,    -1,   169,
     168,    -1,   169,   162,    -1,   171,   127,    -1,   169,   127,
      -1,   127,    -1,   169,    -1,   166,    -1,   169,   166,    -1,
     171,   166,    -1,   163,    -1,   170,   163,    -1,   171,   163,
      -1,   169,   163,    -1,   169,   167,    -1,   167,    -1,   166,
       1,    -1,   173,   130,    -1,   173,     1,   130,    -1,   300,
     218,   131,   171,    -1,   300,   218,   131,   170,     1,    -1,
     300,   218,   131,   170,    -1,   300,   218,   131,    -1,   300,
     218,   131,     1,    -1,   175,   130,    -1,   175,     1,   130,
      -1,   301,   218,   131,   171,    -1,   301,   218,   131,   170,
       1,    -1,   301,   218,   131,   170,    -1,   301,   218,   131,
      -1,   301,   218,   131,     1,    -1,   302,   218,   131,   170,
     130,    -1,   302,   218,   131,   171,   130,    -1,   302,   218,
     131,   130,    -1,   178,   130,    -1,   178,     1,   130,    -1,
     151,   131,   170,    -1,   218,   131,   170,    -1,   151,   131,
     171,    -1,   151,   131,    -1,   151,   131,   170,     1,    -1,
     151,   131,     1,    -1,   218,   131,   171,    -1,   218,   131,
      -1,   218,   131,   170,     1,    -1,   218,   131,     1,    -1,
     180,   130,    -1,   180,     1,   130,    -1,   131,   171,    -1,
     131,   170,     1,    -1,   131,     1,    -1,   131,    -1,   131,
     170,    -1,   226,   128,   342,    -1,   226,   128,   343,    -1,
     226,   128,     1,    -1,   226,     1,    -1,   181,    -1,   183,
     129,   181,    -1,   184,   129,   181,    -1,   182,    -1,   183,
     129,   182,    -1,   184,   129,   182,    -1,   183,     1,    -1,
      69,   306,   218,   131,    -1,    69,   306,   331,   218,   131,
      -1,    69,   306,   131,    -1,    69,   306,   331,   131,    -1,
      69,     1,   131,    -1,   185,    -1,   186,    70,   377,    -1,
     186,    71,   377,    -1,   186,    96,   377,    -1,   186,    92,
      -1,   186,    98,   220,    -1,   186,   130,    -1,   100,   306,
     218,   131,    -1,   100,   306,   331,   218,   131,    -1,   100,
     306,   131,    -1,   100,   306,   331,   131,    -1,   100,     1,
     131,    -1,   188,    -1,   189,    70,   377,    -1,   189,    71,
     377,    -1,   189,   130,    -1,   218,    -1,   191,   218,    -1,
     191,   377,    -1,    74,   377,    -1,   192,    -1,   193,   192,
      -1,    89,   124,   191,   125,   377,    -1,    89,   124,   245,
     125,   131,   193,   130,    -1,   245,   132,    89,   124,   245,
     125,   131,   193,   130,    -1,    90,   124,   245,   129,   191,
     125,    -1,   245,   132,    90,   124,   245,   129,   191,   125,
      -1,    90,   124,   245,   125,    -1,   245,   132,    90,   124,
     245,   125,    -1,    91,    -1,    91,   191,    -1,   226,   132,
      91,    -1,   245,   132,    91,   191,    -1,   199,   127,    -1,
     183,   127,    -1,   158,    -1,   187,    -1,   365,   158,    -1,
     365,   187,    -1,   190,    -1,    92,    -1,    94,    -1,    95,
      -1,   100,   124,   218,   125,   128,   342,   127,    -1,   127,
      -1,   365,   133,    -1,   365,   124,   218,   125,    -1,   159,
      -1,   301,    -1,   301,   288,    -1,   365,   301,   288,    -1,
     365,   301,    -1,   365,   177,    -1,   365,   174,    -1,    99,
     301,   288,    -1,   194,    -1,    93,   218,    -1,    93,   151,
      -1,    97,   218,    -1,   177,    -1,   174,    -1,   183,    -1,
     175,     1,    -1,   178,     1,    -1,   365,   159,    -1,   365,
     175,     1,    -1,   365,   178,     1,    -1,   184,    -1,   198,
      -1,   200,   198,    -1,   201,   198,    -1,   199,    -1,   200,
       1,    -1,   201,     1,    -1,   200,   199,    -1,   201,   199,
      -1,   301,    -1,   301,   331,    -1,   301,    -1,   301,   331,
      -1,    67,   218,    -1,    67,   218,   128,   203,    -1,    67,
     218,   133,   202,    -1,    67,   218,   133,   202,   128,   203,
      -1,    67,   150,    -1,    67,   150,   128,   203,    -1,    67,
     150,   133,   202,    -1,    67,   150,   133,   202,   128,   203,
      -1,   218,    -1,   218,    -1,   218,   128,   205,    -1,   235,
      -1,   301,   218,   128,   207,    -1,   301,   331,   218,   128,
     207,    -1,   204,    -1,   206,    -1,   208,    -1,   209,    -1,
     210,   129,   209,    -1,   207,    -1,   205,    -1,   203,    -1,
     218,   128,   207,    -1,   218,   128,   205,    -1,   218,   128,
     203,    -1,   211,    -1,   212,   129,   211,    -1,    67,    -1,
     213,   218,    -1,   213,   149,    -1,   218,   213,   218,    -1,
     218,   213,   149,    -1,   213,   218,   122,   210,   123,    -1,
     213,   149,   122,   210,   123,    -1,   218,   213,   218,   122,
     210,   123,    -1,   218,   213,   149,   122,   210,   123,    -1,
     217,   130,    -1,   216,   127,    -1,   214,   131,   130,    -1,
     216,   131,   130,    -1,   213,   218,   127,    -1,   213,   148,
     127,    -1,   214,   133,   305,    -1,   214,   131,   201,    -1,
     216,   131,   201,    -1,   214,   131,   200,    -1,   216,   131,
     200,    -1,   214,   131,     1,    -1,   216,   131,     1,    -1,
       3,    -1,   222,    -1,   124,   247,   125,    -1,   388,    -1,
     134,   388,    -1,   134,   388,   132,   388,    -1,     4,    -1,
     218,    -1,   177,    -1,    86,   124,   377,   125,    -1,    86,
     124,   247,   125,    -1,    86,   124,   349,   125,   340,    -1,
      86,   124,   349,   125,   124,   349,   125,   340,    -1,   221,
     218,    -1,   221,    -1,   220,    -1,   119,    -1,   124,   125,
      -1,    72,   308,   332,   135,   267,   136,    -1,    72,   308,
     332,   135,   268,   136,    -1,    72,   308,   135,   267,   136,
      -1,    72,   308,   135,   268,   136,    -1,   103,   308,   332,
     135,   267,   136,    -1,   103,   308,   332,   135,   268,   136,
      -1,   103,   308,   135,   267,   136,    -1,   103,   308,   135,
     268,   136,    -1,    73,   267,   307,   332,   135,   267,   136,
      -1,    73,   267,   307,   332,   135,   268,   136,    -1,    73,
     267,   307,   135,   267,   136,    -1,    73,   267,   307,   135,
     268,   136,    -1,   104,   267,   307,   332,   135,   267,   136,
      -1,   104,   267,   307,   332,   135,   268,   136,    -1,   104,
     267,   307,   135,   267,   136,    -1,   104,   267,   307,   135,
     268,   136,    -1,    67,   124,   300,   125,    -1,    67,   124,
     300,   331,   125,    -1,    67,   124,   218,   125,    -1,   105,
     124,   245,   129,   349,   125,    -1,    99,   124,   218,   125,
      -1,   400,    -1,   401,    -1,   402,    -1,   403,    -1,   135,
     227,   136,    -1,   135,   136,    -1,   179,    -1,   180,     1,
      -1,   124,   247,    -1,   124,   265,    -1,   219,    -1,   226,
     135,   247,   136,    -1,   226,   135,   265,   136,    -1,   226,
     124,   125,    -1,   226,   124,   227,   125,    -1,   226,   124,
     228,   125,    -1,   226,   132,   218,    -1,   226,     7,   218,
      -1,   226,     8,    -1,   226,     9,    -1,   249,   135,   247,
     136,    -1,   249,   135,   265,   136,    -1,   249,   124,   125,
      -1,   249,   124,   227,   125,    -1,   249,   132,   218,    -1,
     249,     7,   218,    -1,   249,     8,    -1,   249,     9,    -1,
     245,    -1,   223,    -1,   227,   129,   245,    -1,   227,   129,
     223,    -1,   264,    -1,   224,    -1,   227,   129,   264,    -1,
     227,   129,   224,    -1,   227,   129,    -1,     8,   230,    -1,
       9,   230,    -1,   231,   232,    -1,   231,   223,    -1,     6,
     230,    -1,     6,   124,   350,   125,    -1,     6,   124,    67,
     148,   125,    -1,     6,   124,    67,   147,   125,    -1,   110,
     230,    -1,   110,   124,   350,   125,    -1,   120,   124,   350,
     129,   218,   125,    -1,   229,    -1,   226,    -1,   137,    -1,
     121,    -1,   138,    -1,   139,    -1,   126,    -1,   140,    -1,
      74,    -1,    85,    -1,   230,    -1,   124,   349,   125,   232,
      -1,   232,    -1,   233,   121,   232,    -1,   233,   141,   232,
      -1,   233,   142,   232,    -1,   253,   121,   232,    -1,   253,
     141,   232,    -1,   253,   142,   232,    -1,   233,    -1,   234,
     138,   233,    -1,   234,   139,   233,    -1,   254,   138,   233,
      -1,   254,   139,   233,    -1,   234,    -1,   235,    10,   234,
      -1,   235,    11,   234,    -1,   255,    10,   234,    -1,   255,
      11,   234,    -1,   237,   122,    -1,   235,    -1,   236,   235,
      -1,   237,   123,   235,    -1,   237,    12,   235,    -1,   237,
      13,   235,    -1,   256,   122,   235,    -1,   256,   123,   235,
      -1,   256,    12,   235,    -1,   256,    13,   235,    -1,   237,
      -1,   238,    14,   237,    -1,   238,    15,   237,    -1,   257,
      14,   237,    -1,   257,    15,   237,    -1,   238,    14,   223,
      -1,   238,    15,   223,    -1,   257,    14,   223,    -1,   257,
      15,   223,    -1,   238,    -1,   239,   137,   238,    -1,   258,
     137,   238,    -1,   239,   137,   223,    -1,   258,   137,   223,
      -1,   239,    -1,   240,   143,   239,    -1,   259,   143,   239,
      -1,   240,   143,   223,    -1,   259,   143,   223,    -1,   240,
      -1,   241,   144,   240,    -1,   260,   144,   240,    -1,   241,
     144,   223,    -1,   260,   144,   223,    -1,   241,    -1,   242,
      16,   241,    -1,   261,    16,   241,    -1,   242,    -1,   243,
      17,   242,    -1,   262,    17,   242,    -1,   243,    -1,   243,
     145,   247,   133,   244,    -1,   243,   145,   265,   133,   244,
      -1,   262,   145,   247,   133,   244,    -1,   262,   145,   265,
     133,   244,    -1,   243,   145,   248,   133,   244,    -1,   243,
     145,   266,   133,   244,    -1,   262,   145,   248,   133,   244,
      -1,   262,   145,   266,   133,   244,    -1,   243,   145,   247,
     133,   223,    -1,   243,   145,   265,   133,   223,    -1,   262,
     145,   247,   133,   223,    -1,   262,   145,   265,   133,   223,
      -1,   243,   145,   248,   133,   223,    -1,   243,   145,   266,
     133,   223,    -1,   262,   145,   248,   133,   223,    -1,   262,
     145,   266,   133,   223,    -1,   244,    -1,   230,   246,   245,
      -1,   251,   246,   245,    -1,   244,   246,   245,    -1,   263,
     246,   245,    -1,   230,   246,   223,    -1,   251,   246,   223,
      -1,   244,   246,   223,    -1,   263,   246,   223,    -1,   128,
      -1,    18,    -1,    19,    -1,    20,    -1,    21,    -1,    22,
      -1,    23,    -1,    24,    -1,    25,    -1,    26,    -1,    27,
      -1,   245,    -1,   247,   129,   245,    -1,   265,   129,   245,
      -1,   265,   125,    -1,   223,    -1,   247,   129,   223,    -1,
     265,   129,   223,    -1,   225,    -1,     1,    -1,   226,     1,
      -1,   178,     1,    -1,   226,     7,     1,    -1,   249,     7,
       1,    -1,   226,   124,   227,    -1,   226,   124,   228,    -1,
     226,   132,     1,    -1,   249,   124,   228,    -1,   249,   132,
       1,    -1,     8,   251,    -1,     9,   251,    -1,   231,   252,
      -1,   231,   224,    -1,     6,   251,    -1,     6,   124,   350,
     125,     1,    -1,     6,   124,    67,   148,   125,     1,    -1,
       6,   124,    67,   147,   125,     1,    -1,   110,   251,    -1,
     110,   124,   350,   125,     1,    -1,   250,    -1,   249,    -1,
     251,    -1,   124,   349,   125,   252,    -1,   252,    -1,   233,
     121,   252,    -1,   233,   141,   252,    -1,   233,   142,   252,
      -1,   253,   121,   252,    -1,   253,   141,   252,    -1,   253,
     142,   252,    -1,   253,    -1,   234,   138,   253,    -1,   234,
     139,   253,    -1,   254,   138,   253,    -1,   254,   139,   253,
      -1,   254,    -1,   235,    10,   254,    -1,   235,    11,   254,
      -1,   255,    10,   254,    -1,   255,    11,   254,    -1,   255,
      -1,   236,   255,    -1,   237,   123,   255,    -1,   237,    12,
     255,    -1,   237,    13,   255,    -1,   256,   122,   255,    -1,
     256,   123,   255,    -1,   256,    12,   255,    -1,   256,    13,
     255,    -1,   256,    -1,   238,    14,   256,    -1,   238,    15,
     256,    -1,   257,    14,   256,    -1,   257,    15,   256,    -1,
     238,    14,   224,    -1,   238,    15,   224,    -1,   257,    14,
     224,    -1,   257,    15,   224,    -1,   257,    -1,   239,   137,
     257,    -1,   258,   137,   257,    -1,   239,   137,   224,    -1,
     258,   137,   224,    -1,   258,    -1,   240,   143,   258,    -1,
     259,   143,   258,    -1,   240,   143,   224,    -1,   259,   143,
     224,    -1,   259,    -1,   241,   144,   259,    -1,   260,   144,
     259,    -1,   241,   144,   224,    -1,   260,   144,   224,    -1,
     260,    -1,   242,    16,   260,    -1,   261,    16,   260,    -1,
     261,    -1,   243,    17,   261,    -1,   262,    17,   261,    -1,
     262,    -1,   243,   145,   247,   133,   262,    -1,   243,   145,
     265,   133,   262,    -1,   262,   145,   247,   133,   262,    -1,
     262,   145,   265,   133,   262,    -1,   243,   145,   247,   133,
      -1,   243,   145,   265,   133,    -1,   262,   145,   247,   133,
      -1,   262,   145,   265,   133,    -1,   243,   145,   248,   133,
     262,    -1,   243,   145,   266,   133,   262,    -1,   262,   145,
     248,   133,   262,    -1,   262,   145,   266,   133,   262,    -1,
     243,   145,   248,   133,    -1,   243,   145,   266,   133,    -1,
     262,   145,   248,   133,    -1,   262,   145,   266,   133,    -1,
     243,   145,   247,   133,   224,    -1,   243,   145,   265,   133,
     224,    -1,   262,   145,   247,   133,   224,    -1,   262,   145,
     265,   133,   224,    -1,   243,   145,   248,   133,   224,    -1,
     243,   145,   266,   133,   224,    -1,   262,   145,   248,   133,
     224,    -1,   262,   145,   266,   133,   224,    -1,   243,   145,
     133,    -1,   262,   145,   133,    -1,   243,   145,    -1,   262,
     145,    -1,   263,    -1,   230,   246,   264,    -1,   251,   246,
     264,    -1,   230,   246,   224,    -1,   251,   246,   224,    -1,
     264,    -1,   245,     1,    -1,   247,   129,   264,    -1,   265,
     129,   264,    -1,   247,   247,    -1,   265,   247,    -1,   247,
     265,    -1,   224,    -1,   223,     1,    -1,   247,   129,   224,
      -1,   265,   129,   224,    -1,   244,    -1,   263,    -1,    29,
      -1,    30,    -1,    31,    -1,   118,    -1,    32,    -1,    33,
      -1,   117,    -1,    29,    -1,    30,    -1,    31,    -1,   118,
      -1,    32,    -1,    33,    -1,   117,    -1,   218,    -1,   218,
     128,   267,    -1,   218,   128,   268,    -1,   218,   327,    -1,
     218,   327,   128,   267,    -1,   218,   327,   128,   268,    -1,
     271,    -1,   272,   129,   271,    -1,   272,   129,    -1,    52,
      -1,   273,   218,    -1,   273,   151,    -1,   276,   130,    -1,
     273,   218,   131,   130,    -1,   273,   151,   131,   130,    -1,
     273,   131,   272,    -1,   273,   131,     1,    -1,   273,   218,
     131,   272,    -1,   273,   218,   131,   272,     1,    -1,   273,
     218,   131,     1,    -1,   273,   218,   131,   272,   127,   200,
      -1,   273,   218,   131,   272,   127,   201,    -1,   273,   151,
     131,   272,    -1,   273,   151,   131,   272,     1,    -1,   273,
     151,   131,     1,    -1,   273,   151,   131,   272,   127,   200,
      -1,   273,   151,   131,   272,   127,   201,    -1,   273,   218,
     131,   272,   127,    -1,   273,   151,   131,   272,   127,    -1,
     273,   218,    -1,   273,   151,    -1,   279,   130,    -1,   277,
     133,   305,   131,   130,    -1,   277,   131,   130,    -1,   277,
     133,   305,   131,   272,    -1,   277,   133,   305,   131,   272,
       1,    -1,   277,   133,   305,   131,     1,    -1,   277,   133,
     305,   131,   272,   127,   200,    -1,   277,   133,   305,   131,
     272,   127,   201,    -1,   277,   133,   305,   131,   272,     1,
     127,   200,    -1,   277,   133,   305,   131,   272,     1,   127,
     201,    -1,   277,   133,   305,   131,     1,   127,   200,    -1,
     277,   133,   305,   131,     1,   127,   201,    -1,   273,   131,
     272,    -1,   273,   131,     1,    -1,   277,   131,   272,    -1,
     277,   131,   272,     1,    -1,   277,   131,     1,    -1,   277,
     131,   272,   127,   200,    -1,   277,   131,   272,   127,   201,
      -1,   277,   133,   305,   131,   272,   127,    -1,   277,   133,
     305,   131,   272,     1,   127,    -1,   277,   133,   305,   131,
       1,   127,    -1,   277,   131,   272,   127,    -1,   278,    -1,
     295,    -1,   279,    -1,   296,    -1,   321,    -1,    46,    -1,
      47,    -1,   282,    -1,   283,    -1,   284,   283,    -1,    48,
      -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,
      -1,    39,    -1,    40,    -1,    49,    -1,    41,    -1,    44,
      -1,    45,    -1,    42,    -1,    43,    -1,    86,    -1,   292,
      -1,   274,    -1,   148,    -1,    88,   124,   245,   125,    -1,
     101,   124,   148,   125,    -1,   101,   124,   218,   125,    -1,
      68,    -1,    83,    -1,    84,    -1,   114,    -1,   113,    -1,
     115,    -1,   116,    -1,    48,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    39,    -1,    40,    -1,
      49,    -1,    41,    -1,    44,    -1,    45,    -1,    42,    -1,
      43,    -1,    86,    -1,   292,    -1,   274,    -1,   151,    -1,
     114,    -1,   113,    -1,   115,    -1,   116,    -1,    88,   124,
     245,   125,    -1,   101,   124,   148,   125,    -1,   101,   124,
     218,   125,    -1,    68,    -1,   339,    -1,   339,   326,    -1,
     133,   267,    -1,   339,   133,   267,    -1,   339,   133,   267,
     133,   267,    -1,   133,   268,    -1,   339,   133,   268,    -1,
     339,   133,   267,   133,   268,    -1,   339,   133,   268,   133,
     268,    -1,   339,   133,   268,   133,   267,    -1,   287,    -1,
     288,   129,   287,    -1,   297,   218,    -1,   297,   149,    -1,
     297,   321,   218,    -1,   297,   321,   149,    -1,   291,   130,
      -1,   289,   131,   130,    -1,   297,   131,   130,    -1,   297,
     321,   131,   130,    -1,   289,   131,   200,    -1,   289,   131,
     201,    -1,   289,   131,     1,    -1,   297,   131,   200,    -1,
     297,   131,   201,    -1,   297,   131,     1,    -1,   297,   321,
     131,   200,    -1,   297,   321,   131,   201,    -1,   297,   321,
     131,     1,    -1,   289,    -1,   289,    -1,   289,   122,   210,
     123,    -1,   293,   133,   305,    -1,   296,   130,    -1,   294,
     131,   130,    -1,   293,   131,   130,    -1,   297,   131,   130,
      -1,   294,   131,   200,    -1,   294,   131,   201,    -1,   294,
     131,     1,    -1,   293,   131,   200,    -1,   293,   131,   201,
      -1,   293,   131,     1,    -1,   297,   131,   200,    -1,   297,
     131,   201,    -1,   297,   131,     1,    -1,    50,    -1,    51,
      -1,   283,    -1,   298,   283,    -1,   285,    -1,   298,   285,
      -1,   275,    -1,   298,   275,    -1,   290,    -1,   298,   290,
      -1,   283,    -1,   299,   283,    -1,   285,    -1,   299,   285,
      -1,   147,    -1,   299,   147,    -1,   275,    -1,   299,   275,
      -1,   290,    -1,   299,   290,    -1,   269,    -1,   300,   269,
      -1,   283,    -1,   300,   283,    -1,   286,    -1,   300,   286,
      -1,   275,    -1,   300,   275,    -1,   290,    -1,   300,   290,
      -1,   269,    -1,   301,   269,    -1,   283,    -1,   301,   283,
      -1,   285,    -1,   301,   285,    -1,   147,    -1,   301,   147,
      -1,   290,    -1,   301,   290,    -1,   275,    -1,   301,   275,
      -1,   270,    -1,   302,   270,    -1,   283,    -1,   302,   283,
      -1,   285,    -1,   302,   285,    -1,   147,    -1,   302,   147,
      -1,   280,    -1,   302,   280,    -1,   281,    -1,   302,   281,
      -1,    82,    -1,    81,    -1,   269,    -1,   304,   269,    -1,
     283,    -1,   304,   283,    -1,   286,    -1,   304,   286,    -1,
     218,    -1,   304,   218,    -1,   218,   122,   212,   123,    -1,
     304,   218,   122,   212,   123,    -1,   304,    -1,   297,    -1,
     269,    -1,   306,   269,    -1,   283,    -1,   306,   283,    -1,
     286,    -1,   306,   286,    -1,   218,    -1,   306,   218,    -1,
     218,   122,   212,   123,    -1,   306,   218,   122,   212,   123,
      -1,   269,    -1,   307,   269,    -1,   283,    -1,   307,   283,
      -1,   286,    -1,   307,   286,    -1,   290,    -1,   307,   290,
      -1,   275,    -1,   307,   275,    -1,   218,    -1,   307,   218,
      -1,   218,   122,   212,   123,    -1,   307,   218,   122,   212,
     123,    -1,   269,    -1,   308,   269,    -1,   283,    -1,   308,
     283,    -1,   286,    -1,   308,   286,    -1,   290,    -1,   308,
     290,    -1,   275,    -1,   308,   275,    -1,   218,    -1,   308,
     218,    -1,   218,   122,   212,   123,    -1,   308,   218,   122,
     212,   123,    -1,   310,   129,     1,    -1,   309,   129,     1,
      -1,   218,    -1,   310,   129,   218,    -1,   309,   129,   218,
      -1,   353,   129,   218,    -1,   354,   129,   218,    -1,   312,
      -1,   149,    -1,    37,    -1,   149,   135,   267,   136,    -1,
     149,   135,   268,   136,    -1,   149,   135,   148,   136,    -1,
     149,   135,   136,    -1,   311,   135,   267,   136,    -1,   311,
     135,   268,   136,    -1,   311,   135,   148,   136,    -1,   311,
     135,   136,    -1,   218,    -1,   124,   333,   125,    -1,   124,
     321,   333,   125,    -1,   124,   334,   125,    -1,   124,   321,
     334,   125,    -1,   312,   135,   267,   136,    -1,   312,   135,
     268,   136,    -1,   312,   135,   148,   136,    -1,   312,   135,
     136,    -1,   312,   124,    -1,   313,   355,   125,    -1,   313,
     356,   125,    -1,   313,   310,   125,    -1,   313,   309,   125,
      -1,   313,   125,    -1,   313,   309,    -1,   313,     1,    -1,
     313,   353,   124,    -1,   313,   301,   218,   124,    -1,   314,
      -1,   312,    -1,   311,   124,    -1,   317,   355,   125,    -1,
     317,   356,   125,    -1,   317,   310,   125,    -1,   317,   309,
     125,    -1,   317,   125,    -1,   317,   309,    -1,   317,     1,
      -1,   317,   353,   124,    -1,   317,   301,   218,   124,    -1,
     318,    -1,   311,    -1,    75,    -1,    76,    -1,   326,    -1,
     327,    -1,    87,   124,   388,   125,    -1,    80,    -1,   111,
      -1,   112,    -1,     3,    -1,    28,    -1,    76,    -1,    75,
      -1,    46,    -1,   323,    -1,   323,   124,   247,   125,    -1,
     324,    -1,   325,   324,    -1,   325,   129,   324,    -1,   322,
     124,   124,   325,   125,   125,    -1,   322,   124,   124,   125,
     125,    -1,   326,    -1,   327,   326,    -1,   124,   331,   125,
      -1,   124,   321,   331,   125,    -1,   135,   136,    -1,   135,
     267,   136,    -1,   135,   268,   136,    -1,   135,   148,   136,
      -1,   328,   135,   136,    -1,   328,   135,   267,   136,    -1,
     328,   135,   148,   136,    -1,   328,   135,   268,   136,    -1,
     124,   125,    -1,   124,   355,   125,    -1,   124,   356,   125,
      -1,   328,   124,   125,    -1,   328,   124,   355,   125,    -1,
     328,   124,   356,   125,    -1,   124,   332,   125,    -1,   124,
     321,   332,   125,    -1,   124,   125,    -1,   124,   355,   125,
      -1,   124,   356,   125,    -1,   329,   124,   125,    -1,   329,
     124,   355,   125,    -1,   329,   124,   356,   125,    -1,   121,
      -1,   121,   284,    -1,   121,   330,    -1,   121,   284,   330,
      -1,   330,    -1,   328,    -1,   330,   328,    -1,   321,   330,
      -1,   321,   330,   328,    -1,   330,    -1,   329,    -1,   330,
     329,    -1,   321,   330,    -1,   321,   330,   329,    -1,   316,
      -1,   330,   316,    -1,   321,   330,   316,    -1,   333,   321,
      -1,   339,   321,    -1,   320,    -1,   330,   320,    -1,   321,
     330,   320,    -1,   334,   321,    -1,   314,    -1,   330,   314,
      -1,   321,   330,   314,    -1,   330,   321,   314,    -1,   315,
      -1,   330,   315,    -1,   321,   330,   315,    -1,   330,   321,
     315,    -1,   318,    -1,   330,   318,    -1,   321,   330,   318,
      -1,   330,   321,   318,    -1,   319,    -1,   330,   319,    -1,
     321,   330,   319,    -1,   330,   321,   319,    -1,   311,    -1,
     330,   311,    -1,   321,   330,   311,    -1,   330,   321,   311,
      -1,   245,    -1,   131,   344,   130,    -1,   131,   344,   129,
     130,    -1,   264,    -1,   131,   344,   130,     1,    -1,   131,
     344,    -1,   131,   344,   129,   130,     1,    -1,   131,   344,
     129,    -1,   244,    -1,   223,    -1,   263,    -1,   224,    -1,
     340,    -1,   341,    -1,   344,   129,   340,    -1,   344,   129,
     341,    -1,   344,   340,    -1,   344,   341,    -1,   333,    -1,
     334,    -1,   333,   128,   340,    -1,   333,     1,    -1,   333,
     128,   341,    -1,   345,    -1,   347,   129,   345,    -1,    37,
     129,   345,    -1,    38,   129,   345,    -1,    39,   129,   345,
      -1,    40,   129,   345,    -1,   149,   129,   345,    -1,   348,
     129,   345,    -1,   346,    -1,   345,     1,    -1,   347,   129,
     346,    -1,   348,   129,   346,    -1,   298,    -1,   298,   331,
      -1,   299,    -1,   299,   331,    -1,   301,   334,    -1,   301,
     331,    -1,   301,   137,    -1,   301,   137,   334,    -1,   301,
      -1,    67,    -1,   301,   334,     1,    -1,   301,   331,     1,
      -1,   351,    -1,   353,   129,   351,    -1,   353,     1,   129,
     351,    -1,   354,   129,   351,    -1,   354,     1,   129,   351,
      -1,     1,   129,   351,    -1,   310,   129,   351,    -1,   310,
       1,   129,   351,    -1,   309,   129,   351,    -1,   309,     1,
     129,   351,    -1,   352,    -1,   353,   129,   352,    -1,   354,
     129,   352,    -1,   354,     1,   129,   352,    -1,     1,   129,
     352,    -1,   310,   129,   352,    -1,   309,   129,   352,    -1,
     309,     1,   129,   352,    -1,   353,    -1,   353,   129,    53,
      -1,   354,   129,    53,    -1,   310,   129,    53,    -1,   309,
     129,    53,    -1,     1,   129,    53,    -1,   354,    -1,   353,
     129,     1,    -1,   354,     1,    -1,   362,    -1,   326,    -1,
     377,    -1,   127,    -1,   133,    -1,   247,   127,    -1,   380,
      -1,   382,    -1,   384,    -1,   361,    -1,   197,   127,    -1,
     196,   127,    -1,   195,   127,    -1,   363,    -1,   383,    -1,
     378,    -1,   381,    -1,   385,    -1,   384,     1,    -1,   265,
      -1,   388,    -1,   388,   124,   245,   125,    -1,   135,   218,
     136,   388,   124,   245,   125,    -1,   359,    -1,   360,   129,
     359,    -1,    -1,    87,   283,   124,   388,   125,   127,    -1,
      87,   283,   124,   388,   133,   360,   125,   127,    -1,    87,
     283,   124,   388,   133,   360,   133,   360,   125,   127,    -1,
      87,   283,   124,   388,   133,   360,   133,   360,   133,   360,
     125,   127,    -1,    87,   283,   124,   388,     3,   360,   125,
     127,    -1,    87,   283,   124,   388,     3,   360,   133,   360,
     125,   127,    -1,    87,   283,   124,   388,   133,   360,     3,
     360,   125,   127,    -1,    87,   124,   388,   125,   127,    -1,
      87,   124,   388,   133,   360,   125,   127,    -1,    87,   124,
     388,   133,   360,   133,   360,   125,   127,    -1,    87,   124,
     388,   133,   360,   133,   360,   133,   360,   125,   127,    -1,
      87,   124,   388,     3,   360,   125,   127,    -1,    87,   124,
     388,     3,   360,   133,   360,   125,   127,    -1,    87,   124,
     388,   133,   360,     3,   360,   125,   127,    -1,   218,   133,
     357,    -1,    54,   267,   133,   357,    -1,    54,   268,   133,
     357,    -1,    54,   133,   357,    -1,    55,   133,   357,    -1,
     218,   133,   366,    -1,    54,   267,   133,   366,    -1,    54,
     268,   133,   366,    -1,    54,   133,   366,    -1,    55,   133,
     366,    -1,   218,   133,   358,    -1,    54,   267,   133,   358,
      -1,    54,   268,   133,   358,    -1,    54,   133,   358,    -1,
      54,   133,    -1,    55,   133,   358,    -1,    55,   133,    -1,
     218,   133,   369,    -1,    54,   267,   133,   369,    -1,    54,
     268,   133,   369,    -1,    54,   133,   369,    -1,    55,   133,
     369,    -1,    81,    -1,    82,    -1,    55,    -1,    81,    -1,
      82,    -1,   300,   127,    -1,   300,   347,   127,    -1,   172,
     127,    -1,   369,   127,    -1,   302,   127,    -1,   302,   347,
     127,    -1,   303,   347,   127,    -1,   176,   127,    -1,    78,
     218,   128,   244,   127,    -1,    31,    78,   218,   128,   244,
     127,    -1,   302,     1,    -1,   300,     1,    -1,   369,     1,
      -1,   173,     1,    -1,   172,     1,    -1,   300,   348,    -1,
     366,    -1,   370,   366,    -1,   371,   366,    -1,   370,     1,
     127,    -1,   369,    -1,   370,   369,    -1,   357,    -1,   372,
     357,    -1,   373,   357,    -1,   358,    -1,   372,   358,    -1,
     373,   358,    -1,   372,   366,    -1,   373,   366,    -1,   372,
     369,    -1,   373,   369,    -1,   372,    -1,   370,    -1,   370,
     372,    -1,   371,   372,    -1,   373,    -1,   371,    -1,   370,
     373,    -1,   371,   373,    -1,   131,    -1,   378,   130,    -1,
     376,   375,    -1,   376,    -1,   376,   374,    -1,   127,    -1,
     247,   127,    -1,   265,   127,    -1,    56,   124,   247,   125,
     357,    -1,    56,   124,   265,   125,   357,    -1,    56,   124,
     247,   125,   357,    66,   357,    -1,    56,   124,   265,   125,
     357,    66,   357,    -1,    57,   124,   247,   125,   357,    -1,
      57,   124,   265,   125,   357,    -1,    56,   124,   265,    -1,
     380,     1,    -1,    58,   124,   247,   125,   357,    -1,    58,
     124,   265,   357,    -1,    58,   124,   125,   357,    -1,    59,
     357,    58,   124,   247,   125,   127,    -1,    59,   357,    58,
     124,   265,   127,    -1,    60,   124,   379,   379,   125,   357,
      -1,    60,   124,   379,   125,   357,    -1,    60,   124,   379,
     379,   247,   125,   357,    -1,    60,   124,   379,   379,   265,
     357,    -1,    60,   124,   125,   357,    -1,    60,   124,   218,
     133,   247,   125,   357,    -1,    60,   124,   218,   133,   247,
     127,   247,   125,   357,    -1,    60,   124,     1,    -1,    60,
     124,   265,     1,    -1,    60,   124,   379,     1,    -1,    60,
     124,   379,   265,     1,    -1,    60,   124,   379,   379,   265,
      -1,    60,   124,   379,   379,   125,   358,    -1,    60,   124,
     379,   379,   247,   125,   358,    -1,    60,   124,   379,   379,
     265,   358,    -1,    59,   357,    58,   124,   247,   125,    -1,
      59,   357,    58,   124,   247,    -1,    59,   357,    58,   124,
     265,    -1,    59,   357,    58,   124,    -1,    59,   357,    58,
      -1,    59,   357,    -1,    59,    -1,    58,     1,    -1,    58,
     124,   125,     1,    -1,    58,   124,   265,    -1,    58,   124,
     247,   125,   358,    -1,    58,   124,   265,   358,    -1,    61,
     218,   127,    -1,    62,   127,    -1,    63,   127,    -1,    64,
     127,    -1,    64,   247,   127,    -1,    64,   265,   127,    -1,
      64,   223,   127,    -1,    64,   224,   127,    -1,    64,   265,
      -1,    64,   224,    -1,    64,    -1,    61,    -1,   302,   335,
     370,   377,    -1,   302,   335,   377,    -1,   302,   337,   370,
     377,    -1,   302,   337,   377,    -1,   335,   370,   377,    -1,
     335,   377,    -1,   302,   335,   370,   378,    -1,   302,   335,
     378,    -1,   302,   337,   370,   378,    -1,   302,   337,   378,
      -1,   335,   370,   378,    -1,   335,   378,    -1,     5,    -1,
     388,     5,    -1,   386,    -1,   215,    -1,   302,   215,    -1,
     367,    -1,    77,   388,    -1,    77,    31,   388,    -1,    77,
     218,   388,    -1,   127,    -1,   364,   386,    -1,   364,   215,
      -1,   364,   367,    -1,   364,    77,   388,    -1,   364,    77,
      31,   388,    -1,   364,    77,   218,   388,    -1,   364,   133,
      -1,    31,   133,    -1,   102,   218,    -1,   102,   151,    -1,
     394,    -1,   364,   394,    -1,   217,    -1,   302,   217,    -1,
     387,    -1,   364,   217,    -1,   364,   387,    -1,   368,    -1,
     364,   368,    -1,   390,    -1,   392,   390,    -1,   391,   390,
      -1,   392,     1,    -1,   391,     1,    -1,   389,    -1,   392,
     389,    -1,   391,   215,    -1,   391,   364,   215,    -1,   392,
      -1,   391,    -1,    -1,   106,   388,   218,   131,   399,   130,
      -1,   106,   388,   151,   131,   399,   130,    -1,   106,   388,
     131,   399,   130,    -1,   301,   218,   388,   127,    -1,   218,
      -1,   123,   218,    -1,   122,   218,    -1,   396,    -1,   397,
     129,   396,    -1,   108,   397,   127,    -1,   108,   397,   218,
     127,    -1,   395,    -1,   398,    -1,   399,   395,    -1,   399,
     398,    -1,   109,   124,   245,   129,   245,   125,    -1,   107,
     124,   388,   129,   218,   125,    -1,   108,   124,   388,   129,
     218,   125,    -1,   106,   124,   388,   125,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   285,   285,   304,   343,   344,   424,   428,   431,   432,
     433,   472,   474,   479,   484,   489,   491,   496,   498,   503,
     505,   510,   512,   514,   516,   518,   522,   526,   539,   541,
     543,   545,   547,   553,   555,   560,   565,   570,   572,   574,
     579,   580,   584,   585,   596,   600,   601,   603,   608,   609,
     611,   614,   626,   637,   656,   658,   663,   664,   665,   666,
     667,   668,   669,   670,   683,   687,   688,   689,   690,   694,
     695,   696,   697,   698,   699,   700,   704,   706,   711,   713,
     715,   717,   719,   749,   751,   756,   758,   760,   762,   764,
     793,   795,   797,   802,   804,   809,   811,   815,   817,   819,
     821,   826,   829,   832,   835,   900,   902,   907,   909,   911,
     913,   915,   946,   950,   951,   952,   956,   957,   958,   962,
     963,   964,   965,   969,   972,   975,   978,   981,   986,   987,
     989,   991,   993,   995,  1000,  1004,  1007,  1010,  1013,  1016,
    1021,  1022,  1024,  1029,  1033,  1035,  1040,  1042,  1047,  1049,
    1054,  1059,  1061,  1066,  1068,  1070,  1072,  1077,  1079,  1081,
    1083,  1088,  1089,  1090,  1091,  1092,  1093,  1094,  1095,  1096,
    1097,  1098,  1100,  1101,  1103,  1107,  1110,  1111,  1112,  1113,
    1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,
    1125,  1126,  1130,  1131,  1132,  1136,  1140,  1141,  1142,  1146,
    1147,  1148,  1149,  1150,  1154,  1155,  1167,  1168,  1172,  1173,
    1174,  1175,  1176,  1177,  1178,  1179,  1183,  1187,  1188,  1192,
    1200,  1201,  1205,  1206,  1207,  1211,  1212,  1216,  1217,  1218,
    1219,  1220,  1221,  1261,  1262,  1266,  1274,  1275,  1283,  1284,
    1286,  1287,  1296,  1297,  1301,  1308,  1315,  1321,  1328,  1334,
    1343,  1350,  1356,  1362,  1368,  1374,  1380,  1391,  1396,  1397,
    1402,  1403,  1404,  1408,  1412,  1413,  1414,  1415,  1416,  1417,
    1418,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,  1439,
    1440,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,  1449,
    1450,  1451,  1452,  1453,  1454,  1456,  1457,  1458,  1459,  1460,
    1462,  1463,  1467,  1471,  1475,  1476,  1480,  1482,  1483,  1484,
    1485,  1486,  1487,  1488,  1489,  1490,  1492,  1493,  1494,  1495,
    1496,  1497,  1498,  1499,  1526,  1527,  1528,  1529,  1533,  1534,
    1535,  1536,  1537,  1541,  1542,  1543,  1544,  1546,  1547,  1548,
    1549,  1552,  1553,  1555,  1559,  1560,  1569,  1570,  1571,  1572,
    1573,  1574,  1575,  1576,  1580,  1581,  1585,  1586,  1587,  1588,
    1589,  1590,  1591,  1595,  1596,  1597,  1598,  1599,  1603,  1604,
    1605,  1606,  1607,  1611,  1619,  1620,  1621,  1622,  1623,  1624,
    1625,  1626,  1627,  1631,  1632,  1633,  1634,  1635,  1637,  1638,
    1639,  1640,  1644,  1645,  1646,  1648,  1649,  1653,  1654,  1655,
    1657,  1658,  1662,  1663,  1664,  1666,  1667,  1671,  1672,  1673,
    1677,  1678,  1679,  1683,  1684,  1685,  1686,  1687,  1689,  1690,
    1691,  1692,  1694,  1695,  1696,  1697,  1699,  1700,  1701,  1702,
    1706,  1707,  1708,  1709,  1710,  1712,  1713,  1714,  1715,  1719,
    1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,
    1733,  1734,  1735,  1736,  1740,  1741,  1742,  1746,  1747,  1748,
    1749,  1751,  1752,  1754,  1755,  1760,  1762,  1767,  1795,  1796,
    1797,  1798,  1800,  1801,  1802,  1803,  1805,  1806,  1810,  1811,
    1820,  1821,  1825,  1826,  1827,  1828,  1829,  1830,  1831,  1835,
    1836,  1840,  1844,  1848,  1855,  1856,  1857,  1858,  1859,  1863,
    1864,  1907,  1908,  1909,  1910,  1911,  1912,  1913,  1917,  1918,
    1919,  1920,  1921,  1928,  1929,  1930,  1931,  1935,  1936,  1937,
    1939,  1940,  1944,  1945,  1946,  1948,  1949,  1953,  1954,  1955,
    1957,  1958,  1962,  1963,  1964,  1968,  1969,  1970,  1974,  1975,
    1976,  1977,  1978,  1979,  1980,  1981,  1982,  1984,  1985,  1986,
    1987,  1988,  1989,  1990,  1991,  1993,  1994,  1995,  1996,  1998,
    1999,  2000,  2001,  2003,  2011,  2015,  2020,  2027,  2028,  2032,
    2037,  2038,  2042,  2043,  2044,  2045,  2051,  2052,  2053,  2057,
    2058,  2059,  2060,  2064,  2066,  2070,  2071,  2072,  2073,  2074,
    2075,  2076,  2080,  2081,  2082,  2083,  2084,  2085,  2086,  2090,
    2091,  2092,  2093,  2094,  2095,  2099,  2100,  2101,  2105,  2109,
    2110,  2114,  2115,  2116,  2120,  2121,  2123,  2124,  2125,  2126,
    2127,  2129,  2130,  2131,  2132,  2133,  2135,  2136,  2140,  2141,
    2145,  2146,  2147,  2151,  2152,  2153,  2154,  2155,  2156,  2157,
    2158,  2159,  2161,  2162,  2164,  2165,  2166,  2167,  2168,  2170,
    2171,  2172,  2173,  2177,  2178,  2182,  2183,  2187,  2191,  2192,
    2193,  2198,  2199,  2203,  2204,  2205,  2206,  2207,  2208,  2209,
    2210,  2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,
    2220,  2221,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,
    2230,  2234,  2235,  2236,  2237,  2238,  2239,  2240,  2241,  2242,
    2243,  2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,
    2253,  2254,  2255,  2256,  2257,  2258,  2259,  2265,  2267,  2269,
    2271,  2273,  2275,  2277,  2279,  2281,  2283,  2288,  2289,  2293,
    2299,  2305,  2312,  2322,  2323,  2324,  2325,  2329,  2330,  2331,
    2333,  2334,  2335,  2337,  2338,  2339,  2343,  2347,  2355,  2364,
    2373,  2374,  2376,  2377,  2381,  2388,  2395,  2398,  2411,  2425,
    2428,  2430,  2432,  2437,  2438,  2442,  2443,  2444,  2445,  2446,
    2447,  2448,  2449,  2453,  2454,  2455,  2456,  2457,  2458,  2459,
    2460,  2461,  2462,  2466,  2467,  2468,  2469,  2470,  2471,  2472,
    2473,  2474,  2475,  2479,  2480,  2481,  2482,  2483,  2484,  2485,
    2486,  2487,  2488,  2489,  2490,  2494,  2495,  2496,  2497,  2498,
    2499,  2500,  2501,  2502,  2503,  2507,  2508,  2512,  2513,  2514,
    2515,  2516,  2517,  2518,  2519,  2520,  2522,  2524,  2532,  2542,
    2543,  2547,  2548,  2549,  2550,  2551,  2552,  2553,  2554,  2555,
    2563,  2572,  2573,  2574,  2575,  2576,  2577,  2578,  2579,  2580,
    2581,  2582,  2583,  2584,  2592,  2601,  2602,  2603,  2604,  2605,
    2606,  2607,  2608,  2609,  2610,  2611,  2612,  2613,  2621,  2630,
    2631,  2635,  2636,  2637,  2638,  2639,  2643,  2644,  2651,  2653,
    2662,  2671,  2680,  2689,  2690,  2691,  2692,  2696,  2697,  2698,
    2699,  2700,  2701,  2702,  2703,  2704,  2708,  2712,  2713,  2714,
    2715,  2716,  2721,  2730,  2739,  2748,  2762,  2763,  2768,  2772,
    2773,  2774,  2775,  2776,  2781,  2790,  2799,  2808,  2822,  2823,
    2872,  2873,  2874,  2875,  2876,  2888,  2889,  2890,  2895,  2896,
    2897,  2898,  2899,  2903,  2904,  2908,  2909,  2910,  2914,  2915,
    2919,  2920,  2924,  2925,  2926,  2927,  2928,  2929,  2930,  2931,
    2932,  2933,  2934,  2935,  2936,  2937,  2938,  2939,  2943,  2944,
    2945,  2946,  2947,  2948,  2949,  2950,  2954,  2955,  2956,  2957,
    2961,  2962,  2963,  2964,  2965,  2969,  2970,  2971,  2972,  2973,
    2977,  2978,  2980,  2982,  2984,  2989,  2990,  2992,  2994,  2999,
    3000,  3001,  3002,  3006,  3007,  3008,  3009,  3013,  3014,  3015,
    3016,  3020,  3021,  3022,  3023,  3027,  3028,  3029,  3030,  3034,
    3035,  3036,  3053,  3054,  3055,  3056,  3069,  3086,  3087,  3092,
    3093,  3097,  3098,  3099,  3100,  3103,  3104,  3108,  3109,  3110,
    3114,  3118,  3122,  3123,  3124,  3125,  3126,  3127,  3128,  3137,
    3146,  3147,  3148,  3149,  3153,  3154,  3158,  3159,  3164,  3165,
    3166,  3167,  3168,  3169,  3188,  3189,  3193,  3194,  3195,  3196,
    3197,  3198,  3200,  3201,  3202,  3203,  3207,  3208,  3209,  3210,
    3211,  3213,  3214,  3215,  3219,  3220,  3221,  3222,  3223,  3224,
    3228,  3229,  3230,  3235,  3236,  3237,  3238,  3239,  3240,  3241,
    3242,  3243,  3244,  3245,  3246,  3247,  3251,  3252,  3253,  3254,
    3255,  3256,  3257,  3261,  3262,  3263,  3267,  3268,  3269,  3273,
    3274,  3275,  3276,  3278,  3279,  3280,  3282,  3283,  3284,  3285,
    3287,  3288,  3289,  3293,  3294,  3295,  3296,  3297,  3299,  3300,
    3301,  3302,  3303,  3307,  3308,  3309,  3310,  3311,  3312,  3313,
    3315,  3316,  3317,  3318,  3319,  3323,  3324,  3325,  3329,  3330,
    3334,  3335,  3336,  3337,  3341,  3342,  3343,  3345,  3346,  3347,
    3351,  3355,  3356,  3358,  3359,  3360,  3364,  3365,  3366,  3367,
    3371,  3372,  3376,  3377,  3378,  3382,  3383,  3384,  3385,  3386,
    3387,  3388,  3392,  3393,  3394,  3395,  3399,  3400,  3401,  3402,
    3406,  3410,  3414,  3416,  3419,  3425,  3426,  3427,  3431,  3432,
    3433,  3434,  3435,  3436,  3440,  3441,  3445,  3446,  3447,  3449,
    3450,  3452,  3453,  3454,  3455,  3456,  3458,  3459,  3463,  3464,
    3465,  3466,  3470,  3471,  3472,  3473,  3475,  3476,  3477,  3478,
    3479,  3480,  3481,  3484,  3488,  3489,  3493,  3494,  3498,  3499,
    3500,  3501,  3502,  3503,  3504,  3505,  3509,  3510,  3511,  3512,
    3518,  3519,  3521,  3522,  3525,  3526,  3529,  3530,  3531,  3532,
    3533,  3534,  3538,  3539,  3551,  3552,  3555,  3558,  3560,  3561,
    3562,  3572,  3574,  3575,  3577,  3578,  3579,  3580,  3590,  3591,
    3592,  3593,  3594,  3595,  3599,  3600,  3609,  3611,  3612,  3614,
    3616,  3620,  3621,  3622,  3623,  3624,  3628,  3629,  3630,  3632,
    3637,  3638,  3639,  3643,  3644,  3645,  3649,  3653,  3654,  3655,
    3659,  3660,  3664,  3665,  3669,  3670,  3671,  3672,  3676,  3680,
    3684,  3688
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "INT128", "FLOAT128", "LONG", "SIGNED",
  "UNSIGNED", "FLOAT", "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST",
  "STRUCT", "UNION", "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH",
  "WHILE", "DO", "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX",
  "ELSE", "CLASS", "THISCLASS", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "THREAD",
  "WIDE_STRING_LITERAL", "BUILTIN_OFFSETOF", "'*'", "'<'", "'>'", "'('",
  "')'", "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'", "':'", "'$'",
  "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'", "'^'", "'|'",
  "'?'", "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "multi_attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    42,    60,    62,    40,    41,   126,    59,    61,    44,
     125,   123,    46,    58,    36,    91,    93,    38,    43,    45,
      33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   146,   147,   147,   148,   148,   149,   150,   151,   151,
     151,   152,   152,   153,   154,   155,   155,   156,   156,   157,
     157,   158,   158,   158,   158,   158,   158,   158,   159,   159,
     159,   159,   159,   160,   160,   161,   162,   163,   163,   163,
     164,   164,   165,   165,   165,   166,   166,   166,   167,   167,
     167,   167,   167,   167,   168,   168,   169,   169,   169,   169,
     169,   169,   169,   169,   169,   170,   170,   170,   170,   171,
     171,   171,   171,   171,   171,   171,   172,   172,   173,   173,
     173,   173,   173,   174,   174,   175,   175,   175,   175,   175,
     176,   176,   176,   177,   177,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   179,   179,   180,   180,   180,
     180,   180,   181,   182,   182,   182,   183,   183,   183,   184,
     184,   184,   184,   185,   185,   185,   185,   185,   186,   186,
     186,   186,   186,   186,   187,   188,   188,   188,   188,   188,
     189,   189,   189,   190,   191,   191,   192,   192,   193,   193,
     194,   195,   195,   196,   196,   196,   196,   197,   197,   197,
     197,   198,   198,   198,   198,   198,   198,   198,   198,   198,
     198,   198,   198,   198,   198,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   200,   200,   200,   201,
     201,   201,   201,   201,   202,   202,   203,   203,   204,   204,
     204,   204,   204,   204,   204,   204,   205,   206,   206,   207,
     208,   208,   209,   209,   209,   210,   210,   211,   211,   211,
     211,   211,   211,   212,   212,   213,   214,   214,   214,   214,
     214,   214,   214,   214,   215,   215,   215,   215,   215,   215,
     216,   217,   217,   217,   217,   217,   217,   218,   219,   219,
     220,   220,   220,   221,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   223,   224,   225,   225,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   227,   227,   227,   227,   228,   228,
     228,   228,   228,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   230,   230,   231,   231,   231,   231,
     231,   231,   231,   231,   232,   232,   233,   233,   233,   233,
     233,   233,   233,   234,   234,   234,   234,   234,   235,   235,
     235,   235,   235,   236,   237,   237,   237,   237,   237,   237,
     237,   237,   237,   238,   238,   238,   238,   238,   238,   238,
     238,   238,   239,   239,   239,   239,   239,   240,   240,   240,
     240,   240,   241,   241,   241,   241,   241,   242,   242,   242,
     243,   243,   243,   244,   244,   244,   244,   244,   244,   244,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     247,   247,   247,   247,   248,   248,   248,   249,   249,   249,
     249,   249,   249,   249,   249,   249,   249,   249,   250,   250,
     250,   250,   250,   250,   250,   250,   250,   250,   251,   251,
     252,   252,   253,   253,   253,   253,   253,   253,   253,   254,
     254,   254,   254,   254,   255,   255,   255,   255,   255,   256,
     256,   256,   256,   256,   256,   256,   256,   256,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   258,   258,   258,
     258,   258,   259,   259,   259,   259,   259,   260,   260,   260,
     260,   260,   261,   261,   261,   262,   262,   262,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   264,   264,   264,
     264,   264,   265,   265,   265,   265,   265,   265,   265,   266,
     266,   266,   266,   267,   268,   269,   269,   269,   269,   269,
     269,   269,   270,   270,   270,   270,   270,   270,   270,   271,
     271,   271,   271,   271,   271,   272,   272,   272,   273,   274,
     274,   275,   275,   275,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   277,   277,
     278,   278,   278,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   280,   280,   281,   281,   282,   283,   283,
     283,   284,   284,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   287,   287,   287,
     287,   287,   287,   287,   287,   287,   287,   288,   288,   289,
     289,   289,   289,   290,   290,   290,   290,   291,   291,   291,
     291,   291,   291,   291,   291,   291,   292,   293,   293,   294,
     295,   295,   295,   295,   296,   296,   296,   296,   296,   296,
     296,   296,   296,   297,   297,   298,   298,   298,   298,   298,
     298,   298,   298,   299,   299,   299,   299,   299,   299,   299,
     299,   299,   299,   300,   300,   300,   300,   300,   300,   300,
     300,   300,   300,   301,   301,   301,   301,   301,   301,   301,
     301,   301,   301,   301,   301,   302,   302,   302,   302,   302,
     302,   302,   302,   302,   302,   303,   303,   304,   304,   304,
     304,   304,   304,   304,   304,   304,   304,   304,   304,   305,
     305,   306,   306,   306,   306,   306,   306,   306,   306,   306,
     306,   307,   307,   307,   307,   307,   307,   307,   307,   307,
     307,   307,   307,   307,   307,   308,   308,   308,   308,   308,
     308,   308,   308,   308,   308,   308,   308,   308,   308,   309,
     309,   310,   310,   310,   310,   310,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   312,   312,   312,
     312,   312,   312,   312,   312,   312,   313,   314,   314,   314,
     314,   314,   315,   315,   315,   315,   316,   316,   317,   318,
     318,   318,   318,   318,   319,   319,   319,   319,   320,   320,
     321,   321,   321,   321,   321,   322,   322,   322,   323,   323,
     323,   323,   323,   324,   324,   325,   325,   325,   326,   326,
     327,   327,   328,   328,   328,   328,   328,   328,   328,   328,
     328,   328,   328,   328,   328,   328,   328,   328,   329,   329,
     329,   329,   329,   329,   329,   329,   330,   330,   330,   330,
     331,   331,   331,   331,   331,   332,   332,   332,   332,   332,
     333,   333,   333,   333,   333,   334,   334,   334,   334,   335,
     335,   335,   335,   336,   336,   336,   336,   337,   337,   337,
     337,   338,   338,   338,   338,   339,   339,   339,   339,   340,
     340,   340,   341,   341,   341,   341,   341,   342,   342,   343,
     343,   344,   344,   344,   344,   344,   344,   345,   345,   345,
     346,   346,   347,   347,   347,   347,   347,   347,   347,   347,
     348,   348,   348,   348,   349,   349,   350,   350,   351,   351,
     351,   351,   351,   351,   352,   352,   353,   353,   353,   353,
     353,   353,   353,   353,   353,   353,   354,   354,   354,   354,
     354,   354,   354,   354,   355,   355,   355,   355,   355,   355,
     356,   356,   356,   357,   357,   357,   357,   357,   357,   357,
     357,   357,   357,   357,   357,   357,   358,   358,   358,   358,
     358,   358,   358,   359,   359,   359,   360,   360,   360,   361,
     361,   361,   361,   361,   361,   361,   361,   361,   361,   361,
     361,   361,   361,   362,   362,   362,   362,   362,   362,   362,
     362,   362,   362,   363,   363,   363,   363,   363,   363,   363,
     363,   363,   363,   363,   363,   364,   364,   364,   365,   365,
     366,   366,   366,   366,   367,   367,   367,   367,   367,   367,
     368,   369,   369,   369,   369,   369,   370,   370,   370,   370,
     371,   371,   372,   372,   372,   373,   373,   373,   373,   373,
     373,   373,   374,   374,   374,   374,   375,   375,   375,   375,
     376,   377,   378,   378,   378,   379,   379,   379,   380,   380,
     380,   380,   380,   380,   381,   381,   382,   382,   382,   382,
     382,   382,   382,   382,   382,   382,   382,   382,   383,   383,
     383,   383,   383,   383,   383,   383,   383,   383,   383,   383,
     383,   383,   383,   383,   383,   383,   383,   383,   384,   384,
     384,   384,   384,   384,   384,   384,   385,   385,   385,   385,
     386,   386,   386,   386,   386,   386,   387,   387,   387,   387,
     387,   387,   388,   388,   389,   389,   389,   389,   389,   389,
     389,   389,   389,   389,   389,   389,   389,   389,   389,   389,
     389,   389,   389,   389,   390,   390,   390,   390,   390,   390,
     390,   391,   391,   391,   391,   391,   392,   392,   392,   392,
     393,   393,   393,   394,   394,   394,   395,   396,   396,   396,
     397,   397,   398,   398,   399,   399,   399,   399,   400,   401,
     402,   403
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     1,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     1,     3,     3,     1,     1,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     2,     5,     6,     6,     2,     5,     1,     1,
       1,     4,     1,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     1,     3,     3,     1,     5,
       5,     5,     5,     4,     4,     4,     4,     5,     5,     5,
       5,     4,     4,     4,     4,     5,     5,     5,     5,     5,
       5,     5,     5,     3,     3,     2,     2,     1,     3,     3,
       3,     3,     1,     2,     3,     3,     2,     2,     2,     1,
       2,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     2,     4,     4,     1,     3,     2,     1,     2,
       2,     2,     4,     4,     3,     3,     4,     5,     4,     6,
       6,     4,     5,     4,     6,     6,     5,     5,     2,     2,
       2,     5,     3,     5,     6,     5,     7,     7,     8,     8,
       7,     7,     3,     3,     3,     4,     3,     5,     5,     6,
       7,     6,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     4,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     4,     4,     1,     1,     2,     2,
       3,     5,     2,     3,     5,     5,     5,     1,     3,     2,
       2,     3,     3,     2,     3,     3,     4,     3,     3,     3,
       3,     3,     3,     4,     4,     4,     1,     1,     4,     3,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     1,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     1,     1,
       2,     1,     2,     1,     2,     1,     2,     4,     5,     1,
       1,     1,     2,     1,     2,     1,     2,     1,     2,     4,
       5,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     4,     5,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     4,     5,     3,
       3,     1,     3,     3,     3,     3,     1,     1,     1,     4,
       4,     4,     3,     4,     4,     4,     3,     1,     3,     4,
       3,     4,     4,     4,     4,     3,     2,     3,     3,     3,
       3,     2,     2,     2,     3,     4,     1,     1,     2,     3,
       3,     3,     3,     2,     2,     2,     3,     4,     1,     1,
       1,     1,     1,     1,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     2,     3,     6,     5,
       1,     2,     3,     4,     2,     3,     3,     3,     3,     4,
       4,     4,     2,     3,     3,     3,     4,     4,     3,     4,
       2,     3,     3,     3,     4,     4,     1,     2,     2,     3,
       1,     1,     2,     2,     3,     1,     1,     2,     2,     3,
       1,     2,     3,     2,     2,     1,     2,     3,     2,     1,
       2,     3,     3,     1,     2,     3,     3,     1,     2,     3,
       3,     1,     2,     3,     3,     1,     2,     3,     3,     1,
       3,     4,     1,     4,     2,     5,     3,     1,     1,     1,
       1,     1,     1,     3,     3,     2,     2,     1,     1,     3,
       2,     3,     1,     3,     3,     3,     3,     3,     3,     3,
       1,     2,     3,     3,     1,     2,     1,     2,     2,     2,
       2,     3,     1,     1,     3,     3,     1,     3,     4,     3,
       4,     3,     3,     4,     3,     4,     1,     3,     3,     4,
       3,     3,     3,     4,     1,     3,     3,     3,     3,     3,
       1,     3,     2,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       1,     2,     1,     1,     4,     7,     1,     3,     0,     6,
       8,    10,    12,     8,    10,    10,     5,     7,     9,    11,
       7,     9,     9,     3,     4,     4,     3,     3,     3,     4,
       4,     3,     3,     3,     4,     4,     3,     2,     3,     2,
       3,     4,     4,     3,     3,     1,     1,     1,     1,     1,
       2,     3,     2,     2,     2,     3,     3,     2,     5,     6,
       2,     2,     2,     2,     2,     2,     1,     2,     2,     3,
       1,     2,     1,     2,     2,     1,     2,     2,     2,     2,
       2,     2,     1,     1,     2,     2,     1,     1,     2,     2,
       1,     2,     2,     1,     2,     1,     2,     2,     5,     5,
       7,     7,     5,     5,     3,     2,     5,     4,     4,     7,
       6,     6,     5,     7,     6,     4,     7,     9,     3,     4,
       4,     5,     5,     6,     7,     6,     6,     5,     5,     4,
       3,     2,     1,     2,     4,     3,     5,     4,     3,     2,
       2,     2,     3,     3,     3,     3,     2,     2,     1,     1,
       4,     3,     4,     3,     3,     2,     4,     3,     4,     3,
       3,     2,     1,     2,     1,     1,     2,     1,     2,     3,
       3,     1,     2,     2,     2,     3,     4,     4,     2,     2,
       2,     2,     1,     2,     1,     2,     1,     2,     2,     1,
       2,     1,     2,     2,     2,     2,     1,     2,     2,     3,
       1,     1,     0,     6,     6,     5,     4,     1,     2,     2,
       1,     3,     3,     4,     1,     1,     2,     2,     6,     6,
       6,     4
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1302,   257,     6,   592,   593,   594,   596,   597,   664,   665,
     666,   667,   668,   669,   670,   672,   675,   676,   673,   674,
     658,   659,   663,   671,   763,   764,   608,  1147,   235,   684,
     920,   921,     0,     0,   925,  1145,  1146,   685,   686,   677,
       0,     0,     0,     0,     0,   926,   927,   688,   687,   689,
     690,   598,   595,   966,     0,  1271,   811,   680,     8,     4,
       0,     0,     0,  1265,     0,  1284,   887,   805,     0,   679,
       0,   653,   655,   813,   815,   660,   807,   809,   746,   678,
       0,     0,   654,   656,     0,     0,     0,     0,     0,   989,
     657,     0,   922,   923,     0,     0,     0,  1267,  1289,  1264,
    1286,  1296,  1291,     0,     0,     0,  1282,     0,  1279,  1262,
       0,     0,  1268,     0,     0,     0,     0,  1281,  1280,     0,
     661,   967,   657,   968,   878,   877,   887,   919,   876,   906,
     980,     0,   918,   985,     0,     0,     0,     0,     0,     0,
    1157,     0,   237,   236,     0,     0,   245,     0,   244,     2,
       3,     0,     5,     0,   610,   609,     0,     0,   630,     0,
       0,     0,     0,   750,     0,   730,   729,     0,  1160,   594,
     667,   668,   669,   670,  1154,   812,     8,  1266,  1285,   887,
     806,   814,   816,   808,   810,   989,   997,   657,     0,     0,
    1028,     0,     0,     0,  1040,     0,     0,   878,     0,     0,
       0,   877,     0,     0,   896,     0,     0,   585,   586,   587,
     589,   590,  1053,   591,   588,   901,   799,   871,   793,     0,
     803,     0,   795,   797,   746,   801,     0,     0,  1052,     0,
       0,  1056,  1066,     0,     0,     0,     0,     0,     0,   941,
     990,     0,   692,   693,   694,   695,   696,   697,   698,   700,
     703,   704,   701,   702,   691,   699,   716,   705,     0,     0,
     710,   709,   711,   712,  1190,   708,     0,     0,   783,   707,
     789,   785,   787,   791,   706,     0,  1166,     0,     0,     0,
       0,  1255,  1261,   594,     0,  1278,  1273,  1287,     0,  1274,
    1290,  1272,  1288,  1283,  1295,  1298,     0,     0,     0,     0,
       0,  1293,  1294,  1297,  1292,     1,     0,  1269,  1270,  1263,
       0,     0,   458,   263,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   273,     0,   347,     0,   350,     0,     0,   346,
     348,   349,   351,     0,   265,     0,   264,   306,   272,   271,
     258,   457,     0,   344,   354,     0,   356,   363,   368,   374,
       0,   383,   392,   397,   402,   407,   410,   413,   430,     0,
     479,   478,   480,   482,   489,   494,   499,   508,   517,   522,
     527,   532,   535,   538,     0,   260,   296,   297,   298,   299,
       0,     0,     0,     0,     0,   662,   969,     0,   908,     0,
     913,     0,     0,     0,     0,     0,     0,     0,   919,   981,
     986,     0,   888,   983,   890,   988,   984,   677,     4,   229,
     228,   227,   233,     0,   264,   354,   219,   480,     0,   206,
     249,     0,     0,   248,   255,     0,     0,  1148,  1149,     0,
     168,     0,   169,   170,     0,     0,     0,     0,     0,   172,
     246,     0,     0,     0,     0,    29,    31,   163,   175,   188,
       0,   187,     0,   116,   119,     0,   195,   128,     0,   164,
     140,     0,   167,   183,   196,   199,     0,     0,   264,     0,
       0,   176,     0,   993,   657,     0,    12,    18,     0,   818,
     817,   825,   819,     0,   821,   823,   746,   830,   829,   250,
     256,   247,     0,     0,   239,   238,   643,   599,   605,   642,
     646,   632,     0,     0,     0,   222,   223,   224,   225,     0,
     217,     0,   759,   752,     0,     0,   749,   756,   751,     0,
       0,   762,   753,     0,     0,   732,   731,     0,     0,     0,
       0,     0,     0,     0,   990,   998,     0,  1030,     0,     0,
    1251,  1257,     0,  1253,  1259,  1041,  1155,     0,     0,     0,
    1156,   895,     0,   264,   583,   584,     0,     0,     0,     0,
     610,   609,   611,     0,   733,     0,     0,   667,     0,     0,
    1050,   800,     8,   887,   794,   804,   796,   798,   802,   919,
     876,   657,   971,   970,     0,     0,     0,   900,     0,     0,
     899,     0,     0,     0,  1082,     0,   897,   898,   991,     0,
     992,     0,     0,  1164,  1152,  1163,    76,  1161,   695,   696,
     697,   698,  1150,   887,   784,   790,   786,   788,   792,   657,
       0,  1165,  1162,  1153,     0,  1167,     0,  1254,  1260,  1168,
       0,     0,     0,     0,     0,     0,     0,     0,  1249,     0,
       0,     0,   705,     0,     0,     0,   157,  1086,  1087,   708,
       0,     0,     0,   264,     0,   354,     0,     0,   480,   567,
     572,     0,  1084,  1172,  1175,  1092,  1083,  1096,     0,     0,
       0,     0,  1194,  1192,  1085,  1098,     0,  1099,  1090,  1097,
       0,  1100,  1191,     0,     0,  1275,   887,     0,     0,     0,
    1285,     0,   876,   997,   657,     0,     0,     0,     0,  1261,
    1299,     0,     0,   413,     0,     0,   924,     0,   337,   472,
       0,   333,   468,   334,   469,     0,   865,   855,   863,   857,
     859,   861,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   341,   476,     0,   274,     0,     0,
       0,   769,   765,   767,   771,  1044,     0,   261,     0,   301,
     302,     0,   325,     0,   324,     0,   460,    93,     0,   270,
     459,     0,   314,   315,     0,     0,     0,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   439,     0,     0,
     336,   471,   335,   470,     0,     0,     0,     0,     0,     0,
       0,   375,   500,     0,     0,   373,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   681,     0,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   682,   683,     0,     0,     0,  1314,
    1315,     0,     0,     0,   882,     0,     0,     0,   886,     0,
       0,     0,   912,   911,   909,   910,   919,   981,   986,   889,
     891,  1008,    10,     9,     0,     0,     0,   657,   970,   207,
       0,     0,   264,   206,     0,     0,   837,   831,   833,   835,
       0,     0,     0,    16,    20,     0,   185,   184,   186,     0,
       0,     0,     0,   347,     0,   264,     0,    26,     0,    21,
      28,    24,     0,    25,    23,    22,    30,    32,   190,    83,
     191,   122,   162,     0,     0,     0,     0,   132,     0,     0,
     134,     0,     0,   143,   161,   200,   197,   202,   201,   198,
     203,   115,     0,     0,     0,   887,   727,   177,  1005,     0,
    1001,   657,     0,    11,    17,   717,   903,  1052,     0,     0,
       0,   994,     0,     0,   173,   165,   192,   181,     0,   180,
       0,   166,   887,   179,     0,   610,   609,   826,   820,   822,
     824,     0,     0,     0,   940,   602,   607,   645,     0,     0,
       7,   212,   208,   748,     0,     0,     0,     0,  1027,  1034,
    1035,  1036,  1037,  1038,    64,    53,    92,    39,    38,    57,
      69,    45,    48,     0,    74,    56,     0,     0,     0,  1018,
    1020,     0,  1017,  1019,     0,    41,    44,   919,   991,   982,
     999,   987,  1008,  1000,     0,  1009,  1012,  1029,  1031,  1250,
    1256,  1252,  1258,  1033,  1042,  1039,  1043,   894,   892,   893,
    1079,  1061,  1070,   615,   614,     0,     0,   458,   734,     0,
       0,   458,   735,     0,     0,     0,   952,   887,     0,     0,
     657,   970,     0,     0,     0,   944,     0,     0,     0,     0,
       0,  1051,   973,     0,     0,   972,  1055,  1054,     0,   870,
    1078,   873,  1064,  1072,     0,   869,  1077,   872,  1062,  1071,
       0,  1081,  1075,   874,  1057,  1067,     0,  1076,   875,  1059,
    1068,   928,   929,   932,   931,   930,     0,   933,   935,     0,
       0,     0,     0,    77,     0,  1151,  1169,     0,     0,     0,
       0,     0,     0,  1233,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   264,     0,  1084,  1231,  1089,  1091,
       0,     0,  1239,  1240,  1241,     0,  1247,     0,     0,     0,
       0,     0,     0,   158,   144,  1095,  1094,  1093,     0,     0,
       0,   573,     0,  1088,     0,     0,     0,     0,   453,     0,
       0,   458,     0,     0,     0,     0,  1173,  1176,  1178,     0,
    1174,  1177,  1179,     0,  1205,  1101,  1276,  1277,   237,   236,
       0,     0,     0,   998,     0,     0,  1257,     0,  1259,  1260,
       0,     0,  1158,     0,     0,   777,   264,   779,   773,   775,
     781,  1046,     0,     0,     0,     0,     0,     0,   866,   856,
     864,   858,   860,   862,   657,   976,   975,     0,   851,   841,
     849,   843,   845,   847,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
       0,   770,   766,   768,   772,  1045,     0,     0,   458,     0,
       0,     0,   105,     0,   300,   458,     0,     0,    94,   458,
       0,     0,   461,   313,   309,   329,   463,   464,   328,   465,
     312,     0,     0,   435,   431,   303,   357,   483,   358,   484,
     359,   485,   364,   490,   365,   491,   369,   495,   370,   496,
     377,   502,   378,   503,   376,   501,   388,   513,   384,   509,
     389,   514,   385,   510,   395,   520,   393,   518,   400,   525,
     398,   523,   405,   530,   403,   528,   408,   533,   411,   536,
     563,     0,   579,     0,     0,     0,     0,   437,   433,   462,
     321,   318,     0,   466,   467,   320,     0,     0,   436,   432,
     360,   486,   361,   487,   362,   488,   366,   492,   367,   493,
     371,   497,   372,   498,   381,   506,   382,   507,   379,   504,
     380,   505,   390,   515,   386,   511,   391,   516,   387,   512,
     396,   521,   394,   519,   401,   526,   399,   524,   406,   531,
     404,   529,   409,   534,   412,   537,   564,     0,     0,     0,
       0,   438,   434,     0,     0,  1307,  1310,     0,     0,  1305,
    1316,  1317,     0,     0,   881,   879,   880,   885,   883,   884,
     234,   232,   231,   230,   264,   657,   973,   241,     0,   207,
     240,   127,     0,   125,   838,   832,   834,   836,     0,   657,
       0,    15,    19,     0,   182,  1005,   657,     0,   139,     0,
     137,   838,     0,   264,   657,     0,    27,    84,   117,   120,
     118,   121,   129,   130,   131,   133,   141,   142,   114,   112,
     113,    13,   719,   722,     0,     0,   915,  1052,     0,     0,
       0,  1006,  1002,     0,     0,   718,   887,   904,   995,   996,
     887,   193,   194,   178,     0,     0,     0,     0,   600,   601,
       0,   606,     0,     0,   635,   631,     0,     0,     0,     0,
       0,   226,   218,   216,     0,     0,     0,    36,    37,    75,
      54,     0,    55,     0,    63,    61,    72,    67,    73,    60,
      90,    39,    70,    62,    91,    59,    71,    68,     0,    58,
       0,   695,    33,    35,    34,  1021,  1022,     0,   623,   613,
       0,   618,   612,     0,   458,   736,     0,     0,     0,   970,
       0,   942,   953,   954,   947,   945,   946,     0,   974,   955,
       0,     0,   948,     0,     0,     0,  1065,  1073,  1052,  1063,
    1058,  1060,  1069,   939,     0,     0,     0,   936,   713,   714,
     715,   458,     0,     0,  1126,  1136,  1131,     0,     0,     0,
    1127,  1138,  1132,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1230,  1218,     0,  1195,   264,     0,     0,
       0,  1238,  1244,  1245,  1242,  1243,     0,     0,     0,     0,
     145,  1123,  1133,  1128,     0,   159,   570,   568,     0,     0,
       0,   451,   574,   571,   569,   452,   575,     0,   999,  1256,
    1258,  1159,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   778,   780,   774,   776,   782,  1047,     0,   293,
     291,     0,     0,   960,   657,     0,     0,     0,     0,     0,
       0,   978,     0,   977,     0,     0,     0,   852,   842,   850,
     844,   846,   848,     0,   267,     0,   266,   295,     0,     0,
       0,     0,     0,     0,  1321,     0,     0,     0,     0,     0,
     355,   481,   262,   108,   106,   327,   326,    99,   103,   310,
       0,   311,   307,   308,   580,     0,     0,     0,     0,     0,
       0,   319,   316,   317,     0,     0,     0,     0,  1309,  1308,
    1312,     0,     0,     0,  1304,  1303,     0,   970,   218,     0,
       0,   123,   126,     0,     0,     0,     0,     0,  1006,     0,
     135,   138,     0,    14,   458,     0,     0,   728,     0,   887,
     916,  1007,  1003,  1004,   720,   723,   905,   174,   827,     0,
     243,   242,   603,   604,     0,   634,     0,   213,   214,   204,
     209,   210,   220,     0,     0,    51,    46,    49,    52,    47,
      50,    37,    43,    40,    42,     0,     0,  1025,  1026,   622,
       0,   617,     0,   973,   972,   943,   956,   957,   950,   949,
     951,  1049,  1048,     0,   938,   937,    79,  1124,  1134,  1129,
       0,  1125,  1135,  1130,     0,     0,     0,     0,     0,  1234,
    1208,     0,     0,  1207,  1237,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1215,     0,  1196,  1219,
    1197,  1220,     0,     0,     0,  1108,   924,  1108,     0,     0,
     155,     0,     0,     0,   160,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   473,   292,   867,     0,   975,
       0,   958,   961,   962,   277,   278,     0,   979,   963,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   268,
     281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   477,     0,   331,   330,   455,   581,   422,   555,   414,
     539,   426,   559,   418,   547,   456,   582,   423,   556,   415,
     540,   427,   560,   419,   548,   424,   557,   416,   541,   428,
     561,   420,   549,   425,   558,   417,   542,   429,   562,   421,
     550,  1311,  1313,  1306,   839,     0,   124,   150,  1007,     0,
     136,    86,   917,     0,     0,   828,     0,     0,     0,     0,
       0,     0,   205,     0,   221,     0,     0,  1023,  1024,  1013,
       0,     0,     0,     0,   934,  1198,  1199,  1202,  1203,  1206,
    1236,     0,     0,     0,     0,     0,     0,     0,  1212,  1221,
       0,     0,     0,     0,  1106,     0,  1103,  1116,     0,  1108,
       0,  1108,     0,     0,     0,     0,   475,   474,   977,   959,
     868,   964,   965,   275,   276,   853,   285,   286,     0,     0,
       0,     0,   279,   280,   289,   290,     0,     0,   294,  1319,
    1320,  1318,   343,   840,     0,   721,   724,   726,   725,     0,
       0,   215,   211,     0,  1010,  1015,     0,     0,     0,     0,
       0,     0,     0,  1226,  1210,     0,     0,  1211,  1223,     0,
    1214,  1225,     0,     0,     0,  1108,     0,  1108,     0,  1108,
       0,  1109,     0,     0,     0,   148,     0,   153,     0,   156,
       0,   854,   283,   284,     0,   287,   288,   171,  1011,  1200,
    1201,     0,     0,  1209,  1216,     0,  1213,  1224,     0,  1120,
    1107,     0,     0,     0,  1117,     0,     0,  1108,  1108,     0,
    1108,   147,   146,   151,   149,     0,     0,   355,   481,   269,
       0,     0,     0,  1104,     0,     0,  1108,  1113,     0,     0,
    1110,     0,     0,   154,  1217,     0,  1121,  1122,  1118,     0,
       0,     0,     0,  1108,   152,     0,     0,  1114,  1115,  1111,
       0,  1105,  1119,     0,  1112
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   216,    57,    58,   991,   343,   451,   452,   453,   454,
     455,   456,   457,   458,  1007,  1008,  1009,  1010,  1011,  1012,
    1013,  1014,  1015,  1016,  1017,  1018,   266,   267,   459,   460,
      60,   344,   345,   760,   789,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,  2114,  2115,  2116,   473,   660,
     661,   662,   474,   475,   476,   477,  1808,   419,   515,   420,
     516,   421,   517,   518,   881,   422,   423,    61,    62,    63,
      64,    65,   346,   347,   348,   349,   350,  1019,  1020,   351,
     352,   763,  1287,   353,   665,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   748,
     843,   667,  1344,   370,   371,   668,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   669,   670,  1145,
    1346,   566,   567,   218,    67,   508,   509,   219,    69,   220,
     221,    70,    71,    72,    73,    74,    75,   222,   121,   223,
     272,   946,   947,   224,   225,   226,    79,    80,    81,    82,
      83,   227,   755,  1221,   275,   481,    85,    86,   498,   499,
     891,  1244,   732,  1068,  1069,   127,    87,   482,    89,   483,
     130,   131,   132,   950,   133,   122,    91,  1117,  1118,  1119,
      92,    93,   592,  1235,   485,   594,  1237,   136,   190,   486,
     487,   192,   954,   138,  1037,  1556,  1025,  1026,  1557,   193,
     194,   195,   196,   756,  1222,   231,   232,   233,   234,   235,
     236,   673,   674,  2034,  2035,   675,   676,   677,    96,   488,
     276,    97,    98,   277,   278,   279,   680,   681,   682,   683,
     280,   684,   912,  1640,  1148,   687,   688,   689,  1149,   691,
      99,   100,   385,   101,   102,   103,   104,   105,   106,   849,
    1416,  1417,   850,   851,   386,   387,   388,   389
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -2047
static const int yypact[] =
{
   38577, -2047, -2047, -2047, -2047,    -5, -2047, -2047, -2047, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047,
   -2047, -2047,   143,    77, -2047, -2047, -2047, -2047, -2047, -2047,
      -6,    31,   251,    86,   181, -2047, -2047, -2047, -2047, -2047,
   -2047, -2047, -2047,  2116,  1905, -2047, -2047, -2047,   295, -2047,
     353,    86,   421, -2047,   206,   437,   932, -2047,   155, -2047,
     748, -2047,   476, -2047, -2047, -2047, -2047, -2047,   983, -2047,
    1041,   487, -2047,   496,  1316, 38174,  3420,   -29, 38877, -2047,
     520,   605, -2047,   254,  1183,  8851, 36619, -2047, -2047, -2047,
   -2047, -2047, -2047, 38681, 37765,   694, -2047,    77, -2047, -2047,
     181,   181,   737,   636,   181, 29227,    86, -2047, -2047,   323,
   -2047,  2116, -2047, -2047, -2047,   655, -2047,   726,   816, -2047,
   -2047, 38976, -2047, -2047,  1905,  2471,  1265,  1787,  1423, 24160,
   -2047,   640,   294,   512, 30346, 41163, -2047, 30474, -2047, -2047,
   -2047,    86, -2047,  1237,  1143,  1154,   149, 41163, -2047, 40890,
   30602, 41163, 30730, -2047, 30858, -2047, -2047,    86, -2047, -2047,
     768,   681,   699,   707, -2047, -2047,  1186, -2047,   437,   561,
   -2047, -2047, -2047, -2047, -2047,  1170,  2274,   520,  2471,  1550,
    1423,  8851,  8851,   244, -2047,  1224,   715,   733,   681,   699,
     707,   892,   520,  1246, -2047, 27747,   764, -2047, -2047, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047, -2047,   803, -2047,   288,
   -2047,   775, -2047, -2047,   817, -2047,   841,  1558, 35691,   402,
     624, -2047, -2047,   686,   687,   879,   914,   448,   856, -2047,
   -2047,   448, -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047,   896,   922,
   -2047, -2047, -2047, -2047, -2047, -2047,   136,    73, -2047, -2047,
   -2047, -2047, -2047, -2047, -2047, 38376, -2047, 17831, 37043, 41647,
   17972, -2047,   956,  1015,   863, -2047, -2047,   437, 38275, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047,   476,   496, 39471,  8851,
   39762, -2047, -2047, -2047, -2047, -2047,   982,   737,   737, -2047,
   29227,   603, -2047, -2047, 29301, 29375, 29375,   993, 41345, 29227,
   -2047, -2047,  1002,  1043, 41345, 29227,  1053,  1074,  1084,  1095,
    1103, 29449, -2047,  1125, -2047, 24408, -2047,   181,  9762, -2047,
   -2047, -2047, -2047,  1133, -2047,    78,  1157, -2047, -2047,    77,
   -2047, -2047, 13046, -2047,  2861, 27821, -2047,  1090,   216,   666,
   29227,   639,  1062,  1219,  1167,  1185,  1350,   159,  2861,  1319,
     646, -2047,  2861, -2047,  1101,  1051,  1410,   697,  1535,  1304,
    1252,  1315,  1451,   264,  2861,   737, -2047, -2047, -2047, -2047,
    1353,   308, 40981,  1352,  1363, -2047, -2047, 27895, -2047, 27969,
   -2047,   738,   804,  1376,  1382,  2471,  2382,  2453,   726, -2047,
   -2047,   776, -2047, -2047, -2047, -2047, -2047,  1002,  1133, -2047,
   -2047, -2047, -2047,   939,   593, -2047,   666, -2047,  1410, 35807,
   -2047, 24284, 40890, -2047,   338, 40617, 39859, -2047, -2047,  1392,
   -2047,    86, -2047, -2047,    77, 40053, 39665,  4807, 41254, -2047,
   -2047,  1270,  1396,  1396,   311, -2047,  1405, -2047, -2047, -2047,
     110,   847,   119, -2047, -2047, 29698,  1415, -2047,  1230, -2047,
   -2047,   920, -2047, -2047, -2047,  1436, 29834, 29962,   365,   101,
     646, 36831, 39075, -2047,   520,  1183, -2047, -2047, 36725, -2047,
   -2047,  1456, -2047,    86, -2047, -2047, -2047,  2229, 41345, -2047,
     338, -2047, 30090, 30218,  1460,  1471, -2047,  1082, -2047,  1507,
   -2047, -2047,  2374,  1470,    96, -2047, -2047, -2047, -2047,   952,
     806, 35807,   665, -2047, 30986, 31114, -2047,   665, -2047, 31242,
   31370,   665, -2047, 31498, 31626, -2047, -2047,  1905,  1905,  1905,
    1905,  1905, 22340,   776,  1170,  2274,   776, -2047, 28043, 37043,
   -2047,   956, 37043, -2047,   956, -2047, -2047,  1905,  1905,   776,
   -2047, -2047,  1503,   319, -2047, -2047,  1512,  1516, 40708,  1488,
    1526,  1528, -2047, 31754, -2047, 31882,   379, -2047, 35456, 28117,
    1905, -2047,  1401,   803, -2047, -2047, -2047, -2047, -2047,   726,
    1533,   520,   916,    54,   380,  1820,  1534, -2047, 40344,  1542,
   -2047, 40435,  1545, 40526,  1546, 40799, -2047, -2047, -2047,  1883,
   -2047, 29227,    86, -2047, -2047,  1551, -2047, -2047,   768,   681,
     699,   707, -2047,  1549, -2047, -2047, -2047, -2047, -2047,   520,
    1368,   715, -2047, -2047,  1556, -2047, 18113, -2047,   956, -2047,
     342, 28191,  1557,  1560,  1567,   395, 18254,  1568,    77,  1572,
    1574, 18395,  1002,  1049,  1579,  1582,    77, -2047, -2047,  1133,
    1581,  1583,  1585,  1391, 16271,  2861, 16562, 25675,  2861,  2861,
   -2047, 16703, 38477, -2047, -2047, -2047, -2047, -2047, 18536, 18677,
   18818, 18959, -2047, -2047, -2047,   956, 19100, -2047, -2047, -2047,
   19241, -2047, -2047,   181,   181,   737,   401,    86,  1397,  1580,
   -2047,   726,   -29, -2047,   520,  2471,  8851,  8851, 37043, -2047,
   -2047, 39568, 29227,   322,  1587,   350, -2047, 24548, -2047, -2047,
   28265, -2047, -2047, -2047, -2047, 41345,  1595, -2047, -2047, -2047,
   -2047, -2047, 36155, 41345, 24688,    77, 36271, 41345, 29227,   181,
     181,   181, 29227, 24408, -2047, -2047,  6306, -2047, 13205, 13351,
   13497, -2047, -2047, -2047, -2047,  9672,  1593,    59, 22480, -2047,
   -2047,   135, -2047,   667, -2047, 22620,  1589, -2047, 22760, -2047,
   -2047,  1530, -2047, -2047, 10062,  1559, 29227, -2047, -2047, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047, 27821,   140,
   -2047, -2047, -2047, -2047, 29227, 29227, 29227, 29227, 29227, 29227,
   29227,   666,  1410, 29227, 29227, -2047, 29227, 27821, 27821, 27821,
   27821, 27821, 29227, 29227, 13643, 27821, -2047,  1578, -2047, -2047,
   11086,  1584, 29227, 27821, 29227, 29227, 29227, 29227, 29227, 29227,
   29227, 29227, 29227, 29227, 29227, 27821, 27821, 27821, 27821, 27821,
   29227, 29227, 13789, 27821, -2047, -2047,   581,   803, 41254, -2047,
   -2047, 37865, 40981, 40981, -2047,  1573,  1592,  1598, -2047,  1600,
    1604,  1605, -2047, -2047, -2047, -2047,   726, -2047, -2047, -2047,
   -2047,  1596, -2047, -2047, 24160, 24160, 35575,   520,   950, -2047,
     690,  1052,  1565, 35807,  1080,  1611,  1624, -2047, -2047, -2047,
    2229, 35923, 39956, -2047, -2047,    77, -2047, -2047, -2047, 36937,
    1622,    77, 36039,  3084, 24812,  1472, 40150, -2047,  1627, -2047,
     956, -2047,   956, -2047, -2047, -2047,   956, -2047,  1590, -2047,
     784, -2047, -2047,  3519,  3519,  1396,  1396, -2047,  1396,   196,
   -2047,  1396,  1396, -2047, -2047,   815, -2047,  1436,   815, -2047,
    1436,   947, 28339,  2356, 29227,   626, -2047,  1629,   726, 39174,
   -2047,   520,  2471, -2047, -2047,   933,   764, 35691, 29562,   648,
     448, -2047,   448,  1905, -2047, -2047, -2047, -2047,   153, -2047,
     214, -2047,   365, 36831, 24160, -2047, -2047,  1634, -2047, -2047,
   -2047, 40890, 40890, 29227, -2047,  1318,    77, -2047, 32010,   162,
   -2047,   789,   979, -2047, 40890,    77,   881,    77,  1668, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047, -2047,  1396, -2047, -2047,
   -2047, -2047, -2047, 37147,  1465, -2047, 22900, 41544, 23040, -2047,
   -2047, 12688, -2047, -2047, 40247, -2047, -2047,   726,  1170, -2047,
    2274, -2047,   726, -2047, 28043, -2047, -2047, -2047, -2047, -2047,
     956, -2047,   956, -2047, -2047, -2047, -2047, -2047, -2047, -2047,
   -2047, -2047, -2047, -2047,  1507,   184,   195,  1630, -2047, 32138,
   32266,  1632, -2047, 32394, 32522, 32650, -2047,   305,   378,   389,
    1112,  1192,  1638,  1639,  1641, -2047,  1631,  1633,  1635,   520,
     776,  1423,    54, 39273, 28413,   916, -2047, -2047, 41072, -2047,
   -2047,   803, -2047, -2047, 41072, -2047, -2047,   803, -2047, -2047,
   41072, -2047, -2047,   803, -2047, -2047, 41072, -2047,   803, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047,  1643,  1648, -2047,  1340,
    1651,  1656,   328, -2047, 23180, -2047, -2047, 19382,  1653,  1658,
   19523, 29227, 29227, -2047, 28487, 28561,  1661,  1671,  1677, 25181,
    1681,    77, 25749,  2030,  1479, 25823, -2047,  1707, -2047, -2047,
   25897,  1680, -2047, -2047, -2047,  1685,  1689, 25971, 16844,   181,
    1694, 29227, 29227,    77, -2047, -2047, -2047, -2047, 22060,   773,
   27821, -2047,   569, -2047, 29227, 13935, 14081, 27821, -2047, 29227,
   14227,  1556, 19664, 19805, 19946, 20087, -2047, -2047, -2047, 20228,
   -2047, -2047, -2047, 20369, -2047, -2047,   737,   737,  1697,  1698,
   35210, 35337,   776, -2047,   776, 37043, -2047, 37043, -2047, -2047,
    1696, 27821, -2047, 27821,   717, -2047,   365, -2047, -2047, -2047,
   -2047,  9672,  1703,  1710, 41436, 24160, 38778, 29227,  1717, -2047,
   -2047, -2047, -2047, -2047,   520,  1724,  1726,  1716,  1737, -2047,
   -2047, -2047, -2047, -2047, 36387, 26045,  1735,  1739,  1744, 29227,
    1738, 36503,  1743,   606,   343,   372,  1748,  1753,  1750, -2047,
      77, -2047, -2047, -2047, -2047, -2047, 29227,   181,   255, 37250,
   23320,  1751, -2047, 27821, -2047,   258, 37353, 23460, -2047,   259,
   37456, 23600, -2047, -2047, -2047, -2047,  1027,  1755, -2047, -2047,
   -2047, 26119,  6495, -2047, -2047,  1751, -2047, -2047, -2047, -2047,
   -2047, -2047,  1090,  1101,  1090,  1101,   216,  1051,   216,  1051,
     666,  1410,   666,  1410,   666,  1410, -2047, -2047,   639,   697,
   -2047, -2047,   639,   697, -2047, -2047,  1062,  1535, -2047, -2047,
    1219,  1304, -2047, -2047,  1167,  1252,  1185,  1315,  1350,  1451,
   -2047,    61, -2047, 26193,  1752,  7166,  1756, -2047, -2047, -2047,
   -2047, -2047,  1028, -2047, -2047, -2047, 26267,  7851, -2047, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047,  1090,  1101,  1090,  1101,
     216,  1051,   216,  1051,   666,  1410,   666,  1410,   666,  1410,
     666,  1410, -2047, -2047,   639,   697, -2047, -2047,   639,   697,
   -2047, -2047,  1062,  1535, -2047, -2047,  1219,  1304, -2047, -2047,
    1167,  1252,  1185,  1315,  1350,  1451, -2047, 26341,  1760,  8715,
    1764, -2047, -2047,    77,    77, -2047, -2047,   266,   619, -2047,
   -2047, -2047, 37968, 38071, -2047, -2047, -2047, -2047, -2047, -2047,
   -2047, -2047, -2047, -2047,  1616,  1903,   950, -2047, 24160,    77,
   -2047, -2047, 24160, -2047,    50, -2047, -2047, -2047,   434,   520,
    2471, -2047, -2047,   359,  1629,  1596,   520,  2471, -2047,  1758,
   -2047,   568,   446,   961,  1905,  1763, -2047, -2047, -2047, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047,  3085, -2047,
   -2047, -2047, -2047, -2047, 23740,  1478,   764, 35691, 21920,   670,
     776,   726, -2047,   776, 29227, -2047,   895, -2047, -2047, -2047,
    1776,  1590,  1589,  1629,  1083, 24160,  1173,  1201, -2047, -2047,
   29227, -2047, 32778, 32906,  1775, -2047,  4410, 41254, 41254, 41254,
   41254, -2047, -2047, -2047, 29227,  1777, 28635, -2047,   956, -2047,
   -2047, 28709, -2047, 28783, -2047, -2047, -2047,  1469,  1465, -2047,
   -2047,  1396, -2047, -2047, -2047, -2047, -2047,  1469,  1465, -2047,
   28857, 11231, -2047, -2047, -2047, -2047, -2047, 20510, -2047, -2047,
     223, -2047, -2047,   234,  1779, -2047, 33034, 33162,   520,  1192,
    1785, -2047, -2047, -2047, -2047, -2047, -2047,   776,   916, -2047,
    1788,  1792, -2047,  1784,  1786,  1789, -2047, -2047, 35691, -2047,
   -2047, -2047, -2047, -2047, 29227,  1796,   955, -2047, -2047, -2047,
   -2047,   270, 37559, 23880, -2047, -2047, -2047, 20651, 22060, 22060,
   -2047, -2047, -2047, 20792, 26415, 16985, 26489, 26563, 25321, 26637,
   17126, 22200,  1790,  1791, 22200, 29227, 28931,  1872, 26711,  1689,
    8251,   181, 22200,  1819, 12870, 25181, -2047,  1498, 26785,  9915,
   26859, -2047, -2047, -2047, -2047, -2047,   187,   181,  1821,  1123,
   -2047, -2047, -2047, -2047, 20933, -2047, -2047, -2047,  1823,  1824,
      77, -2047, -2047, -2047, -2047, -2047, -2047, 40890, -2047, -2047,
   -2047, -2047, 26933,  1817, 10261,  1822, 27007,  1827, 10898,  1828,
    1829,  1840, -2047, -2047, -2047, -2047, -2047, -2047, 14373, -2047,
   -2047,  1841,  1210, -2047,  2698,  1842,  1844,  1845,  1846,  1850,
   24160,  1726, 39372,  1724, 29227, 24160, 29227,  1855, -2047, -2047,
   -2047, -2047, -2047,  1853, -2047, 29005, -2047, -2047,  1857,  1858,
   29227, 29227,  1854,  6306, -2047,    77,    77, 29227, 14519,    77,
   -2047, -2047,   737, -2047, -2047, -2047, -2047, -2047, -2047, -2047,
   14665, -2047, -2047, -2047, -2047, 27821, 14811, 14957, 27821, 15103,
   15249, -2047, -2047, -2047, 15395, 15541, 15687, 15833, -2047, -2047,
   -2047,   581,  1875,   447, -2047, -2047,   520,   950,  1993,  1213,
   24160, -2047, -2047,  1874,   776,   776,  1396,   776,  1596,  1878,
   -2047, -2047,  1876, -2047,   298, 37662, 24020, -2047,   520,  1022,
   -2047,   726, -2047, -2047,  1885,  1889, -2047, -2047, -2047,  1225,
   -2047, -2047, -2047, -2047, 33290,  1882, 33418, -2047,  1900, 35807,
   -2047,  1911, -2047, 29227, 28043,  1830, -2047, -2047,  1830, -2047,
   -2047, -2047,  1830, -2047, -2047, 21074, 21215, -2047, -2047, -2047,
   33546, -2047, 33674,    54,   916, -2047, -2047, -2047, -2047, -2047,
   -2047, -2047,  1423, 27081, -2047, -2047, -2047, -2047, -2047, -2047,
   21356, -2047, -2047, -2047, 21497, 25181, 24901, 25181, 24901, 16416,
   -2047, 25461, 17267, -2047, -2047, 22200, 22200, 27155, 25181, 27229,
   25041,  1907, 11622, 27303,   190, 21638, -2047, 29227, -2047, 16416,
   -2047, 12870, 25181, 12127, 29079,    62,  1914,    62,   247,  1915,
   -2047,    77, 29227, 29227,    77, 27821, 27821, 27821, 27821, 27821,
   27821, 27821, 27821, 15979, 16125, -2047, -2047, -2047,   520,  1726,
    1923, -2047, -2047, -2047, -2047, -2047,  1296,  1724, -2047,  1925,
    1926,  1916,  1917,  1320,  1918,  1919, 24160, 29227, 24408, -2047,
   -2047, -2047,  1920,  1921,  1929,  1932, 29227,  1937,  1944,  1945,
    1950, -2047,  1953, -2047, -2047, -2047, -2047, -2047, -2047, -2047,
     350, -2047, -2047, -2047,   350, -2047, -2047, -2047, -2047, -2047,
     350, -2047, -2047, -2047,   350, -2047, -2047, -2047,   350, -2047,
   -2047, -2047,   350, -2047, -2047, -2047,   350, -2047, -2047, -2047,
     350, -2047, -2047, -2047, -2047,  1332, -2047, -2047,  1596, 27821,
   -2047, -2047, -2047, 29227, 29227, -2047, 33802, 33930, 34058, 34186,
   34314, 41254, -2047, 41254, -2047,  4147, 21779, -2047, -2047, -2047,
   34442, 34570, 34698, 34826, -2047,  2015,  2016, -2047, -2047, -2047,
   -2047, 25181, 29227, 29153,  1914, 17408, 17549, 12374, -2047, 16416,
   25461, 27377, 17690,    77, -2047,  1026,   582, -2047,   129,    62,
    1956,    62,   366,   391,  1959,  1148, -2047, -2047,  1724, -2047,
   -2047, -2047, -2047, -2047, -2047, -2047, -2047, -2047,  1348,  1949,
    1952,  1964, -2047, -2047, -2047, -2047,  1957,  1958, -2047, -2047,
   -2047, -2047, -2047, -2047,  1969, -2047, -2047, -2047, -2047, 34954,
   35082, -2047, -2047, 27451, -2047, -2047, 25181, 25181, 27525, 25601,
   25181, 27599, 25041,  1970, -2047, 25181, 29227, -2047, -2047, 25461,
   -2047, -2047,  1962,  1973,    62,    62, 29227,    62,  1974,    62,
    1279, -2047,   172,  1396,   471, -2047,   383, -2047,  1971, -2047,
      77, -2047, -2047, -2047, 28635, -2047, -2047, -2047, -2047, -2047,
   -2047,  1970, 25181, -2047, -2047, 27673, -2047, -2047,   181, -2047,
   -2047,  1188,  1978,  1249, -2047,  1355,  1977,    62,    62,  1981,
      62, -2047, -2047, -2047, -2047,   366,   544, -2047, -2047, -2047,
   25181,   642,  1982, -2047,  1984,  1985,    62, -2047,  1258,  1277,
   -2047,  1375,   545, -2047, -2047, 29227, -2047, -2047, -2047,  1307,
    1986,  1988,  1991,    62, -2047,  1996,  1995, -2047, -2047, -2047,
    1329, -2047, -2047,  1998, -2047
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2047,  1831,   -23, 10189, -2047,  2091, -2047, -2047, -2047, -2047,
   -2047, -2047,  1642,  1645,  -987, -2047,  -968, -1003,   109,   120,
    -960,  -941,  -802, -2047,  -588,  -558, -2047, -2047,  1647,  1650,
   -2047,  3999,  5382, -2047,   392,   632,   651, -2047, -2047, -2047,
   -2047,  1652, -2047, -2047, -2047,  -652, -2046,   -28, -2047, -2047,
   -2047, -2047,   855,  2553,   -47,   -22,   616,  -856, -2047,  -829,
   -2047,  -867, -2047,  1150,  -142,  1271,  -898,   -30,  1848,   -13,
    1849,    -4,     0, -2047,  1220, -2047, -2047,  4924,  4188, -2047,
    5129,  -442,  1328, -2047,  3594, -2047,  -334,   304,   193,   739,
   -2047,   170,  -467,  -224,   -88,    37,    95,   317,  9060,  4656,
    -267,  8619,  -803,  5375, -2047,  4343,  -234,   456,   570,   918,
     330,   128,   197,   148,   198,   201,   995,   714,  -479,  7399,
    -793,  2336,  1626, 10667,   -67,  1164,  -146,   623, 11163,  8324,
   -2047, -2047, -2047,   -78,   -41,   -65, -2047,  6760, -2047,   930,
    2141,   673,  -561,  2541,  8934, -2047, 11338, -2047, -2047, -2047,
     -66,  3587, -2047, -2047,  1640,  6478,   -62, -2047, -2047,  1309,
    1715,  1427,  1847,   -76,   -60,  3013, 10339,  7595,  7263,  -454,
    -129,  -403,  2236,  -905,    38,  3240, -2047, -2047, -1084, -2047,
     179,  1663,  -571, -1207,  7535,  1678,  -709,   127,   185,   835,
    1729,  -272,  -780,  -474,  -907,  -545,  -940,  -937,   354,  1399,
    1048,   -33,  1898,  -723,  -575,  -350,  -399,  -466, -2047,  -122,
    -107,  7090,  -297,    70,  -674, -2047, -2047, -2047,  2072, -2047,
    2320,  2082,   -54,  2733,   -69,  1904,   938,   944, -2047, -2047,
   -2047,   -94,  1146, -1588,  -215, -2047, -2047, -2047,   107, -2047,
    2084,   -36,    19,  2079,  1540, -2047, -2047, -2047,  2092,  -828,
     428, -2047,  -806,   802, -2047, -2047, -2047, -2047
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1302
static const yytype_int16 yytable[] =
{
      66,   281,  1479,  1038,  1163,  1480,   409,   955,  1433,   403,
     512,  1246,   229,  1536,  1542,  1546,   959,   519,   180,  1431,
     182,   792,  1085,  1420,   404,   296,   707,  1250,   230,  1703,
    1541,   961,   111,   113,   288,  1597,   151,   297,   141,  1408,
    1873,   298,   290,   118,   181,  1421,  1432,  1492,  1535,  1410,
    1545,   112,  1884,   203,   126,   401,  1537,     1,  1547,   409,
     292,   143,  1744,   119,   309,   686,   152,   109,   155,  1036,
    2154,   402,   177,   107,   615,  1538,  1504,  1548,   949,   766,
       1,   178,     2,   286,   166,   179,   126,   788,   217,     1,
     295,   124,   287,   390,   126,   204,    66,   550,   553,     1,
     502,   815,   941,    66,    66,   823,   205,   306,   771,   772,
     773,   918,  1452,   524,     2,   529,   391,   533,   114,   394,
     920,   793,   549,   552,   990,   503,  2154,  1555,   108,   307,
     308,   217,  2107,   311,   126,   126,  1271,   613,   525,   424,
     530,  1295,   534,   152,   478,   491,     1,   478,   109,   151,
     510,   505,     1,   507,  1501,   115,   507,   491,     1,   520,
     478,   491,   478,  1514,   478,     1,  1522,   536,  1257,  1052,
    1269,  1258,  1770,   410,   110,  2148,   813,  1276,   578,   152,
    1280,  1771,   562,     2,   637,  1558,   109,     1,   126,   579,
    1885,  1267,   309,  1885,  -454,   309,  1561,  2033,     1,  1093,
    1270,   109,  1099,   616,  1105,   563,  1110,  1277,   767,   953,
    1281,   678,   189,   189,  1539,  1502,  1549,   152,  1051,   571,
     296,   180,   296,   182,  1829,   774,   410,   166,   583,   942,
     708,   180,   297,   775,   297,  1831,   776,   126,   711,   137,
     919,   126,   630,  1453,  1553,   555,   290,   181,  1092,   767,
    2039,  1098,   309,  1104,  2108,  1109,  -109,   181,  2104,  -100,
    -104,   406,  2109,   614,   292,  1272,  1542,  1546,   697,     1,
    1272,   -82,   239,  1542,  1546,   623,   867,  1542,  1546,   511,
     663,   841,  1541,   919,   694,  2023,   153,   710,   696,  1541,
     884,     1,  1515,  1541,   700,  1288,   287,  2149,    66,   -89,
      66,  2104,  1545,   695,   814,  2150,  -871,  1085,     1,  1545,
    1547,     1,  1886,  1545,  1559,  2024,     2,  1547,   726,   407,
    1887,  1547,     1,  1887,   726,  1562,     1,  1692,   309,  1548,
     337,     1,  1286,   146,    34,   563,  1548,   147,  1454,   813,
    1548,  1288,  1326,   632,   767,  -458,  -458,  -458,   309,   769,
    1830,     2,   986,  -621,   797,   798,   757,   909,   911,   913,
     915,  1832,     1,   986,  -616,    45,    46,   841,     1,     1,
    1392, -1032,  2040, -1032,   855,   116,   859,   309,  1352,   596,
    2041,  1086,     1,  1187,  1191,  -109,     1,   690,  -100,  -104,
     599,   152,   847,  1760,     1,  1761,  1133,   563,  1170,   563,
     -82,  1177,   189,   596,     1,   126,   958,     2,  1673,   842,
    1677,   126,  1503,   595,  1029,   189,   431,   139,  1675,   569,
    1679,    -8,   230,  1054,   152,   955,   149,   150,   -89,   847,
    1029,   882,   520,   845,  -871,   886,   583,     1,   914,   707,
    2113,   897,   264,   868,   898,   847,   886,   905,   847,     1,
     768,     1,   309,  1600,   392,  1039,  1073,  2113,  1041,   672,
    1296,  1298,  1300,   686,   686,   686,   686,  1211,  1549,   633,
    -458,  1074,  1725,  -458,     1,  1549,   478,   478,   152,  1549,
     140,   945,   217,  1489,  1776,   126,   149,   150,   972,   949,
    1360,  1362,  1364,   976,  1917,  1213,   768,   166,   977,   955,
    1085,  1726,   478,   478, -1049, -1049,  1498,   598,  1499, -1049,
    1065,  1578,  1845,  2153,   992,     1,  2117,  1695,   601,  1134,
     152,   996,   149,   150,   478,   478,  1059,   597,  1063,   478,
     478,   598,   542,   478,   478,  1713,  1602,   126,   126,   126,
     126,   126,  1722,   126,  1769,  1492,   126,     1,     1,   949,
    1554,  1060,   144,  1064,   145,  1036,  1076,   126,   126,   126,
    1297,  1299,  1301,   152,     1,  1772,  1603,   148,   847,   507,
     949,  1433,    54,   478,  1983,   478,   536,  1781,  1067,   563,
     126,  1031,  1431,   152,     1,  1792,  1330,   309,  1793,  1121,
    1361,  1363,  1365,   126,  1420,  1420,     1,  1031,  1091,  1542,
    1546,  1097,   264,  1103,  -216,  1108,   158,  1799,   309,  1768,
    1823,   309,  1122,  1824,  1396,  1541,  1421,  1421,   162,  2113,
    1451,   949,     1,    68,   109,   599,   163,   713,    28,     1,
     908,   410,   137,   296,   432,  1545,   713,  1205,  1207,   433,
    1247,    53,   713,  1547,   180,   297,  1144,   309,  1151,   602,
    1827,   803,   804,   817,   818,   819,  1164,  1812,  1658,  1659,
    1660,  1807,  1548,  1810,   998,   998,   998,   998,   998,  2173,
     181,   602,  -458,  -458,  -458,  2184,   799,   800,   663,   663,
     663,   663,   149,   150,   189,   189,   984,   602,   604,  1587,
    1770,  1657,   542,     1,   305,  1662,   152,  1199,  1664,  1780,
    1666,   953,  2048,  1413,  1414,   126,  2106,  1592,    68,   831,
     832,   583,  1196,  1197,   149,   150,  -216,  1216,   990,    68,
       1,   875,  -216,  1334,   768,  1223,    68,    68,   716,   238,
     761,  1724,  1228,  1238,   563,  1248,  1228,  1238,  1586,   596,
     149,   150,   309,  1216,  1589,     2,   847,   149,   150,   600,
    1590,  1400,  1552,   601,  1073,  1260,  1591,  1484,  1253,  1254,
    1255,   805,   806,   137,   310,  1081,  2175,   430,   493,  1074,
     820,  1283,  1497, -1074,  1289,  1290,     1,   603,   821,     1,
     493,   822,  1542,  1546,   493,   690,   690,   690,   690,  -458,
     397,  -460,  -460,  -460,  1790, -1074,  1273,  -458,  1541,   603,
    -458,  1549,  1916,  1274,     2,   599,     1,  1923,  1929,     1,
     538, -1074, -1080,   124,   725,   603,   605,  1350,  1545,   833,
     834,  1355,  -458,  -458,  -458,  1146,  1547,   403,   539,   384,
    1605,  1472,  1473,  1611,  1474,    95,   540,  1476,  1477,  1506,
    1507,   725,   404,  1516,   558,  1548,  1415,   152,  1418,  1336,
     398,   847,   847,   847,  -265,  -265,  -265,   672,   672,   672,
     672,   399,   537,   862,  1655,  1578,     1,   598,   109,  1792,
    1793,  1652,  1985,  1488,   424,  1434,   217,  1402,   426,   156,
     992,   157,   152,   996,     1,  1187,  1191,  1187,  1191,   402,
     166,  1444,   583,   568,   693,  1164,  1785,   537,     1,   583,
      54,  1459,  1461,  -878,  1463,   572,   847,  1555,  1338,  1560,
    1563,    68,   686,  1527,  1278,   686,  -460,  1517,  2007,   565,
     191,    68,  1518,    68,   149,   150,  1786,   149,   150,   863,
      77,    95,  1730,   601,   995,     1,  1404,  1327,   299,    95,
     204,  1512,   409,   126,  -907,   152,  2004,  -458,   573,   217,
     872,   205,   126,   686,  -459,  -459,  -459,  1496,  1111,  1335,
     126,  1580,   126,  1500,     1,  1393,  1513,   686,   686,   686,
     686,   574,   152,   945,   424,  -265,  1581,  1318,  1322,  -265,
     609,   520,   520,  1112,  1549,  1910,   507,  1401,   478,   507,
     931,   932,  1306,  1308,   520,  1523,   152,  1525,  1834,    28,
    1937,  1113,   149,   150,   606,  1384,  1388,  1331,  1894,  1524,
    1337,   955,  1828,    34,  1339,   184,   149,   150,  1566,  1796,
     611,   541,  1370,  1372,   126,     1,    77,   397,  2058,   713,
    1114,  1115,  1731,    77,    77,  1397,  -887,  -887,  1403,   607,
    1083,  -887,  1405,  1567,    45,    46,   612,   949,  -887,  2074,
     933,  1084,   384,   149,   150,   507,   507,   428,   493,   478,
     478,  1583,   873,   478,   478,   478,  1494,   152,   874,   493,
     126,   126,  -887,  -887,   876,   993,   807,   808,  1036,  -459,
     126,   994,   126,   217,   563,   579,   692,   949,   847,   137,
     949,   152,   768,   107,   847,    20,    21,   152,  1827,   801,
     847,  1302,  1304,   152,  1696,   159,   847,  1519,   152,   410,
     712,   565,  1520,   565,  -747,     1,  -747,   725,   410,  1697,
    1031,   493,   152,   191,    30,    31,   734,   663,   137,    34,
     663,  1366,  1368,   706,  1495,   299,    40,  1319,  1323,  1144,
       2,  1151,   595,   149,   150,  2081,  1992,  2082,   137,   124,
    1637,  2103,  1739,  1751,   502,  2104,  1740,  1740,   587,  2105,
      45,    46,    34,  1650,   239,  1385,  1389,   735,   663,  1290,
     426,  -906,   160,  1159,   161,  1437,  2007,   738,  1646,   503,
     761,   994,   663,   663,   663,   663,     1,    30,    31,   827,
     828,  1681,    34,    45,    46,     1,  1834,   406,   739,    40,
     478,   478,   126,  1440,   126,  2061,  1798,   761,   740,   994,
     983,   794,   874,  2038,   847,   761,   152,  2159,   184,   741,
       2,   847,   824,    45,    46,   424,   217,   742,   184,   124,
      77,   795,   796,    53,   690,   761,   578,   690,   506,  2043,
       1,   282,   825,   826,  1707,  -906,  -906,   579,  1890,   746,
    -906,  1707,  1891,  1303,  1305,   407,  1023,  -906,    30,    31,
     152,  1944,  1578,    34,   765,   753,  1662,    30,    31,  1666,
      40,   893,    34,  2119,  -629,   690,  -629,  2120,   802,    40,
    2008,  -906,  -906,  1367,  1369,  -628,  1732,  -628,   768,   690,
     690,   690,   690,   565,    45,    46,  1800,  -906,  -906,  -906,
     925,   926,   994,    45,    46,   715,   672,    54,   139,   672,
     810,  1848,  1852,  2162,   715,   541,   578,  2104,  1146,     1,
     715,   397,   927,  1864,  1801,   384,   928,   579,   929,   811,
     994,   936,   939,  1907,    68,  1036,  1984,   551,   554,   874,
      30,    31,   874,  1111,     2,    34,  1036,   672,  1995,   428,
      34,   556,    40,   557,   874,   565,   809,   936,   939,   587,
     930,   672,   672,   672,   672,  2110,   812,  2112,  1112,  1307,
    1309,   949,   949,   560,  2164,   557,    45,    46,  2104,   936,
     939,    45,    46,  2180,   936,   939,  1113,  2104,   936,   939,
     412,    30,    31,   686,   686,   838,    34,   907,    34,  1371,
    1373,   264,  2181,    40,  2146,   686,  2104,  -877,  2104,  -877,
    -877,   587,  2147,  1758,  1759,  1114,  1115,  1762,   152,  2050,
     829,   830,   847,   847,   638,   874,   685,    45,    46,    45,
      46,  2141,  2186,  2143,   152,  2145,  2104,  1763,  1434,  1525,
     867,   837,   424,  2055,   816,   709,  1510,   164,  1773,   874,
     126,   587,   384,  1650,  2193,  2073,   384,   126,  2104,   839,
    1828,   874,  1782,   152,   126,  1595,   513,   840,  2156,  1596,
     526,  2121,  1023,  2168,  2169,  -877,  2171,   874,   844,  1023,
    2165,     1,  1023,   852,  2104,   126,  -877,  1789,  2166,  1053,
     126,     1,  2179,   126,   853,  1125,   152,   557,    30,    31,
    2182,   864,   384,    34,  2104,   424,     2,   865,  2183,  2190,
      40,  -877,   478,   478,   493,   124,   895,   847,   847,   847,
     847,  -877,   768,   139,  1168,   493,  1036,   264,  1200,   384,
     145,  1282,   917,     1,    45,    46,   397,   384,  2008,  -877,
    -877,  -877,  1310,  1312,   924,  1314,   706,  -887,  -887,   835,
     836,   547,  -887,    30,    31,  1468,  1470,   384,    34,  -887,
    1289,     1,     1,   934,  2020,    40,   478,   478,     1,   126,
    1374,  1376,  1378,  1380,  1469,  1471,  -216,   126,   974,  1349,
    1919,     1,   981,  -887,  -887,  1354,     2,     1,   583,    45,
      46,   406,  1532,   982,  1533,  1920,  1530,   910,  1531,    53,
     916,   989,    54,   768,  1036,  1044,  1046,   868,   663,   663,
     768,   944,  1632,   426,   426,  1031,  1182,  1184,  1144,     1,
     663,  1144,  1183,  1185,  1144,    30,    31,  -216,  1637,   768,
      34,  1877,  1144,    30,    31,  1144,   986,    40,    34,  1047,
    1816,   184,  1819,   301,   304,    40,   686,  1219,  1048,   407,
    1874,  1817,  1049,  1820,  1422,  1423,  1023,  1055,   565,  1056,
    1164,    45,    46,  1088,   753,   761,  1888,   520,   205,    45,
      46,  1094,   595,  1219,  1100,  1106,  1219, -1027,   548, -1027,
    1124,  1123,  1987,  1126,  1131,  1263,   149,   150,  -216,   575,
    1130,  1132,  1150,  1438,  -216,  1040,   768,   565,  1042,  1152,
     424,  1153,   217,  1161,  1029,   424,  1162,   715,  1165,  1424,
    1166,  1201,  1167,   426,  1212,   690,   690,  1225,  1266,  1278,
    1467,  1311,  1313,  1260,  1315,  1938,  1939,   690,  1425,  1942,
    1023,   399,  1023,  2098,  1426,  2101,  1427,   149,   150,  -216,
    1428,  1429,  1441,    30,    31,  -216,  1442,   768,    34,  1375,
    1377,  1379,  1381,  1458,  1466,    40,  1505,  1996,  1485,  1999,
    -739,  1415,  -742,  1571,  1572,  1633,  1573,  1574,  1593,  1575,
     424,  1576,  1594,  1842,   126,   126,  1598,   126,   587,    45,
      46,  1599,  1997,  2010,  2000,  2012,  1608,   672,   672,   152,
    2157,  1609,   428,   428,  1624,  1625,  1526,  1146,   565,  1146,
     672,  1626,  2137,   672,   478,  1628,   478,  1641,  2011,   847,
    2013,   672,  1642,   587,  1146,   686,  1643,   686,  1647,  1667,
     432,  1087,   587,  1671,   685,   685,   685,   685,  1688,   587,
     478,    56,   478,   126,   753,  1689,   587,  -458,  1023,  1700,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  1702,   565,
    1226,  1704,  1206,  1208,  1209,  1144,  1144,  1144,  1144,  1705,
    1715,   663,    30,    31,  1716,  1144,  1144,    34,  1144,  1717,
    1144,  1031,  1723,  1720,    40,   384,   384,  1727,  1728,  1729,
    1741,  1734,  1144,  1779,   686,  1747,  1111,   587,  1783,  1750,
    2158,  1164,   428,  1755,  1650,    30,    31,  1757,    45,    46,
      34,  1797,  1804,   587,  2036,  1813,  2036,    40,     1,  -745,
    1835,  1112,   414,  1836,   936,   939,   175,  1837,   936,   939,
    1838,  1844,  1839,  1865,  1866,  1840,   424,    56,   563,  1113,
    1871,    45,    46,     2,    56,    56,   999,  1000,  1001,  1002,
    1003,   565,   124,  1875, -1048, -1048,  1889,  1892,  1893, -1048,
    1896,  2079,  -458,  -458,  1903,  1898,  1043,  1045,  1114,  1115,
    1900,  1902,  -458,   565,   426,  1904,  1906,  1911,   690,  1912,
    1913,  -458,  -458,  -458,  -458,  -458,  2080,  1926,    30,    31,
      30,    31,  1914,    34,  1023,    34,  1915,   384,  1927,  1936,
      40,  1023,    40,  1930,  1931,  1023,   478,   478,   478,   478,
     478,   847,  1982,   847,  -231,  1986,  1989,  1990,  1116,  1998,
     478,   478,   478,   478,    45,    46,    45,    46,  1993,  2151,
    2152,  1144,  1994,   857,    53,   861,    53,   876,  2001,    54,
     663,  2022,   663,  2102,  1146,  1146,  1146,  1146,   579,  2003,
    1146,  2037,  1164,  1650,   672,   672,  2042,  1146,  2049,  1146,
    2051,  2052,  2053,  2054,  2056,  2057,  2062,  2063,  2036,   581,
    2036,  1146,  2068,   713,   713,  2064,   713,   713,  2065,  2069,
    2070,   713,   713,   713,   713,  2071,    20,    21,  2072,   478,
     478,  2086,  2087,  2111,  2118,  2122,  1144,  1144,  2123,  2124,
    1144,    59,  1144,  2125,  2126,  1144,  2127,  2133,  2138,   663,
    2139,  2144,  2155,  2163,  2167,    30,    31,   879,  2170,  2176,
      34,  2177,  2178,  2187,  1650,  2188,  1164,    40,  2189,   175,
    1164,  2191,  2192,  2036,  2036,  2194,  2036,  2172,  2036,   175,
     965,    56,  1144,   966,   117,   967,  1811,   690,   968,   690,
     971,    45,    46,   428,  1521,  1430,   698,   699,  1353,  1475,
    1511,  1685,    59,  1528,  1631,  1164,  1650,  2161,  1787,   154,
    1144,   902,    20,    21,  1251,   894,  2036,  2036,  2005,  2036,
     985,   736,  1164,   631,  2140,   300,    59,   426,   289,    59,
     291,   426,  1024,   303,   679,  2036,   265,    59,   293,  1981,
       0,    30,    31,     0,    59,    59,    34,     0,  1023,   997,
    1146,     0,  2036,    40,     0,  1078,   690,    59,   565,  1146,
     393,  1146,   713,   713,   713,   713,   713,   713,   713,   713,
       0,     0,    59,     0,   565,     0,     0,    45,    46,     0,
     418,     0,     1,     0,     0,   418,   265,    53,   418,     0,
     384,     0,     0,     0,   426,  1023,     0,  1023,   265,     0,
      59,   418,   265,   418,     0,   418,  1072,     2,     0,     0,
     581,     0,     0,   426,  1023,  1146,  1146,  1129,     0,  1146,
       0,  1146,     0,   685,  1146,  -918,   685,     0,  1146,     0,
       0,     0,   265,   265,     0,     0,   495,   761,   761,   761,
     761,   761,   761,   761,   761,     0,   418,     0,   495,     0,
       0,     0,   495,     0,    30,    31,   713,     0,     0,    34,
     570,  1146,   581,     0,   685,     0,    40,  1023,     0,    59,
       0,   186,     0,     0,     0,     0,     0,     0,   685,   685,
     685,   685,     0,     0,     0,     0,     0,     0,     0,  1146,
      45,    46,     0,     0,     0,     0,     0,     0,     0,  -918,
    -918,  1669,   581,  1670,  -918,     0,   428,     0,     0,     1,
     428,  -918,     0,     0,     0,  1224,   265,   936,   939,   265,
     265,   659,     0,     0,     0,   987,     0,  -644,     0,    59,
       0,   761,     0,     0,     2,  -918,  -918,     0,     0,    59,
     265,    59,     0,   124,     0,     0,     0,     0,  1024,     0,
       0,  -918,  -644,  -918,     0,  1024,     0,     0,  1024,   265,
       0,  -644,  -644,  -644,  -644,   265,   627,   587,   565,     0,
     565,   936,   939,   428,   545,     0,   418,     0,     0,   384,
       0,    30,    31,  1265,   565,   565,    34,     0,     0,   426,
       0,   384,   428,    40,   426,     0,     0,     0,     0,  -644,
    -644,     0,     0,     0,  -644,     0,     0,    30,    31,   730,
       0,  -644,    34,     0,     0,   730,     0,    45,    46,    40,
       0,     0,     0,     0,     1,     0,     0,    53,     0,     0,
      54,  1481,     0,    59,     0,  -644,  -644,     0,   418,     0,
     418,     0,     0,    45,    46,  -644,     0,     0,  -644,     2,
    1023,   988,     0,   986,  -644,     0,     0,   869,   124,   426,
       0,     0,     0,     0,     0,     0,     0,     0,   587,     0,
      59,     0,   418,    59,   186,     0,   265,    59,    30,    31,
       0,     0,   896,    34,   703,     0,    59,   265,     0,    59,
      40,    78,   175,     0,     0,     0,    30,    31,  1215,     0,
       0,    34,   426,     0,  1072,     0,     0,     0,    40,     0,
       0,  1439,     0,     0,    45,    46,     0,   418,   418,  1448,
    1483,     0,    59,    59,  1215,     0,   889,  1215,   870,   418,
    1462,     0,    45,    46,   975,     0,     0,   889,     0,   265,
       0,     0,     0,   418,   418,    54,     0,     0,   635,   639,
       0,     0,     0,     0,     0,     0,   384,   384,     0,  1509,
       0,     0,    59,     0,     0,   418,   418,     0,   428,     0,
     418,   418,     0,   428,   418,   418,    78,     0,     0,     0,
       0,     0,     0,   659,     0,     0,     0,    78,     0,   980,
     265,   565,     0,   265,    78,    78,     0,     0,     0,     0,
     565,     0,     0,   753,     0,   733,  1024,  1024,  1024,    59,
       0,   737,     0,     0,   418,   426,   418,     0,     0,    59,
     418,     0,     0,     0,     0,     0,     0,     0,     0,   581,
       0,     0,     0,     0,     0,     0,   496,  1821,   428,    59,
       0,     0,    59,     0,    59,     0,    59,     0,   496,     0,
       0,     0,   496,    59,     0,     0,     0,   565,   565,     0,
    1585,     0,     0,     0,   581,     0,     0,   703,     0,     0,
       0,     0,     0,   581,     0,     0,     0,     0,     0,     0,
     581,   428,     0,   856,     0,   860,     0,   581,     0,   587,
       0,  1950,  1954,     0,  1960,  1964,     0,     0,  1570,  1968,
    1972,  1976,  1980,     0,   685,   685,     0,     0,     0,     0,
       0,  1623,     0,     0,  1024,     0,   685,     0,     0,   659,
     659,   659,   659,    30,    31,     0,     0,     0,    34,  1030,
       0,     0,  1033,     0,     0,    40,     0,     0,   581,     0,
       0,     0,     0,     0,     0,     0,     0,   265,   265,   265,
       0,     0,    59,     0,   581,     0,     0,     0,   418,    45,
      46,     0,     0,     0,     0,     0,   265,     0,     0,    53,
     384,     0,  1226,   265,   265,   418,     0,   265,   265,    78,
       0,     0,     0,     0,   418,     0,     0,    59,   384,    78,
       0,    78,     0,     0,   428,     0,    59,     0,     0,   659,
       0,   936,   939,  1699,   936,   939,   659,     0,   753,   659,
       0,     0,     0,     0,     0,   936,   939,   936,   939,   635,
       0,     0,   635,  1232,  1242,  1719,     0,  1232,  1242,   777,
     778,   779,   780,   781,   782,   783,   784,   785,   786,   384,
     715,   715,   715,   715,   715,   715,   715,   715,     0,  1687,
       0,     0,  1691,     0,     0,     0,     0,     0,     0,  1024,
    1024,     0,     0,     0,     0,  1077,  1024,  1024,     0,     0,
    1024,  1024,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   936,   939,     0,     0,     0,    59,
       0,  1203,    59,    59,    59,     0,     0,   703,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   418,   418,    59,     0,     0,
       0,     0,     0,     0,    59,     0,   496,  1128,     0,     0,
       0,     0,   265,    59,   715,     0,     0,   496,     0,   787,
      59,     0,     0,   265,     0,   418,     0,    59,   635,   639,
    1188,  1192,     0,     0,     0,     0,     0,   685,     0,     0,
       0,   636,   640,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   635,   937,
     940,     0,  1447,     0,     0,     0,     0,     0,     0,   496,
      59,     0,     0,  1447,     0,  1680,     0,     0,    59,     0,
       0,     0,  1682,     0,     0,   937,   940,     0,     0,     0,
       0,     0,     0,     0,    59,   418,     0,     0,     0,     0,
       0,     0,    59,    59,     0,     0,     0,   937,   940,   418,
       0,     0,   937,   940,     0,    59,   937,   940,     0,     0,
       0,     0,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,     0,     0,     0,     0,   659,   265,   659,
       0,     0,     0,  1570,     0,   265,     0,     0,     0,     0,
    1795,  -966,     0,     0,  1024,     0,     0,     0,   703,     0,
      20,    21,     0,     0,     0,     0,  1803,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   408,     0,
     418,   418,     0,     0,   418,   418,   418,     0,     0,    30,
      31,     0,     0,     0,    34,   627,     0,     0,     0,     0,
       0,    40,     0,     0,    59,   418,   685,     0,   685,    59,
       0,     0,     0,     0,     0,    59,     0,     0,  1203,     0,
       0,    59,     0,     0,     0,    45,    46,    59,     0,     0,
       0,   408,     0,     0,     0,    53,     0,  -458,  -458,   703,
       0,     0,     0,     0,     0,   659,     0,  -458,   659,     0,
       0,   659,  -458,  -458,  -458,     0,  -458,  -458,  -458,  -458,
    -458,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      90,   589,  1024,  1024,     0,   685,     0,     0,     0,     0,
       0,     0,    78,     0,     0,     0,     0,     0,     0,   659,
     703,     0,     0,     0,     0,     0,  1841,     0,     0,     0,
       0,     0,     0,   659,   659,   659,   659,     0,     0,     0,
    1482,     0,   636,     0,     0,   636,     0,     0,     0,     0,
       0,   418,   418,     0,   134,     0,   265,     0,   265,     0,
       0,     0,     0,     0,     0,    59,     0,     0,     0,     0,
       0,   701,    59,     0,     0,   265,   418,    59,   581,  1508,
       0,     0,     0,     0,   167,   187,   202,     0,     0,     0,
    1922,     0,  1925,     0,   241,   265,    90,     0,     0,     0,
       0,     0,   265,    90,    90,     0,  1933,  1935,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     265,   659,     0,     0,     0,   627,     0,   265,   659,     0,
       0,   265,   659,     0,   202,   411,   413,   415,   416,     0,
       0,     0,     0,     0,   484,  1711,     0,   484,     0,     0,
       0,     0,  1711,     0,     0,     0,     0,     0,     0,     0,
     484,     0,   484,     0,   484,     0,     0,     0,     0,     0,
       0,   636,   640,  1189,  1193,     0,     0,     0,   866,   581,
    1584,     0,     0,     1,   871,  1024,  1024,     0,   546,   413,
     415,     0,   496,     0,     0,     0,     0,     0,  1668,     0,
    1033,   636,     0,   496,     0,     0,     0,  1606,     2,     0,
    1612,     0,     0,     0,     0,     0,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   576,   591,     0,
       0,  1622,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2002,  1653,     0,
       0,     0,     0,     0,   948,    30,    31,     0,     0,     0,
      34,     0,  1188,  1192,  1188,  1192,     0,    40,     0,     0,
       0,     0,     0,    59,    59,   629,     0,     0,     0,     0,
     312,     0,     1,   313,   109,   635,     0,   635,   187,   418,
       0,    45,    46,   418,     0,     0,     0,     0,   704,     0,
      90,    53,     0,     0,    54,     0,     0,     2,     0,     0,
       0,     0,     0,  2060,     0,     0,  1027,     0,     0,  1032,
       0,     0,  2067,  1698,     0,     0,     0,     0,     0,     0,
       0,     0,  1027,     0,     0,   659,     0,     0,    59,     0,
       0,     0,     0,     0,     0,  1718,   317,    84,     0,     0,
       0,   318,   319,   589,     0,     0,   418,     0,     0,     0,
       0,     0,     0,   418,   418,   322,   589,     0,    59,    59,
      59,    59,   937,   940,     0,     0,   937,   940,   323,  2076,
    2078,     0,   324,   325,   326,   327,   328,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   332,     0,
     581,     0,     0,   720,     0,   411,   413,   415,     0,     0,
       0,     0,     0,   337,   338,     0,     0,   418,   418,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   877,
       0,     0,    84,     0,     0,     0,   484,     0,     0,    59,
       0,     0,     0,    84,     0,     0,  1203,   134,     0,     0,
      84,    84,     0,   265,   659,     0,     0,     0,     0,   659,
     659,     0,     0,     0,     0,     0,     0,     0,     0,   354,
       0,     0,   659,     0,     0,   659,   484,   484,   701,     0,
       0,   951,     0,   659,   701,   962,  1668,     0,   484,  1033,
       0,     0,   497,   425,     0,     0,     0,   167,     0,     0,
       0,     0,   484,   484,   497,     0,     0,     0,   497,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    59,     0,
       0,   877,     0,     0,   484,   484,     0,     0,     0,   484,
     484,     0,     0,   484,   484,     0,     0,   202,   202,   202,
     202,   202,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   418,     0,    59,     0,     0,   418,   202,   202,   425,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   484,    59,   484,     0,     0,  1070,     0,
    1079,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1794,     0,     0,     0,     0,   415,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1802,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1607,   418,     0,  1613,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    84,   265,   659,     0,     0,
       0,     0,     0,     0,     0,    84,     0,    84,     0,     0,
       0,     0,     0,     0,     0,   418,     0,   418,     0,     0,
      59,  1654,     0,     0,   425,   701,     0,     0,   718,   721,
     723,     0,  1455,   425,     0,  1189,  1193,  1189,  1193,   425,
       0,   418,     0,   418,     0,   744,     0,     0,  1849,  1853,
       0,     0,   354,     0,     0,     0,     0,     0,   636,     0,
     636,  1606,     0,     0,  1612,  1204,     0,     0,     0,   425,
       0,   704,  1653,     0,   425,     0,   659,   659,     0,     0,
       0,     0,     0,     0,     0,  1491,     0,     0,     0,     0,
     589,     0,  1234,     0,     0,     0,  1234,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   948,     0,     0,     0,
       0,   425,     0,   425,     0,   877,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1668,  1033,     0,     0,     0,     0,     0,   418,     0,   418,
       0,     0,   890,     0,     0,   425,     0,     0,     0,     0,
       0,     0,     0,   890,     0,     0,     0,   948,     0,     0,
    1921,     0,  1924,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1932,  1934,     0,     0,
       0,     0,     0,     0,     0,   937,   940,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   408,   890,     0,   418,   418,   418,
     418,   418,    59,   589,    59,   589,     0,     0,     0,     0,
       0,   418,   418,   418,   418,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1435,     0,     0,   937,
     940,     0,     0,   877,     0,     0,     0,     0,     0,     0,
     167,   877,  1449,     0,     0,     0,   425,     0,     0,  1456,
       0,     0,   877,   461,  1464,     0,   461,     0,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,     0,   461,
       0,   461,     0,   461,     0,     0,     0,     0,     0,     0,
     418,   418,     0,   425,     0,     2,     0,     0,     0,     0,
       0,     0,     0,   134,     0,  1849,  1853,     0,     0,     0,
       0,     0,  1493,     0,     0,     0,     0,   591,     0,     0,
       0,     0,     0,   134,     0,   354,     0,     0,     0,     0,
       0,     0,     0,   951,   317,   701,     0,   701,     0,   318,
     319,   320,     0,     0,     0,     0,     0,     0,   484,     0,
       0,     0,   321,   322,     0,   425,     0,     0,   413,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,  2059,   951,     0,   332,   333,   334,     0,
       0,   335,  2066,   336,     0,     0,  2083,  2084,  1034,     0,
       0,   337,   338,     0,   339,   340,   341,   342,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    84,   484,
     484,     0,     0,   484,   484,   484,   425,     0,     0,     0,
    1568,   411,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   415,     0,     0,     0,     0,     0,     0,     0,  2075,
    2077,     0,   354,     0,     0,     0,   354,     0,     0,     0,
       0,  1850,  1854,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   425,     0,   640,     0,     0,   640,     0,   425,
       0,     0,   425,     0,     0,   640,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   354,     0,     0,     0,     0,     0,   425,   425,
     425,   425,   425,   425,   425,     0,     0,   425,   425,     0,
     425,   425,   425,   425,   425,   425,   425,   425,     0,   354,
       0,  1805,     0,  -633,     0,     0,     0,   354,   425,   425,
     425,   425,   425,   425,   425,   425,   425,   425,   425,   425,
     425,   425,   425,   425,   425,   425,     0,   354,  -633,     0,
     484,   484,     0,     0,     0,     0,     0,  -633,  -633,  -633,
    -633,     0,     0,     0,     0,     0,     0,     0,   372,     0,
       0,   877,     0,   701,   877,     0,  1694,     0,   425,   425,
    1778,     0,     0,     0,     0,   461,   461,     0,   890,     0,
       0,     0,   427,     0,  1234,  -633,  -633,   969,     0,   890,
    -633,  1234,     0,     0,     0,     0,     0,  -633,  1455,     0,
     589,   461,   461,  1791,     0,     0,  1032,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -633,  -633,   461,   461,     0,     0,     0,   461,   461,
       0,  -633,   461,   461,  -633,     0,   425,  1806,   425,   986,
    -633,     0,     0,   791,     0,     0,     0,     0,   427,   937,
     940,     0,   937,   940,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   937,   940,   937,   940,     0,   425,     0,
       0,     0,   461,     0,   461,     0,     0,   425,     0,     0,
       0,     0,   866,     0,     0,     0,     0,     0,     0,     0,
     589,     0,     0,     0,     0,     0,     0,     0,   640,   640,
       0,   589,     0,     0,     0,     0,     0,     0,     0,     0,
     425,     0,   425,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   937,   940,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   427,     0,     0,     0,   719,   722,   724,
       0,     0,   427,     0,     0,     0,     0,     0,   427,     0,
       0,     0,     0,     0,   745,  1766,     0,     0,   425,     0,
       0,   372,     0,     0,     0,     0,     0,     0,     0,     0,
    1775,     0,     0,     0,     0,     0,     0,   411,   427,     0,
       0,     0,     0,   427,   202,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   425,     0,
       0,     0,     0,     0,     0,  1788,     0,   591,     0,   425,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     427,     0,   427,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   484,   484,     0,   354,   354,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   369,     0,     0,   427,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   701,   701,     0,
    1988,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   484,   484,   312,   411,
       1,   313,   109,   314,     0,   315,   316,     0,     0,   425,
       0,   425,     0,     0,     0,     0,     0,     0,   591,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,  1156,
       0,     0,     0,   425,   124,     0,  1027,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     425,     0,     0,     0,   425,     0,     0,   354,     0,     0,
       0,   425,     0,     0,   317,   425,     0,     0,     0,   318,
     319,   320,    30,    31,     0,   427,     0,    34,     0,     0,
       0,     0,   321,   322,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
     324,   325,   326,   327,   328,   329,   330,   331,    45,    46,
       0,     0,   427,     0,     0,     0,   332,   333,   903,     0,
       0,   904,   747,   336,  1908,     0,   666,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,     0,     0,
       0,     0,     0,     0,   372,     0,     0,     0,     0,     0,
       0,     0,  1285,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   427,     0,     0,   461,     0,     0,
       0,     0,     0,     0,   764,  1317,  1321,  1325,  1329,  1333,
       0,     0,  1342,     0,     0,     0,     0,     0,  1285,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1383,  1387,  1391,  1395,  1399,     0,     0,
    1342,     0,   425,     0,     0,     0,   425,     0,     0,     0,
       0,     0,     0,     0,   484,     0,   484,     0,     0,   877,
       0,     0,     0,     0,     0,   427,     0,     0,   461,   461,
       0,     0,   461,   461,   461,     0,     0,     0,     0,     0,
     484,     0,   484,     0,     0,     0,     0,     0,   425,     0,
       0,   372,   415,     0,     0,   372,     0,     0,   425,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   425,
       0,   427,     0,     0,   425,     0,     0,     0,   427,     0,
       0,   427,     0,     0,     0,     0,     0,     0,   425,     0,
     354,     0,     0,     0,     0,   425,     0,   425,     0,     0,
       0,   372,     0,     0,     0,     0,     0,   427,   427,   427,
     427,   427,   427,   427,   425,     0,   427,   427,     0,   427,
     427,   427,   427,   427,   427,   427,   427,     0,   372,     0,
       0,     0,     0,     0,     0,     0,   372,   427,   427,   427,
     427,   427,   427,   427,   427,   427,   427,   427,   427,   427,
     427,   427,   427,   427,   427,     0,   372,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   425,     0,   461,
     461,     0,     0,     0,  1035,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   427,   427,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   484,   484,   484,   484,
     484,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     484,   484,   484,   484,     0,     0,     0,     0,     0,     0,
       0,     0,   762,     0,     0,     0,     0,  1120,     0,     0,
       0,     0,     0,   479,     0,     0,   479,     0,     0,   790,
       0,     0,     0,     0,     0,   427,     0,   427,     0,   479,
       0,   479,     0,   479,   425,     0,     0,     0,   425,   425,
     425,     0,   666,     0,     0,     0,     0,     0,     0,   354,
       0,     0,     0,     0,   425,   425,     0,   427,     0,   484,
     484,   354,     0,     0,     0,     0,   427,     0,     0,     0,
    1629,     0,     0,     0,   666,   666,   666,   666,     0,     0,
     425,   425,     0,   425,   425,     0,     0,     0,   425,   425,
     425,   425,     0,     0,     0,     0,     0,     0,  1656,   427,
       0,   427,     0,     0,   425,  1663,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     425,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1252,     0,     0,     0,  1256,  1342,
       0,  1342,     0,     0,     0,     0,     0,   425,     0,   664,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   427,     0,     0,
     764,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1294,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   427,     0,     0,
       0,  1348,     0,     0,     0,     0,   764,     0,   427,  1359,
       0,     0,     0,     0,     0,     0,   354,   354,     0,   425,
     425,   425,   425,   425,   425,   425,   425,     0,     0,  1412,
       0,     0,     0,     0,   372,   372,     0,     0,     0,     0,
       0,   461,   461,     0,     0,     0,     0,     0,     0,   480,
     425,   425,   480,     0,     0,     0,   462,     0,     0,   462,
     425,     0,     0,     0,     0,   480,     0,   480,     0,   480,
       0,     0,   462,     0,   462,     0,   462,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   461,   461,     0,   427,     0,
     427,     0,     0,     0,     0,  1155,     0,     0,     0,     0,
       0,     0,     0,   425,     0,     0,     0,   425,   425,     0,
       0,     0,   427,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   479,   479,     0,     0,   427,
       0,     0,     0,   427,     0,     0,   372,     0,     0,     0,
     427,     0,     0,     0,   427,     0,     0,     0,     0,     0,
       0,   479,   479,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   479,   479,     0,     0,     0,   479,   479,
       0,     0,   479,   479,     0,     0,     0,     0,     0,     0,
       0,  1021,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1035,     0,     0,     0,     0,     0,     0,     0,   762,     0,
     354,     0,   479,     0,   479,     0,     0,     0,     0,     0,
       0,     0,  1293,     0,     0,     0,     0,     0,   354,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1316,  1320,  1324,  1328,  1332,     0,     0,  1341,  1347,
       0,     0,     0,     0,   762,     0,     0,  1358,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1382,
    1386,  1390,  1394,  1398,     0,     0,  1341,  1411,     0,   354,
       0,     0,     0,     0,     0,   664,     0,     0,     0,     0,
       0,   427,     0,   666,     0,   427,   666,     0,     0,     0,
       0,     0,     0,     0,     0,   666,     0,     0,     0,     0,
       0,     0,     0,   461,     0,   461,     0,   664,   664,   664,
     664,     0,     0,     0,     0,     0,     0,  1648,  1649,     0,
       0,     0,     0,     0,   666,     0,  1294,   427,     0,   461,
    1661,   461,     0,  1359,     0,  1665,     0,   427,   666,   666,
     666,   666,     0,     0,     0,     0,     0,     0,   427,     0,
       0,   480,   480,   427,     0,     0,     0,     0,   462,   462,
       0,     0,     0,     0,     0,     0,     0,   427,     0,   372,
     970,     0,     0,     0,   427,     0,   427,   480,   480,     0,
       0,     0,     0,     0,   462,   462,     0,  1021,     0,     0,
       0,     0,     0,   427,  1021,     0,     0,  1021,     0,   480,
     480,     0,     0,     0,   480,   480,   462,   462,   480,   480,
       0,   462,   462,     0,     0,   462,   462,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1943,  1736,
       0,     0,     0,  1946,  1948,  1952,  1956,  1958,  1962,     0,
       0,     0,  1966,  1970,  1974,  1978,   427,     0,   480,     0,
     480,     0,     0,     0,     0,   462,     0,   462,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   461,   461,   461,   461,   461,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   461,
     461,   461,   461,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   427,     0,     0,     0,   427,   427,   427,
       0,     0,   479,   479,     0,     0,     0,     0,   372,     0,
       0,     0,     0,   427,   427,     0,  1155,     0,     0,     0,
     372,     0,     0,     0,     0,     0,     0,     0,   461,   461,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   427,
     427,     0,   427,   427,  1293,     0,     0,   427,   427,   427,
     427,  1358,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   427,     0,     0,     0,   479,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   427,
       0,     0,     0,     0,     0,  1341,     0,  1341,     0,     0,
       0,     0,     0,     0,     0,  1021,     0,  1021,     0,     0,
       0,     0,     0,     0,     0,     0,   427,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1035,     0,     0,     0,     0,     0,   479,   479,
       0,     0,   479,   479,   479,     0,     0,  1735,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1035,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   372,   372,     0,   427,   427,
     427,   427,   427,   427,   427,   427,     0,     0,     0,     0,
       0,     0,     0,  1021,     0,     0,   664,     0,     0,   664,
       0,     0,     0,     0,   666,   666,     0,     0,   664,   427,
     427,     0,     0,     0,   666,     0,   666,   666,     0,   427,
     666,     0,     0,     0,     0,     0,     0,     0,   666,     0,
       0,   666,     0,     0,     0,     0,     0,   664,   480,   480,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,   664,   664,   664,   664,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   479,
     479,     0,   427,     0,     2,     0,   427,   427,     0,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,   480,     0,     0,     0,     0,     0,     0,
     462,  1035,     0,     0,    29,     0,     0,     0,     0,     0,
       0,    30,    31,  1940,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,  1736,     0,     0,  1021,
       0,  1661,     0,     0,  1665,     0,  1021,    42,     0,     0,
    1021,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   480,   480,     0,     0,   480,   480,
     480,   462,   462,     0,     0,   462,   462,   462,     0,   372,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   372,     0,     0,
    1035,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1035,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,     0,     0,     0,     0,
       0,   666,   666,   666,   666,     0,     0,   666,   372,     0,
       0,   666,   666,     2,   666,     0,   666,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   666,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2044,  2045,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   317,     0,     0,     0,   228,   318,   319,   320,
       0,     0,     0,     0,     0,   480,   480,     0,     0,     0,
     321,   322,   462,   462,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     0,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,   228,
       0,     0,     0,  1021,   332,   333,   334,   429,     0,   335,
    1178,   336,     0,     0,  1179,     0,     0,     0,     0,   337,
     338,  1743,   339,   340,   341,   342,     0,   521,     0,     0,
       0,   479,   479,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1021,  1035,  1021,     0,  1735,     0,     0,     0,     0,  1945,
    1947,  1951,  1955,  1957,  1961,     0,     0,   666,  1965,  1969,
    1973,  1977,     0,     0,     0,     0,   666,     0,   666,     0,
       0,     0,     0,     0,     0,   479,   479,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1021,     0,     0,     0,     0,   664,   664,  1035,
       0,     0,   666,   666,     0,     0,   666,   664,   666,   664,
     664,   666,     0,   664,     0,   666,     0,     0,     0,     0,
      76,   664,  2142,     0,   664,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1035,     0,     0,     0,     0,     0,     0,     0,   666,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,     0,     0,   666,     0,     0,  1947,
    1951,  1957,  1961,  1965,  1969,  1973,  1977,     0,     0,     0,
       0,  2185,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   183,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   271,    76,     0,     0,     0,
       0,     0,     0,    76,    76,     0,     0,     0,     0,     0,
     848,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   395,     0,     0,     0,     0,     0,   480,   480,     0,
       0,     0,     0,     0,   462,   462,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   494,     0,     0,     0,   883,
     521,     0,     0,     0,   892,  1021,     0,   494,     0,     0,
       0,   494,     0,   899,     0,     0,   906,     0,     0,     0,
       0,     0,     0,   479,     0,   479,     0,     0,     0,     0,
       0,   480,   480,     0,     0,     0,     0,     0,   462,   462,
       0,   271,   271,     0,     0,     0,     0,     0,     0,   479,
     957,   479,     0,     0,     0,     0,   973,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   664,   664,   664,   664,   586,     0,
     664,     0,     0,     0,   664,   664,     0,   664,     0,   664,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   664,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   626,     0,     0,   271,   271,
     271,     0,     0,     0,     0,     0,   228,     0,   183,     0,
       0,     0,     0,     0,     0,     0,   228,     0,   183,   271,
      76,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   228,     0,   729,   228,
       0,   228,     0,   228,   729,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   752,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   479,   479,   479,   479,   479,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   479,
     479,   479,   479,     0,     0,     0,     0,     0,     0,     0,
     664,     0,     0,     0,     0,     0,     0,     0,     0,   664,
       0,   664,     0,     0,     0,     0,     0,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,   480,
       0,   480,     0,     0,     0,     0,   462,     0,   462,   586,
       0,     0,     0,     0,     2,   888,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   480,   888,   480,   479,   479,
       0,     0,   462,     0,   462,   664,   664,     0,     0,   664,
       0,   664,     0,     0,   664,     0,     0,     0,   664,     0,
       0,     0,     0,   317,     0,     0,     0,     0,   318,   319,
     320,   586,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,     0,     0,     0,     0,     0,   979,     0,
       0,   664,     0,     0,     0,   323,     0,     0,     0,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
       0,   586,     0,     0,     0,   332,   333,   334,     0,   664,
     335,  1178,   336,     0,     0,  1748,     0,     0,     0,  1749,
     337,   338,   271,   339,   340,   341,   342,     0,     0,   271,
       0,     0,   271,     0,     0,     0,     0,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   848,
     848,   848,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   185,   129,
       0,     0,   429,   429,   228,     0,     0,   240,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   480,   480,   480,   480,   480,     0,     0,   462,   462,
     462,   462,   462,     0,     0,   480,   480,   480,   480,     0,
       0,     0,   462,   462,   462,   462,     0,   129,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1160,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1487,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   271,   271,
     271,   271,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   544,   429,     0,   480,   480,     0,     0,     0,   521,
     521,   462,   462,     0,     0,     0,   271,   271,   271,     0,
       0,   183,   521,     0,     0,     0,     0,  1218,     0,     0,
       0,     0,     0,     0,     0,   271,     0,     0,     0,     0,
       0,     0,  1231,  1241,   752,     0,  1231,  1241,     0,     0,
     608,     0,     0,  1218,   610,     0,  1218,     0,     0,     0,
       0,     0,     0,     0,     0,  1262,     0,     0,   271,     0,
       0,     0,     0,     0,     0,   271,     0,     0,   271,     0,
       0,     0,     0,     0,     0,    94,     0,     0,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   185,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   228,     0,     0,     0,     0,   228,     0,     0,     0,
       0,     0,  1588,     0,     0,     0,     0,     0,  1588,     0,
       0,     0,     0,     0,   228,     0,     0,     0,   123,   135,
       0,     0,     0,     0,     0,    88,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   586,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     188,   135,     0,     0,     0,   237,     0,     0,     0,     0,
       0,    94,     0,     0,     0,     0,     0,     0,    94,    94,
       0,     0,     0,   586,     0,     0,     0,     0,     0,    88,
       0,  1446,   586,     0,     0,     0,   396,     0,     0,   586,
       0,     0,  1446,   120,   752,     0,   586,     0,   129,   405,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   671,
      88,    88,     0,     0,     0,     0,     0,     0,     0,    88,
       0,    88,     0,     0,     0,     0,     0,     0,    88,    88,
       0,     0,     0,   429,   228,     0,     0,     0,     0,     0,
     129,     0,     0,     0,     0,     0,     0,   586,     0,     0,
       0,     0,   543,     0,     0,     0,     0,     0,     0,    88,
      88,     0,     0,   586,   750,     0,  1147,   559,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   593,     0,     0,     0,     0,     0,     0,
    1186,  1190,     0,     0,     0,     0,   271,   271,   271,     0,
       0,     0,     0,    88,   626,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     129,   129,   129,   129,   129,     0,  1028,     0,     0,   610,
     135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     129,   129,   129,   188,     0,     0,     0,     0,     0,     0,
       0,     0,    88,   705,     0,    94,    88,     0,     0,     0,
       0,   129,     0,     0,     0,     0,   750,     0,     0,     0,
       0,     0,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      88,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,    88,   271,     0,     0,   271,     0,     0,
     271,     0,     0,    88,     0,    88,     0,     0,     0,     0,
     848,   848,     0,  1160,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   429,     0,   317,     0,
     429,     0,     0,   318,   319,   320,     0,     0,   271,     0,
       0,     0,     0,     0,     0,     0,   321,   322,     0,     0,
       0,     0,   271,   271,   271,   271,     0,     0,     0,     0,
     323,     0,     0,     0,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   878,   271,     0,   271,   240,     0,
     332,   333,   334,     0,     0,   335,  1178,   336,     0,     0,
    1179,  1684,   135,   429,   626,   337,   338,  1753,   339,   340,
     341,   342,     0,     0,     0,   429,  1809,   429,  1809,     0,
      88,     0,     0,     0,  1710,     0,     0,     0,     0,     0,
       0,  1710,     0,     0,     0,     0,   952,     0,     0,   960,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   271,
     271,     0,     0,     0,     0,     0,   271,   271,     0,     0,
     271,   271,    88,     0,     0,     0,     0,     0,     0,     0,
    1158,     0,     0,     0,     0,     0,   878,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1176,     0,     0,     0,
       0,     0,   135,   135,   135,   135,   135,   671,   671,   671,
     671,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   135,   135,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1071,     0,  1080,   750,     0,     0,   750,
       0,     0,     0,     0,     0,     0,  1082,     0,     0,     0,
       0,     0,    88,    88,    88,    88,    88,     0,    88,     0,
       0,    88,   750,     0,     0,   521,     0,     0,  1176,     0,
       0,     0,    88,    88,    88,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   559,     0,     0,   129,     0,     0,
       0,     0,     0,    88,     0,  1292,     0,     0,   429,     0,
     228,     0,     0,   429,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   129,     0,     0,     0,
       0,     0,     0,  1345,     0,     0,     0,  1604,     0,     0,
    1610,  1357,     0,   608,     0,   610,   129,     0,     0,  1627,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1202,
       0,  1409,     0,     0,   271,     0,   705,   586,   429,     0,
       0,     0,   312,     0,     1,   313,   109,   314,  1651,   315,
     316,     0,     0,     0,     0,     0,     0,  1236,     0,     0,
       0,  1236,  1186,  1190,  1186,  1190,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     878,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      88,     0,     0,   750,     0,     0,    88,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   317,     0,
       0,     0,     0,   318,   319,   320,     0,     0,     0,     0,
       0,     0,     0,   129,   129,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   586,     0,
     323,     0,     0,     0,   324,   325,   326,   327,   328,   329,
     330,   331,   271,   271,     0,     0,     0,     0,   271,   271,
     332,   333,   334,     0,     0,   335,  1178,   336,  1645,     0,
    1179,   271,     0,     0,   271,   337,   338,     0,   339,   340,
     341,   342,   271,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   429,     0,     0,     0,     0,     0,
       0,   878,  1436,     0,     0,     0,     0,     0,   878,   270,
       0,     0,     0,     0,     0,     0,   878,  1450,     0,     0,
       0,     0,     0,     0,  1457,     0,     0,   878,   123,   135,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   608,     0,   610,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,   429,
       0,   429,     0,   752,     0,     0,  1490,     0,     0,     0,
       0,     0,   593,     0,     0,     0,     0,     0,   135,    88,
       0,     0,     0,     0,     0,     0,     0,     0,   952,     0,
       0,     0,     0,     0,     0,   270,   270,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   671,     0,     0,   671,
    1615,  1617,     0,  1620,     0,     0,     0,     0,    88,     0,
       0,  1630,     0,     0,     0,   271,   271,     0,     0,  1639,
       0,     0,   585,     0,     0,     0,  1176,     0,    88,   952,
       0,     0,     0,     0,     0,     0,     0,   671,     0,   586,
       0,     0,     0,     0,  1176,     0,     0,     0,     0,  1176,
       0,   671,   671,   671,   671,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   625,
       0,     0,   270,   270,   270,  1569,     0,     0,     0,     0,
    1674,     0,  1678,     0,  1577,     0,     0,     0,     0,     0,
       0,     0,     0,   270,     0,   271,   271,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   728,     0,  1176,     0,     0,     0,   728,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   751,
       0,     0,     0,     0,     0,    88,    88,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   752,     0,
    1176,     0,     0,     0,     0,     0,     0,     0,  1847,  1851,
       0,     0,     0,     0,     0,     0,     0,     0,  1860,     0,
    1863,  1604,     0,     0,  1610,     0,   312,     0,     1,   313,
     109,   314,  1651,   315,   316,  1876,     0,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1176,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   585,     0,  1176,   878,     0,     0,   878,
       0,  1236,     0,     0,     0,     0,     0,     0,     0,  1701,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1236,
       0,     0,   317,     0,     0,     0,  1236,   318,   319,   320,
       0,     0,     0,     0,     0,     0,     0,    88,     0,    88,
     321,   322,     0,     0,     0,   585,  1176,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     0,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,   129,     0,   332,   333,   334,     0,     0,   335,
    1178,   336,     0,     0,  1748,   585,     0,     0,  1756,   337,
     338,     0,   339,   340,   341,   342,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   270,     0,     0,     0,
       0,     0,     0,   270,     0,     0,   270,     0,     0,     2,
     207,   208,   209,   210,   211,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,    20,    21,   254,
     255,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,     0,   257,    40,   258,
       0,     0,     0,     0,     0,  2015,  2016,  2017,  2018,     0,
       0,  2019,   259,     0,   749,  1847,  1851,     0,  1860,     0,
    1863,     0,    45,    46,   260,   261,   262,   263,   213,   214,
    1767,     0,  2028,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   264,     0,  1774,     0,     0,     0,     0,     0,
       0,  1777,     0,     0,     0,     0,     0,     0,     0,   405,
       0,     0,   270,   270,   270,   270,     0,   671,   671,     0,
       0,     0,     0,  1176,     0,  1176,     0,     0,  1176,   671,
    1457,     0,   593,     0,  1867,  1870,     0,  1872,     0,   273,
     270,   270,   270,     0,     0,     0,     0,  1176,     0,  1883,
       0,  1217,     0,     0,     0,     0,     0,     0,     0,   270,
       0,     0,     0,     0,     0,     0,  1230,  1240,   751,    88,
    1230,  1240,     0,     0,     0,     0,   749,  1217,     0,     0,
    1217,  1176,     0,     0,     0,  1176,     0,     0,     0,  1261,
       0,     0,   270,     0,     0,     0,     0,     0,     0,   270,
       0,     0,   270,     0,     0,     0,   129,     0,     0,     0,
       0,     0,     0,  1833,     0,     0,     0,     0,     0,     0,
       0,  2019,     0,     0,     0,     0,     0,     0,     0,     0,
    2097,     0,  2100,   593,     0,   273,   273,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   588,     0,    88,     0,     0,     0,     0,     0,
       0,     0,   585,     0,     0,     0,  2129,  2130,     0,     0,
    2097,     0,  2100,     0,     0,  2134,     0,     0,     0,  2136,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   585,     0,   628,
       0,     0,   273,   273,   273,     0,   585,     0,     0,     0,
       0,     0,  2136,   585,     0,     0,     0,     0,   751,  1909,
     585,     0,     0,   273,     0,     0,     0,     0,     0,     0,
       0,     0,  1176,     0,     0,     0,     0,     0,     0,     0,
    2174,     0,   731,     0,     0,     0,     0,     0,   731,     0,
     671,  1176,     0,     0,     0,   564,     0,     0,  1176,   754,
    1157,     0,  1872,     0,  2026,     0,     0,     0,     0,     0,
       0,   585,     0,  2032,     0,     0,  1175,     0,     0,     0,
    1180,     0,     0,     0,     0,     0,     0,   585,     0,     0,
       0,  1436,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1777,     0,     0,     0,   750,     0,     0,
       0,     0,     0,     0,     0,     0,   749,     0,     0,   749,
     270,   270,   270,     0,   878,     0,     0,     0,   625,     0,
       0,     0,     0,  1245,     0,     0,     0,     0,     0,     0,
       0,     0,   749,   588,     0,     0,     0,     0,  1175,  1180,
     714,     0,     0,     0,     0,     0,     0,     0,     0,   564,
       0,     0,     0,     0,     0,   564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1291,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   588,     0,     0,     0,     0,
       0,  2089,  2092,     0,  1176,     0,  1176,     0,    88,   671,
    1176,   671,     0,  1343,     0,     0,     0,     0,     0,     0,
       0,  1356,     0,  1701,     0,     0,     0,     0,   270,     0,
       0,   270,     0,     0,   270,   588,     0,   564,     0,   564,
       0,  1407,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   273,     0,     0,     0,
       0,     0,     0,   273,     0,     0,   273,  1176,     0,     0,
    1176,     0,   270,     0,     0,     0,     0,     0,   671,     0,
       0,     0,     0,     0,     0,     0,   270,   270,   270,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   749,     0,     0,     0,     0,     0,   270,
       0,   270,     0,     0,  1176,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1683,     0,     0,   625,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1709,     0,
       0,     0,     0,     0,     0,  1709,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   270,   270,     0,     0,     0,     0,     0,
     270,   270,  1022,     0,   270,   270,     0,     0,     0,     0,
       0,     0,   273,   273,   273,   273,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   564,
     273,   273,   273,     0,     0,     0,     0,     0,     0,     0,
       0,  1220,     0,     0,     0,     0,     0,     0,     0,   273,
       0,     0,     0,     0,     0,     0,  1233,  1243,   754,     0,
    1233,  1243,     0,     0,     0,     1,     0,  1220,     0,     0,
    1220,     0,     0,     0,     0,     0,     0,     0,     0,  1264,
       0,     0,   273,     0,     0,     0,     0,     0,     0,   273,
       2,   564,   273,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
    1614,  1616,    34,  1619,     0,    37,    38,     0,    39,    40,
      41,  1157,     0,   312,  1180,     1,   313,   109,   314,  1638,
     315,   316,  1210,    42,     0,     0,  1175,  1180,     0,     0,
       0,     0,   588,    45,    46,    47,    48,    49,    50,     0,
       2,     0,     0,    53,  1175,  1180,   876,     0,     0,  1175,
       0,     0,     0,     0,     0,     0,     0,   579,   270,     0,
       0,   585,     0,     0,     0,     0,     0,   588,  1022,     0,
       0,     0,     0,     0,     0,  1022,   588,     0,  1022,   317,
    1672,     0,  1676,   588,   318,   319,   320,     0,   754,     0,
     588,     0,     0,     0,     0,     0,     0,   321,   322,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   323,     0,     0,  1175,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,     0,     0,     0,     0,     0,
       0,   332,   333,   334,     0,     0,   335,     0,   336,     0,
       0,   588,     0,   758,     0,     0,   337,   338,   759,   339,
     340,   341,   342,     0,     0,     0,     0,   588,     0,     0,
    1175,  1180,   585,     0,     0,     0,  1879,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   270,   270,     0,     0,
       0,     0,   270,   270,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,   270,     0,     0,   270,     0,
     273,   273,   273,     0,     0,     0,   270,     0,   628,     0,
       0,     0,  1175,     0,  1180,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1175,  1180,     0,     0,     0,
       0,     0,   317,     0,     0,     0,     0,   318,   319,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,  1022,     0,   564,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     0,   324,   325,
     326,   327,   328,   329,   330,   331,  1175,     0,  1180,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    1178,   336,  1880,   564,  1179,     0,     0,   751,     0,   337,
     338,     0,   339,   340,   341,   342,     0,     0,   273,     0,
       0,   273,     0,   312,   273,     1,   313,   109,   314,     0,
     315,   316,     0,     0,     0,     0,  1022,     0,  1022,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   273,     0,     0,     0,     0,     0,     0,   270,
     270,     0,     0,     0,     0,     0,   273,   273,   273,   273,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
       0,     0,     0,   585,   318,   319,   320,     0,     0,   273,
       0,   273,     0,     0,   564,     0,     0,   321,   322,     0,
       0,     0,     0,     0,     0,  1686,     0,     0,   628,     0,
       0,   323,     0,     0,     0,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,     0,     0,     0,  1712,     0,
       0,   332,   333,   334,  1022,  1712,   335,  1284,   336,   270,
     270,     0,     0,   758,     0,   564,   337,   338,     0,   339,
     340,   341,   342,   273,   273,     0,     0,     0,     0,     0,
     273,   273,     0,  1843,   273,   273,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1175,  1180,  1175,  1180,     0,  1175,  1862,
       0,     0,     0,   125,  1614,  1869,     0,  1638,     0,  1180,
     142,     0,   751,     0,     0,     0,     0,  1175,  1180,  1638,
       0,     0,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,     0,   165,   176,   201,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   564,     0,     2,
       0,  1175,     0,  1180,     0,  1175,     0,  1180,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   125,     0,     0,     0,   317,     0,
    1022,     0,     0,   318,   319,   320,     0,  1022,     0,     0,
     504,  1022,     0,     0,     0,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,   535,     0,     0,     0,
     323,     0,     0,     0,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,   125,     0,     0,
     332,   333,   334,     0,     0,   335,  1178,   336,     0,     0,
    1748,     0,     0,   128,  1897,   337,   338,     0,   339,   340,
     341,   342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   165,   582,   273,     0,
       0,   588,     0,     0,   128,   128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1175,     0,   176,     0,     0,     0,     0,     0,
       0,     0,     0,   128,   128,     0,     0,   176,     0,     0,
       0,  1175,     0,     0,     0,     0,  1180,   582,  1175,  1862,
       0,  1180,  1638,     0,  2025,     0,  2027,     0,     0,     0,
       0,     0,  1180,  2031,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   588,     0,     0,     0,     0,   128,     0,     0,
       0,     0,     0,     0,     0,     0,   273,   273,     0,     0,
       0,     0,   273,   273,  1022,     0,     0,   749,     0,     0,
       0,     0,     0,     0,   564,   273,     0,     0,   273,     0,
       0,     0,     0,     0,     0,     0,   273,   590,     0,     0,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1022,     0,  1022,   125,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1022,     0,     0,     0,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   128,     0,     0,
       0,     0,     0,     0,     0,     0,   582,   702,     0,     0,
       0,  2088,  2091,     0,  1175,  1180,  1175,     0,     0,     0,
    1175,  1862,     0,     0,     0,     0,     0,   754,     0,     0,
       0,     0,     0,  1022,     0,     0,     0,     0,     0,     0,
     582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1175,  1180,     0,
    1175,  1862,     0,     0,     0,  2135,     0,     0,     0,   273,
     273,     0,     0,     0,     0,     0,   125,   125,   125,   125,
     125,     0,   125,     0,     0,   125,     0,     0,     0,     0,
       0,     0,     0,   588,   128,     0,   125,   125,   125,     0,
     590,     0,     0,     0,  1175,     0,     0,     0,     0,     0,
       0,     0,   268,     0,   564,   535,   564,   582,     0,   125,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     564,   564,   125,     0,     0,     0,   128,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   273,
     273,     0,     0,     0,     0,     0,  1949,  1953,     0,  1959,
    1963,     0,   492,     0,  1967,  1971,  1975,  1979,     0,     0,
     590,     0,     0,     0,   492,     0,     0,     0,   492,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1022,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,   268,
       0,     0,   754,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   128,   128,   128,   128,
     128,     0,   128,     0,     0,   702,  1198,     0,     0,     0,
       0,     0,     0,     0,   125,   584,   128,   128,   128,   312,
     582,     1,   313,   109,   314,     0,   315,   316,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   128,     0,   590,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,   590,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   624,     0,     0,   268,   268,   268,     0,     0,
       0,     0,     0,     0,     0,  1949,  1953,  1959,  1963,  1967,
    1971,  1975,  1979,     0,     0,   317,   268,     0,     0,     0,
     318,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   727,     0,   564,     0,     0,
       0,   727,     0,     0,     0,     0,   564,   323,     0,     0,
       0,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,     0,     0,     0,     0,     0,     0,   332,   333,   334,
       0,     0,   335,  1178,   336,     0,     0,  1748,     0,     0,
       0,  1901,   337,   338,     0,   339,   340,   341,   342,     0,
       0,     0,     0,     0,   702,     0,     0,     0,     0,  1022,
     702,     0,     0,   564,   564,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   165,
       0,   582,     0,     0,     0,     0,     0,   312,   582,     1,
     313,   109,   314,   582,   315,   316,   584,     0,     0,     0,
       0,     0,   887,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   887,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,   582,     0,   584,     0,
       0,     0,   125,   317,     0,     0,     0,     0,   318,   319,
     320,     0,   582,     0,     0,   978,     0,     0,     0,     0,
       0,   321,   322,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,     0,   584,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,     0,   268,
     335,  1351,   336,   582,     0,     0,   268,   758,     0,   268,
     337,   338,     0,   339,   340,   341,   342,     0,     0,     0,
       0,   590,  -878,     0,     0,  -878,  -878,  -878,   590,  -878,
    -878,     0,     0,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   269,   125,
     125,     0,     0,     0,     0,     0,     0,     0,     0,   125,
       0,   125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   128,     0,     0,     0,     0,     0,     0,     0,
       0,   590,     0,     0,     0,     0,   590,     0,  -878,     0,
       0,     0,   128,  -878,  -878,  -878,     0,     0,   269,     0,
       0,     0,   590,     0,     0,     0,  -878,     0,     0,     0,
     269,     0,     0,     0,   269,     0,     0,     0,     0,     0,
    -878,     0,     0,     0,  -878,  -878,  -878,  -878,  -878,  -878,
    -878,  -878,     0,     0,     0,   268,   268,   268,   268,     0,
    -878,  -878,     0,     0,   269,   269,     0,  -878,  -878,     0,
    -878,  -878,  -878,   590,     0,  -878,  -878,     0,  -878,  -878,
    -878,  -878,     0,   268,   268,   268,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   268,   125,     0,     0,     0,     0,     0,  1229,
    1239,     0,     0,  1229,  1239,     0,     0,     0,     0,   128,
     128,     0,     0,     0,     0,     0,     0,     0,     0,   590,
       0,   590,     0,     0,     0,   268,     0,     0,     0,     0,
       0,     0,   268,   274,     0,   268,     0,     0,   269,     0,
       0,   269,   269,   269,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   269,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   269,     0,   274,     0,     0,     0,   269,     0,     0,
       0,     0,     0,     0,     0,   274,     0,     0,     0,   274,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   584,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   274,
     274,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   702,     0,   702,     0,     0,     0,     0,     0,     0,
     584,     0,     0,     0,     0,     0,     0,     0,  1445,   584,
       0,     0,     0,     0,     0,     0,   584,     0,     0,  1445,
       0,     0,     0,   584,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   269,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   269,
       0,     0,     0,   274,     0,     0,   274,   274,   274,     0,
       0,     0,     0,   312,   584,     1,   313,   109,   314,     0,
     315,   316,     0,     0,     0,     0,     0,   274,     0,   125,
     584,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       2,     0,     0,   125,     0,     0,   274,     0,     0,     0,
       0,   269,   274,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,     0,   582,     0,     0,   125,
       0,     0,   125,   268,   268,   268,     0,     0,     0,   317,
       0,   624,     0,     0,   318,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,   269,     0,   321,   322,     0,
       0,     0,   269,     0,     0,   269,     0,     0,     0,     0,
       0,   323,     0,     0,     0,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,     0,     0,     0,     0,     0,
       0,   332,   333,   334,     0,     0,   335,  1178,   336,  1880,
       0,  1179,     0,     0,     0,     0,   337,   338,   125,   339,
     340,   341,   342,     0,     0,     0,   125,     0,     0,     0,
       0,     0,     0,   274,     0,     0,     0,   582,     0,     0,
       0,     0,     0,     0,   274,     0,     0,     0,     0,   590,
       0,   268,     0,     0,   268,     0,   590,   268,     0,     0,
       0,     0,     0,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   590,     0,   590,     0,     0,   590,
       0,     0,   590,     0,     0,   268,   274,     0,     0,     0,
       0,   269,   269,   269,   269,     0,     0,     0,     0,   268,
     268,   268,   268,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   269,
     269,   269,   268,     0,   268,     0,     0,     0,     0,     0,
     274,     0,     0,     0,     0,     0,     0,   274,   269,     0,
     274,   624,     0,     0,     0,   269,   269,     0,     0,   269,
     269,     0,     0,     0,     0,     0,     0,     0,   128,     0,
       0,  1708,     0,     0,     0,     0,   590,     0,  1708,     0,
       0,   269,     0,     0,     0,     0,     0,   590,   269,     0,
       0,   269,     0,     0,     0,     0,   268,   268,     0,     0,
       0,     0,     0,   268,   268,     0,     0,   268,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   125,     0,   125,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   274,   274,   274,   274,
       0,     0,   125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   274,   274,   274,     0,     0,     0,
       0,     0,     0,     0,   269,     0,     0,     0,     0,     0,
       0,     0,     0,   274,     0,   269,     0,     0,     0,     0,
     274,   274,     0,     0,   274,   274,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   274,     0,     0,     0,
       0,     0,     0,   274,     0,     0,   274,     0,     0,     0,
       0,     0,     0,   590,   590,     0,   590,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2029,     0,
       1,   313,   109,   314,     0,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   268,     0,     0,   584,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   128,     0,     0,     0,     0,     0,     0,   269,
     269,   269,     0,     0,     0,     0,     0,   269,     0,     0,
       0,     0,     0,     0,   317,     0,     0,     0,     0,   318,
     319,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,   274,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     274,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1178,   336,  1880,   584,  1179,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,     0,   268,
     268,     0,     0,     0,     0,   268,   268,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   269,   268,     0,
     269,   268,     0,   269,     0,     0,     0,     0,     0,   268,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   269,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   269,   269,   269,   269,     0,
       0,     0,     0,     0,   274,   274,   274,     0,     0,     0,
       0,     0,   274,     0,     0,     0,     0,     0,   269,     0,
     269,     0,     0,     0,     0,   312,     0,     1,   313,   109,
     314,     0,   315,   316,     0,     0,     0,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,   269,     0,     0,
       0,     0,     0,     0,   269,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   269,   269,     0,     0,     0,     0,     0,   269,
     269,   317,     0,   269,   269,     0,   318,   319,   320,     0,
       0,     0,   268,   268,     0,     0,     0,     0,     0,   321,
     322,     0,   274,     0,     0,   274,     0,     0,   274,     0,
       0,     0,     0,   323,     0,     0,   584,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,     0,     0,     0,
       0,     0,     0,   332,   333,   334,     0,     0,   335,  2095,
     336,  2096,     0,  1174,     0,     0,   274,     0,   337,   338,
       0,   339,   340,   341,   342,     0,     0,     0,     0,     0,
     274,   274,   274,   274,     0,     0,     0,     0,     0,     0,
       0,     0,   268,   268,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   274,     0,   274,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   274,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   274,     0,     0,     0,     0,     0,     0,   274,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   274,     0,
       0,     0,     0,     0,   274,   274,     0,     0,   274,   274,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   770,
       0,     0,     0,     0,     0,   771,   772,   773,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -345,     0,     0,     0,
       0,     0,     0,  -345,  -345,   269,   269,     0,  -345,     0,
       0,   269,   269,     0,  -345,  -345,  -345,     0,     0,     0,
       0,     0,     0,     0,   269,     0,     0,   269,     0,  -345,
       0,     0,     0,     0,     0,   269,     0,     0,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,  -345,
    -345,  -345,   774,     0,     0,  -345,  1550,  -345,  -345,     0,
     775,     0,   274,   776,     0,  -345,  -345,  -345,     0,  -345,
    -345,  -345,  -345,  -345,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -458,     0,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -458,     0,     0,
     274,   274,  -458,  -458,  -458,     0,   274,   274,   269,   269,
       0,     0,     0,     0,     0,  -458,  -458,     0,     0,   274,
       0,     0,   274,     0,     0,     0,     0,     0,     0,  -458,
     274,     0,     0,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,     0,     0,     0,     0,     0,     0,     0,     0,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
       0,     0,  -458,     0,  -458,  -458,     0,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   269,   269,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -345,   770,     0,  -345,
    -345,  -345,  -345,   771,   772,   773,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,     0,  -345,  -345,  -345,     0,     0,  -345,  -345,
    -345,  -345,  -345,   274,   274,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,  -345,     0,  -345,  -345,  -345,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
     774,  -345,  -345,  -345,  -345,  -345,  -345,  -345,   775,  -345,
    -345,   776,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   274,   274,  -450,  1171,     0,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
       0,     0,  -450,  -450,  -450,     0,     0,  -450,  -450,  -450,
    -450,  -450,     0,     0,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,     0,  -450,     0,  -450,  -450,  -450,     0,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -304,   312,     0,     1,   313,   109,   314,  -304,   315,
     316,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,     2,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,     0,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,     0,     0,   317,  -304,
    -304,     0,     0,   318,   319,   320,  -304,  -304,     0,     0,
    -304,  -304,  -304,  -304,  -304,  -304,   321,   322,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,  -304,     0,
     323,  -304,  -304,     0,   324,   325,   326,   327,   328,   329,
     330,   331,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
     332,   333,   334,  -304,  -304,   335,  1259,   336,  -304,  -304,
    1174,  -304,  -304,  -304,  -304,   337,   338,  -304,   339,   340,
     341,   342,  -304,  -304,  -304,  -304,  -304,  -305,   312,     0,
       1,   313,   109,   314,  -305,   315,   316,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,     2,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
       0,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,     0,     0,   317,  -305,  -305,     0,     0,   318,
     319,   320,  -305,  -305,     0,     0,  -305,  -305,  -305,  -305,
    -305,  -305,   321,   322,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,     0,  -305,     0,   323,  -305,  -305,     0,
     324,   325,   326,   327,   328,   329,   330,   331,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,   332,   333,   334,  -305,
    -305,   335,  1178,   336,  -305,  -305,  1179,  -305,  -305,  -305,
    -305,   337,   338,  -305,   339,   340,   341,   342,  -305,  -305,
    -305,  -305,  -305,  -565,   312,     0,     1,   313,   109,   314,
    -565,   315,   316,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,     2,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,     0,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,     0,     0,
     317,  -565,  -565,     0,     0,   318,   319,   320,  -565,  -565,
       0,     0,  -565,  -565,  -565,  -565,  -565,  -565,   321,   322,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,     0,
    -565,     0,   323,  -565,  -565,     0,   324,   325,   326,   327,
     328,   329,   330,   331,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,   332,   333,   334,  -565,  -565,   335,  -565,   336,
    -565,  -565,  -565,  -565,   758,  -565,  1340,   337,   338,  -565,
     339,   340,   341,   342,  -565,  -565,  -565,  -565,  -565,  -566,
     312,     0,     1,   313,   109,   314,  -566,   315,   316,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,     2,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,     0,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,     0,     0,   317,  -566,  -566,     0,
       0,   318,   319,   320,  -566,  -566,     0,     0,  -566,  -566,
    -566,  -566,  -566,  -566,   321,   322,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,     0,  -566,     0,   323,  -566,
    -566,     0,   324,   325,   326,   327,   328,   329,   330,   331,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,   332,   333,
     334,  -566,  -566,   335,  -566,   336,  -566,  -566,  -566,  -566,
     758,  -566,  1406,   337,   338,  -566,   339,   340,   341,   342,
    -566,  -566,  -566,  -566,  -566,  -576,   312,     0,     1,   313,
     109,   314,  -576,   315,   316,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,     2,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,     0,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
       0,     0,   317,  -576,  -576,     0,     0,   318,   319,   320,
    -576,  -576,     0,     0,  -576,  -576,  -576,  -576,  -576,  -576,
     321,   322,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,     0,  -576,     0,   323,  -576,  -576,     0,   324,   325,
     326,   327,   328,   329,   330,   331,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,   332,   333,   334,  -576,  -576,   335,
    -576,   336,  -576,  -576,  1174,  -576,  -576,  -576,  -576,   337,
     338,  -576,   339,   340,   341,   342,  -576,  -576,  -576,  -576,
    -576,  -578,   312,     0,     1,   313,   109,   314,  -578,   315,
     316,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     2,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,     0,   317,  -578,
    -578,     0,     0,   318,   319,   320,  -578,  -578,     0,     0,
    -578,  -578,  -578,  -578,  -578,  -578,   321,   322,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,     0,
     323,  -578,  -578,     0,   324,   325,   326,   327,   328,   329,
     330,   331,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
     332,   333,   334,  -578,  -578,   335,  1178,   336,  -578,  -578,
    1179,  -578,  -578,  -578,  -578,   337,   338,  -578,   339,   340,
     341,   342,  -578,  -578,  -578,  -578,  -578,  -577,   312,     0,
       1,   313,   109,   314,  -577,   315,   316,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,     2,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,     0,   317,  -577,  -577,     0,     0,   318,
     319,   320,  -577,  -577,     0,     0,  -577,  -577,  -577,  -577,
    -577,  -577,   321,   322,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,     0,  -577,     0,   323,  -577,  -577,     0,
     324,   325,   326,   327,   328,   329,   330,   331,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,   332,   333,   334,  -577,
    -577,   335,  -577,   336,  -577,  -577,  1174,  -577,  -577,  -577,
    -577,   337,   338,  -577,   339,   340,   341,   342,  -577,  -577,
    -577,  -577,  -577,  -338,  1905,     0,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,     0,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,     0,
    -338,  -338,  -338,     0,     0,  -338,  -338,  -338,  -338,  -338,
       0,     0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,
    -338,     0,  -338,  -338,  -338,     0,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -342,
    1941,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,     0,     0,  -342,  -342,  -342,     0,
       0,  -342,  -342,  -342,  -342,  -342,     0,     0,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,     0,  -342,     0,  -342,  -342,
    -342,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -332,   312,     0,     1,   313,
     109,   314,  -332,   315,   316,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,     2,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,     0,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
       0,     0,   317,  -332,  -332,     0,     0,   318,   319,   320,
    -332,  -332,     0,     0,  -332,  -332,  -332,  -332,  -332,  -332,
     321,   322,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,     0,  -332,     0,   323,  -332,  -332,     0,   324,   325,
     326,   327,   328,   329,   330,   331,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,   332,   333,   334,  -332,  -332,   335,
    -332,   336,  -332,  -332,  -332,  -332,   758,  -332,  -332,   337,
     338,  -332,   339,   340,   341,   342,  -332,  -332,  -332,  -332,
    -332,  -543,   312,     0,     1,   313,   109,   314,  -543,   315,
     316,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,     2,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,     0,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,     0,     0,   317,  -543,
    -543,     0,     0,   318,   319,   320,  -543,  -543,     0,     0,
    -543,  -543,  -543,  -543,  -543,  -543,   321,   322,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,     0,  -543,     0,
     323,  -543,  -543,     0,   324,   325,   326,   327,   328,   329,
     330,   331,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
     332,   333,   334,  -543,  -543,   335,  -543,   336,  -543,  -543,
    -543,  -543,   758,  -543,  -543,   337,   338,  -543,   339,   340,
     341,   342,  -543,  -543,  -543,  -543,  -543,  -551,   312,     0,
       1,   313,   109,   314,  -551,   315,   316,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,     2,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
       0,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,     0,     0,   317,  -551,  -551,     0,     0,   318,
     319,   320,  -551,  -551,     0,     0,  -551,  -551,  -551,  -551,
    -551,  -551,   321,   322,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,     0,  -551,     0,   323,  -551,  -551,     0,
     324,   325,   326,   327,   328,   329,   330,   331,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,   332,   333,   334,  -551,
    -551,   335,  -551,   336,  -551,  -551,  -551,  -551,   758,  -551,
    -551,   337,   338,  -551,   339,   340,   341,   342,  -551,  -551,
    -551,  -551,  -551,  -544,   312,     0,     1,   313,   109,   314,
    -544,   315,   316,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,     2,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,     0,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,     0,     0,
     317,  -544,  -544,     0,     0,   318,   319,   320,  -544,  -544,
       0,     0,  -544,  -544,  -544,  -544,  -544,  -544,   321,   322,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,     0,
    -544,     0,   323,  -544,  -544,     0,   324,   325,   326,   327,
     328,   329,   330,   331,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,   332,   333,   334,  -544,  -544,   335,  -544,   336,
    -544,  -544,  -544,  -544,   758,  -544,  -544,   337,   338,  -544,
     339,   340,   341,   342,  -544,  -544,  -544,  -544,  -544,  -552,
     312,     0,     1,   313,   109,   314,  -552,   315,   316,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,     2,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,     0,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,     0,     0,   317,  -552,  -552,     0,
       0,   318,   319,   320,  -552,  -552,     0,     0,  -552,  -552,
    -552,  -552,  -552,  -552,   321,   322,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,     0,  -552,     0,   323,  -552,
    -552,     0,   324,   325,   326,   327,   328,   329,   330,   331,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,   332,   333,
     334,  -552,  -552,   335,  -552,   336,  -552,  -552,  -552,  -552,
     758,  -552,  -552,   337,   338,  -552,   339,   340,   341,   342,
    -552,  -552,  -552,  -552,  -552,  -545,   312,     0,     1,   313,
     109,   314,  -545,   315,   316,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,     2,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
       0,     0,   317,  -545,  -545,     0,     0,   318,   319,   320,
    -545,  -545,     0,     0,  -545,  -545,  -545,  -545,  -545,  -545,
     321,   322,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,     0,  -545,     0,   323,  -545,  -545,     0,   324,   325,
     326,   327,   328,   329,   330,   331,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,   332,   333,   334,  -545,  -545,   335,
    -545,   336,  -545,  -545,  -545,  -545,   758,  -545,  -545,   337,
     338,  -545,   339,   340,   341,   342,  -545,  -545,  -545,  -545,
    -545,  -553,   312,     0,     1,   313,   109,   314,  -553,   315,
     316,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,     2,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,     0,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,     0,     0,   317,  -553,
    -553,     0,     0,   318,   319,   320,  -553,  -553,     0,     0,
    -553,  -553,  -553,  -553,  -553,  -553,   321,   322,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,     0,  -553,     0,
     323,  -553,  -553,     0,   324,   325,   326,   327,   328,   329,
     330,   331,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
     332,   333,   334,  -553,  -553,   335,  -553,   336,  -553,  -553,
    -553,  -553,   758,  -553,  -553,   337,   338,  -553,   339,   340,
     341,   342,  -553,  -553,  -553,  -553,  -553,  -546,   312,     0,
       1,   313,   109,   314,  -546,   315,   316,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,     2,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
       0,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,     0,     0,   317,  -546,  -546,     0,     0,   318,
     319,   320,  -546,  -546,     0,     0,  -546,  -546,  -546,  -546,
    -546,  -546,   321,   322,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,     0,  -546,     0,   323,  -546,  -546,     0,
     324,   325,   326,   327,   328,   329,   330,   331,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,   332,   333,   334,  -546,
    -546,   335,  -546,   336,  -546,  -546,  -546,  -546,   758,  -546,
    -546,   337,   338,  -546,   339,   340,   341,   342,  -546,  -546,
    -546,  -546,  -546,  -554,   312,     0,     1,   313,   109,   314,
    -554,   315,   316,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,     2,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,     0,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,     0,
     317,  -554,  -554,     0,     0,   318,   319,   320,  -554,  -554,
       0,     0,  -554,  -554,  -554,  -554,  -554,  -554,   321,   322,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,
    -554,     0,   323,  -554,  -554,     0,   324,   325,   326,   327,
     328,   329,   330,   331,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,   332,   333,   334,  -554,  -554,   335,  -554,   336,
    -554,  -554,  -554,  -554,   758,  -554,  -554,   337,   338,  -554,
     339,   340,   341,   342,  -554,  -554,  -554,  -554,  -554,  -340,
    2046,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,     0,     0,  -340,  -340,  -340,     0,
       0,  -340,  -340,  -340,  -340,  -340,     0,     0,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,     0,  -340,     0,  -340,  -340,
    -340,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -339,  2047,     0,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
       0,     0,  -339,  -339,  -339,     0,     0,  -339,  -339,  -339,
    -339,  -339,     0,     0,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,     0,  -339,     0,  -339,  -339,  -339,     0,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -345,   770,     0,  -345,  -345,  -345,  -345,   771,   772,
     773,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,     0,  -345,  -345,
    -345,     0,     0,  -345,  -345,  -345,  -345,  -345,     0,     0,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,     0,
    -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,   774,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  1169,  -345,  -345,   776,     0,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -458,     0,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -458,     0,     0,     0,     0,  -458,  -458,
    -458,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -458,  -458,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -458,     0,     0,     0,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,     0,     0,     0,
       0,     0,     0,     0,     0,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,     0,  -458,  -458,     0,     0,  -458,     0,
    -458,  -458,     0,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -450,  1171,     0,  -450,  -450,  -450,  -450,     0,
    -450,  -450,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,     0,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,     0,  -450,
    -450,  -450,     0,     0,  -450,  -450,  -450,  -450,  -450,     0,
       0,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,  -450,
       0,  -450,  -450,  -450,     0,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,     0,     0,  -450,  -450,  -450,  -450,
       0,  -450,  -450,  -450,  1172,  -450,  -450,  -450,     0,  -450,
    -450,  -450,  -450, -1102,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102, -1102,     0, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,     0,     0,
     317, -1102, -1102,     0,     0,   318,   319,   320, -1102, -1102,
       0,     0, -1102, -1102, -1102, -1102, -1102, -1102,   321,   322,
   -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,     0,
   -1102,     0,   323, -1102, -1102,     0,   324,   325,   326,   327,
     328,   329,   330,   331, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102,   332,   333,   334,     0,     0,   335,  1178,   336,
   -1102,     0,  1179, -1102, -1102,     0, -1102,   337,   338,     0,
     339,   340,   341,   342, -1246,   312,     0,     1,   313,   109,
     314,     0,   315,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1246, -1246, -1246, -1246, -1246, -1246, -1246,
   -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246,
   -1246, -1246, -1246, -1246, -1246, -1246, -1246,     0, -1246, -1246,
   -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246,     0,
       0,   317, -1246, -1246,     0,     0,   318,   319,   320, -1246,
   -1246,     0,     0, -1246, -1246, -1246, -1246, -1246, -1246,   321,
     322, -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246,
       0, -1246,     0,   323, -1246, -1246,     0,   324,   325,   326,
     327,   328,   329,   330,   331, -1246, -1246, -1246, -1246, -1246,
   -1246, -1246, -1246,   332,   333,   334,     0,     0,   335,  1178,
     336,  1645,     0,  1179, -1246, -1246,     0, -1246,   337,   338,
       0,   339,   340,   341,   342, -1204,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1204, -1204, -1204, -1204, -1204, -1204,
   -1204, -1204, -1204, -1204, -1204, -1204, -1204, -1204, -1204, -1204,
   -1204, -1204, -1204, -1204, -1204, -1204, -1204, -1204,     0, -1204,
   -1204, -1204, -1204, -1204, -1204, -1204, -1204, -1204, -1204, -1204,
       0,     0,   317, -1204, -1204,     0,     0,   318,   319,   320,
   -1204, -1204,     0,     0, -1204, -1204, -1204, -1204, -1204, -1204,
     321,   322, -1204, -1204, -1204, -1204, -1204, -1204, -1204, -1204,
   -1204,     0, -1204,     0,   323, -1204, -1204,     0,   324,   325,
     326,   327,   328,   329,   330,   331, -1204, -1204, -1204, -1204,
   -1204, -1204, -1204, -1204,   332,   333,   334,     0,     0,   335,
    1856,   336, -1204,     0,  1179, -1204, -1204,     0, -1204,   337,
     338,     0,   339,   340,   341,   342, -1235,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,     0,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,     0,     0,   317, -1235, -1235,     0,     0,   318,   319,
     320, -1235, -1235,     0,     0, -1235,    34, -1235, -1235, -1235,
   -1235,   321,   322,  1143, -1235,   654,   655,   656, -1235, -1235,
   -1235, -1235,     0, -1235,     0,   323, -1235, -1235,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46, -1235,
   -1235, -1235, -1235, -1235, -1235,   332,   333,   334,     0,     0,
     335,  1178,   336,   657,     0,  1179, -1235,   264,     0,   658,
     337,   338,     0,   339,   340,   341,   342,  -577,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,     0,   317,  -577,  -577,     0,     0,   318,
     319,   320,  -577,  -577,     0,     0,  -577,  -577,  -577,  -577,
    -577,  -577,   321,   322,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,     0,  -577,     0,   323,  -577,  -577,     0,
     324,   325,   326,   327,   328,   329,   330,   331,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,   332,   333,   334,     0,
       0,   335,  -577,   336,  1173,     0,  1174,  -577,  -577,     0,
    -577,   337,   338,     0,   339,   340,   341,   342, -1227,   312,
       0,     1,   313,   109,   314,     0,   315,   316,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1227, -1227, -1227,
   -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227,
   -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227,
   -1227,     0, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227,
   -1227, -1227, -1227,     0,     0,   317, -1227, -1227,     0,     0,
     318,   319,   320, -1227, -1227,     0,     0, -1227, -1227, -1227,
   -1227, -1227, -1227,   321,   322, -1227, -1227, -1227, -1227, -1227,
   -1227, -1227, -1227, -1227,     0, -1227,     0,   323, -1227, -1227,
       0,   324,   325,   326,   327,   328,   329,   330,   331, -1227,
   -1227, -1227, -1227, -1227, -1227, -1227, -1227,   332,   333,   334,
       0,     0,   335,  2093,   336, -1227,     0,  1174, -1227, -1227,
       0, -1227,   337,   338,     0,   339,   340,   341,   342, -1228,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228,     0, -1228, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228,     0,     0,   317, -1228, -1228,     0,
       0,   318,   319,   320, -1228, -1228,     0,     0, -1228, -1228,
   -1228, -1228, -1228, -1228,   321,   322, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228,     0, -1228,     0,   323, -1228,
   -1228,     0,   324,   325,   326,   327,   328,   329,   330,   331,
   -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228,   332,   333,
     334,     0,     0,   335,  1178,   336,  2094,     0,  1179, -1228,
   -1228,     0, -1228,   337,   338,     0,   339,   340,   341,   342,
   -1222,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1222,
   -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222,     0,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,     0,     0,   317, -1222, -1222,
       0,     0,   318,   319,   320, -1222, -1222,     0,     0, -1222,
      34, -1222, -1222, -1222, -1222,   321,   322,  1143, -1222,   654,
     655,   656, -1222, -1222, -1222, -1222,     0, -1222,     0,   323,
   -1222, -1222,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46, -1222, -1222, -1222, -1222, -1222, -1222,   332,
     333,   334,     0,     0,   335,  1178,   336,   657,     0,  1179,
   -1222,   264,     0,   658,   337,   338,     0,   339,   340,   341,
     342, -1170,   632,     0, -1170, -1170, -1170, -1170,     0, -1170,
   -1170,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1170,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170,     0, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170, -1170,     0,     0, -1170, -1170,
   -1170,     0,     0, -1170, -1170, -1170, -1170, -1170,     0,     0,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170,     0, -1170,     0,
   -1170, -1170, -1170,     0, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170,     0,     0, -1170,     0, -1170,   633,     0,
   -1170, -1170, -1170,     0, -1170, -1170, -1170,     0, -1170, -1170,
   -1170, -1170, -1193,   312,     0,     1,   313,   109,   314,     0,
     315,   316,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,    20,    21,
     254,   255,    24,    25,    26,     0,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,     0,     0,   317,
     256, -1193,     0,     0,   318,   319,   320,    30,    31,     0,
       0, -1193,    34, -1193, -1193, -1193, -1193,   321,   652,   653,
     258,   654,   655,   656, -1193, -1193, -1193, -1193,     0, -1193,
       0,   323, -1193,   259,     0,   324,   325,   326,   327,   328,
     329,   330,   331,    45,    46,   260,   261,   262,   263,   213,
     214,   332,   333,   334,     0,     0,   335,     0,   336,   657,
       0, -1193, -1193,   264,     0,   658,   337,   338,     0,   339,
     340,   341,   342, -1171,   632,     0, -1171, -1171, -1171, -1171,
       0, -1171, -1171,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171,     0, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,     0,     0,
   -1171, -1171, -1171,     0,     0, -1171, -1171, -1171, -1171, -1171,
       0,     0, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,     0,
   -1171,     0, -1171, -1171, -1171,     0, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171,     0,     0, -1171,     0, -1171,
     633,     0, -1171, -1171, -1171,     0, -1171, -1171, -1171,     0,
   -1171, -1171, -1171, -1171, -1232,   312,     0,     1,   313,   109,
     314,     0,   315,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1232, -1232, -1232, -1232, -1232, -1232, -1232,
   -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232,
   -1232, -1232, -1232, -1232, -1232, -1232, -1232,     0,  1135,  1136,
    1137,   644,  1138,  1139,  1140,  1141,   649,   650,  1142,     0,
       0,   317, -1232, -1232,     0,     0,   318,   319,   320, -1232,
   -1232,     0,     0, -1232,    34, -1232, -1232, -1232, -1232,   321,
     322,  1143, -1232,   654,   655,   656, -1232, -1232, -1232, -1232,
       0, -1232,     0,   323, -1232, -1232,     0,   324,   325,   326,
     327,   328,   329,   330,   331,    45,    46, -1232, -1232, -1232,
   -1232, -1232, -1232,   332,   333,   334,     0,     0,   335,     0,
     336,   657,     0, -1232, -1232,   264,     0,   658,   337,   338,
       0,   339,   340,   341,   342, -1248,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1248, -1248, -1248, -1248, -1248, -1248,
   -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248,
   -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248,     0, -1248,
   -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248,
       0,     0,   317, -1248, -1248,     0,     0,   318,   319,   320,
   -1248, -1248,     0,     0, -1248, -1248, -1248, -1248, -1248, -1248,
     321,   322, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248,
   -1248,     0, -1248,     0,   323, -1248, -1248,     0,   324,   325,
     326,   327,   328,   329,   330,   331, -1248, -1248, -1248, -1248,
   -1248, -1248, -1248, -1248,   332,   333,   334,     0,     0,   335,
       0,   336,  1154,     0, -1248, -1248,   758,     0, -1248,   337,
     338,     0,   339,   340,   341,   342, -1183,  1181,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,     0,     0,   317,   256, -1183,     0,     0,   318,   319,
     320,    30,    31,     0,     0, -1183,    34, -1183, -1183, -1183,
   -1183,   321,   652,   653,   258,   654,   655,   656, -1183, -1183,
   -1183, -1183,     0, -1183,     0,   323, -1183,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,   657,     0, -1183, -1183,   264,     0,   658,
     337,   338,     0,   339,   340,   341,   342, -1187,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   207,   208,   209,   210,
     211,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,    20,    21,   254,   255,    24,    25,    26,
       0,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,     0,     0,   317,   256, -1187,     0,     0,   318,
     319,   320,    30,    31,     0,     0, -1187,    34, -1187, -1187,
   -1187, -1187,   321,   652,   653,   258,   654,   655,   656, -1187,
   -1187, -1187, -1187,     0, -1187,     0,   323, -1187,   259,     0,
     324,   325,   326,   327,   328,   329,   330,   331,    45,    46,
     260,   261,   262,   263,   213,   214,   332,   333,   334,     0,
       0,   335,     0,   336,   657,     0, -1187, -1187,   264,     0,
     658,   337,   338,     0,   339,   340,   341,   342, -1182,   312,
       0,     1,   313,   109,   314,     0,   315,   316,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,    20,    21,   254,   255,    24,    25,
      26,     0,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,     0,     0,   317,   256, -1182,     0,     0,
     318,   319,   320,    30,    31,     0,     0, -1182,    34, -1182,
   -1182, -1182, -1182,   321,   652,   653,   258,   654,   655,   656,
   -1182, -1182, -1182, -1182,     0, -1182,     0,   323, -1182,   259,
       0,   324,   325,   326,   327,   328,   329,   330,   331,    45,
      46,   260,   261,   262,   263,   213,   214,   332,   333,   334,
       0,     0,   335,     0,   336,   657,     0, -1182, -1182,   264,
       0,   658,   337,   338,     0,   339,   340,   341,   342, -1186,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   207,   208,
     209,   210,   211,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    20,    21,   254,   255,    24,
      25,    26,     0,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,     0,     0,   317,   256, -1186,     0,
       0,   318,   319,   320,    30,    31,     0,     0, -1186,    34,
   -1186, -1186, -1186, -1186,   321,   652,   653,   258,   654,   655,
     656, -1186, -1186, -1186, -1186,     0, -1186,     0,   323, -1186,
     259,     0,   324,   325,   326,   327,   328,   329,   330,   331,
      45,    46,   260,   261,   262,   263,   213,   214,   332,   333,
     334,     0,     0,   335,     0,   336,   657,     0, -1186, -1186,
     264,     0,   658,   337,   338,     0,   339,   340,   341,   342,
   -1089,  1194,     0, -1089, -1089, -1089, -1089,     0, -1089, -1089,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089,     0, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089,     0,     0, -1089, -1089, -1089,
       0,     0, -1089, -1089, -1089, -1089, -1089,     0,     0, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089,     0, -1089,     0, -1089,
   -1089, -1089,     0, -1089, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089,     0,     0, -1089,     0, -1089, -1089,     0, -1089,
   -1089, -1089,     0, -1089, -1089, -1089,     0, -1089, -1089, -1089,
   -1089, -1091,  1195,     0, -1091, -1091, -1091, -1091,     0, -1091,
   -1091,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091,     0, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091,     0,     0, -1091, -1091,
   -1091,     0,     0, -1091, -1091, -1091, -1091, -1091,     0,     0,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091,     0, -1091,     0,
   -1091, -1091, -1091,     0, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091,     0,     0, -1091,     0, -1091, -1091,     0,
   -1091, -1091, -1091,     0, -1091, -1091, -1091,     0, -1091, -1091,
   -1091, -1091, -1137,   312,     0,     1,   313,   109,   314,     0,
     315,   316,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,    20,    21,
     254,   255,    24,    25,    26,     0,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,     0,     0,   317,
     256, -1137,     0,     0,   318,   319,   320,    30,    31,     0,
       0, -1137,    34, -1137, -1137, -1137, -1137,   321,   652,   653,
     258,   654,   655,   656, -1137, -1137, -1137, -1137,     0, -1137,
       0,   323, -1137,   259,     0,   324,   325,   326,   327,   328,
     329,   330,   331,    45,    46,   260,   261,   262,   263,   213,
     214,   332,   333,   334,     0,     0,   335,     0,   336,   657,
       0, -1137, -1137,   264,     0,   658,   337,   338,     0,   339,
     340,   341,   342, -1139,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,     0,     0,
     317,   256, -1139,     0,     0,   318,   319,   320,    30,    31,
       0,     0, -1139,    34, -1139, -1139, -1139, -1139,   321,   652,
     653,   258,   654,   655,   656, -1139, -1139, -1139, -1139,     0,
   -1139,     0,   323, -1139,   259,     0,   324,   325,   326,   327,
     328,   329,   330,   331,    45,    46,   260,   261,   262,   263,
     213,   214,   332,   333,   334,     0,     0,   335,     0,   336,
     657,     0, -1139, -1139,   264,     0,   658,   337,   338,     0,
     339,   340,   341,   342, -1184,   312,     0,     1,   313,   109,
     314,     0,   315,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
      20,    21,   254,   255,    24,    25,    26,     0,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,     0,
       0,   317,   256, -1184,     0,     0,   318,   319,   320,    30,
      31,     0,     0, -1184,    34, -1184, -1184, -1184, -1184,   321,
     652,   653,   258,   654,   655,   656, -1184, -1184, -1184, -1184,
       0, -1184,     0,   323, -1184,   259,     0,   324,   325,   326,
     327,   328,   329,   330,   331,    45,    46,   260,   261,   262,
     263,   213,   214,   332,   333,   334,     0,     0,   335,     0,
     336,   657,     0, -1184, -1184,   264,     0,   658,   337,   338,
       0,   339,   340,   341,   342, -1188,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   207,   208,   209,   210,   211,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    20,    21,   254,   255,    24,    25,    26,     0,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
       0,     0,   317,   256, -1188,     0,     0,   318,   319,   320,
      30,    31,     0,     0, -1188,    34, -1188, -1188, -1188, -1188,
     321,   652,   653,   258,   654,   655,   656, -1188, -1188, -1188,
   -1188,     0, -1188,     0,   323, -1188,   259,     0,   324,   325,
     326,   327,   328,   329,   330,   331,    45,    46,   260,   261,
     262,   263,   213,   214,   332,   333,   334,     0,     0,   335,
       0,   336,   657,     0, -1188, -1188,   264,     0,   658,   337,
     338,     0,   339,   340,   341,   342, -1185,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,     0,     0,   317,   256, -1185,     0,     0,   318,   319,
     320,    30,    31,     0,     0, -1185,    34, -1185, -1185, -1185,
   -1185,   321,   652,   653,   258,   654,   655,   656, -1185, -1185,
   -1185, -1185,     0, -1185,     0,   323, -1185,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,   657,     0, -1185, -1185,   264,     0,   658,
     337,   338,     0,   339,   340,   341,   342, -1189,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   207,   208,   209,   210,
     211,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,    20,    21,   254,   255,    24,    25,    26,
       0,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,     0,     0,   317,   256, -1189,     0,     0,   318,
     319,   320,    30,    31,     0,     0, -1189,    34, -1189, -1189,
   -1189, -1189,   321,   652,   653,   258,   654,   655,   656, -1189,
   -1189, -1189, -1189,     0, -1189,     0,   323, -1189,   259,     0,
     324,   325,   326,   327,   328,   329,   330,   331,    45,    46,
     260,   261,   262,   263,   213,   214,   332,   333,   334,     0,
       0,   335,     0,   336,   657,     0, -1189, -1189,   264,     0,
     658,   337,   338,     0,   339,   340,   341,   342, -1180,   632,
       0, -1180, -1180, -1180, -1180,     0, -1180, -1180,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1180, -1180, -1180, -1180,
   -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
   -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
   -1180,     0, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
   -1180, -1180, -1180,     0,     0, -1180, -1180, -1180,     0,     0,
   -1180, -1180, -1180, -1180, -1180,     0,     0, -1180, -1180, -1180,
   -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
   -1180, -1180, -1180, -1180,     0, -1180,     0, -1180, -1180, -1180,
       0, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
   -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180, -1180,
       0,     0, -1180,     0, -1180,   633,     0, -1180, -1180, -1180,
       0, -1180, -1180, -1180,     0, -1180, -1180, -1180, -1180, -1181,
     632,     0, -1181, -1181, -1181, -1181,     0, -1181, -1181,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181,     0, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181,     0,     0, -1181, -1181, -1181,     0,
       0, -1181, -1181, -1181, -1181, -1181,     0,     0, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181,     0, -1181,     0, -1181, -1181,
   -1181,     0, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181,     0,     0, -1181,     0, -1181,   633,     0, -1181, -1181,
   -1181,     0, -1181, -1181, -1181,     0, -1181, -1181, -1181, -1181,
   -1014,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014,     0, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014,     0,     0,   317, -1014, -1014,
       0,     0,   318,   319,   320, -1014, -1014,     0,     0, -1014,
   -1014, -1014, -1014, -1014, -1014,   321,   322, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014,     0, -1014,     0,   323,
   -1014, -1014,     0,   324,   325,   326,   327,   328,   329,   330,
     331, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,   332,
     333,   334,     0,     0,   335,     0,   336, -1014,     0,  1825,
    1826,  1034,     0, -1014,   337,   338,     0,   339,   340,   341,
     342, -1143,   632,     0, -1143, -1143, -1143, -1143,     0, -1143,
   -1143,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143,     0, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143,     0,     0, -1143, -1143,
   -1143,     0,     0, -1143, -1143, -1143, -1143, -1143,     0,     0,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143,     0, -1143,     0,
   -1143, -1143, -1143,     0, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143,     0,     0, -1143,     0, -1143,   633,     0,
   -1143, -1143, -1143,     0, -1143, -1143, -1143,     0, -1143, -1143,
   -1143, -1143, -1144,   632,     0, -1144, -1144, -1144, -1144,     0,
   -1144, -1144,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144,     0, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144,     0,     0, -1144,
   -1144, -1144,     0,     0, -1144, -1144, -1144, -1144, -1144,     0,
       0, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,     0, -1144,
       0, -1144, -1144, -1144,     0, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144,     0,     0, -1144,     0, -1144,   633,
       0, -1144, -1144, -1144,     0, -1144, -1144, -1144,     0, -1144,
   -1144, -1144, -1144, -1140,   632,     0, -1140, -1140, -1140, -1140,
       0, -1140, -1140,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140,
   -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140,
   -1140, -1140, -1140, -1140, -1140, -1140,     0, -1140, -1140, -1140,
   -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140,     0,     0,
   -1140, -1140, -1140,     0,     0, -1140, -1140, -1140, -1140, -1140,
       0,     0, -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140,
   -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140,     0,
   -1140,     0, -1140, -1140, -1140,     0, -1140, -1140, -1140, -1140,
   -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140, -1140,
   -1140, -1140, -1140, -1140, -1140,     0,     0, -1140,     0, -1140,
     633,     0, -1140, -1140, -1140,     0, -1140, -1140, -1140,     0,
   -1140, -1140, -1140, -1140, -1016,   312,     0,     1,   313,   109,
     314,     0,   315,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016,     0, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,     0,
       0,   317, -1016, -1016,     0,     0,   318,   319,   320, -1016,
   -1016,     0,     0, -1016, -1016, -1016, -1016, -1016, -1016,   321,
     322, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
       0, -1016,     0,   323, -1016, -1016,     0,   324,   325,   326,
     327,   328,   329,   330,   331, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016,   332,   333,   334,     0,     0,   335,     0,
     336, -1016,     0, -1016,  2006,  1034,     0, -1016,   337,   338,
       0,   339,   340,   341,   342, -1010,  2009,     0, -1010, -1010,
   -1010, -1010,     0, -1010, -1010,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1010, -1010, -1010, -1010, -1010, -1010, -1010,
   -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010,
   -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010,     0, -1010,
   -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010,
       0,     0, -1010, -1010, -1010,     0,     0, -1010, -1010, -1010,
   -1010, -1010,     0,     0, -1010, -1010, -1010, -1010, -1010, -1010,
   -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010,
   -1010,     0, -1010,     0, -1010, -1010, -1010,     0, -1010, -1010,
   -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010,
   -1010, -1010, -1010, -1010, -1010, -1010, -1010,     0,     0, -1010,
       0, -1010, -1010,     0, -1010, -1010, -1010,     0, -1010, -1010,
   -1010,     0, -1010, -1010, -1010, -1010, -1141,   632,     0, -1141,
   -1141, -1141, -1141,     0, -1141, -1141,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1141, -1141, -1141, -1141, -1141, -1141,
   -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141,
   -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141,     0,
   -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141,
   -1141,     0,     0, -1141, -1141, -1141,     0,     0, -1141, -1141,
   -1141, -1141, -1141,     0,     0, -1141, -1141, -1141, -1141, -1141,
   -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141,
   -1141, -1141,     0, -1141,     0, -1141, -1141, -1141,     0, -1141,
   -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141,
   -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141,     0,     0,
   -1141,     0, -1141,   633,     0, -1141, -1141, -1141,     0, -1141,
   -1141, -1141,     0, -1141, -1141, -1141, -1141, -1142,   632,     0,
   -1142, -1142, -1142, -1142,     0, -1142, -1142,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1142, -1142, -1142, -1142, -1142,
   -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,
   -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,
       0, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,
   -1142, -1142,     0,     0, -1142, -1142, -1142,     0,     0, -1142,
   -1142, -1142, -1142, -1142,     0,     0, -1142, -1142, -1142, -1142,
   -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,
   -1142, -1142, -1142,     0, -1142,     0, -1142, -1142, -1142,     0,
   -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,
   -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,     0,
       0, -1142,     0, -1142,   633,     0, -1142, -1142, -1142,     0,
   -1142, -1142, -1142,     0, -1142, -1142, -1142, -1142, -1229,   312,
       0,     1,   313,   109,   314,     0,   315,   316,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229,     0, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229,     0,     0,   317, -1229, -1229,     0,     0,
     318,   319,   320, -1229, -1229,     0,     0, -1229, -1229, -1229,
   -1229, -1229, -1229,   321,   322, -1229, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229,     0, -1229,     0,   323, -1229, -1229,
       0,   324,   325,   326,   327,   328,   329,   330,   331, -1229,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229,   332,   333,   334,
       0,     0,   335,     0,   336, -1229,     0, -1229, -1229, -1229,
       0, -1229,   337,   338,     0,   339,   340,   341,   342, -1011,
    2085,     0, -1011, -1011, -1011, -1011,     0, -1011, -1011,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1011, -1011, -1011,
   -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011,     0, -1011, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011, -1011, -1011,     0,     0, -1011, -1011, -1011,     0,
       0, -1011, -1011, -1011, -1011, -1011,     0,     0, -1011, -1011,
   -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011, -1011, -1011, -1011,     0, -1011,     0, -1011, -1011,
   -1011,     0, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011,     0,     0, -1011,     0, -1011, -1011,     0, -1011, -1011,
   -1011,     0, -1011, -1011, -1011,     0, -1011, -1011, -1011, -1011,
    -914,   596,     0,  -914,  -914,  -914,  -914,     0,  -914,  -914,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -914,  -914,
    -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,
    -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,
    -914,  -914,  -914,     0,     0,  -914,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -914,  -914,  -914,
       0,     0,  -914,  -914,  -914,  -914,  -914,     0,     0,  -914,
    -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,
       0,     0,  -914,  -914,  -914,  -914,     0,  -914,     0,  -914,
    -914,  -914,     0,  -914,  -914,  -914,  -914,  -914,  -914,  -914,
    -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,
    -914,  -914,     0,     0,  -914,   862,  -914,  -914,     0,   598,
    -914,  -914,     0,     0,  -914,  -914,     0,  -914,  -914,  -914,
    -914,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,   653,   258,   654,
     655,   656,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,   657,     0,     0,
       0,   264,     0,   658,   337,   338,     0,   339,   340,   341,
     342,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,  1135,  1136,  1137,   644,  1138,  1139,
    1140,  1141,   649,   650,  1142,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,   653,   258,   654,
     655,   656,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,   657,     0,     0,
       0,   264,     0,   658,   337,   338,     0,   339,   340,   341,
     342,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1004,     0,  1005,
    1006,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,  1268,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1004,     0,  1005,
    -110,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,  1275,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1004,     0,  1005,
     -98,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,  1279,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1004,     0,  1005,
    -102,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1534,     0,  1005,
     -65,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1543,     0,  1005,
    1544,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,  1601,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1004,     0,  1005,
     -81,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1543,     0,  1005,
    -107,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1543,     0,  1005,
     -97,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1543,     0,  1005,
    -101,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,  1784,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1004,     0,  1005,
     -88,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1543,     0,  1005,
     -78,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,   256,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,   321,   652,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,  1543,     0,  1005,
     -85,   758,     0,     0,   337,   338,     0,   339,   340,   341,
     342,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,   321,   417,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,    42,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,    47,    48,    49,    50,   213,   214,   332,
     333,   334,     0,     0,   335,   312,   336,     1,   313,   109,
     314,     0,   315,   316,   337,   338,     0,   339,   340,   341,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   880,    29,     0,     0,     0,   318,   319,   320,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,   321,
     417,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   323,     0,    42,     0,   324,   325,   326,
     327,   328,   329,   330,   331,    45,    46,    47,    48,    49,
      50,   213,   214,   332,   333,   334,     0,     0,   335,   312,
     336,     1,   313,   109,   314,     0,   315,   316,   337,   338,
       0,   339,   340,   341,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,     0,     0,     0,
     318,   319,   320,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,   321,   417,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   323,     0,    42,
       0,   324,   325,   326,   327,   328,   329,   330,   331,    45,
      46,    47,    48,    49,    50,     0,     0,   332,   333,   334,
       0,     0,   335,   747,   336,     0,     0,     0,     0,     0,
       0,     0,   337,   338,     0,   339,   340,   341,   342,   312,
       0,     1,   313,   109,   314,     0,   315,   316,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1214,    29,     0,     0,     0,
     318,   319,   320,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,   321,   417,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   323,     0,    42,
       0,   324,   325,   326,   327,   328,   329,   330,   331,    45,
      46,    47,    48,    49,    50,     0,     0,   332,   333,   334,
       0,     0,   335,   747,   336,     0,     0,     0,     0,     0,
       0,     0,   337,   338,     0,   339,   340,   341,   342,   312,
       0,     1,   313,   109,   314,     0,   315,   316,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,     0,     0,     0,
     318,   319,   320,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,   321,   417,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   323,     0,    42,
       0,   324,   325,   326,   327,   328,   329,   330,   331,    45,
      46,    47,    48,    49,    50,     0,     0,   332,   333,   334,
       0,     0,   335,   312,   336,     1,   313,   109,   314,   264,
     315,   316,   337,   338,     0,   339,   340,   341,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,   577,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,     0,     0,     0,   318,   319,   320,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,   321,   417,    40,
      41,     0,   312,     0,     1,   313,   109,   314,     0,   315,
     316,   323,     0,    42,     0,   324,   325,   326,   327,   328,
     329,   330,   331,    45,    46,    47,    48,    49,    50,     2,
       0,   332,   333,   903,     0,     0,   904,   747,   336,     0,
       0,     0,     0,     0,     0,     0,   337,   338,     0,   339,
     340,   341,   342,     0,     0,  1135,  1136,  1137,   644,  1138,
    1139,  1140,  1141,   649,   650,  1142,     0,     0,   317,     0,
       0,     0,     0,   318,   319,   320,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,   321,   322,  1143,     0,
     654,   655,   656,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,   324,   325,   326,   327,   328,   329,
     330,   331,    45,    46,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  -453,   336,   657,     0,
    -453,     0,   264,     0,   658,   337,   338,     0,   339,   340,
     341,   342,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1135,  1136,  1137,   644,  1138,
    1139,  1140,  1141,   649,   650,  1142,     0,     0,   317,     0,
       0,     0,     0,   318,   319,   320,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,   321,   322,  1143,     0,
     654,   655,   656,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,   324,   325,   326,   327,   328,   329,
     330,   331,    45,    46,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  1178,   336,   657,     0,
    1179,     0,   264,     0,   658,   337,   338,     0,   339,   340,
     341,   342,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1135,  1136,  1137,   644,  1138,
    1139,  1140,  1141,   649,   650,  1142,     0,     0,   317,     0,
       0,     0,     0,   318,   319,   320,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,   321,   322,  1143,     0,
     654,   655,   656,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,   324,   325,   326,   327,   328,   329,
     330,   331,    45,    46,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,   657,     0,
       0,     0,   264,     0,   658,   337,   338,     0,   339,   340,
     341,   342,  1859,     0,     1,   313,   109,   314,     0,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1135,  1136,  1137,   644,  1138,
    1139,  1140,  1141,   649,   650,  1142,     0,     0,   317,     0,
       0,     0,     0,   318,   319,   320,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,   321,   322,  1143,     0,
     654,   655,   656,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,   324,   325,   326,   327,   328,   329,
     330,   331,    45,    46,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,   657,     0,
       0,     0,   264,     0,   658,   337,   338,     0,   339,   340,
     341,   342,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,     0,     0,   317,     0,
       0,     0,     0,   318,   319,   320,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,   321,   322,  1143,     0,
     654,   655,   656,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     0,   324,   325,   326,   327,   328,   329,
     330,   331,    45,    46,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,   657,     0,
       0,     0,   264,     0,   658,   337,   338,     0,   339,   340,
     341,   342,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  1178,   336,  2094,     0,
    1179,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
       0,   336,  1173,     0,  1174,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,  1154,     0,     0,     0,
     758,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,  1634,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,  1178,   336,
       0,     0,  1179,     0,     0,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1635,   336,  1636,     0,     0,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,  1644,     0,
    1174,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    1714,   336,     0,     0,  1174,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,     0,     0,  1174,     0,
       0,     0,     0,   337,   338,  1742,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,  1745,     0,     0,     0,  1746,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,     0,     0,  1174,     0,     0,     0,
       0,   337,   338,  1752,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
    1745,     0,     0,     0,  1754,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    1855,   336,     0,     0,  1174,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  1857,   336,     0,     0,  1174,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,  1858,   336,
       0,     0,  1179,     0,     0,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1861,   336,     0,     0,  1174,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  1635,   336,  1636,     0,
       0,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
    1881,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
       0,   336,  1878,     0,  1174,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  1882,   336,  1636,     0,     0,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,  1745,     0,     0,     0,  1895,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,     0,     0,  1745,     0,     0,     0,
    1899,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  2014,   336,     0,     0,
    1174,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    1856,   336,     0,     0,  1179,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  2021,   336,     0,     0,  1174,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,  1882,   336,
    1636,     0,     0,     0,     0,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  2099,   336,     0,     0,  1174,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
       0,  2128,  1034,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    2131,   336,     0,     0,  1174,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  2132,   336,     0,     0,  1174,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,  2160,   336,
       0,     0,  1174,     0,     0,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,     0,     0,     0,     0,     0,     0,
       0,   337,   338,   561,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
       0,     0,   758,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
       0,   336,     0,     0,     0,     0,     0,     0,     0,   337,
     338,   854,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,     0,     0,     0,     0,
       0,     0,     0,   337,   338,   858,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,     0,     0,  1034,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,     0,     0,     0,     0,     0,     0,
       0,   337,   338,  1075,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
       0,     0,     0,     0,  1127,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
    1478,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
     747,   336,     0,     0,     0,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,     0,     0,     0,     0,
     758,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,     0,     0,     0,     0,     0,   337,   338,  1582,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1618,   336,     0,     0,     0,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
       0,     0,     0,     0,  1621,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
    1815,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
       0,   336,     0,     0,     0,     0,  1814,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,  1818,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,     0,     0,     0,     0,
     758,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,  1822,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,     0,     0,   758,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,     0,     0,     0,     0,   758,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  1868,   336,     0,     0,
       0,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,  1928,
       0,   336,     0,     0,     0,     0,  1814,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  2030,   336,     0,     0,     0,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,  2090,   336,
       0,     0,     0,     0,     0,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,     0,     0,     0,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   717,     0,   336,     0,     0,
       0,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   720,
       0,   336,     0,     0,     0,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     0,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,  -902,   596,     0,  -902,  -902,  -902,   332,   333,
     334,     0,     0,   743,     0,   336,     0,     0,     0,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
    -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,
    -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,
    -902,  -902,  -902,  -902,  -902,     0,     0,  -902,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -902,
    -902,  -902,     0,     0,  -902,  -902,     0,  -902,  -902,     0,
       0,  -902,  -902,  -902,  -902,  -902,  -902,     0,  -902,  -902,
    -902,  -902,     0,     0,  -902,  -902,  -902,  -902,     0,  -902,
       0,  -902,  -902,  -902,     0,  -902,  -902,  -902,  -902,  -902,
    -902,  -902,     0,  -902,  -902,  -902,  -902,  -902,  -902,  -902,
    -902,  -902,     0,  -902,     0,     0,  -902,   597,  -902,  -902,
       0,   598,  -902,     0,     0,     0,  -902,  -902,  -189,   921,
       0,  -189,  -189,  -189,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,     0,     0,  -189,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -189,  -189,  -189,     0,     0,
    -189,  -189,     0,  -189,  -189,     0,     0,  -189,  -189,  -189,
    -189,  -189,  -189,     0,  -189,  -189,  -189,  -189,     0,     0,
    -189,  -189,  -189,  -189,     0,  -189,     0,  -189,  -189,  -189,
       0,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,
       0,     0,  -189,     0,  -189,   922,     0,   923,  -189,     0,
       0,     0,  -189,  -189,  -253,   935,     0,     1,   313,   109,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,  -253,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,  -251,   938,  -253,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,  -251,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
    -254,   935,  -251,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,  -254,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,  -252,   938,
    -254,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,  -252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   434,  -252,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   500,   450,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   522,   501,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   527,   523,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   531,
     528,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   935,   532,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   938,  -757,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   935,  -758,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   938,  -754,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   935,
    -755,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   938,  -760,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,  1057,  -761,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,  1061,  1058,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   312,  1062,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   935,
    -652,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   938,  -737,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   935,  -738,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   938,  -740,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,  1564,  -741,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   935,
    1565,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   938,  -647,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   935,  -648,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   938,  -743,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   312,  -744,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   312,
    -651,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   312,  -649,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   312,  -627,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   935,  -626,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   938,  -640,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   312,
    -641,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   935,  -650,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   938,  -636,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   935,  -637,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   938,  -624,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   935,
    -625,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   938,  -619,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   935,  -620,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   938,  -638,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   434,  -639,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,   500,     0,
       1,   313,   109,     0,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   207,   208,   209,   210,
     211,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   317,    29,   435,     0,     0,   318,
     319,     0,    30,    31,     0,     0,   436,    34,   437,   438,
      37,    38,     0,   417,    40,    41,   439,     0,     0,   440,
     441,   442,   443,     0,   444,     0,   445,   446,    42,     0,
     324,   325,   326,   327,   328,   329,   330,     0,    45,    46,
      47,    48,    49,    50,   213,   214,   332,   206,    53,     1,
       0,   447,     0,   448,   449,     0,     0,     0,     0,     0,
       0,   337,   338,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,   577,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   212,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   213,   214,     0,   206,    53,     1,     0,
     578,  1066,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   207,   208,   209,   210,   211,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   212,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   213,   214,     1,     0,    53,     0,     0,   876,
    1066,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     579,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     207,   208,   209,   210,   211,     8,     9,    10,   577,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   213,   214,
       1,     0,    53,     0,     0,   578,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   579,     0,   580,     0,
       0,     0,     0,     0,     0,     2,   207,   208,   209,   210,
     211,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   213,   214,     1,     0,    53,     0,
       0,   876,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   579,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   256,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   257,
      40,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,   260,   261,   262,   263,
     213,   214,     1,     0,    53,     0,     0,   876,     0,     0,
       0,     0,     0,     0,  1443,     0,     0,     0,   579,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   207,   208,
     209,   210,   211,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    20,    21,   254,   255,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   256,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,     0,     0,     0,   257,    40,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,   260,   261,   262,   263,   213,   214,     1,     0,
      53,     0,     0,   876,     0,     0,     0,     0,     0,     0,
    1460,     0,     0,     0,   579,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   207,   208,   209,   210,   211,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    20,    21,   254,   255,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   256,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   257,    40,   258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,   260,   261,
     262,   263,   213,   214,     1,     0,    53,     0,     0,  1226,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1227,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     207,   208,   209,   210,   211,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,    20,    21,   254,
     255,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,     0,   257,    40,   258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   259,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,   260,   261,   262,   263,   213,   214,
       1,     0,    53,     0,     0,  1226,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1249,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   207,   208,   209,   210,
     211,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,    20,    21,   254,   255,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   256,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   257,    40,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
     260,   261,   262,   263,   213,   214,     1,     0,    53,     0,
       0,  1226,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1706,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   256,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   257,
      40,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,   260,   261,   262,   263,
     213,   214,     1,     0,    53,     0,     0,  1226,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1721,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     3,     4,
     283,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,     0,     0,     0,    30,    31,   284,    33,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,    44,     0,     0,     1,     0,
      45,    46,    47,    48,    49,    50,    51,    52,     0,     0,
      53,     0,     0,    54,     0,     0,     0,     0,     0,     0,
       0,     0,   285,     2,   207,   208,   209,   210,   211,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,   435,     0,     0,     0,     0,     0,
      30,    31,     0,     0,   436,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,     0,     0,     1,     0,    45,    46,    47,    48,
      49,    50,   213,   214,     0,     0,    53,     0,     0,   963,
       0,   448,     0,     0,     0,     0,     0,     0,   964,     2,
     207,   208,   209,   210,   211,     8,     9,    10,   577,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       1,     0,    45,    46,    47,    48,    49,    50,   213,   214,
       0,     0,    53,     0,     0,   943,     0,     0,     0,     0,
       0,     0,     0,     0,   944,     2,   207,   208,   209,   210,
     211,     8,     9,    10,   577,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,     0,   634,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   213,   214,     0,     0,    53,     0,
       0,    54,     0,     0,     0,     0,     0,     0,     0,     0,
     944,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   256,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   257,
      40,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,  1529,     0,
       0,     0,     0,     0,    45,    46,   260,   261,   262,   263,
     213,   214,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   264,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -66,     0,     0,     0,     0,
       0,     0,   -66,   -66,     0,     0,     0,   -66,     0,     0,
       0,     0,     0,   -66,   -66,   -66,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -66,     0,
       0,  1733,     0,     0,     0,     0,     0,     0,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,     0,     0,     0,     0,
       0,     0,     0,     0,  1530,     0,  1531,   -66,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   256,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,     0,   257,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,     0,  1737,     0,     0,     0,     0,     0,
       0,    45,    46,   260,   261,   262,   263,   213,   214,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -111,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   256,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   257,
      40,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,  1738,     0,     0,
       0,     0,     0,     0,    45,    46,   260,   261,   262,   263,
     213,   214,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -95,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   256,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,     0,   257,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
    1846,     0,     0,     0,     0,     0,     0,    45,    46,   260,
     261,   262,   263,   213,   214,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -96,     2,   207,   208,
     209,   210,   211,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    20,    21,   254,   255,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   256,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,     0,     0,     0,   257,    40,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,  1991,     0,     0,     0,     0,     0,     0,
      45,    46,   260,   261,   262,   263,   213,   214,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -80,
       2,   207,   208,   209,   210,   211,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,    20,    21,
     254,   255,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     256,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   257,    40,
     258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   259,     0, -1300,   302,     0,     1,     0,
       0,     0,     0,    45,    46,   260,   261,   262,   263,   213,
     214,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -87,     2,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,     0,     0,     0,
      30,    31,    32,    33,     0,    34,    35,    36,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,    43,     1,     0,
       0,    44,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,    51,    52,     0,     0,    53,     0,     0,    54,
       0,     0,    55,     2,   207,   208,   209,   210,   211,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     1,     0,   846,     0,     0,    45,    46,    47,    48,
      49,    50,   213,   214,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1419,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     1,     0,   846,     0,     0,    45,
      46,    47,    48,    49,    50,   213,   214,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1764,     2,
     207,   208,   209,   210,   211,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,   168,     0,     1,     0,   846,
       0,     0,    45,    46,    47,    48,    49,    50,   213,   214,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1765,     2,     3,     4,   169,     6,     7,     8,     9,
      10,   170,   171,   172,   173,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,   168,     0,     1,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,    51,    52,     0,     0,    53,     0,     0,    54,     0,
       0,   174,     0,     2,     3,     4,   169,     6,     7,     8,
       9,    10,   170,   171,   172,   173,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,   617,     0,     1,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,    51,    52,     0,     0,    53,     0,     0,    54,
       0,     0,   174,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   618,   619,   620,   621,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   256,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,     0,   257,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,  -922,     0,
    -922,     0,     0,     0,     0,     0,     0,    45,    46,   260,
     261,   262,   263,   213,   214,     0,     0,    53,     0,     0,
      54,     0,     0,   622,     0,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -922,     0,     0,     0,     0,
       0,     0,  -922,  -922,     0,     0,     0,  -922,     0,     0,
       0,     0,     0,  -922,  -922,  -922,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -922,     0,
       1,     0,     0,     0,     0,     0,     0,     0,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,     0,     0,  -922,     0,
       0,  -922,     0,     0,  -922,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,     0,
       0,     0,    30,    31,    32,    33,     0,    34,    35,    36,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,    43,
       0, -1301,   294,    44,     1,     0,     0,     0,    45,    46,
      47,    48,    49,    50,    51,    52,     0,     0,    53,     0,
       0,    54,     0,     0,    55,     0,     0,     0,     0,     2,
       3,     4,   169,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,    35,    36,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   206,
       0,     1,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,    51,    52,
       0,     0,    53,     0,     0,    54,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   212,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   206,    42,
       1,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,   213,   214,     0,     0,    53,
       0,     0,  1226,  1693,     0,     2,   207,   208,   209,   210,
     211,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   212,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   206,    42,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   213,   214,     0,     0,     0,     0,
       0,     0,   215,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   212,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   956,    42,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   213,   214,     0,     0,     0,     0,     0,
       0,   400,     0,     2,   207,   208,   209,   210,   211,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   212,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1486,    42,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   213,   214,     0,     0,     0,     0,     0,     0,
     215,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   212,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   206,    42,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   213,   214,     0,     0,     0,     0,     0,     0,   400,
       0,     2,   207,   208,   209,   210,   211,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     212,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   206,    42,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     213,   214,     0,     0,     0,     0,     0,     0,  1579,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   212,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   168,    42,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   213,
     214,     0,     0,     0,     0,     0,     0,  1918,     0,     2,
       3,     4,   169,     6,     7,     8,     9,    10,   577,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
       0,     1,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,    51,    52,
       0,     0,    53,     0,     0,    54,     2,     3,     4,   169,
       6,     7,     8,     9,    10,   577,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   900,     0,     1,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,    51,    52,     0,     0,    53,
       0,     0,    54,     2,   207,   208,   209,   210,   211,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    20,    21,   254,   255,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   256,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   257,    40,   258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,   259,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,   260,   261,
     262,   263,   213,   214,     0,     0,     0,     0,     0,   901,
       2,     3,     4,   169,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,    51,
      52,     0,     0,    53,     0,     0,    54,     2,   207,   208,
     209,   210,   211,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,   213,   214,     0,     0,
      53,     0,     0,    54,     2,   207,   208,   209,   210,   211,
       8,     9,    10,   577,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   213,   214,     0,     0,    53,     0,     0,
      54,     2,   207,   208,   209,   210,   211,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     213,   214,     0,     0,     0,     0,     0,   735,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,   213,   214,     0,
       0,     0,     0,     0,  1465,     2,   207,   208,   209,   210,
     211,   242,   243,   244,  1551,   246,   247,   248,   249,   250,
     251,   252,   253,    20,    21,   254,   255,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   256,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   257,    40,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1089,     0,     1,   259,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
     260,   261,   262,   263,   213,   214,     0,     0,    53,     0,
       0,    54,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,  1090,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   212,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,  1095,     0,     1,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   213,   214,     2,   207,   208,   209,   210,   211,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,  1096,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   212,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,  1101,     0,     1,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   213,   214,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,  1102,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   212,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,   885,     0,
       1,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   213,   214,     2,   207,   208,   209,   210,
     211,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,    20,    21,   254,   255,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   256,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   257,    40,   258,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,   259,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
     260,   261,   262,   263,   213,   214,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,  1050,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   212,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,   213,   214,     2,   207,   208,
     209,   210,   211,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,  1107,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   212,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,   213,   214,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   514,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,   213,   214,     2,
     207,   208,   209,   210,   211,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,   846,
       0,     0,    45,    46,    47,    48,    49,    50,   213,   214,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   212,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   213,
     214,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   256,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,   489,   490,     0,     0,     0,   257,
      40,   258,     0,     0,     0,     0,     0,     1,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,   260,   261,   262,   263,
     213,   214,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   213,   214,     2,   207,   208,   209,   210,   211,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    20,    21,   254,   255,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   256,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   257,    40,   258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,   260,   261,
     262,   263,   213,   214,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   256,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,     0,   257,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,   260,
     261,   262,   263,   213,   214,     0,     0,    53,     0,     0,
     876,  1690,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   579,     2,   207,   208,   209,   210,   211,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
      20,    21,   254,   255,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   256,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     257,    40,   258,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   260,   261,   262,
     263,   213,   214,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1540,     2,   207,   208,   209,   210,
     211,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,    20,    21,   254,   255,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   256,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   257,    40,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
     260,   261,   262,   263,   213,   214
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-2047)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       0,    95,   942,   548,   656,   942,   135,   481,   875,   131,
     156,   734,    88,  1016,  1017,  1018,   482,   159,    85,   875,
      85,   355,   593,   851,   131,   103,   298,   736,    88,  1236,
    1017,   485,    32,    33,    96,  1119,    66,   103,    61,   842,
    1628,   103,    96,    43,    85,   851,   875,   952,  1016,   842,
    1018,    32,  1640,    86,    54,   131,  1016,     3,  1018,   188,
      96,    61,     1,    44,     5,   280,    66,     5,    68,   548,
    2116,   131,    85,    78,     1,  1016,   974,  1018,   481,     1,
       3,    85,    28,    96,    84,    85,    86,   354,    88,     3,
     103,    37,    96,   116,    94,   124,    96,   191,   192,     3,
     147,   368,     1,   103,   104,   372,   135,   107,     7,     8,
       9,     1,   892,   160,    28,   162,   116,   164,   124,   119,
       1,   355,   191,   192,    28,   147,  2172,  1034,   133,   110,
     111,   131,     3,   114,   134,   135,     1,     1,   160,   139,
     162,     1,   164,   143,   144,   145,     3,   147,     5,   179,
       1,   151,     3,   153,     1,   124,   156,   157,     3,   159,
     160,   161,   162,     1,   164,     3,   995,   167,   743,   568,
     758,   746,   122,   135,    31,     3,    17,   765,   124,   179,
     768,   131,   205,    28,   278,     1,     5,     3,   188,   135,
       3,   132,     5,     3,   133,     5,     1,   135,     3,   598,
     758,     5,   601,   130,   603,   205,   605,   765,   130,   481,
     768,   280,    85,    86,  1016,     1,  1018,   217,   568,   219,
     298,   288,   300,   288,     1,   124,   188,   227,   228,   128,
     299,   298,   298,   132,   300,     1,   135,   237,   300,    54,
     130,   241,   275,   895,  1024,     1,   300,   288,   598,   130,
       3,   601,     5,   603,   125,   605,     1,   298,   129,     1,
       1,   134,   133,   127,   300,   130,  1269,  1270,   298,     3,
     130,     1,    93,  1276,  1277,   275,   405,  1280,  1281,   130,
     280,    17,  1269,   130,   284,  1873,   131,   300,   288,  1276,
     432,     3,   130,  1280,   298,   774,   300,   125,   298,     1,
     300,   129,  1270,   284,   145,   133,     1,   878,     3,  1277,
    1270,     3,   125,  1281,   130,   125,    28,  1277,   318,   134,
     133,  1281,     3,   133,   324,   130,     3,  1225,     5,  1270,
     134,     3,   774,   127,    80,   335,  1277,   131,   899,    17,
    1281,   820,   809,     1,   130,     7,     8,     9,     5,   349,
     127,    28,   129,   130,   138,   139,   337,   451,   452,   453,
     454,   127,     3,   129,   130,   111,   112,    17,     3,     3,
     837,   127,   125,   129,   397,   124,   399,     5,   820,     1,
     133,     1,     3,   680,   681,   130,     3,   280,   130,   130,
       1,   391,   392,   127,     3,   129,     1,   397,   665,   399,
     130,   668,   275,     1,     3,   405,   482,    28,  1211,   145,
    1213,   411,   973,   228,   543,   288,   122,   122,  1211,   131,
    1213,   127,   482,   569,   424,   899,   121,   122,   130,   429,
     559,   431,   432,   125,   129,   435,   436,     3,   127,   711,
      74,   441,   131,   405,   444,   445,   446,   447,   448,     3,
     131,     3,     5,   125,   131,   549,   578,    74,   552,   280,
     794,   795,   796,   678,   679,   680,   681,   145,  1270,   127,
     132,   578,   129,   135,     3,  1277,   476,   477,   478,  1281,
     127,   481,   482,   949,   125,   485,   121,   122,   488,   892,
     824,   825,   826,   493,  1701,   145,   131,   497,   498,   973,
    1071,   129,   502,   503,   124,   125,   960,   129,   962,   129,
     131,  1082,  1596,   130,   514,     3,   125,  1226,   129,   124,
     520,   521,   121,   122,   524,   525,   573,   125,   575,   529,
     530,   129,   131,   533,   534,  1244,  1124,   537,   538,   539,
     540,   541,  1251,   543,  1442,  1450,   546,     3,     3,   952,
    1024,   573,   131,   575,   133,  1034,   579,   557,   558,   559,
     794,   795,   796,   563,     3,   131,  1124,   130,   568,   569,
     973,  1438,   124,   573,   127,   575,   576,   131,   578,   579,
     580,   543,  1438,   583,     3,  1490,   810,     5,  1493,   612,
     824,   825,   826,   593,  1422,  1423,     3,   559,   598,  1602,
    1603,   601,   131,   603,    11,   605,   130,  1505,     5,  1438,
    1550,     5,   612,  1550,   838,  1602,  1422,  1423,   131,    74,
     892,  1024,     3,     0,     5,     1,   130,   310,    67,     3,
     451,   593,   447,   711,   122,  1603,   319,   706,   707,   127,
     734,   121,   325,  1603,   711,   711,   646,     5,   648,     1,
    1557,    12,    13,     7,     8,     9,   656,  1524,    89,    90,
      91,  1517,  1603,  1519,   537,   538,   539,   540,   541,   125,
     711,     1,     7,     8,     9,   130,    10,    11,   678,   679,
     680,   681,   121,   122,   557,   558,   507,     1,     1,  1088,
     122,  1170,   131,     3,     0,  1174,   696,   697,  1177,   131,
    1179,   973,  1909,   122,   123,   705,   124,  1106,    85,    12,
      13,   711,   693,   694,   121,   122,   123,   717,    28,    96,
       3,   128,   129,   811,   131,   725,   103,   104,   125,   124,
     338,   125,   732,   733,   734,   735,   736,   737,  1088,     1,
     121,   122,     5,   743,  1094,    28,   746,   121,   122,   125,
    1100,   839,  1024,   129,   876,   755,  1106,   131,   739,   740,
     741,   122,   123,   578,   128,   580,   124,   127,   145,   876,
     124,   771,   124,   125,     1,   775,     3,   129,   132,     3,
     157,   135,  1785,  1786,   161,   678,   679,   680,   681,   124,
     135,     7,     8,     9,   124,   125,   129,   132,  1785,   129,
     135,  1603,  1700,   136,    28,     1,     3,  1705,  1715,     3,
     129,   125,   125,    37,   124,   129,   129,   817,  1786,   122,
     123,   821,     7,     8,     9,   646,  1786,   949,   129,   115,
    1127,   925,   926,  1130,   928,     0,   129,   931,   932,   981,
     982,   124,   949,   989,   129,  1786,   846,   847,   848,   812,
     124,   851,   852,   853,     7,     8,     9,   678,   679,   680,
     681,   135,   129,   125,    91,  1436,     3,   129,     5,  1774,
    1775,  1168,  1770,   949,   874,   875,   876,   840,   139,   131,
     880,   133,   882,   883,     3,  1182,  1183,  1184,  1185,   949,
     890,   891,   892,   129,    31,   895,  1484,   129,     3,   899,
     124,   901,   902,   135,   904,   130,   906,  1814,   813,  1055,
    1056,   288,  1127,  1007,   130,  1130,   132,   128,  1825,   205,
      85,   298,   133,   300,   121,   122,  1484,   121,   122,   125,
       0,    96,  1266,   129,   128,     3,   841,   809,   103,   104,
     124,   988,  1071,   943,   128,   945,  1813,   132,   131,   949,
      11,   135,   952,  1168,     7,     8,     9,   957,     3,   811,
     960,  1083,   962,   963,     3,   837,   988,  1182,  1183,  1184,
    1185,   130,   972,   973,   974,   128,  1083,   807,   808,   132,
     124,   981,   982,    28,  1786,  1694,   986,   839,   988,   989,
      70,    71,   799,   800,   994,   995,   996,   997,  1569,    67,
    1723,    46,   121,   122,   125,   835,   836,   810,  1660,   128,
     812,  1485,  1557,    80,   813,    85,   121,   122,  1065,   124,
     124,   129,   829,   830,  1024,     3,    96,   135,  1926,   712,
      75,    76,  1266,   103,   104,   838,    75,    76,   840,   125,
     124,    80,   841,  1065,   111,   112,   124,  1450,    87,  1989,
     130,   135,   338,   121,   122,  1055,  1056,   139,   435,  1059,
    1060,  1084,   123,  1063,  1064,  1065,   133,  1067,   129,   446,
    1070,  1071,   111,   112,   124,   123,    14,    15,  1557,   132,
    1080,   129,  1082,  1083,  1084,   135,   130,  1490,  1088,   904,
    1493,  1091,   131,    78,  1094,    46,    47,  1097,  2005,   360,
    1100,   797,   798,  1103,  1226,   122,  1106,   128,  1108,  1071,
     128,   397,   133,   399,   131,     3,   133,   124,  1080,  1226,
    1082,   498,  1122,   288,    75,    76,   124,  1127,   943,    80,
    1130,   827,   828,   298,   955,   300,    87,   807,   808,  1139,
      28,  1141,   957,   121,   122,  2001,   124,  2003,   963,    37,
    1150,   125,   125,   125,  1201,   129,   129,   129,   228,   133,
     111,   112,    80,  1163,   985,   835,   836,   124,  1168,  1169,
     431,     1,   131,   124,   133,   123,  2083,   124,  1159,  1201,
     788,   129,  1182,  1183,  1184,  1185,     3,    75,    76,   138,
     139,  1214,    80,   111,   112,     3,  1767,  1070,   124,    87,
    1200,  1201,  1202,   123,  1204,  1928,   123,   815,   124,   129,
     128,   121,   129,  1887,  1214,   823,  1216,  2124,   288,   124,
      28,  1221,   121,   111,   112,  1225,  1226,   124,   298,    37,
     300,   141,   142,   121,  1127,   843,   124,  1130,     1,  1891,
       3,    95,   141,   142,  1244,    75,    76,   135,   125,   124,
      80,  1251,   129,   797,   798,  1070,   542,    87,    75,    76,
    1260,  1740,  1833,    80,   131,   335,  1745,    75,    76,  1748,
      87,   436,    80,   125,   131,  1168,   133,   129,   360,    87,
    1825,   111,   112,   827,   828,   131,  1267,   133,   131,  1182,
    1183,  1184,  1185,   579,   111,   112,   123,   127,   128,   129,
      70,    71,   129,   111,   112,   310,  1127,   124,   122,  1130,
     143,  1608,  1609,   125,   319,   129,   124,   129,  1139,     3,
     325,   135,    92,  1620,   123,   611,    96,   135,    98,   144,
     129,   476,   477,   123,   711,  1814,   123,   191,   192,   129,
      75,    76,   129,     3,    28,    80,  1825,  1168,   123,   431,
      80,   127,    87,   129,   129,   641,   137,   502,   503,   429,
     130,  1182,  1183,  1184,  1185,  2039,    16,  2041,    28,   799,
     800,  1774,  1775,   127,   125,   129,   111,   112,   129,   524,
     525,   111,   112,   125,   529,   530,    46,   129,   533,   534,
     125,    75,    76,  1608,  1609,   143,    80,   127,    80,   829,
     830,   131,   125,    87,   125,  1620,   129,     6,   129,     8,
       9,   481,   133,  1413,  1414,    75,    76,  1417,  1418,   123,
      10,    11,  1422,  1423,   278,   129,   280,   111,   112,   111,
     112,  2105,   125,  2107,  1434,  2109,   129,  1418,  1438,  1439,
    1569,   137,  1442,   123,   125,   299,   128,   131,  1448,   129,
    1450,   521,   738,  1453,   125,   123,   742,  1457,   129,   144,
    2005,   129,  1462,  1463,  1464,   125,   157,    16,  2120,   129,
     161,   123,   758,  2147,  2148,    74,  2150,   129,   125,   765,
     125,     3,   768,   131,   129,  1485,    85,  1487,   133,     1,
    1490,     3,  2166,  1493,   131,   127,  1496,   129,    75,    76,
     125,   125,   788,    80,   129,  1505,    28,   125,   133,  2183,
      87,   110,  1512,  1513,   891,    37,   124,  1517,  1518,  1519,
    1520,   120,   131,   122,   133,   902,  2005,   131,   131,   815,
     133,     1,   127,     3,   111,   112,   135,   823,  2083,   138,
     139,   140,   803,   804,   129,   806,   711,    75,    76,    14,
      15,     1,    80,    75,    76,   923,   924,   843,    80,    87,
       1,     3,     3,   127,  1861,    87,  1566,  1567,     3,  1569,
     831,   832,   833,   834,   923,   924,    11,  1577,   122,     1,
    1702,     3,   122,   111,   112,     1,    28,     3,  1588,   111,
     112,  1464,   127,   122,   129,  1702,   127,   451,   129,   121,
     454,   131,   124,   131,  2083,   557,   558,  1569,  1608,  1609,
     131,   133,   133,   874,   875,  1577,   678,   679,  1618,     3,
    1620,  1621,   678,   679,  1624,    75,    76,    11,  1628,   131,
      80,   133,  1632,    75,    76,  1635,   129,    87,    80,   136,
    1531,   711,  1533,   103,   104,    87,  1861,   717,   136,  1464,
    1631,  1531,   136,  1533,   852,   853,   942,   131,   944,   131,
    1660,   111,   112,   129,   734,  1273,  1647,  1667,   135,   111,
     112,   129,  1487,   743,   129,   129,   746,   127,   128,   129,
     131,   130,  1776,   127,   124,   755,   121,   122,   123,   131,
     133,   124,   124,   128,   129,   549,   131,   983,   552,   127,
    1700,   127,  1702,   124,  1833,  1705,   124,   712,   127,   136,
     127,   131,   127,   974,   127,  1608,  1609,   122,   125,   130,
     130,   803,   804,  1723,   806,  1725,  1726,  1620,   136,  1729,
    1016,   135,  1018,  2030,   136,  2032,   136,   121,   122,   123,
     136,   136,   131,    75,    76,   129,   122,   131,    80,   831,
     832,   833,   834,   131,   127,    87,   122,  1804,   129,  1806,
     130,  1761,   130,   125,   125,    58,   125,   136,   125,   136,
    1770,   136,   124,  1588,  1774,  1775,   125,  1777,   848,   111,
     112,   125,  1804,  1830,  1806,  1832,   133,  1608,  1609,  1789,
    2124,   133,   874,   875,   133,   124,   128,  1618,  1084,  1620,
    1621,   124,  2099,  1624,  1804,   124,  1806,   127,  1830,  1809,
    1832,  1632,   127,   883,  1635,  2030,   127,  2032,   124,   122,
     122,     1,   892,   127,   678,   679,   680,   681,   125,   899,
    1830,     0,  1832,  1833,   904,   125,   906,     7,  1124,   122,
      10,    11,    12,    13,    14,    15,    16,    17,   124,  1135,
     124,   135,   706,   707,   708,  1855,  1856,  1857,  1858,   122,
     125,  1861,    75,    76,   125,  1865,  1866,    80,  1868,   125,
    1870,  1833,   129,   135,    87,  1161,  1162,   129,   125,   129,
     125,   130,  1882,   125,  2099,   133,     3,   957,   125,   133,
    2124,  1891,   974,   133,  1894,    75,    76,   133,   111,   112,
      80,   125,   127,   973,  1885,   128,  1887,    87,     3,   130,
     125,    28,   125,   125,  1059,  1060,    85,   125,  1063,  1064,
     136,   125,   136,   133,   133,   136,  1926,    96,  1928,    46,
      58,   111,   112,    28,   103,   104,   537,   538,   539,   540,
     541,  1227,    37,   124,   124,   125,   125,   124,   124,   129,
     133,  1998,   122,   123,   125,   133,   557,   558,    75,    76,
     133,   133,   132,  1249,  1225,   125,   125,   125,  1861,   125,
     125,   141,   142,   143,   144,   145,  1998,   122,    75,    76,
      75,    76,   136,    80,  1270,    80,   136,  1273,   135,   135,
      87,  1277,    87,   136,   136,  1281,  1996,  1997,  1998,  1999,
    2000,  2001,   127,  2003,    11,   131,   128,   131,   125,   127,
    2010,  2011,  2012,  2013,   111,   112,   111,   112,   133,  2113,
    2114,  2021,   133,   397,   121,   399,   121,   124,   128,   124,
    2030,   124,  2032,  2033,  1855,  1856,  1857,  1858,   135,   128,
    1861,   127,  2042,  2043,  1865,  1866,   131,  1868,   125,  1870,
     125,   125,   136,   136,   136,   136,   136,   136,  2039,   228,
    2041,  1882,   125,  1746,  1747,   136,  1749,  1750,   136,   125,
     125,  1754,  1755,  1756,  1757,   125,    46,    47,   125,  2079,
    2080,    66,    66,   127,   125,   136,  2086,  2087,   136,   125,
    2090,     0,  2092,   136,   136,  2095,   127,   127,   136,  2099,
     127,   127,   131,   125,   127,    75,    76,   429,   127,   127,
      80,   127,   127,   127,  2114,   127,  2116,    87,   127,   288,
    2120,   125,   127,  2104,  2105,   127,  2107,  2155,  2109,   298,
     488,   300,  2132,   488,    43,   488,  1520,  2030,   488,  2032,
     488,   111,   112,  1225,   994,   874,   298,   298,   820,   929,
     986,  1221,    61,  1007,   124,  2155,  2156,  2138,  1485,    68,
    2160,   446,    46,    47,   737,   436,  2147,  2148,  1814,  2150,
     507,   324,  2172,   275,  2104,   103,    85,  1438,    96,    88,
      96,  1442,   542,   104,   280,  2166,    95,    96,    96,  1761,
      -1,    75,    76,    -1,   103,   104,    80,    -1,  1484,   521,
    2021,    -1,  2183,    87,    -1,   579,  2099,   116,  1494,  2030,
     119,  2032,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,
      -1,    -1,   131,    -1,  1510,    -1,    -1,   111,   112,    -1,
     139,    -1,     3,    -1,    -1,   144,   145,   121,   147,    -1,
    1526,    -1,    -1,    -1,  1505,  1531,    -1,  1533,   157,    -1,
     159,   160,   161,   162,    -1,   164,   578,    28,    -1,    -1,
     429,    -1,    -1,  1524,  1550,  2086,  2087,   641,    -1,  2090,
      -1,  2092,    -1,  1127,  2095,     1,  1130,    -1,  2099,    -1,
      -1,    -1,   191,   192,    -1,    -1,   145,  1895,  1896,  1897,
    1898,  1899,  1900,  1901,  1902,    -1,   205,    -1,   157,    -1,
      -1,    -1,   161,    -1,    75,    76,  1989,    -1,    -1,    80,
     219,  2132,   481,    -1,  1168,    -1,    87,  1603,    -1,   228,
      -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,  1182,  1183,
    1184,  1185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2160,
     111,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,  1205,   521,  1207,    80,    -1,  1438,    -1,    -1,     3,
    1442,    87,    -1,    -1,    -1,   725,   275,  1512,  1513,   278,
     279,   280,    -1,    -1,    -1,     1,    -1,     3,    -1,   288,
      -1,  1989,    -1,    -1,    28,   111,   112,    -1,    -1,   298,
     299,   300,    -1,    37,    -1,    -1,    -1,    -1,   758,    -1,
      -1,   127,    28,   129,    -1,   765,    -1,    -1,   768,   318,
      -1,    37,    38,    39,    40,   324,   275,  1487,  1704,    -1,
    1706,  1566,  1567,  1505,   188,    -1,   335,    -1,    -1,  1715,
      -1,    75,    76,   755,  1720,  1721,    80,    -1,    -1,  1700,
      -1,  1727,  1524,    87,  1705,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    75,    76,   318,
      -1,    87,    80,    -1,    -1,   324,    -1,   111,   112,    87,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   121,    -1,    -1,
     124,   125,    -1,   392,    -1,   111,   112,    -1,   397,    -1,
     399,    -1,    -1,   111,   112,   121,    -1,    -1,   124,    28,
    1786,   127,    -1,   129,   130,    -1,    -1,   125,    37,  1770,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1588,    -1,
     429,    -1,   431,   432,   288,    -1,   435,   436,    75,    76,
      -1,    -1,   441,    80,   298,    -1,   445,   446,    -1,   448,
      87,     0,   711,    -1,    -1,    -1,    75,    76,   717,    -1,
      -1,    80,  1813,    -1,   876,    -1,    -1,    -1,    87,    -1,
      -1,   883,    -1,    -1,   111,   112,    -1,   476,   477,   891,
     944,    -1,   481,   482,   743,    -1,   435,   746,   125,   488,
     902,    -1,   111,   112,   493,    -1,    -1,   446,    -1,   498,
      -1,    -1,    -1,   502,   503,   124,    -1,    -1,   278,   279,
      -1,    -1,    -1,    -1,    -1,    -1,  1892,  1893,    -1,   983,
      -1,    -1,   521,    -1,    -1,   524,   525,    -1,  1700,    -1,
     529,   530,    -1,  1705,   533,   534,    85,    -1,    -1,    -1,
      -1,    -1,    -1,   542,    -1,    -1,    -1,    96,    -1,   498,
     549,  1927,    -1,   552,   103,   104,    -1,    -1,    -1,    -1,
    1936,    -1,    -1,  1723,    -1,   319,  1016,  1017,  1018,   568,
      -1,   325,    -1,    -1,   573,  1926,   575,    -1,    -1,   578,
     579,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   848,
      -1,    -1,    -1,    -1,    -1,    -1,   145,  1541,  1770,   598,
      -1,    -1,   601,    -1,   603,    -1,   605,    -1,   157,    -1,
      -1,    -1,   161,   612,    -1,    -1,    -1,  1993,  1994,    -1,
    1084,    -1,    -1,    -1,   883,    -1,    -1,   481,    -1,    -1,
      -1,    -1,    -1,   892,    -1,    -1,    -1,    -1,    -1,    -1,
     899,  1813,    -1,   397,    -1,   399,    -1,   906,    -1,  1809,
      -1,  1746,  1747,    -1,  1749,  1750,    -1,    -1,  1070,  1754,
    1755,  1756,  1757,    -1,  1608,  1609,    -1,    -1,    -1,    -1,
      -1,  1135,    -1,    -1,  1124,    -1,  1620,    -1,    -1,   678,
     679,   680,   681,    75,    76,    -1,    -1,    -1,    80,   543,
      -1,    -1,   546,    -1,    -1,    87,    -1,    -1,   957,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   706,   707,   708,
      -1,    -1,   711,    -1,   973,    -1,    -1,    -1,   717,   111,
     112,    -1,    -1,    -1,    -1,    -1,   725,    -1,    -1,   121,
    2106,    -1,   124,   732,   733,   734,    -1,   736,   737,   288,
      -1,    -1,    -1,    -1,   743,    -1,    -1,   746,  2124,   298,
      -1,   300,    -1,    -1,  1926,    -1,   755,    -1,    -1,   758,
      -1,  1996,  1997,  1227,  1999,  2000,   765,    -1,  1928,   768,
      -1,    -1,    -1,    -1,    -1,  2010,  2011,  2012,  2013,   549,
      -1,    -1,   552,   732,   733,  1249,    -1,   736,   737,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,  2175,
    1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,    -1,  1221,
      -1,    -1,  1224,    -1,    -1,    -1,    -1,    -1,    -1,  1269,
    1270,    -1,    -1,    -1,    -1,   579,  1276,  1277,    -1,    -1,
    1280,  1281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2079,  2080,    -1,    -1,    -1,   848,
      -1,   705,   851,   852,   853,    -1,    -1,   711,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   874,   875,   876,    -1,    -1,
      -1,    -1,    -1,    -1,   883,    -1,   435,   641,    -1,    -1,
      -1,    -1,   891,   892,  1989,    -1,    -1,   446,    -1,   128,
     899,    -1,    -1,   902,    -1,   904,    -1,   906,   678,   679,
     680,   681,    -1,    -1,    -1,    -1,    -1,  1861,    -1,    -1,
      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   708,   476,
     477,    -1,   891,    -1,    -1,    -1,    -1,    -1,    -1,   498,
     949,    -1,    -1,   902,    -1,  1214,    -1,    -1,   957,    -1,
      -1,    -1,  1221,    -1,    -1,   502,   503,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   973,   974,    -1,    -1,    -1,    -1,
      -1,    -1,   981,   982,    -1,    -1,    -1,   524,   525,   988,
      -1,    -1,   529,   530,    -1,   994,   533,   534,    -1,    -1,
      -1,    -1,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    -1,    -1,    -1,    -1,  1016,  1017,  1018,
      -1,    -1,    -1,  1435,    -1,  1024,    -1,    -1,    -1,    -1,
    1494,    37,    -1,    -1,  1484,    -1,    -1,    -1,   892,    -1,
      46,    47,    -1,    -1,    -1,    -1,  1510,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,
    1059,  1060,    -1,    -1,  1063,  1064,  1065,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,  1024,    -1,    -1,    -1,    -1,
      -1,    87,    -1,    -1,  1083,  1084,  2030,    -1,  2032,  1088,
      -1,    -1,    -1,    -1,    -1,  1094,    -1,    -1,   952,    -1,
      -1,  1100,    -1,    -1,    -1,   111,   112,  1106,    -1,    -1,
      -1,   188,    -1,    -1,    -1,   121,    -1,   122,   123,   973,
      -1,    -1,    -1,    -1,    -1,  1124,    -1,   132,  1127,    -1,
      -1,  1130,   137,   138,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       0,   228,  1602,  1603,    -1,  2099,    -1,    -1,    -1,    -1,
      -1,    -1,   711,    -1,    -1,    -1,    -1,    -1,    -1,  1168,
    1024,    -1,    -1,    -1,    -1,    -1,  1588,    -1,    -1,    -1,
      -1,    -1,    -1,  1182,  1183,  1184,  1185,    -1,    -1,    -1,
     944,    -1,   549,    -1,    -1,   552,    -1,    -1,    -1,    -1,
      -1,  1200,  1201,    -1,    54,    -1,  1205,    -1,  1207,    -1,
      -1,    -1,    -1,    -1,    -1,  1214,    -1,    -1,    -1,    -1,
      -1,   298,  1221,    -1,    -1,  1224,  1225,  1226,  1487,   983,
      -1,    -1,    -1,    -1,    84,    85,    86,    -1,    -1,    -1,
    1704,    -1,  1706,    -1,    94,  1244,    96,    -1,    -1,    -1,
      -1,    -1,  1251,   103,   104,    -1,  1720,  1721,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1269,  1270,    -1,    -1,    -1,  1224,    -1,  1276,  1277,    -1,
      -1,  1280,  1281,    -1,   134,   135,   136,   137,   138,    -1,
      -1,    -1,    -1,    -1,   144,  1244,    -1,   147,    -1,    -1,
      -1,    -1,  1251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     160,    -1,   162,    -1,   164,    -1,    -1,    -1,    -1,    -1,
      -1,   678,   679,   680,   681,    -1,    -1,    -1,   405,  1588,
    1084,    -1,    -1,     3,   411,  1785,  1786,    -1,   188,   189,
     190,    -1,   891,    -1,    -1,    -1,    -1,    -1,  1202,    -1,
    1204,   708,    -1,   902,    -1,    -1,    -1,  1127,    28,    -1,
    1130,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,
      40,    -1,    -1,    -1,    -1,    -1,    -1,   227,   228,    -1,
      -1,  1135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1809,  1168,    -1,
      -1,    -1,    -1,    -1,   481,    75,    76,    -1,    -1,    -1,
      80,    -1,  1182,  1183,  1184,  1185,    -1,    87,    -1,    -1,
      -1,    -1,    -1,  1422,  1423,   275,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,  1205,    -1,  1207,   288,  1438,
      -1,   111,   112,  1442,    -1,    -1,    -1,    -1,   298,    -1,
     300,   121,    -1,    -1,   124,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,  1927,    -1,    -1,   543,    -1,    -1,   546,
      -1,    -1,  1936,  1227,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   559,    -1,    -1,  1484,    -1,    -1,  1487,    -1,
      -1,    -1,    -1,    -1,    -1,  1249,    67,     0,    -1,    -1,
      -1,    72,    73,   580,    -1,    -1,  1505,    -1,    -1,    -1,
      -1,    -1,    -1,  1512,  1513,    86,   593,    -1,  1517,  1518,
    1519,  1520,  1059,  1060,    -1,    -1,  1063,  1064,    99,  1993,
    1994,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
    1809,    -1,    -1,   124,    -1,   405,   406,   407,    -1,    -1,
      -1,    -1,    -1,   134,   135,    -1,    -1,  1566,  1567,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   429,
      -1,    -1,    85,    -1,    -1,    -1,   436,    -1,    -1,  1588,
      -1,    -1,    -1,    96,    -1,    -1,  1450,   447,    -1,    -1,
     103,   104,    -1,  1602,  1603,    -1,    -1,    -1,    -1,  1608,
    1609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
      -1,    -1,  1621,    -1,    -1,  1624,   476,   477,   705,    -1,
      -1,   481,    -1,  1632,   711,   485,  1490,    -1,   488,  1493,
      -1,    -1,   145,   139,    -1,    -1,    -1,   497,    -1,    -1,
      -1,    -1,   502,   503,   157,    -1,    -1,    -1,   161,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1667,    -1,
      -1,   521,    -1,    -1,   524,   525,    -1,    -1,    -1,   529,
     530,    -1,    -1,   533,   534,    -1,    -1,   537,   538,   539,
     540,   541,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1700,    -1,  1702,    -1,    -1,  1705,   557,   558,   205,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   573,  1723,   575,    -1,    -1,   578,    -1,
     580,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1494,    -1,    -1,    -1,    -1,   595,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1510,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1127,  1770,    -1,  1130,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,  1785,  1786,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   298,    -1,   300,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1804,    -1,  1806,    -1,    -1,
    1809,  1168,    -1,    -1,   310,   892,    -1,    -1,   314,   315,
     316,    -1,   899,   319,    -1,  1182,  1183,  1184,  1185,   325,
      -1,  1830,    -1,  1832,    -1,   331,    -1,    -1,  1608,  1609,
      -1,    -1,   338,    -1,    -1,    -1,    -1,    -1,  1205,    -1,
    1207,  1621,    -1,    -1,  1624,   705,    -1,    -1,    -1,   355,
      -1,   711,  1632,    -1,   360,    -1,  1865,  1866,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   952,    -1,    -1,    -1,    -1,
     957,    -1,   732,    -1,    -1,    -1,   736,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   973,    -1,    -1,    -1,
      -1,   397,    -1,   399,    -1,   755,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1774,  1775,    -1,    -1,    -1,    -1,    -1,  1926,    -1,  1928,
      -1,    -1,   435,    -1,    -1,   431,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   446,    -1,    -1,    -1,  1024,    -1,    -1,
    1704,    -1,  1706,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1720,  1721,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1512,  1513,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1071,   498,    -1,  1996,  1997,  1998,
    1999,  2000,  2001,  1080,  2003,  1082,    -1,    -1,    -1,    -1,
      -1,  2010,  2011,  2012,  2013,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   876,    -1,    -1,  1566,
    1567,    -1,    -1,   883,    -1,    -1,    -1,    -1,    -1,    -1,
     890,   891,   892,    -1,    -1,    -1,   542,    -1,    -1,   899,
      -1,    -1,   902,   144,   904,    -1,   147,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,   160,
      -1,   162,    -1,   164,    -1,    -1,    -1,    -1,    -1,    -1,
    2079,  2080,    -1,   579,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   943,    -1,  1865,  1866,    -1,    -1,    -1,
      -1,    -1,   952,    -1,    -1,    -1,    -1,   957,    -1,    -1,
      -1,    -1,    -1,   963,    -1,   611,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   973,    67,  1202,    -1,  1204,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,   988,    -1,
      -1,    -1,    85,    86,    -1,   641,    -1,    -1,   998,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,  1927,  1024,    -1,   119,   120,   121,    -1,
      -1,   124,  1936,   126,    -1,    -1,   129,   130,   131,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   711,  1059,
    1060,    -1,    -1,  1063,  1064,  1065,   712,    -1,    -1,    -1,
    1070,  1071,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1081,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1993,
    1994,    -1,   738,    -1,    -1,    -1,   742,    -1,    -1,    -1,
      -1,  1608,  1609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   758,    -1,  1621,    -1,    -1,  1624,    -1,   765,
      -1,    -1,   768,    -1,    -1,  1632,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   788,    -1,    -1,    -1,    -1,    -1,   794,   795,
     796,   797,   798,   799,   800,    -1,    -1,   803,   804,    -1,
     806,   807,   808,   809,   810,   811,   812,   813,    -1,   815,
      -1,     1,    -1,     3,    -1,    -1,    -1,   823,   824,   825,
     826,   827,   828,   829,   830,   831,   832,   833,   834,   835,
     836,   837,   838,   839,   840,   841,    -1,   843,    28,    -1,
    1200,  1201,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,
      40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,
      -1,  1221,    -1,  1450,  1224,    -1,  1226,    -1,   874,   875,
    1457,    -1,    -1,    -1,    -1,   476,   477,    -1,   891,    -1,
      -1,    -1,   139,    -1,  1244,    75,    76,   488,    -1,   902,
      80,  1251,    -1,    -1,    -1,    -1,    -1,    87,  1485,    -1,
    1487,   502,   503,  1490,    -1,    -1,  1493,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   524,   525,    -1,    -1,    -1,   529,   530,
      -1,   121,   533,   534,   124,    -1,   942,   127,   944,   129,
     130,    -1,    -1,   355,    -1,    -1,    -1,    -1,   205,  1996,
    1997,    -1,  1999,  2000,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2010,  2011,  2012,  2013,    -1,   974,    -1,
      -1,    -1,   573,    -1,   575,    -1,    -1,   983,    -1,    -1,
      -1,    -1,  1569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1577,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1865,  1866,
      -1,  1588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1016,    -1,  1018,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2079,  2080,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   310,    -1,    -1,    -1,   314,   315,   316,
      -1,    -1,   319,    -1,    -1,    -1,    -1,    -1,   325,    -1,
      -1,    -1,    -1,    -1,   331,  1435,    -1,    -1,  1084,    -1,
      -1,   338,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1450,    -1,    -1,    -1,    -1,    -1,    -1,  1457,   355,    -1,
      -1,    -1,    -1,   360,  1464,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1124,    -1,
      -1,    -1,    -1,    -1,    -1,  1485,    -1,  1487,    -1,  1135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     397,    -1,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1512,  1513,    -1,  1161,  1162,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,    -1,    -1,   431,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1774,  1775,    -1,
    1777,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1566,  1567,     1,  1569,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,  1225,
      -1,  1227,    -1,    -1,    -1,    -1,    -1,    -1,  1588,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,   651,
      -1,    -1,    -1,  1249,    37,    -1,  1833,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1266,    -1,    -1,    -1,  1270,    -1,    -1,  1273,    -1,    -1,
      -1,  1277,    -1,    -1,    67,  1281,    -1,    -1,    -1,    72,
      73,    74,    75,    76,    -1,   542,    -1,    80,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   579,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,  1694,    -1,   280,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,    -1,    -1,    -1,   611,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   774,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   641,    -1,    -1,   988,    -1,    -1,
      -1,    -1,    -1,    -1,   338,   807,   808,   809,   810,   811,
      -1,    -1,   814,    -1,    -1,    -1,    -1,    -1,   820,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   835,   836,   837,   838,   839,    -1,    -1,
     842,    -1,  1438,    -1,    -1,    -1,  1442,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1804,    -1,  1806,    -1,    -1,  1809,
      -1,    -1,    -1,    -1,    -1,   712,    -1,    -1,  1059,  1060,
      -1,    -1,  1063,  1064,  1065,    -1,    -1,    -1,    -1,    -1,
    1830,    -1,  1832,    -1,    -1,    -1,    -1,    -1,  1484,    -1,
      -1,   738,  1842,    -1,    -1,   742,    -1,    -1,  1494,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1505,
      -1,   758,    -1,    -1,  1510,    -1,    -1,    -1,   765,    -1,
      -1,   768,    -1,    -1,    -1,    -1,    -1,    -1,  1524,    -1,
    1526,    -1,    -1,    -1,    -1,  1531,    -1,  1533,    -1,    -1,
      -1,   788,    -1,    -1,    -1,    -1,    -1,   794,   795,   796,
     797,   798,   799,   800,  1550,    -1,   803,   804,    -1,   806,
     807,   808,   809,   810,   811,   812,   813,    -1,   815,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   823,   824,   825,   826,
     827,   828,   829,   830,   831,   832,   833,   834,   835,   836,
     837,   838,   839,   840,   841,    -1,   843,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1603,    -1,  1200,
    1201,    -1,    -1,    -1,   548,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   874,   875,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1996,  1997,  1998,  1999,
    2000,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2010,  2011,  2012,  2013,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   338,    -1,    -1,    -1,    -1,   611,    -1,    -1,
      -1,    -1,    -1,   144,    -1,    -1,   147,    -1,    -1,   355,
      -1,    -1,    -1,    -1,    -1,   942,    -1,   944,    -1,   160,
      -1,   162,    -1,   164,  1700,    -1,    -1,    -1,  1704,  1705,
    1706,    -1,   646,    -1,    -1,    -1,    -1,    -1,    -1,  1715,
      -1,    -1,    -1,    -1,  1720,  1721,    -1,   974,    -1,  2079,
    2080,  1727,    -1,    -1,    -1,    -1,   983,    -1,    -1,    -1,
    1142,    -1,    -1,    -1,   678,   679,   680,   681,    -1,    -1,
    1746,  1747,    -1,  1749,  1750,    -1,    -1,    -1,  1754,  1755,
    1756,  1757,    -1,    -1,    -1,    -1,    -1,    -1,  1170,  1016,
      -1,  1018,    -1,    -1,  1770,  1177,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1786,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   738,    -1,    -1,    -1,   742,  1211,
      -1,  1213,    -1,    -1,    -1,    -1,    -1,  1813,    -1,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1084,    -1,    -1,
     774,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   788,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1124,    -1,    -1,
      -1,   815,    -1,    -1,    -1,    -1,   820,    -1,  1135,   823,
      -1,    -1,    -1,    -1,    -1,    -1,  1892,  1893,    -1,  1895,
    1896,  1897,  1898,  1899,  1900,  1901,  1902,    -1,    -1,   843,
      -1,    -1,    -1,    -1,  1161,  1162,    -1,    -1,    -1,    -1,
      -1,  1512,  1513,    -1,    -1,    -1,    -1,    -1,    -1,   144,
    1926,  1927,   147,    -1,    -1,    -1,   144,    -1,    -1,   147,
    1936,    -1,    -1,    -1,    -1,   160,    -1,   162,    -1,   164,
      -1,    -1,   160,    -1,   162,    -1,   164,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1566,  1567,    -1,  1225,    -1,
    1227,    -1,    -1,    -1,    -1,   651,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1989,    -1,    -1,    -1,  1993,  1994,    -1,
      -1,    -1,  1249,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   476,   477,    -1,    -1,  1266,
      -1,    -1,    -1,  1270,    -1,    -1,  1273,    -1,    -1,    -1,
    1277,    -1,    -1,    -1,  1281,    -1,    -1,    -1,    -1,    -1,
      -1,   502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,    -1,    -1,    -1,   529,   530,
      -1,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1034,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   774,    -1,
    2106,    -1,   573,    -1,   575,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   788,    -1,    -1,    -1,    -1,    -1,  2124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   807,   808,   809,   810,   811,    -1,    -1,   814,   815,
      -1,    -1,    -1,    -1,   820,    -1,    -1,   823,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   835,
     836,   837,   838,   839,    -1,    -1,   842,   843,    -1,  2175,
      -1,    -1,    -1,    -1,    -1,   646,    -1,    -1,    -1,    -1,
      -1,  1438,    -1,  1127,    -1,  1442,  1130,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1804,    -1,  1806,    -1,   678,   679,   680,
     681,    -1,    -1,    -1,    -1,    -1,    -1,  1161,  1162,    -1,
      -1,    -1,    -1,    -1,  1168,    -1,  1170,  1484,    -1,  1830,
    1174,  1832,    -1,  1177,    -1,  1179,    -1,  1494,  1182,  1183,
    1184,  1185,    -1,    -1,    -1,    -1,    -1,    -1,  1505,    -1,
      -1,   476,   477,  1510,    -1,    -1,    -1,    -1,   476,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1524,    -1,  1526,
     488,    -1,    -1,    -1,  1531,    -1,  1533,   502,   503,    -1,
      -1,    -1,    -1,    -1,   502,   503,    -1,   758,    -1,    -1,
      -1,    -1,    -1,  1550,   765,    -1,    -1,   768,    -1,   524,
     525,    -1,    -1,    -1,   529,   530,   524,   525,   533,   534,
      -1,   529,   530,    -1,    -1,   533,   534,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1740,  1273,
      -1,    -1,    -1,  1745,  1746,  1747,  1748,  1749,  1750,    -1,
      -1,    -1,  1754,  1755,  1756,  1757,  1603,    -1,   573,    -1,
     575,    -1,    -1,    -1,    -1,   573,    -1,   575,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1996,  1997,  1998,  1999,  2000,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2010,
    2011,  2012,  2013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1700,    -1,    -1,    -1,  1704,  1705,  1706,
      -1,    -1,   923,   924,    -1,    -1,    -1,    -1,  1715,    -1,
      -1,    -1,    -1,  1720,  1721,    -1,  1142,    -1,    -1,    -1,
    1727,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2079,  2080,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1746,
    1747,    -1,  1749,  1750,  1170,    -1,    -1,  1754,  1755,  1756,
    1757,  1177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1770,    -1,    -1,    -1,   988,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1786,
      -1,    -1,    -1,    -1,    -1,  1211,    -1,  1213,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1016,    -1,  1018,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1813,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1526,    -1,    -1,    -1,    -1,    -1,  1059,  1060,
      -1,    -1,  1063,  1064,  1065,    -1,    -1,  1273,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1557,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1892,  1893,    -1,  1895,  1896,
    1897,  1898,  1899,  1900,  1901,  1902,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1124,    -1,    -1,  1127,    -1,    -1,  1130,
      -1,    -1,    -1,    -1,  1608,  1609,    -1,    -1,  1139,  1926,
    1927,    -1,    -1,    -1,  1618,    -1,  1620,  1621,    -1,  1936,
    1624,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1632,    -1,
      -1,  1635,    -1,    -1,    -1,    -1,    -1,  1168,   923,   924,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,  1182,  1183,  1184,  1185,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1200,
    1201,    -1,  1989,    -1,    28,    -1,  1993,  1994,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,   988,    -1,    -1,    -1,    -1,    -1,    -1,
     988,  1715,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,  1727,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,  1740,    -1,    -1,  1270,
      -1,  1745,    -1,    -1,  1748,    -1,  1277,   101,    -1,    -1,
    1281,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1059,  1060,    -1,    -1,  1063,  1064,
    1065,  1059,  1060,    -1,    -1,  1063,  1064,  1065,    -1,  2106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2124,    -1,    -1,
    1814,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1825,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,  1855,  1856,  1857,  1858,    -1,    -1,  1861,  2175,    -1,
      -1,  1865,  1866,    28,  1868,    -1,  1870,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1882,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1892,  1893,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    88,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,  1200,  1201,    -1,    -1,    -1,
      85,    86,  1200,  1201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,   131,
      -1,    -1,    -1,  1484,   119,   120,   121,   139,    -1,   124,
     125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,   136,   137,   138,   139,   140,    -1,   159,    -1,    -1,
      -1,  1512,  1513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1531,  2005,  1533,    -1,  1740,    -1,    -1,    -1,    -1,  1745,
    1746,  1747,  1748,  1749,  1750,    -1,    -1,  2021,  1754,  1755,
    1756,  1757,    -1,    -1,    -1,    -1,  2030,    -1,  2032,    -1,
      -1,    -1,    -1,    -1,    -1,  1566,  1567,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1603,    -1,    -1,    -1,    -1,  1608,  1609,  2083,
      -1,    -1,  2086,  2087,    -1,    -1,  2090,  1618,  2092,  1620,
    1621,  2095,    -1,  1624,    -1,  2099,    -1,    -1,    -1,    -1,
       0,  1632,  2106,    -1,  1635,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2132,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,  2160,    -1,    -1,  1895,
    1896,  1897,  1898,  1899,  1900,  1901,  1902,    -1,    -1,    -1,
      -1,  2175,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    -1,
      -1,    -1,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,    -1,    -1,    -1,    -1,  1512,  1513,    -1,
      -1,    -1,    -1,    -1,  1512,  1513,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,   431,
     432,    -1,    -1,    -1,   436,  1786,    -1,   157,    -1,    -1,
      -1,   161,    -1,   445,    -1,    -1,   448,    -1,    -1,    -1,
      -1,    -1,    -1,  1804,    -1,  1806,    -1,    -1,    -1,    -1,
      -1,  1566,  1567,    -1,    -1,    -1,    -1,    -1,  1566,  1567,
      -1,   191,   192,    -1,    -1,    -1,    -1,    -1,    -1,  1830,
     482,  1832,    -1,    -1,    -1,    -1,   488,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1855,  1856,  1857,  1858,   228,    -1,
    1861,    -1,    -1,    -1,  1865,  1866,    -1,  1868,    -1,  1870,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1882,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,   279,
     280,    -1,    -1,    -1,    -1,    -1,   568,    -1,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,   298,   299,
     300,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,   318,   601,
      -1,   603,    -1,   605,   324,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1996,  1997,  1998,  1999,  2000,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2010,
    2011,  2012,  2013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2021,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2030,
      -1,  2032,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,  1804,
      -1,  1806,    -1,    -1,    -1,    -1,  1804,    -1,  1806,   429,
      -1,    -1,    -1,    -1,    28,   435,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1830,   446,  1832,  2079,  2080,
      -1,    -1,  1830,    -1,  1832,  2086,  2087,    -1,    -1,  2090,
      -1,  2092,    -1,    -1,  2095,    -1,    -1,    -1,  2099,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,   498,    -1,
      -1,  2132,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,   521,    -1,    -1,    -1,   119,   120,   121,    -1,  2160,
     124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,   133,
     134,   135,   542,   137,   138,   139,   140,    -1,    -1,   549,
      -1,    -1,   552,    -1,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   851,
     852,   853,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,
      -1,    -1,   874,   875,   876,    -1,    -1,    94,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1996,  1997,  1998,  1999,  2000,    -1,    -1,  1996,  1997,
    1998,  1999,  2000,    -1,    -1,  2010,  2011,  2012,  2013,    -1,
      -1,    -1,  2010,  2011,  2012,  2013,    -1,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   653,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   949,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   678,   679,
     680,   681,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,   974,    -1,  2079,  2080,    -1,    -1,    -1,   981,
     982,  2079,  2080,    -1,    -1,    -1,   706,   707,   708,    -1,
      -1,   711,   994,    -1,    -1,    -1,    -1,   717,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   725,    -1,    -1,    -1,    -1,
      -1,    -1,   732,   733,   734,    -1,   736,   737,    -1,    -1,
     237,    -1,    -1,   743,   241,    -1,   746,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   755,    -1,    -1,   758,    -1,
      -1,    -1,    -1,    -1,    -1,   765,    -1,    -1,   768,    -1,
      -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,   275,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1083,    -1,    -1,    -1,    -1,  1088,    -1,    -1,    -1,
      -1,    -1,  1094,    -1,    -1,    -1,    -1,    -1,  1100,    -1,
      -1,    -1,    -1,    -1,  1106,    -1,    -1,    -1,    53,    54,
      -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   848,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,    -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
      -1,    -1,    -1,   883,    -1,    -1,    -1,    -1,    -1,    54,
      -1,   891,   892,    -1,    -1,    -1,   121,    -1,    -1,   899,
      -1,    -1,   902,   903,   904,    -1,   906,    -1,   405,   134,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
      -1,    -1,    -1,  1225,  1226,    -1,    -1,    -1,    -1,    -1,
     447,    -1,    -1,    -1,    -1,    -1,    -1,   957,    -1,    -1,
      -1,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,    -1,    -1,   973,   335,    -1,   646,   202,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   228,    -1,    -1,    -1,    -1,    -1,    -1,
     680,   681,    -1,    -1,    -1,    -1,  1016,  1017,  1018,    -1,
      -1,    -1,    -1,   188,  1024,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     537,   538,   539,   540,   541,    -1,   543,    -1,    -1,   546,
     275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     557,   558,   559,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   237,   298,    -1,   300,   241,    -1,    -1,    -1,
      -1,   578,    -1,    -1,    -1,    -1,   447,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,   288,  1124,    -1,    -1,  1127,    -1,    -1,
    1130,    -1,    -1,   298,    -1,   300,    -1,    -1,    -1,    -1,
    1422,  1423,    -1,  1143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1438,    -1,    67,    -1,
    1442,    -1,    -1,    72,    73,    74,    -1,    -1,  1168,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,    -1,    -1,
      -1,    -1,  1182,  1183,  1184,  1185,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,   429,  1205,    -1,  1207,   705,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,
     129,  1221,   447,  1505,  1224,   134,   135,   136,   137,   138,
     139,   140,    -1,    -1,    -1,  1517,  1518,  1519,  1520,    -1,
     405,    -1,    -1,    -1,  1244,    -1,    -1,    -1,    -1,    -1,
      -1,  1251,    -1,    -1,    -1,    -1,   481,    -1,    -1,   484,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1269,
    1270,    -1,    -1,    -1,    -1,    -1,  1276,  1277,    -1,    -1,
    1280,  1281,   447,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     651,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   667,    -1,    -1,    -1,
      -1,    -1,   537,   538,   539,   540,   541,   678,   679,   680,
     681,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   557,   558,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   578,    -1,   580,   717,    -1,    -1,   720,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,    -1,
      -1,    -1,   537,   538,   539,   540,   541,    -1,   543,    -1,
      -1,   546,   743,    -1,    -1,  1667,    -1,    -1,   749,    -1,
      -1,    -1,   557,   558,   559,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   629,    -1,    -1,   904,    -1,    -1,
      -1,    -1,    -1,   578,    -1,   776,    -1,    -1,  1700,    -1,
    1702,    -1,    -1,  1705,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   943,    -1,    -1,    -1,
      -1,    -1,    -1,   814,    -1,    -1,    -1,  1127,    -1,    -1,
    1130,   822,    -1,   960,    -1,   962,   963,    -1,    -1,  1139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   704,
      -1,   842,    -1,    -1,  1484,    -1,   711,  1487,  1770,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,  1168,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,   732,    -1,    -1,
      -1,   736,  1182,  1183,  1184,  1185,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     755,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     705,    -1,    -1,   904,    -1,    -1,   711,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1070,  1071,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1588,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,  1602,  1603,    -1,    -1,    -1,    -1,  1608,  1609,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,  1621,    -1,    -1,  1624,   134,   135,    -1,   137,   138,
     139,   140,  1632,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1926,    -1,    -1,    -1,    -1,    -1,
      -1,   876,   877,    -1,    -1,    -1,    -1,    -1,   883,    95,
      -1,    -1,    -1,    -1,    -1,    -1,   891,   892,    -1,    -1,
      -1,    -1,    -1,    -1,   899,    -1,    -1,   902,   903,   904,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1202,    -1,  1204,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   943,  2001,
      -1,  2003,    -1,  1723,    -1,    -1,   951,    -1,    -1,    -1,
      -1,    -1,   957,    -1,    -1,    -1,    -1,    -1,   963,   904,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   973,    -1,
      -1,    -1,    -1,    -1,    -1,   191,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1127,    -1,    -1,  1130,
    1131,  1132,    -1,  1134,    -1,    -1,    -1,    -1,   943,    -1,
      -1,  1142,    -1,    -1,    -1,  1785,  1786,    -1,    -1,  1150,
      -1,    -1,   228,    -1,    -1,    -1,  1157,    -1,   963,  1024,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1168,    -1,  1809,
      -1,    -1,    -1,    -1,  1175,    -1,    -1,    -1,    -1,  1180,
      -1,  1182,  1183,  1184,  1185,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,
      -1,    -1,   278,   279,   280,  1070,    -1,    -1,    -1,    -1,
    1211,    -1,  1213,    -1,  1079,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   299,    -1,  1865,  1866,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   318,    -1,  1245,    -1,    -1,    -1,   324,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   335,
      -1,    -1,    -1,    -1,    -1,  1070,  1071,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1928,    -1,
    1291,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1608,  1609,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1618,    -1,
    1620,  1621,    -1,    -1,  1624,    -1,     1,    -1,     3,     4,
       5,     6,  1632,     8,     9,  1635,    -1,  1464,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1343,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   429,    -1,  1356,  1221,    -1,    -1,  1224,
      -1,  1226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1234,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1244,
      -1,    -1,    67,    -1,    -1,    -1,  1251,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1202,    -1,  1204,
      85,    86,    -1,    -1,    -1,   481,  1407,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,  1569,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,   129,   521,    -1,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,    -1,
      -1,    -1,    -1,   549,    -1,    -1,   552,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,  1855,  1856,  1857,  1858,    -1,
      -1,  1861,   101,    -1,   335,  1865,  1866,    -1,  1868,    -1,
    1870,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
    1435,    -1,  1882,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    -1,  1449,    -1,    -1,    -1,    -1,    -1,
      -1,  1456,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1464,
      -1,    -1,   678,   679,   680,   681,    -1,  1608,  1609,    -1,
      -1,    -1,    -1,  1614,    -1,  1616,    -1,    -1,  1619,  1620,
    1485,    -1,  1487,    -1,  1625,  1626,    -1,  1628,    -1,    95,
     706,   707,   708,    -1,    -1,    -1,    -1,  1638,    -1,  1640,
      -1,   717,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   725,
      -1,    -1,    -1,    -1,    -1,    -1,   732,   733,   734,  1464,
     736,   737,    -1,    -1,    -1,    -1,   447,   743,    -1,    -1,
     746,  1672,    -1,    -1,    -1,  1676,    -1,    -1,    -1,   755,
      -1,    -1,   758,    -1,    -1,    -1,    -1,    -1,    -1,   765,
      -1,    -1,   768,    -1,    -1,    -1,  1833,    -1,    -1,    -1,
      -1,    -1,    -1,  1568,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2021,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2030,    -1,  2032,  1588,    -1,   191,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   228,    -1,  1569,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   848,    -1,    -1,    -1,  2086,  2087,    -1,    -1,
    2090,    -1,  2092,    -1,    -1,  2095,    -1,    -1,    -1,  2099,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   883,    -1,   275,
      -1,    -1,   278,   279,   280,    -1,   892,    -1,    -1,    -1,
      -1,    -1,  2132,   899,    -1,    -1,    -1,    -1,   904,  1694,
     906,    -1,    -1,   299,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1843,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2160,    -1,   318,    -1,    -1,    -1,    -1,    -1,   324,    -1,
    1861,  1862,    -1,    -1,    -1,   205,    -1,    -1,  1869,   335,
     651,    -1,  1873,    -1,  1875,    -1,    -1,    -1,    -1,    -1,
      -1,   957,    -1,  1884,    -1,    -1,   667,    -1,    -1,    -1,
     671,    -1,    -1,    -1,    -1,    -1,    -1,   973,    -1,    -1,
      -1,  1766,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1788,    -1,    -1,    -1,  1928,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   717,    -1,    -1,   720,
    1016,  1017,  1018,    -1,  1809,    -1,    -1,    -1,  1024,    -1,
      -1,    -1,    -1,   734,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   743,   429,    -1,    -1,    -1,    -1,   749,   750,
     310,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   319,
      -1,    -1,    -1,    -1,    -1,   325,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   776,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,    -1,
      -1,  2022,  2023,    -1,  2025,    -1,  2027,    -1,  1833,  2030,
    2031,  2032,    -1,   814,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   822,    -1,  1908,    -1,    -1,    -1,    -1,  1124,    -1,
      -1,  1127,    -1,    -1,  1130,   521,    -1,   397,    -1,   399,
      -1,   842,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,    -1,
      -1,    -1,    -1,   549,    -1,    -1,   552,  2088,    -1,    -1,
    2091,    -1,  1168,    -1,    -1,    -1,    -1,    -1,  2099,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1182,  1183,  1184,  1185,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   904,    -1,    -1,    -1,    -1,    -1,  1205,
      -1,  1207,    -1,    -1,  2135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1221,    -1,    -1,  1224,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1244,    -1,
      -1,    -1,    -1,    -1,    -1,  1251,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1269,  1270,    -1,    -1,    -1,    -1,    -1,
    1276,  1277,   542,    -1,  1280,  1281,    -1,    -1,    -1,    -1,
      -1,    -1,   678,   679,   680,   681,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   579,
     706,   707,   708,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   717,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   725,
      -1,    -1,    -1,    -1,    -1,    -1,   732,   733,   734,    -1,
     736,   737,    -1,    -1,    -1,     3,    -1,   743,    -1,    -1,
     746,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   755,
      -1,    -1,   758,    -1,    -1,    -1,    -1,    -1,    -1,   765,
      28,   641,   768,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
    1131,  1132,    80,  1134,    -1,    83,    84,    -1,    86,    87,
      88,  1142,    -1,     1,  1145,     3,     4,     5,     6,  1150,
       8,     9,   712,   101,    -1,    -1,  1157,  1158,    -1,    -1,
      -1,    -1,   848,   111,   112,   113,   114,   115,   116,    -1,
      28,    -1,    -1,   121,  1175,  1176,   124,    -1,    -1,  1180,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,  1484,    -1,
      -1,  1487,    -1,    -1,    -1,    -1,    -1,   883,   758,    -1,
      -1,    -1,    -1,    -1,    -1,   765,   892,    -1,   768,    67,
    1211,    -1,  1213,   899,    72,    73,    74,    -1,   904,    -1,
     906,    -1,    -1,    -1,    -1,    -1,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,  1245,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,
      -1,   957,    -1,   131,    -1,    -1,   134,   135,   136,   137,
     138,   139,   140,    -1,    -1,    -1,    -1,   973,    -1,    -1,
    1291,  1292,  1588,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,  1602,  1603,    -1,    -1,
      -1,    -1,  1608,  1609,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,  1621,    -1,    -1,  1624,    -1,
    1016,  1017,  1018,    -1,    -1,    -1,  1632,    -1,  1024,    -1,
      -1,    -1,  1343,    -1,  1345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1356,  1357,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      85,    86,   942,    -1,   944,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,  1407,    -1,  1409,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,   127,   983,   129,    -1,    -1,  1723,    -1,   134,
     135,    -1,   137,   138,   139,   140,    -1,    -1,  1124,    -1,
      -1,  1127,    -1,     1,  1130,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,  1016,    -1,  1018,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1168,    -1,    -1,    -1,    -1,    -1,    -1,  1785,
    1786,    -1,    -1,    -1,    -1,    -1,  1182,  1183,  1184,  1185,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      -1,    -1,    -1,  1809,    72,    73,    74,    -1,    -1,  1205,
      -1,  1207,    -1,    -1,  1084,    -1,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,  1221,    -1,    -1,  1224,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,  1244,    -1,
      -1,   119,   120,   121,  1124,  1251,   124,   125,   126,  1865,
    1866,    -1,    -1,   131,    -1,  1135,   134,   135,    -1,   137,
     138,   139,   140,  1269,  1270,    -1,    -1,    -1,    -1,    -1,
    1276,  1277,    -1,  1594,  1280,  1281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1614,  1615,  1616,  1617,    -1,  1619,  1620,
      -1,    -1,    -1,    54,  1625,  1626,    -1,  1628,    -1,  1630,
      61,    -1,  1928,    -1,    -1,    -1,    -1,  1638,  1639,  1640,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    84,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1227,    -1,    28,
      -1,  1672,    -1,  1674,    -1,  1676,    -1,  1678,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1249,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,    -1,    -1,    -1,    67,    -1,
    1270,    -1,    -1,    72,    73,    74,    -1,  1277,    -1,    -1,
     151,  1281,    -1,    -1,    -1,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,
     129,    -1,    -1,    54,   133,   134,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   227,   228,  1484,    -1,
      -1,  1487,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1843,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,    -1,    -1,   288,    -1,    -1,
      -1,  1862,    -1,    -1,    -1,    -1,  1867,   298,  1869,  1870,
      -1,  1872,  1873,    -1,  1875,    -1,  1877,    -1,    -1,    -1,
      -1,    -1,  1883,  1884,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1588,    -1,    -1,    -1,    -1,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1602,  1603,    -1,    -1,
      -1,    -1,  1608,  1609,  1484,    -1,    -1,  1928,    -1,    -1,
      -1,    -1,    -1,    -1,  1494,  1621,    -1,    -1,  1624,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1632,   228,    -1,    -1,
    1510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1531,    -1,  1533,   405,    -1,    -1,    -1,    -1,    -1,
     411,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1550,    -1,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   447,   298,    -1,    -1,
      -1,  2022,  2023,    -1,  2025,  2026,  2027,    -1,    -1,    -1,
    2031,  2032,    -1,    -1,    -1,    -1,    -1,  1723,    -1,    -1,
      -1,    -1,    -1,  1603,    -1,    -1,    -1,    -1,    -1,    -1,
     481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   497,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2088,  2089,    -1,
    2091,  2092,    -1,    -1,    -1,  2096,    -1,    -1,    -1,  1785,
    1786,    -1,    -1,    -1,    -1,    -1,   537,   538,   539,   540,
     541,    -1,   543,    -1,    -1,   546,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1809,   405,    -1,   557,   558,   559,    -1,
     411,    -1,    -1,    -1,  2135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    95,    -1,  1704,   576,  1706,   578,    -1,   580,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1720,  1721,   593,    -1,    -1,    -1,   447,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1865,
    1866,    -1,    -1,    -1,    -1,    -1,  1746,  1747,    -1,  1749,
    1750,    -1,   145,    -1,  1754,  1755,  1756,  1757,    -1,    -1,
     481,    -1,    -1,    -1,   157,    -1,    -1,    -1,   161,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1786,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,   192,
      -1,    -1,  1928,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   537,   538,   539,   540,
     541,    -1,   543,    -1,    -1,   546,   697,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   705,   228,   557,   558,   559,     1,
     711,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,   580,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,   593,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,    -1,    -1,   278,   279,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1895,  1896,  1897,  1898,  1899,
    1900,  1901,  1902,    -1,    -1,    67,   299,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    85,    86,   318,    -1,  1927,    -1,    -1,
      -1,   324,    -1,    -1,    -1,    -1,  1936,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,   705,    -1,    -1,    -1,    -1,  1989,
     711,    -1,    -1,  1993,  1994,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   890,
      -1,   892,    -1,    -1,    -1,    -1,    -1,     1,   899,     3,
       4,     5,     6,   904,     8,     9,   429,    -1,    -1,    -1,
      -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   446,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   943,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   952,    -1,    -1,    -1,    -1,   957,    -1,   481,    -1,
      -1,    -1,   963,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,   973,    -1,    -1,   498,    -1,    -1,    -1,    -1,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,   521,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,   542,
     124,   125,   126,  1024,    -1,    -1,   549,   131,    -1,   552,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,   892,     1,    -1,    -1,     4,     5,     6,   899,     8,
       9,    -1,    -1,   904,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,  1070,
    1071,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1080,
      -1,  1082,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   943,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   952,    -1,    -1,    -1,    -1,   957,    -1,    67,    -1,
      -1,    -1,   963,    72,    73,    74,    -1,    -1,   145,    -1,
      -1,    -1,   973,    -1,    -1,    -1,    85,    -1,    -1,    -1,
     157,    -1,    -1,    -1,   161,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,   678,   679,   680,   681,    -1,
     119,   120,    -1,    -1,   191,   192,    -1,   126,   127,    -1,
     129,   130,   131,  1024,    -1,   134,   135,    -1,   137,   138,
     139,   140,    -1,   706,   707,   708,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1202,   725,  1204,    -1,    -1,    -1,    -1,    -1,   732,
     733,    -1,    -1,   736,   737,    -1,    -1,    -1,    -1,  1070,
    1071,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1080,
      -1,  1082,    -1,    -1,    -1,   758,    -1,    -1,    -1,    -1,
      -1,    -1,   765,    95,    -1,   768,    -1,    -1,   275,    -1,
      -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   318,    -1,   145,    -1,    -1,    -1,   324,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   157,    -1,    -1,    -1,   161,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   848,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,
     192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1202,    -1,  1204,    -1,    -1,    -1,    -1,    -1,    -1,
     883,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   891,   892,
      -1,    -1,    -1,    -1,    -1,    -1,   899,    -1,    -1,   902,
      -1,    -1,    -1,   906,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   446,
      -1,    -1,    -1,   275,    -1,    -1,   278,   279,   280,    -1,
      -1,    -1,    -1,     1,   957,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,   299,    -1,  1450,
     973,    -1,    -1,    -1,    -1,    -1,  1457,    -1,    -1,    -1,
      28,    -1,    -1,  1464,    -1,    -1,   318,    -1,    -1,    -1,
      -1,   498,   324,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1485,    -1,  1487,    -1,    -1,  1490,
      -1,    -1,  1493,  1016,  1017,  1018,    -1,    -1,    -1,    67,
      -1,  1024,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   542,    -1,    85,    86,    -1,
      -1,    -1,   549,    -1,    -1,   552,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,  1569,   137,
     138,   139,   140,    -1,    -1,    -1,  1577,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,    -1,  1588,    -1,    -1,
      -1,    -1,    -1,    -1,   446,    -1,    -1,    -1,    -1,  1450,
      -1,  1124,    -1,    -1,  1127,    -1,  1457,  1130,    -1,    -1,
      -1,    -1,    -1,  1464,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1485,    -1,  1487,    -1,    -1,  1490,
      -1,    -1,  1493,    -1,    -1,  1168,   498,    -1,    -1,    -1,
      -1,   678,   679,   680,   681,    -1,    -1,    -1,    -1,  1182,
    1183,  1184,  1185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   706,
     707,   708,  1205,    -1,  1207,    -1,    -1,    -1,    -1,    -1,
     542,    -1,    -1,    -1,    -1,    -1,    -1,   549,   725,    -1,
     552,  1224,    -1,    -1,    -1,   732,   733,    -1,    -1,   736,
     737,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1569,    -1,
      -1,  1244,    -1,    -1,    -1,    -1,  1577,    -1,  1251,    -1,
      -1,   758,    -1,    -1,    -1,    -1,    -1,  1588,   765,    -1,
      -1,   768,    -1,    -1,    -1,    -1,  1269,  1270,    -1,    -1,
      -1,    -1,    -1,  1276,  1277,    -1,    -1,  1280,  1281,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1774,  1775,    -1,  1777,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   678,   679,   680,   681,
      -1,    -1,  1833,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   706,   707,   708,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   891,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   725,    -1,   902,    -1,    -1,    -1,    -1,
     732,   733,    -1,    -1,   736,   737,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   758,    -1,    -1,    -1,
      -1,    -1,    -1,   765,    -1,    -1,   768,    -1,    -1,    -1,
      -1,    -1,    -1,  1774,  1775,    -1,  1777,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1484,    -1,    -1,  1487,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1833,    -1,    -1,    -1,    -1,    -1,    -1,  1016,
    1017,  1018,    -1,    -1,    -1,    -1,    -1,  1024,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,   891,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
     902,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,   127,  1588,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    -1,  1602,
    1603,    -1,    -1,    -1,    -1,  1608,  1609,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1124,  1621,    -1,
    1127,  1624,    -1,  1130,    -1,    -1,    -1,    -1,    -1,  1632,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1168,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1182,  1183,  1184,  1185,    -1,
      -1,    -1,    -1,    -1,  1016,  1017,  1018,    -1,    -1,    -1,
      -1,    -1,  1024,    -1,    -1,    -1,    -1,    -1,  1205,    -1,
    1207,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,  1224,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,  1244,    -1,    -1,
      -1,    -1,    -1,    -1,  1251,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1269,  1270,    -1,    -1,    -1,    -1,    -1,  1276,
    1277,    67,    -1,  1280,  1281,    -1,    72,    73,    74,    -1,
      -1,    -1,  1785,  1786,    -1,    -1,    -1,    -1,    -1,    85,
      86,    -1,  1124,    -1,    -1,  1127,    -1,    -1,  1130,    -1,
      -1,    -1,    -1,    99,    -1,    -1,  1809,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,   127,    -1,   129,    -1,    -1,  1168,    -1,   134,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,
    1182,  1183,  1184,  1185,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1865,  1866,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1205,    -1,  1207,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1244,    -1,    -1,    -1,    -1,    -1,    -1,  1251,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1269,  1270,    -1,
      -1,    -1,    -1,    -1,  1276,  1277,    -1,    -1,  1280,  1281,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1484,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,    -1,    -1,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,  1602,  1603,    -1,    80,    -1,
      -1,  1608,  1609,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1621,    -1,    -1,  1624,    -1,   101,
      -1,    -1,    -1,    -1,    -1,  1632,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
     122,   123,   124,    -1,    -1,   127,   128,   129,   130,    -1,
     132,    -1,  1484,   135,    -1,   137,   138,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    1602,  1603,    72,    73,    74,    -1,  1608,  1609,  1785,  1786,
      -1,    -1,    -1,    -1,    -1,    85,    86,    -1,    -1,  1621,
      -1,    -1,  1624,    -1,    -1,    -1,    -1,    -1,    -1,    99,
    1632,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
      -1,    -1,   132,    -1,   134,   135,    -1,   137,   138,   139,
     140,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1865,  1866,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,  1785,  1786,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1865,  1866,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,    -1,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,   122,   123,
     124,   125,   126,    -1,   128,   129,    -1,    -1,   132,    -1,
     134,   135,    -1,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,   125,   126,   127,
      -1,   129,   130,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,   125,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,   125,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,    -1,
      -1,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,     1,   126,     3,     4,     5,
       6,    -1,     8,     9,   134,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,     1,
     126,     3,     4,     5,     6,    -1,     8,     9,   134,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,     1,   126,     3,     4,     5,     6,   131,
       8,     9,   134,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    99,    -1,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    28,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,    -1,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,    -1,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
      -1,    -1,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
      -1,    -1,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      89,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
      -1,    -1,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,    -1,    -1,
     131,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,   127,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,   129,    -1,
      -1,    -1,    -1,   134,   135,   136,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,   129,    -1,    -1,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,   129,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
     129,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
      -1,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,   127,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,   129,    -1,    -1,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,   129,    -1,    -1,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,
     129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
     127,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
      -1,   130,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
      -1,    -1,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,   136,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,   136,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,    -1,   131,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,
     131,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,
     131,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,    -1,   131,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,     0,     1,    -1,     3,     4,     5,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,   125,   126,   127,
      -1,   129,   130,    -1,    -1,    -1,   134,   135,     0,     1,
      -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,    -1,
      -1,    -1,   134,   135,     0,     1,    -1,     3,     4,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,     0,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
       0,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,     0,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,     1,    -1,
       3,     4,     5,    -1,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,     1,   121,     3,
      -1,   124,    -1,   126,   127,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,     1,   121,     3,    -1,
     124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,     3,    -1,   121,    -1,    -1,   124,
     125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
       3,    -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,   137,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,     3,    -1,   121,    -1,
      -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,     3,    -1,   121,    -1,    -1,   124,    -1,    -1,
      -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,     3,    -1,
     121,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,
     131,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,     3,    -1,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
       3,    -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,     3,    -1,   121,    -1,
      -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,     3,    -1,   121,    -1,    -1,   124,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    77,    78,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,   106,    -1,    -1,     3,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    79,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     133,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,     1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   127,    -1,   129,   130,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,     1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
       1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,     0,     1,    -1,     3,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,   102,     3,    -1,
      -1,   106,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      -1,    -1,   127,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,     3,    -1,   108,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,     3,    -1,   108,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,     1,    -1,     3,    -1,   108,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
      -1,   127,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      -1,    -1,   127,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,    -1,    -1,   127,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,   124,    -1,    -1,   127,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    78,    -1,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,
      -1,     0,     1,   106,     3,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,   124,    -1,    -1,   127,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,    -1,   124,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   101,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,   124,   125,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   101,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,   125,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,   101,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,   125,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
     125,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,    -1,   124,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,   124,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,   124,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,   124,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,    -1,   124,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,   124,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,   124,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,   124,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,   108,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   135,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    55,    67,    68,
      75,    76,    77,    78,    80,    81,    82,    83,    84,    86,
      87,    88,   101,   102,   106,   111,   112,   113,   114,   115,
     116,   117,   118,   121,   124,   127,   147,   148,   149,   151,
     176,   213,   214,   215,   216,   217,   218,   270,   273,   274,
     277,   278,   279,   280,   281,   282,   283,   285,   289,   292,
     293,   294,   295,   296,   297,   302,   303,   312,   313,   314,
     321,   322,   326,   327,   330,   335,   364,   367,   368,   386,
     387,   389,   390,   391,   392,   393,   394,    78,   133,     5,
      31,   218,   388,   218,   124,   124,   124,   151,   218,   388,
     283,   284,   321,   330,    37,   149,   218,   311,   312,   314,
     316,   317,   318,   320,   321,   330,   333,   334,   339,   122,
     127,   148,   149,   218,   131,   133,   127,   131,   130,   121,
     122,   213,   218,   131,   151,   218,   131,   133,   130,   122,
     131,   133,   131,   130,   131,   149,   218,   321,     1,    31,
      37,    38,    39,    40,   127,   147,   149,   215,   217,   218,
     270,   280,   281,   283,   285,   314,   318,   321,   330,   333,
     334,   335,   337,   345,   346,   347,   348,    37,    38,    39,
      40,   149,   321,   347,   124,   135,     1,    29,    30,    31,
      32,    33,    67,   117,   118,   125,   147,   218,   269,   273,
     275,   276,   283,   285,   289,   290,   291,   297,   301,   309,
     310,   351,   352,   353,   354,   355,   356,   330,   124,   326,
     314,   321,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    48,    49,    68,    86,    88,   101,
     113,   114,   115,   116,   131,   151,   172,   173,   269,   274,
     275,   283,   286,   290,   292,   300,   366,   369,   370,   371,
     376,   377,   378,    31,    77,   133,   215,   217,   302,   367,
     368,   386,   387,   394,     1,   215,   279,   296,   302,   335,
     364,   390,     1,   389,   390,     0,   218,   388,   388,     5,
     128,   388,     1,     4,     6,     8,     9,    67,    72,    73,
      74,    85,    86,    99,   103,   104,   105,   106,   107,   108,
     109,   110,   119,   120,   121,   124,   126,   134,   135,   137,
     138,   139,   140,   151,   177,   178,   218,   219,   220,   221,
     222,   225,   226,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   388,   400,   401,   402,   403,
     148,   218,   131,   151,   218,   283,   330,   135,   124,   135,
     125,   309,   310,   355,   356,   330,   333,   334,   311,   316,
     320,   321,   125,   321,   125,   321,   321,    86,   151,   203,
     205,   207,   211,   212,   218,   230,   235,   251,   255,   301,
     127,   122,   122,   127,     1,    69,    79,    81,    82,    89,
      92,    93,    94,    95,    97,    99,   100,   124,   126,   127,
     130,   152,   153,   154,   155,   156,   157,   158,   159,   174,
     175,   177,   178,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   194,   198,   199,   200,   201,   218,   226,
     249,   301,   313,   315,   321,   330,   335,   336,   365,    81,
      82,   218,   269,   273,   283,   286,   289,   297,   304,   305,
       1,   130,   200,   201,   149,   218,     1,   218,   271,   272,
       1,   130,   272,   305,    67,   204,   206,   208,   209,   210,
     218,   301,     1,   130,   200,   201,   305,     1,   130,   200,
     201,     1,   130,   200,   201,   149,   218,   129,   129,   129,
     129,   129,   131,   330,   314,   318,   321,     1,   128,   370,
     377,   378,   370,   377,   378,     1,   127,   129,   129,   330,
     127,   136,   148,   218,   244,   263,   267,   268,   129,   131,
     151,   218,   130,   131,   130,   131,   321,    37,   124,   135,
     137,   147,   149,   218,   269,   275,   283,   285,   290,   311,
     312,   321,   328,   330,   331,   334,     1,   125,   129,     1,
     125,   129,     1,   129,     1,   129,   125,   125,   314,   124,
     314,   124,   124,     1,   127,     1,   130,     1,    37,    38,
      39,    40,   127,   218,   269,   275,   283,   286,   290,   321,
     347,   348,     1,   127,     1,   366,   369,   377,   378,   366,
     369,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    86,    87,    89,    90,    91,   127,   133,   151,
     195,   196,   197,   218,   226,   230,   245,   247,   251,   263,
     264,   265,   326,   357,   358,   361,   362,   363,   370,   371,
     372,   373,   374,   375,   377,   378,   380,   381,   382,   383,
     384,   385,   130,    31,   218,   388,   218,   213,   214,   216,
     217,   311,   312,   318,   321,   330,   335,   337,   370,   378,
     215,   302,   128,   243,   244,   262,   125,   124,   230,   251,
     124,   230,   251,   230,   251,   124,   218,   269,   275,   283,
     286,   290,   308,   267,   124,   124,   308,   267,   124,   124,
     124,   124,   124,   124,   230,   251,   124,   125,   245,   247,
     265,   275,   283,   285,   290,   298,   349,   388,   131,   136,
     179,   180,   223,   227,   245,   131,     1,   130,   131,   218,
       1,     7,     8,     9,   124,   132,   135,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,   128,   246,   180,
     223,   224,   232,   252,   121,   141,   142,   138,   139,    10,
      11,   235,   255,    12,    13,   122,   123,    14,    15,   137,
     143,   144,    16,    17,   145,   246,   125,     7,     8,     9,
     124,   132,   135,   246,   121,   141,   142,   138,   139,    10,
      11,    12,    13,   122,   123,    14,    15,   137,   143,   144,
      16,    17,   145,   246,   125,   125,   108,   218,   301,   395,
     398,   399,   131,   131,   136,   148,   267,   268,   136,   148,
     267,   268,   125,   125,   125,   125,   311,   316,   320,   125,
     125,   311,    11,   123,   129,   128,   124,   321,   330,   331,
      67,   210,   218,   301,   210,     1,   218,   269,   283,   286,
     297,   306,   301,   335,   336,   124,   151,   218,   218,   301,
       1,   124,   306,   121,   124,   218,   301,   127,   326,   377,
     378,   377,   378,   377,   127,   377,   378,   127,     1,   130,
       1,     1,   127,   129,   129,    70,    71,    92,    96,    98,
     130,    70,    71,   130,   127,     1,   198,   199,     1,   198,
     199,     1,   128,   124,   133,   218,   287,   288,   311,   317,
     319,   321,   330,   337,   338,   339,     1,   301,   309,   353,
     330,   315,   321,   124,   133,   158,   159,   174,   175,   177,
     178,   187,   218,   301,   122,   151,   218,   218,   269,   283,
     286,   122,   122,   128,   326,   327,   129,     1,   127,   131,
      28,   150,   218,   123,   129,   128,   218,   331,   333,   345,
     345,   345,   345,   345,   127,   129,   130,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   223,
     224,   226,   244,   263,   300,   342,   343,   311,   314,   316,
     318,   320,   311,   318,   131,   245,   264,   340,   341,   377,
     378,   377,   378,   345,   346,   345,   346,   136,   136,   136,
      53,   351,   352,     1,   272,   131,   131,     1,   130,   200,
     201,     1,   130,   200,   201,   131,   125,   218,   309,   310,
     321,   330,   331,   355,   356,   136,   148,   267,   268,   321,
     330,   334,   330,   124,   135,   328,     1,     1,   129,     1,
      53,   218,   351,   352,   129,     1,    53,   218,   351,   352,
     129,     1,    53,   218,   351,   352,   129,    53,   218,   351,
     352,     3,    28,    46,    75,    76,   125,   323,   324,   325,
     245,   148,   218,   130,   131,   127,   127,   133,   267,   268,
     133,   124,   124,     1,   124,    54,    55,    56,    58,    59,
      60,    61,    64,    87,   218,   265,   326,   357,   380,   384,
     124,   218,   127,   127,   127,   223,   224,   247,   265,   124,
     283,   124,   124,   191,   218,   127,   127,   127,   133,   132,
     246,     1,   132,   127,   129,   247,   265,   246,   125,   129,
     247,     1,   372,   373,   372,   373,   357,   358,   366,   369,
     357,   358,   366,   369,     1,     1,   388,   388,   149,   218,
     131,   131,   330,   318,   321,   370,   378,   370,   378,   378,
     244,   145,   127,   145,    67,   147,   218,   275,   283,   285,
     290,   299,   350,   218,   300,   122,   124,   135,   218,   269,
     275,   283,   286,   290,   321,   329,   330,   332,   218,   269,
     275,   283,   286,   290,   307,   247,   349,   377,   218,   135,
     332,   307,   245,   388,   388,   388,   245,   350,   350,   125,
     218,   275,   283,   285,   290,   331,   125,   132,     1,   170,
     171,     1,   130,   129,   136,     1,   170,   171,   130,     1,
     170,   171,     1,   218,   125,   224,   227,   228,   264,     1,
     218,   247,   265,   223,   245,     1,   232,   252,   232,   252,
     232,   252,   233,   253,   233,   253,   234,   254,   234,   254,
     235,   255,   235,   255,   235,   255,   223,   224,   237,   256,
     223,   224,   237,   256,   223,   224,   238,   257,   223,   224,
     239,   258,   223,   224,   240,   259,   241,   260,   242,   261,
     133,   223,   224,   247,   248,   265,   266,   223,   245,     1,
     218,   125,   227,   228,     1,   218,   247,   265,   223,   245,
     232,   252,   232,   252,   232,   252,   233,   253,   233,   253,
     234,   254,   234,   254,   235,   255,   235,   255,   235,   255,
     235,   255,   223,   224,   237,   256,   223,   224,   237,   256,
     223,   224,   238,   257,   223,   224,   239,   258,   223,   224,
     240,   259,   241,   260,   242,   261,   133,   247,   248,   265,
     266,   223,   245,   122,   123,   218,   396,   397,   218,   130,
     395,   398,   399,   399,   136,   136,   136,   136,   136,   136,
     211,   203,   205,   207,   218,   321,   330,   123,   128,   331,
     123,   131,   122,   131,   218,   269,   283,   286,   331,   321,
     330,   337,   338,   191,   288,   311,   321,   330,   131,   218,
     131,   218,   331,   218,   321,   124,   127,   130,   181,   182,
     181,   182,   377,   377,   377,   220,   377,   377,     1,   342,
     343,   125,   267,   268,   131,   129,     1,   301,   309,   353,
     330,   311,   319,   321,   133,   326,   218,   124,   315,   315,
     218,     1,     1,   288,   212,   122,   210,   210,   267,   268,
     128,   271,   200,   201,     1,   130,   272,   128,   133,   128,
     133,   209,   205,   218,   128,   218,   128,   377,   378,     1,
     127,   129,   127,   129,   127,   162,   163,   166,   167,   168,
     130,   160,   163,   127,   130,   162,   163,   166,   167,   168,
     128,    37,   337,   338,   339,   340,   341,   344,     1,   130,
     272,     1,   130,   272,     1,   130,   200,   201,   321,   330,
     331,   125,   125,   125,   136,   136,   136,   330,   328,   125,
     355,   356,   136,   148,   267,   268,   351,   352,   301,   351,
     351,   351,   352,   125,   124,   125,   129,   324,   125,   125,
     125,     1,   170,   171,   357,   358,   366,   369,   133,   133,
     357,   358,   366,   369,   247,   265,   247,   265,   125,   247,
     265,   133,   267,   268,   133,   124,   124,   357,   124,   224,
     265,   124,   133,    58,     1,   125,   127,   218,   247,   265,
     379,   127,   127,   127,   127,   127,   388,   124,   245,   245,
     218,   357,   358,   366,   369,    91,   224,   264,    89,    90,
      91,   245,   264,   224,   264,   245,   264,   122,   318,   378,
     378,   127,   247,   248,   265,   266,   247,   248,   265,   266,
     147,   148,   147,   275,   283,   285,   290,   331,   125,   125,
     125,   331,   212,   125,   321,   332,   355,   356,   267,   268,
     122,   330,   124,   329,   135,   122,   135,   218,   269,   275,
     283,   286,   290,   332,   125,   125,   125,   125,   267,   268,
     135,   135,   332,   129,   125,   129,   129,   129,   125,   129,
     232,   252,   388,     1,   130,   223,   245,     1,     1,   125,
     129,   125,   136,   136,     1,   129,   133,   133,   129,   133,
     133,   125,   136,   136,   133,   133,   133,   133,   218,   218,
     127,   129,   218,   388,   130,   130,   321,   330,   205,   212,
     122,   131,   131,   218,   330,   321,   125,   330,   311,   125,
     131,   131,   218,   125,     1,   170,   171,   287,   321,   218,
     124,   311,   319,   319,   267,   268,   124,   125,   123,   212,
     123,   123,   267,   268,   127,     1,   127,   203,   202,   301,
     203,   202,   207,   128,   131,     1,   164,   165,     1,   164,
     165,   378,     1,   342,   343,   129,   130,   340,   341,     1,
     127,     1,   127,   330,   328,   125,   125,   125,   136,   136,
     136,   331,   334,   247,   125,   324,     1,   357,   358,   366,
     369,   357,   358,   366,   369,   125,   125,   125,   125,     1,
     357,   125,   247,   357,   358,   133,   133,   265,   125,   247,
     265,    58,   265,   379,   388,   124,   357,   133,   127,     1,
     127,     1,   125,   265,   379,     3,   125,   133,   388,   125,
     125,   129,   124,   124,   191,   133,   133,   133,   133,   133,
     133,   133,   133,   125,   125,     1,   125,   123,   321,   330,
     332,   125,   125,   125,   136,   136,   212,   329,   125,   355,
     356,   267,   268,   212,   267,   268,   122,   135,   124,   340,
     136,   136,   267,   268,   267,   268,   135,   349,   218,   218,
     245,     1,   218,   224,   264,   223,   224,   223,   224,   244,
     262,   223,   224,   244,   262,   223,   224,   223,   224,   244,
     262,   223,   224,   244,   262,   223,   224,   244,   262,   223,
     224,   244,   262,   223,   224,   244,   262,   223,   224,   244,
     262,   396,   127,   127,   123,   212,   131,   377,   311,   128,
     131,     1,   124,   133,   133,   123,   200,   201,   127,   200,
     201,   128,   331,   128,   207,   344,   130,   340,   341,     1,
     200,   201,   200,   201,   125,   357,   357,   357,   357,   357,
     358,   125,   124,   379,   125,   247,   265,   247,   357,     1,
     125,   247,   265,   135,   359,   360,   388,   127,   360,     3,
     125,   133,   131,   191,   245,   245,     1,     1,   329,   125,
     123,   125,   125,   136,   136,   123,   136,   136,   212,   267,
     268,   349,   136,   136,   136,   136,   267,   268,   125,   125,
     125,   125,   125,   123,   342,   267,   268,   267,   268,   200,
     201,   203,   203,   129,   130,     1,    66,    66,   247,   265,
     125,   247,   265,   125,   127,   125,   127,   357,   358,   125,
     357,   358,   218,   125,   129,   133,   124,     3,   125,   133,
     360,   127,   360,    74,   191,   192,   193,   125,   125,   125,
     129,   123,   136,   136,   125,   136,   136,   127,   130,   357,
     357,   125,   125,   127,   357,   247,   357,   358,   136,   127,
     359,   360,   245,   360,   127,   360,   125,   133,     3,   125,
     133,   377,   377,   130,   192,   131,   191,   232,   252,   340,
     125,   388,   125,   125,   125,   125,   133,   127,   360,   360,
     127,   360,   193,   125,   357,   124,   127,   127,   127,   360,
     125,   125,   125,   133,   130,   245,   125,   127,   127,   127,
     360,   125,   127,   125,   127
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
        break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 147: /* guess_type */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 11552 "grammar.ec"
        break;
      case 148: /* type */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 11559 "grammar.ec"
        break;
      case 149: /* base_strict_type */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 11566 "grammar.ec"
        break;
      case 150: /* base_strict_type_name */
/* Line 1398 of yacc.c  */
#line 250 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1398 of yacc.c  */
#line 11573 "grammar.ec"
        break;
      case 151: /* strict_type */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 11580 "grammar.ec"
        break;
      case 152: /* class_function_definition_start */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11587 "grammar.ec"
        break;
      case 153: /* constructor_function_definition_start */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11594 "grammar.ec"
        break;
      case 154: /* destructor_function_definition_start */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11601 "grammar.ec"
        break;
      case 155: /* virtual_class_function_definition_start */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11608 "grammar.ec"
        break;
      case 156: /* class_function_definition_start_error */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11615 "grammar.ec"
        break;
      case 157: /* virtual_class_function_definition_start_error */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11622 "grammar.ec"
        break;
      case 158: /* class_function_definition */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11629 "grammar.ec"
        break;
      case 159: /* class_function_definition_error */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11636 "grammar.ec"
        break;
      case 160: /* instance_class_function_definition_start */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11643 "grammar.ec"
        break;
      case 161: /* instance_class_function_definition_start_error */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11650 "grammar.ec"
        break;
      case 162: /* instance_class_function_definition */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11657 "grammar.ec"
        break;
      case 163: /* instance_class_function_definition_error */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11664 "grammar.ec"
        break;
      case 164: /* data_member_initialization */
/* Line 1398 of yacc.c  */
#line 240 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1398 of yacc.c  */
#line 11671 "grammar.ec"
        break;
      case 165: /* data_member_initialization_error */
/* Line 1398 of yacc.c  */
#line 240 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1398 of yacc.c  */
#line 11678 "grammar.ec"
        break;
      case 166: /* data_member_initialization_list */
/* Line 1398 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1398 of yacc.c  */
#line 11685 "grammar.ec"
        break;
      case 167: /* data_member_initialization_list_error */
/* Line 1398 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1398 of yacc.c  */
#line 11692 "grammar.ec"
        break;
      case 168: /* data_member_initialization_list_coloned */
/* Line 1398 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1398 of yacc.c  */
#line 11699 "grammar.ec"
        break;
      case 169: /* members_initialization_list_coloned */
/* Line 1398 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1398 of yacc.c  */
#line 11706 "grammar.ec"
        break;
      case 170: /* members_initialization_list */
/* Line 1398 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1398 of yacc.c  */
#line 11713 "grammar.ec"
        break;
      case 171: /* members_initialization_list_error */
/* Line 1398 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1398 of yacc.c  */
#line 11720 "grammar.ec"
        break;
      case 172: /* instantiation_named */
/* Line 1398 of yacc.c  */
#line 238 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1398 of yacc.c  */
#line 11727 "grammar.ec"
        break;
      case 173: /* instantiation_named_error */
/* Line 1398 of yacc.c  */
#line 238 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1398 of yacc.c  */
#line 11734 "grammar.ec"
        break;
      case 177: /* instantiation_unnamed */
/* Line 1398 of yacc.c  */
#line 238 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1398 of yacc.c  */
#line 11741 "grammar.ec"
        break;
      case 178: /* instantiation_unnamed_error */
/* Line 1398 of yacc.c  */
#line 238 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1398 of yacc.c  */
#line 11748 "grammar.ec"
        break;
      case 181: /* default_property */
/* Line 1398 of yacc.c  */
#line 240 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1398 of yacc.c  */
#line 11755 "grammar.ec"
        break;
      case 182: /* default_property_error */
/* Line 1398 of yacc.c  */
#line 240 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1398 of yacc.c  */
#line 11762 "grammar.ec"
        break;
      case 183: /* default_property_list */
/* Line 1398 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1398 of yacc.c  */
#line 11769 "grammar.ec"
        break;
      case 184: /* default_property_list_error */
/* Line 1398 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1398 of yacc.c  */
#line 11776 "grammar.ec"
        break;
      case 187: /* property */
/* Line 1398 of yacc.c  */
#line 251 "grammar.y"
        { FreeProperty(((*yyvaluep).prop)); };
/* Line 1398 of yacc.c  */
#line 11783 "grammar.ec"
        break;
      case 198: /* struct_declaration */
/* Line 1398 of yacc.c  */
#line 249 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1398 of yacc.c  */
#line 11790 "grammar.ec"
        break;
      case 199: /* struct_declaration_error */
/* Line 1398 of yacc.c  */
#line 249 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1398 of yacc.c  */
#line 11797 "grammar.ec"
        break;
      case 200: /* struct_declaration_list */
/* Line 1398 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1398 of yacc.c  */
#line 11804 "grammar.ec"
        break;
      case 201: /* struct_declaration_list_error */
/* Line 1398 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1398 of yacc.c  */
#line 11811 "grammar.ec"
        break;
      case 202: /* template_datatype */
/* Line 1398 of yacc.c  */
#line 270 "grammar.y"
        { FreeTemplateDataType(((*yyvaluep).templateDatatype)); };
/* Line 1398 of yacc.c  */
#line 11818 "grammar.ec"
        break;
      case 203: /* template_type_argument */
/* Line 1398 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1398 of yacc.c  */
#line 11825 "grammar.ec"
        break;
      case 204: /* template_type_parameter */
/* Line 1398 of yacc.c  */
#line 268 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1398 of yacc.c  */
#line 11832 "grammar.ec"
        break;
      case 205: /* template_identifier_argument */
/* Line 1398 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1398 of yacc.c  */
#line 11839 "grammar.ec"
        break;
      case 206: /* template_identifier_parameter */
/* Line 1398 of yacc.c  */
#line 268 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1398 of yacc.c  */
#line 11846 "grammar.ec"
        break;
      case 207: /* template_expression_argument */
/* Line 1398 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1398 of yacc.c  */
#line 11853 "grammar.ec"
        break;
      case 208: /* template_expression_parameter */
/* Line 1398 of yacc.c  */
#line 268 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1398 of yacc.c  */
#line 11860 "grammar.ec"
        break;
      case 209: /* template_parameter */
/* Line 1398 of yacc.c  */
#line 268 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1398 of yacc.c  */
#line 11867 "grammar.ec"
        break;
      case 210: /* template_parameters_list */
/* Line 1398 of yacc.c  */
#line 271 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateParameter); };
/* Line 1398 of yacc.c  */
#line 11874 "grammar.ec"
        break;
      case 211: /* template_argument */
/* Line 1398 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1398 of yacc.c  */
#line 11881 "grammar.ec"
        break;
      case 212: /* template_arguments_list */
/* Line 1398 of yacc.c  */
#line 272 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateArgument); };
/* Line 1398 of yacc.c  */
#line 11888 "grammar.ec"
        break;
      case 213: /* class_entry */
/* Line 1398 of yacc.c  */
#line 246 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1398 of yacc.c  */
#line 11895 "grammar.ec"
        break;
      case 214: /* class_decl */
/* Line 1398 of yacc.c  */
#line 247 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1398 of yacc.c  */
#line 11902 "grammar.ec"
        break;
      case 215: /* class */
/* Line 1398 of yacc.c  */
#line 248 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1398 of yacc.c  */
#line 11909 "grammar.ec"
        break;
      case 216: /* class_head */
/* Line 1398 of yacc.c  */
#line 248 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1398 of yacc.c  */
#line 11916 "grammar.ec"
        break;
      case 217: /* class_error */
/* Line 1398 of yacc.c  */
#line 248 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1398 of yacc.c  */
#line 11923 "grammar.ec"
        break;
      case 218: /* identifier */
/* Line 1398 of yacc.c  */
#line 202 "grammar.y"
        { FreeIdentifier(((*yyvaluep).id)); };
/* Line 1398 of yacc.c  */
#line 11930 "grammar.ec"
        break;
      case 219: /* primary_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 11937 "grammar.ec"
        break;
      case 220: /* i18n_string */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 11944 "grammar.ec"
        break;
      case 225: /* primary_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 11951 "grammar.ec"
        break;
      case 226: /* postfix_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 11958 "grammar.ec"
        break;
      case 227: /* argument_expression_list */
/* Line 1398 of yacc.c  */
#line 253 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1398 of yacc.c  */
#line 11965 "grammar.ec"
        break;
      case 228: /* argument_expression_list_error */
/* Line 1398 of yacc.c  */
#line 253 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1398 of yacc.c  */
#line 11972 "grammar.ec"
        break;
      case 230: /* unary_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 11979 "grammar.ec"
        break;
      case 232: /* cast_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 11986 "grammar.ec"
        break;
      case 233: /* multiplicative_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 11993 "grammar.ec"
        break;
      case 234: /* additive_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12000 "grammar.ec"
        break;
      case 235: /* shift_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12007 "grammar.ec"
        break;
      case 237: /* relational_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12014 "grammar.ec"
        break;
      case 238: /* equality_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12021 "grammar.ec"
        break;
      case 239: /* and_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12028 "grammar.ec"
        break;
      case 240: /* exclusive_or_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12035 "grammar.ec"
        break;
      case 241: /* inclusive_or_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12042 "grammar.ec"
        break;
      case 242: /* logical_and_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12049 "grammar.ec"
        break;
      case 243: /* logical_or_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12056 "grammar.ec"
        break;
      case 244: /* conditional_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12063 "grammar.ec"
        break;
      case 245: /* assignment_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12070 "grammar.ec"
        break;
      case 247: /* expression */
/* Line 1398 of yacc.c  */
#line 253 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1398 of yacc.c  */
#line 12077 "grammar.ec"
        break;
      case 249: /* postfix_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12084 "grammar.ec"
        break;
      case 251: /* unary_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12091 "grammar.ec"
        break;
      case 252: /* cast_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12098 "grammar.ec"
        break;
      case 253: /* multiplicative_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12105 "grammar.ec"
        break;
      case 254: /* additive_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12112 "grammar.ec"
        break;
      case 255: /* shift_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12119 "grammar.ec"
        break;
      case 256: /* relational_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12126 "grammar.ec"
        break;
      case 257: /* equality_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12133 "grammar.ec"
        break;
      case 258: /* and_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12140 "grammar.ec"
        break;
      case 259: /* exclusive_or_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12147 "grammar.ec"
        break;
      case 260: /* inclusive_or_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12154 "grammar.ec"
        break;
      case 261: /* logical_and_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12161 "grammar.ec"
        break;
      case 262: /* logical_or_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12168 "grammar.ec"
        break;
      case 263: /* conditional_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12175 "grammar.ec"
        break;
      case 264: /* assignment_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12182 "grammar.ec"
        break;
      case 265: /* expression_error */
/* Line 1398 of yacc.c  */
#line 253 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1398 of yacc.c  */
#line 12189 "grammar.ec"
        break;
      case 267: /* constant_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12196 "grammar.ec"
        break;
      case 268: /* constant_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12203 "grammar.ec"
        break;
      case 269: /* storage_class_specifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12210 "grammar.ec"
        break;
      case 270: /* external_storage_class_specifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12217 "grammar.ec"
        break;
      case 271: /* enumerator */
/* Line 1398 of yacc.c  */
#line 220 "grammar.y"
        { FreeEnumerator(((*yyvaluep).enumerator)); };
/* Line 1398 of yacc.c  */
#line 12224 "grammar.ec"
        break;
      case 272: /* enumerator_list */
/* Line 1398 of yacc.c  */
#line 254 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeEnumerator); };
/* Line 1398 of yacc.c  */
#line 12231 "grammar.ec"
        break;
      case 274: /* enum_specifier_nocompound */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12238 "grammar.ec"
        break;
      case 275: /* enum_specifier_compound */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12245 "grammar.ec"
        break;
      case 276: /* enum_specifier_compound_error */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12252 "grammar.ec"
        break;
      case 278: /* enum_class */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12259 "grammar.ec"
        break;
      case 279: /* enum_class_error */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12266 "grammar.ec"
        break;
      case 280: /* class_specifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12273 "grammar.ec"
        break;
      case 281: /* class_specifier_error */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12280 "grammar.ec"
        break;
      case 282: /* ext_storage */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12287 "grammar.ec"
        break;
      case 283: /* type_qualifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12294 "grammar.ec"
        break;
      case 284: /* type_qualifier_list */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12301 "grammar.ec"
        break;
      case 285: /* type_specifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12308 "grammar.ec"
        break;
      case 286: /* strict_type_specifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12315 "grammar.ec"
        break;
      case 287: /* struct_declarator */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12322 "grammar.ec"
        break;
      case 288: /* struct_declarator_list */
/* Line 1398 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclarator); };
/* Line 1398 of yacc.c  */
#line 12329 "grammar.ec"
        break;
      case 289: /* struct_entry */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12336 "grammar.ec"
        break;
      case 290: /* struct_or_union_specifier_compound */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12343 "grammar.ec"
        break;
      case 291: /* struct_or_union_specifier_compound_error */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12350 "grammar.ec"
        break;
      case 292: /* struct_or_union_specifier_nocompound */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12357 "grammar.ec"
        break;
      case 293: /* struct_decl */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12364 "grammar.ec"
        break;
      case 294: /* struct_head */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12371 "grammar.ec"
        break;
      case 295: /* struct_class */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12378 "grammar.ec"
        break;
      case 296: /* struct_class_error */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12385 "grammar.ec"
        break;
      case 298: /* specifier_qualifier_list */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12392 "grammar.ec"
        break;
      case 299: /* guess_specifier_qualifier_list */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12399 "grammar.ec"
        break;
      case 300: /* declaration_specifiers */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12406 "grammar.ec"
        break;
      case 301: /* guess_declaration_specifiers */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12413 "grammar.ec"
        break;
      case 302: /* external_guess_declaration_specifiers */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12420 "grammar.ec"
        break;
      case 303: /* external_guess_declaration_specifiers_error */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12427 "grammar.ec"
        break;
      case 304: /* _inheritance_specifiers */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12434 "grammar.ec"
        break;
      case 305: /* inheritance_specifiers */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12441 "grammar.ec"
        break;
      case 309: /* identifier_list_error */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12448 "grammar.ec"
        break;
      case 310: /* identifier_list */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12455 "grammar.ec"
        break;
      case 311: /* direct_declarator_nofunction_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12462 "grammar.ec"
        break;
      case 312: /* direct_declarator_nofunction */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12469 "grammar.ec"
        break;
      case 313: /* direct_declarator_function_start */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12476 "grammar.ec"
        break;
      case 314: /* direct_declarator_function */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12483 "grammar.ec"
        break;
      case 315: /* direct_declarator_function_error */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12490 "grammar.ec"
        break;
      case 316: /* direct_declarator */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12497 "grammar.ec"
        break;
      case 317: /* direct_declarator_function_start_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12504 "grammar.ec"
        break;
      case 318: /* direct_declarator_function_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12511 "grammar.ec"
        break;
      case 319: /* direct_declarator_function_error_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12518 "grammar.ec"
        break;
      case 320: /* direct_declarator_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12525 "grammar.ec"
        break;
      case 321: /* ext_decl */
/* Line 1398 of yacc.c  */
#line 275 "grammar.y"
        { FreeExtDecl(((*yyvaluep).extDecl)); };
/* Line 1398 of yacc.c  */
#line 12532 "grammar.ec"
        break;
      case 323: /* attribute_word */
/* Line 1398 of yacc.c  */
#line 250 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1398 of yacc.c  */
#line 12539 "grammar.ec"
        break;
      case 324: /* attribute */
/* Line 1398 of yacc.c  */
#line 276 "grammar.y"
        { FreeAttribute(((*yyvaluep).attribute)); };
/* Line 1398 of yacc.c  */
#line 12546 "grammar.ec"
        break;
      case 325: /* attribs_list */
/* Line 1398 of yacc.c  */
#line 277 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttribute); };
/* Line 1398 of yacc.c  */
#line 12553 "grammar.ec"
        break;
      case 326: /* attrib */
/* Line 1398 of yacc.c  */
#line 274 "grammar.y"
        { FreeAttrib(((*yyvaluep).attrib)); };
/* Line 1398 of yacc.c  */
#line 12560 "grammar.ec"
        break;
      case 327: /* multi_attrib */
/* Line 1398 of yacc.c  */
#line 278 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttrib); };
/* Line 1398 of yacc.c  */
#line 12567 "grammar.ec"
        break;
      case 328: /* direct_abstract_declarator */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12574 "grammar.ec"
        break;
      case 329: /* direct_abstract_declarator_noarray */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12581 "grammar.ec"
        break;
      case 330: /* pointer */
/* Line 1398 of yacc.c  */
#line 203 "grammar.y"
        { FreePointer(((*yyvaluep).pointer)); };
/* Line 1398 of yacc.c  */
#line 12588 "grammar.ec"
        break;
      case 331: /* abstract_declarator */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12595 "grammar.ec"
        break;
      case 332: /* abstract_declarator_noarray */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12602 "grammar.ec"
        break;
      case 333: /* declarator */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12609 "grammar.ec"
        break;
      case 334: /* declarator_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12616 "grammar.ec"
        break;
      case 335: /* declarator_function */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12623 "grammar.ec"
        break;
      case 336: /* declarator_function_error */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12630 "grammar.ec"
        break;
      case 337: /* declarator_function_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12637 "grammar.ec"
        break;
      case 338: /* declarator_function_error_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12644 "grammar.ec"
        break;
      case 339: /* declarator_nofunction_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12651 "grammar.ec"
        break;
      case 340: /* initializer */
/* Line 1398 of yacc.c  */
#line 227 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1398 of yacc.c  */
#line 12658 "grammar.ec"
        break;
      case 341: /* initializer_error */
/* Line 1398 of yacc.c  */
#line 227 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1398 of yacc.c  */
#line 12665 "grammar.ec"
        break;
      case 342: /* initializer_condition */
/* Line 1398 of yacc.c  */
#line 227 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1398 of yacc.c  */
#line 12672 "grammar.ec"
        break;
      case 343: /* initializer_condition_error */
/* Line 1398 of yacc.c  */
#line 227 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1398 of yacc.c  */
#line 12679 "grammar.ec"
        break;
      case 344: /* initializer_list */
/* Line 1398 of yacc.c  */
#line 259 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitializer); };
/* Line 1398 of yacc.c  */
#line 12686 "grammar.ec"
        break;
      case 345: /* init_declarator */
/* Line 1398 of yacc.c  */
#line 228 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1398 of yacc.c  */
#line 12693 "grammar.ec"
        break;
      case 346: /* init_declarator_error */
/* Line 1398 of yacc.c  */
#line 228 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1398 of yacc.c  */
#line 12700 "grammar.ec"
        break;
      case 347: /* init_declarator_list */
/* Line 1398 of yacc.c  */
#line 260 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1398 of yacc.c  */
#line 12707 "grammar.ec"
        break;
      case 348: /* init_declarator_list_error */
/* Line 1398 of yacc.c  */
#line 260 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1398 of yacc.c  */
#line 12714 "grammar.ec"
        break;
      case 349: /* type_name */
/* Line 1398 of yacc.c  */
#line 229 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1398 of yacc.c  */
#line 12721 "grammar.ec"
        break;
      case 350: /* guess_type_name */
/* Line 1398 of yacc.c  */
#line 229 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1398 of yacc.c  */
#line 12728 "grammar.ec"
        break;
      case 351: /* parameter_declaration */
/* Line 1398 of yacc.c  */
#line 229 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1398 of yacc.c  */
#line 12735 "grammar.ec"
        break;
      case 352: /* parameter_declaration_error */
/* Line 1398 of yacc.c  */
#line 229 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1398 of yacc.c  */
#line 12742 "grammar.ec"
        break;
      case 353: /* parameter_list */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12749 "grammar.ec"
        break;
      case 354: /* parameter_list_error */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12756 "grammar.ec"
        break;
      case 355: /* parameter_type_list */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12763 "grammar.ec"
        break;
      case 356: /* parameter_type_list_error */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12770 "grammar.ec"
        break;
      case 357: /* statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12777 "grammar.ec"
        break;
      case 358: /* statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12784 "grammar.ec"
        break;
      case 362: /* labeled_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12791 "grammar.ec"
        break;
      case 363: /* labeled_statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12798 "grammar.ec"
        break;
      case 364: /* declaration_mode */
/* Line 1398 of yacc.c  */
#line 273 "grammar.y"
        { };
/* Line 1398 of yacc.c  */
#line 12805 "grammar.ec"
        break;
      case 366: /* declaration */
/* Line 1398 of yacc.c  */
#line 234 "grammar.y"
        { FreeDeclaration(((*yyvaluep).declaration)); };
/* Line 1398 of yacc.c  */
#line 12812 "grammar.ec"
        break;
      case 370: /* declaration_list */
/* Line 1398 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1398 of yacc.c  */
#line 12819 "grammar.ec"
        break;
      case 371: /* declaration_list_error */
/* Line 1398 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1398 of yacc.c  */
#line 12826 "grammar.ec"
        break;
      case 372: /* statement_list */
/* Line 1398 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1398 of yacc.c  */
#line 12833 "grammar.ec"
        break;
      case 373: /* statement_list_error */
/* Line 1398 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1398 of yacc.c  */
#line 12840 "grammar.ec"
        break;
      case 374: /* compound_inside */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12847 "grammar.ec"
        break;
      case 375: /* compound_inside_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12854 "grammar.ec"
        break;
      case 376: /* compound_start */
/* Line 1398 of yacc.c  */
#line 267 "grammar.y"
        { PopContext(((*yyvaluep).context)); FreeContext(((*yyvaluep).context)); delete ((*yyvaluep).context); };
/* Line 1398 of yacc.c  */
#line 12861 "grammar.ec"
        break;
      case 377: /* compound_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12868 "grammar.ec"
        break;
      case 378: /* compound_statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12875 "grammar.ec"
        break;
      case 379: /* expression_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12882 "grammar.ec"
        break;
      case 380: /* selection_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12889 "grammar.ec"
        break;
      case 381: /* selection_statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12896 "grammar.ec"
        break;
      case 382: /* iteration_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12903 "grammar.ec"
        break;
      case 383: /* iteration_statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12910 "grammar.ec"
        break;
      case 384: /* jump_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12917 "grammar.ec"
        break;
      case 385: /* jump_statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12924 "grammar.ec"
        break;
      case 386: /* function_definition */
/* Line 1398 of yacc.c  */
#line 235 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1398 of yacc.c  */
#line 12931 "grammar.ec"
        break;
      case 387: /* function_definition_error */
/* Line 1398 of yacc.c  */
#line 235 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1398 of yacc.c  */
#line 12938 "grammar.ec"
        break;
      case 388: /* string_literal */
/* Line 1398 of yacc.c  */
#line 250 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1398 of yacc.c  */
#line 12945 "grammar.ec"
        break;
      case 389: /* external_declaration */
/* Line 1398 of yacc.c  */
#line 236 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1398 of yacc.c  */
#line 12952 "grammar.ec"
        break;
      case 390: /* external_declaration_error */
/* Line 1398 of yacc.c  */
#line 236 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1398 of yacc.c  */
#line 12959 "grammar.ec"
        break;
      case 391: /* translation_unit_error */
/* Line 1398 of yacc.c  */
#line 263 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1398 of yacc.c  */
#line 12966 "grammar.ec"
        break;
      case 392: /* translation_unit */
/* Line 1398 of yacc.c  */
#line 263 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1398 of yacc.c  */
#line 12973 "grammar.ec"
        break;

      default:
        break;
    }
}




/* The lookahead symbol.  */
int yychar;


#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;


/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
/* Line 1792 of yacc.c  */
#line 286 "grammar.y"
    {
      (yyval.specifier) = null;
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   }
    break;

  case 3:
/* Line 1792 of yacc.c  */
#line 305 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   }
    break;

  case 4:
/* Line 1792 of yacc.c  */
#line 343 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 5:
/* Line 1792 of yacc.c  */
#line 345 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   }
    break;

  case 6:
/* Line 1792 of yacc.c  */
#line 424 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); }
    break;

  case 7:
/* Line 1792 of yacc.c  */
#line 428 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 9:
/* Line 1792 of yacc.c  */
#line 432 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); }
    break;

  case 10:
/* Line 1792 of yacc.c  */
#line 434 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    }
    break;

  case 11:
/* Line 1792 of yacc.c  */
#line 473 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 12:
/* Line 1792 of yacc.c  */
#line 475 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 13:
/* Line 1792 of yacc.c  */
#line 480 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (3)].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 14:
/* Line 1792 of yacc.c  */
#line 485 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (4)].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 15:
/* Line 1792 of yacc.c  */
#line 490 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 16:
/* Line 1792 of yacc.c  */
#line 492 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 17:
/* Line 1792 of yacc.c  */
#line 497 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 18:
/* Line 1792 of yacc.c  */
#line 499 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 19:
/* Line 1792 of yacc.c  */
#line 504 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 20:
/* Line 1792 of yacc.c  */
#line 506 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 21:
/* Line 1792 of yacc.c  */
#line 511 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 22:
/* Line 1792 of yacc.c  */
#line 513 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 23:
/* Line 1792 of yacc.c  */
#line 515 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 24:
/* Line 1792 of yacc.c  */
#line 517 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 25:
/* Line 1792 of yacc.c  */
#line 519 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 26:
/* Line 1792 of yacc.c  */
#line 523 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 27:
/* Line 1792 of yacc.c  */
#line 527 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      }
    break;

  case 28:
/* Line 1792 of yacc.c  */
#line 540 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 29:
/* Line 1792 of yacc.c  */
#line 542 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 30:
/* Line 1792 of yacc.c  */
#line 544 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 31:
/* Line 1792 of yacc.c  */
#line 546 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 32:
/* Line 1792 of yacc.c  */
#line 548 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 33:
/* Line 1792 of yacc.c  */
#line 554 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 34:
/* Line 1792 of yacc.c  */
#line 556 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 35:
/* Line 1792 of yacc.c  */
#line 561 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 36:
/* Line 1792 of yacc.c  */
#line 566 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 37:
/* Line 1792 of yacc.c  */
#line 571 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 38:
/* Line 1792 of yacc.c  */
#line 573 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 39:
/* Line 1792 of yacc.c  */
#line 575 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 40:
/* Line 1792 of yacc.c  */
#line 579 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 41:
/* Line 1792 of yacc.c  */
#line 580 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 42:
/* Line 1792 of yacc.c  */
#line 584 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 43:
/* Line 1792 of yacc.c  */
#line 586 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      }
    break;

  case 44:
/* Line 1792 of yacc.c  */
#line 596 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 45:
/* Line 1792 of yacc.c  */
#line 600 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 46:
/* Line 1792 of yacc.c  */
#line 602 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 47:
/* Line 1792 of yacc.c  */
#line 604 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 48:
/* Line 1792 of yacc.c  */
#line 608 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 49:
/* Line 1792 of yacc.c  */
#line 610 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 50:
/* Line 1792 of yacc.c  */
#line 612 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 51:
/* Line 1792 of yacc.c  */
#line 615 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 52:
/* Line 1792 of yacc.c  */
#line 627 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 53:
/* Line 1792 of yacc.c  */
#line 638 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      }
    break;

  case 54:
/* Line 1792 of yacc.c  */
#line 657 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 55:
/* Line 1792 of yacc.c  */
#line 659 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 56:
/* Line 1792 of yacc.c  */
#line 663 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); }
    break;

  case 57:
/* Line 1792 of yacc.c  */
#line 664 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 58:
/* Line 1792 of yacc.c  */
#line 665 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 59:
/* Line 1792 of yacc.c  */
#line 666 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 60:
/* Line 1792 of yacc.c  */
#line 667 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 61:
/* Line 1792 of yacc.c  */
#line 668 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 63:
/* Line 1792 of yacc.c  */
#line 671 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   }
    break;

  case 64:
/* Line 1792 of yacc.c  */
#line 683 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  }
    break;

  case 66:
/* Line 1792 of yacc.c  */
#line 688 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 67:
/* Line 1792 of yacc.c  */
#line 689 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 68:
/* Line 1792 of yacc.c  */
#line 690 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 69:
/* Line 1792 of yacc.c  */
#line 694 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 70:
/* Line 1792 of yacc.c  */
#line 695 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 71:
/* Line 1792 of yacc.c  */
#line 696 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 72:
/* Line 1792 of yacc.c  */
#line 697 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 73:
/* Line 1792 of yacc.c  */
#line 698 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 74:
/* Line 1792 of yacc.c  */
#line 699 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 75:
/* Line 1792 of yacc.c  */
#line 700 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 76:
/* Line 1792 of yacc.c  */
#line 705 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 77:
/* Line 1792 of yacc.c  */
#line 707 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 78:
/* Line 1792 of yacc.c  */
#line 712 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 79:
/* Line 1792 of yacc.c  */
#line 714 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 80:
/* Line 1792 of yacc.c  */
#line 716 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 81:
/* Line 1792 of yacc.c  */
#line 718 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 82:
/* Line 1792 of yacc.c  */
#line 720 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 83:
/* Line 1792 of yacc.c  */
#line 750 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 84:
/* Line 1792 of yacc.c  */
#line 752 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 85:
/* Line 1792 of yacc.c  */
#line 757 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 86:
/* Line 1792 of yacc.c  */
#line 759 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 87:
/* Line 1792 of yacc.c  */
#line 761 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 88:
/* Line 1792 of yacc.c  */
#line 763 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 89:
/* Line 1792 of yacc.c  */
#line 765 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 90:
/* Line 1792 of yacc.c  */
#line 794 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 91:
/* Line 1792 of yacc.c  */
#line 796 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 92:
/* Line 1792 of yacc.c  */
#line 798 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;}
    break;

  case 93:
/* Line 1792 of yacc.c  */
#line 803 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 94:
/* Line 1792 of yacc.c  */
#line 805 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 95:
/* Line 1792 of yacc.c  */
#line 810 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 96:
/* Line 1792 of yacc.c  */
#line 812 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 97:
/* Line 1792 of yacc.c  */
#line 816 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 98:
/* Line 1792 of yacc.c  */
#line 818 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 99:
/* Line 1792 of yacc.c  */
#line 820 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 100:
/* Line 1792 of yacc.c  */
#line 822 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 101:
/* Line 1792 of yacc.c  */
#line 827 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 102:
/* Line 1792 of yacc.c  */
#line 830 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); }
    break;

  case 103:
/* Line 1792 of yacc.c  */
#line 833 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); }
    break;

  case 104:
/* Line 1792 of yacc.c  */
#line 836 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 105:
/* Line 1792 of yacc.c  */
#line 901 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 106:
/* Line 1792 of yacc.c  */
#line 903 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 107:
/* Line 1792 of yacc.c  */
#line 908 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 108:
/* Line 1792 of yacc.c  */
#line 910 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 109:
/* Line 1792 of yacc.c  */
#line 912 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 110:
/* Line 1792 of yacc.c  */
#line 914 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 111:
/* Line 1792 of yacc.c  */
#line 916 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 112:
/* Line 1792 of yacc.c  */
#line 946 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 113:
/* Line 1792 of yacc.c  */
#line 950 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 114:
/* Line 1792 of yacc.c  */
#line 951 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; }
    break;

  case 115:
/* Line 1792 of yacc.c  */
#line 952 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 116:
/* Line 1792 of yacc.c  */
#line 956 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 117:
/* Line 1792 of yacc.c  */
#line 957 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 118:
/* Line 1792 of yacc.c  */
#line 958 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 119:
/* Line 1792 of yacc.c  */
#line 962 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 120:
/* Line 1792 of yacc.c  */
#line 963 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 121:
/* Line 1792 of yacc.c  */
#line 964 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 123:
/* Line 1792 of yacc.c  */
#line 970 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 124:
/* Line 1792 of yacc.c  */
#line 973 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 125:
/* Line 1792 of yacc.c  */
#line 976 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 126:
/* Line 1792 of yacc.c  */
#line 979 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 127:
/* Line 1792 of yacc.c  */
#line 982 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 129:
/* Line 1792 of yacc.c  */
#line 988 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 130:
/* Line 1792 of yacc.c  */
#line 990 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 131:
/* Line 1792 of yacc.c  */
#line 992 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 132:
/* Line 1792 of yacc.c  */
#line 994 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; }
    break;

  case 133:
/* Line 1792 of yacc.c  */
#line 996 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); }
    break;

  case 134:
/* Line 1792 of yacc.c  */
#line 1000 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); }
    break;

  case 135:
/* Line 1792 of yacc.c  */
#line 1005 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 136:
/* Line 1792 of yacc.c  */
#line 1008 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 137:
/* Line 1792 of yacc.c  */
#line 1011 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 138:
/* Line 1792 of yacc.c  */
#line 1014 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 139:
/* Line 1792 of yacc.c  */
#line 1017 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 141:
/* Line 1792 of yacc.c  */
#line 1023 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 142:
/* Line 1792 of yacc.c  */
#line 1025 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 143:
/* Line 1792 of yacc.c  */
#line 1029 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 144:
/* Line 1792 of yacc.c  */
#line 1034 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); }
    break;

  case 145:
/* Line 1792 of yacc.c  */
#line 1036 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); }
    break;

  case 146:
/* Line 1792 of yacc.c  */
#line 1041 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 147:
/* Line 1792 of yacc.c  */
#line 1043 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); }
    break;

  case 148:
/* Line 1792 of yacc.c  */
#line 1048 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); }
    break;

  case 149:
/* Line 1792 of yacc.c  */
#line 1050 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); }
    break;

  case 150:
/* Line 1792 of yacc.c  */
#line 1055 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); }
    break;

  case 151:
/* Line 1792 of yacc.c  */
#line 1060 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); }
    break;

  case 152:
/* Line 1792 of yacc.c  */
#line 1062 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); }
    break;

  case 153:
/* Line 1792 of yacc.c  */
#line 1067 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); }
    break;

  case 154:
/* Line 1792 of yacc.c  */
#line 1069 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); }
    break;

  case 155:
/* Line 1792 of yacc.c  */
#line 1071 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); }
    break;

  case 156:
/* Line 1792 of yacc.c  */
#line 1073 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); }
    break;

  case 157:
/* Line 1792 of yacc.c  */
#line 1078 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); }
    break;

  case 158:
/* Line 1792 of yacc.c  */
#line 1080 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); }
    break;

  case 159:
/* Line 1792 of yacc.c  */
#line 1082 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); }
    break;

  case 160:
/* Line 1792 of yacc.c  */
#line 1084 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); }
    break;

  case 161:
/* Line 1792 of yacc.c  */
#line 1088 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 162:
/* Line 1792 of yacc.c  */
#line 1089 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); }
    break;

  case 163:
/* Line 1792 of yacc.c  */
#line 1090 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 164:
/* Line 1792 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 165:
/* Line 1792 of yacc.c  */
#line 1092 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 166:
/* Line 1792 of yacc.c  */
#line 1093 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 167:
/* Line 1792 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); }
    break;

  case 168:
/* Line 1792 of yacc.c  */
#line 1095 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; }
    break;

  case 169:
/* Line 1792 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); }
    break;

  case 170:
/* Line 1792 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); }
    break;

  case 171:
/* Line 1792 of yacc.c  */
#line 1098 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); }
    break;

  case 172:
/* Line 1792 of yacc.c  */
#line 1100 "grammar.y"
    { (yyval.classDef) = null; }
    break;

  case 173:
/* Line 1792 of yacc.c  */
#line 1101 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; }
    break;

  case 174:
/* Line 1792 of yacc.c  */
#line 1103 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); }
    break;

  case 175:
/* Line 1792 of yacc.c  */
#line 1107 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 176:
/* Line 1792 of yacc.c  */
#line 1110 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 177:
/* Line 1792 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 178:
/* Line 1792 of yacc.c  */
#line 1112 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 179:
/* Line 1792 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 180:
/* Line 1792 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 181:
/* Line 1792 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 182:
/* Line 1792 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); }
    break;

  case 183:
/* Line 1792 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); }
    break;

  case 184:
/* Line 1792 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 185:
/* Line 1792 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 186:
/* Line 1792 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); }
    break;

  case 187:
/* Line 1792 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 188:
/* Line 1792 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 189:
/* Line 1792 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); }
    break;

  case 190:
/* Line 1792 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 191:
/* Line 1792 of yacc.c  */
#line 1126 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 192:
/* Line 1792 of yacc.c  */
#line 1130 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 193:
/* Line 1792 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 194:
/* Line 1792 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 195:
/* Line 1792 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; }
    break;

  case 196:
/* Line 1792 of yacc.c  */
#line 1140 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 197:
/* Line 1792 of yacc.c  */
#line 1141 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 198:
/* Line 1792 of yacc.c  */
#line 1142 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 199:
/* Line 1792 of yacc.c  */
#line 1146 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 202:
/* Line 1792 of yacc.c  */
#line 1149 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 203:
/* Line 1792 of yacc.c  */
#line 1150 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 204:
/* Line 1792 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); }
    break;

  case 205:
/* Line 1792 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 206:
/* Line 1792 of yacc.c  */
#line 1167 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); }
    break;

  case 207:
/* Line 1792 of yacc.c  */
#line 1168 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); }
    break;

  case 208:
/* Line 1792 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); }
    break;

  case 209:
/* Line 1792 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 210:
/* Line 1792 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 211:
/* Line 1792 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 212:
/* Line 1792 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); }
    break;

  case 213:
/* Line 1792 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 214:
/* Line 1792 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 215:
/* Line 1792 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 216:
/* Line 1792 of yacc.c  */
#line 1183 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); }
    break;

  case 217:
/* Line 1792 of yacc.c  */
#line 1187 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); }
    break;

  case 218:
/* Line 1792 of yacc.c  */
#line 1188 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 219:
/* Line 1792 of yacc.c  */
#line 1192 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); }
    break;

  case 220:
/* Line 1792 of yacc.c  */
#line 1200 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 221:
/* Line 1792 of yacc.c  */
#line 1201 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); }
    break;

  case 225:
/* Line 1792 of yacc.c  */
#line 1211 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); }
    break;

  case 226:
/* Line 1792 of yacc.c  */
#line 1212 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); }
    break;

  case 230:
/* Line 1792 of yacc.c  */
#line 1219 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 231:
/* Line 1792 of yacc.c  */
#line 1220 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 232:
/* Line 1792 of yacc.c  */
#line 1221 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 233:
/* Line 1792 of yacc.c  */
#line 1261 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); }
    break;

  case 234:
/* Line 1792 of yacc.c  */
#line 1262 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 235:
/* Line 1792 of yacc.c  */
#line 1267 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   }
    break;

  case 236:
/* Line 1792 of yacc.c  */
#line 1274 "grammar.y"
    { (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 237:
/* Line 1792 of yacc.c  */
#line 1276 "grammar.y"
    {
      (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 238:
/* Line 1792 of yacc.c  */
#line 1283 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (3)].id)._class, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 239:
/* Line 1792 of yacc.c  */
#line 1284 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (3)].specifier).nsSpec, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 240:
/* Line 1792 of yacc.c  */
#line 1286 "grammar.y"
    { (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 241:
/* Line 1792 of yacc.c  */
#line 1288 "grammar.y"
    {
      (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (5)].specifier).nsSpec, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 242:
/* Line 1792 of yacc.c  */
#line 1296 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 243:
/* Line 1792 of yacc.c  */
#line 1297 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 244:
/* Line 1792 of yacc.c  */
#line 1302 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      }
    break;

  case 245:
/* Line 1792 of yacc.c  */
#line 1309 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 246:
/* Line 1792 of yacc.c  */
#line 1316 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 247:
/* Line 1792 of yacc.c  */
#line 1322 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 248:
/* Line 1792 of yacc.c  */
#line 1329 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[(2) - (3)].id)._class, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 249:
/* Line 1792 of yacc.c  */
#line 1335 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass((yyvsp[(2) - (3)].specifier).nsSpec, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 250:
/* Line 1792 of yacc.c  */
#line 1344 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      }
    break;

  case 251:
/* Line 1792 of yacc.c  */
#line 1351 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 252:
/* Line 1792 of yacc.c  */
#line 1357 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 253:
/* Line 1792 of yacc.c  */
#line 1363 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 254:
/* Line 1792 of yacc.c  */
#line 1369 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 255:
/* Line 1792 of yacc.c  */
#line 1375 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 256:
/* Line 1792 of yacc.c  */
#line 1381 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 257:
/* Line 1792 of yacc.c  */
#line 1392 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); }
    break;

  case 259:
/* Line 1792 of yacc.c  */
#line 1398 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 260:
/* Line 1792 of yacc.c  */
#line 1402 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 261:
/* Line 1792 of yacc.c  */
#line 1403 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 262:
/* Line 1792 of yacc.c  */
#line 1404 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 263:
/* Line 1792 of yacc.c  */
#line 1408 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 264:
/* Line 1792 of yacc.c  */
#line 1412 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 265:
/* Line 1792 of yacc.c  */
#line 1413 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 266:
/* Line 1792 of yacc.c  */
#line 1414 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); }
    break;

  case 267:
/* Line 1792 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 268:
/* Line 1792 of yacc.c  */
#line 1416 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 269:
/* Line 1792 of yacc.c  */
#line 1417 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); }
    break;

  case 270:
/* Line 1792 of yacc.c  */
#line 1419 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   }
    break;

  case 271:
/* Line 1792 of yacc.c  */
#line 1431 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); }
    break;

  case 273:
/* Line 1792 of yacc.c  */
#line 1433 "grammar.y"
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 274:
/* Line 1792 of yacc.c  */
#line 1434 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); }
    break;

  case 275:
/* Line 1792 of yacc.c  */
#line 1435 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 276:
/* Line 1792 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 277:
/* Line 1792 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 278:
/* Line 1792 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 279:
/* Line 1792 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 280:
/* Line 1792 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 281:
/* Line 1792 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 282:
/* Line 1792 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 283:
/* Line 1792 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 284:
/* Line 1792 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 285:
/* Line 1792 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 286:
/* Line 1792 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 287:
/* Line 1792 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 288:
/* Line 1792 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 289:
/* Line 1792 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 290:
/* Line 1792 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 291:
/* Line 1792 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); }
    break;

  case 292:
/* Line 1792 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); }
    break;

  case 293:
/* Line 1792 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 294:
/* Line 1792 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 295:
/* Line 1792 of yacc.c  */
#line 1456 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 300:
/* Line 1792 of yacc.c  */
#line 1462 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 301:
/* Line 1792 of yacc.c  */
#line 1463 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); }
    break;

  case 302:
/* Line 1792 of yacc.c  */
#line 1467 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 303:
/* Line 1792 of yacc.c  */
#line 1471 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 304:
/* Line 1792 of yacc.c  */
#line 1475 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 305:
/* Line 1792 of yacc.c  */
#line 1476 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 307:
/* Line 1792 of yacc.c  */
#line 1482 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 308:
/* Line 1792 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 309:
/* Line 1792 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 310:
/* Line 1792 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 311:
/* Line 1792 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; }
    break;

  case 312:
/* Line 1792 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 313:
/* Line 1792 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 314:
/* Line 1792 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 315:
/* Line 1792 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 316:
/* Line 1792 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 317:
/* Line 1792 of yacc.c  */
#line 1493 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 318:
/* Line 1792 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 319:
/* Line 1792 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); }
    break;

  case 320:
/* Line 1792 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 321:
/* Line 1792 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 322:
/* Line 1792 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 323:
/* Line 1792 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 324:
/* Line 1792 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 325:
/* Line 1792 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 326:
/* Line 1792 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 327:
/* Line 1792 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 328:
/* Line 1792 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 329:
/* Line 1792 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 330:
/* Line 1792 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 331:
/* Line 1792 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 332:
/* Line 1792 of yacc.c  */
#line 1537 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); }
    break;

  case 333:
/* Line 1792 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 334:
/* Line 1792 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 335:
/* Line 1792 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 336:
/* Line 1792 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 337:
/* Line 1792 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 338:
/* Line 1792 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 339:
/* Line 1792 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 340:
/* Line 1792 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 341:
/* Line 1792 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 342:
/* Line 1792 of yacc.c  */
#line 1553 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 343:
/* Line 1792 of yacc.c  */
#line 1555 "grammar.y"
    { (yyval.exp) = MkExpOffsetOf((yyvsp[(3) - (6)].typeName), (yyvsp[(5) - (6)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 346:
/* Line 1792 of yacc.c  */
#line 1569 "grammar.y"
    { (yyval.i) = '&'; }
    break;

  case 347:
/* Line 1792 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.i) = '*'; }
    break;

  case 348:
/* Line 1792 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.i) = '+'; }
    break;

  case 349:
/* Line 1792 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.i) = '-'; }
    break;

  case 350:
/* Line 1792 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.i) = '~'; }
    break;

  case 351:
/* Line 1792 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.i) = '!'; }
    break;

  case 352:
/* Line 1792 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.i) = DELETE; }
    break;

  case 353:
/* Line 1792 of yacc.c  */
#line 1576 "grammar.y"
    { (yyval.i) = _INCREF; }
    break;

  case 355:
/* Line 1792 of yacc.c  */
#line 1581 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 357:
/* Line 1792 of yacc.c  */
#line 1586 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 358:
/* Line 1792 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 359:
/* Line 1792 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 360:
/* Line 1792 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 361:
/* Line 1792 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 362:
/* Line 1792 of yacc.c  */
#line 1591 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 364:
/* Line 1792 of yacc.c  */
#line 1596 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 365:
/* Line 1792 of yacc.c  */
#line 1597 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 366:
/* Line 1792 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 367:
/* Line 1792 of yacc.c  */
#line 1599 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 369:
/* Line 1792 of yacc.c  */
#line 1604 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 370:
/* Line 1792 of yacc.c  */
#line 1605 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 371:
/* Line 1792 of yacc.c  */
#line 1606 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 372:
/* Line 1792 of yacc.c  */
#line 1607 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 373:
/* Line 1792 of yacc.c  */
#line 1612 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   }
    break;

  case 375:
/* Line 1792 of yacc.c  */
#line 1620 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); }
    break;

  case 376:
/* Line 1792 of yacc.c  */
#line 1621 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 377:
/* Line 1792 of yacc.c  */
#line 1622 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 378:
/* Line 1792 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 379:
/* Line 1792 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 380:
/* Line 1792 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 381:
/* Line 1792 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 382:
/* Line 1792 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 384:
/* Line 1792 of yacc.c  */
#line 1632 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 385:
/* Line 1792 of yacc.c  */
#line 1633 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 386:
/* Line 1792 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 387:
/* Line 1792 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 388:
/* Line 1792 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 389:
/* Line 1792 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 390:
/* Line 1792 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 391:
/* Line 1792 of yacc.c  */
#line 1640 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 393:
/* Line 1792 of yacc.c  */
#line 1645 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 394:
/* Line 1792 of yacc.c  */
#line 1646 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 395:
/* Line 1792 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 396:
/* Line 1792 of yacc.c  */
#line 1649 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 398:
/* Line 1792 of yacc.c  */
#line 1654 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 399:
/* Line 1792 of yacc.c  */
#line 1655 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 400:
/* Line 1792 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 401:
/* Line 1792 of yacc.c  */
#line 1658 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 403:
/* Line 1792 of yacc.c  */
#line 1663 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 404:
/* Line 1792 of yacc.c  */
#line 1664 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 405:
/* Line 1792 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 406:
/* Line 1792 of yacc.c  */
#line 1667 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 408:
/* Line 1792 of yacc.c  */
#line 1672 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 409:
/* Line 1792 of yacc.c  */
#line 1673 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 411:
/* Line 1792 of yacc.c  */
#line 1678 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 412:
/* Line 1792 of yacc.c  */
#line 1679 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 414:
/* Line 1792 of yacc.c  */
#line 1684 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 415:
/* Line 1792 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 416:
/* Line 1792 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 417:
/* Line 1792 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 418:
/* Line 1792 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 419:
/* Line 1792 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 420:
/* Line 1792 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 421:
/* Line 1792 of yacc.c  */
#line 1692 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 422:
/* Line 1792 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 423:
/* Line 1792 of yacc.c  */
#line 1695 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 424:
/* Line 1792 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 425:
/* Line 1792 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 426:
/* Line 1792 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 427:
/* Line 1792 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 428:
/* Line 1792 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 429:
/* Line 1792 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 431:
/* Line 1792 of yacc.c  */
#line 1707 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 432:
/* Line 1792 of yacc.c  */
#line 1708 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 433:
/* Line 1792 of yacc.c  */
#line 1709 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 434:
/* Line 1792 of yacc.c  */
#line 1710 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 435:
/* Line 1792 of yacc.c  */
#line 1712 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 436:
/* Line 1792 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 437:
/* Line 1792 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 438:
/* Line 1792 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 439:
/* Line 1792 of yacc.c  */
#line 1719 "grammar.y"
    { (yyval.i) = '='; }
    break;

  case 440:
/* Line 1792 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; }
    break;

  case 441:
/* Line 1792 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; }
    break;

  case 442:
/* Line 1792 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; }
    break;

  case 443:
/* Line 1792 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; }
    break;

  case 444:
/* Line 1792 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; }
    break;

  case 445:
/* Line 1792 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; }
    break;

  case 446:
/* Line 1792 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; }
    break;

  case 447:
/* Line 1792 of yacc.c  */
#line 1727 "grammar.y"
    { (yyval.i) = AND_ASSIGN; }
    break;

  case 448:
/* Line 1792 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; }
    break;

  case 449:
/* Line 1792 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.i) = OR_ASSIGN; }
    break;

  case 450:
/* Line 1792 of yacc.c  */
#line 1733 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 451:
/* Line 1792 of yacc.c  */
#line 1734 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 452:
/* Line 1792 of yacc.c  */
#line 1735 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 454:
/* Line 1792 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 455:
/* Line 1792 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 456:
/* Line 1792 of yacc.c  */
#line 1742 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 458:
/* Line 1792 of yacc.c  */
#line 1747 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ }
    break;

  case 460:
/* Line 1792 of yacc.c  */
#line 1749 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 461:
/* Line 1792 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 462:
/* Line 1792 of yacc.c  */
#line 1752 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 463:
/* Line 1792 of yacc.c  */
#line 1754 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 464:
/* Line 1792 of yacc.c  */
#line 1755 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 465:
/* Line 1792 of yacc.c  */
#line 1760 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 466:
/* Line 1792 of yacc.c  */
#line 1762 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 467:
/* Line 1792 of yacc.c  */
#line 1767 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 468:
/* Line 1792 of yacc.c  */
#line 1795 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 469:
/* Line 1792 of yacc.c  */
#line 1796 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 470:
/* Line 1792 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 471:
/* Line 1792 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 472:
/* Line 1792 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 473:
/* Line 1792 of yacc.c  */
#line 1801 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 474:
/* Line 1792 of yacc.c  */
#line 1802 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 475:
/* Line 1792 of yacc.c  */
#line 1803 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 476:
/* Line 1792 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 477:
/* Line 1792 of yacc.c  */
#line 1806 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 481:
/* Line 1792 of yacc.c  */
#line 1821 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 483:
/* Line 1792 of yacc.c  */
#line 1826 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 484:
/* Line 1792 of yacc.c  */
#line 1827 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 485:
/* Line 1792 of yacc.c  */
#line 1828 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 486:
/* Line 1792 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 487:
/* Line 1792 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 488:
/* Line 1792 of yacc.c  */
#line 1831 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 490:
/* Line 1792 of yacc.c  */
#line 1836 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 491:
/* Line 1792 of yacc.c  */
#line 1840 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 492:
/* Line 1792 of yacc.c  */
#line 1844 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 493:
/* Line 1792 of yacc.c  */
#line 1848 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 495:
/* Line 1792 of yacc.c  */
#line 1856 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 496:
/* Line 1792 of yacc.c  */
#line 1857 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 497:
/* Line 1792 of yacc.c  */
#line 1858 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 498:
/* Line 1792 of yacc.c  */
#line 1859 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 500:
/* Line 1792 of yacc.c  */
#line 1865 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         _DeclClass((yyvsp[(1) - (2)].exp).identifier._class, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   }
    break;

  case 501:
/* Line 1792 of yacc.c  */
#line 1907 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 502:
/* Line 1792 of yacc.c  */
#line 1908 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 503:
/* Line 1792 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 504:
/* Line 1792 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 505:
/* Line 1792 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 506:
/* Line 1792 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 507:
/* Line 1792 of yacc.c  */
#line 1913 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 509:
/* Line 1792 of yacc.c  */
#line 1918 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 510:
/* Line 1792 of yacc.c  */
#line 1919 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 511:
/* Line 1792 of yacc.c  */
#line 1920 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 512:
/* Line 1792 of yacc.c  */
#line 1921 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 513:
/* Line 1792 of yacc.c  */
#line 1928 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 514:
/* Line 1792 of yacc.c  */
#line 1929 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 515:
/* Line 1792 of yacc.c  */
#line 1930 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 516:
/* Line 1792 of yacc.c  */
#line 1931 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 518:
/* Line 1792 of yacc.c  */
#line 1936 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 519:
/* Line 1792 of yacc.c  */
#line 1937 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 520:
/* Line 1792 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 521:
/* Line 1792 of yacc.c  */
#line 1940 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 523:
/* Line 1792 of yacc.c  */
#line 1945 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 524:
/* Line 1792 of yacc.c  */
#line 1946 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 525:
/* Line 1792 of yacc.c  */
#line 1948 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 526:
/* Line 1792 of yacc.c  */
#line 1949 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 528:
/* Line 1792 of yacc.c  */
#line 1954 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 529:
/* Line 1792 of yacc.c  */
#line 1955 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 530:
/* Line 1792 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 531:
/* Line 1792 of yacc.c  */
#line 1958 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 533:
/* Line 1792 of yacc.c  */
#line 1963 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 534:
/* Line 1792 of yacc.c  */
#line 1964 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 536:
/* Line 1792 of yacc.c  */
#line 1969 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 537:
/* Line 1792 of yacc.c  */
#line 1970 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 539:
/* Line 1792 of yacc.c  */
#line 1975 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 540:
/* Line 1792 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 541:
/* Line 1792 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 542:
/* Line 1792 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 543:
/* Line 1792 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 544:
/* Line 1792 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 545:
/* Line 1792 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 546:
/* Line 1792 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 547:
/* Line 1792 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 548:
/* Line 1792 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 549:
/* Line 1792 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 550:
/* Line 1792 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 551:
/* Line 1792 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 552:
/* Line 1792 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 553:
/* Line 1792 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 554:
/* Line 1792 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 555:
/* Line 1792 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 556:
/* Line 1792 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 557:
/* Line 1792 of yacc.c  */
#line 1995 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 558:
/* Line 1792 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 559:
/* Line 1792 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 560:
/* Line 1792 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 561:
/* Line 1792 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 562:
/* Line 1792 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 563:
/* Line 1792 of yacc.c  */
#line 2004 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 564:
/* Line 1792 of yacc.c  */
#line 2012 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 565:
/* Line 1792 of yacc.c  */
#line 2016 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 566:
/* Line 1792 of yacc.c  */
#line 2021 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 568:
/* Line 1792 of yacc.c  */
#line 2028 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 569:
/* Line 1792 of yacc.c  */
#line 2032 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 570:
/* Line 1792 of yacc.c  */
#line 2037 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 571:
/* Line 1792 of yacc.c  */
#line 2038 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 572:
/* Line 1792 of yacc.c  */
#line 2042 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 573:
/* Line 1792 of yacc.c  */
#line 2043 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 574:
/* Line 1792 of yacc.c  */
#line 2044 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 575:
/* Line 1792 of yacc.c  */
#line 2045 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 576:
/* Line 1792 of yacc.c  */
#line 2051 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 577:
/* Line 1792 of yacc.c  */
#line 2052 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 578:
/* Line 1792 of yacc.c  */
#line 2053 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 579:
/* Line 1792 of yacc.c  */
#line 2057 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 580:
/* Line 1792 of yacc.c  */
#line 2058 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 581:
/* Line 1792 of yacc.c  */
#line 2059 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 582:
/* Line 1792 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 585:
/* Line 1792 of yacc.c  */
#line 2070 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); }
    break;

  case 586:
/* Line 1792 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 587:
/* Line 1792 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); }
    break;

  case 588:
/* Line 1792 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 589:
/* Line 1792 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 590:
/* Line 1792 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 591:
/* Line 1792 of yacc.c  */
#line 2076 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 592:
/* Line 1792 of yacc.c  */
#line 2080 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; }
    break;

  case 593:
/* Line 1792 of yacc.c  */
#line 2081 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 594:
/* Line 1792 of yacc.c  */
#line 2082 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; }
    break;

  case 595:
/* Line 1792 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 596:
/* Line 1792 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 597:
/* Line 1792 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 598:
/* Line 1792 of yacc.c  */
#line 2086 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 599:
/* Line 1792 of yacc.c  */
#line 2090 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null, null); }
    break;

  case 600:
/* Line 1792 of yacc.c  */
#line 2091 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 601:
/* Line 1792 of yacc.c  */
#line 2092 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 602:
/* Line 1792 of yacc.c  */
#line 2093 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (2)].id), null, (yyvsp[(2) - (2)].list)); }
    break;

  case 603:
/* Line 1792 of yacc.c  */
#line 2094 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 604:
/* Line 1792 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 605:
/* Line 1792 of yacc.c  */
#line 2099 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); }
    break;

  case 606:
/* Line 1792 of yacc.c  */
#line 2100 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); }
    break;

  case 608:
/* Line 1792 of yacc.c  */
#line 2105 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 609:
/* Line 1792 of yacc.c  */
#line 2109 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 610:
/* Line 1792 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS; }
    break;

  case 611:
/* Line 1792 of yacc.c  */
#line 2114 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); }
    break;

  case 612:
/* Line 1792 of yacc.c  */
#line 2115 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 613:
/* Line 1792 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 614:
/* Line 1792 of yacc.c  */
#line 2120 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 615:
/* Line 1792 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 616:
/* Line 1792 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 617:
/* Line 1792 of yacc.c  */
#line 2124 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 618:
/* Line 1792 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 619:
/* Line 1792 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 620:
/* Line 1792 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 621:
/* Line 1792 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 622:
/* Line 1792 of yacc.c  */
#line 2130 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 623:
/* Line 1792 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 624:
/* Line 1792 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 625:
/* Line 1792 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 626:
/* Line 1792 of yacc.c  */
#line 2135 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 627:
/* Line 1792 of yacc.c  */
#line 2136 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 628:
/* Line 1792 of yacc.c  */
#line 2140 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); }
    break;

  case 629:
/* Line 1792 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 630:
/* Line 1792 of yacc.c  */
#line 2145 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 631:
/* Line 1792 of yacc.c  */
#line 2146 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 632:
/* Line 1792 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 633:
/* Line 1792 of yacc.c  */
#line 2151 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 634:
/* Line 1792 of yacc.c  */
#line 2152 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 635:
/* Line 1792 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 636:
/* Line 1792 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 637:
/* Line 1792 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 638:
/* Line 1792 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 639:
/* Line 1792 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 640:
/* Line 1792 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 641:
/* Line 1792 of yacc.c  */
#line 2159 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 642:
/* Line 1792 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 643:
/* Line 1792 of yacc.c  */
#line 2162 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 644:
/* Line 1792 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 645:
/* Line 1792 of yacc.c  */
#line 2165 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 646:
/* Line 1792 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 647:
/* Line 1792 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 648:
/* Line 1792 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 649:
/* Line 1792 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 650:
/* Line 1792 of yacc.c  */
#line 2171 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 651:
/* Line 1792 of yacc.c  */
#line 2172 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 652:
/* Line 1792 of yacc.c  */
#line 2173 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 657:
/* Line 1792 of yacc.c  */
#line 2187 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); }
    break;

  case 658:
/* Line 1792 of yacc.c  */
#line 2191 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); }
    break;

  case 659:
/* Line 1792 of yacc.c  */
#line 2192 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); }
    break;

  case 660:
/* Line 1792 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 661:
/* Line 1792 of yacc.c  */
#line 2198 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 662:
/* Line 1792 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  }
    break;

  case 663:
/* Line 1792 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 664:
/* Line 1792 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 665:
/* Line 1792 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 666:
/* Line 1792 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 667:
/* Line 1792 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 668:
/* Line 1792 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 669:
/* Line 1792 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 670:
/* Line 1792 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 671:
/* Line 1792 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 672:
/* Line 1792 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 673:
/* Line 1792 of yacc.c  */
#line 2213 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 674:
/* Line 1792 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 675:
/* Line 1792 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 676:
/* Line 1792 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 677:
/* Line 1792 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 681:
/* Line 1792 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 682:
/* Line 1792 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 683:
/* Line 1792 of yacc.c  */
#line 2223 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 684:
/* Line 1792 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 685:
/* Line 1792 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); }
    break;

  case 686:
/* Line 1792 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); }
    break;

  case 687:
/* Line 1792 of yacc.c  */
#line 2227 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 688:
/* Line 1792 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 689:
/* Line 1792 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 690:
/* Line 1792 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 691:
/* Line 1792 of yacc.c  */
#line 2234 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 692:
/* Line 1792 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 693:
/* Line 1792 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 694:
/* Line 1792 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 695:
/* Line 1792 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 696:
/* Line 1792 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 697:
/* Line 1792 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 698:
/* Line 1792 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 699:
/* Line 1792 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 700:
/* Line 1792 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 701:
/* Line 1792 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 702:
/* Line 1792 of yacc.c  */
#line 2245 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 703:
/* Line 1792 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 704:
/* Line 1792 of yacc.c  */
#line 2247 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 705:
/* Line 1792 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 709:
/* Line 1792 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 710:
/* Line 1792 of yacc.c  */
#line 2253 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 711:
/* Line 1792 of yacc.c  */
#line 2254 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 712:
/* Line 1792 of yacc.c  */
#line 2255 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 713:
/* Line 1792 of yacc.c  */
#line 2256 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 714:
/* Line 1792 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 715:
/* Line 1792 of yacc.c  */
#line 2258 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 716:
/* Line 1792 of yacc.c  */
#line 2259 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 717:
/* Line 1792 of yacc.c  */
#line 2266 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); }
    break;

  case 718:
/* Line 1792 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); }
    break;

  case 719:
/* Line 1792 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 720:
/* Line 1792 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 721:
/* Line 1792 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 722:
/* Line 1792 of yacc.c  */
#line 2276 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 723:
/* Line 1792 of yacc.c  */
#line 2278 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 724:
/* Line 1792 of yacc.c  */
#line 2280 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 725:
/* Line 1792 of yacc.c  */
#line 2282 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 726:
/* Line 1792 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 727:
/* Line 1792 of yacc.c  */
#line 2288 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); }
    break;

  case 728:
/* Line 1792 of yacc.c  */
#line 2289 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); }
    break;

  case 729:
/* Line 1792 of yacc.c  */
#line 2294 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 730:
/* Line 1792 of yacc.c  */
#line 2300 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      }
    break;

  case 731:
/* Line 1792 of yacc.c  */
#line 2306 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 732:
/* Line 1792 of yacc.c  */
#line 2313 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      }
    break;

  case 733:
/* Line 1792 of yacc.c  */
#line 2322 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 734:
/* Line 1792 of yacc.c  */
#line 2323 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 735:
/* Line 1792 of yacc.c  */
#line 2324 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 736:
/* Line 1792 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 737:
/* Line 1792 of yacc.c  */
#line 2329 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 738:
/* Line 1792 of yacc.c  */
#line 2330 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 739:
/* Line 1792 of yacc.c  */
#line 2331 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 740:
/* Line 1792 of yacc.c  */
#line 2333 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 741:
/* Line 1792 of yacc.c  */
#line 2334 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 742:
/* Line 1792 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 743:
/* Line 1792 of yacc.c  */
#line 2337 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 744:
/* Line 1792 of yacc.c  */
#line 2338 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 745:
/* Line 1792 of yacc.c  */
#line 2339 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 746:
/* Line 1792 of yacc.c  */
#line 2343 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 747:
/* Line 1792 of yacc.c  */
#line 2348 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (1)].specifier).id._class, (yyvsp[(1) - (1)].specifier).id.string);
        }
     }
    break;

  case 748:
/* Line 1792 of yacc.c  */
#line 2356 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (4)].specifier).id._class, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   }
    break;

  case 749:
/* Line 1792 of yacc.c  */
#line 2365 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   }
    break;

  case 750:
/* Line 1792 of yacc.c  */
#line 2373 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 751:
/* Line 1792 of yacc.c  */
#line 2375 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 752:
/* Line 1792 of yacc.c  */
#line 2376 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 753:
/* Line 1792 of yacc.c  */
#line 2377 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 754:
/* Line 1792 of yacc.c  */
#line 2382 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 755:
/* Line 1792 of yacc.c  */
#line 2389 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 756:
/* Line 1792 of yacc.c  */
#line 2396 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);}
    break;

  case 757:
/* Line 1792 of yacc.c  */
#line 2399 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 758:
/* Line 1792 of yacc.c  */
#line 2412 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 759:
/* Line 1792 of yacc.c  */
#line 2426 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 760:
/* Line 1792 of yacc.c  */
#line 2429 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS;  }
    break;

  case 761:
/* Line 1792 of yacc.c  */
#line 2431 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 762:
/* Line 1792 of yacc.c  */
#line 2433 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 763:
/* Line 1792 of yacc.c  */
#line 2437 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 764:
/* Line 1792 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 765:
/* Line 1792 of yacc.c  */
#line 2442 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 766:
/* Line 1792 of yacc.c  */
#line 2443 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 767:
/* Line 1792 of yacc.c  */
#line 2444 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 768:
/* Line 1792 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 769:
/* Line 1792 of yacc.c  */
#line 2446 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 770:
/* Line 1792 of yacc.c  */
#line 2447 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 771:
/* Line 1792 of yacc.c  */
#line 2448 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 772:
/* Line 1792 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 773:
/* Line 1792 of yacc.c  */
#line 2453 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 774:
/* Line 1792 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 775:
/* Line 1792 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 776:
/* Line 1792 of yacc.c  */
#line 2456 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 777:
/* Line 1792 of yacc.c  */
#line 2457 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 778:
/* Line 1792 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 779:
/* Line 1792 of yacc.c  */
#line 2459 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 780:
/* Line 1792 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 781:
/* Line 1792 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 782:
/* Line 1792 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 783:
/* Line 1792 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 784:
/* Line 1792 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 785:
/* Line 1792 of yacc.c  */
#line 2468 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 786:
/* Line 1792 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 787:
/* Line 1792 of yacc.c  */
#line 2470 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 788:
/* Line 1792 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 789:
/* Line 1792 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 790:
/* Line 1792 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 791:
/* Line 1792 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 792:
/* Line 1792 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 793:
/* Line 1792 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 794:
/* Line 1792 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 795:
/* Line 1792 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 796:
/* Line 1792 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 797:
/* Line 1792 of yacc.c  */
#line 2483 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 798:
/* Line 1792 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 799:
/* Line 1792 of yacc.c  */
#line 2485 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 800:
/* Line 1792 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 801:
/* Line 1792 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 802:
/* Line 1792 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 803:
/* Line 1792 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 804:
/* Line 1792 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 805:
/* Line 1792 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 806:
/* Line 1792 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 807:
/* Line 1792 of yacc.c  */
#line 2496 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 808:
/* Line 1792 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 809:
/* Line 1792 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 810:
/* Line 1792 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 811:
/* Line 1792 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 812:
/* Line 1792 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 813:
/* Line 1792 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 814:
/* Line 1792 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 815:
/* Line 1792 of yacc.c  */
#line 2507 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 816:
/* Line 1792 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 817:
/* Line 1792 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); }
    break;

  case 818:
/* Line 1792 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); }
    break;

  case 819:
/* Line 1792 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 820:
/* Line 1792 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 821:
/* Line 1792 of yacc.c  */
#line 2516 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 822:
/* Line 1792 of yacc.c  */
#line 2517 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 823:
/* Line 1792 of yacc.c  */
#line 2518 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 824:
/* Line 1792 of yacc.c  */
#line 2519 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 825:
/* Line 1792 of yacc.c  */
#line 2521 "grammar.y"
    { _DeclClass((yyvsp[(1) - (1)].id)._class, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 826:
/* Line 1792 of yacc.c  */
#line 2522 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 827:
/* Line 1792 of yacc.c  */
#line 2525 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 828:
/* Line 1792 of yacc.c  */
#line 2533 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 830:
/* Line 1792 of yacc.c  */
#line 2543 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS; }
    break;

  case 831:
/* Line 1792 of yacc.c  */
#line 2547 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 832:
/* Line 1792 of yacc.c  */
#line 2548 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 833:
/* Line 1792 of yacc.c  */
#line 2549 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 834:
/* Line 1792 of yacc.c  */
#line 2550 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 835:
/* Line 1792 of yacc.c  */
#line 2551 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 836:
/* Line 1792 of yacc.c  */
#line 2552 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 837:
/* Line 1792 of yacc.c  */
#line 2553 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 838:
/* Line 1792 of yacc.c  */
#line 2554 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 839:
/* Line 1792 of yacc.c  */
#line 2556 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 840:
/* Line 1792 of yacc.c  */
#line 2564 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 841:
/* Line 1792 of yacc.c  */
#line 2572 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 842:
/* Line 1792 of yacc.c  */
#line 2573 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 843:
/* Line 1792 of yacc.c  */
#line 2574 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 844:
/* Line 1792 of yacc.c  */
#line 2575 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 845:
/* Line 1792 of yacc.c  */
#line 2576 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 846:
/* Line 1792 of yacc.c  */
#line 2577 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 847:
/* Line 1792 of yacc.c  */
#line 2578 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 848:
/* Line 1792 of yacc.c  */
#line 2579 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 849:
/* Line 1792 of yacc.c  */
#line 2580 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 850:
/* Line 1792 of yacc.c  */
#line 2581 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 851:
/* Line 1792 of yacc.c  */
#line 2582 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 852:
/* Line 1792 of yacc.c  */
#line 2583 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 853:
/* Line 1792 of yacc.c  */
#line 2585 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 854:
/* Line 1792 of yacc.c  */
#line 2593 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 855:
/* Line 1792 of yacc.c  */
#line 2601 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 856:
/* Line 1792 of yacc.c  */
#line 2602 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 857:
/* Line 1792 of yacc.c  */
#line 2603 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 858:
/* Line 1792 of yacc.c  */
#line 2604 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 859:
/* Line 1792 of yacc.c  */
#line 2605 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 860:
/* Line 1792 of yacc.c  */
#line 2606 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 861:
/* Line 1792 of yacc.c  */
#line 2607 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 862:
/* Line 1792 of yacc.c  */
#line 2608 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 863:
/* Line 1792 of yacc.c  */
#line 2609 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 864:
/* Line 1792 of yacc.c  */
#line 2610 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 865:
/* Line 1792 of yacc.c  */
#line 2611 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 866:
/* Line 1792 of yacc.c  */
#line 2612 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 867:
/* Line 1792 of yacc.c  */
#line 2614 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 868:
/* Line 1792 of yacc.c  */
#line 2622 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 869:
/* Line 1792 of yacc.c  */
#line 2630 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 870:
/* Line 1792 of yacc.c  */
#line 2631 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 871:
/* Line 1792 of yacc.c  */
#line 2635 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); }
    break;

  case 872:
/* Line 1792 of yacc.c  */
#line 2636 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 873:
/* Line 1792 of yacc.c  */
#line 2637 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 874:
/* Line 1792 of yacc.c  */
#line 2638 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 875:
/* Line 1792 of yacc.c  */
#line 2639 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 877:
/* Line 1792 of yacc.c  */
#line 2645 "grammar.y"
    {
      char * colon = (yyvsp[(1) - (1)].specifier).name ? RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false) : null;
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   }
    break;

  case 878:
/* Line 1792 of yacc.c  */
#line 2651 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); }
    break;

  case 879:
/* Line 1792 of yacc.c  */
#line 2654 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 880:
/* Line 1792 of yacc.c  */
#line 2663 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 881:
/* Line 1792 of yacc.c  */
#line 2672 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      }
    break;

  case 882:
/* Line 1792 of yacc.c  */
#line 2681 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      }
    break;

  case 883:
/* Line 1792 of yacc.c  */
#line 2689 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 884:
/* Line 1792 of yacc.c  */
#line 2690 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 885:
/* Line 1792 of yacc.c  */
#line 2691 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 886:
/* Line 1792 of yacc.c  */
#line 2692 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 887:
/* Line 1792 of yacc.c  */
#line 2696 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 888:
/* Line 1792 of yacc.c  */
#line 2697 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 889:
/* Line 1792 of yacc.c  */
#line 2698 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 890:
/* Line 1792 of yacc.c  */
#line 2699 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 891:
/* Line 1792 of yacc.c  */
#line 2700 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 892:
/* Line 1792 of yacc.c  */
#line 2701 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 893:
/* Line 1792 of yacc.c  */
#line 2702 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 894:
/* Line 1792 of yacc.c  */
#line 2703 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 895:
/* Line 1792 of yacc.c  */
#line 2704 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 897:
/* Line 1792 of yacc.c  */
#line 2712 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 898:
/* Line 1792 of yacc.c  */
#line 2713 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 899:
/* Line 1792 of yacc.c  */
#line 2714 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 900:
/* Line 1792 of yacc.c  */
#line 2715 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 901:
/* Line 1792 of yacc.c  */
#line 2716 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 902:
/* Line 1792 of yacc.c  */
#line 2722 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 903:
/* Line 1792 of yacc.c  */
#line 2731 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 904:
/* Line 1792 of yacc.c  */
#line 2740 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 905:
/* Line 1792 of yacc.c  */
#line 2749 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 909:
/* Line 1792 of yacc.c  */
#line 2772 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 910:
/* Line 1792 of yacc.c  */
#line 2773 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 911:
/* Line 1792 of yacc.c  */
#line 2774 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 912:
/* Line 1792 of yacc.c  */
#line 2775 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 913:
/* Line 1792 of yacc.c  */
#line 2776 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 914:
/* Line 1792 of yacc.c  */
#line 2782 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 915:
/* Line 1792 of yacc.c  */
#line 2791 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 916:
/* Line 1792 of yacc.c  */
#line 2800 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 917:
/* Line 1792 of yacc.c  */
#line 2809 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 920:
/* Line 1792 of yacc.c  */
#line 2872 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 921:
/* Line 1792 of yacc.c  */
#line 2873 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 922:
/* Line 1792 of yacc.c  */
#line 2874 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 923:
/* Line 1792 of yacc.c  */
#line 2875 "grammar.y"
    { (yyval.extDecl) = MkExtDeclMultiAttrib((yyvsp[(1) - (1)].list)); }
    break;

  case 924:
/* Line 1792 of yacc.c  */
#line 2877 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      }
    break;

  case 925:
/* Line 1792 of yacc.c  */
#line 2888 "grammar.y"
    { (yyval.i) = ATTRIB; }
    break;

  case 926:
/* Line 1792 of yacc.c  */
#line 2889 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; }
    break;

  case 927:
/* Line 1792 of yacc.c  */
#line 2890 "grammar.y"
    { (yyval.i) = __ATTRIB; }
    break;

  case 928:
/* Line 1792 of yacc.c  */
#line 2895 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 929:
/* Line 1792 of yacc.c  */
#line 2896 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 930:
/* Line 1792 of yacc.c  */
#line 2897 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 931:
/* Line 1792 of yacc.c  */
#line 2898 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 932:
/* Line 1792 of yacc.c  */
#line 2899 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 933:
/* Line 1792 of yacc.c  */
#line 2903 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); }
    break;

  case 934:
/* Line 1792 of yacc.c  */
#line 2904 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); }
    break;

  case 935:
/* Line 1792 of yacc.c  */
#line 2908 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); }
    break;

  case 936:
/* Line 1792 of yacc.c  */
#line 2909 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 937:
/* Line 1792 of yacc.c  */
#line 2910 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 938:
/* Line 1792 of yacc.c  */
#line 2914 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); }
    break;

  case 939:
/* Line 1792 of yacc.c  */
#line 2915 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); }
    break;

  case 940:
/* Line 1792 of yacc.c  */
#line 2919 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attrib)); }
    break;

  case 941:
/* Line 1792 of yacc.c  */
#line 2920 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attrib)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 942:
/* Line 1792 of yacc.c  */
#line 2924 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 943:
/* Line 1792 of yacc.c  */
#line 2925 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 944:
/* Line 1792 of yacc.c  */
#line 2926 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); }
    break;

  case 945:
/* Line 1792 of yacc.c  */
#line 2927 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 946:
/* Line 1792 of yacc.c  */
#line 2928 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 947:
/* Line 1792 of yacc.c  */
#line 2929 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); }
    break;

  case 948:
/* Line 1792 of yacc.c  */
#line 2930 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 949:
/* Line 1792 of yacc.c  */
#line 2931 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 950:
/* Line 1792 of yacc.c  */
#line 2932 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 951:
/* Line 1792 of yacc.c  */
#line 2933 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 952:
/* Line 1792 of yacc.c  */
#line 2934 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 953:
/* Line 1792 of yacc.c  */
#line 2935 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 954:
/* Line 1792 of yacc.c  */
#line 2936 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 955:
/* Line 1792 of yacc.c  */
#line 2937 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 956:
/* Line 1792 of yacc.c  */
#line 2938 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 957:
/* Line 1792 of yacc.c  */
#line 2939 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 958:
/* Line 1792 of yacc.c  */
#line 2943 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 959:
/* Line 1792 of yacc.c  */
#line 2944 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 960:
/* Line 1792 of yacc.c  */
#line 2945 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 961:
/* Line 1792 of yacc.c  */
#line 2946 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 962:
/* Line 1792 of yacc.c  */
#line 2947 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 963:
/* Line 1792 of yacc.c  */
#line 2948 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 964:
/* Line 1792 of yacc.c  */
#line 2949 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 965:
/* Line 1792 of yacc.c  */
#line 2950 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 966:
/* Line 1792 of yacc.c  */
#line 2954 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); }
    break;

  case 967:
/* Line 1792 of yacc.c  */
#line 2955 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); }
    break;

  case 968:
/* Line 1792 of yacc.c  */
#line 2956 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); }
    break;

  case 969:
/* Line 1792 of yacc.c  */
#line 2957 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); }
    break;

  case 970:
/* Line 1792 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 972:
/* Line 1792 of yacc.c  */
#line 2963 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 973:
/* Line 1792 of yacc.c  */
#line 2964 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 974:
/* Line 1792 of yacc.c  */
#line 2965 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 975:
/* Line 1792 of yacc.c  */
#line 2969 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 977:
/* Line 1792 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 978:
/* Line 1792 of yacc.c  */
#line 2972 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 979:
/* Line 1792 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 981:
/* Line 1792 of yacc.c  */
#line 2979 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 982:
/* Line 1792 of yacc.c  */
#line 2981 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 983:
/* Line 1792 of yacc.c  */
#line 2983 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 984:
/* Line 1792 of yacc.c  */
#line 2985 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 986:
/* Line 1792 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 987:
/* Line 1792 of yacc.c  */
#line 2993 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 988:
/* Line 1792 of yacc.c  */
#line 2995 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 990:
/* Line 1792 of yacc.c  */
#line 3000 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 991:
/* Line 1792 of yacc.c  */
#line 3001 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 992:
/* Line 1792 of yacc.c  */
#line 3002 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 994:
/* Line 1792 of yacc.c  */
#line 3007 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 995:
/* Line 1792 of yacc.c  */
#line 3008 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 996:
/* Line 1792 of yacc.c  */
#line 3009 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 998:
/* Line 1792 of yacc.c  */
#line 3014 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 999:
/* Line 1792 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1000:
/* Line 1792 of yacc.c  */
#line 3016 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1002:
/* Line 1792 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1003:
/* Line 1792 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1004:
/* Line 1792 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1006:
/* Line 1792 of yacc.c  */
#line 3028 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1007:
/* Line 1792 of yacc.c  */
#line 3029 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1008:
/* Line 1792 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1009:
/* Line 1792 of yacc.c  */
#line 3034 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1010:
/* Line 1792 of yacc.c  */
#line 3035 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1011:
/* Line 1792 of yacc.c  */
#line 3037 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1012:
/* Line 1792 of yacc.c  */
#line 3053 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1013:
/* Line 1792 of yacc.c  */
#line 3054 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1014:
/* Line 1792 of yacc.c  */
#line 3055 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1015:
/* Line 1792 of yacc.c  */
#line 3057 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      }
    break;

  case 1016:
/* Line 1792 of yacc.c  */
#line 3070 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      }
    break;

  case 1017:
/* Line 1792 of yacc.c  */
#line 3086 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1018:
/* Line 1792 of yacc.c  */
#line 3088 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1019:
/* Line 1792 of yacc.c  */
#line 3092 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1020:
/* Line 1792 of yacc.c  */
#line 3093 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1021:
/* Line 1792 of yacc.c  */
#line 3097 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1022:
/* Line 1792 of yacc.c  */
#line 3098 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1023:
/* Line 1792 of yacc.c  */
#line 3099 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1024:
/* Line 1792 of yacc.c  */
#line 3100 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1025:
/* Line 1792 of yacc.c  */
#line 3103 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1026:
/* Line 1792 of yacc.c  */
#line 3104 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1027:
/* Line 1792 of yacc.c  */
#line 3108 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1028:
/* Line 1792 of yacc.c  */
#line 3109 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1029:
/* Line 1792 of yacc.c  */
#line 3110 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1030:
/* Line 1792 of yacc.c  */
#line 3114 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1031:
/* Line 1792 of yacc.c  */
#line 3118 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1032:
/* Line 1792 of yacc.c  */
#line 3122 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1033:
/* Line 1792 of yacc.c  */
#line 3123 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1034:
/* Line 1792 of yacc.c  */
#line 3124 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1035:
/* Line 1792 of yacc.c  */
#line 3125 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1036:
/* Line 1792 of yacc.c  */
#line 3126 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__int128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1037:
/* Line 1792 of yacc.c  */
#line 3127 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__float128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1038:
/* Line 1792 of yacc.c  */
#line 3129 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   }
    break;

  case 1039:
/* Line 1792 of yacc.c  */
#line 3137 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1040:
/* Line 1792 of yacc.c  */
#line 3146 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1041:
/* Line 1792 of yacc.c  */
#line 3147 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); }
    break;

  case 1042:
/* Line 1792 of yacc.c  */
#line 3148 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1043:
/* Line 1792 of yacc.c  */
#line 3149 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1044:
/* Line 1792 of yacc.c  */
#line 3153 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1045:
/* Line 1792 of yacc.c  */
#line 3154 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1046:
/* Line 1792 of yacc.c  */
#line 3158 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1047:
/* Line 1792 of yacc.c  */
#line 3159 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1048:
/* Line 1792 of yacc.c  */
#line 3164 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1049:
/* Line 1792 of yacc.c  */
#line 3165 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1050:
/* Line 1792 of yacc.c  */
#line 3166 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); }
    break;

  case 1051:
/* Line 1792 of yacc.c  */
#line 3167 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1052:
/* Line 1792 of yacc.c  */
#line 3168 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); }
    break;

  case 1053:
/* Line 1792 of yacc.c  */
#line 3170 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); }
    break;

  case 1054:
/* Line 1792 of yacc.c  */
#line 3188 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1055:
/* Line 1792 of yacc.c  */
#line 3189 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1056:
/* Line 1792 of yacc.c  */
#line 3193 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1057:
/* Line 1792 of yacc.c  */
#line 3194 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1058:
/* Line 1792 of yacc.c  */
#line 3195 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1059:
/* Line 1792 of yacc.c  */
#line 3196 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1060:
/* Line 1792 of yacc.c  */
#line 3197 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1061:
/* Line 1792 of yacc.c  */
#line 3198 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1062:
/* Line 1792 of yacc.c  */
#line 3200 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1063:
/* Line 1792 of yacc.c  */
#line 3201 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1064:
/* Line 1792 of yacc.c  */
#line 3202 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1065:
/* Line 1792 of yacc.c  */
#line 3203 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1066:
/* Line 1792 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1067:
/* Line 1792 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1068:
/* Line 1792 of yacc.c  */
#line 3209 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1069:
/* Line 1792 of yacc.c  */
#line 3210 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1070:
/* Line 1792 of yacc.c  */
#line 3211 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1071:
/* Line 1792 of yacc.c  */
#line 3213 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1072:
/* Line 1792 of yacc.c  */
#line 3214 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1073:
/* Line 1792 of yacc.c  */
#line 3215 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1075:
/* Line 1792 of yacc.c  */
#line 3220 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1076:
/* Line 1792 of yacc.c  */
#line 3221 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1077:
/* Line 1792 of yacc.c  */
#line 3222 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1078:
/* Line 1792 of yacc.c  */
#line 3223 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1079:
/* Line 1792 of yacc.c  */
#line 3224 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); }
    break;

  case 1081:
/* Line 1792 of yacc.c  */
#line 3229 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 1084:
/* Line 1792 of yacc.c  */
#line 3236 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 1086:
/* Line 1792 of yacc.c  */
#line 3238 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1087:
/* Line 1792 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1088:
/* Line 1792 of yacc.c  */
#line 3240 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1096:
/* Line 1792 of yacc.c  */
#line 3251 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1097:
/* Line 1792 of yacc.c  */
#line 3252 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1098:
/* Line 1792 of yacc.c  */
#line 3253 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1099:
/* Line 1792 of yacc.c  */
#line 3254 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1100:
/* Line 1792 of yacc.c  */
#line 3255 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1101:
/* Line 1792 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1102:
/* Line 1792 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); }
    break;

  case 1103:
/* Line 1792 of yacc.c  */
#line 3261 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); }
    break;

  case 1104:
/* Line 1792 of yacc.c  */
#line 3262 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); }
    break;

  case 1105:
/* Line 1792 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); }
    break;

  case 1106:
/* Line 1792 of yacc.c  */
#line 3267 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); }
    break;

  case 1107:
/* Line 1792 of yacc.c  */
#line 3268 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); }
    break;

  case 1108:
/* Line 1792 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.list) = null; }
    break;

  case 1109:
/* Line 1792 of yacc.c  */
#line 3273 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1110:
/* Line 1792 of yacc.c  */
#line 3274 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1111:
/* Line 1792 of yacc.c  */
#line 3275 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1112:
/* Line 1792 of yacc.c  */
#line 3276 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1113:
/* Line 1792 of yacc.c  */
#line 3278 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1114:
/* Line 1792 of yacc.c  */
#line 3279 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1115:
/* Line 1792 of yacc.c  */
#line 3280 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1116:
/* Line 1792 of yacc.c  */
#line 3282 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1117:
/* Line 1792 of yacc.c  */
#line 3283 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1118:
/* Line 1792 of yacc.c  */
#line 3284 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1119:
/* Line 1792 of yacc.c  */
#line 3285 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1120:
/* Line 1792 of yacc.c  */
#line 3287 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1121:
/* Line 1792 of yacc.c  */
#line 3288 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1122:
/* Line 1792 of yacc.c  */
#line 3289 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1123:
/* Line 1792 of yacc.c  */
#line 3293 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1124:
/* Line 1792 of yacc.c  */
#line 3294 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1125:
/* Line 1792 of yacc.c  */
#line 3295 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1126:
/* Line 1792 of yacc.c  */
#line 3296 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1127:
/* Line 1792 of yacc.c  */
#line 3297 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1128:
/* Line 1792 of yacc.c  */
#line 3299 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1129:
/* Line 1792 of yacc.c  */
#line 3300 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1130:
/* Line 1792 of yacc.c  */
#line 3301 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1131:
/* Line 1792 of yacc.c  */
#line 3302 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1132:
/* Line 1792 of yacc.c  */
#line 3303 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1133:
/* Line 1792 of yacc.c  */
#line 3307 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1134:
/* Line 1792 of yacc.c  */
#line 3308 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1135:
/* Line 1792 of yacc.c  */
#line 3309 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1136:
/* Line 1792 of yacc.c  */
#line 3310 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1137:
/* Line 1792 of yacc.c  */
#line 3311 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; }
    break;

  case 1138:
/* Line 1792 of yacc.c  */
#line 3312 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1139:
/* Line 1792 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1140:
/* Line 1792 of yacc.c  */
#line 3315 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1141:
/* Line 1792 of yacc.c  */
#line 3316 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1142:
/* Line 1792 of yacc.c  */
#line 3317 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1143:
/* Line 1792 of yacc.c  */
#line 3318 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1144:
/* Line 1792 of yacc.c  */
#line 3319 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1145:
/* Line 1792 of yacc.c  */
#line 3323 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; }
    break;

  case 1146:
/* Line 1792 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; }
    break;

  case 1147:
/* Line 1792 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; }
    break;

  case 1148:
/* Line 1792 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.declMode) = publicAccess; }
    break;

  case 1149:
/* Line 1792 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.declMode) = privateAccess; }
    break;

  case 1150:
/* Line 1792 of yacc.c  */
#line 3334 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1151:
/* Line 1792 of yacc.c  */
#line 3335 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1152:
/* Line 1792 of yacc.c  */
#line 3336 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1153:
/* Line 1792 of yacc.c  */
#line 3337 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; }
    break;

  case 1154:
/* Line 1792 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); }
    break;

  case 1155:
/* Line 1792 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1156:
/* Line 1792 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1157:
/* Line 1792 of yacc.c  */
#line 3345 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1158:
/* Line 1792 of yacc.c  */
#line 3346 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1159:
/* Line 1792 of yacc.c  */
#line 3347 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1160:
/* Line 1792 of yacc.c  */
#line 3351 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; }
    break;

  case 1161:
/* Line 1792 of yacc.c  */
#line 3355 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1162:
/* Line 1792 of yacc.c  */
#line 3356 "grammar.y"
    { structDeclMode = defaultDeclMode;  }
    break;

  case 1163:
/* Line 1792 of yacc.c  */
#line 3358 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1164:
/* Line 1792 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1165:
/* Line 1792 of yacc.c  */
#line 3360 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1166:
/* Line 1792 of yacc.c  */
#line 3364 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ }
    break;

  case 1167:
/* Line 1792 of yacc.c  */
#line 3365 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1168:
/* Line 1792 of yacc.c  */
#line 3366 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1169:
/* Line 1792 of yacc.c  */
#line 3367 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 1170:
/* Line 1792 of yacc.c  */
#line 3371 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); }
    break;

  case 1171:
/* Line 1792 of yacc.c  */
#line 3372 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); }
    break;

  case 1172:
/* Line 1792 of yacc.c  */
#line 3376 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1173:
/* Line 1792 of yacc.c  */
#line 3377 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1174:
/* Line 1792 of yacc.c  */
#line 3378 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1175:
/* Line 1792 of yacc.c  */
#line 3382 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1176:
/* Line 1792 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1177:
/* Line 1792 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1178:
/* Line 1792 of yacc.c  */
#line 3385 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1179:
/* Line 1792 of yacc.c  */
#line 3386 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1180:
/* Line 1792 of yacc.c  */
#line 3387 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1181:
/* Line 1792 of yacc.c  */
#line 3388 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1182:
/* Line 1792 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1183:
/* Line 1792 of yacc.c  */
#line 3393 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1184:
/* Line 1792 of yacc.c  */
#line 3394 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1185:
/* Line 1792 of yacc.c  */
#line 3395 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1186:
/* Line 1792 of yacc.c  */
#line 3399 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1187:
/* Line 1792 of yacc.c  */
#line 3400 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1188:
/* Line 1792 of yacc.c  */
#line 3401 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1189:
/* Line 1792 of yacc.c  */
#line 3402 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1190:
/* Line 1792 of yacc.c  */
#line 3406 "grammar.y"
    { (yyval.context) = PushContext(); }
    break;

  case 1191:
/* Line 1792 of yacc.c  */
#line 3410 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1192:
/* Line 1792 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1193:
/* Line 1792 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1194:
/* Line 1792 of yacc.c  */
#line 3420 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1195:
/* Line 1792 of yacc.c  */
#line 3425 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1196:
/* Line 1792 of yacc.c  */
#line 3426 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1197:
/* Line 1792 of yacc.c  */
#line 3427 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1198:
/* Line 1792 of yacc.c  */
#line 3431 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1199:
/* Line 1792 of yacc.c  */
#line 3432 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1200:
/* Line 1792 of yacc.c  */
#line 3433 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1201:
/* Line 1792 of yacc.c  */
#line 3434 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1202:
/* Line 1792 of yacc.c  */
#line 3435 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1203:
/* Line 1792 of yacc.c  */
#line 3436 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1204:
/* Line 1792 of yacc.c  */
#line 3440 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1206:
/* Line 1792 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1207:
/* Line 1792 of yacc.c  */
#line 3446 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1208:
/* Line 1792 of yacc.c  */
#line 3447 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1209:
/* Line 1792 of yacc.c  */
#line 3449 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1210:
/* Line 1792 of yacc.c  */
#line 3450 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1211:
/* Line 1792 of yacc.c  */
#line 3452 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1212:
/* Line 1792 of yacc.c  */
#line 3453 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1213:
/* Line 1792 of yacc.c  */
#line 3454 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1214:
/* Line 1792 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1215:
/* Line 1792 of yacc.c  */
#line 3456 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1216:
/* Line 1792 of yacc.c  */
#line 3458 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1217:
/* Line 1792 of yacc.c  */
#line 3459 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1218:
/* Line 1792 of yacc.c  */
#line 3463 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1219:
/* Line 1792 of yacc.c  */
#line 3464 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); }
    break;

  case 1220:
/* Line 1792 of yacc.c  */
#line 3465 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1221:
/* Line 1792 of yacc.c  */
#line 3466 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); }
    break;

  case 1222:
/* Line 1792 of yacc.c  */
#line 3470 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1223:
/* Line 1792 of yacc.c  */
#line 3471 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1224:
/* Line 1792 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1225:
/* Line 1792 of yacc.c  */
#line 3473 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1226:
/* Line 1792 of yacc.c  */
#line 3475 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1227:
/* Line 1792 of yacc.c  */
#line 3476 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1228:
/* Line 1792 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1229:
/* Line 1792 of yacc.c  */
#line 3478 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1230:
/* Line 1792 of yacc.c  */
#line 3479 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1231:
/* Line 1792 of yacc.c  */
#line 3480 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1232:
/* Line 1792 of yacc.c  */
#line 3481 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1233:
/* Line 1792 of yacc.c  */
#line 3484 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1234:
/* Line 1792 of yacc.c  */
#line 3488 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1235:
/* Line 1792 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1236:
/* Line 1792 of yacc.c  */
#line 3493 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1237:
/* Line 1792 of yacc.c  */
#line 3494 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1238:
/* Line 1792 of yacc.c  */
#line 3498 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1239:
/* Line 1792 of yacc.c  */
#line 3499 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1240:
/* Line 1792 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1241:
/* Line 1792 of yacc.c  */
#line 3501 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); }
    break;

  case 1242:
/* Line 1792 of yacc.c  */
#line 3502 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1243:
/* Line 1792 of yacc.c  */
#line 3503 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1244:
/* Line 1792 of yacc.c  */
#line 3504 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1245:
/* Line 1792 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1246:
/* Line 1792 of yacc.c  */
#line 3509 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1247:
/* Line 1792 of yacc.c  */
#line 3510 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1248:
/* Line 1792 of yacc.c  */
#line 3511 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; }
    break;

  case 1249:
/* Line 1792 of yacc.c  */
#line 3512 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1250:
/* Line 1792 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1251:
/* Line 1792 of yacc.c  */
#line 3520 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1252:
/* Line 1792 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1253:
/* Line 1792 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1254:
/* Line 1792 of yacc.c  */
#line 3525 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1255:
/* Line 1792 of yacc.c  */
#line 3526 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);}
    break;

  case 1256:
/* Line 1792 of yacc.c  */
#line 3529 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1257:
/* Line 1792 of yacc.c  */
#line 3530 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1258:
/* Line 1792 of yacc.c  */
#line 3531 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1259:
/* Line 1792 of yacc.c  */
#line 3532 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1260:
/* Line 1792 of yacc.c  */
#line 3533 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1261:
/* Line 1792 of yacc.c  */
#line 3534 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 1262:
/* Line 1792 of yacc.c  */
#line 3538 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 1263:
/* Line 1792 of yacc.c  */
#line 3540 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   }
    break;

  case 1264:
/* Line 1792 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1265:
/* Line 1792 of yacc.c  */
#line 3553 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1266:
/* Line 1792 of yacc.c  */
#line 3556 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); }
    break;

  case 1267:
/* Line 1792 of yacc.c  */
#line 3559 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1268:
/* Line 1792 of yacc.c  */
#line 3560 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1269:
/* Line 1792 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1270:
/* Line 1792 of yacc.c  */
#line 3563 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   }
    break;

  case 1271:
/* Line 1792 of yacc.c  */
#line 3572 "grammar.y"
    { (yyval.external) = null; }
    break;

  case 1272:
/* Line 1792 of yacc.c  */
#line 3574 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1273:
/* Line 1792 of yacc.c  */
#line 3576 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1274:
/* Line 1792 of yacc.c  */
#line 3577 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1275:
/* Line 1792 of yacc.c  */
#line 3578 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1276:
/* Line 1792 of yacc.c  */
#line 3579 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1277:
/* Line 1792 of yacc.c  */
#line 3581 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   }
    break;

  case 1278:
/* Line 1792 of yacc.c  */
#line 3590 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; }
    break;

  case 1279:
/* Line 1792 of yacc.c  */
#line 3591 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; }
    break;

  case 1280:
/* Line 1792 of yacc.c  */
#line 3592 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); }
    break;

  case 1281:
/* Line 1792 of yacc.c  */
#line 3593 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); }
    break;

  case 1282:
/* Line 1792 of yacc.c  */
#line 3594 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1283:
/* Line 1792 of yacc.c  */
#line 3595 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1284:
/* Line 1792 of yacc.c  */
#line 3599 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1285:
/* Line 1792 of yacc.c  */
#line 3601 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   }
    break;

  case 1286:
/* Line 1792 of yacc.c  */
#line 3609 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1287:
/* Line 1792 of yacc.c  */
#line 3611 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1288:
/* Line 1792 of yacc.c  */
#line 3612 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1289:
/* Line 1792 of yacc.c  */
#line 3615 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1290:
/* Line 1792 of yacc.c  */
#line 3616 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1291:
/* Line 1792 of yacc.c  */
#line 3620 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1292:
/* Line 1792 of yacc.c  */
#line 3621 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1293:
/* Line 1792 of yacc.c  */
#line 3622 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1296:
/* Line 1792 of yacc.c  */
#line 3628 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1297:
/* Line 1792 of yacc.c  */
#line 3629 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1298:
/* Line 1792 of yacc.c  */
#line 3631 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1299:
/* Line 1792 of yacc.c  */
#line 3633 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1302:
/* Line 1792 of yacc.c  */
#line 3639 "grammar.y"
    { ast = MkList(); }
    break;

  case 1303:
/* Line 1792 of yacc.c  */
#line 3643 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1304:
/* Line 1792 of yacc.c  */
#line 3644 "grammar.y"
    { Symbol symbol = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1305:
/* Line 1792 of yacc.c  */
#line 3645 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); }
    break;

  case 1306:
/* Line 1792 of yacc.c  */
#line 3649 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); }
    break;

  case 1307:
/* Line 1792 of yacc.c  */
#line 3653 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); }
    break;

  case 1308:
/* Line 1792 of yacc.c  */
#line 3654 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); }
    break;

  case 1309:
/* Line 1792 of yacc.c  */
#line 3655 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); }
    break;

  case 1310:
/* Line 1792 of yacc.c  */
#line 3659 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); }
    break;

  case 1311:
/* Line 1792 of yacc.c  */
#line 3660 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); }
    break;

  case 1312:
/* Line 1792 of yacc.c  */
#line 3664 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); }
    break;

  case 1313:
/* Line 1792 of yacc.c  */
#line 3665 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); }
    break;

  case 1314:
/* Line 1792 of yacc.c  */
#line 3669 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1315:
/* Line 1792 of yacc.c  */
#line 3670 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1316:
/* Line 1792 of yacc.c  */
#line 3671 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1317:
/* Line 1792 of yacc.c  */
#line 3672 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1318:
/* Line 1792 of yacc.c  */
#line 3676 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); }
    break;

  case 1319:
/* Line 1792 of yacc.c  */
#line 3680 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1320:
/* Line 1792 of yacc.c  */
#line 3684 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1321:
/* Line 1792 of yacc.c  */
#line 3688 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); }
    break;


/* Line 1792 of yacc.c  */
#line 21156 "grammar.ec"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


/* Line 2055 of yacc.c  */
#line 3691 "grammar.y"

