/* A Bison parser, made by GNU Bison 2.7.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYSIZE_T size_t
#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:


/* Line 371 of yacc.c  */
#line 104 "grammar.ec"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar.h".  */
#ifndef YY_YY_GRAMMAR_H_INCLUDED
# define YY_YY_GRAMMAR_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     INT128 = 294,
     FLOAT128 = 295,
     LONG = 296,
     SIGNED = 297,
     UNSIGNED = 298,
     FLOAT = 299,
     DOUBLE = 300,
     CONST = 301,
     VOLATILE = 302,
     VOID = 303,
     VALIST = 304,
     STRUCT = 305,
     UNION = 306,
     ENUM = 307,
     ELLIPSIS = 308,
     CASE = 309,
     DEFAULT = 310,
     IF = 311,
     SWITCH = 312,
     WHILE = 313,
     DO = 314,
     FOR = 315,
     GOTO = 316,
     CONTINUE = 317,
     BREAK = 318,
     RETURN = 319,
     IFX = 320,
     ELSE = 321,
     CLASS = 322,
     THISCLASS = 323,
     PROPERTY = 324,
     SETPROP = 325,
     GETPROP = 326,
     NEWOP = 327,
     RENEW = 328,
     DELETE = 329,
     EXT_DECL = 330,
     EXT_STORAGE = 331,
     IMPORT = 332,
     DEFINE = 333,
     VIRTUAL = 334,
     ATTRIB = 335,
     PUBLIC = 336,
     PRIVATE = 337,
     TYPED_OBJECT = 338,
     ANY_OBJECT = 339,
     _INCREF = 340,
     EXTENSION = 341,
     ASM = 342,
     TYPEOF = 343,
     WATCH = 344,
     STOPWATCHING = 345,
     FIREWATCHERS = 346,
     WATCHABLE = 347,
     CLASS_DESIGNER = 348,
     CLASS_NO_EXPANSION = 349,
     CLASS_FIXED = 350,
     ISPROPSET = 351,
     CLASS_DEFAULT_PROPERTY = 352,
     PROPERTY_CATEGORY = 353,
     CLASS_DATA = 354,
     CLASS_PROPERTY = 355,
     SUBCLASS = 356,
     NAMESPACE = 357,
     NEW0OP = 358,
     RENEW0 = 359,
     VAARG = 360,
     DBTABLE = 361,
     DBFIELD = 362,
     DBINDEX = 363,
     DATABASE_OPEN = 364,
     ALIGNOF = 365,
     ATTRIB_DEP = 366,
     __ATTRIB = 367,
     BOOL = 368,
     _BOOL = 369,
     _COMPLEX = 370,
     _IMAGINARY = 371,
     RESTRICT = 372,
     THREAD = 373,
     WIDE_STRING_LITERAL = 374,
     BUILTIN_OFFSETOF = 375
   };
#endif


#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{
/* Line 387 of yacc.c  */
#line 39 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;


/* Line 387 of yacc.c  */
#line 311 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;
extern YYLTYPE yylloc;
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_YY_GRAMMAR_H_INCLUDED  */

/* Copy the second part of user declarations.  */

/* Line 390 of yacc.c  */
#line 352 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  305
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   42247

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  146
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  259
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1324
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2206

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   375

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   140,     2,     2,   134,   142,   137,     2,
     124,   125,   121,   138,   129,   139,   132,   141,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   133,   127,
     122,   128,   123,   145,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   135,     2,   136,   143,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   131,   144,   130,   126,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   958,   961,   968,   975,   981,   987,
     994,  1001,  1007,  1013,  1021,  1029,  1036,  1043,  1051,  1059,
    1066,  1073,  1078,  1084,  1089,  1096,  1101,  1103,  1105,  1107,
    1109,  1113,  1116,  1118,  1121,  1124,  1127,  1129,  1134,  1139,
    1143,  1148,  1153,  1157,  1161,  1164,  1167,  1172,  1177,  1181,
    1186,  1190,  1194,  1197,  1200,  1202,  1204,  1208,  1212,  1214,
    1216,  1220,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1247,
    1253,  1259,  1262,  1267,  1274,  1276,  1278,  1280,  1282,  1284,
    1286,  1288,  1290,  1292,  1294,  1296,  1301,  1306,  1308,  1312,
    1316,  1320,  1324,  1328,  1332,  1334,  1338,  1342,  1346,  1350,
    1352,  1356,  1360,  1364,  1368,  1371,  1373,  1376,  1380,  1384,
    1388,  1392,  1396,  1400,  1404,  1406,  1410,  1414,  1418,  1422,
    1426,  1430,  1434,  1438,  1440,  1444,  1448,  1452,  1456,  1458,
    1462,  1466,  1470,  1474,  1476,  1480,  1484,  1488,  1492,  1494,
    1498,  1502,  1504,  1508,  1512,  1514,  1520,  1526,  1532,  1538,
    1544,  1550,  1556,  1562,  1568,  1574,  1580,  1586,  1592,  1598,
    1604,  1610,  1612,  1616,  1620,  1624,  1628,  1632,  1636,  1640,
    1644,  1646,  1648,  1650,  1652,  1654,  1656,  1658,  1660,  1662,
    1664,  1666,  1668,  1672,  1676,  1679,  1681,  1685,  1689,  1691,
    1693,  1696,  1699,  1703,  1707,  1711,  1715,  1719,  1723,  1727,
    1730,  1733,  1736,  1739,  1742,  1748,  1755,  1762,  1765,  1771,
    1773,  1775,  1777,  1782,  1784,  1788,  1792,  1796,  1800,  1804,
    1808,  1810,  1814,  1818,  1822,  1826,  1828,  1832,  1836,  1840,
    1844,  1846,  1849,  1853,  1857,  1861,  1865,  1869,  1873,  1877,
    1879,  1883,  1887,  1891,  1895,  1899,  1903,  1907,  1911,  1913,
    1917,  1921,  1925,  1929,  1931,  1935,  1939,  1943,  1947,  1949,
    1953,  1957,  1961,  1965,  1967,  1971,  1975,  1977,  1981,  1985,
    1987,  1993,  1999,  2005,  2011,  2016,  2021,  2026,  2031,  2037,
    2043,  2049,  2055,  2060,  2065,  2070,  2075,  2081,  2087,  2093,
    2099,  2105,  2111,  2117,  2123,  2127,  2131,  2134,  2137,  2139,
    2143,  2147,  2151,  2155,  2157,  2160,  2164,  2168,  2171,  2174,
    2177,  2179,  2182,  2186,  2190,  2192,  2194,  2196,  2198,  2200,
    2202,  2204,  2206,  2208,  2210,  2212,  2214,  2216,  2218,  2220,
    2222,  2224,  2228,  2232,  2235,  2240,  2245,  2247,  2251,  2254,
    2256,  2259,  2262,  2265,  2270,  2275,  2279,  2283,  2288,  2294,
    2299,  2306,  2313,  2318,  2324,  2329,  2336,  2343,  2349,  2355,
    2358,  2361,  2364,  2370,  2374,  2380,  2387,  2393,  2401,  2409,
    2418,  2427,  2435,  2443,  2447,  2451,  2455,  2460,  2464,  2470,
    2476,  2483,  2491,  2498,  2503,  2505,  2507,  2509,  2511,  2513,
    2515,  2517,  2519,  2521,  2524,  2526,  2528,  2530,  2532,  2534,
    2536,  2538,  2540,  2542,  2544,  2546,  2548,  2550,  2552,  2554,
    2556,  2558,  2560,  2565,  2570,  2575,  2577,  2579,  2581,  2583,
    2585,  2587,  2589,  2591,  2593,  2595,  2597,  2599,  2601,  2603,
    2605,  2607,  2609,  2611,  2613,  2615,  2617,  2619,  2621,  2623,
    2625,  2627,  2629,  2631,  2633,  2638,  2643,  2648,  2650,  2652,
    2655,  2658,  2662,  2668,  2671,  2675,  2681,  2687,  2693,  2695,
    2699,  2702,  2705,  2709,  2713,  2716,  2720,  2724,  2729,  2733,
    2737,  2741,  2745,  2749,  2753,  2758,  2763,  2768,  2770,  2772,
    2777,  2781,  2784,  2788,  2792,  2796,  2800,  2804,  2808,  2812,
    2816,  2820,  2824,  2828,  2832,  2834,  2836,  2838,  2841,  2843,
    2846,  2848,  2851,  2853,  2856,  2858,  2861,  2863,  2866,  2868,
    2871,  2873,  2876,  2878,  2881,  2883,  2886,  2888,  2891,  2893,
    2896,  2898,  2901,  2903,  2906,  2908,  2911,  2913,  2916,  2918,
    2921,  2923,  2926,  2928,  2931,  2933,  2936,  2938,  2941,  2943,
    2946,  2948,  2951,  2953,  2956,  2958,  2961,  2963,  2966,  2968,
    2970,  2972,  2975,  2977,  2980,  2982,  2985,  2987,  2990,  2995,
    3001,  3003,  3005,  3007,  3010,  3012,  3015,  3017,  3020,  3022,
    3025,  3030,  3036,  3038,  3041,  3043,  3046,  3048,  3051,  3053,
    3056,  3058,  3061,  3063,  3066,  3071,  3077,  3079,  3082,  3084,
    3087,  3089,  3092,  3094,  3097,  3099,  3102,  3104,  3107,  3112,
    3118,  3122,  3126,  3128,  3132,  3136,  3140,  3144,  3146,  3148,
    3150,  3155,  3160,  3165,  3169,  3174,  3179,  3184,  3188,  3190,
    3194,  3199,  3203,  3208,  3213,  3218,  3223,  3227,  3230,  3234,
    3238,  3242,  3246,  3249,  3252,  3255,  3259,  3264,  3266,  3268,
    3271,  3275,  3279,  3283,  3287,  3290,  3293,  3296,  3300,  3305,
    3307,  3309,  3311,  3313,  3315,  3317,  3322,  3324,  3326,  3328,
    3330,  3332,  3334,  3336,  3338,  3340,  3345,  3347,  3350,  3354,
    3361,  3367,  3369,  3372,  3376,  3381,  3384,  3388,  3392,  3396,
    3400,  3405,  3410,  3415,  3418,  3422,  3426,  3430,  3435,  3440,
    3444,  3449,  3452,  3456,  3460,  3464,  3469,  3474,  3476,  3479,
    3482,  3486,  3488,  3490,  3493,  3496,  3500,  3502,  3504,  3507,
    3510,  3514,  3516,  3519,  3523,  3526,  3529,  3531,  3534,  3538,
    3541,  3543,  3546,  3550,  3554,  3556,  3559,  3563,  3567,  3569,
    3572,  3576,  3580,  3582,  3585,  3589,  3593,  3595,  3598,  3602,
    3606,  3608,  3612,  3617,  3621,  3626,  3628,  3633,  3636,  3642,
    3646,  3648,  3650,  3652,  3654,  3656,  3658,  3662,  3666,  3669,
    3672,  3674,  3676,  3680,  3683,  3687,  3689,  3693,  3697,  3701,
    3705,  3709,  3713,  3717,  3719,  3722,  3726,  3730,  3732,  3735,
    3737,  3740,  3743,  3746,  3749,  3753,  3755,  3757,  3761,  3765,
    3767,  3771,  3776,  3780,  3785,  3789,  3793,  3798,  3802,  3807,
    3809,  3813,  3817,  3822,  3826,  3830,  3834,  3839,  3841,  3845,
    3849,  3853,  3857,  3861,  3863,  3867,  3870,  3872,  3874,  3876,
    3878,  3880,  3883,  3885,  3887,  3889,  3891,  3894,  3897,  3900,
    3902,  3904,  3906,  3908,  3910,  3913,  3915,  3917,  3922,  3930,
    3932,  3936,  3937,  3944,  3953,  3964,  3977,  3986,  3997,  4008,
    4014,  4022,  4032,  4044,  4052,  4062,  4072,  4076,  4081,  4086,
    4090,  4094,  4098,  4103,  4108,  4112,  4116,  4120,  4125,  4130,
    4134,  4137,  4141,  4144,  4148,  4153,  4158,  4162,  4166,  4168,
    4170,  4172,  4174,  4176,  4179,  4183,  4186,  4189,  4192,  4196,
    4200,  4203,  4209,  4216,  4219,  4222,  4225,  4228,  4231,  4234,
    4236,  4239,  4242,  4246,  4248,  4251,  4253,  4256,  4259,  4261,
    4264,  4267,  4270,  4273,  4276,  4279,  4281,  4283,  4286,  4289,
    4291,  4293,  4296,  4299,  4301,  4304,  4307,  4309,  4312,  4314,
    4317,  4320,  4326,  4332,  4340,  4348,  4354,  4360,  4364,  4367,
    4373,  4378,  4383,  4391,  4398,  4405,  4411,  4419,  4426,  4431,
    4439,  4449,  4453,  4458,  4463,  4469,  4475,  4482,  4490,  4497,
    4504,  4510,  4516,  4521,  4525,  4528,  4530,  4533,  4538,  4542,
    4548,  4553,  4557,  4560,  4563,  4566,  4570,  4574,  4578,  4582,
    4585,  4588,  4590,  4592,  4597,  4601,  4606,  4610,  4614,  4617,
    4622,  4626,  4631,  4635,  4639,  4642,  4644,  4647,  4649,  4651,
    4654,  4656,  4659,  4663,  4667,  4669,  4672,  4675,  4678,  4682,
    4687,  4692,  4695,  4698,  4701,  4704,  4706,  4709,  4711,  4714,
    4716,  4719,  4722,  4724,  4727,  4729,  4732,  4735,  4738,  4741,
    4743,  4746,  4749,  4753,  4755,  4757,  4758,  4765,  4772,  4778,
    4783,  4785,  4788,  4791,  4793,  4797,  4801,  4806,  4808,  4810,
    4813,  4816,  4823,  4830,  4837
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     394,     0,    -1,   218,   121,    -1,   218,   122,    -1,   151,
      -1,   218,   218,    -1,    28,    -1,    28,    -1,   149,    -1,
     149,   122,   212,   123,    -1,   149,   122,   212,    11,    -1,
     301,   337,    -1,   335,    -1,   301,   124,   125,    -1,   126,
     301,   124,   125,    -1,    79,   301,   337,    -1,    79,   335,
      -1,   301,   338,    -1,   336,    -1,    79,   301,   338,    -1,
      79,   336,    -1,   152,   378,    -1,   155,   378,    -1,   155,
     127,    -1,   153,   378,    -1,   154,   378,    -1,   152,   127,
      -1,   152,   326,   127,    -1,   152,   379,    -1,   156,    -1,
     155,   379,    -1,   157,    -1,   157,   127,    -1,   300,   337,
      -1,   300,   339,    -1,   300,   338,    -1,   160,   378,    -1,
     160,   379,    -1,   161,    -1,   160,    -1,   226,   128,   343,
      -1,   343,    -1,   226,   128,   344,    -1,   226,   128,     1,
      -1,   344,    -1,   164,    -1,   166,   129,   164,    -1,   167,
     129,   164,    -1,   165,    -1,   166,   129,   165,    -1,   167,
     129,   165,    -1,   166,   129,     1,    -1,   167,   129,     1,
      -1,   129,    -1,   166,   127,    -1,   167,   127,    -1,   168,
      -1,   162,    -1,   171,   168,    -1,   171,   162,    -1,   169,
     168,    -1,   169,   162,    -1,   171,   127,    -1,   169,   127,
      -1,   127,    -1,   169,    -1,   166,    -1,   169,   166,    -1,
     171,   166,    -1,   163,    -1,   170,   163,    -1,   171,   163,
      -1,   169,   163,    -1,   169,   167,    -1,   167,    -1,   166,
       1,    -1,   173,   130,    -1,   173,     1,   130,    -1,   300,
     218,   131,   171,    -1,   300,   218,   131,   170,     1,    -1,
     300,   218,   131,   170,    -1,   300,   218,   131,    -1,   300,
     218,   131,     1,    -1,   175,   130,    -1,   175,     1,   130,
      -1,   301,   218,   131,   171,    -1,   301,   218,   131,   170,
       1,    -1,   301,   218,   131,   170,    -1,   301,   218,   131,
      -1,   301,   218,   131,     1,    -1,   302,   218,   131,   170,
     130,    -1,   302,   218,   131,   171,   130,    -1,   302,   218,
     131,   130,    -1,   178,   130,    -1,   178,     1,   130,    -1,
     151,   131,   170,    -1,   218,   131,   170,    -1,   151,   131,
     171,    -1,   151,   131,    -1,   151,   131,   170,     1,    -1,
     151,   131,     1,    -1,   218,   131,   171,    -1,   218,   131,
      -1,   218,   131,   170,     1,    -1,   218,   131,     1,    -1,
     180,   130,    -1,   180,     1,   130,    -1,   131,   171,    -1,
     131,   170,     1,    -1,   131,     1,    -1,   131,    -1,   131,
     170,    -1,   226,   128,   343,    -1,   226,   128,   344,    -1,
     226,   128,     1,    -1,   226,     1,    -1,   181,    -1,   183,
     129,   181,    -1,   184,   129,   181,    -1,   182,    -1,   183,
     129,   182,    -1,   184,   129,   182,    -1,   183,     1,    -1,
      69,   306,   218,   131,    -1,    69,   306,   331,   218,   131,
      -1,    69,   306,   131,    -1,    69,   306,   331,   131,    -1,
      69,     1,   131,    -1,   185,    -1,   186,    70,   378,    -1,
     186,    71,   378,    -1,   186,    96,   378,    -1,   186,    92,
      -1,   186,    98,   220,    -1,   186,   130,    -1,   100,   306,
     218,   131,    -1,   100,   306,   331,   218,   131,    -1,   100,
     306,   131,    -1,   100,   306,   331,   131,    -1,   100,     1,
     131,    -1,   188,    -1,   189,    70,   378,    -1,   189,    71,
     378,    -1,   189,   130,    -1,   218,    -1,   191,   218,    -1,
     191,   378,    -1,    74,   378,    -1,   192,    -1,   193,   192,
      -1,    89,   124,   191,   125,   378,    -1,    89,   124,   245,
     125,   131,   193,   130,    -1,   245,   132,    89,   124,   245,
     125,   131,   193,   130,    -1,    90,   124,   245,   129,   191,
     125,    -1,   245,   132,    90,   124,   245,   129,   191,   125,
      -1,    90,   124,   245,   125,    -1,   245,   132,    90,   124,
     245,   125,    -1,    91,    -1,    91,   191,    -1,   226,   132,
      91,    -1,   245,   132,    91,   191,    -1,   199,   127,    -1,
     183,   127,    -1,   158,    -1,   187,    -1,   366,   158,    -1,
     366,   187,    -1,   190,    -1,    92,    -1,    94,    -1,    95,
      -1,   100,   124,   218,   125,   128,   343,   127,    -1,   127,
      -1,   366,   133,    -1,   366,   124,   218,   125,    -1,   159,
      -1,   301,    -1,   301,   288,    -1,   366,   301,   288,    -1,
     366,   301,    -1,   366,   177,    -1,   366,   174,    -1,    99,
     301,   288,    -1,   194,    -1,    93,   218,    -1,    93,   151,
      -1,    97,   218,    -1,   177,    -1,   174,    -1,   183,    -1,
     175,     1,    -1,   178,     1,    -1,   366,   159,    -1,   366,
     175,     1,    -1,   366,   178,     1,    -1,   184,    -1,   198,
      -1,   200,   198,    -1,   201,   198,    -1,   199,    -1,   200,
       1,    -1,   201,     1,    -1,   200,   199,    -1,   201,   199,
      -1,   301,    -1,   301,   331,    -1,   301,    -1,   301,   331,
      -1,    67,   218,    -1,    67,   218,   128,   203,    -1,    67,
     218,   133,   202,    -1,    67,   218,   133,   202,   128,   203,
      -1,    67,   150,    -1,    67,   150,   128,   203,    -1,    67,
     150,   133,   202,    -1,    67,   150,   133,   202,   128,   203,
      -1,   218,    -1,   218,    -1,   218,   128,   205,    -1,   235,
      -1,   301,   218,   128,   207,    -1,   301,   331,   218,   128,
     207,    -1,   204,    -1,   206,    -1,   208,    -1,   209,    -1,
     210,   129,   209,    -1,   207,    -1,   205,    -1,   203,    -1,
     218,   128,   207,    -1,   218,   128,   205,    -1,   218,   128,
     203,    -1,   211,    -1,   212,   129,   211,    -1,    67,    -1,
     213,   218,    -1,   213,   149,    -1,   218,   213,   218,    -1,
     218,   213,   149,    -1,   213,   218,   122,   210,   123,    -1,
     213,   149,   122,   210,   123,    -1,   218,   213,   218,   122,
     210,   123,    -1,   218,   213,   149,   122,   210,   123,    -1,
     217,   130,    -1,   216,   127,    -1,   214,   131,   130,    -1,
     216,   131,   130,    -1,   213,   218,   127,    -1,   213,   148,
     127,    -1,   214,   133,   305,    -1,   214,   131,   201,    -1,
     216,   131,   201,    -1,   214,   131,   200,    -1,   216,   131,
     200,    -1,   214,   131,     1,    -1,   216,   131,     1,    -1,
       3,    -1,   222,    -1,   124,   247,   125,    -1,   389,    -1,
     134,   389,    -1,   134,   389,   132,   389,    -1,     4,    -1,
     218,    -1,   177,    -1,    86,   124,   378,   125,    -1,    86,
     124,   247,   125,    -1,    86,   124,   350,   125,   340,    -1,
      86,   124,   350,   125,   124,   350,   125,   340,    -1,   221,
     218,    -1,   221,    -1,   220,    -1,   119,    -1,   124,   125,
      -1,    72,   308,   332,   135,   267,   136,    -1,    72,   308,
     332,   135,   268,   136,    -1,    72,   308,   135,   267,   136,
      -1,    72,   308,   135,   268,   136,    -1,   103,   308,   332,
     135,   267,   136,    -1,   103,   308,   332,   135,   268,   136,
      -1,   103,   308,   135,   267,   136,    -1,   103,   308,   135,
     268,   136,    -1,    73,   267,   307,   332,   135,   267,   136,
      -1,    73,   267,   307,   332,   135,   268,   136,    -1,    73,
     267,   307,   135,   267,   136,    -1,    73,   267,   307,   135,
     268,   136,    -1,   104,   267,   307,   332,   135,   267,   136,
      -1,   104,   267,   307,   332,   135,   268,   136,    -1,   104,
     267,   307,   135,   267,   136,    -1,   104,   267,   307,   135,
     268,   136,    -1,    67,   124,   300,   125,    -1,    67,   124,
     300,   331,   125,    -1,    67,   124,   218,   125,    -1,   105,
     124,   245,   129,   350,   125,    -1,    99,   124,   218,   125,
      -1,   401,    -1,   402,    -1,   403,    -1,   404,    -1,   135,
     227,   136,    -1,   135,   136,    -1,   179,    -1,   180,     1,
      -1,   124,   247,    -1,   124,   265,    -1,   219,    -1,   226,
     135,   247,   136,    -1,   226,   135,   265,   136,    -1,   226,
     124,   125,    -1,   226,   124,   227,   125,    -1,   226,   124,
     228,   125,    -1,   226,   132,   218,    -1,   226,     7,   218,
      -1,   226,     8,    -1,   226,     9,    -1,   249,   135,   247,
     136,    -1,   249,   135,   265,   136,    -1,   249,   124,   125,
      -1,   249,   124,   227,   125,    -1,   249,   132,   218,    -1,
     249,     7,   218,    -1,   249,     8,    -1,   249,     9,    -1,
     245,    -1,   223,    -1,   227,   129,   245,    -1,   227,   129,
     223,    -1,   264,    -1,   224,    -1,   227,   129,   264,    -1,
     227,   129,   224,    -1,   227,   129,    -1,     8,   230,    -1,
       9,   230,    -1,   231,   232,    -1,   231,   223,    -1,     6,
     230,    -1,     6,   124,   351,   125,    -1,     6,   124,    67,
     148,   125,    -1,     6,   124,    67,   147,   125,    -1,   110,
     230,    -1,   110,   124,   351,   125,    -1,   120,   124,   351,
     129,   218,   125,    -1,   229,    -1,   226,    -1,   137,    -1,
     121,    -1,   138,    -1,   139,    -1,   126,    -1,   140,    -1,
      74,    -1,    85,    -1,   230,    -1,   124,   350,   125,   341,
      -1,   124,   350,   125,   232,    -1,   232,    -1,   233,   121,
     232,    -1,   233,   141,   232,    -1,   233,   142,   232,    -1,
     253,   121,   232,    -1,   253,   141,   232,    -1,   253,   142,
     232,    -1,   233,    -1,   234,   138,   233,    -1,   234,   139,
     233,    -1,   254,   138,   233,    -1,   254,   139,   233,    -1,
     234,    -1,   235,    10,   234,    -1,   235,    11,   234,    -1,
     255,    10,   234,    -1,   255,    11,   234,    -1,   237,   122,
      -1,   235,    -1,   236,   235,    -1,   237,   123,   235,    -1,
     237,    12,   235,    -1,   237,    13,   235,    -1,   256,   122,
     235,    -1,   256,   123,   235,    -1,   256,    12,   235,    -1,
     256,    13,   235,    -1,   237,    -1,   238,    14,   237,    -1,
     238,    15,   237,    -1,   257,    14,   237,    -1,   257,    15,
     237,    -1,   238,    14,   223,    -1,   238,    15,   223,    -1,
     257,    14,   223,    -1,   257,    15,   223,    -1,   238,    -1,
     239,   137,   238,    -1,   258,   137,   238,    -1,   239,   137,
     223,    -1,   258,   137,   223,    -1,   239,    -1,   240,   143,
     239,    -1,   259,   143,   239,    -1,   240,   143,   223,    -1,
     259,   143,   223,    -1,   240,    -1,   241,   144,   240,    -1,
     260,   144,   240,    -1,   241,   144,   223,    -1,   260,   144,
     223,    -1,   241,    -1,   242,    16,   241,    -1,   261,    16,
     241,    -1,   242,    -1,   243,    17,   242,    -1,   262,    17,
     242,    -1,   243,    -1,   243,   145,   247,   133,   244,    -1,
     243,   145,   265,   133,   244,    -1,   262,   145,   247,   133,
     244,    -1,   262,   145,   265,   133,   244,    -1,   243,   145,
     248,   133,   244,    -1,   243,   145,   266,   133,   244,    -1,
     262,   145,   248,   133,   244,    -1,   262,   145,   266,   133,
     244,    -1,   243,   145,   247,   133,   223,    -1,   243,   145,
     265,   133,   223,    -1,   262,   145,   247,   133,   223,    -1,
     262,   145,   265,   133,   223,    -1,   243,   145,   248,   133,
     223,    -1,   243,   145,   266,   133,   223,    -1,   262,   145,
     248,   133,   223,    -1,   262,   145,   266,   133,   223,    -1,
     244,    -1,   230,   246,   245,    -1,   251,   246,   245,    -1,
     244,   246,   245,    -1,   263,   246,   245,    -1,   230,   246,
     223,    -1,   251,   246,   223,    -1,   244,   246,   223,    -1,
     263,   246,   223,    -1,   128,    -1,    18,    -1,    19,    -1,
      20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,    -1,
      25,    -1,    26,    -1,    27,    -1,   245,    -1,   247,   129,
     245,    -1,   265,   129,   245,    -1,   265,   125,    -1,   223,
      -1,   247,   129,   223,    -1,   265,   129,   223,    -1,   225,
      -1,     1,    -1,   226,     1,    -1,   178,     1,    -1,   226,
       7,     1,    -1,   249,     7,     1,    -1,   226,   124,   227,
      -1,   226,   124,   228,    -1,   226,   132,     1,    -1,   249,
     124,   228,    -1,   249,   132,     1,    -1,     8,   251,    -1,
       9,   251,    -1,   231,   252,    -1,   231,   224,    -1,     6,
     251,    -1,     6,   124,   351,   125,     1,    -1,     6,   124,
      67,   148,   125,     1,    -1,     6,   124,    67,   147,   125,
       1,    -1,   110,   251,    -1,   110,   124,   351,   125,     1,
      -1,   250,    -1,   249,    -1,   251,    -1,   124,   350,   125,
     252,    -1,   252,    -1,   233,   121,   252,    -1,   233,   141,
     252,    -1,   233,   142,   252,    -1,   253,   121,   252,    -1,
     253,   141,   252,    -1,   253,   142,   252,    -1,   253,    -1,
     234,   138,   253,    -1,   234,   139,   253,    -1,   254,   138,
     253,    -1,   254,   139,   253,    -1,   254,    -1,   235,    10,
     254,    -1,   235,    11,   254,    -1,   255,    10,   254,    -1,
     255,    11,   254,    -1,   255,    -1,   236,   255,    -1,   237,
     123,   255,    -1,   237,    12,   255,    -1,   237,    13,   255,
      -1,   256,   122,   255,    -1,   256,   123,   255,    -1,   256,
      12,   255,    -1,   256,    13,   255,    -1,   256,    -1,   238,
      14,   256,    -1,   238,    15,   256,    -1,   257,    14,   256,
      -1,   257,    15,   256,    -1,   238,    14,   224,    -1,   238,
      15,   224,    -1,   257,    14,   224,    -1,   257,    15,   224,
      -1,   257,    -1,   239,   137,   257,    -1,   258,   137,   257,
      -1,   239,   137,   224,    -1,   258,   137,   224,    -1,   258,
      -1,   240,   143,   258,    -1,   259,   143,   258,    -1,   240,
     143,   224,    -1,   259,   143,   224,    -1,   259,    -1,   241,
     144,   259,    -1,   260,   144,   259,    -1,   241,   144,   224,
      -1,   260,   144,   224,    -1,   260,    -1,   242,    16,   260,
      -1,   261,    16,   260,    -1,   261,    -1,   243,    17,   261,
      -1,   262,    17,   261,    -1,   262,    -1,   243,   145,   247,
     133,   262,    -1,   243,   145,   265,   133,   262,    -1,   262,
     145,   247,   133,   262,    -1,   262,   145,   265,   133,   262,
      -1,   243,   145,   247,   133,    -1,   243,   145,   265,   133,
      -1,   262,   145,   247,   133,    -1,   262,   145,   265,   133,
      -1,   243,   145,   248,   133,   262,    -1,   243,   145,   266,
     133,   262,    -1,   262,   145,   248,   133,   262,    -1,   262,
     145,   266,   133,   262,    -1,   243,   145,   248,   133,    -1,
     243,   145,   266,   133,    -1,   262,   145,   248,   133,    -1,
     262,   145,   266,   133,    -1,   243,   145,   247,   133,   224,
      -1,   243,   145,   265,   133,   224,    -1,   262,   145,   247,
     133,   224,    -1,   262,   145,   265,   133,   224,    -1,   243,
     145,   248,   133,   224,    -1,   243,   145,   266,   133,   224,
      -1,   262,   145,   248,   133,   224,    -1,   262,   145,   266,
     133,   224,    -1,   243,   145,   133,    -1,   262,   145,   133,
      -1,   243,   145,    -1,   262,   145,    -1,   263,    -1,   230,
     246,   264,    -1,   251,   246,   264,    -1,   230,   246,   224,
      -1,   251,   246,   224,    -1,   264,    -1,   245,     1,    -1,
     247,   129,   264,    -1,   265,   129,   264,    -1,   247,   247,
      -1,   265,   247,    -1,   247,   265,    -1,   224,    -1,   223,
       1,    -1,   247,   129,   224,    -1,   265,   129,   224,    -1,
     244,    -1,   263,    -1,    29,    -1,    30,    -1,    31,    -1,
     118,    -1,    32,    -1,    33,    -1,   117,    -1,    29,    -1,
      30,    -1,    31,    -1,   118,    -1,    32,    -1,    33,    -1,
     117,    -1,   218,    -1,   218,   128,   267,    -1,   218,   128,
     268,    -1,   218,   327,    -1,   218,   327,   128,   267,    -1,
     218,   327,   128,   268,    -1,   271,    -1,   272,   129,   271,
      -1,   272,   129,    -1,    52,    -1,   273,   218,    -1,   273,
     151,    -1,   276,   130,    -1,   273,   218,   131,   130,    -1,
     273,   151,   131,   130,    -1,   273,   131,   272,    -1,   273,
     131,     1,    -1,   273,   218,   131,   272,    -1,   273,   218,
     131,   272,     1,    -1,   273,   218,   131,     1,    -1,   273,
     218,   131,   272,   127,   200,    -1,   273,   218,   131,   272,
     127,   201,    -1,   273,   151,   131,   272,    -1,   273,   151,
     131,   272,     1,    -1,   273,   151,   131,     1,    -1,   273,
     151,   131,   272,   127,   200,    -1,   273,   151,   131,   272,
     127,   201,    -1,   273,   218,   131,   272,   127,    -1,   273,
     151,   131,   272,   127,    -1,   273,   218,    -1,   273,   151,
      -1,   279,   130,    -1,   277,   133,   305,   131,   130,    -1,
     277,   131,   130,    -1,   277,   133,   305,   131,   272,    -1,
     277,   133,   305,   131,   272,     1,    -1,   277,   133,   305,
     131,     1,    -1,   277,   133,   305,   131,   272,   127,   200,
      -1,   277,   133,   305,   131,   272,   127,   201,    -1,   277,
     133,   305,   131,   272,     1,   127,   200,    -1,   277,   133,
     305,   131,   272,     1,   127,   201,    -1,   277,   133,   305,
     131,     1,   127,   200,    -1,   277,   133,   305,   131,     1,
     127,   201,    -1,   273,   131,   272,    -1,   273,   131,     1,
      -1,   277,   131,   272,    -1,   277,   131,   272,     1,    -1,
     277,   131,     1,    -1,   277,   131,   272,   127,   200,    -1,
     277,   131,   272,   127,   201,    -1,   277,   133,   305,   131,
     272,   127,    -1,   277,   133,   305,   131,   272,     1,   127,
      -1,   277,   133,   305,   131,     1,   127,    -1,   277,   131,
     272,   127,    -1,   278,    -1,   295,    -1,   279,    -1,   296,
      -1,   321,    -1,    46,    -1,    47,    -1,   282,    -1,   283,
      -1,   284,   283,    -1,    48,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    39,    -1,    40,    -1,
      49,    -1,    41,    -1,    44,    -1,    45,    -1,    42,    -1,
      43,    -1,    86,    -1,   292,    -1,   274,    -1,   148,    -1,
      88,   124,   245,   125,    -1,   101,   124,   148,   125,    -1,
     101,   124,   218,   125,    -1,    68,    -1,    83,    -1,    84,
      -1,   114,    -1,   113,    -1,   115,    -1,   116,    -1,    48,
      -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,
      -1,    39,    -1,    40,    -1,    49,    -1,    41,    -1,    44,
      -1,    45,    -1,    42,    -1,    43,    -1,    86,    -1,   292,
      -1,   274,    -1,   151,    -1,   114,    -1,   113,    -1,   115,
      -1,   116,    -1,    88,   124,   245,   125,    -1,   101,   124,
     148,   125,    -1,   101,   124,   218,   125,    -1,    68,    -1,
     339,    -1,   339,   326,    -1,   133,   267,    -1,   339,   133,
     267,    -1,   339,   133,   267,   133,   267,    -1,   133,   268,
      -1,   339,   133,   268,    -1,   339,   133,   267,   133,   268,
      -1,   339,   133,   268,   133,   268,    -1,   339,   133,   268,
     133,   267,    -1,   287,    -1,   288,   129,   287,    -1,   297,
     218,    -1,   297,   149,    -1,   297,   321,   218,    -1,   297,
     321,   149,    -1,   291,   130,    -1,   289,   131,   130,    -1,
     297,   131,   130,    -1,   297,   321,   131,   130,    -1,   289,
     131,   200,    -1,   289,   131,   201,    -1,   289,   131,     1,
      -1,   297,   131,   200,    -1,   297,   131,   201,    -1,   297,
     131,     1,    -1,   297,   321,   131,   200,    -1,   297,   321,
     131,   201,    -1,   297,   321,   131,     1,    -1,   289,    -1,
     289,    -1,   289,   122,   210,   123,    -1,   293,   133,   305,
      -1,   296,   130,    -1,   294,   131,   130,    -1,   293,   131,
     130,    -1,   297,   131,   130,    -1,   294,   131,   200,    -1,
     294,   131,   201,    -1,   294,   131,     1,    -1,   293,   131,
     200,    -1,   293,   131,   201,    -1,   293,   131,     1,    -1,
     297,   131,   200,    -1,   297,   131,   201,    -1,   297,   131,
       1,    -1,    50,    -1,    51,    -1,   283,    -1,   298,   283,
      -1,   285,    -1,   298,   285,    -1,   275,    -1,   298,   275,
      -1,   290,    -1,   298,   290,    -1,   283,    -1,   299,   283,
      -1,   285,    -1,   299,   285,    -1,   147,    -1,   299,   147,
      -1,   275,    -1,   299,   275,    -1,   290,    -1,   299,   290,
      -1,   269,    -1,   300,   269,    -1,   283,    -1,   300,   283,
      -1,   286,    -1,   300,   286,    -1,   275,    -1,   300,   275,
      -1,   290,    -1,   300,   290,    -1,   269,    -1,   301,   269,
      -1,   283,    -1,   301,   283,    -1,   285,    -1,   301,   285,
      -1,   147,    -1,   301,   147,    -1,   290,    -1,   301,   290,
      -1,   275,    -1,   301,   275,    -1,   270,    -1,   302,   270,
      -1,   283,    -1,   302,   283,    -1,   285,    -1,   302,   285,
      -1,   147,    -1,   302,   147,    -1,   280,    -1,   302,   280,
      -1,   281,    -1,   302,   281,    -1,    82,    -1,    81,    -1,
     269,    -1,   304,   269,    -1,   283,    -1,   304,   283,    -1,
     286,    -1,   304,   286,    -1,   218,    -1,   304,   218,    -1,
     218,   122,   212,   123,    -1,   304,   218,   122,   212,   123,
      -1,   304,    -1,   297,    -1,   269,    -1,   306,   269,    -1,
     283,    -1,   306,   283,    -1,   286,    -1,   306,   286,    -1,
     218,    -1,   306,   218,    -1,   218,   122,   212,   123,    -1,
     306,   218,   122,   212,   123,    -1,   269,    -1,   307,   269,
      -1,   283,    -1,   307,   283,    -1,   286,    -1,   307,   286,
      -1,   290,    -1,   307,   290,    -1,   275,    -1,   307,   275,
      -1,   218,    -1,   307,   218,    -1,   218,   122,   212,   123,
      -1,   307,   218,   122,   212,   123,    -1,   269,    -1,   308,
     269,    -1,   283,    -1,   308,   283,    -1,   286,    -1,   308,
     286,    -1,   290,    -1,   308,   290,    -1,   275,    -1,   308,
     275,    -1,   218,    -1,   308,   218,    -1,   218,   122,   212,
     123,    -1,   308,   218,   122,   212,   123,    -1,   310,   129,
       1,    -1,   309,   129,     1,    -1,   218,    -1,   310,   129,
     218,    -1,   309,   129,   218,    -1,   354,   129,   218,    -1,
     355,   129,   218,    -1,   312,    -1,   149,    -1,    37,    -1,
     149,   135,   267,   136,    -1,   149,   135,   268,   136,    -1,
     149,   135,   148,   136,    -1,   149,   135,   136,    -1,   311,
     135,   267,   136,    -1,   311,   135,   268,   136,    -1,   311,
     135,   148,   136,    -1,   311,   135,   136,    -1,   218,    -1,
     124,   333,   125,    -1,   124,   321,   333,   125,    -1,   124,
     334,   125,    -1,   124,   321,   334,   125,    -1,   312,   135,
     267,   136,    -1,   312,   135,   268,   136,    -1,   312,   135,
     148,   136,    -1,   312,   135,   136,    -1,   312,   124,    -1,
     313,   356,   125,    -1,   313,   357,   125,    -1,   313,   310,
     125,    -1,   313,   309,   125,    -1,   313,   125,    -1,   313,
     309,    -1,   313,     1,    -1,   313,   354,   124,    -1,   313,
     301,   218,   124,    -1,   314,    -1,   312,    -1,   311,   124,
      -1,   317,   356,   125,    -1,   317,   357,   125,    -1,   317,
     310,   125,    -1,   317,   309,   125,    -1,   317,   125,    -1,
     317,   309,    -1,   317,     1,    -1,   317,   354,   124,    -1,
     317,   301,   218,   124,    -1,   318,    -1,   311,    -1,    75,
      -1,    76,    -1,   326,    -1,   327,    -1,    87,   124,   389,
     125,    -1,    80,    -1,   111,    -1,   112,    -1,     3,    -1,
      28,    -1,    76,    -1,    75,    -1,    46,    -1,   323,    -1,
     323,   124,   247,   125,    -1,   324,    -1,   325,   324,    -1,
     325,   129,   324,    -1,   322,   124,   124,   325,   125,   125,
      -1,   322,   124,   124,   125,   125,    -1,   326,    -1,   327,
     326,    -1,   124,   331,   125,    -1,   124,   321,   331,   125,
      -1,   135,   136,    -1,   135,   267,   136,    -1,   135,   268,
     136,    -1,   135,   148,   136,    -1,   328,   135,   136,    -1,
     328,   135,   267,   136,    -1,   328,   135,   148,   136,    -1,
     328,   135,   268,   136,    -1,   124,   125,    -1,   124,   356,
     125,    -1,   124,   357,   125,    -1,   328,   124,   125,    -1,
     328,   124,   356,   125,    -1,   328,   124,   357,   125,    -1,
     124,   332,   125,    -1,   124,   321,   332,   125,    -1,   124,
     125,    -1,   124,   356,   125,    -1,   124,   357,   125,    -1,
     329,   124,   125,    -1,   329,   124,   356,   125,    -1,   329,
     124,   357,   125,    -1,   121,    -1,   121,   284,    -1,   121,
     330,    -1,   121,   284,   330,    -1,   330,    -1,   328,    -1,
     330,   328,    -1,   321,   330,    -1,   321,   330,   328,    -1,
     330,    -1,   329,    -1,   330,   329,    -1,   321,   330,    -1,
     321,   330,   329,    -1,   316,    -1,   330,   316,    -1,   321,
     330,   316,    -1,   333,   321,    -1,   339,   321,    -1,   320,
      -1,   330,   320,    -1,   321,   330,   320,    -1,   334,   321,
      -1,   314,    -1,   330,   314,    -1,   321,   330,   314,    -1,
     330,   321,   314,    -1,   315,    -1,   330,   315,    -1,   321,
     330,   315,    -1,   330,   321,   315,    -1,   318,    -1,   330,
     318,    -1,   321,   330,   318,    -1,   330,   321,   318,    -1,
     319,    -1,   330,   319,    -1,   321,   330,   319,    -1,   330,
     321,   319,    -1,   311,    -1,   330,   311,    -1,   321,   330,
     311,    -1,   330,   321,   311,    -1,   245,    -1,   131,   345,
     130,    -1,   131,   345,   129,   130,    -1,   131,   345,   130,
      -1,   131,   345,   129,   130,    -1,   264,    -1,   131,   345,
     130,     1,    -1,   131,   345,    -1,   131,   345,   129,   130,
       1,    -1,   131,   345,   129,    -1,   244,    -1,   223,    -1,
     263,    -1,   224,    -1,   340,    -1,   342,    -1,   345,   129,
     340,    -1,   345,   129,   342,    -1,   345,   340,    -1,   345,
     342,    -1,   333,    -1,   334,    -1,   333,   128,   340,    -1,
     333,     1,    -1,   333,   128,   342,    -1,   346,    -1,   348,
     129,   346,    -1,    37,   129,   346,    -1,    38,   129,   346,
      -1,    39,   129,   346,    -1,    40,   129,   346,    -1,   149,
     129,   346,    -1,   349,   129,   346,    -1,   347,    -1,   346,
       1,    -1,   348,   129,   347,    -1,   349,   129,   347,    -1,
     298,    -1,   298,   331,    -1,   299,    -1,   299,   331,    -1,
     301,   334,    -1,   301,   331,    -1,   301,   137,    -1,   301,
     137,   334,    -1,   301,    -1,    67,    -1,   301,   334,     1,
      -1,   301,   331,     1,    -1,   352,    -1,   354,   129,   352,
      -1,   354,     1,   129,   352,    -1,   355,   129,   352,    -1,
     355,     1,   129,   352,    -1,     1,   129,   352,    -1,   310,
     129,   352,    -1,   310,     1,   129,   352,    -1,   309,   129,
     352,    -1,   309,     1,   129,   352,    -1,   353,    -1,   354,
     129,   353,    -1,   355,   129,   353,    -1,   355,     1,   129,
     353,    -1,     1,   129,   353,    -1,   310,   129,   353,    -1,
     309,   129,   353,    -1,   309,     1,   129,   353,    -1,   354,
      -1,   354,   129,    53,    -1,   355,   129,    53,    -1,   310,
     129,    53,    -1,   309,   129,    53,    -1,     1,   129,    53,
      -1,   355,    -1,   354,   129,     1,    -1,   355,     1,    -1,
     363,    -1,   326,    -1,   378,    -1,   127,    -1,   133,    -1,
     247,   127,    -1,   381,    -1,   383,    -1,   385,    -1,   362,
      -1,   197,   127,    -1,   196,   127,    -1,   195,   127,    -1,
     364,    -1,   384,    -1,   379,    -1,   382,    -1,   386,    -1,
     385,     1,    -1,   265,    -1,   389,    -1,   389,   124,   245,
     125,    -1,   135,   218,   136,   389,   124,   245,   125,    -1,
     360,    -1,   361,   129,   360,    -1,    -1,    87,   283,   124,
     389,   125,   127,    -1,    87,   283,   124,   389,   133,   361,
     125,   127,    -1,    87,   283,   124,   389,   133,   361,   133,
     361,   125,   127,    -1,    87,   283,   124,   389,   133,   361,
     133,   361,   133,   361,   125,   127,    -1,    87,   283,   124,
     389,     3,   361,   125,   127,    -1,    87,   283,   124,   389,
       3,   361,   133,   361,   125,   127,    -1,    87,   283,   124,
     389,   133,   361,     3,   361,   125,   127,    -1,    87,   124,
     389,   125,   127,    -1,    87,   124,   389,   133,   361,   125,
     127,    -1,    87,   124,   389,   133,   361,   133,   361,   125,
     127,    -1,    87,   124,   389,   133,   361,   133,   361,   133,
     361,   125,   127,    -1,    87,   124,   389,     3,   361,   125,
     127,    -1,    87,   124,   389,     3,   361,   133,   361,   125,
     127,    -1,    87,   124,   389,   133,   361,     3,   361,   125,
     127,    -1,   218,   133,   358,    -1,    54,   267,   133,   358,
      -1,    54,   268,   133,   358,    -1,    54,   133,   358,    -1,
      55,   133,   358,    -1,   218,   133,   367,    -1,    54,   267,
     133,   367,    -1,    54,   268,   133,   367,    -1,    54,   133,
     367,    -1,    55,   133,   367,    -1,   218,   133,   359,    -1,
      54,   267,   133,   359,    -1,    54,   268,   133,   359,    -1,
      54,   133,   359,    -1,    54,   133,    -1,    55,   133,   359,
      -1,    55,   133,    -1,   218,   133,   370,    -1,    54,   267,
     133,   370,    -1,    54,   268,   133,   370,    -1,    54,   133,
     370,    -1,    55,   133,   370,    -1,    81,    -1,    82,    -1,
      55,    -1,    81,    -1,    82,    -1,   300,   127,    -1,   300,
     348,   127,    -1,   172,   127,    -1,   370,   127,    -1,   302,
     127,    -1,   302,   348,   127,    -1,   303,   348,   127,    -1,
     176,   127,    -1,    78,   218,   128,   244,   127,    -1,    31,
      78,   218,   128,   244,   127,    -1,   302,     1,    -1,   300,
       1,    -1,   370,     1,    -1,   173,     1,    -1,   172,     1,
      -1,   300,   349,    -1,   367,    -1,   371,   367,    -1,   372,
     367,    -1,   371,     1,   127,    -1,   370,    -1,   371,   370,
      -1,   358,    -1,   373,   358,    -1,   374,   358,    -1,   359,
      -1,   373,   359,    -1,   374,   359,    -1,   373,   367,    -1,
     374,   367,    -1,   373,   370,    -1,   374,   370,    -1,   373,
      -1,   371,    -1,   371,   373,    -1,   372,   373,    -1,   374,
      -1,   372,    -1,   371,   374,    -1,   372,   374,    -1,   131,
      -1,   379,   130,    -1,   377,   376,    -1,   377,    -1,   377,
     375,    -1,   127,    -1,   247,   127,    -1,   265,   127,    -1,
      56,   124,   247,   125,   358,    -1,    56,   124,   265,   125,
     358,    -1,    56,   124,   247,   125,   358,    66,   358,    -1,
      56,   124,   265,   125,   358,    66,   358,    -1,    57,   124,
     247,   125,   358,    -1,    57,   124,   265,   125,   358,    -1,
      56,   124,   265,    -1,   381,     1,    -1,    58,   124,   247,
     125,   358,    -1,    58,   124,   265,   358,    -1,    58,   124,
     125,   358,    -1,    59,   358,    58,   124,   247,   125,   127,
      -1,    59,   358,    58,   124,   265,   127,    -1,    60,   124,
     380,   380,   125,   358,    -1,    60,   124,   380,   125,   358,
      -1,    60,   124,   380,   380,   247,   125,   358,    -1,    60,
     124,   380,   380,   265,   358,    -1,    60,   124,   125,   358,
      -1,    60,   124,   218,   133,   247,   125,   358,    -1,    60,
     124,   218,   133,   247,   127,   247,   125,   358,    -1,    60,
     124,     1,    -1,    60,   124,   265,     1,    -1,    60,   124,
     380,     1,    -1,    60,   124,   380,   265,     1,    -1,    60,
     124,   380,   380,   265,    -1,    60,   124,   380,   380,   125,
     359,    -1,    60,   124,   380,   380,   247,   125,   359,    -1,
      60,   124,   380,   380,   265,   359,    -1,    59,   358,    58,
     124,   247,   125,    -1,    59,   358,    58,   124,   247,    -1,
      59,   358,    58,   124,   265,    -1,    59,   358,    58,   124,
      -1,    59,   358,    58,    -1,    59,   358,    -1,    59,    -1,
      58,     1,    -1,    58,   124,   125,     1,    -1,    58,   124,
     265,    -1,    58,   124,   247,   125,   359,    -1,    58,   124,
     265,   359,    -1,    61,   218,   127,    -1,    62,   127,    -1,
      63,   127,    -1,    64,   127,    -1,    64,   247,   127,    -1,
      64,   265,   127,    -1,    64,   223,   127,    -1,    64,   224,
     127,    -1,    64,   265,    -1,    64,   224,    -1,    64,    -1,
      61,    -1,   302,   335,   371,   378,    -1,   302,   335,   378,
      -1,   302,   337,   371,   378,    -1,   302,   337,   378,    -1,
     335,   371,   378,    -1,   335,   378,    -1,   302,   335,   371,
     379,    -1,   302,   335,   379,    -1,   302,   337,   371,   379,
      -1,   302,   337,   379,    -1,   335,   371,   379,    -1,   335,
     379,    -1,     5,    -1,   389,     5,    -1,   387,    -1,   215,
      -1,   302,   215,    -1,   368,    -1,    77,   389,    -1,    77,
      31,   389,    -1,    77,   218,   389,    -1,   127,    -1,   365,
     387,    -1,   365,   215,    -1,   365,   368,    -1,   365,    77,
     389,    -1,   365,    77,    31,   389,    -1,   365,    77,   218,
     389,    -1,   365,   133,    -1,    31,   133,    -1,   102,   218,
      -1,   102,   151,    -1,   395,    -1,   365,   395,    -1,   217,
      -1,   302,   217,    -1,   388,    -1,   365,   217,    -1,   365,
     388,    -1,   369,    -1,   365,   369,    -1,   391,    -1,   393,
     391,    -1,   392,   391,    -1,   393,     1,    -1,   392,     1,
      -1,   390,    -1,   393,   390,    -1,   392,   215,    -1,   392,
     365,   215,    -1,   393,    -1,   392,    -1,    -1,   106,   389,
     218,   131,   400,   130,    -1,   106,   389,   151,   131,   400,
     130,    -1,   106,   389,   131,   400,   130,    -1,   301,   218,
     389,   127,    -1,   218,    -1,   123,   218,    -1,   122,   218,
      -1,   397,    -1,   398,   129,   397,    -1,   108,   398,   127,
      -1,   108,   398,   218,   127,    -1,   396,    -1,   399,    -1,
     400,   396,    -1,   400,   399,    -1,   109,   124,   245,   129,
     245,   125,    -1,   107,   124,   389,   129,   218,   125,    -1,
     108,   124,   389,   129,   218,   125,    -1,   106,   124,   389,
     125,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   285,   285,   304,   343,   344,   424,   428,   431,   432,
     433,   472,   474,   479,   484,   489,   491,   496,   498,   503,
     505,   510,   512,   514,   516,   518,   522,   526,   539,   541,
     543,   545,   547,   553,   555,   560,   565,   570,   572,   574,
     579,   580,   584,   585,   596,   600,   601,   603,   608,   609,
     611,   614,   626,   637,   656,   658,   663,   664,   665,   666,
     667,   668,   669,   670,   683,   687,   688,   689,   690,   694,
     695,   696,   697,   698,   699,   700,   704,   706,   711,   713,
     715,   717,   719,   749,   751,   756,   758,   760,   762,   764,
     793,   795,   797,   802,   804,   809,   811,   815,   817,   819,
     821,   826,   829,   832,   835,   900,   902,   907,   909,   911,
     913,   915,   946,   950,   951,   952,   956,   957,   958,   962,
     963,   964,   965,   969,   972,   975,   978,   981,   986,   987,
     989,   991,   993,   995,  1000,  1004,  1007,  1010,  1013,  1016,
    1021,  1022,  1024,  1029,  1033,  1035,  1040,  1042,  1047,  1049,
    1054,  1059,  1061,  1066,  1068,  1070,  1072,  1077,  1079,  1081,
    1083,  1088,  1089,  1090,  1091,  1092,  1093,  1094,  1095,  1096,
    1097,  1098,  1100,  1101,  1103,  1107,  1110,  1111,  1112,  1113,
    1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,
    1125,  1126,  1130,  1131,  1132,  1136,  1140,  1141,  1142,  1146,
    1147,  1148,  1149,  1150,  1154,  1155,  1167,  1168,  1172,  1173,
    1174,  1175,  1176,  1177,  1178,  1179,  1183,  1187,  1188,  1192,
    1200,  1201,  1205,  1206,  1207,  1211,  1212,  1216,  1217,  1218,
    1219,  1220,  1221,  1261,  1262,  1266,  1274,  1275,  1283,  1284,
    1286,  1287,  1296,  1297,  1301,  1308,  1315,  1321,  1328,  1334,
    1343,  1350,  1356,  1362,  1368,  1374,  1380,  1391,  1396,  1397,
    1402,  1403,  1404,  1408,  1412,  1413,  1414,  1415,  1416,  1417,
    1418,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,  1439,
    1440,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,  1449,
    1450,  1451,  1452,  1453,  1454,  1456,  1457,  1458,  1459,  1460,
    1462,  1463,  1467,  1471,  1475,  1476,  1480,  1482,  1483,  1484,
    1485,  1486,  1487,  1488,  1489,  1490,  1492,  1493,  1494,  1495,
    1496,  1497,  1498,  1499,  1526,  1527,  1528,  1529,  1533,  1534,
    1535,  1536,  1537,  1541,  1542,  1543,  1544,  1546,  1547,  1548,
    1549,  1552,  1553,  1555,  1559,  1560,  1569,  1570,  1571,  1572,
    1573,  1574,  1575,  1576,  1580,  1581,  1582,  1586,  1587,  1588,
    1589,  1590,  1591,  1592,  1596,  1597,  1598,  1599,  1600,  1604,
    1605,  1606,  1607,  1608,  1612,  1620,  1621,  1622,  1623,  1624,
    1625,  1626,  1627,  1628,  1632,  1633,  1634,  1635,  1636,  1638,
    1639,  1640,  1641,  1645,  1646,  1647,  1649,  1650,  1654,  1655,
    1656,  1658,  1659,  1663,  1664,  1665,  1667,  1668,  1672,  1673,
    1674,  1678,  1679,  1680,  1684,  1685,  1686,  1687,  1688,  1690,
    1691,  1692,  1693,  1695,  1696,  1697,  1698,  1700,  1701,  1702,
    1703,  1707,  1708,  1709,  1710,  1711,  1713,  1714,  1715,  1716,
    1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,
    1730,  1734,  1735,  1736,  1737,  1741,  1742,  1743,  1747,  1748,
    1749,  1750,  1752,  1753,  1755,  1756,  1761,  1763,  1768,  1796,
    1797,  1798,  1799,  1801,  1802,  1803,  1804,  1806,  1807,  1811,
    1812,  1821,  1822,  1826,  1827,  1828,  1829,  1830,  1831,  1832,
    1836,  1837,  1841,  1845,  1849,  1856,  1857,  1858,  1859,  1860,
    1864,  1865,  1908,  1909,  1910,  1911,  1912,  1913,  1914,  1918,
    1919,  1920,  1921,  1922,  1929,  1930,  1931,  1932,  1936,  1937,
    1938,  1940,  1941,  1945,  1946,  1947,  1949,  1950,  1954,  1955,
    1956,  1958,  1959,  1963,  1964,  1965,  1969,  1970,  1971,  1975,
    1976,  1977,  1978,  1979,  1980,  1981,  1982,  1983,  1985,  1986,
    1987,  1988,  1989,  1990,  1991,  1992,  1994,  1995,  1996,  1997,
    1999,  2000,  2001,  2002,  2004,  2012,  2016,  2021,  2028,  2029,
    2033,  2038,  2039,  2043,  2044,  2045,  2046,  2052,  2053,  2054,
    2058,  2059,  2060,  2061,  2065,  2067,  2071,  2072,  2073,  2074,
    2075,  2076,  2077,  2081,  2082,  2083,  2084,  2085,  2086,  2087,
    2091,  2092,  2093,  2094,  2095,  2096,  2100,  2101,  2102,  2106,
    2110,  2111,  2115,  2116,  2117,  2121,  2122,  2124,  2125,  2126,
    2127,  2128,  2130,  2131,  2132,  2133,  2134,  2136,  2137,  2141,
    2142,  2146,  2147,  2148,  2152,  2153,  2154,  2155,  2156,  2157,
    2158,  2159,  2160,  2162,  2163,  2165,  2166,  2167,  2168,  2169,
    2171,  2172,  2173,  2174,  2178,  2179,  2183,  2184,  2188,  2192,
    2193,  2194,  2199,  2200,  2204,  2205,  2206,  2207,  2208,  2209,
    2210,  2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,
    2220,  2221,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,
    2230,  2231,  2235,  2236,  2237,  2238,  2239,  2240,  2241,  2242,
    2243,  2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,
    2253,  2254,  2255,  2256,  2257,  2258,  2259,  2260,  2266,  2268,
    2270,  2272,  2274,  2276,  2278,  2280,  2282,  2284,  2289,  2290,
    2294,  2300,  2306,  2313,  2323,  2324,  2325,  2326,  2330,  2331,
    2332,  2334,  2335,  2336,  2338,  2339,  2340,  2344,  2348,  2356,
    2365,  2374,  2375,  2377,  2378,  2382,  2389,  2396,  2399,  2412,
    2426,  2429,  2431,  2433,  2438,  2439,  2443,  2444,  2445,  2446,
    2447,  2448,  2449,  2450,  2454,  2455,  2456,  2457,  2458,  2459,
    2460,  2461,  2462,  2463,  2467,  2468,  2469,  2470,  2471,  2472,
    2473,  2474,  2475,  2476,  2480,  2481,  2482,  2483,  2484,  2485,
    2486,  2487,  2488,  2489,  2490,  2491,  2495,  2496,  2497,  2498,
    2499,  2500,  2501,  2502,  2503,  2504,  2508,  2509,  2513,  2514,
    2515,  2516,  2517,  2518,  2519,  2520,  2521,  2523,  2525,  2533,
    2543,  2544,  2548,  2549,  2550,  2551,  2552,  2553,  2554,  2555,
    2556,  2564,  2573,  2574,  2575,  2576,  2577,  2578,  2579,  2580,
    2581,  2582,  2583,  2584,  2585,  2593,  2602,  2603,  2604,  2605,
    2606,  2607,  2608,  2609,  2610,  2611,  2612,  2613,  2614,  2622,
    2631,  2632,  2636,  2637,  2638,  2639,  2640,  2644,  2645,  2652,
    2654,  2663,  2672,  2681,  2690,  2691,  2692,  2693,  2697,  2698,
    2699,  2700,  2701,  2702,  2703,  2704,  2705,  2709,  2713,  2714,
    2715,  2716,  2717,  2722,  2731,  2740,  2749,  2763,  2764,  2769,
    2773,  2774,  2775,  2776,  2777,  2782,  2791,  2800,  2809,  2823,
    2824,  2873,  2874,  2875,  2876,  2877,  2889,  2890,  2891,  2896,
    2897,  2898,  2899,  2900,  2904,  2905,  2909,  2910,  2911,  2915,
    2916,  2920,  2921,  2925,  2926,  2927,  2928,  2929,  2930,  2931,
    2932,  2933,  2934,  2935,  2936,  2937,  2938,  2939,  2940,  2944,
    2945,  2946,  2947,  2948,  2949,  2950,  2951,  2955,  2956,  2957,
    2958,  2962,  2963,  2964,  2965,  2966,  2970,  2971,  2972,  2973,
    2974,  2978,  2979,  2981,  2983,  2985,  2990,  2991,  2993,  2995,
    3000,  3001,  3002,  3003,  3007,  3008,  3009,  3010,  3014,  3015,
    3016,  3017,  3021,  3022,  3023,  3024,  3028,  3029,  3030,  3031,
    3035,  3036,  3037,  3054,  3055,  3072,  3073,  3074,  3075,  3088,
    3105,  3106,  3111,  3112,  3116,  3117,  3118,  3119,  3122,  3123,
    3127,  3128,  3129,  3133,  3137,  3141,  3142,  3143,  3144,  3145,
    3146,  3147,  3156,  3165,  3166,  3167,  3168,  3172,  3173,  3177,
    3178,  3183,  3184,  3185,  3186,  3187,  3188,  3207,  3208,  3212,
    3213,  3214,  3215,  3216,  3217,  3219,  3220,  3221,  3222,  3226,
    3227,  3228,  3229,  3230,  3232,  3233,  3234,  3238,  3239,  3240,
    3241,  3242,  3243,  3247,  3248,  3249,  3254,  3255,  3256,  3257,
    3258,  3259,  3260,  3261,  3262,  3263,  3264,  3265,  3266,  3270,
    3271,  3272,  3273,  3274,  3275,  3276,  3280,  3281,  3282,  3286,
    3287,  3288,  3292,  3293,  3294,  3295,  3297,  3298,  3299,  3301,
    3302,  3303,  3304,  3306,  3307,  3308,  3312,  3313,  3314,  3315,
    3316,  3318,  3319,  3320,  3321,  3322,  3326,  3327,  3328,  3329,
    3330,  3331,  3332,  3334,  3335,  3336,  3337,  3338,  3342,  3343,
    3344,  3348,  3349,  3353,  3354,  3355,  3356,  3360,  3361,  3362,
    3364,  3365,  3366,  3370,  3374,  3375,  3377,  3378,  3379,  3383,
    3384,  3385,  3386,  3390,  3391,  3395,  3396,  3397,  3401,  3402,
    3403,  3404,  3405,  3406,  3407,  3411,  3412,  3413,  3414,  3418,
    3419,  3420,  3421,  3425,  3429,  3433,  3435,  3438,  3444,  3445,
    3446,  3450,  3451,  3452,  3453,  3454,  3455,  3459,  3460,  3464,
    3465,  3466,  3468,  3469,  3471,  3472,  3473,  3474,  3475,  3477,
    3478,  3482,  3483,  3484,  3485,  3489,  3490,  3491,  3492,  3494,
    3495,  3496,  3497,  3498,  3499,  3500,  3503,  3507,  3508,  3512,
    3513,  3517,  3518,  3519,  3520,  3521,  3522,  3523,  3524,  3528,
    3529,  3530,  3531,  3537,  3538,  3540,  3541,  3544,  3545,  3548,
    3549,  3550,  3551,  3552,  3553,  3557,  3558,  3570,  3571,  3574,
    3577,  3579,  3580,  3581,  3591,  3593,  3594,  3596,  3597,  3598,
    3599,  3609,  3610,  3611,  3612,  3613,  3614,  3618,  3619,  3628,
    3630,  3631,  3633,  3635,  3639,  3640,  3641,  3642,  3643,  3647,
    3648,  3649,  3651,  3656,  3657,  3658,  3662,  3663,  3664,  3668,
    3672,  3673,  3674,  3678,  3679,  3683,  3684,  3688,  3689,  3690,
    3691,  3695,  3699,  3703,  3707
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "INT128", "FLOAT128", "LONG", "SIGNED",
  "UNSIGNED", "FLOAT", "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST",
  "STRUCT", "UNION", "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH",
  "WHILE", "DO", "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX",
  "ELSE", "CLASS", "THISCLASS", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "THREAD",
  "WIDE_STRING_LITERAL", "BUILTIN_OFFSETOF", "'*'", "'<'", "'>'", "'('",
  "')'", "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'", "':'", "'$'",
  "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'", "'^'", "'|'",
  "'?'", "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "multi_attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_noexp",
  "initializer_error", "initializer_condition",
  "initializer_condition_error", "initializer_list", "init_declarator",
  "init_declarator_error", "init_declarator_list",
  "init_declarator_list_error", "type_name", "guess_type_name",
  "parameter_declaration", "parameter_declaration_error", "parameter_list",
  "parameter_list_error", "parameter_type_list",
  "parameter_type_list_error", "statement", "statement_error", "asm_field",
  "asm_field_list", "asm_statement", "labeled_statement",
  "labeled_statement_error", "declaration_mode", "member_access",
  "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    42,    60,    62,    40,    41,   126,    59,    61,    44,
     125,   123,    46,    58,    36,    91,    93,    38,    43,    45,
      33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   146,   147,   147,   148,   148,   149,   150,   151,   151,
     151,   152,   152,   153,   154,   155,   155,   156,   156,   157,
     157,   158,   158,   158,   158,   158,   158,   158,   159,   159,
     159,   159,   159,   160,   160,   161,   162,   163,   163,   163,
     164,   164,   165,   165,   165,   166,   166,   166,   167,   167,
     167,   167,   167,   167,   168,   168,   169,   169,   169,   169,
     169,   169,   169,   169,   169,   170,   170,   170,   170,   171,
     171,   171,   171,   171,   171,   171,   172,   172,   173,   173,
     173,   173,   173,   174,   174,   175,   175,   175,   175,   175,
     176,   176,   176,   177,   177,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   179,   179,   180,   180,   180,
     180,   180,   181,   182,   182,   182,   183,   183,   183,   184,
     184,   184,   184,   185,   185,   185,   185,   185,   186,   186,
     186,   186,   186,   186,   187,   188,   188,   188,   188,   188,
     189,   189,   189,   190,   191,   191,   192,   192,   193,   193,
     194,   195,   195,   196,   196,   196,   196,   197,   197,   197,
     197,   198,   198,   198,   198,   198,   198,   198,   198,   198,
     198,   198,   198,   198,   198,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   200,   200,   200,   201,
     201,   201,   201,   201,   202,   202,   203,   203,   204,   204,
     204,   204,   204,   204,   204,   204,   205,   206,   206,   207,
     208,   208,   209,   209,   209,   210,   210,   211,   211,   211,
     211,   211,   211,   212,   212,   213,   214,   214,   214,   214,
     214,   214,   214,   214,   215,   215,   215,   215,   215,   215,
     216,   217,   217,   217,   217,   217,   217,   218,   219,   219,
     220,   220,   220,   221,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   223,   224,   225,   225,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   227,   227,   227,   227,   228,   228,
     228,   228,   228,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   230,   230,   231,   231,   231,   231,
     231,   231,   231,   231,   232,   232,   232,   233,   233,   233,
     233,   233,   233,   233,   234,   234,   234,   234,   234,   235,
     235,   235,   235,   235,   236,   237,   237,   237,   237,   237,
     237,   237,   237,   237,   238,   238,   238,   238,   238,   238,
     238,   238,   238,   239,   239,   239,   239,   239,   240,   240,
     240,   240,   240,   241,   241,   241,   241,   241,   242,   242,
     242,   243,   243,   243,   244,   244,   244,   244,   244,   244,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
     244,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     246,   247,   247,   247,   247,   248,   248,   248,   249,   249,
     249,   249,   249,   249,   249,   249,   249,   249,   249,   250,
     250,   250,   250,   250,   250,   250,   250,   250,   250,   251,
     251,   252,   252,   253,   253,   253,   253,   253,   253,   253,
     254,   254,   254,   254,   254,   255,   255,   255,   255,   255,
     256,   256,   256,   256,   256,   256,   256,   256,   256,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   258,   258,
     258,   258,   258,   259,   259,   259,   259,   259,   260,   260,
     260,   260,   260,   261,   261,   261,   262,   262,   262,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   264,   264,
     264,   264,   264,   265,   265,   265,   265,   265,   265,   265,
     266,   266,   266,   266,   267,   268,   269,   269,   269,   269,
     269,   269,   269,   270,   270,   270,   270,   270,   270,   270,
     271,   271,   271,   271,   271,   271,   272,   272,   272,   273,
     274,   274,   275,   275,   275,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   277,
     277,   278,   278,   278,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   280,   280,   281,   281,   282,   283,
     283,   283,   284,   284,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   287,   287,
     287,   287,   287,   287,   287,   287,   287,   287,   288,   288,
     289,   289,   289,   289,   290,   290,   290,   290,   291,   291,
     291,   291,   291,   291,   291,   291,   291,   292,   293,   293,
     294,   295,   295,   295,   295,   296,   296,   296,   296,   296,
     296,   296,   296,   296,   297,   297,   298,   298,   298,   298,
     298,   298,   298,   298,   299,   299,   299,   299,   299,   299,
     299,   299,   299,   299,   300,   300,   300,   300,   300,   300,
     300,   300,   300,   300,   301,   301,   301,   301,   301,   301,
     301,   301,   301,   301,   301,   301,   302,   302,   302,   302,
     302,   302,   302,   302,   302,   302,   303,   303,   304,   304,
     304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
     305,   305,   306,   306,   306,   306,   306,   306,   306,   306,
     306,   306,   307,   307,   307,   307,   307,   307,   307,   307,
     307,   307,   307,   307,   307,   307,   308,   308,   308,   308,
     308,   308,   308,   308,   308,   308,   308,   308,   308,   308,
     309,   309,   310,   310,   310,   310,   310,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   311,   311,   312,   312,
     312,   312,   312,   312,   312,   312,   312,   313,   314,   314,
     314,   314,   314,   315,   315,   315,   315,   316,   316,   317,
     318,   318,   318,   318,   318,   319,   319,   319,   319,   320,
     320,   321,   321,   321,   321,   321,   322,   322,   322,   323,
     323,   323,   323,   323,   324,   324,   325,   325,   325,   326,
     326,   327,   327,   328,   328,   328,   328,   328,   328,   328,
     328,   328,   328,   328,   328,   328,   328,   328,   328,   329,
     329,   329,   329,   329,   329,   329,   329,   330,   330,   330,
     330,   331,   331,   331,   331,   331,   332,   332,   332,   332,
     332,   333,   333,   333,   333,   333,   334,   334,   334,   334,
     335,   335,   335,   335,   336,   336,   336,   336,   337,   337,
     337,   337,   338,   338,   338,   338,   339,   339,   339,   339,
     340,   340,   340,   341,   341,   342,   342,   342,   342,   342,
     343,   343,   344,   344,   345,   345,   345,   345,   345,   345,
     346,   346,   346,   347,   347,   348,   348,   348,   348,   348,
     348,   348,   348,   349,   349,   349,   349,   350,   350,   351,
     351,   352,   352,   352,   352,   352,   352,   353,   353,   354,
     354,   354,   354,   354,   354,   354,   354,   354,   354,   355,
     355,   355,   355,   355,   355,   355,   355,   356,   356,   356,
     356,   356,   356,   357,   357,   357,   358,   358,   358,   358,
     358,   358,   358,   358,   358,   358,   358,   358,   358,   359,
     359,   359,   359,   359,   359,   359,   360,   360,   360,   361,
     361,   361,   362,   362,   362,   362,   362,   362,   362,   362,
     362,   362,   362,   362,   362,   362,   363,   363,   363,   363,
     363,   363,   363,   363,   363,   363,   364,   364,   364,   364,
     364,   364,   364,   364,   364,   364,   364,   364,   365,   365,
     365,   366,   366,   367,   367,   367,   367,   368,   368,   368,
     368,   368,   368,   369,   370,   370,   370,   370,   370,   371,
     371,   371,   371,   372,   372,   373,   373,   373,   374,   374,
     374,   374,   374,   374,   374,   375,   375,   375,   375,   376,
     376,   376,   376,   377,   378,   379,   379,   379,   380,   380,
     380,   381,   381,   381,   381,   381,   381,   382,   382,   383,
     383,   383,   383,   383,   383,   383,   383,   383,   383,   383,
     383,   384,   384,   384,   384,   384,   384,   384,   384,   384,
     384,   384,   384,   384,   384,   384,   384,   384,   384,   384,
     384,   385,   385,   385,   385,   385,   385,   385,   385,   386,
     386,   386,   386,   387,   387,   387,   387,   387,   387,   388,
     388,   388,   388,   388,   388,   389,   389,   390,   390,   390,
     390,   390,   390,   390,   390,   390,   390,   390,   390,   390,
     390,   390,   390,   390,   390,   390,   390,   391,   391,   391,
     391,   391,   391,   391,   392,   392,   392,   392,   392,   393,
     393,   393,   393,   394,   394,   394,   395,   395,   395,   396,
     397,   397,   397,   398,   398,   399,   399,   400,   400,   400,
     400,   401,   402,   403,   404
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4,     1,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     2,     1,     3,     3,     1,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     2,     5,     6,     6,     2,     5,     1,
       1,     1,     4,     1,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
       5,     5,     5,     5,     4,     4,     4,     4,     5,     5,
       5,     5,     4,     4,     4,     4,     5,     5,     5,     5,
       5,     5,     5,     5,     3,     3,     2,     2,     1,     3,
       3,     3,     3,     1,     2,     3,     3,     2,     2,     2,
       1,     2,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     4,     4,     1,     3,     2,     1,
       2,     2,     2,     4,     4,     3,     3,     4,     5,     4,
       6,     6,     4,     5,     4,     6,     6,     5,     5,     2,
       2,     2,     5,     3,     5,     6,     5,     7,     7,     8,
       8,     7,     7,     3,     3,     3,     4,     3,     5,     5,
       6,     7,     6,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     4,     1,     1,     2,
       2,     3,     5,     2,     3,     5,     5,     5,     1,     3,
       2,     2,     3,     3,     2,     3,     3,     4,     3,     3,
       3,     3,     3,     3,     4,     4,     4,     1,     1,     4,
       3,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       3,     3,     1,     3,     3,     3,     3,     1,     1,     1,
       4,     4,     4,     3,     4,     4,     4,     3,     1,     3,
       4,     3,     4,     4,     4,     4,     3,     2,     3,     3,
       3,     3,     2,     2,     2,     3,     4,     1,     1,     2,
       3,     3,     3,     3,     2,     2,     2,     3,     4,     1,
       1,     1,     1,     1,     1,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     1,     2,     3,     6,
       5,     1,     2,     3,     4,     2,     3,     3,     3,     3,
       4,     4,     4,     2,     3,     3,     3,     4,     4,     3,
       4,     2,     3,     3,     3,     4,     4,     1,     2,     2,
       3,     1,     1,     2,     2,     3,     1,     1,     2,     2,
       3,     1,     2,     3,     2,     2,     1,     2,     3,     2,
       1,     2,     3,     3,     1,     2,     3,     3,     1,     2,
       3,     3,     1,     2,     3,     3,     1,     2,     3,     3,
       1,     3,     4,     3,     4,     1,     4,     2,     5,     3,
       1,     1,     1,     1,     1,     1,     3,     3,     2,     2,
       1,     1,     3,     2,     3,     1,     3,     3,     3,     3,
       3,     3,     3,     1,     2,     3,     3,     1,     2,     1,
       2,     2,     2,     2,     3,     1,     1,     3,     3,     1,
       3,     4,     3,     4,     3,     3,     4,     3,     4,     1,
       3,     3,     4,     3,     3,     3,     4,     1,     3,     3,
       3,     3,     3,     1,     3,     2,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     1,     2,     1,     1,     4,     7,     1,
       3,     0,     6,     8,    10,    12,     8,    10,    10,     5,
       7,     9,    11,     7,     9,     9,     3,     4,     4,     3,
       3,     3,     4,     4,     3,     3,     3,     4,     4,     3,
       2,     3,     2,     3,     4,     4,     3,     3,     1,     1,
       1,     1,     1,     2,     3,     2,     2,     2,     3,     3,
       2,     5,     6,     2,     2,     2,     2,     2,     2,     1,
       2,     2,     3,     1,     2,     1,     2,     2,     1,     2,
       2,     2,     2,     2,     2,     1,     1,     2,     2,     1,
       1,     2,     2,     1,     2,     2,     1,     2,     1,     2,
       2,     5,     5,     7,     7,     5,     5,     3,     2,     5,
       4,     4,     7,     6,     6,     5,     7,     6,     4,     7,
       9,     3,     4,     4,     5,     5,     6,     7,     6,     6,
       5,     5,     4,     3,     2,     1,     2,     4,     3,     5,
       4,     3,     2,     2,     2,     3,     3,     3,     3,     2,
       2,     1,     1,     4,     3,     4,     3,     3,     2,     4,
       3,     4,     3,     3,     2,     1,     2,     1,     1,     2,
       1,     2,     3,     3,     1,     2,     2,     2,     3,     4,
       4,     2,     2,     2,     2,     1,     2,     1,     2,     1,
       2,     2,     1,     2,     1,     2,     2,     2,     2,     1,
       2,     2,     3,     1,     1,     0,     6,     6,     5,     4,
       1,     2,     2,     1,     3,     3,     4,     1,     1,     2,
       2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1305,   257,     6,   593,   594,   595,   597,   598,   665,   666,
     667,   668,   669,   670,   671,   673,   676,   677,   674,   675,
     659,   660,   664,   672,   764,   765,   609,  1150,   235,   685,
     921,   922,     0,     0,   926,  1148,  1149,   686,   687,   678,
       0,     0,     0,     0,     0,   927,   928,   689,   688,   690,
     691,   599,   596,   967,     0,  1274,   812,   681,     8,     4,
       0,     0,     0,  1268,     0,  1287,   888,   806,     0,   680,
       0,   654,   656,   814,   816,   661,   808,   810,   747,   679,
       0,     0,   655,   657,     0,     0,     0,     0,     0,   990,
     658,     0,   923,   924,     0,     0,     0,  1270,  1292,  1267,
    1289,  1299,  1294,     0,     0,     0,  1285,     0,  1282,  1265,
       0,     0,  1271,     0,     0,     0,     0,  1284,  1283,     0,
     662,   968,   658,   969,   879,   878,   888,   920,   877,   907,
     981,     0,   919,   986,     0,     0,     0,     0,     0,     0,
    1160,     0,   237,   236,     0,     0,   245,     0,   244,     2,
       3,     0,     5,     0,   611,   610,     0,     0,   631,     0,
       0,     0,     0,   751,     0,   731,   730,     0,  1163,   595,
     668,   669,   670,   671,  1157,   813,     8,  1269,  1288,   888,
     807,   815,   817,   809,   811,   990,   998,   658,     0,     0,
    1031,     0,     0,     0,  1043,     0,     0,   879,     0,     0,
       0,   878,     0,     0,   897,     0,     0,   586,   587,   588,
     590,   591,  1056,   592,   589,   902,   800,   872,   794,     0,
     804,     0,   796,   798,   747,   802,     0,     0,  1055,     0,
       0,  1059,  1069,     0,     0,     0,     0,     0,     0,   942,
     991,     0,   693,   694,   695,   696,   697,   698,   699,   701,
     704,   705,   702,   703,   692,   700,   717,   706,     0,     0,
     711,   710,   712,   713,  1193,   709,     0,     0,   784,   708,
     790,   786,   788,   792,   707,     0,  1169,     0,     0,     0,
       0,  1258,  1264,   595,     0,  1281,  1276,  1290,     0,  1277,
    1293,  1275,  1291,  1286,  1298,  1301,     0,     0,     0,     0,
       0,  1296,  1297,  1300,  1295,     1,     0,  1272,  1273,  1266,
       0,     0,   459,   263,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   273,     0,   347,     0,   350,     0,     0,   346,
     348,   349,   351,     0,   265,     0,   264,   306,   272,   271,
     258,   458,     0,   344,   354,     0,   357,   364,   369,   375,
       0,   384,   393,   398,   403,   408,   411,   414,   431,     0,
     480,   479,   481,   483,   490,   495,   500,   509,   518,   523,
     528,   533,   536,   539,     0,   260,   296,   297,   298,   299,
       0,     0,     0,     0,     0,   663,   970,     0,   909,     0,
     914,     0,     0,     0,     0,     0,     0,     0,   920,   982,
     987,     0,   889,   984,   891,   989,   985,   678,     4,   229,
     228,   227,   233,     0,   264,   354,   219,   481,     0,   206,
     249,     0,     0,   248,   255,     0,     0,  1151,  1152,     0,
     168,     0,   169,   170,     0,     0,     0,     0,     0,   172,
     246,     0,     0,     0,     0,    29,    31,   163,   175,   188,
       0,   187,     0,   116,   119,     0,   195,   128,     0,   164,
     140,     0,   167,   183,   196,   199,     0,     0,   264,     0,
       0,   176,     0,   994,   658,     0,    12,    18,     0,   819,
     818,   826,   820,     0,   822,   824,   747,   831,   830,   250,
     256,   247,     0,     0,   239,   238,   644,   600,   606,   643,
     647,   633,     0,     0,     0,   222,   223,   224,   225,     0,
     217,     0,   760,   753,     0,     0,   750,   757,   752,     0,
       0,   763,   754,     0,     0,   733,   732,     0,     0,     0,
       0,     0,     0,     0,   991,   999,     0,  1033,     0,     0,
    1254,  1260,     0,  1256,  1262,  1044,  1158,     0,     0,     0,
    1159,   896,     0,   264,   584,   585,     0,     0,     0,     0,
     611,   610,   612,     0,   734,     0,     0,   668,     0,     0,
    1053,   801,     8,   888,   795,   805,   797,   799,   803,   920,
     877,   658,   972,   971,     0,     0,     0,   901,     0,     0,
     900,     0,     0,     0,  1085,     0,   898,   899,   992,     0,
     993,     0,     0,  1167,  1155,  1166,    76,  1164,   696,   697,
     698,   699,  1153,   888,   785,   791,   787,   789,   793,   658,
       0,  1168,  1165,  1156,     0,  1170,     0,  1257,  1263,  1171,
       0,     0,     0,     0,     0,     0,     0,     0,  1252,     0,
       0,     0,   706,     0,     0,     0,   157,  1089,  1090,   709,
       0,     0,     0,   264,     0,   354,     0,     0,   481,   568,
     573,     0,  1087,  1175,  1178,  1095,  1086,  1099,     0,     0,
       0,     0,  1197,  1195,  1088,  1101,     0,  1102,  1093,  1100,
       0,  1103,  1194,     0,     0,  1278,   888,     0,     0,     0,
    1288,     0,   877,   998,   658,     0,     0,     0,     0,  1264,
    1302,     0,     0,   414,     0,     0,   925,     0,   337,   473,
       0,   333,   469,   334,   470,     0,   866,   856,   864,   858,
     860,   862,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   341,   477,     0,   274,     0,     0,
       0,   770,   766,   768,   772,  1047,     0,   261,     0,   301,
     302,     0,   325,     0,   324,     0,   461,    93,     0,   270,
     460,     0,   314,   315,     0,     0,     0,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   440,     0,     0,
     336,   472,   335,   471,     0,     0,     0,     0,     0,     0,
       0,   376,   501,     0,     0,   374,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   682,     0,   322,   323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   683,   684,     0,     0,     0,  1317,
    1318,     0,     0,     0,   883,     0,     0,     0,   887,     0,
       0,     0,   913,   912,   910,   911,   920,   982,   987,   890,
     892,  1009,    10,     9,     0,     0,     0,   658,   971,   207,
       0,     0,   264,   206,     0,     0,   838,   832,   834,   836,
       0,     0,     0,    16,    20,     0,   185,   184,   186,     0,
       0,     0,     0,   347,     0,   264,     0,    26,     0,    21,
      28,    24,     0,    25,    23,    22,    30,    32,   190,    83,
     191,   122,   162,     0,     0,     0,     0,   132,     0,     0,
     134,     0,     0,   143,   161,   200,   197,   202,   201,   198,
     203,   115,     0,     0,     0,   888,   728,   177,  1006,     0,
    1002,   658,     0,    11,    17,   718,   904,  1055,     0,     0,
       0,   995,     0,     0,   173,   165,   192,   181,     0,   180,
       0,   166,   888,   179,     0,   611,   610,   827,   821,   823,
     825,     0,     0,     0,   941,   603,   608,   646,     0,     0,
       7,   212,   208,   749,     0,     0,     0,     0,  1030,  1037,
    1038,  1039,  1040,  1041,    64,    53,    92,    39,    38,    57,
      69,    45,    48,     0,    74,    56,     0,     0,     0,  1021,
    1023,     0,  1020,  1022,     0,    41,    44,   920,   992,   983,
    1000,   988,  1009,  1001,     0,  1010,  1015,  1032,  1034,  1253,
    1259,  1255,  1261,  1036,  1045,  1042,  1046,   895,   893,   894,
    1082,  1064,  1073,   616,   615,     0,     0,   459,   735,     0,
       0,   459,   736,     0,     0,     0,   953,   888,     0,     0,
     658,   971,     0,     0,     0,   945,     0,     0,     0,     0,
       0,  1054,   974,     0,     0,   973,  1058,  1057,     0,   871,
    1081,   874,  1067,  1075,     0,   870,  1080,   873,  1065,  1074,
       0,  1084,  1078,   875,  1060,  1070,     0,  1079,   876,  1062,
    1071,   929,   930,   933,   932,   931,     0,   934,   936,     0,
       0,     0,     0,    77,     0,  1154,  1172,     0,     0,     0,
       0,     0,     0,  1236,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   264,     0,  1087,  1234,  1092,  1094,
       0,     0,  1242,  1243,  1244,     0,  1250,     0,     0,     0,
       0,     0,     0,   158,   144,  1098,  1097,  1096,     0,     0,
       0,   574,     0,  1091,     0,     0,     0,     0,   454,     0,
       0,   459,     0,     0,     0,     0,  1176,  1179,  1181,     0,
    1177,  1180,  1182,     0,  1208,  1104,  1279,  1280,   237,   236,
       0,     0,     0,   999,     0,     0,  1260,     0,  1262,  1263,
       0,     0,  1161,     0,     0,   778,   264,   780,   774,   776,
     782,  1049,     0,     0,     0,     0,     0,     0,   867,   857,
     865,   859,   861,   863,   658,   977,   976,     0,   852,   842,
     850,   844,   846,   848,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
       0,   771,   767,   769,   773,  1048,     0,     0,   459,     0,
       0,     0,   105,     0,   300,   459,     0,     0,    94,   459,
       0,     0,   462,   313,   309,   329,   464,   465,   328,   466,
     312,     0,     0,   436,   432,   303,   358,   484,   359,   485,
     360,   486,   365,   491,   366,   492,   370,   496,   371,   497,
     378,   503,   379,   504,   377,   502,   389,   514,   385,   510,
     390,   515,   386,   511,   396,   521,   394,   519,   401,   526,
     399,   524,   406,   531,   404,   529,   409,   534,   412,   537,
     564,     0,   580,     0,     0,     0,     0,   438,   434,   463,
     321,   318,     0,   467,   468,   320,     0,     0,   437,   433,
     361,   487,   362,   488,   363,   489,   367,   493,   368,   494,
     372,   498,   373,   499,   382,   507,   383,   508,   380,   505,
     381,   506,   391,   516,   387,   512,   392,   517,   388,   513,
     397,   522,   395,   520,   402,   527,   400,   525,   407,   532,
     405,   530,   410,   535,   413,   538,   565,     0,     0,     0,
       0,   439,   435,     0,     0,  1310,  1313,     0,     0,  1308,
    1319,  1320,     0,     0,   882,   880,   881,   886,   884,   885,
     234,   232,   231,   230,   264,   658,   974,   241,     0,   207,
     240,   127,     0,   125,   839,   833,   835,   837,     0,   658,
       0,    15,    19,     0,   182,  1006,   658,     0,   139,     0,
     137,   839,     0,   264,   658,     0,    27,    84,   117,   120,
     118,   121,   129,   130,   131,   133,   141,   142,   114,   112,
     113,    13,   720,   723,     0,     0,   916,  1055,     0,     0,
       0,  1007,  1003,     0,     0,   719,   888,   905,   996,   997,
     888,   193,   194,   178,     0,     0,     0,     0,   601,   602,
       0,   607,     0,     0,   636,   632,     0,     0,     0,     0,
       0,   226,   218,   216,     0,     0,     0,    36,    37,    75,
      54,     0,    55,     0,    63,    61,    72,    67,    73,    60,
      90,    39,    70,    62,    91,    59,    71,    68,     0,    58,
       0,   696,    33,    35,    34,  1024,  1025,     0,   624,   614,
       0,   619,   613,     0,   459,   737,     0,     0,     0,   971,
       0,   943,   954,   955,   948,   946,   947,     0,   975,   956,
       0,     0,   949,     0,     0,     0,  1068,  1076,  1055,  1066,
    1061,  1063,  1072,   940,     0,     0,     0,   937,   714,   715,
     716,   459,     0,     0,  1129,  1139,  1134,     0,     0,     0,
    1130,  1141,  1135,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1233,  1221,     0,  1198,   264,     0,     0,
       0,  1241,  1247,  1248,  1245,  1246,     0,     0,     0,     0,
     145,  1126,  1136,  1131,     0,   159,   571,   569,     0,     0,
       0,   452,   575,   572,   570,   453,   576,     0,  1000,  1259,
    1261,  1162,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   779,   781,   775,   777,   783,  1050,     0,   293,
     291,     0,     0,   961,   658,     0,     0,     0,     0,     0,
       0,   979,     0,   978,     0,     0,     0,   853,   843,   851,
     845,   847,   849,     0,   267,     0,   266,   295,     0,     0,
       0,     0,     0,     0,  1324,     0,     0,     0,     0,     0,
       0,   356,   482,   355,   262,   108,   106,   327,   326,    99,
     103,   310,     0,   311,   307,   308,   581,     0,     0,     0,
       0,     0,     0,   319,   316,   317,     0,     0,     0,     0,
    1312,  1311,  1315,     0,     0,     0,  1307,  1306,     0,   971,
     218,     0,     0,   123,   126,     0,     0,     0,     0,     0,
    1007,     0,   135,   138,     0,    14,   459,     0,     0,   729,
       0,   888,   917,  1008,  1004,  1005,   721,   724,   906,   174,
     828,     0,   243,   242,   604,   605,     0,   635,     0,   213,
     214,   204,   209,   210,   220,     0,     0,    51,    46,    49,
      52,    47,    50,    37,    43,    40,    42,     0,     0,  1028,
    1029,   623,     0,   618,     0,   974,   973,   944,   957,   958,
     951,   950,   952,  1052,  1051,     0,   939,   938,    79,  1127,
    1137,  1132,     0,  1128,  1138,  1133,     0,     0,     0,     0,
       0,  1237,  1211,     0,     0,  1210,  1240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1218,     0,
    1199,  1222,  1200,  1223,     0,     0,     0,  1111,   925,  1111,
       0,     0,   155,     0,     0,     0,   160,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   474,   292,   868,
       0,   976,     0,   959,   962,   963,   277,   278,     0,   980,
     964,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   268,   281,   282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   331,   330,   456,   582,
     423,   556,   415,   540,   427,   560,   419,   548,   457,   583,
     424,   557,   416,   541,   428,   561,   420,   549,   425,   558,
     417,   542,   429,   562,   421,   550,   426,   559,   418,   543,
     430,   563,   422,   551,  1314,  1316,  1309,   840,     0,   124,
     150,  1008,     0,   136,    86,   918,     0,     0,   829,     0,
       0,     0,     0,     0,     0,   205,     0,   221,     0,     0,
    1026,  1027,  1016,     0,     0,     0,     0,   935,  1201,  1202,
    1205,  1206,  1209,  1239,     0,     0,     0,     0,     0,     0,
       0,  1215,  1224,     0,     0,     0,     0,  1109,     0,  1106,
    1119,     0,  1111,     0,  1111,     0,     0,     0,     0,   476,
     475,   978,   960,   869,   965,   966,   275,   276,   854,   285,
     286,     0,     0,     0,     0,   279,   280,   289,   290,     0,
       0,   294,  1322,  1323,  1321,   343,     0,  1013,   841,     0,
     722,   725,   727,   726,     0,     0,   215,   211,     0,  1011,
    1018,     0,     0,     0,     0,     0,     0,     0,  1229,  1213,
       0,     0,  1214,  1226,     0,  1217,  1228,     0,     0,     0,
    1111,     0,  1111,     0,  1111,     0,  1112,     0,     0,     0,
     148,     0,   153,     0,   156,     0,   855,   283,   284,     0,
     287,   288,  1014,   171,  1012,  1203,  1204,     0,     0,  1212,
    1219,     0,  1216,  1227,     0,  1123,  1110,     0,     0,     0,
    1120,     0,     0,  1111,  1111,     0,  1111,   147,   146,   151,
     149,     0,     0,     0,   356,   482,   269,     0,     0,     0,
    1107,     0,     0,  1111,  1116,     0,     0,  1113,     0,     0,
     154,     0,  1220,     0,  1124,  1125,  1121,     0,     0,     0,
       0,  1111,   152,     0,  1011,     0,     0,  1117,  1118,  1114,
       0,  1012,  1108,  1122,     0,  1115
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   216,    57,    58,   991,   343,   451,   452,   453,   454,
     455,   456,   457,   458,  1007,  1008,  1009,  1010,  1011,  1012,
    1013,  1014,  1015,  1016,  1017,  1018,   266,   267,   459,   460,
      60,   344,   345,   760,   789,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,  2119,  2120,  2121,   473,   660,
     661,   662,   474,   475,   476,   477,  1810,   419,   515,   420,
     516,   421,   517,   518,   881,   422,   423,    61,    62,    63,
      64,    65,   346,   347,   348,   349,   350,  1019,  1020,   351,
     352,   763,  1287,   353,   665,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   748,
     843,   667,  1344,   370,   371,   668,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   669,   670,  1145,
    1346,   566,   567,   218,    67,   508,   509,   219,    69,   220,
     221,    70,    71,    72,    73,    74,    75,   222,   121,   223,
     272,   946,   947,   224,   225,   226,    79,    80,    81,    82,
      83,   227,   755,  1221,   275,   481,    85,    86,   498,   499,
     891,  1244,   732,  1068,  1069,   127,    87,   482,    89,   483,
     130,   131,   132,   950,   133,   122,    91,  1117,  1118,  1119,
      92,    93,   592,  1235,   485,   594,  1237,   136,   190,   486,
     487,   192,   954,   138,  1555,  1733,  1556,  1025,  1026,  1557,
     193,   194,   195,   196,   756,  1222,   231,   232,   233,   234,
     235,   236,   673,   674,  2037,  2038,   675,   676,   677,    96,
     488,   276,    97,    98,   277,   278,   279,   680,   681,   682,
     683,   280,   684,   912,  1640,  1148,   687,   688,   689,  1149,
     691,    99,   100,   385,   101,   102,   103,   104,   105,   106,
     849,  1416,  1417,   850,   851,   386,   387,   388,   389
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -2007
static const int yypact[] =
{
   38955, -2007, -2007, -2007, -2007,    35, -2007, -2007, -2007, -2007,
   -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007,
   -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007,
   -2007, -2007,  1129,    87, -2007, -2007, -2007, -2007, -2007, -2007,
      13,   221,   259,   767,   399, -2007, -2007, -2007, -2007, -2007,
   -2007, -2007, -2007,  1187,  2324, -2007, -2007, -2007,   301, -2007,
     327,   767,  1031, -2007,   634,   385,   990, -2007,   319, -2007,
    1065, -2007,   420, -2007, -2007, -2007, -2007, -2007,  1015, -2007,
    1150,   431, -2007,   447,  1448, 38552,  2876,   303, 39255, -2007,
     471,   523, -2007,   744,  1349, 41922, 36997, -2007, -2007, -2007,
   -2007, -2007, -2007, 39059, 38143,   695, -2007,    87, -2007, -2007,
     399,   399,   721,   645,   399, 29605,   767, -2007, -2007,   561,
   -2007,  1187, -2007, -2007, -2007,   646, -2007,   526,  1005, -2007,
   -2007, 39354, -2007, -2007,  2324,  2202,  1906,  1962,  1576, 23716,
   -2007,   667,   837,   242, 30724, 41541, -2007, 30852, -2007, -2007,
   -2007,   767, -2007,   119,  1222,  1299,   120, 41541, -2007, 41268,
   30980, 41541, 31108, -2007, 31236, -2007, -2007,   767, -2007, -2007,
      45,   684,   696,   708, -2007, -2007,   940, -2007,   385,   249,
   -2007, -2007, -2007, -2007, -2007,  1235,  1112,   471,  2202,  1404,
    1576, 41922, 41922,   328, -2007,  1354,   738,   750,   684,   696,
     708,   228,   471,  1413, -2007, 27977,   768, -2007, -2007, -2007,
   -2007, -2007, -2007, -2007, -2007, -2007, -2007,   919, -2007,   392,
   -2007,   773, -2007, -2007,   811, -2007,   826,  1662, 36069,    79,
     589, -2007, -2007,   622,   693,   851,   858,   615,   881, -2007,
   -2007,   615, -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007,
   -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007,   915,   948,
   -2007, -2007, -2007, -2007, -2007, -2007,   180,   127, -2007, -2007,
   -2007, -2007, -2007, -2007, -2007, 38754, -2007, 17387, 37421, 42129,
   17528, -2007,   988,  1045,  1172, -2007, -2007,   385, 38653, -2007,
   -2007, -2007, -2007, -2007, -2007, -2007,   420,   447, 39849, 41922,
   40140, -2007, -2007, -2007, -2007, -2007,  1017,   721,   721, -2007,
   29605,   383, -2007, -2007, 29679, 29753, 29753,  1083, 41723, 29605,
   -2007, -2007,  1095,  1098, 41723, 29605,  1103,  1106,  1111,  1121,
    1141, 29827, -2007,  1156, -2007, 23964, -2007,   399,  8939, -2007,
   -2007, -2007, -2007,  1123, -2007,   140,  1161, -2007, -2007,    87,
   -2007, -2007, 12690, -2007,  1578, 28051, -2007,   566,    52,  1319,
   29605,   857,   617,  1164,  1173,  1221,  1360,    56,  1578,  1260,
     462, -2007,  1578, -2007,  1191,  1272,  1537,  1086,  1592,  1267,
    1247,  1289,  1381,   115,  1578,   721, -2007, -2007, -2007, -2007,
    1318,   162, 41359,  1328,  1334, -2007, -2007, 28125, -2007, 28199,
   -2007,   705,   796,  1376,  1402,  2202,  2035,  2204,   526, -2007,
   -2007,   910, -2007, -2007, -2007, -2007, -2007,  1095,  1123, -2007,
   -2007, -2007, -2007,   593,   737, -2007,  1319, -2007,  1537, 36185,
   -2007, 23840, 41268, -2007,   691, 40995, 40237, -2007, -2007,  1350,
   -2007,   767, -2007, -2007,    87, 40431, 40043,  5471, 41632, -2007,
   -2007,  1464,  1412,  1412,  1163, -2007,  1367, -2007, -2007, -2007,
     151,   799,   238, -2007, -2007, 30076,  1377, -2007,  1253, -2007,
   -2007,    41, -2007, -2007, -2007,  1441, 30212, 30340,   450,   377,
     462, 37209, 39453, -2007,   471,  1349, -2007, -2007, 37103, -2007,
   -2007,  1471, -2007,   767, -2007, -2007, -2007,  1729, 41723, -2007,
     691, -2007, 30468, 30596,  1490,  1500, -2007,  1101, -2007,  1509,
   -2007, -2007,  2983,  1522,   941, -2007, -2007, -2007, -2007,   817,
     833, 36185,   677, -2007, 31364, 31492, -2007,   677, -2007, 31620,
   31748,   677, -2007, 31876, 32004, -2007, -2007,  2324,  2324,  2324,
    2324,  2324, 21896,   910,  1235,  1112,   910, -2007, 28273, 37421,
   -2007,   988, 37421, -2007,   988, -2007, -2007,  2324,  2324,   910,
   -2007, -2007,  1532,   286, -2007, -2007,  1541,  1550, 41086,  1552,
    1527,  1580, -2007, 32132, -2007, 32260,   483, -2007, 35834, 28347,
    2324, -2007,  2375,   919, -2007, -2007, -2007, -2007, -2007,   526,
    1572,   471,   749,   147,   402,  1041,  1585, -2007, 40722,  1589,
   -2007, 40813,  1595, 40904,  1598, 41177, -2007, -2007, -2007,  1203,
   -2007, 29605,   767, -2007, -2007,  1611, -2007, -2007,    45,   684,
     696,   708, -2007,  1614, -2007, -2007, -2007, -2007, -2007,   471,
    1429,   738, -2007, -2007,  1619, -2007, 17669, -2007,   988, -2007,
     193, 28421,  1623,  1638,  1644,   101, 17810,  1651,    87,  1620,
    1642, 17951,  1095,  1505,  1661,  1663,    87, -2007, -2007,  1123,
    1667,  1669,  1670,  1440, 15972,  1578, 16118, 25609,  1578,  1578,
   -2007, 16259, 38855, -2007, -2007, -2007, -2007, -2007, 18092, 18233,
   18374, 18515, -2007, -2007, -2007,   988, 18656, -2007, -2007, -2007,
   18797, -2007, -2007,   399,   399,   721,   623,   767,  1480,  1657,
   -2007,   526,   303, -2007,   471,  2202, 41922, 41922, 37421, -2007,
   -2007, 39946, 29605,   329,  1673,   472, -2007, 24104, -2007, -2007,
   28495, -2007, -2007, -2007, -2007, 41723,  1685, -2007, -2007, -2007,
   -2007, -2007, 36533, 41723, 24244,    87, 36649, 41723, 29605,   399,
     399,   399, 29605, 23964, -2007, -2007,  8329, -2007, 12839, 13038,
   13198, -2007, -2007, -2007, -2007, 10514,  1689,   210, 22036, -2007,
   -2007,   272, -2007,   205, -2007, 22176,  1687, -2007, 22316, -2007,
   -2007,  1624, -2007, -2007, 25683,  1645, 29605, -2007, -2007, -2007,
   -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007, 28051,   278,
   -2007, -2007, -2007, -2007, 29605, 29605, 29605, 29605, 29605, 29605,
   29605,  1319,  1537, 29605, 29605, -2007, 29605, 28051, 28051, 28051,
   28051, 28051, 29605, 29605, 13344, 28051, -2007,  1646, -2007, -2007,
   25757,  1656, 29605, 28051, 29605, 29605, 29605, 29605, 29605, 29605,
   29605, 29605, 29605, 29605, 29605, 28051, 28051, 28051, 28051, 28051,
   29605, 29605, 13490, 28051, -2007, -2007,   771,   919, 41632, -2007,
   -2007, 38243, 41359, 41359, -2007,  1679,  1691,  1692, -2007,  1693,
    1695,  1697, -2007, -2007, -2007, -2007,   526, -2007, -2007, -2007,
   -2007,  1701, -2007, -2007, 23716, 23716, 35953,   471,   776, -2007,
     925,  1057,   964, 36185,  1082,  1707,  1717, -2007, -2007, -2007,
    1729, 36301, 40334, -2007, -2007,    87, -2007, -2007, -2007, 37315,
    1711,    87, 36417,  1743, 24368,  1391, 40528, -2007,  1718, -2007,
     988, -2007,   988, -2007, -2007, -2007,   988, -2007,  1714, -2007,
     807, -2007, -2007,  4574,  4574,  1412,  1412, -2007,  1412,    96,
   -2007,  1412,  1412, -2007, -2007,   621, -2007,  1441,   621, -2007,
    1441,   755, 28569,  2762, 29605,   668, -2007,  1719,   526, 39552,
   -2007,   471,  2202, -2007, -2007,   998,   768, 36069, 29940,   595,
     615, -2007,   615,  2324, -2007, -2007, -2007, -2007,   285, -2007,
     289, -2007,   450, 37209, 23716, -2007, -2007,  1725, -2007, -2007,
   -2007, 41268, 41268, 29605, -2007,  1157,    87, -2007, 32388,   175,
   -2007,   875,  1061, -2007, 41268,    87,   904,    87,  1434, -2007,
   -2007, -2007, -2007, -2007, -2007, -2007, -2007,  1412, -2007, -2007,
   -2007, -2007, -2007, 37525,  1535, -2007, 22456, 42026, 22596, -2007,
   -2007, 12442, -2007, -2007, 40625, -2007, -2007,   526,  1235, -2007,
    1112, -2007,   526, -2007, 28273, -2007, -2007, -2007, -2007, -2007,
     988, -2007,   988, -2007, -2007, -2007, -2007, -2007, -2007, -2007,
   -2007, -2007, -2007, -2007,  1509,   223,   252,  1720, -2007, 32516,
   32644,  1723, -2007, 32772, 32900, 33028, -2007,   546,   393,   598,
     219,   774,  1724,  1731,  1736, -2007,  1726,  1730,  1733,   471,
     910,  1576,   147, 39651, 28643,   749, -2007, -2007, 41450, -2007,
   -2007,   919, -2007, -2007, 41450, -2007, -2007,   919, -2007, -2007,
   41450, -2007, -2007,   919, -2007, -2007, 41450, -2007,   919, -2007,
   -2007, -2007, -2007, -2007, -2007, -2007,  1740,  1750, -2007,   902,
    1751,  1753,   359, -2007, 22736, -2007, -2007, 18938,  1749,  1755,
   19079, 29605, 29605, -2007, 28717, 28791,  1756,  1759,  1766, 24597,
    1767,    87, 25831,  1805,  1547, 25905, -2007,  1836, -2007, -2007,
   25979,  1772, -2007, -2007, -2007,  1773,  1776, 26053, 16400,   399,
    1780, 29605, 29605,    87, -2007, -2007, -2007, -2007, 21616,   790,
   28051, -2007,  1474, -2007, 29605, 13636, 13782, 28051, -2007, 29605,
   13928,  1619, 19220, 19361, 19502, 19643, -2007, -2007, -2007, 19784,
   -2007, -2007, -2007, 19925, -2007, -2007,   721,   721,  1785,  1787,
   35588, 35715,   910, -2007,   910, 37421, -2007, 37421, -2007, -2007,
    1783, 28051, -2007, 28051,   981, -2007,   450, -2007, -2007, -2007,
   -2007, 10514,  1786,  1789, 41814, 23716, 39156, 29605,  1793, -2007,
   -2007, -2007, -2007, -2007,   471,  1794,  1795,  1788,  1798, -2007,
   -2007, -2007, -2007, -2007, 36765, 26127,  1796,  1797,  1799, 29605,
    1801, 36881,  1802,   579,   267,   343,  1803,  1808,  1809, -2007,
      87, -2007, -2007, -2007, -2007, -2007, 28865,   399,   295, 37628,
   22876,  1807, -2007, 28051, -2007,   310, 37731, 23016, -2007,   313,
   37834, 23156, -2007, -2007, -2007, -2007,  1202,  1821, -2007, -2007,
   -2007, 26201,  7208, -2007, -2007,  1807, -2007, -2007, -2007, -2007,
   -2007, -2007,   566,  1191,   566,  1191,    52,  1272,    52,  1272,
    1319,  1537,  1319,  1537,  1319,  1537, -2007, -2007,   857,  1086,
   -2007, -2007,   857,  1086, -2007, -2007,   617,  1592, -2007, -2007,
    1164,  1267, -2007, -2007,  1173,  1247,  1221,  1289,  1360,  1381,
   -2007,    90, -2007, 26275,  1814,  7842,  1815, -2007, -2007, -2007,
   -2007, -2007,  1219, -2007, -2007, -2007, 26349,  9419, -2007, -2007,
   -2007, -2007, -2007, -2007, -2007, -2007,   566,  1191,   566,  1191,
      52,  1272,    52,  1272,  1319,  1537,  1319,  1537,  1319,  1537,
    1319,  1537, -2007, -2007,   857,  1086, -2007, -2007,   857,  1086,
   -2007, -2007,   617,  1592, -2007, -2007,  1164,  1267, -2007, -2007,
    1173,  1247,  1221,  1289,  1360,  1381, -2007, 26423,  1816,  9786,
    1818, -2007, -2007,    87,    87, -2007, -2007,   280,   930, -2007,
   -2007, -2007, 38346, 38449, -2007, -2007, -2007, -2007, -2007, -2007,
   -2007, -2007, -2007, -2007,   907,  1978,   776, -2007, 23716,    87,
   -2007, -2007, 23716, -2007,   571, -2007, -2007, -2007,   618,   471,
    2202, -2007, -2007,   403,  1719,  1701,   471,  2202, -2007,  1825,
   -2007,   879,   619,  1281,  2324,  1828, -2007, -2007, -2007, -2007,
   -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007,  4834, -2007,
   -2007, -2007, -2007, -2007, 23296,  1263,   768, 36069, 21476,   791,
     910,   526, -2007,   910, 29605, -2007,   893, -2007, -2007, -2007,
    1832,  1714,  1687,  1719,  1130, 23716,  1132,  1174, -2007, -2007,
   29605, -2007, 33156, 33284,  1831, -2007,  4441, 41632, 41632, 41632,
   41632, -2007, -2007, -2007, 29605,  1833, 28939, -2007,   988, -2007,
   -2007, 29013, -2007, 29087, -2007, -2007, -2007,  1554,  1535, -2007,
   -2007,  1412, -2007, -2007, -2007, -2007, -2007,  1554,  1535, -2007,
   29161,  5723, -2007, -2007, -2007, -2007, -2007, 20066, -2007, -2007,
     245, -2007, -2007,   260,  1829, -2007, 33412, 33540,   471,   774,
    1837, -2007, -2007, -2007, -2007, -2007, -2007,   910,   749, -2007,
    1838,  1843, -2007,  1834,  1839,  1840, -2007, -2007, 36069, -2007,
   -2007, -2007, -2007, -2007, 29605,  1844,  1229, -2007, -2007, -2007,
   -2007,   337, 37937, 23436, -2007, -2007, -2007, 20207, 21616, 21616,
   -2007, -2007, -2007, 20348, 26497, 16541, 26571, 26645, 24737, 26719,
   16682, 21756,  1845,  1851, 21756, 29605, 29235,  1914, 26793,  1776,
   11129,   399, 21756,  1849, 11741, 24597, -2007,  1558, 26867, 11289,
   26941, -2007, -2007, -2007, -2007, -2007,   143,   399,  1852,  1306,
   -2007, -2007, -2007, -2007, 20489, -2007, -2007, -2007,  1863,  1864,
      87, -2007, -2007, -2007, -2007, -2007, -2007, 41268, -2007, -2007,
   -2007, -2007, 27015,  1856, 25017,  1857, 27089,  1858, 25091,  1859,
    1869,  1871, -2007, -2007, -2007, -2007, -2007, -2007, 14074, -2007,
   -2007,  1872,  1197, -2007,  2069,  1880,  1885,  1886,  1876,  1883,
   23716,  1795, 39750,  1794, 29605, 23716, 29605,  1898, -2007, -2007,
   -2007, -2007, -2007,  1887, -2007, 29309, -2007, -2007,  1892,  1893,
   29605, 29605,  1888,  8329, -2007,    87,    87, 29605, 14220,    87,
   28273, -2007, -2007, -2007,   721, -2007, -2007, -2007, -2007, -2007,
   -2007, -2007, 14366, -2007, -2007, -2007, -2007, 28051, 14512, 14658,
   28051, 14804, 14950, -2007, -2007, -2007, 15096, 15242, 15388, 15534,
   -2007, -2007, -2007,   771,  1894,   601, -2007, -2007,   471,   776,
    2019,  1243, 23716, -2007, -2007,  1901,   910,   910,  1412,   910,
    1701,  1911, -2007, -2007,  1903, -2007,   338, 38040, 23576, -2007,
     471,   926, -2007,   526, -2007, -2007,  1908,  1910, -2007, -2007,
   -2007,  1244, -2007, -2007, -2007, -2007, 33668,  1920, 33796, -2007,
    1916, 36185, -2007,  1922, -2007, 29605, 28273,  2451, -2007, -2007,
    2451, -2007, -2007, -2007,  2451, -2007, -2007, 20630, 20771, -2007,
   -2007, -2007, 33924, -2007, 34052,   147,   749, -2007, -2007, -2007,
   -2007, -2007, -2007, -2007,  1576, 27163, -2007, -2007, -2007, -2007,
   -2007, -2007, 20912, -2007, -2007, -2007, 21053, 24597,  5558, 24597,
    5558, 12198, -2007, 24877, 16823, -2007, -2007, 21756, 21756, 27237,
   24597, 27311, 24457,  1924, 25165, 27385,   190, 21194, -2007, 29605,
   -2007, 12198, -2007, 11741, 24597, 25239, 29383,   100,  1925,   100,
     194,  1926, -2007,    87, 29605, 29605,    87, 28051, 28051, 28051,
   28051, 28051, 28051, 28051, 28051, 15680, 15826, -2007, -2007, -2007,
     471,  1795,  1931, -2007, -2007, -2007, -2007, -2007,  1259,  1794,
   -2007,  1934,  1939,  1932,  1933,  1279,  1935,  1936, 23716, 29605,
   23964, -2007, -2007, -2007,  1940,  1944,  1946,  1947, 29605,  1942,
    1945,  1969,  1976, -2007,  1980, 11540, -2007, -2007, -2007, -2007,
   -2007, -2007, -2007,   472, -2007, -2007, -2007,   472, -2007, -2007,
   -2007, -2007, -2007,   472, -2007, -2007, -2007,   472, -2007, -2007,
   -2007,   472, -2007, -2007, -2007,   472, -2007, -2007, -2007,   472,
   -2007, -2007, -2007,   472, -2007, -2007, -2007, -2007,  1292, -2007,
   -2007,  1701, 28051, -2007, -2007, -2007, 29605, 29605, -2007, 34180,
   34308, 34436, 34564, 34692, 41632, -2007, 41632, -2007, 25313, 21335,
   -2007, -2007, -2007, 34820, 34948, 35076, 35204, -2007,  2037,  2040,
   -2007, -2007, -2007, -2007, 24597, 29605, 29457,  1925, 16964, 17105,
   25387, -2007, 12198, 24877, 27459, 17246,    87, -2007,  1316,   428,
   -2007,   203,   100,  1981,   100,   103,   655,  1982,  1315, -2007,
   -2007,  1794, -2007, -2007, -2007, -2007, -2007, -2007, -2007, -2007,
   -2007,  1297,  1973,  1988,  1987, -2007, -2007, -2007, -2007,  1990,
    1991, -2007, -2007, -2007, -2007, -2007, 27533, -2007, -2007,  2003,
   -2007, -2007, -2007, -2007, 35332, 35460, -2007, -2007, 27607, -2007,
   -2007, 24597, 24597, 27681, 25461, 24597, 27755, 24457,  2005, -2007,
   24597, 29605, -2007, -2007, 24877, -2007, -2007,  1998,  2008,   100,
     100, 29605,   100,  2009,   100,  1375, -2007,   248,  1412,   669,
   -2007,   133, -2007,  1983, -2007,    87, -2007, -2007, -2007, 29531,
   -2007, -2007, -2007, -2007, -2007, -2007, -2007,  2005, 24597, -2007,
   -2007, 27829, -2007, -2007,   399, -2007, -2007,  1327,  1993,  1357,
   -2007,  1508,  2010,   100,   100,  2012,   100, -2007, -2007, -2007,
   -2007,   103,   673, 28273, -2007, -2007, -2007, 24597,   614,  2014,
   -2007,  2015,  2021,   100, -2007,  1363,  1370, -2007,  1511,   599,
   -2007, 25535, -2007, 29605, -2007, -2007, -2007,  1382,  2027,  2030,
    2038,   100, -2007, 27903, -2007,  2039,  2041, -2007, -2007, -2007,
    1400, -2007, -2007, -2007,  2043, -2007
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2007,  3569,   -47,  9416, -2007,  2055, -2007, -2007, -2007, -2007,
   -2007, -2007,  1678,  1688,  -925, -2007, -1012,  -968,   182,   186,
   -1003,  -960,  -944, -2007,  -641,  -576, -2007, -2007,  1694,  1696,
   -2007,   254,  1410, -2007,  -228,   769,   775, -2007, -2007, -2007,
   -2007,  1699, -2007, -2007, -2007,  -653, -2006,    16, -2007, -2007,
   -2007, -2007,  1817,  2531,  -124,   -22,   663,  -868, -2007,  -799,
   -2007,  -864, -2007,  1194,  -140,  1317,  -860,   -13,  1891,    -3,
    1897,    -7,     0, -2007,  1268, -2007, -2007,  8915,  3515, -2007,
    5620,  -648,  1378, -2007,  4610, -2007,  -334,   292,   344,   503,
   -2007,   592,  -728,  -640,  -359,   -30,   -10,  1070,  7072,  3203,
    -289,  9066,  -801,  4752, -2007,  5172,  -330,   449,   541,   927,
     779,   176,   161,   263,   284,   294,  1473,  1137,   224,  7379,
    -785,  1909,   982, 10448,   -67,  1210,  -132,  2421, 10763,  8560,
   -2007, -2007, -2007,   -98,   -54,   -56, -2007,  6860, -2007,  3282,
    4289,   716,  -804,  3402,  8913, -2007, 11408, -2007, -2007, -2007,
     -86,  4488, -2007, -2007,  1917,  6918,   -51, -2007, -2007,  1369,
    1758,  1469,  1889,   -61,   -60,  7314, 10248,  5939,  3759,  -418,
    -101,  -417,   873,  -905,   -80,  3204, -2007, -2007, -1097, -2007,
    3016,  1700,  -444, -1201,  7695,   743,  -690,   125,   339,   950,
    1775,  -272,  -795,  -469,  -539, -2007,  -538,  -934,  -926, -1653,
    1213,  1146,   -11,  1943,  -733,   474,  -385,  -365,  -462, -2007,
     -72,   -71,  2641,  -494,   111,  -963, -2007, -2007, -2007,  2123,
   -2007,    88,  2131,   -52,  2346,   -37,  1949,  1016,  1043, -2007,
   -2007, -2007,   -93,  1544, -1598,  -162, -2007, -2007, -2007,   -26,
   -2007,  2137,   -34,    19,  2132,  1636, -2007, -2007, -2007,  2139,
    -814,   475, -2007,  -812,   891, -2007, -2007, -2007, -2007
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1305
static const yytype_int16 yytable[] =
{
      66,  1246,   281,  1163,  1535,   296,  1545,  1431,  1479,  1037,
    1038,  1433,   955,  1537,   141,  1547,  1480,   297,   180,   519,
     959,   792,  1597,   502,   512,   793,   707,   229,   230,   182,
    1875,   181,   111,   113,   409,  1703,   524,  1420,   529,  1421,
     533,  1408,  1886,   118,   290,   288,  1250,  1492,  1536,  1542,
    1546,   112,   298,   151,   126,   410,  1538,  1410,  1548,   403,
     404,   143,   292,   119,   949,   788,   152,   961,   155,   390,
     401,   402,  1539,   813,  1549,   203,  1432,  1945,   178,   815,
     596,  1326,   177,   823,   166,   179,   126,   409,   217,   287,
       1,  1746,  1541,   286,   126,  1454,    66,  1452,   550,   553,
     295,   109,  1133,    66,    66,   109,     1,   306,   410,  1392,
     761,   931,   932,   107,  1504,  2160,   391,  1269,   686,   394,
     506,   510,     1,     1,  1276,   503,  1286,  1280,   615,   307,
     308,   217,   841,   311,   126,   126,     1,   114,   525,   424,
     530,   766,   534,   152,   478,   491,  1887,   478,   309,  1085,
       1,   505,   918,   507,   549,   552,   507,   491,   562,   520,
     478,   491,   478,  2008,   478,     1,   151,   536,   108,  1503,
    1330,   933,  1352,  2160,   537,     2,  1514,  2118,     1,   152,
    -879,   613,  1270,  1051,   124,   637,  1187,  1191,   126,  1277,
     797,   798,  1281,  1887,   632,   309,  1522,  2042,  1396,   309,
     296,   814,   296,  1052,   597,   563,  2112,  2118,   598,   953,
     189,   189,   297,  1092,   297,   309,  1098,   152,  1104,   571,
    1109,   180,     1,  -455,  1558,  1134,     1,   166,   583,  1553,
     337,   180,   182,  1093,   181,  2036,  1099,   126,  1105,   920,
    1110,   126,  1453,   678,   181,     1,  1831,     2,   290,   711,
     511,  2154,     1,  1561,   690,     1,   124,   616,  1545,   406,
     842,  1833,   708,  2159,   630,  1545,   292,  1547,  1888,  1545,
     767,   578,   309,  1271,  1547,   623,  1889,  2026,  1547,  1295,
     663,   919,   579,     1,   694,   697,  1501,   845,   696,     1,
    1502,   700,   884,   287,    30,    31,  -109,   710,    66,    34,
      66,  1542,  1546,   695,   867,  1515,    40,   614,  1542,  1546,
    1548,  -100,  1542,  1546,  -104,  2027,    28,  1548,   726,  2043,
     633,  1548,     1,  1889,   726,   868,  1549,  2044,  2113,   555,
      45,    46,  2109,  1549,  1273,   563,  2114,  1549,   -82,   -89,
      53,  1274,  1267,   578,  1541,   115,   813,     2,   309,   769,
     855,  1541,   859,  1559,   579,  1541,   757,   541,   909,   911,
     913,   915,     1,   397,   432,  1692,   635,   639,   767,   433,
     149,   150,  1832,  2155,   986,  -622,  1170,  2109,   941,  1177,
     542,  2156,  1562,   116,   771,   772,   773,  1834,   309,   986,
    -617,   152,   847,   137,   596,     1,  1725,   563,   461,   563,
     189,   461,  1272,  1086,   109,   126,     1,  1762,  1272,  1763,
    1673,   126,  1677,   189,   461,   919,   461,   768,   461,   767,
       2,   958,   230,   139,   152,  -109,  1675,   204,  1679,   847,
     955,   882,   520,   309,  1085,   886,   583,  1054,   205,   707,
    -100,   897,  1029,  -104,   898,   847,   886,   905,   847,  1059,
     153,  1063,  1334,     1,   140, -1035,  1039, -1035,  1029,  1041,
    1296,  1298,  1300,  1031,  1297,  1299,  1301,   -82,   -89,   817,
     818,   819,  1726,   407,  1211,   949,   478,   478,   152,  1031,
    1400,   945,   217,  1602,  1600,   126,     1,  1489,   972,   841,
    1360,  1362,  1364,   976,  1361,  1363,  1365,   166,   977,  1847,
    1919,   774,   478,   478,   955,   942,  1073,  1074,   716,   775,
    2181,     2,   776,   410,   992,   148,   686,   686,   686,   686,
     152,   996,   598,   569,   478,   478, -1052, -1052,  1778,   478,
     478, -1052,  1076,   478,   478,   949,  1695,   126,   126,   126,
     126,   126,  1498,   126,  1499,  1492,   126,  -872,  1603,     1,
     158,  1060,  2111,  1064,  1713,  1554,   949,   126,   126,   126,
     761,  1722,   162,   152,     1,  1121,   309,   595,   847,   507,
    1431,   149,   150,   478,  1433,   478,   536,   163,  1067,   563,
     126,   768,  1771,   152,   309,  1794,   820,   761,  1795,     2,
     599,  1545,    53,   126,   821,   761,   602,   822,  1091,   599,
    1547,  1097,     1,  1103,   872,  1108,   309,   949,  1420,  1420,
    1421,  1421,  1122,   296,  1065,   761,  1825,  1213,     1,   309,
    1451,     1,     1,   602,  1826,   297,     1,  1085,  -459,  -459,
    -459,   807,   808,  1605,  1542,  1546,  1611,   635,  1578,  1770,
     635,  1247,   426,  1548,   180,  1801,  1144,   238,  1151,  1809,
     398,  1812,   690,   690,   690,   690,  1164,   181,     1,  1549,
    1814,   399,   998,   998,   998,   998,   998,   149,   150,  1205,
    1207,     1,     1,  2118,  1652,  -872,     1,  1541,   663,   663,
     663,   663,   189,   189,  -459,  -459,  -459,   794,  1187,  1191,
    1187,  1191,   392,  1772,   604,   305,   152,  1199,  -459,  -459,
    -459,   953,  1773,  1586,  1724,   126,   596,   795,   796,  1589,
    2051,   583,  1196,  1197,   600,  1590,   873,  1216,   601,  1497,
   -1077,  1591,   874,  1587,   603,  1223,   309,   601,  1986,  2192,
     461,   461,  1228,  1238,   563,  1248,  1228,  1238,  2183,    54,
       1,  1592,   969,  1216,   149,   150,   847, -1077,  -216,  1774,
    1783,   603,  1552,  -459,   542,  1260,   461,   461,  1253,  1254,
    1255,   146,  -460,  -460,  -460,   147,   635,   639,  1188,  1192,
       1,  1283,  1036,   310,     1,  1290,  1545,     1,   461,   461,
    2122,   397,  1336,   461,   461,  1547,   137,   461,   461,   149,
     150,  1289,   602,     1,   430,     2,   635,   599,  2180,  1484,
     264,  -459,     2,  1338,  1073,  1074,  -265,  -265,  -265,  -459,
    1402,   124,  -459,   538,  -461,  -461,  -461,  1350, -1083,  1542,
    1546,  1355,   605,  -459,    34,   539,  -459,   461,  1548,   461,
     862,  1404,  1472,  1473,   598,  1474,     1,   540,  1476,  1477,
    1918,  1506,  1507,  1787,  1549,  1925,  1415,   152,  1418,    30,
      31,   847,   847,   847,    34,    45,    46,  1516,   149,   150,
    -216,    40,  1541,   801,  1512,   875,  -216,   558,   768,   803,
     804,  1794,  1795,  1083,   424,  1434,   217,   403,   404,   537,
     992,  1655,   152,   996,  1084,    45,    46,  -460,  1488,   402,
     166,  1444,   583,  1413,  1414,  1164,     1,   568,   578,   583,
     876,  1459,  1461,   572,  1463,  1111,   847,     1,  1788,   579,
       1,   579,  1988,     1,  1527,  1792, -1077,   137,  -216,  1081,
     603,   863,     1,  1560,  1563,   601,  2041,  -265,     1,     1,
    1112,  -265,  1731,     1,   426,   109,  1732,  1278,     2,  -461,
     993,  1566,   573,   126,     1,   152,   994,   124,  1113,   217,
      95,  2007,   126,   990,   149,   150,   574,  1496,   186,   431,
     126,   995,   126,  1500,    -8,   686,  1513,     1,   686,   990,
     409,  1331,   152,   945,   424,  -216,   606,  1114,  1115,   805,
     806,   520,   520,   607,     1,  1327,   507,  1037,   478,   507,
    1939,   410,  1578,     1,   520,  1523,   152,  1525,  1288,  1397,
     410,  1772,  1031,  1517,  1912,   609,   686,  1896,  1518,     2,
    1782,  1580,  1581,  1393,   149,   150,   955,  1798,  1829,  1830,
     686,   686,   686,   686,   126,   149,   150,  1595,   149,   150,
    -216,  1596,  1524,   949,    54,   191,  -216,  1583,   768,   611,
     149,   150,  1087,  1567,  1288,   761,    95,   149,   150,   725,
    1995,   149,   150,   299,    95,   507,   507,    28,  2079,   478,
     478,   545,   139,   478,   478,   478,   428,   152,  2061,   541,
     126,   126,   612,   949,  1335,   397,   949,   502,    34,  2115,
     126,  2117,   126,   217,   563,   149,   150,  -216,   847,  1302,
    1304,   152,  1438,  -216,   847,   768,  1337,   152,   831,   832,
     847,   690,  1401,   152,   690,   725,   847,  1339,   152,    45,
      46,   149,   150,  -919,  1850,  1854,    30,    31,   692,  1366,
    1368,    34,   152,   107,  1403,  1836,  1866,   663,    40,   204,
     663,  1494,     1,  -908,   109,  1405,  2086,   159,  2087,  1144,
     205,  1151,   690,  1306,  1308,   712,  -748,  2147,  -748,  2149,
    1637,  2151,    45,    46,  1696,  1697,   690,   690,   690,   690,
     110,   186,   144,  1650,   145, -1051, -1051,  1681,   663,  1290,
   -1051,   703,   879,  1370,  1372,     1,  1931,   109,  1646,   503,
    1437,    34,   663,   663,   663,   663,   994,  -919,  -919,  1519,
    2175,  2176,  -919,  2178,  1520,   406,   156,  2064,   157,  -919,
     478,   478,   126,   693,   126,  1440,  1111,   725,   833,   834,
    2187,   994,    45,    46,   847,  1606,   152,  1257,  1612,   734,
    1258,   847,   735,  -919,  -919,   424,   217,   738,  2200,   983,
     739,  1112,  1111,    20,    21,   740,  -907,    34,   191,  -919,
    2046,  -919,   461,   137,  1707,   741,  1303,  1305,   706,  1113,
     299,  1707,   384,  1800,   765,  1802,  1653,  1112,  1036,   874,
     152,   994,    30,    31,   997,   742,     1,    34,    45,    46,
    1188,  1192,  1188,  1192,    40,  1113,  1367,  1369,  1114,  1115,
     746,   160,   137,   161,     1,  1510,  1734,   802,  2010,  2011,
     914,     2,   768,   635,   264,   635,   595,  1803,    45,    46,
     124,   809,   137,   994,  1114,  1115,  1310,  1312,    53,  1314,
    -907,  -907,   824,   461,   461,  -907,   810,   461,   461,   461,
    1909,  1072,  -907,   925,   926,  1836,   874,  1741,  1116,   799,
     800,  1742,   825,   826,  1374,  1376,  1378,  1380,    30,    31,
    1307,  1309,   565,    34,  1753,   927,  -907,  -907,  1742,   928,
      40,   929,     1,  -630,   703,  -630,  -888,  -888,   428,   949,
     949,  -888,  -907,  -907,  -907,   811,  1987,  1998,  -888,  2023,
    1371,  1373,   874,   874,    45,    46,   812,   426,   426,   857,
     713,   861,  2053,   930,    53,   816,   893,    54,   874,   713,
     838,  1578,  -888,  -888,  1657,   713,   944,   840,  1662,  1318,
    1322,  1664,  2058,  1666,   837,   547,  1829,  1830,   874,   407,
     827,   828,   768,  1760,  1761,  2078,  1030,  1764,   152,  1033,
    2126,   874,   847,   847,    30,    31,   874,  1384,  1388,    34,
    -629,  1892,  -629,   839,   152,  1893,    40,  1765,  1434,  1525,
    2124,  2108,   424,   844,  2125,  2109,   686,   686,  1775,  2110,
     126,     1,  2169,  1650,   461,   461,  2109,   126,   686,   852,
      45,    46,  1784,   152,   126,   853,  -888,  -888,   867,  1829,
    1830,  -888,  2162,    54,   895,   384,     2,   426,  -888,    30,
      31,   556,  2171,   557,    34,   126,  2109,  1791,  2188,   868,
     126,    40,  2109,   126,   917,  2189,   152,  1031,  1265,  2109,
    2152,   864,  -888,  -888,  2109,   424,   924,  2196,  2153,    30,
      31,  2109,   478,   478,    34,    45,    46,   847,   847,   847,
     847,    40,   768,    30,    31,  2204,   513,   865,    34,  2109,
     526, -1030,   548, -1030,   565,    40,   565,  2010,  2011,  2103,
     560,  2106,   557,   264,    34,    45,    46,   829,   830,  2010,
    2011,    20,    21,  1053,   462,     1,  1125,   462,   557,    45,
      46,  1078,  1526,  1658,  1659,  1660,   478,   478,   934,   126,
     462,   768,   462,  1168,   462,    45,    46,   126,  1203,   164,
      30,    31,   690,   690,   703,    34,  1319,  1323,   583,   406,
    2166,   907,    40,   974,   690,   264,   777,   778,   779,   780,
     781,   782,   783,   784,   785,   786,   835,   836,   663,   663,
    2143,  1200,   981,   145,  1385,  1389,    45,    46,  1144,  1072,
     663,  1144,   982,  1129,  1144,  1282,  1439,     1,  1637,  1159,
    1921,  1922,  1144,  2172,  1448,  1144,  2190,  2109,   986,   282,
    2109,  2173,  1829,  1830,  2191,  1462,  1289,  1349,     1,     1,
    1876,    30,    31,   989,  2010,  2011,    34,  1354,  1055,     1,
    1164,   706,  1532,    40,  1533,     1,  1890,   520,  1047,   761,
     761,   761,   761,   761,   761,   761,   761,  1048,   768,  1023,
    1632,  1530,  1999,  1531,  2002,  1990,  1049,    45,    46,   768,
       2,  1879,  1468,  1470,  1182,  1184,  1851,  1855,  1469,  1471,
     424,   686,   217,  1044,  1046,   424,   787,   205,  2013,  1606,
    2015,  1056,  1612,  1818,  1088,  1821,   565,  1819,  1094,  1822,
    1653,  1183,  1185,  1260,  1100,  1940,  1941,  1106,   426,  1944,
    1311,  1313,     1,  1315,  1029,   551,   554,    30,    31,   301,
     304,  1123,    34,  1422,  1423,  1124,  1126,  1152,   384,    40,
     999,  1000,  1001,  1002,  1003,  1031,  1130,     2,  1375,  1377,
    1379,  1381,  1131,  1415,   761,   703,   461,   461,  1132,  1153,
    1043,  1045,   424,    45,    46,  1150,   126,   126,   565,   126,
    -967,  1036,   713,   715,  2000,  1161,  2003,  1162,  1201,    20,
      21,   152,   715,   575,  1165,  2164,  1166,  1167,   715,  2165,
    1212,   428,   428,   407,    30,    31,   478,  1225,   478,    34,
    2014,   847,  2016,  1570,  1266,  1424,    40,  1278,    30,    31,
     461,   461,   638,    34,   685,  1203,   595,  1425,  1426,  1427,
      40,  1428,   478,  1429,   478,   126,   399,   690,  1441,  1442,
      45,    46,  1458,   709,  1467,  1466,   703,  1505,  1485,  1571,
    -740,    20,    21,  -743,    45,    46,  1572,  1144,  1144,  1144,
    1144,  1573,  1574,   663,    53,  1593,  1575,  1144,  1144,  1576,
    1144,   686,  1144,   686,  1594,   384,  1598,  2084,  1599,   384,
      30,    31,  1608,  1625,  1144,    34,   462,   462,  1609,  1624,
    1626,  1628,    40,  1164,  1633,  1023,  1650,   703,   970,  1641,
    1642,   428,  1023,  1643,  1647,  1023,  2039,  1667,  2039,   432,
    1671,  1688,   462,   462,  1689,  1700,    45,    46,  1702,  1226,
    1705,  1715,  1716,  1704,  1717,   384,  1483,  1844,   424,  1631,
     563,  1723,  1727,  1728,   462,   462,  1720,  1736,  1729,   462,
     462,   426,   686,   462,   462,   426,  1743,  1749,  1752,  1757,
    1781,  1759,   384,  1785,  1036,  1851,  1855,  1799,  1806,  -746,
     384,  1815,  1837,  1838,  1687,  1509,  1947,  1691,  1839,  1846,
    1840,  1662,  1873,  1877,  1666,  1841,  1842,  1891,  1867,  2085,
     384,    30,    31,   462,  1868,   462,    34,  1894,  1895,  1898,
    1900,  1902,  1904,    40,  1905,   910,  1906,  1908,   916,   478,
     478,   478,   478,   478,   847,  1913,   847,   690,   426,   690,
    1914,  1915,  1916,   478,   478,   478,   478,    45,    46,  1917,
    1928,  1985,  1929,  1938,  1144,  2157,  2158,   426,  1932,  1933,
    -231,   412,  1989,   663,  1993,   663,  2107,    30,    31,  1992,
    1036,  1996,    34,  1997,  2004,  1164,  1650,  2001,  2025,    40,
    2006,  1036,  2040,    30,    31,    59,  2052,  2045,    34,  2054,
     461,  2039,   461,  2039,  2055,    40,  1585,  2071,  2056,  2057,
    2072,  2059,  2060,    45,    46,  1668,  2065,  1033,   690,  1023,
    2066,   565,  2067,  2068,   478,   478,   461,   414,   461,    45,
      46,  1144,  1144,  1040,  2073,  1144,  1042,  1144,   117,    53,
    1144,  2074,   876,  2091,   663,  2075,  2092,  2123,  2116,  2127,
      30,    31,  2129,   579,  2161,    34,    59,  1623,  2170,  1650,
     565,  1164,    40,   154,  2128,  1164,  2130,  2131,  2039,  2039,
    2133,  2039,  2139,  2039,  2144,  2145,  2150,  2174,  1144,  2177,
      59,  2184,  2185,    59,    30,    31,    45,    46,  2186,    34,
     265,    59,   428,  1023,  2197,  1023,    40,  2198,    59,    59,
     869,  1164,  1650,  2168,  2202,  2199,   965,  1144,  2203,  1036,
    2205,    59,  2039,  2039,   393,  2039,   966,  2179,  1570,  1164,
      45,    46,   967,  1813,   968,   715,    59,   971,  1521,   698,
      53,  1430,  2039,  1226,   418,   699,  1511,  1475,  1353,   418,
     265,  1789,   418,   426,   902,     1,  1251,   985,   426,  1699,
    2039,   894,   265,   736,    59,   418,   265,   418,   631,   418,
    2146,   565,   685,   685,   685,   685,   300,   289,   733,   679,
       2,  1719,  1036,   291,   737,   293,   303,     0,  1984,   124,
       0,     0,     0,     0,     0,     0,   265,   265,     0,     0,
    1206,  1208,  1209,   461,   461,   461,   461,   461,     0,     0,
     418,  1023,     0,     0,     0,     0,     0,   461,   461,   461,
     461,     0,   565,     0,   570,   426,     0,    30,    31,    30,
      31,     0,    34,    59,    34,     0,     0,     0,     0,    40,
       0,    40,     0,   936,   939,     0,     0,     0,   384,   384,
    1036,     0,     0,     0,     0,     0,   856,     0,   860,     0,
       0,     0,  1036,    45,    46,    45,    46,     0,   426,   936,
     939,     0,     0,  1203,     0,     0,    54,     1,     0,   870,
     265,  1843,     0,   265,   265,   659,     0,     0,   461,   461,
       0,   936,   939,    59,     0,     0,   936,   939,     0,     0,
     936,   939,     2,    59,   265,    59,     0,     0,     0,     0,
       0,   124,     0,  1668,   565,   428,  1033,     0,     0,   428,
       0,     0,     0,   265,     0,     0,     0,     0,     0,   265,
       0,  -878,     0,  -878,  -878,     0,   565,  1036,     0,     0,
     418,     0,     0,     0,     0,     0,     0,     0,   462,    30,
      31,     0,     0,     0,    34,  1036,     0,  1023,     0,     0,
     384,    40,     0,     0,  1023,     0,     0,  1036,  1023,     0,
       0,    68,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   426,   428,     0,     0,    45,    46,     0,     0,     0,
       0,     0,     0,     0,     0,    53,     0,    59,    54,  -878,
       0,   428,   418,     0,   418,     0,     0,     0,  -459,  1024,
    -878,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,   462,
     462,     0,     0,   462,   462,   462,  1797,     0,     0,     0,
       0,     0,     0,     0,    59,  -878,   418,    59,  1077,     0,
     265,    59,  1805,     0,     0,  -878,   896,   139,     0,     0,
      59,   265,     0,    59,     0,     0,    68,     0,     0,     0,
     397,     0,     0,  -878,  -878,  -878,     0,    68,     0,     0,
       0,     0,     0,     0,    68,    68,     0,     0,     0,     0,
       0,   418,   418,     0,     0,     0,    59,    59,     0,     0,
       0,     0,     0,   418,     0,     0,     0,     0,   975,     0,
    1128,  1528,     0,   265,  2005,     0,     0,   418,   418,     0,
       0,     0,     0,     0,     0,     0,   493,     0,     0,     0,
       0,     0,     0,  -459,  -459,     0,    59,     0,   493,   418,
     418,     0,   493,  -459,   418,   418,     0,     0,   418,   418,
       0,     0,  -459,  -459,  -459,  -459,  -459,   659,     0,     0,
       0,     0,     0,     0,   265,     0,     0,   265,     0,     0,
     462,   462,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1023,     0,    59,   636,   640,     0,   428,   418,     0,
     418,   565,   428,    59,   418,     0,     0,     0,     0,     0,
       0,     0,  1224,     0,     0,     0,     0,   565,     0,  1668,
    1033,     0,     0,    59,     0,     0,    59,     0,    59,     0,
      59,     0,     0,   384,     0,     0,     0,    59,  1023,     0,
    1023,   685,     0,     0,   685,  1024,     0,     0,     0,     0,
       0,     0,  1024,     0,     0,  1024,  1924,  1023,  1927,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   428,
       0,     0,  1935,  1937,     0,     0,     0,     0,     0,    68,
       0,     0,   685,     0,     0,     0,     0,     0,     0,    68,
       0,    68,     0,     0,     0,     0,   685,   685,   685,   685,
       0,     0,     0,   659,   659,   659,   659,     0,     0,     0,
    1023,     0,   428,     0,     0,     0,     0,     0,     0,  1669,
       0,  1670,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   265,   265,   265,     0,     1,    59,     0,     0,     0,
       0,     0,   418,     0,     0,     0,     0,     0,     0,     0,
     265,     0,     0,     0,     0,     0,     0,   265,   265,   418,
       2,   265,   265,     0,     0,     0,     0,     0,   418,   124,
       0,    59,     0,     0,     0,     0,     0,     0,     0,     0,
      59,     0,     0,   659,     0,     0,     0,     0,   713,   713,
     659,   713,   713,   659,     0,     0,   713,   713,   713,   713,
       0,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,   565,    34,   565,     0,     0,     0,     0,     0,    40,
       0,     0,   384,  1482,     0,   428,   493,   565,   565,     0,
       0,     0,     0,     0,   384,     0,     0,   493,     0,     0,
       0,     0,     0,    45,    46,     0,   936,   939,     0,     1,
     936,   939,     0,    53,     0,     0,    54,  1481,     0,     0,
       0,     0,  1508,     0,     0,   636,     0,     0,   636,     0,
       0,     0,     0,    59,     2,     0,    59,    59,    59,     0,
       0,  2063,     0,   197,   198,   199,   200,     0,     0,   493,
    2070,     0,   462,   462,     0,  1023,     0,     0,     0,   418,
     418,    59,     0,  1024,  1024,  1024,     0,     0,    59,     0,
       0,     0,     0,     0,     0,     0,   265,    59,     0,     0,
       0,    30,    31,     0,    59,     0,    34,   265,     0,   418,
       0,    59,     0,    40,     0,     0,     0,   713,   713,   713,
     713,   713,   713,   713,   713,     0,   462,   462,  2081,  2083,
       0,     0,     0,     0,   987,     0,  -645,    45,    46,     0,
       0,     0,     0,  1584,     0,     0,     0,    53,     0,     0,
      54,     0,     0,     0,    59,     0,     0,   937,   940,     0,
       0,  -645,    59,     0,     0,     0,     0,     0,     0,     0,
    -645,  -645,  -645,  -645,   636,   640,  1189,  1193,    59,   418,
       0,   384,   384,   937,   940,     0,    59,    59,     0,     0,
       0,  1024,     0,   418,  1622,     0,     0,     0,     0,    59,
       0,     0,     0,     0,   636,   937,   940,     0,  -645,  -645,
     937,   940,   713,  -645,   937,   940,   565,     0,     0,     0,
    -645,   659,   265,   659,     0,   565,     0,     0,     0,   265,
       0,     0,     0,     0,     0,  1823,     0,     0,     0,     0,
       0,     0,     0,     0,  -645,  -645,     0,     0,     0,     0,
       0,     0,     0,     0,  -645,     0,     0,  -645,     0,   239,
     988,     0,   986,  -645,   418,   418,     0,     0,   418,   418,
     418,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    68,   565,   565,     0,  1698,     0,    59,   418,
       0,     0,     0,    59,     0,     0,     0,     0,     0,    59,
       0,     0,   685,   685,     0,    59,     0,     0,  1718,     0,
       0,    59,     0,     0,   685,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   659,
       0,     0,   659,     0,     0,   659,  1024,  1024,     0,     0,
       0,     0,     0,  1024,  1024,     0,     0,  1024,  1024,     0,
       0,     0,     0,     0,    90,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   462,     0,   462,     0,
       0,  1953,  1957,   659,  1963,  1967,     0,     0,     0,  1971,
    1975,  1979,  1983,     0,     0,     0,     0,   659,   659,   659,
     659,     0,   462,     0,   462,     0,     0,     0,   384,     0,
       0,     0,     0,     0,     0,   418,   418,     0,   134,     0,
     265,     0,   265,     0,     0,     0,   384,     0,     0,    59,
       0,     0,     0,     0,     0,     0,    59,     0,     0,   265,
     418,    59,    77,     0,     0,     0,     0,  1147,   167,   187,
     202,     0,     0,     0,     0,     0,   672,     0,   241,   265,
      90,     0,     0,     0,     0,     0,   265,    90,    90,     0,
       0,     0,   493,     0,     0,     0,     0,     0,   369,     0,
     384,  1186,  1190,   493,   265,   659,     0,     0,     0,   936,
     939,   265,   659,     0,     0,   265,   659,     0,   202,   411,
     413,   415,   416,     0,     0,     0,     0,     0,   484,     0,
       0,   484,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   484,     0,   484,   184,   484,     0,
     715,   715,   715,   715,   715,   715,   715,   715,    77,     0,
       0,     0,     0,   936,   939,    77,    77,     0,     0,     0,
       0,     0,   546,   413,   415,     0,     0,     0,     0,     0,
       0,  1024,    78,  1796,     0,     0,     0,   685,     0,   462,
     462,   462,   462,   462,     0,     0,     0,     0,     0,  1804,
       0,     0,     0,   462,   462,   462,   462,     0,     0,     0,
       0,   576,   591,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   715,     0,   908,     0,     0,
       0,     0,     0,  1607,     0,     0,  1613,    59,    59,   629,
       0,     0,     0,   666,     0,     0,     0,    78,     0,     0,
       0,     0,   187,   418,   462,   462,     0,   418,    78,     0,
       0,     0,   704,     0,    90,    78,    78,     0,     0,     0,
     587,     0,     0,     0,  1654,     0,     0,     0,     0,  1024,
    1024,     0,     0,   984,     0,     0,     0,     0,  1189,  1193,
    1189,  1193,     0,     0,     0,     0,     0,     0,     0,   659,
       0,   764,    59,     0,     0,     0,     0,   496,     0,     0,
       0,   636,     0,   636,     0,     0,     0,     0,     0,   496,
     418,     0,     0,   496,     0,     0,     0,   418,   418,    56,
     184,     0,    59,    59,    59,    59,     0,   685,     0,   685,
     184,     0,    77,     0,     0,     0,     0,     0,     0,     0,
     937,   940,     0,     0,   937,   940,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   411,
     413,   415,     0,  1923,     0,  1926,     0,   753,     0,     0,
       0,   418,   418,     0,     0,     0,     0,     0,     0,  1934,
    1936,     0,     0,   877,     0,     0,     0,     0,     0,     0,
     484,     0,     0,    59,     0,     0,     0,     0,   685,     0,
       0,   134,     0,     0,   175,     0,     0,   265,   659,     0,
       0,     0,  1146,   659,   659,    56,     0,     0,     0,     0,
       0,     0,    56,    56,     0,     0,   659,     0,     0,   659,
     484,   484,     0,     0,     0,   951,     0,   659,     0,   962,
      78,     0,   484,     0,   672,   672,   672,   672,     0,     0,
      78,   167,    78,     0,  1024,  1024,   484,   484,     0,     0,
       0,   587,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    59,     0,     0,   877,     0,     0,   484,   484,
       0,     0,     0,   484,   484,     0,     0,   484,   484,     0,
       0,   202,   202,   202,   202,   202,     0,     0,     0,     0,
       0,  1035,     0,     0,     0,   418,     0,    59,     0,     0,
     418,   202,   202,   587,     0,     0,     0,     0,  1604,     0,
       0,  1610,     0,     0,     0,     0,     0,   484,    59,   484,
    1627,     0,  1070,     0,  1079,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   581,     0,   415,
       0,     0,     0,   587,     0,     0,     0,     0,     0,  1651,
       0,     0,     0,   129,  1120,     0,   936,   939,     0,   936,
     939,     0,     0,  1186,  1190,  1186,  1190,   418,     0,     0,
     936,   939,   936,   939,     0,     0,     0,   496,  2062,     0,
       0,     0,   265,   659,   185,   129,     0,  2069,   496,   666,
       0,     0,     0,   240,     0,     0,     0,   175,     0,     0,
       0,   418,     0,   418,     0,     0,    59,   175,     0,    56,
     791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   666,   666,   666,   666,     0,     0,   418,     0,   418,
       0,     0,     0,   129,   129,     0,     0,     0,     0,     0,
     496,   936,   939,     0,     0,  2080,  2082,     0,     0,  1204,
       0,     0,     0,     0,     0,   704,     0,     0,     0,     0,
       0,     0,   659,   659,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1234,     0,     0,     0,
    1234,  1252,     0,     0,     0,  1256,     0,   544,     0,     0,
       0,     0,     0,     0,  1852,  1856,     0,     0,     0,   877,
       0,     0,     0,     0,     0,     0,     0,   640,     0,     0,
     640,  1495,     0,     0,     0,     0,     0,   764,   640,     0,
       0,     0,     0,   418,     0,   418,     0,     0,     0,     0,
       0,  1294,     0,   184,     0,     0,   608,     0,   581,  1219,
     610,   239,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   753,     0,  1348,     0,
       0,     0,     0,   764,     0,  1219,  1359,     0,  1219,     0,
       0,     0,     0,     0,   129,     0,     0,  1263,     0,     0,
       0,     0,     0,   937,   940,     0,  1412,   185,     0,     0,
     581,     0,     0,     0,   418,   418,   418,   418,   418,    59,
       0,    59,     0,     0,     0,     0,     0,     0,   418,   418,
     418,   418,     0,     0,     0,     0,     0,     0,     0,     0,
    1435,     0,     0,     0,     0,     0,     0,   877,     0,     0,
     581,     0,     0,     0,   167,   877,  1449,   937,   940,     0,
       0,     0,     0,  1456,     0,     0,   877,     0,  1464,     0,
       0,     0,     0,    78,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     587,     0,     0,     0,     0,     0,     0,     0,     0,   418,
     418,     0,     0,   672,     0,     0,   672,   134,     0,     0,
       0,     0,     0,     0,     0,  1146,  1493,     0,     0,     0,
       0,   591,     0,     0,   129,   587,  1156,   134,     0,     0,
       0,     0,     0,     0,   587,     0,     0,   951,     0,     0,
       0,   587,     0,     0,   672,     0,   753,     0,   587,     0,
       0,     0,   484,     0,     0,     0,     0,     0,   672,   672,
     672,   672,   413,     0,     0,     0,   129,     0,     0,     0,
       0,     0,     0,   640,   640,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   951,     0,
       0,     0,     0,     0,     0,     0,     0,  1035,     0,   587,
       0,     0,     0,     0,   240,     0,     0,     0,     0,  1849,
    1853,     0,     0,     0,     0,   587,     0,     0,     0,  1862,
       0,  1865,  1604,   484,   484,  1610,     0,   484,   484,   484,
       0,     0,     0,  1651,  1568,   411,  1878,     0,     0,     0,
     175,     0,     0,     0,     0,   415,  1215,     0,     0,  1285,
       0,     0,     0,   496,     0,     0,   129,   129,   129,   129,
     129,     0,  1028,     0,   496,   610,     0,     0,     0,     0,
       0,     0,  1215,     0,     0,  1215,   129,   129,   129,     0,
       0,     0,  1317,  1321,  1325,  1329,  1333,     0,     0,  1342,
     666,     0,     0,   666,     0,  1285,     0,   129,     0,     0,
       0,     0,   666,     0,     0,     0,     0,     0,     0,     0,
    1383,  1387,  1391,  1395,  1399,     0,     0,  1342,     0,     0,
       0,     0,     0,     0,  1648,  1649,     0,     0,     0,     0,
       0,   666,     0,  1294,     0,     0,     0,  1661,     0,     0,
    1359,     0,  1665,     0,     0,   666,   666,   666,   666,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   484,   484,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   581,     0,     0,
       0,     0,     0,     0,     0,   877,     0,     0,   877,     0,
    1694,     0,     0,     0,   495,     0,     0,     0,     0,     0,
       0,     0,  1807,     0,  -634,     0,   495,     0,  1234,     0,
     495,     0,   581,     0,     0,  1234,     0,     0,     0,     0,
       0,   581,     0,     0,   240,     0,     0,     0,   581,  -634,
       0,     0,     0,     0,     0,   581,  1738,     0,  -634,  -634,
    -634,  -634,     0,     0,     0,     0,     0,     0,    84,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2018,  2019,
    2020,  2021,     0,  1685,  2022,     0,     0,     0,  1849,  1853,
       0,  1862,     0,  1865,     0,     0,  -634,  -634,     0,     0,
       0,  -634,     0,     0,     0,  2031,   581,     0,  -634,     0,
     937,   940,     0,   937,   940,     0,     0,     0,     0,     0,
       0,     0,   581,     0,   937,   940,   937,   940,     0,     0,
       0,     0,  -634,  -634,     0,     0,     0,     0,     0,     0,
       0,     0,  -634,     0,   627,  -634,     0,     0,  1808,     0,
     986,  -634,     0,    84,     0,   312,     0,     1,   313,   109,
       0,     0,     0,     0,    84,     0,     0,     0,     0,     0,
       0,    84,    84,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,   730,     0,     0,
       0,     0,     0,   730,     0,   937,   940,     0,     0,     0,
       0,     0,     0,     0,   672,   672,     0,     0,     0,     0,
       0,     0,     0,   497,  1146,     0,  1146,   672,     0,  1768,
     672,   317,     0,     0,     0,   497,   318,   319,   672,   497,
       0,  1146,     0,     0,  1777,     0,     0,  1629,     0,     0,
     322,   411,     0,   129,     0,  2022,     0,     0,   202,     0,
       0,     0,     0,   323,  2102,     0,  2105,   324,   325,   326,
     327,   328,   329,   330,     0,  1656,     0,     0,     0,  1790,
       0,   591,  1663,   332,     0,     0,     0,     0,   720,     0,
       0,     0,   129,     0,     0,     0,     0,     0,   337,   338,
       0,     0,     0,     0,     0,     0,   484,   484,     0,   608,
       0,   610,   129,     0,   889,   354,  1342,     0,  1342,  1035,
       0,     0,  2135,  2136,     0,   889,  2102,     0,  2105,     0,
       0,  2140,     0,     0,     0,  2142,     0,     0,     0,   425,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1035,     0,     0,     0,     0,     0,     0,     0,     0,   587,
     484,   484,     0,   411,     0,     0,    84,     0,     0,  2142,
       0,     0,     0,  1680,     0,     0,    84,   980,    84,     0,
    1682,     0,   591,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2182,     0,
       0,   666,   666,     0,     0,   425,     0,     0,     0,     0,
       0,   666,     0,   666,   666,     0,     0,   666,     0,   129,
     129,     0,     0,     0,     0,   666,     0,     0,   666,     0,
       0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     587,     0,     0,  1146,  1146,  1146,  1146,     0,     0,  1146,
       0,     0,     0,   672,   672,     0,  1146,     0,  1146,     0,
       0,     0,     0,     0,     0,     0,   480,     0,  1910,   480,
    1146,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   480,     0,   480,     0,   480,     0,  1035,     0,
     425,     0,     0,   890,   718,   721,   723,     0,     0,   425,
    1942,     0,     0,  1035,   890,   425,     0,     0,     0,     0,
       0,   744,     0,     0,     0,  1738,     0,     0,   354,     0,
    1661,     0,     0,  1665,     0,     0,  -459,  -459,     0,     0,
       0,   608,     0,   610,     0,   425,  -459,     0,     0,     0,
     425,  -459,  -459,  -459,     0,  -459,  -459,  -459,  -459,  -459,
       0,     0,     0,     0,     0,     0,   890,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   753,     0,   425,     0,   425,
     484,     0,   484,     0,     0,   877,     0,     0,     0,  1035,
       0,  1232,  1242,     0,     0,  1232,  1242,     0,     0,     0,
    1035,     0,     0,     0,     0,     0,   484,     0,   484,     0,
    1146,   425,     0,     0,     0,     0,     0,     0,   415,  1146,
       0,  1146,     0,     0,     0,     0,   581,     0,     0,     0,
     666,   666,   666,   666,     0,     0,   666,     0,     0,     0,
     666,   666,     0,   666,     0,   666,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   666,     0,     0,
       0,     0,     0,   587,     0,     0,     0,  2047,  2048,     0,
       0,     0,     0,     0,     0,     0,     0,  1146,  1146,     0,
       0,  1146,     0,  1146,     0,     0,  1146,     0,     0,     0,
    1146,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1035,     0,
       0,     0,   425,     0,  1146,     0,     0,   581,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1447,     0,     0,  1146,     0,     0,     0,     0,     0,   425,
       0,  1447,     0,     0,     0,     0,     0,     0,     0,    84,
       0,     0,     0,   484,   484,   484,   484,   484,     0,     0,
       0,  1035,   753,     0,     0,     0,     0,   484,   484,   484,
     484,   354,     0,   129,     0,     0,     0,   666,   480,   480,
       0,     0,     0,     0,     0,     0,   666,     0,   666,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   425,     0,     0,   480,   480,     0,  1946,     0,     0,
       0,     0,  1949,  1951,  1955,  1959,  1961,  1965,     0,     0,
       0,  1969,  1973,  1977,  1981,     0,   480,   480,     0,  1035,
       0,   480,   480,     0,     0,   480,   480,   372,   484,   484,
       0,  1035,     0,     0,   666,   666,     0,     0,   666,     0,
     666,     0,     0,   666,     0,     0,     0,   666,     0,     0,
       0,   427,     0,   627,  2148,     0,     0,     0,     0,     0,
       0,     0,   425,     0,     0,   480,     0,   480,   129,     0,
       0,     0,  1035,     0,     0,     0,     0,     0,     0,     0,
       0,   666,     0,     0,     0,     0,     0,     0,   354,     0,
       0,     0,   354,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1035,     0,   425,     0,
     666,     0,     0,     0,     0,   425,     0,   427,   425,   890,
     581,     0,     0,     0,  1035,     0,  2195,     0,     0,     0,
     890,     0,     0,     0,     0,     0,  1035,     0,   354,     0,
       0,     0,     0,     0,   425,   425,   425,   425,   425,   425,
     425,     0,     0,   425,   425,     0,   425,   425,   425,   425,
     425,   425,   425,   425,     0,   354,     0,     0,     0,     0,
       0,     0,     0,   354,   425,   425,   425,   425,   425,   425,
     425,   425,   425,   425,   425,   425,   425,   425,   425,   425,
     425,   425,     0,   354,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   427,     0,   425,   425,   719,   722,   724,     0,
       0,   427,     0,     0,     0,     0,     0,   427,     0,     2,
       0,     0,     0,   745,     0,     0,     0,     0,   124,     0,
     372,     0,     0,   627,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   427,     0,     0,
       0,     0,   427,  1711,     0,     0,     0,     0,   317,     0,
    1711,     0,     0,   318,   319,   320,    30,    31,     0,     0,
       0,    34,   425,     0,   425,     0,   321,   322,    40,   312,
       0,     1,   313,   109,   314,     0,   315,   316,     0,   427,
     323,   427,     0,     0,   324,   325,   326,   327,   328,   329,
     330,   331,    45,    46,   425,     0,     2,     0,     0,     0,
     332,   333,   903,   425,   129,   904,   747,   336,     0,     0,
       0,     0,     0,   427,     0,   337,   338,     0,   339,   340,
     341,   342,  1135,  1136,  1137,   644,  1138,  1139,  1140,  1141,
     649,   650,  1142,     0,     0,   317,   425,     0,   425,     0,
     318,   319,   320,     0,     0,     0,     0,     0,    34,     0,
       0,     0,     0,   321,   322,  1143,     0,   654,   655,   656,
       0,     0,     0,     0,     0,     0,     0,   323,     0,     0,
       0,   324,   325,   326,   327,   328,   329,   330,   331,    45,
      46,     0,     0,     0,     0,   480,   480,   332,   333,   334,
       0,     0,   335,  -454,   336,   657,     0,  -454,     0,   264,
       0,   658,   337,   338,   425,   339,   340,   341,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   427,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -879,     0,     0,  -879,  -879,  -879,
       0,  -879,  -879,     0,   425,     0,     0,     0,     0,     0,
     480,     0,     0,     0,     0,   425,     0,     0,     0,     0,
       0,   427,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   479,     0,     0,   479,     0,     0,
       0,   354,   354,     0,     0,     0,     0,     0,     0,     0,
     479,     0,   479,   372,   479,     0,     0,     0,     0,     0,
    -879,     0,     0,     0,     0,  -879,  -879,  -879,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -879,     0,
       0,   480,   480,   427,     0,   480,   480,   480,     0,     0,
       0,     0,  -879,     0,     0,     0,  -879,  -879,  -879,  -879,
    -879,  -879,  -879,  -879,     0,   425,     0,   425,     0,     0,
       0,     0,  -879,  -879,     0,     0,     0,     0,     0,  -879,
    -879,     0,  -879,  -879,  -879,     0,     0,  -879,  -879,   425,
    -879,  -879,  -879,  -879,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   425,     0,     0,     0,
     425,     0,     0,   354,   427,     0,     0,   425,     0,     0,
       0,   425,     0,     0,     0,     0,     0,     0,     0,     0,
     664,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     372,     0,     0,     0,   372,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     427,     0,     0,     0,     0,     0,     0,   427,     0,    88,
     427,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   480,   480,     0,     0,     0,     0,     0,     0,
     372,     0,     0,     0,     0,     0,   427,   427,   427,   427,
     427,   427,   427,     0,     0,   427,   427,     0,   427,   427,
     427,   427,   427,   427,   427,   427,     0,   372,     0,     0,
       0,     0,     0,    88,     0,   372,   427,   427,   427,   427,
     427,   427,   427,   427,   427,   427,   427,   427,   427,   427,
     427,   427,   427,   427,     0,   372,     0,     0,     0,     0,
       0,     0,     0,     0,    88,    88,     0,     0,     0,     0,
       0,     0,     0,    88,     0,    88,     0,     0,     0,     0,
       0,     0,    88,    88,     0,     0,   427,   427,   425,     0,
       0,     0,   425,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    88,    88,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   425,     0,   479,   479,     0,     0,
       0,     0,     0,     0,   425,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   427,   425,   427,     0,     0,     0,
     425,     0,   479,   479,     0,     0,     0,    88,     0,     0,
       0,     0,     0,     0,   425,     0,   354,     0,     0,     0,
       0,   425,     0,   425,   479,   479,   427,     0,     0,   479,
     479,     0,     0,   479,   479,   427,     0,     0,     0,     0,
     425,     0,  1021,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    88,     0,     0,     0,
      88,     0,     0,     0,     0,     0,     0,     0,   427,     0,
     427,     0,     0,   479,     0,   479,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   425,    88,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    88,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    88,     0,    88,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   427,     0,     0,     0,
       0,     0,     0,     0,   480,   480,   664,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   427,     0,   664,   664,
     664,   664,     0,     0,     0,     0,     0,   427,     0,     0,
     425,     0,     0,     0,   425,   425,   425,     0,   480,   480,
       0,     0,     0,     0,     0,   354,     0,     0,     0,     0,
     425,   425,     0,   372,   372,     0,     0,   354,     0,     0,
       0,     0,     0,     0,    88,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   425,   425,
       0,   425,   425,     0,     0,     0,   425,   425,   425,   425,
       0,     0,     0,     0,     0,     0,     0,     0,  1021,     0,
       0,     0,   425,     0,     0,  1021,    88,     0,  1021,     0,
       0,     0,     0,     0,     0,     0,     0,   427,   425,   427,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   427,     0,     0,     0,   425,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   427,     0,
       0,     0,   427,     0,     0,   372,     0,     0,     0,   427,
       0,     0,     0,   427,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    88,    88,    88,    88,
      88,     0,    88,     0,     0,    88,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    88,    88,    88,     0,
       0,     0,     0,     0,   354,   354,     0,   425,   425,   425,
     425,   425,   425,   425,   425,     0,     0,    88,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   425,   425,
       0,     0,     0,   479,   479,     0,     0,     0,   425,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   480,     0,
     480,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   480,     0,   480,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   425,     0,     0,     0,   425,   425,   479,     0,
     427,     0,     0,     0,   427,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1021,     0,  1021,     0,
       0,     0,     0,     0,    88,     0,     0,     0,     0,     0,
      88,     0,     0,     0,     0,     0,   427,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   427,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   427,     0,   479,
     479,     0,   427,   479,   479,   479,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   427,     0,   372,     0,
       0,     0,     0,   427,     0,   427,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   354,   427,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   354,
       0,     0,     0,     0,  1021,     0,     0,   664,     0,     0,
     664,   480,   480,   480,   480,   480,     0,     0,     0,   664,
       0,     0,     0,     0,     0,   480,   480,   480,   480,     0,
       0,     0,     0,     0,     0,   427,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   664,     0,
       0,     0,     0,   354,     0,     0,     0,     0,     0,     0,
       0,     0,   664,   664,   664,   664,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     479,   479,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   480,   480,     0,     0,
       0,     0,     0,    88,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      76,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   427,     0,     0,     0,   427,   427,   427,     0,
       0,     0,    88,     0,     0,     0,     0,   372,     0,     0,
    1021,     0,   427,   427,     0,     0,     0,  1021,     0,   372,
       0,  1021,    88,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,     0,     0,     0,     0,     0,     0,
     427,   427,     0,   427,   427,     0,     0,     0,   427,   427,
     427,   427,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   427,   183,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   271,    76,     0,     0,     0,
     427,     0,     0,    76,    76,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   395,     0,     0,     0,     0,     0,   427,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   494,   228,     0,     0,    88,
      88,     0,     0,     0,     0,     0,     0,   494,     0,     0,
       0,   494,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   228,
       0,   271,   271,     0,     0,     0,     0,   429,     0,     0,
       0,     0,     0,     0,     0,     0,   372,   372,     0,   427,
     427,   427,   427,   427,   427,   427,   427,   521,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   586,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     427,   427,     0,     0,  1021,     0,     0,     0,     0,     0,
     427,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   479,   479,     0,   626,     0,     0,   271,   271,
     271,    88,     0,    88,     0,     0,     0,     0,   183,     0,
       0,  1021,     0,  1021,     0,     0,     0,     0,   183,   271,
      76,     0,     0,     0,   427,     0,     0,     0,   427,   427,
       0,     0,     0,     0,     0,     0,     0,     0,   729,     0,
       0,     0,     0,     0,   729,     0,   479,   479,     0,     0,
       0,     0,     0,     0,     0,   752,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   312,
       0,     1,   313,   109,   314,     0,   315,   316,     0,     0,
       0,     0,     0,  1021,     0,     0,     0,     0,   664,   664,
       0,     0,     0,     0,     0,     0,     2,     0,   664,     0,
     664,   664,     0,     0,   664,     0,     0,     0,     0,     0,
       0,     0,   664,     0,     0,   664,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,     0,   564,     0,     0,
     318,   319,   320,   372,     0,     0,     0,     0,     0,   586,
       0,     0,     0,   321,   322,   888,     0,     0,     0,     0,
       0,   372,     0,     0,     0,     0,   888,   323,     0,     0,
     848,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,     0,     0,     0,     0,     0,     0,   332,   333,   334,
       0,     0,   335,  1178,   336,     0,     0,  1179,     0,     0,
       0,   586,   337,   338,  1745,   339,   340,   341,   342,   883,
     521,     0,     0,     0,   892,   372,     0,     0,   979,     0,
       0,     0,     0,   899,     0,     0,   906,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   586,   714,     0,     0,     0,     0,     0,     0,     0,
       0,   564,     0,     0,     0,     0,     0,   564,     0,     0,
     957,     0,   271,    88,     0,     0,   973,     0,  1021,   271,
       0,     0,   271,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   479,     0,   479,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   408,
       0,     0,   479,     0,   479,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   564,
       0,   564,     0,     0,     0,     0,     0,   664,   664,   664,
     664,     0,     0,   664,     0,     0,   228,   664,   664,     0,
     664,     0,   664,     0,     0,     0,   228,     0,     0,     0,
       0,     0,   408,     0,   664,     0,     0,     0,    88,     0,
       0,     0,     0,  1160,     0,     0,   228,     0,     0,   228,
       0,   228,     0,   228,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   271,   271,
     271,   271,   589,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   271,   271,   271,     0,
       0,   183,     0,     0,     0,     0,     0,  1218,     0,     0,
       0,     0,     0,     0,     0,   271,     0,     0,     0,     0,
       0,     0,  1231,  1241,   752,     0,  1231,  1241,     0,     0,
       0,     0,     0,  1218,     0,     0,  1218,     0,     0,     0,
       0,     0,   701,     0,  1022,  1262,     0,     0,   271,   479,
     479,   479,   479,   479,     0,   271,     0,     0,   271,     0,
       0,     0,     0,   479,   479,   479,   479,     0,     0,     0,
       0,     0,     0,     0,   664,     0,     0,     0,     0,     0,
       0,   564,     0,   664,     0,   664,     0,     0,     0,   671,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,     0,     0,     0,     0,
       0,     0,     0,     0,   479,   479,     0,     0,   586,     0,
       0,   664,   664,   564,   750,   664,     0,   664,     0,   866,
     664,     0,     0,     0,   664,   871,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   586,     0,     0,     0,     0,   123,   135,
       0,  1446,   586,     0,     0,     0,     0,     0,   664,   586,
       0,     0,  1446,   120,   752,     0,   586,     0,     0,   848,
     848,   848,     0,     0,    88,     0,     0,     0,     0,     0,
     188,   135,     0,     0,  1210,   237,     0,   664,     0,     0,
       0,    94,   429,   429,   228,   948,     0,     0,    94,    94,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   396,   586,     0,     0,
       0,     0,     0,     0,     0,     0,   750,     0,     0,   405,
    1022,     0,     0,   586,     0,     0,     0,  1022,     0,     0,
    1022,     0,     0,   312,     0,     1,   313,   109,   314,     0,
     315,   316,     0,     0,     0,     0,     0,  1027,     0,     0,
    1032,     0,     0,     0,     0,     0,     0,  1487,     0,     0,
       2,     0,     0,  1027,     0,     0,   271,   271,   271,     0,
       0,     0,   543,     0,   626,     0,     0,     0,     0,     0,
       0,     0,   429,     0,   589,     0,     0,   559,     0,   521,
     521,     0,     0,     0,     0,     0,     0,   589,     0,   317,
       0,     0,   521,     0,   318,   319,   320,     0,     0,     0,
       0,     0,     0,   593,     0,     0,     0,   321,   322,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   323,     0,     0,     0,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,     0,     0,     0,     0,     0,
       0,   332,   333,   334,     0,     0,   335,  1178,   336,     0,
     135,  1750,     0,     0,     0,  1751,   337,   338,     0,   339,
     340,   341,   342,   188,   271,     0,     0,   271,     0,     0,
     271,     0,     0,   705,     0,    94,     0,     0,     0,     0,
       0,   228,     0,  1160,     0,     0,   228,     0,     0,     0,
       0,     0,  1588,     0,  1022,     0,   564,     0,  1588,   701,
       0,     0,     0,     0,   228,   701,     0,     0,   271,     0,
    1158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   271,   271,   271,   271,  1176,     0,     0,     0,
       0,     0,     0,     0,     0,   564,     0,   671,   671,   671,
     671,     0,     0,     0,     0,   271,     0,   271,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1684,     0,     0,   626,     0,     0,     0,  1022,     0,
    1022,     0,     0,     0,     0,     0,   750,     0,     0,   750,
       0,     0,     0,     0,  1710,     0,     0,     0,     0,     0,
       0,  1710,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   750,     0,   878,     0,     0,     0,  1176,   271,
     271,     0,     0,     0,     0,     0,   271,   271,     0,     0,
     271,   271,   135,   429,   228,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1292,   564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   952,     0,     0,   960,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1345,     0,     0,  1022,     0,     0,     0,
       0,  1357,     0,     0,     0,     0,   701,   564,     0,     0,
       0,     0,     0,  1455,     0,     0,   878,     0,     0,     0,
       0,  1409,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   135,   135,   135,   135,   135,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   135,   135,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1491,     0,     0,     0,
       0,   589,     0,  1071,     0,  1080,     0,     0,     0,     0,
       0,     0,     0,   750,     0,     0,  1082,   948,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   564,     0,     0,   559,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,   948,     0,
     848,   848,  1022,     0,   271,     0,     0,   586,     0,  1022,
       0,     0,     0,  1022,     0,     0,   429,     2,     0,     0,
     429,     0,     0,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,   408,     0,     0,     0,     0,
       0,     0,     0,     0,   589,     0,   589,    29,     0,  1202,
       0,     0,     0,     0,    30,    31,   705,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,   429,     0,     0,     0,  1236,     0,     0,
      42,  1236,     0,     0,     0,   429,  1811,   429,  1811,     0,
      45,    46,    47,    48,    49,    50,     0,     0,   586,     0,
     878,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   271,   271,     0,     0,     0,     0,   271,   271,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   271,     0,     0,   271,     0,     0,     0,     0,     0,
       0,     0,   271,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   671,     0,     0,   671,
    1615,  1617,     0,  1620,     0,     0,   701,     0,   701,     0,
       0,  1630,     0,     0,     0,     0,     0,     0,     0,  1639,
       0,     0,     0,     0,     0,     0,  1176,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   671,     0,     0,
       0,     0,     0,     0,  1176,     0,  1022,     0,     0,  1176,
       0,   671,   671,   671,   671,     0,   564,     0,     0,     0,
       0,   878,  1436,     0,     0,     0,     0,     0,   878,     0,
       0,     0,   564,   752,     0,   521,   878,  1450,     0,     0,
    1674,     0,  1678,     0,  1457,     0,     0,   878,   123,   135,
       0,     0,     0,  1022,     0,  1022,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   429,     0,
     228,     0,  1022,   429,  1176,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   135,     0,
       0,     0,     0,     0,     0,     0,  1490,   271,   271,     0,
       0,     0,   593,     0,     0,   270,     0,     0,   135,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   952,     0,
    1176,   586,     0,     0,     0,  1022,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     429,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   952,
       0,     0,  1176,     0,     0,     0,     0,   271,   271,     0,
       0,     0,     0,     0,     0,  1176,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   270,   270,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   701,  1569,     0,     0,     0,     0,
       0,  1780,     0,     0,  1577,     0,   564,     0,   564,     0,
       0,     0,     0,     0,     0,     0,  1176,     0,   585,     0,
     752,     0,   564,   564,     0,     0,     0,     0,     0,  1455,
       0,   589,     0,     0,  1793,     0,     0,  1032,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1952,  1956,     0,  1962,  1966,     0,     0,     0,  1970,  1974,
    1978,  1982,     0,     0,     0,   625,     0,     0,   270,   270,
     270,     0,     0,     0,     0,     0,   429,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   270,
    1022,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   728,     0,
       0,     0,     0,   866,   728,     0,     0,     0,     0,     0,
       0,   589,     0,     0,     0,   751,     0,     0,     0,     0,
       0,     0,   589,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   878,     0,     0,   878,
       0,  1236,   429,     0,   429,     0,     0,     0,     0,  1701,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1236,
     312,     0,     1,   313,   109,   314,  1236,   315,   316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,  1952,
    1956,  1962,  1966,  1970,  1974,  1978,  1982,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   671,   671,   585,
       0,     0,     0,  1176,     0,  1176,     0,     0,  1176,   671,
       0,   564,     0,     0,  1869,  1872,   317,  1874,   273,     0,
     564,   318,   319,   320,     0,     0,     0,  1176,     0,  1885,
       0,     0,     0,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,   585,   324,   325,   326,   327,   328,   329,   330,   331,
       0,  1176,     0,     0,     0,  1176,     0,     0,   332,   333,
     334,     0,     0,   335,  1022,   336,     0,     0,   564,   564,
     758,     0,     0,   337,   338,   759,   339,   340,   341,   342,
       0,   585,     0,     0,     0,     0,     0,     0,     0,     0,
     701,   701,     0,  1991,     0,     0,     0,     0,     0,     0,
       0,     0,   270,     0,   273,   273,     0,     0,     0,   270,
       0,     0,   270,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1769,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   588,     0,     0,  1776,     0,     0,     0,     0,  1027,
       0,  1779,     0,     0,     0,     0,     0,     0,     0,   405,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1457,     0,   593,     0,     0,     0,     0,     0,   628,     0,
       0,   273,   273,   273,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   273,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1176,     0,     0,     0,     0,     0,
       0,   731,     0,     0,     0,     0,     0,   731,   270,   270,
     270,   270,   671,  1176,     0,     0,     0,     0,   754,     0,
    1176,     0,     0,   762,  1874,     0,  2029,     0,     0,     0,
       0,     0,     0,  1835,     0,  2035,   270,   270,   270,     0,
     790,     0,     0,     0,     0,     0,     0,  1217,     0,     0,
       0,     0,     0,   593,     0,   270,     0,     0,     0,     0,
       0,     0,  1230,  1240,   751,     0,  1230,  1240,     0,     0,
       0,     0,     0,  1217,     0,     0,  1217,     0,     0,   750,
       0,     0,     0,     0,     0,  1261,     0,     0,   270,     0,
       0,     0,     0,     0,     0,   270,     0,     0,   270,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   588,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1911,
       0,     0,     0,     0,   588,     0,     0,     0,     0,     0,
       0,   749,     0,     0,  2094,  2097,     0,  1176,   585,  1176,
       0,     0,   671,  1176,   671,     0,     0,     0,     0,     0,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
       0,     0,     0,     0,   588,     0,     0,     0,     0,     0,
       0,     0,     0,   585,     0,     0,     0,     2,     0,     0,
       0,     0,   585,     0,     0,   273,     0,     0,     0,   585,
       0,     0,   273,  1436,   751,   273,   585,     0,     0,     0,
     125,     0,  1176,     0,     0,  1176,     0,   142,     0,     0,
       0,     0,     0,   671,     0,  1779,   317,     0,     0,     0,
       0,   318,   319,   320,     0,     0,     0,     0,     0,     0,
     165,   176,   201,     0,   321,   322,   878,     0,     0,     0,
       0,     0,     0,   749,     0,     0,     0,   585,   323,     0,
    1176,     0,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,   585,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  1178,   336,     0,     0,  1179,     0,
     125,   125,     0,   337,   338,  1755,   339,   340,   341,   342,
       0,     0,     0,     0,     0,     0,  1155,   504,     0,     0,
       0,     0,     0,     0,     0,     0,   270,   270,   270,     0,
       0,     0,     0,   535,   625,     0,     0,     0,     0,     0,
       0,   273,   273,   273,   273,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,  1701,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   273,
     273,   273,     0,     0,     0,     0,     0,     0,     0,     0,
    1220,     0,     0,     0,     0,     0,     0,     0,   273,     0,
       0,     0,     0,   165,   582,  1233,  1243,   754,     0,  1233,
    1243,     0,     0,     0,     0,     0,  1220,     0,     0,  1220,
       0,     0,     0,     0,     0,     0,     0,     0,  1264,     0,
       0,   273,     0,     0,     0,     0,     0,     0,   273,     0,
       0,   273,     0,     0,   270,     0,     0,   270,     0,   762,
     270,   176,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1293,   176,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   582,     0,     0,  1157,     0,     0,
       0,     0,  1316,  1320,  1324,  1328,  1332,     0,   270,  1341,
    1347,     0,     0,  1175,     0,   762,     0,  1180,  1358,     0,
       0,     0,   270,   270,   270,   270,     0,     0,     0,     0,
    1382,  1386,  1390,  1394,  1398,     0,     0,  1341,  1411,     0,
       0,   588,     0,     0,     0,   270,     0,   270,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1683,     0,   749,   625,     0,   749,   312,     0,     1,
     313,   109,   314,     0,   315,   316,   588,     0,     0,     0,
    1245,     0,     0,     0,  1709,   588,     0,     0,     0,   749,
       0,  1709,   588,     0,     2,  1175,  1180,   754,     0,   588,
       0,   125,     0,     0,     0,     0,     0,   125,     0,   270,
     270,     0,     0,     0,     0,     0,   270,   270,     0,     0,
     270,   270,  1291,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,     0,     0,     0,     0,   318,   319,
     320,     0,     0,   582,     0,     0,     0,     0,     0,     0,
     588,   321,   322,     0,     0,     0,     0,     0,     0,     0,
    1343,     0,     0,     0,     0,   323,   588,     0,  1356,   324,
     325,   326,   327,   328,   329,   330,   331,   582,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,  1407,     0,
     335,  1178,   336,   165,     0,  1750,     0,     0,     0,  1758,
     337,   338,     0,   339,   340,   341,   342,     0,     0,   273,
     273,   273,     0,     0,     0,     0,     0,   628,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   125,   125,   125,   125,     0,   125,
       0,     0,   125,     0,     0,     0,     0,     0,     0,     0,
     749,     0,     0,   125,   125,   125,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   535,     0,   582,     0,   125,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   273,     0,     0,
     273,     0,     0,   273,   270,     0,     0,   585,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1155,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   273,     0,     0,     0,  1293,     0,     0,     0,     0,
       0,     0,  1358,     0,     0,   273,   273,   273,   273,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1198,     0,     0,     0,     0,   273,     0,
     273,   125,     0,     0,     0,     0,  1341,   582,  1341,     0,
       0,     0,     0,     0,  1686,     0,     0,   628,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   585,     0,
       0,     0,     0,     0,     0,     0,     0,  1712,     0,     0,
       0,     0,   270,   270,  1712,     0,     0,     0,   270,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   270,   273,   273,   270,     0,     0,     0,  1737,   273,
     273,     0,   270,   273,   273,     0,     0,  1614,  1616,     0,
    1619,     0,     0,     0,     0,     0,     0,     0,  1157,     0,
       0,  1180,     0,     0,     0,     0,  1638,     0,     0,     0,
       0,     0,     0,  1175,  1180,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1175,  1180,     0,     0,     0,  1175,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1672,     0,  1676,
       0,     0,     0,   751,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   128,     0,     0,     0,   165,     0,   582,     0,
       0,  1175,     0,     0,     0,   582,     0,     0,     0,     0,
     582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   128,   128,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   270,   270,     0,
       0,     0,     0,     0,     0,     0,     0,  1175,  1180,   125,
       0,     0,     0,     0,     0,     0,     0,     0,   125,     0,
       0,   585,     0,   582,     0,     0,     0,     0,     0,   125,
       0,     0,   128,   128,     0,     0,     0,     0,     0,   582,
       0,     0,     0,     0,     0,     0,     0,   273,     0,     0,
     588,     0,     0,     0,     0,     0,     0,     0,     0,  1175,
       0,  1180,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1175,  1180,     0,     0,     0,   270,   270,     0,
       0,     0,     0,     0,     0,     0,   128,     0,     0,     0,
     582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1175,     0,  1180,   590,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   125,     0,     0,
     751,     0,     0,     0,     0,     0,   125,     0,   125,     0,
       0,   588,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   273,   273,     1,     0,     0,
       0,   273,   273,   128,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   273,     0,   128,   273,     0,     0,
       0,     0,     2,   268,     0,   273,   702,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,   492,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,   492,     0,     0,     0,   492,
       0,     0,     0,     0,     0,    42,     0,     0,   125,     0,
     125,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,     0,     0,     0,     0,    53,   754,     0,   876,   268,
     268,     0,     0,     0,     0,     0,     0,     0,     0,   579,
       0,     0,     0,   128,     0,     0,     0,  1737,     0,   590,
    1845,     0,  1948,  1950,  1954,  1958,  1960,  1964,     0,     0,
       0,  1968,  1972,  1976,  1980,     0,   584,     0,     0,     0,
    1175,  1180,  1175,  1180,     0,  1175,  1864,     0,     0,     0,
       0,  1614,  1871,     0,  1638,   128,  1180,     0,     0,     0,
     273,   273,     0,     0,  1175,  1180,  1638,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   624,   588,     0,   268,   268,   268,   590,
       0,     0,     0,     0,     0,     0,     0,     0,  1175,     0,
    1180,     0,  1175,     0,  1180,     0,     0,   268,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   727,     0,     0,     0,
       0,     0,   727,     0,     0,     0,     0,     0,     0,     0,
     273,   273,     0,     0,     0,   128,   128,   128,   128,   128,
       0,   128,     0,     0,   702,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   128,   128,   128,     0,     0,
       0,     0,  1950,  1954,  1960,  1964,  1968,  1972,  1976,  1980,
       0,     0,     0,     0,     0,     0,   128,     0,   590,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   590,     0,   754,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   269,     0,
       0,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,     0,     0,   125,     0,     0,     0,   584,     0,     0,
     125,     0,     0,   887,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   887,     0,     0,     0,     0,     0,
       0,   125,     0,   582,     0,     0,   125,     0,   269,   125,
       0,  1175,     0,     0,     0,     0,     0,     0,     0,     0,
     269,     0,     0,     0,   269,     0,     0,     0,     0,   584,
    1175,     0,     0,     0,     0,  1180,     0,  1175,  1864,     0,
    1180,  1638,     0,  2028,     0,  2030,   978,     0,     0,     0,
       0,  1180,  2034,   702,   269,   269,     0,     0,     0,   702,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   584,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     268,     0,     0,   125,     0,     0,   749,   268,     0,     0,
     268,     0,     0,     0,   582,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   269,     0,
       0,   269,   269,   269,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   269,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   269,     0,     0,     0,     0,     0,   269,     0,     0,
       0,  2093,  2096,     0,  1175,  1180,  1175,     0,     0,     0,
    1175,  1864,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   268,   268,   268,   268,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     590,     0,     0,     0,     0,     0,     0,   590,     0,     0,
       0,     0,   128,     0,   268,   268,   268,     2,     0,  1175,
    1180,     0,  1175,  1864,     0,     0,     0,  2141,     0,     0,
       0,     0,     0,   268,     0,     0,     0,     0,     0,     0,
    1229,  1239,     0,     0,  1229,  1239,     0,     0,     0,     0,
       0,   128,   125,   125,     0,   125,   317,     0,   269,     0,
     590,   318,   319,   320,     0,   590,   268,  1175,     0,   269,
       0,   128,     0,   268,   321,   322,   268,     0,     0,     0,
       0,   590,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     0,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,   125,     0,   335,  1178,   336,  1645,     0,  1179,     0,
       0,   269,     0,   337,   338,     0,   339,   340,   341,   342,
       0,     0,   590,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1881,     0,     1,   313,   109,   314,   584,   315,   316,     0,
       0,     0,     0,     0,     0,   269,     0,     0,     0,     0,
       0,     0,   269,     0,     0,   269,     0,     2,   128,   128,
       0,     0,     0,     0,     0,     0,     0,     0,   590,     0,
     590,   584,     0,     0,     0,     0,     0,     0,     0,  1445,
     584,     0,     0,     0,     0,     0,     0,   584,     0,     0,
    1445,     0,     0,     0,   584,     0,   317,     0,     0,     0,
       0,   318,   319,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     0,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,   584,     0,     0,   332,   333,
     334,     0,     0,   335,  1178,   336,  1882,     0,  1179,     0,
       0,   584,     0,   337,   338,     0,   339,   340,   341,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   269,   269,   269,   269,     0,     0,     0,     0,     0,
     702,     0,   702,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   268,   268,   268,     0,     0,   269,
     269,   269,   624,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   269,     0,
       0,     0,     0,     0,     0,   269,   269,     0,     0,   269,
     269,     0,     0,   274,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   269,     0,     0,     0,     0,     0,     0,   269,     0,
       0,   269,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,   274,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   274,     0,     0,     2,   274,
       0,     0,   268,     0,     0,   268,     0,     0,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   274,
     274,     0,     0,     0,     0,     0,     0,   317,     0,     0,
       0,     0,   318,   319,   320,     0,   268,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,     0,     0,     0,
     268,   268,   268,   268,     0,     0,     0,     0,     0,   323,
       0,     0,     0,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   268,   269,   268,     0,     0,     0,   332,
     333,   334,     0,     0,   335,   269,   336,     0,     0,  2076,
    2077,  1034,   624,     0,   337,   338,     0,   339,   340,   341,
     342,     0,     0,   274,     0,     0,   274,   274,   274,     0,
       0,     0,  1708,     0,     0,     0,     0,     0,   590,  1708,
       0,     0,     0,     0,     0,   590,     0,   274,     0,     0,
       0,     0,   128,     0,     0,     0,     0,   268,   268,     0,
       0,     0,     0,     0,   268,   268,   274,     0,   268,   268,
       0,     0,   274,   590,     0,   590,     0,     0,   590,     0,
       0,   590,  -459,     0,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   269,
     269,   269,     0,     0,     0,     0,     0,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -459,     0,
       0,     0,     0,  -459,  -459,  -459,     0,   128,     0,     0,
       0,     0,     0,     0,     0,   590,  -459,  -459,     0,     0,
       0,     0,     0,     0,     0,     0,   590,     0,     0,     0,
    -459,     0,     0,   274,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,     0,     0,   274,     0,     0,     0,     0,     0,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,     0,     0,  -459,     0,  -459,  -459,     0,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,   269,     0,     0,
     269,     0,     0,   269,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   274,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   269,   268,     0,     0,   584,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   269,   269,   269,   269,     0,
     274,     0,     0,     0,     0,     0,     0,   274,     0,     0,
     274,     0,     0,     0,     0,     0,     0,     0,   269,     0,
     269,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   269,     0,     0,
       0,     0,     0,     0,   269,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   590,   590,     0,   590,     0,     0,
       0,     0,   269,   269,     0,     0,   584,     0,     0,   269,
     269,     0,     0,   269,   269,     0,     0,     0,     0,     0,
     268,   268,     0,     0,     0,     0,   268,   268,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   268,
       0,     0,   268,     0,     0,     0,     0,     0,     0,     0,
     268,     0,     0,   128,     0,     0,   274,   274,   274,   274,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   274,   274,   274,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   274,     0,     0,     0,     0,     0,     0,
     274,   274,     0,     0,   274,   274,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   274,     0,     0,     0,
       0,     0,     0,   274,     0,     0,   274,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -459,
       0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,     0,     0,
       0,     0,     0,     0,     0,   268,   268,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   584,
       0,     0,     0,     0,     0,  -459,     0,     0,     0,     0,
    -459,  -459,  -459,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -459,  -459,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -459,     0,   274,
       0,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,     0,
     274,     0,     0,     0,     0,   268,   268,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,  -459,     0,  -459,  -459,     0,     0,
    -459,     0,  -459,  -459,     0,  -459,  -459,  -459,  -459,  -459,
    -459,  -459,  -459,  -459,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   269,   269,     0,     0,     0,
       0,   269,   269,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   269,     0,     0,   269,     0,     0,
       0,     0,     0,     0,     0,   269,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   274,   274,   274,     0,     0,     0,
       0,     0,   274,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   770,     0,     0,     0,     0,     0,   771,
     772,   773,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -345,     0,     0,     0,     0,     0,     0,  -345,  -345,     0,
       0,     0,  -345,     0,     0,     0,     0,     0,  -345,  -345,
    -345,     0,   274,     0,     0,   274,     0,     0,   274,     0,
       0,     0,     0,  -345,     0,     0,     0,     0,     0,     0,
     269,   269,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,     0,  -345,  -345,  -345,   774,     0,     0,  -345,
    1550,  -345,  -345,     0,   775,     0,   274,   776,     0,  -345,
    -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,     0,     0,
     274,   274,   274,   274,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   274,     0,   274,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     269,   269,   274,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   274,     0,     0,     0,     0,     0,     0,   274,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   274,     0,
       0,     0,     0,     0,   274,   274,     0,     0,   274,   274,
    -345,   770,     0,  -345,  -345,  -345,  -345,   771,   772,   773,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,
       0,     0,  -345,  -345,  -345,  -345,  -345,     0,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,     0,  -345,
    -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,   774,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,   775,  -345,  -345,   776,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,     0,     0,  -451,
    1171,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,   274,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,     0,     0,  -451,  -451,  -451,     0,
       0,  -451,  -451,  -451,  -451,  -451,     0,     0,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,     0,  -451,     0,  -451,  -451,
    -451,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     274,   274,     0,     0,     0,     0,   274,   274,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   274,
       0,     0,   274,     0,     0,     0,     0,     0,  -304,   312,
     274,     1,   313,   109,   314,  -304,   315,   316,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,     2,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,     0,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,     0,     0,   317,  -304,  -304,     0,     0,
     318,   319,   320,  -304,  -304,     0,     0,  -304,  -304,  -304,
    -304,  -304,  -304,   321,   322,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,     0,  -304,     0,   323,  -304,  -304,
       0,   324,   325,   326,   327,   328,   329,   330,   331,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,   332,   333,   334,
    -304,  -304,   335,  1259,   336,  -304,  -304,  1174,  -304,  -304,
    -304,  -304,   337,   338,  -304,   339,   340,   341,   342,  -304,
    -304,  -304,  -304,  -304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   274,   274,     0,  -305,   312,
       0,     1,   313,   109,   314,  -305,   315,   316,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,     2,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,     0,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,     0,     0,   317,  -305,  -305,     0,     0,
     318,   319,   320,  -305,  -305,   274,   274,  -305,  -305,  -305,
    -305,  -305,  -305,   321,   322,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,     0,  -305,     0,   323,  -305,  -305,
       0,   324,   325,   326,   327,   328,   329,   330,   331,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,   332,   333,   334,
    -305,  -305,   335,  1178,   336,  -305,  -305,  1179,  -305,  -305,
    -305,  -305,   337,   338,  -305,   339,   340,   341,   342,  -305,
    -305,  -305,  -305,  -305,  -566,   312,     0,     1,   313,   109,
     314,  -566,   315,   316,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,     2,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,
       0,   317,  -566,  -566,     0,     0,   318,   319,   320,  -566,
    -566,     0,     0,  -566,  -566,  -566,  -566,  -566,  -566,   321,
     322,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
       0,  -566,     0,   323,  -566,  -566,     0,   324,   325,   326,
     327,   328,   329,   330,   331,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,   332,   333,   334,  -566,  -566,   335,  -566,
     336,  -566,  -566,  -566,  -566,   758,  -566,  1340,   337,   338,
    -566,   339,   340,   341,   342,  -566,  -566,  -566,  -566,  -566,
    -567,   312,     0,     1,   313,   109,   314,  -567,   315,   316,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,     2,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,     0,  -567,  -567,  -567,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,     0,     0,   317,  -567,  -567,
       0,     0,   318,   319,   320,  -567,  -567,     0,     0,  -567,
    -567,  -567,  -567,  -567,  -567,   321,   322,  -567,  -567,  -567,
    -567,  -567,  -567,  -567,  -567,  -567,     0,  -567,     0,   323,
    -567,  -567,     0,   324,   325,   326,   327,   328,   329,   330,
     331,  -567,  -567,  -567,  -567,  -567,  -567,  -567,  -567,   332,
     333,   334,  -567,  -567,   335,  -567,   336,  -567,  -567,  -567,
    -567,   758,  -567,  1406,   337,   338,  -567,   339,   340,   341,
     342,  -567,  -567,  -567,  -567,  -567,  -577,   312,     0,     1,
     313,   109,   314,  -577,   315,   316,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,     2,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,     0,     0,   317,  -577,  -577,     0,     0,   318,   319,
     320,  -577,  -577,     0,     0,  -577,  -577,  -577,  -577,  -577,
    -577,   321,   322,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,  -577,     0,   323,  -577,  -577,     0,   324,
     325,   326,   327,   328,   329,   330,   331,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,   332,   333,   334,  -577,  -577,
     335,  -577,   336,  -577,  -577,  1174,  -577,  -577,  -577,  -577,
     337,   338,  -577,   339,   340,   341,   342,  -577,  -577,  -577,
    -577,  -577,  -579,   312,     0,     1,   313,   109,   314,  -579,
     315,   316,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
       2,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,     0,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,     0,     0,   317,
    -579,  -579,     0,     0,   318,   319,   320,  -579,  -579,     0,
       0,  -579,  -579,  -579,  -579,  -579,  -579,   321,   322,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,     0,  -579,
       0,   323,  -579,  -579,     0,   324,   325,   326,   327,   328,
     329,   330,   331,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,   332,   333,   334,  -579,  -579,   335,  1178,   336,  -579,
    -579,  1179,  -579,  -579,  -579,  -579,   337,   338,  -579,   339,
     340,   341,   342,  -579,  -579,  -579,  -579,  -579,  -578,   312,
       0,     1,   313,   109,   314,  -578,   315,   316,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     2,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,     0,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,     0,     0,   317,  -578,  -578,     0,     0,
     318,   319,   320,  -578,  -578,     0,     0,  -578,  -578,  -578,
    -578,  -578,  -578,   321,   322,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     0,  -578,     0,   323,  -578,  -578,
       0,   324,   325,   326,   327,   328,   329,   330,   331,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,   332,   333,   334,
    -578,  -578,   335,  -578,   336,  -578,  -578,  1174,  -578,  -578,
    -578,  -578,   337,   338,  -578,   339,   340,   341,   342,  -578,
    -578,  -578,  -578,  -578,  -338,  1907,     0,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,
       0,  -338,  -338,  -338,     0,     0,  -338,  -338,  -338,  -338,
    -338,     0,     0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
       0,  -338,     0,  -338,  -338,  -338,     0,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -342,  1943,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,     0,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,     0,     0,  -342,  -342,  -342,
       0,     0,  -342,  -342,  -342,  -342,  -342,     0,     0,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,     0,  -342,     0,  -342,
    -342,  -342,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -332,   312,     0,     1,
     313,   109,   314,  -332,   315,   316,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,     2,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,     0,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,     0,     0,   317,  -332,  -332,     0,     0,   318,   319,
     320,  -332,  -332,     0,     0,  -332,  -332,  -332,  -332,  -332,
    -332,   321,   322,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,     0,  -332,     0,   323,  -332,  -332,     0,   324,
     325,   326,   327,   328,   329,   330,   331,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,   332,   333,   334,  -332,  -332,
     335,  -332,   336,  -332,  -332,  -332,  -332,   758,  -332,  -332,
     337,   338,  -332,   339,   340,   341,   342,  -332,  -332,  -332,
    -332,  -332,  -544,   312,     0,     1,   313,   109,   314,  -544,
     315,   316,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
       2,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,     0,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,     0,     0,   317,
    -544,  -544,     0,     0,   318,   319,   320,  -544,  -544,     0,
       0,  -544,  -544,  -544,  -544,  -544,  -544,   321,   322,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,     0,  -544,
       0,   323,  -544,  -544,     0,   324,   325,   326,   327,   328,
     329,   330,   331,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,   332,   333,   334,  -544,  -544,   335,  -544,   336,  -544,
    -544,  -544,  -544,   758,  -544,  -544,   337,   338,  -544,   339,
     340,   341,   342,  -544,  -544,  -544,  -544,  -544,  -552,   312,
       0,     1,   313,   109,   314,  -552,   315,   316,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,     2,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,     0,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,     0,     0,   317,  -552,  -552,     0,     0,
     318,   319,   320,  -552,  -552,     0,     0,  -552,  -552,  -552,
    -552,  -552,  -552,   321,   322,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,     0,  -552,     0,   323,  -552,  -552,
       0,   324,   325,   326,   327,   328,   329,   330,   331,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,   332,   333,   334,
    -552,  -552,   335,  -552,   336,  -552,  -552,  -552,  -552,   758,
    -552,  -552,   337,   338,  -552,   339,   340,   341,   342,  -552,
    -552,  -552,  -552,  -552,  -545,   312,     0,     1,   313,   109,
     314,  -545,   315,   316,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,     2,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,
       0,   317,  -545,  -545,     0,     0,   318,   319,   320,  -545,
    -545,     0,     0,  -545,  -545,  -545,  -545,  -545,  -545,   321,
     322,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
       0,  -545,     0,   323,  -545,  -545,     0,   324,   325,   326,
     327,   328,   329,   330,   331,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,   332,   333,   334,  -545,  -545,   335,  -545,
     336,  -545,  -545,  -545,  -545,   758,  -545,  -545,   337,   338,
    -545,   339,   340,   341,   342,  -545,  -545,  -545,  -545,  -545,
    -553,   312,     0,     1,   313,   109,   314,  -553,   315,   316,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,     2,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,     0,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,     0,     0,   317,  -553,  -553,
       0,     0,   318,   319,   320,  -553,  -553,     0,     0,  -553,
    -553,  -553,  -553,  -553,  -553,   321,   322,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,     0,  -553,     0,   323,
    -553,  -553,     0,   324,   325,   326,   327,   328,   329,   330,
     331,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,   332,
     333,   334,  -553,  -553,   335,  -553,   336,  -553,  -553,  -553,
    -553,   758,  -553,  -553,   337,   338,  -553,   339,   340,   341,
     342,  -553,  -553,  -553,  -553,  -553,  -546,   312,     0,     1,
     313,   109,   314,  -546,   315,   316,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,     2,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,     0,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,     0,     0,   317,  -546,  -546,     0,     0,   318,   319,
     320,  -546,  -546,     0,     0,  -546,  -546,  -546,  -546,  -546,
    -546,   321,   322,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,     0,  -546,     0,   323,  -546,  -546,     0,   324,
     325,   326,   327,   328,   329,   330,   331,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,   332,   333,   334,  -546,  -546,
     335,  -546,   336,  -546,  -546,  -546,  -546,   758,  -546,  -546,
     337,   338,  -546,   339,   340,   341,   342,  -546,  -546,  -546,
    -546,  -546,  -554,   312,     0,     1,   313,   109,   314,  -554,
     315,   316,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
       2,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,     0,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,     0,   317,
    -554,  -554,     0,     0,   318,   319,   320,  -554,  -554,     0,
       0,  -554,  -554,  -554,  -554,  -554,  -554,   321,   322,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,  -554,
       0,   323,  -554,  -554,     0,   324,   325,   326,   327,   328,
     329,   330,   331,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,   332,   333,   334,  -554,  -554,   335,  -554,   336,  -554,
    -554,  -554,  -554,   758,  -554,  -554,   337,   338,  -554,   339,
     340,   341,   342,  -554,  -554,  -554,  -554,  -554,  -547,   312,
       0,     1,   313,   109,   314,  -547,   315,   316,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,     2,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,     0,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,     0,     0,   317,  -547,  -547,     0,     0,
     318,   319,   320,  -547,  -547,     0,     0,  -547,  -547,  -547,
    -547,  -547,  -547,   321,   322,  -547,  -547,  -547,  -547,  -547,
    -547,  -547,  -547,  -547,     0,  -547,     0,   323,  -547,  -547,
       0,   324,   325,   326,   327,   328,   329,   330,   331,  -547,
    -547,  -547,  -547,  -547,  -547,  -547,  -547,   332,   333,   334,
    -547,  -547,   335,  -547,   336,  -547,  -547,  -547,  -547,   758,
    -547,  -547,   337,   338,  -547,   339,   340,   341,   342,  -547,
    -547,  -547,  -547,  -547,  -555,   312,     0,     1,   313,   109,
     314,  -555,   315,   316,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,     2,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,     0,  -555,  -555,
    -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,     0,
       0,   317,  -555,  -555,     0,     0,   318,   319,   320,  -555,
    -555,     0,     0,  -555,  -555,  -555,  -555,  -555,  -555,   321,
     322,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,  -555,
       0,  -555,     0,   323,  -555,  -555,     0,   324,   325,   326,
     327,   328,   329,   330,   331,  -555,  -555,  -555,  -555,  -555,
    -555,  -555,  -555,   332,   333,   334,  -555,  -555,   335,  -555,
     336,  -555,  -555,  -555,  -555,   758,  -555,  -555,   337,   338,
    -555,   339,   340,   341,   342,  -555,  -555,  -555,  -555,  -555,
    -340,  2049,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,     0,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,     0,     0,  -340,  -340,  -340,
       0,     0,  -340,  -340,  -340,  -340,  -340,     0,     0,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,     0,  -340,     0,  -340,
    -340,  -340,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -339,  2050,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,     0,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,     0,     0,  -339,  -339,  -339,     0,     0,  -339,  -339,
    -339,  -339,  -339,     0,     0,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,     0,  -339,     0,  -339,  -339,  -339,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -345,   770,     0,  -345,  -345,  -345,  -345,   771,
     772,   773,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,  -345,
    -345,  -345,     0,     0,  -345,  -345,  -345,  -345,  -345,     0,
       0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,
       0,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,   774,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  1169,  -345,  -345,   776,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -451,  1171,
       0,  -451,  -451,  -451,  -451,     0,  -451,  -451,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,     0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,     0,     0,  -451,  -451,  -451,     0,     0,
    -451,  -451,  -451,  -451,  -451,     0,     0,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,     0,  -451,     0,  -451,  -451,  -451,
       0,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
    -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,  -451,
       0,     0,  -451,  -451,  -451,  -451,     0,  -451,  -451,  -451,
    1172,  -451,  -451,  -451,     0,  -451,  -451,  -451,  -451, -1105,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105,     0, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105,     0,     0,   317, -1105, -1105,     0,
       0,   318,   319,   320, -1105, -1105,     0,     0, -1105, -1105,
   -1105, -1105, -1105, -1105,   321,   322, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105,     0, -1105,     0,   323, -1105,
   -1105,     0,   324,   325,   326,   327,   328,   329,   330,   331,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,   332,   333,
     334,     0,     0,   335,  1178,   336, -1105,     0,  1179, -1105,
   -1105,     0, -1105,   337,   338,     0,   339,   340,   341,   342,
   -1249,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1249,
   -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249,
   -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249,
   -1249, -1249, -1249,     0, -1249, -1249, -1249, -1249, -1249, -1249,
   -1249, -1249, -1249, -1249, -1249,     0,     0,   317, -1249, -1249,
       0,     0,   318,   319,   320, -1249, -1249,     0,     0, -1249,
   -1249, -1249, -1249, -1249, -1249,   321,   322, -1249, -1249, -1249,
   -1249, -1249, -1249, -1249, -1249, -1249,     0, -1249,     0,   323,
   -1249, -1249,     0,   324,   325,   326,   327,   328,   329,   330,
     331, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249,   332,
     333,   334,     0,     0,   335,  1178,   336,  1645,     0,  1179,
   -1249, -1249,     0, -1249,   337,   338,     0,   339,   340,   341,
     342, -1207,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207,
   -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207,
   -1207, -1207, -1207, -1207,     0, -1207, -1207, -1207, -1207, -1207,
   -1207, -1207, -1207, -1207, -1207, -1207,     0,     0,   317, -1207,
   -1207,     0,     0,   318,   319,   320, -1207, -1207,     0,     0,
   -1207, -1207, -1207, -1207, -1207, -1207,   321,   322, -1207, -1207,
   -1207, -1207, -1207, -1207, -1207, -1207, -1207,     0, -1207,     0,
     323, -1207, -1207,     0,   324,   325,   326,   327,   328,   329,
     330,   331, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207,
     332,   333,   334,     0,     0,   335,  1858,   336, -1207,     0,
    1179, -1207, -1207,     0, -1207,   337,   338,     0,   339,   340,
     341,   342, -1238,   312,     0,     1,   313,   109,   314,     0,
     315,   316,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238,     0,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,     0,     0,   317,
   -1238, -1238,     0,     0,   318,   319,   320, -1238, -1238,     0,
       0, -1238,    34, -1238, -1238, -1238, -1238,   321,   322,  1143,
   -1238,   654,   655,   656, -1238, -1238, -1238, -1238,     0, -1238,
       0,   323, -1238, -1238,     0,   324,   325,   326,   327,   328,
     329,   330,   331,    45,    46, -1238, -1238, -1238, -1238, -1238,
   -1238,   332,   333,   334,     0,     0,   335,  1178,   336,   657,
       0,  1179, -1238,   264,     0,   658,   337,   338,     0,   339,
     340,   341,   342,  -578,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,     0,
     317,  -578,  -578,     0,     0,   318,   319,   320,  -578,  -578,
       0,     0,  -578,  -578,  -578,  -578,  -578,  -578,   321,   322,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,
    -578,     0,   323,  -578,  -578,     0,   324,   325,   326,   327,
     328,   329,   330,   331,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,   332,   333,   334,     0,     0,   335,  -578,   336,
    1173,     0,  1174,  -578,  -578,     0,  -578,   337,   338,     0,
     339,   340,   341,   342, -1230,   312,     0,     1,   313,   109,
     314,     0,   315,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1230, -1230, -1230, -1230, -1230, -1230, -1230,
   -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230,
   -1230, -1230, -1230, -1230, -1230, -1230, -1230,     0, -1230, -1230,
   -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230,     0,
       0,   317, -1230, -1230,     0,     0,   318,   319,   320, -1230,
   -1230,     0,     0, -1230, -1230, -1230, -1230, -1230, -1230,   321,
     322, -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230,
       0, -1230,     0,   323, -1230, -1230,     0,   324,   325,   326,
     327,   328,   329,   330,   331, -1230, -1230, -1230, -1230, -1230,
   -1230, -1230, -1230,   332,   333,   334,     0,     0,   335,  2098,
     336, -1230,     0,  1174, -1230, -1230,     0, -1230,   337,   338,
       0,   339,   340,   341,   342, -1231,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1231, -1231, -1231, -1231, -1231, -1231,
   -1231, -1231, -1231, -1231, -1231, -1231, -1231, -1231, -1231, -1231,
   -1231, -1231, -1231, -1231, -1231, -1231, -1231, -1231,     0, -1231,
   -1231, -1231, -1231, -1231, -1231, -1231, -1231, -1231, -1231, -1231,
       0,     0,   317, -1231, -1231,     0,     0,   318,   319,   320,
   -1231, -1231,     0,     0, -1231, -1231, -1231, -1231, -1231, -1231,
     321,   322, -1231, -1231, -1231, -1231, -1231, -1231, -1231, -1231,
   -1231,     0, -1231,     0,   323, -1231, -1231,     0,   324,   325,
     326,   327,   328,   329,   330,   331, -1231, -1231, -1231, -1231,
   -1231, -1231, -1231, -1231,   332,   333,   334,     0,     0,   335,
    1178,   336,  2099,     0,  1179, -1231, -1231,     0, -1231,   337,
     338,     0,   339,   340,   341,   342, -1225,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1225, -1225, -1225, -1225, -1225,
   -1225, -1225, -1225, -1225, -1225, -1225, -1225, -1225, -1225, -1225,
   -1225, -1225, -1225, -1225, -1225, -1225, -1225, -1225, -1225,     0,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,     0,     0,   317, -1225, -1225,     0,     0,   318,   319,
     320, -1225, -1225,     0,     0, -1225,    34, -1225, -1225, -1225,
   -1225,   321,   322,  1143, -1225,   654,   655,   656, -1225, -1225,
   -1225, -1225,     0, -1225,     0,   323, -1225, -1225,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46, -1225,
   -1225, -1225, -1225, -1225, -1225,   332,   333,   334,     0,     0,
     335,  1178,   336,   657,     0,  1179, -1225,   264,     0,   658,
     337,   338,     0,   339,   340,   341,   342, -1173,   632,     0,
   -1173, -1173, -1173, -1173,     0, -1173, -1173,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1173, -1173, -1173, -1173, -1173,
   -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173,
   -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173,
       0, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173,
   -1173, -1173,     0,     0, -1173, -1173, -1173,     0,     0, -1173,
   -1173, -1173, -1173, -1173,     0,     0, -1173, -1173, -1173, -1173,
   -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173,
   -1173, -1173, -1173,     0, -1173,     0, -1173, -1173, -1173,     0,
   -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173,
   -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173,     0,
       0, -1173,     0, -1173,   633,     0, -1173, -1173, -1173,     0,
   -1173, -1173, -1173,     0, -1173, -1173, -1173, -1173, -1196,   312,
       0,     1,   313,   109,   314,     0,   315,   316,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,    20,    21,   254,   255,    24,    25,
      26,     0,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,     0,     0,   317,   256, -1196,     0,     0,
     318,   319,   320,    30,    31,     0,     0, -1196,    34, -1196,
   -1196, -1196, -1196,   321,   652,   653,   258,   654,   655,   656,
   -1196, -1196, -1196, -1196,     0, -1196,     0,   323, -1196,   259,
       0,   324,   325,   326,   327,   328,   329,   330,   331,    45,
      46,   260,   261,   262,   263,   213,   214,   332,   333,   334,
       0,     0,   335,     0,   336,   657,     0, -1196, -1196,   264,
       0,   658,   337,   338,     0,   339,   340,   341,   342, -1174,
     632,     0, -1174, -1174, -1174, -1174,     0, -1174, -1174,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174,     0, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174,     0,     0, -1174, -1174, -1174,     0,
       0, -1174, -1174, -1174, -1174, -1174,     0,     0, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174,     0, -1174,     0, -1174, -1174,
   -1174,     0, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174,     0,     0, -1174,     0, -1174,   633,     0, -1174, -1174,
   -1174,     0, -1174, -1174, -1174,     0, -1174, -1174, -1174, -1174,
   -1235,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235,     0,  1135,  1136,  1137,   644,  1138,  1139,
    1140,  1141,   649,   650,  1142,     0,     0,   317, -1235, -1235,
       0,     0,   318,   319,   320, -1235, -1235,     0,     0, -1235,
      34, -1235, -1235, -1235, -1235,   321,   322,  1143, -1235,   654,
     655,   656, -1235, -1235, -1235, -1235,     0, -1235,     0,   323,
   -1235, -1235,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46, -1235, -1235, -1235, -1235, -1235, -1235,   332,
     333,   334,     0,     0,   335,     0,   336,   657,     0, -1235,
   -1235,   264,     0,   658,   337,   338,     0,   339,   340,   341,
     342, -1251,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251,
   -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251,
   -1251, -1251, -1251, -1251,     0, -1251, -1251, -1251, -1251, -1251,
   -1251, -1251, -1251, -1251, -1251, -1251,     0,     0,   317, -1251,
   -1251,     0,     0,   318,   319,   320, -1251, -1251,     0,     0,
   -1251, -1251, -1251, -1251, -1251, -1251,   321,   322, -1251, -1251,
   -1251, -1251, -1251, -1251, -1251, -1251, -1251,     0, -1251,     0,
     323, -1251, -1251,     0,   324,   325,   326,   327,   328,   329,
     330,   331, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251,
     332,   333,   334,     0,     0,   335,     0,   336,  1154,     0,
   -1251, -1251,   758,     0, -1251,   337,   338,     0,   339,   340,
     341,   342, -1186,  1181,     0,     1,   313,   109,   314,     0,
     315,   316,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,    20,    21,
     254,   255,    24,    25,    26,     0,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,     0,     0,   317,
     256, -1186,     0,     0,   318,   319,   320,    30,    31,     0,
       0, -1186,    34, -1186, -1186, -1186, -1186,   321,   652,   653,
     258,   654,   655,   656, -1186, -1186, -1186, -1186,     0, -1186,
       0,   323, -1186,   259,     0,   324,   325,   326,   327,   328,
     329,   330,   331,    45,    46,   260,   261,   262,   263,   213,
     214,   332,   333,   334,     0,     0,   335,     0,   336,   657,
       0, -1186, -1186,   264,     0,   658,   337,   338,     0,   339,
     340,   341,   342, -1190,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,     0,     0,
     317,   256, -1190,     0,     0,   318,   319,   320,    30,    31,
       0,     0, -1190,    34, -1190, -1190, -1190, -1190,   321,   652,
     653,   258,   654,   655,   656, -1190, -1190, -1190, -1190,     0,
   -1190,     0,   323, -1190,   259,     0,   324,   325,   326,   327,
     328,   329,   330,   331,    45,    46,   260,   261,   262,   263,
     213,   214,   332,   333,   334,     0,     0,   335,     0,   336,
     657,     0, -1190, -1190,   264,     0,   658,   337,   338,     0,
     339,   340,   341,   342, -1185,   312,     0,     1,   313,   109,
     314,     0,   315,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
      20,    21,   254,   255,    24,    25,    26,     0,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,     0,
       0,   317,   256, -1185,     0,     0,   318,   319,   320,    30,
      31,     0,     0, -1185,    34, -1185, -1185, -1185, -1185,   321,
     652,   653,   258,   654,   655,   656, -1185, -1185, -1185, -1185,
       0, -1185,     0,   323, -1185,   259,     0,   324,   325,   326,
     327,   328,   329,   330,   331,    45,    46,   260,   261,   262,
     263,   213,   214,   332,   333,   334,     0,     0,   335,     0,
     336,   657,     0, -1185, -1185,   264,     0,   658,   337,   338,
       0,   339,   340,   341,   342, -1189,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   207,   208,   209,   210,   211,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    20,    21,   254,   255,    24,    25,    26,     0,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
       0,     0,   317,   256, -1189,     0,     0,   318,   319,   320,
      30,    31,     0,     0, -1189,    34, -1189, -1189, -1189, -1189,
     321,   652,   653,   258,   654,   655,   656, -1189, -1189, -1189,
   -1189,     0, -1189,     0,   323, -1189,   259,     0,   324,   325,
     326,   327,   328,   329,   330,   331,    45,    46,   260,   261,
     262,   263,   213,   214,   332,   333,   334,     0,     0,   335,
       0,   336,   657,     0, -1189, -1189,   264,     0,   658,   337,
     338,     0,   339,   340,   341,   342, -1092,  1194,     0, -1092,
   -1092, -1092, -1092,     0, -1092, -1092,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1092, -1092, -1092, -1092, -1092, -1092,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092,     0,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092,
   -1092,     0,     0, -1092, -1092, -1092,     0,     0, -1092, -1092,
   -1092, -1092, -1092,     0,     0, -1092, -1092, -1092, -1092, -1092,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092,
   -1092, -1092,     0, -1092,     0, -1092, -1092, -1092,     0, -1092,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092,     0,     0,
   -1092,     0, -1092, -1092,     0, -1092, -1092, -1092,     0, -1092,
   -1092, -1092,     0, -1092, -1092, -1092, -1092, -1094,  1195,     0,
   -1094, -1094, -1094, -1094,     0, -1094, -1094,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
       0, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094,     0,     0, -1094, -1094, -1094,     0,     0, -1094,
   -1094, -1094, -1094, -1094,     0,     0, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094,     0, -1094,     0, -1094, -1094, -1094,     0,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,     0,
       0, -1094,     0, -1094, -1094,     0, -1094, -1094, -1094,     0,
   -1094, -1094, -1094,     0, -1094, -1094, -1094, -1094, -1140,   312,
       0,     1,   313,   109,   314,     0,   315,   316,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,    20,    21,   254,   255,    24,    25,
      26,     0,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,     0,     0,   317,   256, -1140,     0,     0,
     318,   319,   320,    30,    31,     0,     0, -1140,    34, -1140,
   -1140, -1140, -1140,   321,   652,   653,   258,   654,   655,   656,
   -1140, -1140, -1140, -1140,     0, -1140,     0,   323, -1140,   259,
       0,   324,   325,   326,   327,   328,   329,   330,   331,    45,
      46,   260,   261,   262,   263,   213,   214,   332,   333,   334,
       0,     0,   335,     0,   336,   657,     0, -1140, -1140,   264,
       0,   658,   337,   338,     0,   339,   340,   341,   342, -1142,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   207,   208,
     209,   210,   211,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    20,    21,   254,   255,    24,
      25,    26,     0,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,     0,     0,   317,   256, -1142,     0,
       0,   318,   319,   320,    30,    31,     0,     0, -1142,    34,
   -1142, -1142, -1142, -1142,   321,   652,   653,   258,   654,   655,
     656, -1142, -1142, -1142, -1142,     0, -1142,     0,   323, -1142,
     259,     0,   324,   325,   326,   327,   328,   329,   330,   331,
      45,    46,   260,   261,   262,   263,   213,   214,   332,   333,
     334,     0,     0,   335,     0,   336,   657,     0, -1142, -1142,
     264,     0,   658,   337,   338,     0,   339,   340,   341,   342,
   -1187,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,     0,     0,   317,   256, -1187,
       0,     0,   318,   319,   320,    30,    31,     0,     0, -1187,
      34, -1187, -1187, -1187, -1187,   321,   652,   653,   258,   654,
     655,   656, -1187, -1187, -1187, -1187,     0, -1187,     0,   323,
   -1187,   259,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,   260,   261,   262,   263,   213,   214,   332,
     333,   334,     0,     0,   335,     0,   336,   657,     0, -1187,
   -1187,   264,     0,   658,   337,   338,     0,   339,   340,   341,
     342, -1191,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     207,   208,   209,   210,   211,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,    20,    21,   254,
     255,    24,    25,    26,     0,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,     0,     0,   317,   256,
   -1191,     0,     0,   318,   319,   320,    30,    31,     0,     0,
   -1191,    34, -1191, -1191, -1191, -1191,   321,   652,   653,   258,
     654,   655,   656, -1191, -1191, -1191, -1191,     0, -1191,     0,
     323, -1191,   259,     0,   324,   325,   326,   327,   328,   329,
     330,   331,    45,    46,   260,   261,   262,   263,   213,   214,
     332,   333,   334,     0,     0,   335,     0,   336,   657,     0,
   -1191, -1191,   264,     0,   658,   337,   338,     0,   339,   340,
     341,   342, -1188,   312,     0,     1,   313,   109,   314,     0,
     315,   316,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,    20,    21,
     254,   255,    24,    25,    26,     0,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,     0,     0,   317,
     256, -1188,     0,     0,   318,   319,   320,    30,    31,     0,
       0, -1188,    34, -1188, -1188, -1188, -1188,   321,   652,   653,
     258,   654,   655,   656, -1188, -1188, -1188, -1188,     0, -1188,
       0,   323, -1188,   259,     0,   324,   325,   326,   327,   328,
     329,   330,   331,    45,    46,   260,   261,   262,   263,   213,
     214,   332,   333,   334,     0,     0,   335,     0,   336,   657,
       0, -1188, -1188,   264,     0,   658,   337,   338,     0,   339,
     340,   341,   342, -1192,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,     0,     0,
     317,   256, -1192,     0,     0,   318,   319,   320,    30,    31,
       0,     0, -1192,    34, -1192, -1192, -1192, -1192,   321,   652,
     653,   258,   654,   655,   656, -1192, -1192, -1192, -1192,     0,
   -1192,     0,   323, -1192,   259,     0,   324,   325,   326,   327,
     328,   329,   330,   331,    45,    46,   260,   261,   262,   263,
     213,   214,   332,   333,   334,     0,     0,   335,     0,   336,
     657,     0, -1192, -1192,   264,     0,   658,   337,   338,     0,
     339,   340,   341,   342, -1183,   632,     0, -1183, -1183, -1183,
   -1183,     0, -1183, -1183,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183,     0, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,     0,
       0, -1183, -1183, -1183,     0,     0, -1183, -1183, -1183, -1183,
   -1183,     0,     0, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
       0, -1183,     0, -1183, -1183, -1183,     0, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183,     0,     0, -1183,     0,
   -1183,   633,     0, -1183, -1183, -1183,     0, -1183, -1183, -1183,
       0, -1183, -1183, -1183, -1183, -1184,   632,     0, -1184, -1184,
   -1184, -1184,     0, -1184, -1184,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,     0, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
       0,     0, -1184, -1184, -1184,     0,     0, -1184, -1184, -1184,
   -1184, -1184,     0,     0, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184,     0, -1184,     0, -1184, -1184, -1184,     0, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184,     0,     0, -1184,
       0, -1184,   633,     0, -1184, -1184, -1184,     0, -1184, -1184,
   -1184,     0, -1184, -1184, -1184, -1184, -1017,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,     0,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017,     0,     0,   317, -1017, -1017,     0,     0,   318,   319,
     320, -1017, -1017,     0,     0, -1017, -1017, -1017, -1017, -1017,
   -1017,   321,   322, -1017, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017,     0, -1017,     0,   323, -1017, -1017,     0,   324,
     325,   326,   327,   328,   329,   330,   331, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017,   332,   333,   334,     0,     0,
     335,     0,   336, -1017,     0,  1827,  1828,  1034,     0, -1017,
     337,   338,     0,   339,   340,   341,   342, -1146,   632,     0,
   -1146, -1146, -1146, -1146,     0, -1146, -1146,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
       0, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146,     0,     0, -1146, -1146, -1146,     0,     0, -1146,
   -1146, -1146, -1146, -1146,     0,     0, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146,     0, -1146,     0, -1146, -1146, -1146,     0,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,
   -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146, -1146,     0,
       0, -1146,     0, -1146,   633,     0, -1146, -1146, -1146,     0,
   -1146, -1146, -1146,     0, -1146, -1146, -1146, -1146, -1147,   632,
       0, -1147, -1147, -1147, -1147,     0, -1147, -1147,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147,     0, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147,     0,     0, -1147, -1147, -1147,     0,     0,
   -1147, -1147, -1147, -1147, -1147,     0,     0, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147,     0, -1147,     0, -1147, -1147, -1147,
       0, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
   -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147, -1147,
       0,     0, -1147,     0, -1147,   633,     0, -1147, -1147, -1147,
       0, -1147, -1147, -1147,     0, -1147, -1147, -1147, -1147, -1143,
     632,     0, -1143, -1143, -1143, -1143,     0, -1143, -1143,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143,     0, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143,     0,     0, -1143, -1143, -1143,     0,
       0, -1143, -1143, -1143, -1143, -1143,     0,     0, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143,     0, -1143,     0, -1143, -1143,
   -1143,     0, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143,     0,     0, -1143,     0, -1143,   633,     0, -1143, -1143,
   -1143,     0, -1143, -1143, -1143,     0, -1143, -1143, -1143, -1143,
   -1019,   312,     0,     1,   313,   109,   314,     0,   315,   316,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019,     0, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019,     0,     0,   317, -1019, -1019,
       0,     0,   318,   319,   320, -1019, -1019,     0,     0, -1019,
   -1019, -1019, -1019, -1019, -1019,   321,   322, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019,     0, -1019,     0,   323,
   -1019, -1019,     0,   324,   325,   326,   327,   328,   329,   330,
     331, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,   332,
     333,   334,     0,     0,   335,     0,   336, -1019,     0, -1019,
    2009,  1034,     0, -1019,   337,   338,     0,   339,   340,   341,
     342, -1011,  2012,     0, -1011, -1011, -1011, -1011,     0, -1011,
   -1011,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1011,
   -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011, -1011, -1011,     0, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011, -1011, -1011, -1011, -1011,     0,     0, -1011, -1011,
   -1011,     0,     0, -1011, -1011, -1011, -1011, -1011,     0,     0,
   -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011, -1011, -1011, -1011, -1011, -1011,     0, -1011,     0,
   -1011, -1011, -1011,     0, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011, -1011,
   -1011, -1011, -1011,     0,     0, -1011,     0, -1011, -1011,     0,
   -1011, -1011, -1011,     0, -1011, -1011, -1011,     0, -1011, -1011,
   -1011, -1011, -1144,   632,     0, -1144, -1144, -1144, -1144,     0,
   -1144, -1144,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144,     0, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144,     0,     0, -1144,
   -1144, -1144,     0,     0, -1144, -1144, -1144, -1144, -1144,     0,
       0, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,     0, -1144,
       0, -1144, -1144, -1144,     0, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144,     0,     0, -1144,     0, -1144,   633,
       0, -1144, -1144, -1144,     0, -1144, -1144, -1144,     0, -1144,
   -1144, -1144, -1144, -1145,   632,     0, -1145, -1145, -1145, -1145,
       0, -1145, -1145,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145,     0, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,     0,     0,
   -1145, -1145, -1145,     0,     0, -1145, -1145, -1145, -1145, -1145,
       0,     0, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,     0,
   -1145,     0, -1145, -1145, -1145,     0, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145,     0,     0, -1145,     0, -1145,
     633,     0, -1145, -1145, -1145,     0, -1145, -1145, -1145,     0,
   -1145, -1145, -1145, -1145, -1232,   312,     0,     1,   313,   109,
     314,     0,   315,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1232, -1232, -1232, -1232, -1232, -1232, -1232,
   -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232,
   -1232, -1232, -1232, -1232, -1232, -1232, -1232,     0, -1232, -1232,
   -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232,     0,
       0,   317, -1232, -1232,     0,     0,   318,   319,   320, -1232,
   -1232,     0,     0, -1232, -1232, -1232, -1232, -1232, -1232,   321,
     322, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232, -1232,
       0, -1232,     0,   323, -1232, -1232,     0,   324,   325,   326,
     327,   328,   329,   330,   331, -1232, -1232, -1232, -1232, -1232,
   -1232, -1232, -1232,   332,   333,   334,     0,     0,   335,     0,
     336, -1232,     0, -1232, -1232, -1232,     0, -1232,   337,   338,
       0,   339,   340,   341,   342, -1012,  2090,     0, -1012, -1012,
   -1012, -1012,     0, -1012, -1012,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1012, -1012, -1012, -1012, -1012, -1012, -1012,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012,     0, -1012,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012,
       0,     0, -1012, -1012, -1012,     0,     0, -1012, -1012, -1012,
   -1012, -1012,     0,     0, -1012, -1012, -1012, -1012, -1012, -1012,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012,
   -1012,     0, -1012,     0, -1012, -1012, -1012,     0, -1012, -1012,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012,     0,     0, -1012,
       0, -1012, -1012,     0, -1012, -1012, -1012,     0, -1012, -1012,
   -1012,     0, -1012, -1012, -1012, -1012,  -915,   596,     0,  -915,
    -915,  -915,  -915,     0,  -915,  -915,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -915,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,     0,
       0,  -915,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -915,  -915,  -915,     0,     0,  -915,  -915,
    -915,  -915,  -915,     0,     0,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,     0,     0,  -915,  -915,
    -915,  -915,     0,  -915,     0,  -915,  -915,  -915,     0,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,     0,     0,
    -915,   862,  -915,  -915,     0,   598,  -915,  -915,     0,     0,
    -915,  -915,     0,  -915,  -915,  -915,  -915,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,   653,   258,   654,   655,   656,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,   657,     0,     0,     0,   264,     0,   658,
     337,   338,     0,   339,   340,   341,   342,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
    1135,  1136,  1137,   644,  1138,  1139,  1140,  1141,   649,   650,
    1142,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,   653,   258,   654,   655,   656,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,   657,     0,     0,     0,   264,     0,   658,
     337,   338,     0,   339,   340,   341,   342,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1004,     0,  1005,  1006,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,  1268,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1004,     0,  1005,  -110,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,  1275,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1004,     0,  1005,   -98,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,  1279,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1004,     0,  1005,  -102,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1534,     0,  1005,   -65,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1543,     0,  1005,  1544,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,  1601,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1004,     0,  1005,   -81,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1543,     0,  1005,  -107,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1543,     0,  1005,   -97,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1543,     0,  1005,  -101,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,  1786,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1004,     0,  1005,   -88,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1543,     0,  1005,   -78,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,   256,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,   321,   652,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,   259,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,   260,
     261,   262,   263,   213,   214,   332,   333,   334,     0,     0,
     335,     0,   336,  1543,     0,  1005,   -85,   758,     0,     0,
     337,   338,     0,   339,   340,   341,   342,   312,     0,     1,
     313,   109,   314,     0,   315,   316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,     0,     0,     0,   318,   319,
     320,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,   321,   417,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   323,     0,    42,     0,   324,
     325,   326,   327,   328,   329,   330,   331,    45,    46,    47,
      48,    49,    50,   213,   214,   332,   333,   334,     0,     0,
     335,   312,   336,     1,   313,   109,   314,     0,   315,   316,
     337,   338,     0,   339,   340,   341,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   880,    29,     0,
       0,     0,   318,   319,   320,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,   321,   417,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
       0,    42,     0,   324,   325,   326,   327,   328,   329,   330,
     331,    45,    46,    47,    48,    49,    50,   213,   214,   332,
     333,   334,     0,     0,   335,   312,   336,     1,   313,   109,
     314,     0,   315,   316,   337,   338,     0,   339,   340,   341,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,     0,     0,     0,   318,   319,   320,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,   321,
     417,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   323,     0,    42,     0,   324,   325,   326,
     327,   328,   329,   330,   331,    45,    46,    47,    48,    49,
      50,     0,     0,   332,   333,   334,     0,     0,   335,   747,
     336,     0,     0,     0,     0,     0,     0,     0,   337,   338,
       0,   339,   340,   341,   342,   312,     0,     1,   313,   109,
     314,     0,   315,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1214,    29,     0,     0,     0,   318,   319,   320,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,   321,
     417,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   323,     0,    42,     0,   324,   325,   326,
     327,   328,   329,   330,   331,    45,    46,    47,    48,    49,
      50,     0,     0,   332,   333,   334,     0,     0,   335,   747,
     336,     0,     0,     0,     0,     0,     0,     0,   337,   338,
       0,   339,   340,   341,   342,   312,     0,     1,   313,   109,
     314,     0,   315,   316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,     0,     0,     0,   318,   319,   320,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,   321,
     417,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   323,     0,    42,     0,   324,   325,   326,
     327,   328,   329,   330,   331,    45,    46,    47,    48,    49,
      50,     0,     0,   332,   333,   334,     0,     0,   335,   312,
     336,     1,   313,   109,   314,   264,   315,   316,   337,   338,
       0,   339,   340,   341,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,   577,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,     0,     0,     0,
     318,   319,   320,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,   321,   417,    40,    41,     0,   312,     0,
       1,   313,   109,   314,     0,   315,   316,   323,     0,    42,
       0,   324,   325,   326,   327,   328,   329,   330,   331,    45,
      46,    47,    48,    49,    50,     2,     0,   332,   333,   903,
       0,     0,   904,   747,   336,     0,     0,     0,     0,     0,
       0,     0,   337,   338,     0,   339,   340,   341,   342,     0,
       0,  1135,  1136,  1137,   644,  1138,  1139,  1140,  1141,   649,
     650,  1142,     0,     0,   317,     0,     0,     0,     0,   318,
     319,   320,     0,     0,     0,     0,     0,    34,     0,     0,
       0,     0,   321,   322,  1143,     0,   654,   655,   656,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
     324,   325,   326,   327,   328,   329,   330,   331,    45,    46,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1178,   336,   657,     0,  1179,     0,   264,     0,
     658,   337,   338,     0,   339,   340,   341,   342,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1135,  1136,  1137,   644,  1138,  1139,  1140,  1141,   649,
     650,  1142,     0,     0,   317,     0,     0,     0,     0,   318,
     319,   320,     0,     0,     0,     0,     0,    34,     0,     0,
       0,     0,   321,   322,  1143,     0,   654,   655,   656,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
     324,   325,   326,   327,   328,   329,   330,   331,    45,    46,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,   657,     0,     0,     0,   264,     0,
     658,   337,   338,     0,   339,   340,   341,   342,  1861,     0,
       1,   313,   109,   314,     0,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1135,  1136,  1137,   644,  1138,  1139,  1140,  1141,   649,
     650,  1142,     0,     0,   317,     0,     0,     0,     0,   318,
     319,   320,     0,     0,     0,     0,     0,    34,     0,     0,
       0,     0,   321,   322,  1143,     0,   654,   655,   656,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
     324,   325,   326,   327,   328,   329,   330,   331,    45,    46,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,   657,     0,     0,     0,   264,     0,
     658,   337,   338,     0,   339,   340,   341,   342,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,     0,     0,   317,     0,     0,     0,     0,   318,
     319,   320,     0,     0,     0,     0,     0,    34,     0,     0,
       0,     0,   321,   322,  1143,     0,   654,   655,   656,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
     324,   325,   326,   327,   328,   329,   330,   331,    45,    46,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,   657,     0,     0,     0,   264,     0,
     658,   337,   338,     0,   339,   340,   341,   342,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1178,   336,     0,     0,  1750,     0,     0,     0,
    1899,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  1178,   336,     0,     0,
    1750,     0,     0,     0,  1903,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
    2032,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    1178,   336,  1882,     0,  1179,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  1178,   336,  1882,     0,  1179,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,  2088,  2089,  1034,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  2100,   336,  2101,     0,  1174,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  1178,   336,  2099,     0,
    1179,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
       0,   336,     0,     0,  2193,  2194,  1034,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,  1173,     0,  1174,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,  1284,   336,
       0,     0,     0,     0,   758,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1351,   336,     0,     0,     0,     0,   758,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,  1154,     0,
       0,     0,   758,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
    1634,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    1178,   336,     0,     0,  1179,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  1635,   336,  1636,     0,     0,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
    1644,     0,  1174,     0,     0,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1714,   336,     0,     0,  1174,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
    1174,     0,     0,     0,     0,   337,   338,  1744,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
       0,   336,     0,     0,  1747,     0,     0,     0,  1748,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,     0,     0,  1174,     0,
       0,     0,     0,   337,   338,  1754,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,  1747,     0,     0,     0,  1756,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1857,   336,     0,     0,  1174,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  1859,   336,     0,     0,
    1174,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    1860,   336,     0,     0,  1179,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  1863,   336,     0,     0,  1174,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,  1635,   336,
    1636,     0,     0,     0,     0,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,  1883,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,  1880,     0,  1174,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  1884,   336,  1636,     0,
       0,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
       0,   336,     0,     0,  1747,     0,     0,     0,  1897,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,     0,     0,  1747,     0,
       0,     0,  1901,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,  2017,   336,
       0,     0,  1174,     0,     0,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1858,   336,     0,     0,  1179,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  2024,   336,     0,     0,
    1174,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    1884,   336,  1636,     0,     0,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  2104,   336,     0,     0,  1174,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,     0,  2132,  1034,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,     0,     0,     0,  2134,  1034,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,  2137,   336,     0,     0,
    1174,     0,     0,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    2138,   336,     0,     0,  1174,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,  2167,   336,     0,     0,  1174,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,     0,  2201,  1034,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,     0,     0,     0,     0,     0,     0,
       0,   337,   338,   561,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
       0,     0,   758,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
       0,   336,     0,     0,     0,     0,     0,     0,     0,   337,
     338,   854,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,     0,     0,     0,     0,
       0,     0,     0,   337,   338,   858,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,     0,     0,  1034,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,     0,     0,     0,     0,     0,     0,
       0,   337,   338,  1075,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
       0,     0,     0,     0,  1127,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
    1478,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
     747,   336,     0,     0,     0,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,     0,     0,     0,     0,
     758,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,     0,     0,     0,     0,     0,   337,   338,  1582,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  1618,   336,     0,     0,     0,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
       0,     0,     0,     0,  1621,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
       0,   336,     0,     0,     0,     0,  1730,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,  1817,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   335,     0,   336,     0,     0,     0,     0,
    1816,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,  1820,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,     0,   336,
       0,     0,     0,     0,   758,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,  1824,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,     0,   336,     0,     0,     0,     0,   758,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
       0,     0,   758,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
    1870,   336,     0,     0,     0,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,  1930,     0,   336,     0,     0,     0,     0,
    1816,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   335,  2033,   336,
       0,     0,     0,     0,     0,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,   312,     0,     1,   313,   109,   314,     0,   315,
     316,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     2,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
       0,   335,  2095,   336,     0,     0,     0,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,   317,     0,
       0,     0,     0,   318,   319,   320,   312,     0,     1,   313,
     109,   314,     0,   315,   316,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,     0,     0,     2,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,     0,   335,     0,   336,     0,     0,
       0,     0,  2163,     0,     0,   337,   338,     0,   339,   340,
     341,   342,   317,     0,     0,     0,     0,   318,   319,   320,
     312,     0,     1,   313,   109,   314,     0,   315,   316,     0,
     321,   322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   323,     0,     0,     2,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,     0,   335,
       0,   336,     0,     0,     0,     0,     0,     0,     0,   337,
     338,     0,   339,   340,   341,   342,   317,     0,     0,     0,
       0,   318,   319,   320,   312,     0,     1,   313,   109,   314,
       0,   315,   316,     0,   321,   322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
       0,     2,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,     0,   717,     0,   336,     0,     0,     0,     0,
       0,     0,     0,   337,   338,     0,   339,   340,   341,   342,
     317,     0,     0,     0,     0,   318,   319,   320,   312,     0,
       1,   313,   109,   314,     0,   315,   316,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   323,     0,     0,     2,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,     0,   720,     0,   336,
       0,     0,     0,     0,     0,     0,     0,   337,   338,     0,
     339,   340,   341,   342,   317,     0,     0,     0,     0,   318,
     319,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
    -903,   596,     0,  -903,  -903,  -903,   332,   333,   334,     0,
       0,   743,     0,   336,     0,     0,     0,     0,     0,     0,
       0,   337,   338,     0,   339,   340,   341,   342,  -903,  -903,
    -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,
    -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,
    -903,  -903,  -903,     0,     0,  -903,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -903,  -903,  -903,
       0,     0,  -903,  -903,     0,  -903,  -903,     0,     0,  -903,
    -903,  -903,  -903,  -903,  -903,     0,  -903,  -903,  -903,  -903,
       0,     0,  -903,  -903,  -903,  -903,     0,  -903,     0,  -903,
    -903,  -903,     0,  -903,  -903,  -903,  -903,  -903,  -903,  -903,
       0,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,  -903,
       0,  -903,     0,     0,  -903,   597,  -903,  -903,     0,   598,
    -903,     0,     0,     0,  -903,  -903,  -189,   921,     0,  -189,
    -189,  -189,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,
       0,  -189,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -189,  -189,  -189,     0,     0,  -189,  -189,
       0,  -189,  -189,     0,     0,  -189,  -189,  -189,  -189,  -189,
    -189,     0,  -189,  -189,  -189,  -189,     0,     0,  -189,  -189,
    -189,  -189,     0,  -189,     0,  -189,  -189,  -189,     0,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,     0,     0,
    -189,     0,  -189,   922,     0,   923,  -189,     0,     0,     0,
    -189,  -189,  -253,   935,     0,     1,   313,   109,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,  -253,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
    -251,   938,  -253,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,  -251,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,  -254,   935,
    -251,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,  -254,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,  -252,   938,  -254,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,  -252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   434,  -252,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   500,   450,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   522,   501,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   527,
     523,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   531,   528,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   935,   532,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   938,  -758,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   935,  -759,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   938,
    -755,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   935,  -756,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   938,  -761,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,  1057,  -762,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,  1061,  1058,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   312,
    1062,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   935,  -653,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   938,  -738,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   935,  -739,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   938,  -741,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,  1564,
    -742,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   935,  1565,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   938,  -648,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   935,  -649,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   938,  -744,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   312,
    -745,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   312,  -652,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   312,  -650,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   312,  -628,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   935,  -627,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   938,
    -641,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   312,  -642,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   935,  -651,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   938,  -637,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   935,  -638,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   938,
    -625,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,     0,   935,  -626,     1,
     313,   109,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,    29,   435,     0,     0,   318,   319,
       0,    30,    31,     0,     0,   436,    34,   437,   438,    37,
      38,     0,   417,    40,    41,   439,     0,     0,   440,   441,
     442,   443,     0,   444,     0,   445,   446,    42,     0,   324,
     325,   326,   327,   328,   329,   330,     0,    45,    46,    47,
      48,    49,    50,   213,   214,   332,     0,    53,     0,     0,
     447,     0,   448,   449,     0,   938,  -620,     1,   313,   109,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,    29,   435,     0,     0,   318,   319,     0,    30,
      31,     0,     0,   436,    34,   437,   438,    37,    38,     0,
     417,    40,    41,   439,     0,     0,   440,   441,   442,   443,
       0,   444,     0,   445,   446,    42,     0,   324,   325,   326,
     327,   328,   329,   330,     0,    45,    46,    47,    48,    49,
      50,   213,   214,   332,     0,    53,     0,     0,   447,     0,
     448,   449,     0,   935,  -621,     1,   313,   109,   337,   338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   317,
      29,   435,     0,     0,   318,   319,     0,    30,    31,     0,
       0,   436,    34,   437,   438,    37,    38,     0,   417,    40,
      41,   439,     0,     0,   440,   441,   442,   443,     0,   444,
       0,   445,   446,    42,     0,   324,   325,   326,   327,   328,
     329,   330,     0,    45,    46,    47,    48,    49,    50,   213,
     214,   332,     0,    53,     0,     0,   447,     0,   448,   449,
       0,   938,  -639,     1,   313,   109,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   317,    29,   435,
       0,     0,   318,   319,     0,    30,    31,     0,     0,   436,
      34,   437,   438,    37,    38,     0,   417,    40,    41,   439,
       0,     0,   440,   441,   442,   443,     0,   444,     0,   445,
     446,    42,     0,   324,   325,   326,   327,   328,   329,   330,
       0,    45,    46,    47,    48,    49,    50,   213,   214,   332,
       0,    53,     0,     0,   447,     0,   448,   449,     0,   434,
    -640,     1,   313,   109,   337,   338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   317,    29,   435,     0,     0,
     318,   319,     0,    30,    31,     0,     0,   436,    34,   437,
     438,    37,    38,     0,   417,    40,    41,   439,     0,     0,
     440,   441,   442,   443,     0,   444,     0,   445,   446,    42,
       0,   324,   325,   326,   327,   328,   329,   330,     0,    45,
      46,    47,    48,    49,    50,   213,   214,   332,     0,    53,
       0,     0,   447,     0,   448,   449,   500,     0,     1,   313,
     109,     0,   337,   338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   207,   208,   209,   210,   211,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   317,    29,   435,     0,     0,   318,   319,     0,
      30,    31,     0,     0,   436,    34,   437,   438,    37,    38,
       0,   417,    40,    41,   439,     0,     0,   440,   441,   442,
     443,     0,   444,     0,   445,   446,    42,     0,   324,   325,
     326,   327,   328,   329,   330,     0,    45,    46,    47,    48,
      49,    50,   213,   214,   332,   206,    53,     1,     0,   447,
       0,   448,   449,     0,     0,     0,     0,     0,     0,   337,
     338,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,   577,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   212,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   213,   214,     0,   206,    53,     1,     0,   578,  1066,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   207,   208,   209,   210,   211,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     212,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     213,   214,     1,     0,    53,     0,     0,   876,  1066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   579,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   207,   208,
     209,   210,   211,     8,     9,    10,   577,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,   213,   214,     1,     0,
      53,     0,     0,   578,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   579,     0,   580,     0,     0,     0,
       0,     0,     0,     2,   207,   208,   209,   210,   211,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   213,   214,     1,     0,    53,     0,     0,   876,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     579,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     207,   208,   209,   210,   211,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,    20,    21,   254,
     255,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,     0,   257,    40,   258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   259,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,   260,   261,   262,   263,   213,   214,
       1,     0,    53,     0,     0,   876,     0,     0,     0,     0,
       0,     0,  1443,     0,     0,     0,   579,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   207,   208,   209,   210,
     211,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,    20,    21,   254,   255,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   256,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   257,    40,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
     260,   261,   262,   263,   213,   214,     1,     0,    53,     0,
       0,   876,     0,     0,     0,     0,     0,     0,  1460,     0,
       0,     0,   579,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   256,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   257,
      40,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,   260,   261,   262,   263,
     213,   214,     1,     0,    53,     0,     0,  1226,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1227,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   207,   208,
     209,   210,   211,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    20,    21,   254,   255,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   256,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,     0,     0,     0,   257,    40,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,   260,   261,   262,   263,   213,   214,     1,     0,
      53,     0,     0,  1226,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1249,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   207,   208,   209,   210,   211,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    20,    21,   254,   255,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   256,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   257,    40,   258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,   260,   261,
     262,   263,   213,   214,     1,     0,    53,     0,     0,  1226,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1706,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     207,   208,   209,   210,   211,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,    20,    21,   254,
     255,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,     0,   257,    40,   258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   259,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,   260,   261,   262,   263,   213,   214,
       1,     0,    53,     0,     0,  1226,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1721,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     3,     4,   283,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,     0,
       0,     0,    30,    31,   284,    33,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,    44,     0,     0,     1,     0,    45,    46,
      47,    48,    49,    50,    51,    52,     0,     0,    53,     0,
       0,    54,     0,     0,     0,     0,     0,     0,     0,     0,
     285,     2,   207,   208,   209,   210,   211,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,   435,     0,     0,     0,     0,     0,    30,    31,
       0,     0,   436,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,     0,     0,     0,
       0,     0,     1,     0,    45,    46,    47,    48,    49,    50,
     213,   214,     0,     0,    53,     0,     0,   963,     0,   448,
       0,     0,     0,     0,     0,     0,   964,     2,   207,   208,
     209,   210,   211,     8,     9,    10,   577,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,     0,     0,     1,     0,
      45,    46,    47,    48,    49,    50,   213,   214,     0,     0,
      53,     0,     0,   943,     0,     0,     0,     0,     0,     0,
       0,     0,   944,     2,   207,   208,   209,   210,   211,     8,
       9,    10,   577,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,   634,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   213,   214,     0,     0,    53,     0,     0,    54,
       0,     0,     0,     0,     0,     0,     0,     0,   944,     2,
     207,   208,   209,   210,   211,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,    20,    21,   254,
     255,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,     0,   257,    40,   258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   259,     0,     0,     0,  1529,     0,     0,     0,
       0,     0,    45,    46,   260,   261,   262,   263,   213,   214,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   264,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -66,     0,     0,     0,     0,     0,     0,
     -66,   -66,     0,     0,     0,   -66,     0,     0,     0,     0,
       0,   -66,   -66,   -66,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -66,     0,     0,  1735,
       0,     0,     0,     0,     0,     0,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,     0,     0,     0,     0,     0,     0,
       0,     0,  1530,     0,  1531,   -66,     2,   207,   208,   209,
     210,   211,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,    20,    21,   254,   255,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   256,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,     0,   257,    40,   258,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
       0,     0,  1739,     0,     0,     0,     0,     0,     0,    45,
      46,   260,   261,   262,   263,   213,   214,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -111,     2,
     207,   208,   209,   210,   211,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,    20,    21,   254,
     255,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,     0,     0,     0,   257,    40,   258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   259,     0,     0,  1740,     0,     0,     0,     0,
       0,     0,    45,    46,   260,   261,   262,   263,   213,   214,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -95,     2,   207,   208,   209,   210,   211,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
      20,    21,   254,   255,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   256,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     257,    40,   258,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,     0,     0,  1848,     0,
       0,     0,     0,     0,     0,    45,    46,   260,   261,   262,
     263,   213,   214,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -96,     2,   207,   208,   209,   210,
     211,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,    20,    21,   254,   255,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   256,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   257,    40,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
       0,  1994,     0,     0,     0,     0,     0,     0,    45,    46,
     260,   261,   262,   263,   213,   214,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -80,     2,   207,
     208,   209,   210,   211,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,    20,    21,   254,   255,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   256,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,     0,   257,    40,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0, -1303,   302,     0,     1,     0,     0,     0,
       0,    45,    46,   260,   261,   262,   263,   213,   214,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -87,     2,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,     0,     0,     0,    30,    31,
      32,    33,     0,    34,    35,    36,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,     1,     0,     0,    44,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
      51,    52,     0,     0,    53,     0,     0,    54,     0,     0,
      55,     2,   207,   208,   209,   210,   211,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,     0,     0,     1,
       0,   846,     0,     0,    45,    46,    47,    48,    49,    50,
     213,   214,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1419,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     1,     0,   846,     0,     0,    45,    46,    47,
      48,    49,    50,   213,   214,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1766,     2,   207,   208,
     209,   210,   211,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,   168,     0,     1,     0,   846,     0,     0,
      45,    46,    47,    48,    49,    50,   213,   214,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1767,
       2,     3,     4,   169,     6,     7,     8,     9,    10,   170,
     171,   172,   173,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,   168,     0,     1,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,    51,
      52,     0,     0,    53,     0,     0,    54,     0,     0,   174,
       0,     2,     3,     4,   169,     6,     7,     8,     9,    10,
     170,   171,   172,   173,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,   617,     0,     1,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
      51,    52,     0,     0,    53,     0,     0,    54,     0,     0,
     174,     0,     2,   207,   208,   209,   210,   211,   242,   243,
     244,   618,   619,   620,   621,   249,   250,   251,   252,   253,
      20,    21,   254,   255,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   256,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     257,    40,   258,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,  -923,     0,  -923,     0,
       0,     0,     0,     0,     0,    45,    46,   260,   261,   262,
     263,   213,   214,     0,     0,    53,     0,     0,    54,     0,
       0,   622,     0,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -923,     0,     0,     0,     0,     0,     0,
    -923,  -923,     0,     0,     0,  -923,     0,     0,     0,     0,
       0,  -923,  -923,  -923,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -923,     0,     1,     0,
       0,     0,     0,     0,     0,     0,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,     0,     0,  -923,     0,     0,  -923,
       0,     0,  -923,     2,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,     0,     0,     0,
      30,    31,    32,    33,     0,    34,    35,    36,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,    43,     0, -1304,
     294,    44,     1,     0,     0,     0,    45,    46,    47,    48,
      49,    50,    51,    52,     0,     0,    53,     0,     0,    54,
       0,     0,    55,     0,     0,     0,     0,     2,     3,     4,
     169,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
      35,    36,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   206,     0,     1,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,    51,    52,     0,     0,
      53,     0,     0,    54,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   212,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   206,    42,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   213,   214,     0,     0,    53,     0,     0,
    1226,  1693,     0,     2,   207,   208,   209,   210,   211,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   212,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   206,    42,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   213,   214,     0,     0,     0,     0,     0,     0,
     215,     0,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   212,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   956,    42,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   213,   214,     0,     0,     0,     0,     0,     0,   400,
       0,     2,   207,   208,   209,   210,   211,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     212,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1486,    42,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     213,   214,     0,     0,     0,     0,     0,     0,   215,     0,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   212,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   206,    42,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   213,
     214,     0,     0,     0,     0,     0,     0,   400,     0,     2,
     207,   208,   209,   210,   211,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   212,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   206,    42,     1,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   213,   214,
       0,     0,     0,     0,     0,     0,  1579,     0,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   212,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     168,    42,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,   213,   214,     0,
       0,     0,     0,     0,     0,  1920,     0,     2,     3,     4,
     169,     6,     7,     8,     9,    10,   577,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   168,     0,     1,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,    51,    52,     0,     0,
      53,     0,     0,    54,     2,     3,     4,   169,     6,     7,
       8,     9,    10,   577,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   900,     0,     1,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,    51,    52,     0,     0,    53,     0,     0,
      54,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   256,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   257,
      40,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,   259,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,   260,   261,   262,   263,
     213,   214,     0,     0,     0,     0,     0,   901,     2,     3,
       4,   169,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,    51,    52,     0,
       0,    53,     0,     0,    54,     2,   207,   208,   209,   210,
     211,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   213,   214,     0,     0,    53,     0,
       0,    54,     2,   207,   208,   209,   210,   211,     8,     9,
      10,   577,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   213,   214,     0,     0,    53,     0,     0,    54,     2,
     207,   208,   209,   210,   211,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   213,   214,
       0,     0,     0,     0,     0,   735,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,   213,   214,     0,     0,     0,
       0,     0,  1465,     2,   207,   208,   209,   210,   211,   242,
     243,   244,  1551,   246,   247,   248,   249,   250,   251,   252,
     253,    20,    21,   254,   255,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   256,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   257,    40,   258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1089,     0,     1,   259,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,   260,   261,
     262,   263,   213,   214,     0,     0,    53,     0,     0,    54,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,  1090,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   212,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,  1095,     0,     1,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   213,
     214,     2,   207,   208,   209,   210,   211,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,  1096,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     212,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,  1101,     0,     1,     0,     0,
       0,     0,     0,     0,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     213,   214,     2,   207,   208,   209,   210,   211,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,  1102,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   212,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,   885,     0,     1,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   213,   214,     2,   207,   208,   209,   210,   211,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,    20,    21,   254,   255,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   256,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
       0,   257,    40,   258,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,   259,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,   260,   261,
     262,   263,   213,   214,     2,   207,   208,   209,   210,   211,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,  1050,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   212,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   213,   214,     2,   207,   208,   209,   210,
     211,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    1107,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   212,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   213,   214,     2,   207,   208,   209,
     210,   211,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   514,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,   213,   214,     2,   207,   208,
     209,   210,   211,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,     0,   846,     0,     0,
      45,    46,    47,    48,    49,    50,   213,   214,     2,   207,
     208,   209,   210,   211,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   212,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,   213,   214,     2,
     207,   208,   209,   210,   211,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,    20,    21,   254,
     255,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,   489,   490,     0,     0,     0,   257,    40,   258,
       0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,   259,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,   260,   261,   262,   263,   213,   214,
       2,   207,   208,   209,   210,   211,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   213,
     214,     2,   207,   208,   209,   210,   211,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,    20,
      21,   254,   255,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   256,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   257,
      40,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,   260,   261,   262,   263,
     213,   214,     2,   207,   208,   209,   210,   211,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
      20,    21,   254,   255,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   256,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     257,    40,   258,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   260,   261,   262,
     263,   213,   214,     0,     0,    53,     0,     0,   876,  1690,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   579,
       2,   207,   208,   209,   210,   211,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,    20,    21,
     254,   255,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     256,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   257,    40,
     258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   259,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,   260,   261,   262,   263,   213,
     214,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   264,     2,   207,   208,   209,   210,   211,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,    20,    21,   254,   255,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   256,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,     0,   257,    40,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,   260,
     261,   262,   263,   213,   214,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1540,     2,   207,   208,
     209,   210,   211,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    20,    21,   254,   255,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   256,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,     0,     0,     0,   257,    40,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,   260,   261,   262,   263,   213,   214
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-2007)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       0,   734,    95,   656,  1016,   103,  1018,   875,   942,   548,
     548,   875,   481,  1016,    61,  1018,   942,   103,    85,   159,
     482,   355,  1119,   147,   156,   355,   298,    88,    88,    85,
    1628,    85,    32,    33,   135,  1236,   160,   851,   162,   851,
     164,   842,  1640,    43,    96,    96,   736,   952,  1016,  1017,
    1018,    32,   103,    66,    54,   135,  1016,   842,  1018,   131,
     131,    61,    96,    44,   481,   354,    66,   485,    68,   116,
     131,   131,  1016,    17,  1018,    86,   875,  1730,    85,   368,
       1,   809,    85,   372,    84,    85,    86,   188,    88,    96,
       3,     1,  1017,    96,    94,   899,    96,   892,   191,   192,
     103,     5,     1,   103,   104,     5,     3,   107,   188,   837,
     338,    70,    71,    78,   974,  2121,   116,   758,   280,   119,
       1,     1,     3,     3,   765,   147,   774,   768,     1,   110,
     111,   131,    17,   114,   134,   135,     3,   124,   160,   139,
     162,     1,   164,   143,   144,   145,     3,   147,     5,   593,
       3,   151,     1,   153,   191,   192,   156,   157,   205,   159,
     160,   161,   162,  1816,   164,     3,   179,   167,   133,   973,
     810,   130,   820,  2179,   129,    28,     1,    74,     3,   179,
     135,     1,   758,   568,    37,   278,   680,   681,   188,   765,
     138,   139,   768,     3,     1,     5,   995,     3,   838,     5,
     298,   145,   300,   568,   125,   205,     3,    74,   129,   481,
      85,    86,   298,   598,   300,     5,   601,   217,   603,   219,
     605,   288,     3,   133,     1,   124,     3,   227,   228,  1024,
     134,   298,   288,   598,   288,   135,   601,   237,   603,     1,
     605,   241,   895,   280,   298,     3,     1,    28,   300,   300,
     130,     3,     3,     1,   280,     3,    37,   130,  1270,   134,
     145,     1,   299,   130,   275,  1277,   300,  1270,   125,  1281,
     130,   124,     5,     1,  1277,   275,   133,  1875,  1281,     1,
     280,   130,   135,     3,   284,   298,     1,   125,   288,     3,
       1,   298,   432,   300,    75,    76,     1,   300,   298,    80,
     300,  1269,  1270,   284,   405,   130,    87,   127,  1276,  1277,
    1270,     1,  1280,  1281,     1,   125,    67,  1277,   318,   125,
     127,  1281,     3,   133,   324,   405,  1270,   133,   125,     1,
     111,   112,   129,  1277,   129,   335,   133,  1281,     1,     1,
     121,   136,   132,   124,  1269,   124,    17,    28,     5,   349,
     397,  1276,   399,   130,   135,  1280,   337,   129,   451,   452,
     453,   454,     3,   135,   122,  1225,   278,   279,   130,   127,
     121,   122,   127,   125,   129,   130,   665,   129,     1,   668,
     131,   133,   130,   124,     7,     8,     9,   127,     5,   129,
     130,   391,   392,    54,     1,     3,   129,   397,   144,   399,
     275,   147,   130,     1,     5,   405,     3,   127,   130,   129,
    1211,   411,  1213,   288,   160,   130,   162,   131,   164,   130,
      28,   482,   482,   122,   424,   130,  1211,   124,  1213,   429,
     899,   431,   432,     5,   878,   435,   436,   569,   135,   711,
     130,   441,   543,   130,   444,   445,   446,   447,   448,   573,
     131,   575,   811,     3,   127,   127,   549,   129,   559,   552,
     794,   795,   796,   543,   794,   795,   796,   130,   130,     7,
       8,     9,   129,   134,   145,   892,   476,   477,   478,   559,
     839,   481,   482,  1124,   125,   485,     3,   949,   488,    17,
     824,   825,   826,   493,   824,   825,   826,   497,   498,  1596,
    1701,   124,   502,   503,   973,   128,   578,   578,   125,   132,
    2163,    28,   135,   593,   514,   130,   678,   679,   680,   681,
     520,   521,   129,   131,   524,   525,   124,   125,   125,   529,
     530,   129,   579,   533,   534,   952,  1226,   537,   538,   539,
     540,   541,   960,   543,   962,  1450,   546,     1,  1124,     3,
     130,   573,   124,   575,  1244,  1024,   973,   557,   558,   559,
     788,  1251,   131,   563,     3,   612,     5,   228,   568,   569,
    1438,   121,   122,   573,  1438,   575,   576,   130,   578,   579,
     580,   131,  1442,   583,     5,  1490,   124,   815,  1493,    28,
       1,  1603,   121,   593,   132,   823,     1,   135,   598,     1,
    1603,   601,     3,   603,    11,   605,     5,  1024,  1422,  1423,
    1422,  1423,   612,   711,   131,   843,  1550,   145,     3,     5,
     892,     3,     3,     1,  1550,   711,     3,  1071,     7,     8,
       9,    14,    15,  1127,  1602,  1603,  1130,   549,  1082,  1438,
     552,   734,   139,  1603,   711,  1505,   646,   124,   648,  1517,
     124,  1519,   678,   679,   680,   681,   656,   711,     3,  1603,
    1524,   135,   537,   538,   539,   540,   541,   121,   122,   706,
     707,     3,     3,    74,  1168,   129,     3,  1602,   678,   679,
     680,   681,   557,   558,     7,     8,     9,   121,  1182,  1183,
    1184,  1185,   131,   122,     1,     0,   696,   697,     7,     8,
       9,   973,   131,  1088,   125,   705,     1,   141,   142,  1094,
    1911,   711,   693,   694,   125,  1100,   123,   717,   129,   124,
     125,  1106,   129,  1088,   129,   725,     5,   129,   127,   130,
     476,   477,   732,   733,   734,   735,   736,   737,   124,   124,
       3,  1106,   488,   743,   121,   122,   746,   125,    11,   131,
     131,   129,  1024,   132,   131,   755,   502,   503,   739,   740,
     741,   127,     7,     8,     9,   131,   678,   679,   680,   681,
       3,   771,   548,   128,     3,   775,  1788,     3,   524,   525,
     125,   135,   812,   529,   530,  1788,   447,   533,   534,   121,
     122,     1,     1,     3,   127,    28,   708,     1,   125,   131,
     131,   124,    28,   813,   876,   876,     7,     8,     9,   132,
     840,    37,   135,   129,     7,     8,     9,   817,   125,  1787,
    1788,   821,   129,   132,    80,   129,   135,   573,  1788,   575,
     125,   841,   925,   926,   129,   928,     3,   129,   931,   932,
    1700,   981,   982,  1484,  1788,  1705,   846,   847,   848,    75,
      76,   851,   852,   853,    80,   111,   112,   989,   121,   122,
     123,    87,  1787,   360,   988,   128,   129,   129,   131,    12,
      13,  1776,  1777,   124,   874,   875,   876,   949,   949,   129,
     880,    91,   882,   883,   135,   111,   112,   132,   949,   949,
     890,   891,   892,   122,   123,   895,     3,   129,   124,   899,
     124,   901,   902,   130,   904,     3,   906,     3,  1484,   135,
       3,   135,  1772,     3,  1007,   124,   125,   578,    11,   580,
     129,   125,     3,  1055,  1056,   129,  1889,   128,     3,     3,
      28,   132,  1266,     3,   431,     5,  1266,   130,    28,   132,
     123,  1065,   131,   943,     3,   945,   129,    37,    46,   949,
       0,  1815,   952,    28,   121,   122,   130,   957,    85,   122,
     960,   128,   962,   963,   127,  1127,   988,     3,  1130,    28,
    1071,   810,   972,   973,   974,    11,   125,    75,    76,   122,
     123,   981,   982,   125,     3,   809,   986,  1526,   988,   989,
    1723,  1071,  1436,     3,   994,   995,   996,   997,   774,   838,
    1080,   122,  1082,   128,  1694,   124,  1168,  1660,   133,    28,
     131,  1083,  1083,   837,   121,   122,  1485,   124,  1557,  1557,
    1182,  1183,  1184,  1185,  1024,   121,   122,   125,   121,   122,
     123,   129,   128,  1450,   124,    85,   129,  1084,   131,   124,
     121,   122,     1,  1065,   820,  1273,    96,   121,   122,   124,
     124,   121,   122,   103,   104,  1055,  1056,    67,  1992,  1059,
    1060,   188,   122,  1063,  1064,  1065,   139,  1067,  1928,   129,
    1070,  1071,   124,  1490,   811,   135,  1493,  1201,    80,  2042,
    1080,  2044,  1082,  1083,  1084,   121,   122,   123,  1088,   797,
     798,  1091,   128,   129,  1094,   131,   812,  1097,    12,    13,
    1100,  1127,   839,  1103,  1130,   124,  1106,   813,  1108,   111,
     112,   121,   122,     1,  1608,  1609,    75,    76,   130,   827,
     828,    80,  1122,    78,   840,  1569,  1620,  1127,    87,   124,
    1130,   133,     3,   128,     5,   841,  2004,   122,  2006,  1139,
     135,  1141,  1168,   799,   800,   128,   131,  2110,   133,  2112,
    1150,  2114,   111,   112,  1226,  1226,  1182,  1183,  1184,  1185,
      31,   288,   131,  1163,   133,   124,   125,  1214,  1168,  1169,
     129,   298,   429,   829,   830,     3,  1715,     5,  1159,  1201,
     123,    80,  1182,  1183,  1184,  1185,   129,    75,    76,   128,
    2153,  2154,    80,  2156,   133,  1070,   131,  1930,   133,    87,
    1200,  1201,  1202,    31,  1204,   123,     3,   124,   122,   123,
    2173,   129,   111,   112,  1214,  1127,  1216,   743,  1130,   124,
     746,  1221,   124,   111,   112,  1225,  1226,   124,  2191,   128,
     124,    28,     3,    46,    47,   124,     1,    80,   288,   127,
    1893,   129,   988,   904,  1244,   124,   797,   798,   298,    46,
     300,  1251,   115,   123,   131,   123,  1168,    28,  1034,   129,
    1260,   129,    75,    76,   521,   124,     3,    80,   111,   112,
    1182,  1183,  1184,  1185,    87,    46,   827,   828,    75,    76,
     124,   131,   943,   133,     3,   128,  1267,   360,  1827,  1827,
     127,    28,   131,  1205,   131,  1207,   957,   123,   111,   112,
      37,   137,   963,   129,    75,    76,   803,   804,   121,   806,
      75,    76,   121,  1059,  1060,    80,   143,  1063,  1064,  1065,
     123,   578,    87,    70,    71,  1769,   129,   125,   125,    10,
      11,   129,   141,   142,   831,   832,   833,   834,    75,    76,
     799,   800,   205,    80,   125,    92,   111,   112,   129,    96,
      87,    98,     3,   131,   481,   133,    75,    76,   431,  1776,
    1777,    80,   127,   128,   129,   144,   123,   123,    87,  1863,
     829,   830,   129,   129,   111,   112,    16,   874,   875,   397,
     310,   399,   123,   130,   121,   125,   436,   124,   129,   319,
     143,  1835,   111,   112,  1170,   325,   133,    16,  1174,   807,
     808,  1177,   123,  1179,   137,     1,  1945,  1945,   129,  1070,
     138,   139,   131,  1413,  1414,   123,   543,  1417,  1418,   546,
     123,   129,  1422,  1423,    75,    76,   129,   835,   836,    80,
     131,   125,   133,   144,  1434,   129,    87,  1418,  1438,  1439,
     125,   125,  1442,   125,   129,   129,  1608,  1609,  1448,   133,
    1450,     3,   125,  1453,  1200,  1201,   129,  1457,  1620,   131,
     111,   112,  1462,  1463,  1464,   131,    75,    76,  1569,  2008,
    2008,    80,  2125,   124,   124,   338,    28,   974,    87,    75,
      76,   127,   125,   129,    80,  1485,   129,  1487,   125,  1569,
    1490,    87,   129,  1493,   127,   125,  1496,  1577,   755,   129,
     125,   125,   111,   112,   129,  1505,   129,   125,   133,    75,
      76,   129,  1512,  1513,    80,   111,   112,  1517,  1518,  1519,
    1520,    87,   131,    75,    76,   125,   157,   125,    80,   129,
     161,   127,   128,   129,   397,    87,   399,  2076,  2076,  2033,
     127,  2035,   129,   131,    80,   111,   112,    10,    11,  2088,
    2088,    46,    47,     1,   144,     3,   127,   147,   129,   111,
     112,   579,   128,    89,    90,    91,  1566,  1567,   127,  1569,
     160,   131,   162,   133,   164,   111,   112,  1577,   705,   131,
      75,    76,  1608,  1609,   711,    80,   807,   808,  1588,  1464,
    2129,   127,    87,   122,  1620,   131,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    14,    15,  1608,  1609,
    2104,   131,   122,   133,   835,   836,   111,   112,  1618,   876,
    1620,  1621,   122,   641,  1624,     1,   883,     3,  1628,   124,
    1702,  1702,  1632,   125,   891,  1635,   125,   129,   129,    95,
     129,   133,  2181,  2181,   133,   902,     1,     1,     3,     3,
    1631,    75,    76,   131,  2193,  2193,    80,     1,   131,     3,
    1660,   711,   127,    87,   129,     3,  1647,  1667,   136,  1897,
    1898,  1899,  1900,  1901,  1902,  1903,  1904,   136,   131,   542,
     133,   127,  1806,   129,  1808,  1778,   136,   111,   112,   131,
      28,   133,   923,   924,   678,   679,  1608,  1609,   923,   924,
    1700,  1863,  1702,   557,   558,  1705,   128,   135,  1832,  1621,
    1834,   131,  1624,  1531,   129,  1533,   579,  1531,   129,  1533,
    1632,   678,   679,  1723,   129,  1725,  1726,   129,  1225,  1729,
     803,   804,     3,   806,  1835,   191,   192,    75,    76,   103,
     104,   130,    80,   852,   853,   131,   127,   127,   611,    87,
     537,   538,   539,   540,   541,  1835,   133,    28,   831,   832,
     833,   834,   124,  1763,  1992,   892,  1512,  1513,   124,   127,
     557,   558,  1772,   111,   112,   124,  1776,  1777,   641,  1779,
      37,  1557,   712,   310,  1806,   124,  1808,   124,   131,    46,
      47,  1791,   319,   131,   127,  2129,   127,   127,   325,  2129,
     127,   874,   875,  1464,    75,    76,  1806,   122,  1808,    80,
    1832,  1811,  1834,  1070,   125,   136,    87,   130,    75,    76,
    1566,  1567,   278,    80,   280,   952,  1487,   136,   136,   136,
      87,   136,  1832,   136,  1834,  1835,   135,  1863,   131,   122,
     111,   112,   131,   299,   130,   127,   973,   122,   129,   125,
     130,    46,    47,   130,   111,   112,   125,  1857,  1858,  1859,
    1860,   125,   136,  1863,   121,   125,   136,  1867,  1868,   136,
    1870,  2033,  1872,  2035,   124,   738,   125,  2001,   125,   742,
      75,    76,   133,   124,  1884,    80,   476,   477,   133,   133,
     124,   124,    87,  1893,    58,   758,  1896,  1024,   488,   127,
     127,   974,   765,   127,   124,   768,  1887,   122,  1889,   122,
     127,   125,   502,   503,   125,   122,   111,   112,   124,   124,
     122,   125,   125,   135,   125,   788,   944,  1588,  1928,   124,
    1930,   129,   129,   125,   524,   525,   135,   130,   129,   529,
     530,  1438,  2104,   533,   534,  1442,   125,   133,   133,   133,
     125,   133,   815,   125,  1730,  1867,  1868,   125,   127,   130,
     823,   128,   125,   125,  1221,   983,  1742,  1224,   125,   125,
     136,  1747,    58,   124,  1750,   136,   136,   125,   133,  2001,
     843,    75,    76,   573,   133,   575,    80,   124,   124,   133,
     133,   133,   133,    87,   125,   451,   125,   125,   454,  1999,
    2000,  2001,  2002,  2003,  2004,   125,  2006,  2033,  1505,  2035,
     125,   125,   136,  2013,  2014,  2015,  2016,   111,   112,   136,
     122,   127,   135,   135,  2024,  2118,  2119,  1524,   136,   136,
      11,   125,   131,  2033,   131,  2035,  2036,    75,    76,   128,
    1816,   133,    80,   133,   128,  2045,  2046,   127,   124,    87,
     128,  1827,   127,    75,    76,     0,   125,   131,    80,   125,
    1806,  2042,  1808,  2044,   125,    87,  1084,   125,   136,   136,
     125,   136,   136,   111,   112,  1202,   136,  1204,  2104,   942,
     136,   944,   136,   136,  2084,  2085,  1832,   125,  1834,   111,
     112,  2091,  2092,   549,   125,  2095,   552,  2097,    43,   121,
    2100,   125,   124,    66,  2104,   125,    66,   125,   127,   136,
      75,    76,   125,   135,   131,    80,    61,  1135,   125,  2119,
     983,  2121,    87,    68,   136,  2125,   136,   136,  2109,  2110,
     127,  2112,   127,  2114,   136,   127,   127,   127,  2138,   127,
      85,   127,   127,    88,    75,    76,   111,   112,   127,    80,
      95,    96,  1225,  1016,   127,  1018,    87,   127,   103,   104,
     125,  2161,  2162,  2144,   125,   127,   488,  2167,   127,  1945,
     127,   116,  2153,  2154,   119,  2156,   488,  2161,  1435,  2179,
     111,   112,   488,  1520,   488,   712,   131,   488,   994,   298,
     121,   874,  2173,   124,   139,   298,   986,   929,   820,   144,
     145,  1485,   147,  1700,   446,     3,   737,   507,  1705,  1227,
    2191,   436,   157,   324,   159,   160,   161,   162,   275,   164,
    2109,  1084,   678,   679,   680,   681,   103,    96,   319,   280,
      28,  1249,  2008,    96,   325,    96,   104,    -1,  1763,    37,
      -1,    -1,    -1,    -1,    -1,    -1,   191,   192,    -1,    -1,
     706,   707,   708,  1999,  2000,  2001,  2002,  2003,    -1,    -1,
     205,  1124,    -1,    -1,    -1,    -1,    -1,  2013,  2014,  2015,
    2016,    -1,  1135,    -1,   219,  1772,    -1,    75,    76,    75,
      76,    -1,    80,   228,    80,    -1,    -1,    -1,    -1,    87,
      -1,    87,    -1,   476,   477,    -1,    -1,    -1,  1161,  1162,
    2076,    -1,    -1,    -1,    -1,    -1,   397,    -1,   399,    -1,
      -1,    -1,  2088,   111,   112,   111,   112,    -1,  1815,   502,
     503,    -1,    -1,  1450,    -1,    -1,   124,     3,    -1,   125,
     275,  1588,    -1,   278,   279,   280,    -1,    -1,  2084,  2085,
      -1,   524,   525,   288,    -1,    -1,   529,   530,    -1,    -1,
     533,   534,    28,   298,   299,   300,    -1,    -1,    -1,    -1,
      -1,    37,    -1,  1490,  1227,  1438,  1493,    -1,    -1,  1442,
      -1,    -1,    -1,   318,    -1,    -1,    -1,    -1,    -1,   324,
      -1,     6,    -1,     8,     9,    -1,  1249,  2163,    -1,    -1,
     335,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   988,    75,
      76,    -1,    -1,    -1,    80,  2181,    -1,  1270,    -1,    -1,
    1273,    87,    -1,    -1,  1277,    -1,    -1,  2193,  1281,    -1,
      -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1928,  1505,    -1,    -1,   111,   112,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   121,    -1,   392,   124,    74,
      -1,  1524,   397,    -1,   399,    -1,    -1,    -1,     7,   542,
      85,    10,    11,    12,    13,    14,    15,    16,    17,  1059,
    1060,    -1,    -1,  1063,  1064,  1065,  1494,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   429,   110,   431,   432,   579,    -1,
     435,   436,  1510,    -1,    -1,   120,   441,   122,    -1,    -1,
     445,   446,    -1,   448,    -1,    -1,    85,    -1,    -1,    -1,
     135,    -1,    -1,   138,   139,   140,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,   476,   477,    -1,    -1,    -1,   481,   482,    -1,    -1,
      -1,    -1,    -1,   488,    -1,    -1,    -1,    -1,   493,    -1,
     641,  1007,    -1,   498,  1811,    -1,    -1,   502,   503,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,
      -1,    -1,    -1,   122,   123,    -1,   521,    -1,   157,   524,
     525,    -1,   161,   132,   529,   530,    -1,    -1,   533,   534,
      -1,    -1,   141,   142,   143,   144,   145,   542,    -1,    -1,
      -1,    -1,    -1,    -1,   549,    -1,    -1,   552,    -1,    -1,
    1200,  1201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1484,    -1,   568,   278,   279,    -1,  1700,   573,    -1,
     575,  1494,  1705,   578,   579,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   725,    -1,    -1,    -1,    -1,  1510,    -1,  1776,
    1777,    -1,    -1,   598,    -1,    -1,   601,    -1,   603,    -1,
     605,    -1,    -1,  1526,    -1,    -1,    -1,   612,  1531,    -1,
    1533,  1127,    -1,    -1,  1130,   758,    -1,    -1,    -1,    -1,
      -1,    -1,   765,    -1,    -1,   768,  1704,  1550,  1706,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1772,
      -1,    -1,  1720,  1721,    -1,    -1,    -1,    -1,    -1,   288,
      -1,    -1,  1168,    -1,    -1,    -1,    -1,    -1,    -1,   298,
      -1,   300,    -1,    -1,    -1,    -1,  1182,  1183,  1184,  1185,
      -1,    -1,    -1,   678,   679,   680,   681,    -1,    -1,    -1,
    1603,    -1,  1815,    -1,    -1,    -1,    -1,    -1,    -1,  1205,
      -1,  1207,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   706,   707,   708,    -1,     3,   711,    -1,    -1,    -1,
      -1,    -1,   717,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     725,    -1,    -1,    -1,    -1,    -1,    -1,   732,   733,   734,
      28,   736,   737,    -1,    -1,    -1,    -1,    -1,   743,    37,
      -1,   746,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     755,    -1,    -1,   758,    -1,    -1,    -1,    -1,  1748,  1749,
     765,  1751,  1752,   768,    -1,    -1,  1756,  1757,  1758,  1759,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,  1704,    80,  1706,    -1,    -1,    -1,    -1,    -1,    87,
      -1,    -1,  1715,   944,    -1,  1928,   435,  1720,  1721,    -1,
      -1,    -1,    -1,    -1,  1727,    -1,    -1,   446,    -1,    -1,
      -1,    -1,    -1,   111,   112,    -1,  1059,  1060,    -1,     3,
    1063,  1064,    -1,   121,    -1,    -1,   124,   125,    -1,    -1,
      -1,    -1,   983,    -1,    -1,   549,    -1,    -1,   552,    -1,
      -1,    -1,    -1,   848,    28,    -1,   851,   852,   853,    -1,
      -1,  1929,    -1,    37,    38,    39,    40,    -1,    -1,   498,
    1938,    -1,  1512,  1513,    -1,  1788,    -1,    -1,    -1,   874,
     875,   876,    -1,  1016,  1017,  1018,    -1,    -1,   883,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   891,   892,    -1,    -1,
      -1,    75,    76,    -1,   899,    -1,    80,   902,    -1,   904,
      -1,   906,    -1,    87,    -1,    -1,    -1,  1897,  1898,  1899,
    1900,  1901,  1902,  1903,  1904,    -1,  1566,  1567,  1996,  1997,
      -1,    -1,    -1,    -1,     1,    -1,     3,   111,   112,    -1,
      -1,    -1,    -1,  1084,    -1,    -1,    -1,   121,    -1,    -1,
     124,    -1,    -1,    -1,   949,    -1,    -1,   476,   477,    -1,
      -1,    28,   957,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    39,    40,   678,   679,   680,   681,   973,   974,
      -1,  1894,  1895,   502,   503,    -1,   981,   982,    -1,    -1,
      -1,  1124,    -1,   988,  1135,    -1,    -1,    -1,    -1,   994,
      -1,    -1,    -1,    -1,   708,   524,   525,    -1,    75,    76,
     529,   530,  1992,    80,   533,   534,  1929,    -1,    -1,    -1,
      87,  1016,  1017,  1018,    -1,  1938,    -1,    -1,    -1,  1024,
      -1,    -1,    -1,    -1,    -1,  1541,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,    -1,   124,    -1,    93,
     127,    -1,   129,   130,  1059,  1060,    -1,    -1,  1063,  1064,
    1065,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   711,  1996,  1997,    -1,  1227,    -1,  1083,  1084,
      -1,    -1,    -1,  1088,    -1,    -1,    -1,    -1,    -1,  1094,
      -1,    -1,  1608,  1609,    -1,  1100,    -1,    -1,  1249,    -1,
      -1,  1106,    -1,    -1,  1620,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1124,
      -1,    -1,  1127,    -1,    -1,  1130,  1269,  1270,    -1,    -1,
      -1,    -1,    -1,  1276,  1277,    -1,    -1,  1280,  1281,    -1,
      -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1806,    -1,  1808,    -1,
      -1,  1748,  1749,  1168,  1751,  1752,    -1,    -1,    -1,  1756,
    1757,  1758,  1759,    -1,    -1,    -1,    -1,  1182,  1183,  1184,
    1185,    -1,  1832,    -1,  1834,    -1,    -1,    -1,  2111,    -1,
      -1,    -1,    -1,    -1,    -1,  1200,  1201,    -1,    54,    -1,
    1205,    -1,  1207,    -1,    -1,    -1,  2129,    -1,    -1,  1214,
      -1,    -1,    -1,    -1,    -1,    -1,  1221,    -1,    -1,  1224,
    1225,  1226,     0,    -1,    -1,    -1,    -1,   646,    84,    85,
      86,    -1,    -1,    -1,    -1,    -1,   280,    -1,    94,  1244,
      96,    -1,    -1,    -1,    -1,    -1,  1251,   103,   104,    -1,
      -1,    -1,   891,    -1,    -1,    -1,    -1,    -1,   115,    -1,
    2183,   680,   681,   902,  1269,  1270,    -1,    -1,    -1,  1512,
    1513,  1276,  1277,    -1,    -1,  1280,  1281,    -1,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,   144,    -1,
      -1,   147,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   160,    -1,   162,    85,   164,    -1,
    1897,  1898,  1899,  1900,  1901,  1902,  1903,  1904,    96,    -1,
      -1,    -1,    -1,  1566,  1567,   103,   104,    -1,    -1,    -1,
      -1,    -1,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
      -1,  1484,     0,  1494,    -1,    -1,    -1,  1863,    -1,  1999,
    2000,  2001,  2002,  2003,    -1,    -1,    -1,    -1,    -1,  1510,
      -1,    -1,    -1,  2013,  2014,  2015,  2016,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1992,    -1,   451,    -1,    -1,
      -1,    -1,    -1,  1127,    -1,    -1,  1130,  1422,  1423,   275,
      -1,    -1,    -1,   280,    -1,    -1,    -1,    85,    -1,    -1,
      -1,    -1,   288,  1438,  2084,  2085,    -1,  1442,    96,    -1,
      -1,    -1,   298,    -1,   300,   103,   104,    -1,    -1,    -1,
     228,    -1,    -1,    -1,  1168,    -1,    -1,    -1,    -1,  1602,
    1603,    -1,    -1,   507,    -1,    -1,    -1,    -1,  1182,  1183,
    1184,  1185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1484,
      -1,   338,  1487,    -1,    -1,    -1,    -1,   145,    -1,    -1,
      -1,  1205,    -1,  1207,    -1,    -1,    -1,    -1,    -1,   157,
    1505,    -1,    -1,   161,    -1,    -1,    -1,  1512,  1513,     0,
     288,    -1,  1517,  1518,  1519,  1520,    -1,  2033,    -1,  2035,
     298,    -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1059,  1060,    -1,    -1,  1063,  1064,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
     406,   407,    -1,  1704,    -1,  1706,    -1,   335,    -1,    -1,
      -1,  1566,  1567,    -1,    -1,    -1,    -1,    -1,    -1,  1720,
    1721,    -1,    -1,   429,    -1,    -1,    -1,    -1,    -1,    -1,
     436,    -1,    -1,  1588,    -1,    -1,    -1,    -1,  2104,    -1,
      -1,   447,    -1,    -1,    85,    -1,    -1,  1602,  1603,    -1,
      -1,    -1,   646,  1608,  1609,    96,    -1,    -1,    -1,    -1,
      -1,    -1,   103,   104,    -1,    -1,  1621,    -1,    -1,  1624,
     476,   477,    -1,    -1,    -1,   481,    -1,  1632,    -1,   485,
     288,    -1,   488,    -1,   678,   679,   680,   681,    -1,    -1,
     298,   497,   300,    -1,  1787,  1788,   502,   503,    -1,    -1,
      -1,   429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1667,    -1,    -1,   521,    -1,    -1,   524,   525,
      -1,    -1,    -1,   529,   530,    -1,    -1,   533,   534,    -1,
      -1,   537,   538,   539,   540,   541,    -1,    -1,    -1,    -1,
      -1,   548,    -1,    -1,    -1,  1700,    -1,  1702,    -1,    -1,
    1705,   557,   558,   481,    -1,    -1,    -1,    -1,  1127,    -1,
      -1,  1130,    -1,    -1,    -1,    -1,    -1,   573,  1723,   575,
    1139,    -1,   578,    -1,   580,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,    -1,   595,
      -1,    -1,    -1,   521,    -1,    -1,    -1,    -1,    -1,  1168,
      -1,    -1,    -1,    54,   611,    -1,  1999,  2000,    -1,  2002,
    2003,    -1,    -1,  1182,  1183,  1184,  1185,  1772,    -1,    -1,
    2013,  2014,  2015,  2016,    -1,    -1,    -1,   435,  1929,    -1,
      -1,    -1,  1787,  1788,    85,    86,    -1,  1938,   446,   646,
      -1,    -1,    -1,    94,    -1,    -1,    -1,   288,    -1,    -1,
      -1,  1806,    -1,  1808,    -1,    -1,  1811,   298,    -1,   300,
     355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   678,   679,   680,   681,    -1,    -1,  1832,    -1,  1834,
      -1,    -1,    -1,   134,   135,    -1,    -1,    -1,    -1,    -1,
     498,  2084,  2085,    -1,    -1,  1996,  1997,    -1,    -1,   705,
      -1,    -1,    -1,    -1,    -1,   711,    -1,    -1,    -1,    -1,
      -1,    -1,  1867,  1868,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   732,    -1,    -1,    -1,
     736,   738,    -1,    -1,    -1,   742,    -1,   188,    -1,    -1,
      -1,    -1,    -1,    -1,  1608,  1609,    -1,    -1,    -1,   755,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1621,    -1,    -1,
    1624,   955,    -1,    -1,    -1,    -1,    -1,   774,  1632,    -1,
      -1,    -1,    -1,  1928,    -1,  1930,    -1,    -1,    -1,    -1,
      -1,   788,    -1,   711,    -1,    -1,   237,    -1,   429,   717,
     241,   985,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   734,    -1,   815,    -1,
      -1,    -1,    -1,   820,    -1,   743,   823,    -1,   746,    -1,
      -1,    -1,    -1,    -1,   275,    -1,    -1,   755,    -1,    -1,
      -1,    -1,    -1,  1512,  1513,    -1,   843,   288,    -1,    -1,
     481,    -1,    -1,    -1,  1999,  2000,  2001,  2002,  2003,  2004,
      -1,  2006,    -1,    -1,    -1,    -1,    -1,    -1,  2013,  2014,
    2015,  2016,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     876,    -1,    -1,    -1,    -1,    -1,    -1,   883,    -1,    -1,
     521,    -1,    -1,    -1,   890,   891,   892,  1566,  1567,    -1,
      -1,    -1,    -1,   899,    -1,    -1,   902,    -1,   904,    -1,
      -1,    -1,    -1,   711,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     848,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2084,
    2085,    -1,    -1,  1127,    -1,    -1,  1130,   943,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1139,   952,    -1,    -1,    -1,
      -1,   957,    -1,    -1,   405,   883,   651,   963,    -1,    -1,
      -1,    -1,    -1,    -1,   892,    -1,    -1,   973,    -1,    -1,
      -1,   899,    -1,    -1,  1168,    -1,   904,    -1,   906,    -1,
      -1,    -1,   988,    -1,    -1,    -1,    -1,    -1,  1182,  1183,
    1184,  1185,   998,    -1,    -1,    -1,   447,    -1,    -1,    -1,
      -1,    -1,    -1,  1867,  1868,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1024,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1034,    -1,   957,
      -1,    -1,    -1,    -1,   485,    -1,    -1,    -1,    -1,  1608,
    1609,    -1,    -1,    -1,    -1,   973,    -1,    -1,    -1,  1618,
      -1,  1620,  1621,  1059,  1060,  1624,    -1,  1063,  1064,  1065,
      -1,    -1,    -1,  1632,  1070,  1071,  1635,    -1,    -1,    -1,
     711,    -1,    -1,    -1,    -1,  1081,   717,    -1,    -1,   774,
      -1,    -1,    -1,   891,    -1,    -1,   537,   538,   539,   540,
     541,    -1,   543,    -1,   902,   546,    -1,    -1,    -1,    -1,
      -1,    -1,   743,    -1,    -1,   746,   557,   558,   559,    -1,
      -1,    -1,   807,   808,   809,   810,   811,    -1,    -1,   814,
    1127,    -1,    -1,  1130,    -1,   820,    -1,   578,    -1,    -1,
      -1,    -1,  1139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     835,   836,   837,   838,   839,    -1,    -1,   842,    -1,    -1,
      -1,    -1,    -1,    -1,  1161,  1162,    -1,    -1,    -1,    -1,
      -1,  1168,    -1,  1170,    -1,    -1,    -1,  1174,    -1,    -1,
    1177,    -1,  1179,    -1,    -1,  1182,  1183,  1184,  1185,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1200,  1201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   848,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1221,    -1,    -1,  1224,    -1,
    1226,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,   157,    -1,  1244,    -1,
     161,    -1,   883,    -1,    -1,  1251,    -1,    -1,    -1,    -1,
      -1,   892,    -1,    -1,   705,    -1,    -1,    -1,   899,    28,
      -1,    -1,    -1,    -1,    -1,   906,  1273,    -1,    37,    38,
      39,    40,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1857,  1858,
    1859,  1860,    -1,  1221,  1863,    -1,    -1,    -1,  1867,  1868,
      -1,  1870,    -1,  1872,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,  1884,   957,    -1,    87,    -1,
    1999,  2000,    -1,  2002,  2003,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   973,    -1,  2013,  2014,  2015,  2016,    -1,    -1,
      -1,    -1,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    -1,   275,   124,    -1,    -1,   127,    -1,
     129,   130,    -1,    85,    -1,     1,    -1,     3,     4,     5,
      -1,    -1,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,
      -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   318,    -1,    -1,
      -1,    -1,    -1,   324,    -1,  2084,  2085,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1608,  1609,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   145,  1618,    -1,  1620,  1621,    -1,  1435,
    1624,    67,    -1,    -1,    -1,   157,    72,    73,  1632,   161,
      -1,  1635,    -1,    -1,  1450,    -1,    -1,  1142,    -1,    -1,
      86,  1457,    -1,   904,    -1,  2024,    -1,    -1,  1464,    -1,
      -1,    -1,    -1,    99,  2033,    -1,  2035,   103,   104,   105,
     106,   107,   108,   109,    -1,  1170,    -1,    -1,    -1,  1485,
      -1,  1487,  1177,   119,    -1,    -1,    -1,    -1,   124,    -1,
      -1,    -1,   943,    -1,    -1,    -1,    -1,    -1,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,  1512,  1513,    -1,   960,
      -1,   962,   963,    -1,   435,   115,  1211,    -1,  1213,  1526,
      -1,    -1,  2091,  2092,    -1,   446,  2095,    -1,  2097,    -1,
      -1,  2100,    -1,    -1,    -1,  2104,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1487,
    1566,  1567,    -1,  1569,    -1,    -1,   288,    -1,    -1,  2138,
      -1,    -1,    -1,  1214,    -1,    -1,   298,   498,   300,    -1,
    1221,    -1,  1588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2167,    -1,
      -1,  1608,  1609,    -1,    -1,   205,    -1,    -1,    -1,    -1,
      -1,  1618,    -1,  1620,  1621,    -1,    -1,  1624,    -1,  1070,
    1071,    -1,    -1,    -1,    -1,  1632,    -1,    -1,  1635,    -1,
      -1,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1588,    -1,    -1,  1857,  1858,  1859,  1860,    -1,    -1,  1863,
      -1,    -1,    -1,  1867,  1868,    -1,  1870,    -1,  1872,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,  1694,   147,
    1884,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   160,    -1,   162,    -1,   164,    -1,  1715,    -1,
     310,    -1,    -1,   435,   314,   315,   316,    -1,    -1,   319,
    1727,    -1,    -1,  1730,   446,   325,    -1,    -1,    -1,    -1,
      -1,   331,    -1,    -1,    -1,  1742,    -1,    -1,   338,    -1,
    1747,    -1,    -1,  1750,    -1,    -1,   122,   123,    -1,    -1,
      -1,  1202,    -1,  1204,    -1,   355,   132,    -1,    -1,    -1,
     360,   137,   138,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1723,    -1,   397,    -1,   399,
    1806,    -1,  1808,    -1,    -1,  1811,    -1,    -1,    -1,  1816,
      -1,   732,   733,    -1,    -1,   736,   737,    -1,    -1,    -1,
    1827,    -1,    -1,    -1,    -1,    -1,  1832,    -1,  1834,    -1,
    2024,   431,    -1,    -1,    -1,    -1,    -1,    -1,  1844,  2033,
      -1,  2035,    -1,    -1,    -1,    -1,  1487,    -1,    -1,    -1,
    1857,  1858,  1859,  1860,    -1,    -1,  1863,    -1,    -1,    -1,
    1867,  1868,    -1,  1870,    -1,  1872,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1884,    -1,    -1,
      -1,    -1,    -1,  1811,    -1,    -1,    -1,  1894,  1895,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2091,  2092,    -1,
      -1,  2095,    -1,  2097,    -1,    -1,  2100,    -1,    -1,    -1,
    2104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1945,    -1,
      -1,    -1,   542,    -1,  2138,    -1,    -1,  1588,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     891,    -1,    -1,  2167,    -1,    -1,    -1,    -1,    -1,   579,
      -1,   902,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   711,
      -1,    -1,    -1,  1999,  2000,  2001,  2002,  2003,    -1,    -1,
      -1,  2008,  1930,    -1,    -1,    -1,    -1,  2013,  2014,  2015,
    2016,   611,    -1,  1464,    -1,    -1,    -1,  2024,   476,   477,
      -1,    -1,    -1,    -1,    -1,    -1,  2033,    -1,  2035,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   641,    -1,    -1,   502,   503,    -1,  1742,    -1,    -1,
      -1,    -1,  1747,  1748,  1749,  1750,  1751,  1752,    -1,    -1,
      -1,  1756,  1757,  1758,  1759,    -1,   524,   525,    -1,  2076,
      -1,   529,   530,    -1,    -1,   533,   534,   115,  2084,  2085,
      -1,  2088,    -1,    -1,  2091,  2092,    -1,    -1,  2095,    -1,
    2097,    -1,    -1,  2100,    -1,    -1,    -1,  2104,    -1,    -1,
      -1,   139,    -1,  1024,  2111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   712,    -1,    -1,   573,    -1,   575,  1569,    -1,
      -1,    -1,  2129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2138,    -1,    -1,    -1,    -1,    -1,    -1,   738,    -1,
      -1,    -1,   742,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2163,    -1,   758,    -1,
    2167,    -1,    -1,    -1,    -1,   765,    -1,   205,   768,   891,
    1811,    -1,    -1,    -1,  2181,    -1,  2183,    -1,    -1,    -1,
     902,    -1,    -1,    -1,    -1,    -1,  2193,    -1,   788,    -1,
      -1,    -1,    -1,    -1,   794,   795,   796,   797,   798,   799,
     800,    -1,    -1,   803,   804,    -1,   806,   807,   808,   809,
     810,   811,   812,   813,    -1,   815,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   823,   824,   825,   826,   827,   828,   829,
     830,   831,   832,   833,   834,   835,   836,   837,   838,   839,
     840,   841,    -1,   843,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,   310,    -1,   874,   875,   314,   315,   316,    -1,
      -1,   319,    -1,    -1,    -1,    -1,    -1,   325,    -1,    28,
      -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    37,    -1,
     338,    -1,    -1,  1224,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,
      -1,    -1,   360,  1244,    -1,    -1,    -1,    -1,    67,    -1,
    1251,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      -1,    80,   942,    -1,   944,    -1,    85,    86,    87,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,   397,
      99,   399,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   974,    -1,    28,    -1,    -1,    -1,
     119,   120,   121,   983,  1835,   124,   125,   126,    -1,    -1,
      -1,    -1,    -1,   431,    -1,   134,   135,    -1,   137,   138,
     139,   140,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,  1016,    -1,  1018,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    89,    90,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,    -1,    -1,   923,   924,   119,   120,   121,
      -1,    -1,   124,   125,   126,   127,    -1,   129,    -1,   131,
      -1,   133,   134,   135,  1084,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   542,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,     4,     5,     6,
      -1,     8,     9,    -1,  1124,    -1,    -1,    -1,    -1,    -1,
     988,    -1,    -1,    -1,    -1,  1135,    -1,    -1,    -1,    -1,
      -1,   579,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   144,    -1,    -1,   147,    -1,    -1,
      -1,  1161,  1162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     160,    -1,   162,   611,   164,    -1,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
      -1,  1059,  1060,   641,    -1,  1063,  1064,  1065,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,  1225,    -1,  1227,    -1,    -1,
      -1,    -1,   119,   120,    -1,    -1,    -1,    -1,    -1,   126,
     127,    -1,   129,   130,   131,    -1,    -1,   134,   135,  1249,
     137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1266,    -1,    -1,    -1,
    1270,    -1,    -1,  1273,   712,    -1,    -1,  1277,    -1,    -1,
      -1,  1281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     738,    -1,    -1,    -1,   742,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     758,    -1,    -1,    -1,    -1,    -1,    -1,   765,    -1,     0,
     768,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1200,  1201,    -1,    -1,    -1,    -1,    -1,    -1,
     788,    -1,    -1,    -1,    -1,    -1,   794,   795,   796,   797,
     798,   799,   800,    -1,    -1,   803,   804,    -1,   806,   807,
     808,   809,   810,   811,   812,   813,    -1,   815,    -1,    -1,
      -1,    -1,    -1,    54,    -1,   823,   824,   825,   826,   827,
     828,   829,   830,   831,   832,   833,   834,   835,   836,   837,
     838,   839,   840,   841,    -1,   843,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    94,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,   103,   104,    -1,    -1,   874,   875,  1438,    -1,
      -1,    -1,  1442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1484,    -1,   476,   477,    -1,    -1,
      -1,    -1,    -1,    -1,  1494,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   942,  1505,   944,    -1,    -1,    -1,
    1510,    -1,   502,   503,    -1,    -1,    -1,   188,    -1,    -1,
      -1,    -1,    -1,    -1,  1524,    -1,  1526,    -1,    -1,    -1,
      -1,  1531,    -1,  1533,   524,   525,   974,    -1,    -1,   529,
     530,    -1,    -1,   533,   534,   983,    -1,    -1,    -1,    -1,
    1550,    -1,   542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1016,    -1,
    1018,    -1,    -1,   573,    -1,   575,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1603,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,   300,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1084,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1512,  1513,   646,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1124,    -1,   678,   679,
     680,   681,    -1,    -1,    -1,    -1,    -1,  1135,    -1,    -1,
    1700,    -1,    -1,    -1,  1704,  1705,  1706,    -1,  1566,  1567,
      -1,    -1,    -1,    -1,    -1,  1715,    -1,    -1,    -1,    -1,
    1720,  1721,    -1,  1161,  1162,    -1,    -1,  1727,    -1,    -1,
      -1,    -1,    -1,    -1,   405,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1748,  1749,
      -1,  1751,  1752,    -1,    -1,    -1,  1756,  1757,  1758,  1759,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   758,    -1,
      -1,    -1,  1772,    -1,    -1,   765,   447,    -1,   768,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1225,  1788,  1227,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1249,    -1,    -1,    -1,  1815,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1266,    -1,
      -1,    -1,  1270,    -1,    -1,  1273,    -1,    -1,    -1,  1277,
      -1,    -1,    -1,  1281,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   537,   538,   539,   540,
     541,    -1,   543,    -1,    -1,   546,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   557,   558,   559,    -1,
      -1,    -1,    -1,    -1,  1894,  1895,    -1,  1897,  1898,  1899,
    1900,  1901,  1902,  1903,  1904,    -1,    -1,   578,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1928,  1929,
      -1,    -1,    -1,   923,   924,    -1,    -1,    -1,  1938,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1806,    -1,
    1808,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1832,    -1,  1834,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1992,    -1,    -1,    -1,  1996,  1997,   988,    -1,
    1438,    -1,    -1,    -1,  1442,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1016,    -1,  1018,    -1,
      -1,    -1,    -1,    -1,   705,    -1,    -1,    -1,    -1,    -1,
     711,    -1,    -1,    -1,    -1,    -1,  1484,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1494,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1505,    -1,  1059,
    1060,    -1,  1510,  1063,  1064,  1065,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1524,    -1,  1526,    -1,
      -1,    -1,    -1,  1531,    -1,  1533,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2111,  1550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2129,
      -1,    -1,    -1,    -1,  1124,    -1,    -1,  1127,    -1,    -1,
    1130,  1999,  2000,  2001,  2002,  2003,    -1,    -1,    -1,  1139,
      -1,    -1,    -1,    -1,    -1,  2013,  2014,  2015,  2016,    -1,
      -1,    -1,    -1,    -1,    -1,  1603,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1168,    -1,
      -1,    -1,    -1,  2183,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1182,  1183,  1184,  1185,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1200,  1201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2084,  2085,    -1,    -1,
      -1,    -1,    -1,   904,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1700,    -1,    -1,    -1,  1704,  1705,  1706,    -1,
      -1,    -1,   943,    -1,    -1,    -1,    -1,  1715,    -1,    -1,
    1270,    -1,  1720,  1721,    -1,    -1,    -1,  1277,    -1,  1727,
      -1,  1281,   963,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
    1748,  1749,    -1,  1751,  1752,    -1,    -1,    -1,  1756,  1757,
    1758,  1759,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1772,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    -1,
    1788,    -1,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,    -1,    -1,    -1,    -1,  1815,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   145,    88,    -1,    -1,  1070,
    1071,    -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,    -1,
      -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,
      -1,   191,   192,    -1,    -1,    -1,    -1,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1894,  1895,    -1,  1897,
    1898,  1899,  1900,  1901,  1902,  1903,  1904,   159,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1928,  1929,    -1,    -1,  1484,    -1,    -1,    -1,    -1,    -1,
    1938,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1512,  1513,    -1,   275,    -1,    -1,   278,   279,
     280,  1202,    -1,  1204,    -1,    -1,    -1,    -1,   288,    -1,
      -1,  1531,    -1,  1533,    -1,    -1,    -1,    -1,   298,   299,
     300,    -1,    -1,    -1,  1992,    -1,    -1,    -1,  1996,  1997,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,
      -1,    -1,    -1,    -1,   324,    -1,  1566,  1567,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,  1603,    -1,    -1,    -1,    -1,  1608,  1609,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,  1618,    -1,
    1620,  1621,    -1,    -1,  1624,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1632,    -1,    -1,  1635,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,   205,    -1,    -1,
      72,    73,    74,  2111,    -1,    -1,    -1,    -1,    -1,   429,
      -1,    -1,    -1,    85,    86,   435,    -1,    -1,    -1,    -1,
      -1,  2129,    -1,    -1,    -1,    -1,   446,    99,    -1,    -1,
     392,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
      -1,   481,   134,   135,   136,   137,   138,   139,   140,   431,
     432,    -1,    -1,    -1,   436,  2183,    -1,    -1,   498,    -1,
      -1,    -1,    -1,   445,    -1,    -1,   448,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   310,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   319,    -1,    -1,    -1,    -1,    -1,   325,    -1,    -1,
     482,    -1,   542,  1464,    -1,    -1,   488,    -1,  1788,   549,
      -1,    -1,   552,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1806,    -1,  1808,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,  1832,    -1,  1834,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   397,
      -1,   399,    -1,    -1,    -1,    -1,    -1,  1857,  1858,  1859,
    1860,    -1,    -1,  1863,    -1,    -1,   568,  1867,  1868,    -1,
    1870,    -1,  1872,    -1,    -1,    -1,   578,    -1,    -1,    -1,
      -1,    -1,   188,    -1,  1884,    -1,    -1,    -1,  1569,    -1,
      -1,    -1,    -1,   653,    -1,    -1,   598,    -1,    -1,   601,
      -1,   603,    -1,   605,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   678,   679,
     680,   681,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   706,   707,   708,    -1,
      -1,   711,    -1,    -1,    -1,    -1,    -1,   717,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   725,    -1,    -1,    -1,    -1,
      -1,    -1,   732,   733,   734,    -1,   736,   737,    -1,    -1,
      -1,    -1,    -1,   743,    -1,    -1,   746,    -1,    -1,    -1,
      -1,    -1,   298,    -1,   542,   755,    -1,    -1,   758,  1999,
    2000,  2001,  2002,  2003,    -1,   765,    -1,    -1,   768,    -1,
      -1,    -1,    -1,  2013,  2014,  2015,  2016,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2024,    -1,    -1,    -1,    -1,    -1,
      -1,   579,    -1,  2033,    -1,  2035,    -1,    -1,    -1,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2084,  2085,    -1,    -1,   848,    -1,
      -1,  2091,  2092,   641,   335,  2095,    -1,  2097,    -1,   405,
    2100,    -1,    -1,    -1,  2104,   411,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   883,    -1,    -1,    -1,    -1,    53,    54,
      -1,   891,   892,    -1,    -1,    -1,    -1,    -1,  2138,   899,
      -1,    -1,   902,   903,   904,    -1,   906,    -1,    -1,   851,
     852,   853,    -1,    -1,  1835,    -1,    -1,    -1,    -1,    -1,
      85,    86,    -1,    -1,   712,    90,    -1,  2167,    -1,    -1,
      -1,    96,   874,   875,   876,   481,    -1,    -1,   103,   104,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,   957,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   447,    -1,    -1,   134,
     758,    -1,    -1,   973,    -1,    -1,    -1,   765,    -1,    -1,
     768,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,   543,    -1,    -1,
     546,    -1,    -1,    -1,    -1,    -1,    -1,   949,    -1,    -1,
      28,    -1,    -1,   559,    -1,    -1,  1016,  1017,  1018,    -1,
      -1,    -1,   187,    -1,  1024,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   974,    -1,   580,    -1,    -1,   202,    -1,   981,
     982,    -1,    -1,    -1,    -1,    -1,    -1,   593,    -1,    67,
      -1,    -1,   994,    -1,    72,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,   228,    -1,    -1,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
     275,   129,    -1,    -1,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,   288,  1124,    -1,    -1,  1127,    -1,    -1,
    1130,    -1,    -1,   298,    -1,   300,    -1,    -1,    -1,    -1,
      -1,  1083,    -1,  1143,    -1,    -1,  1088,    -1,    -1,    -1,
      -1,    -1,  1094,    -1,   942,    -1,   944,    -1,  1100,   705,
      -1,    -1,    -1,    -1,  1106,   711,    -1,    -1,  1168,    -1,
     651,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1182,  1183,  1184,  1185,   667,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   983,    -1,   678,   679,   680,
     681,    -1,    -1,    -1,    -1,  1205,    -1,  1207,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1221,    -1,    -1,  1224,    -1,    -1,    -1,  1016,    -1,
    1018,    -1,    -1,    -1,    -1,    -1,   717,    -1,    -1,   720,
      -1,    -1,    -1,    -1,  1244,    -1,    -1,    -1,    -1,    -1,
      -1,  1251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   743,    -1,   429,    -1,    -1,    -1,   749,  1269,
    1270,    -1,    -1,    -1,    -1,    -1,  1276,  1277,    -1,    -1,
    1280,  1281,   447,  1225,  1226,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   776,  1084,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   481,    -1,    -1,   484,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   814,    -1,    -1,  1124,    -1,    -1,    -1,
      -1,   822,    -1,    -1,    -1,    -1,   892,  1135,    -1,    -1,
      -1,    -1,    -1,   899,    -1,    -1,   521,    -1,    -1,    -1,
      -1,   842,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   537,   538,   539,   540,   541,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   557,   558,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   952,    -1,    -1,    -1,
      -1,   957,    -1,   578,    -1,   580,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   904,    -1,    -1,   591,   973,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1227,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1249,    -1,    -1,   629,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,  1024,    -1,
    1422,  1423,  1270,    -1,  1484,    -1,    -1,  1487,    -1,  1277,
      -1,    -1,    -1,  1281,    -1,    -1,  1438,    28,    -1,    -1,
    1442,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,  1071,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1080,    -1,  1082,    68,    -1,   704,
      -1,    -1,    -1,    -1,    75,    76,   711,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,  1505,    -1,    -1,    -1,   732,    -1,    -1,
     101,   736,    -1,    -1,    -1,  1517,  1518,  1519,  1520,    -1,
     111,   112,   113,   114,   115,   116,    -1,    -1,  1588,    -1,
     755,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1602,  1603,    -1,    -1,    -1,    -1,  1608,  1609,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1621,    -1,    -1,  1624,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1632,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1127,    -1,    -1,  1130,
    1131,  1132,    -1,  1134,    -1,    -1,  1202,    -1,  1204,    -1,
      -1,  1142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1150,
      -1,    -1,    -1,    -1,    -1,    -1,  1157,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1168,    -1,    -1,
      -1,    -1,    -1,    -1,  1175,    -1,  1484,    -1,    -1,  1180,
      -1,  1182,  1183,  1184,  1185,    -1,  1494,    -1,    -1,    -1,
      -1,   876,   877,    -1,    -1,    -1,    -1,    -1,   883,    -1,
      -1,    -1,  1510,  1723,    -1,  1667,   891,   892,    -1,    -1,
    1211,    -1,  1213,    -1,   899,    -1,    -1,   902,   903,   904,
      -1,    -1,    -1,  1531,    -1,  1533,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1700,    -1,
    1702,    -1,  1550,  1705,  1245,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   943,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   951,  1787,  1788,    -1,
      -1,    -1,   957,    -1,    -1,    95,    -1,    -1,   963,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   973,    -1,
    1291,  1811,    -1,    -1,    -1,  1603,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1772,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1024,
      -1,    -1,  1343,    -1,    -1,    -1,    -1,  1867,  1868,    -1,
      -1,    -1,    -1,    -1,    -1,  1356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   191,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1450,  1070,    -1,    -1,    -1,    -1,
      -1,  1457,    -1,    -1,  1079,    -1,  1704,    -1,  1706,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1407,    -1,   228,    -1,
    1930,    -1,  1720,  1721,    -1,    -1,    -1,    -1,    -1,  1485,
      -1,  1487,    -1,    -1,  1490,    -1,    -1,  1493,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1748,  1749,    -1,  1751,  1752,    -1,    -1,    -1,  1756,  1757,
    1758,  1759,    -1,    -1,    -1,   275,    -1,    -1,   278,   279,
     280,    -1,    -1,    -1,    -1,    -1,  1928,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
    1788,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,
      -1,    -1,    -1,  1569,   324,    -1,    -1,    -1,    -1,    -1,
      -1,  1577,    -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,
      -1,    -1,  1588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1221,    -1,    -1,  1224,
      -1,  1226,  2004,    -1,  2006,    -1,    -1,    -1,    -1,  1234,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1244,
       1,    -1,     3,     4,     5,     6,  1251,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,  1897,
    1898,  1899,  1900,  1901,  1902,  1903,  1904,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1608,  1609,   429,
      -1,    -1,    -1,  1614,    -1,  1616,    -1,    -1,  1619,  1620,
      -1,  1929,    -1,    -1,  1625,  1626,    67,  1628,    95,    -1,
    1938,    72,    73,    74,    -1,    -1,    -1,  1638,    -1,  1640,
      -1,    -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,   481,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,  1672,    -1,    -1,    -1,  1676,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,  1992,   126,    -1,    -1,  1996,  1997,
     131,    -1,    -1,   134,   135,   136,   137,   138,   139,   140,
      -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1776,  1777,    -1,  1779,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   542,    -1,   191,   192,    -1,    -1,    -1,   549,
      -1,    -1,   552,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   228,    -1,    -1,  1449,    -1,    -1,    -1,    -1,  1835,
      -1,  1456,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1464,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1485,    -1,  1487,    -1,    -1,    -1,    -1,    -1,   275,    -1,
      -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1845,    -1,    -1,    -1,    -1,    -1,
      -1,   318,    -1,    -1,    -1,    -1,    -1,   324,   678,   679,
     680,   681,  1863,  1864,    -1,    -1,    -1,    -1,   335,    -1,
    1871,    -1,    -1,   338,  1875,    -1,  1877,    -1,    -1,    -1,
      -1,    -1,    -1,  1568,    -1,  1886,   706,   707,   708,    -1,
     355,    -1,    -1,    -1,    -1,    -1,    -1,   717,    -1,    -1,
      -1,    -1,    -1,  1588,    -1,   725,    -1,    -1,    -1,    -1,
      -1,    -1,   732,   733,   734,    -1,   736,   737,    -1,    -1,
      -1,    -1,    -1,   743,    -1,    -1,   746,    -1,    -1,  1930,
      -1,    -1,    -1,    -1,    -1,   755,    -1,    -1,   758,    -1,
      -1,    -1,    -1,    -1,    -1,   765,    -1,    -1,   768,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1694,
      -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,    -1,    -1,
      -1,   335,    -1,    -1,  2025,  2026,    -1,  2028,   848,  2030,
      -1,    -1,  2033,  2034,  2035,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,   521,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   883,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   892,    -1,    -1,   542,    -1,    -1,    -1,   899,
      -1,    -1,   549,  1768,   904,   552,   906,    -1,    -1,    -1,
      54,    -1,  2093,    -1,    -1,  2096,    -1,    61,    -1,    -1,
      -1,    -1,    -1,  2104,    -1,  1790,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,    86,    -1,    85,    86,  1811,    -1,    -1,    -1,
      -1,    -1,    -1,   447,    -1,    -1,    -1,   957,    99,    -1,
    2141,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,   973,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,
     134,   135,    -1,   134,   135,   136,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   651,   151,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1016,  1017,  1018,    -1,
      -1,    -1,    -1,   167,  1024,    -1,    -1,    -1,    -1,    -1,
      -1,   678,   679,   680,   681,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   188,  1910,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   706,
     707,   708,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     717,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   725,    -1,
      -1,    -1,    -1,   227,   228,   732,   733,   734,    -1,   736,
     737,    -1,    -1,    -1,    -1,    -1,   743,    -1,    -1,   746,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   755,    -1,
      -1,   758,    -1,    -1,    -1,    -1,    -1,    -1,   765,    -1,
      -1,   768,    -1,    -1,  1124,    -1,    -1,  1127,    -1,   774,
    1130,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   788,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   298,    -1,    -1,   651,    -1,    -1,
      -1,    -1,   807,   808,   809,   810,   811,    -1,  1168,   814,
     815,    -1,    -1,   667,    -1,   820,    -1,   671,   823,    -1,
      -1,    -1,  1182,  1183,  1184,  1185,    -1,    -1,    -1,    -1,
     835,   836,   837,   838,   839,    -1,    -1,   842,   843,    -1,
      -1,   848,    -1,    -1,    -1,  1205,    -1,  1207,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1221,    -1,   717,  1224,    -1,   720,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,   883,    -1,    -1,    -1,
     734,    -1,    -1,    -1,  1244,   892,    -1,    -1,    -1,   743,
      -1,  1251,   899,    -1,    28,   749,   750,   904,    -1,   906,
      -1,   405,    -1,    -1,    -1,    -1,    -1,   411,    -1,  1269,
    1270,    -1,    -1,    -1,    -1,    -1,  1276,  1277,    -1,    -1,
    1280,  1281,   776,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,   447,    -1,    -1,    -1,    -1,    -1,    -1,
     957,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     814,    -1,    -1,    -1,    -1,    99,   973,    -1,   822,   103,
     104,   105,   106,   107,   108,   109,   110,   481,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,   842,    -1,
     124,   125,   126,   497,    -1,   129,    -1,    -1,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,  1016,
    1017,  1018,    -1,    -1,    -1,    -1,    -1,  1024,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   537,   538,   539,   540,   541,    -1,   543,
      -1,    -1,   546,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     904,    -1,    -1,   557,   558,   559,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   576,    -1,   578,    -1,   580,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   593,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1124,    -1,    -1,
    1127,    -1,    -1,  1130,  1484,    -1,    -1,  1487,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1168,    -1,    -1,    -1,  1170,    -1,    -1,    -1,    -1,
      -1,    -1,  1177,    -1,    -1,  1182,  1183,  1184,  1185,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   697,    -1,    -1,    -1,    -1,  1205,    -1,
    1207,   705,    -1,    -1,    -1,    -1,  1211,   711,  1213,    -1,
      -1,    -1,    -1,    -1,  1221,    -1,    -1,  1224,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1588,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1244,    -1,    -1,
      -1,    -1,  1602,  1603,  1251,    -1,    -1,    -1,  1608,  1609,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1621,  1269,  1270,  1624,    -1,    -1,    -1,  1273,  1276,
    1277,    -1,  1632,  1280,  1281,    -1,    -1,  1131,  1132,    -1,
    1134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1142,    -1,
      -1,  1145,    -1,    -1,    -1,    -1,  1150,    -1,    -1,    -1,
      -1,    -1,    -1,  1157,  1158,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1175,  1176,    -1,    -1,    -1,  1180,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1211,    -1,  1213,
      -1,    -1,    -1,  1723,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    54,    -1,    -1,    -1,   890,    -1,   892,    -1,
      -1,  1245,    -1,    -1,    -1,   899,    -1,    -1,    -1,    -1,
     904,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1787,  1788,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1291,  1292,   943,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   952,    -1,
      -1,  1811,    -1,   957,    -1,    -1,    -1,    -1,    -1,   963,
      -1,    -1,   134,   135,    -1,    -1,    -1,    -1,    -1,   973,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1484,    -1,    -1,
    1487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1343,
      -1,  1345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1356,  1357,    -1,    -1,    -1,  1867,  1868,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,
    1024,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1407,    -1,  1409,   228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1070,  1071,    -1,    -1,
    1930,    -1,    -1,    -1,    -1,    -1,  1080,    -1,  1082,    -1,
      -1,  1588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1602,  1603,     3,    -1,    -1,
      -1,  1608,  1609,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1621,    -1,   288,  1624,    -1,    -1,
      -1,    -1,    28,    95,    -1,  1632,   298,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,   145,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,   157,    -1,    -1,    -1,   161,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,  1202,    -1,
    1204,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,    -1,    -1,    -1,    -1,   121,  1723,    -1,   124,   191,
     192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,   405,    -1,    -1,    -1,  1742,    -1,   411,
    1594,    -1,  1747,  1748,  1749,  1750,  1751,  1752,    -1,    -1,
      -1,  1756,  1757,  1758,  1759,    -1,   228,    -1,    -1,    -1,
    1614,  1615,  1616,  1617,    -1,  1619,  1620,    -1,    -1,    -1,
      -1,  1625,  1626,    -1,  1628,   447,  1630,    -1,    -1,    -1,
    1787,  1788,    -1,    -1,  1638,  1639,  1640,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   275,  1811,    -1,   278,   279,   280,   481,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1672,    -1,
    1674,    -1,  1676,    -1,  1678,    -1,    -1,   299,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   318,    -1,    -1,    -1,
      -1,    -1,   324,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1867,  1868,    -1,    -1,    -1,   537,   538,   539,   540,   541,
      -1,   543,    -1,    -1,   546,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   557,   558,   559,    -1,    -1,
      -1,    -1,  1897,  1898,  1899,  1900,  1901,  1902,  1903,  1904,
      -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,   580,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   593,    -1,  1930,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1450,    -1,    -1,    -1,
      -1,    -1,    -1,  1457,    -1,    -1,    -1,   429,    -1,    -1,
    1464,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   446,    -1,    -1,    -1,    -1,    -1,
      -1,  1485,    -1,  1487,    -1,    -1,  1490,    -1,   145,  1493,
      -1,  1845,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     157,    -1,    -1,    -1,   161,    -1,    -1,    -1,    -1,   481,
    1864,    -1,    -1,    -1,    -1,  1869,    -1,  1871,  1872,    -1,
    1874,  1875,    -1,  1877,    -1,  1879,   498,    -1,    -1,    -1,
      -1,  1885,  1886,   705,   191,   192,    -1,    -1,    -1,   711,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1569,    -1,    -1,    -1,    -1,
     542,    -1,    -1,  1577,    -1,    -1,  1930,   549,    -1,    -1,
     552,    -1,    -1,    -1,  1588,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,
      -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   318,    -1,    -1,    -1,    -1,    -1,   324,    -1,    -1,
      -1,  2025,  2026,    -1,  2028,  2029,  2030,    -1,    -1,    -1,
    2034,  2035,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   678,   679,   680,   681,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
     892,    -1,    -1,    -1,    -1,    -1,    -1,   899,    -1,    -1,
      -1,    -1,   904,    -1,   706,   707,   708,    28,    -1,  2093,
    2094,    -1,  2096,  2097,    -1,    -1,    -1,  2101,    -1,    -1,
      -1,    -1,    -1,   725,    -1,    -1,    -1,    -1,    -1,    -1,
     732,   733,    -1,    -1,   736,   737,    -1,    -1,    -1,    -1,
      -1,   943,  1776,  1777,    -1,  1779,    67,    -1,   435,    -1,
     952,    72,    73,    74,    -1,   957,   758,  2141,    -1,   446,
      -1,   963,    -1,   765,    85,    86,   768,    -1,    -1,    -1,
      -1,   973,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,  1835,    -1,   124,   125,   126,   127,    -1,   129,    -1,
      -1,   498,    -1,   134,   135,    -1,   137,   138,   139,   140,
      -1,    -1,  1024,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,   848,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,    -1,    -1,
      -1,    -1,   549,    -1,    -1,   552,    -1,    28,  1070,  1071,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1080,    -1,
    1082,   883,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   891,
     892,    -1,    -1,    -1,    -1,    -1,    -1,   899,    -1,    -1,
     902,    -1,    -1,    -1,   906,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,   957,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,   127,    -1,   129,    -1,
      -1,   973,    -1,   134,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   678,   679,   680,   681,    -1,    -1,    -1,    -1,    -1,
    1202,    -1,  1204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1016,  1017,  1018,    -1,    -1,   706,
     707,   708,  1024,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   725,    -1,
      -1,    -1,    -1,    -1,    -1,   732,   733,    -1,    -1,   736,
     737,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   758,    -1,    -1,    -1,    -1,    -1,    -1,   765,    -1,
      -1,   768,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   157,    -1,    -1,    28,   161,
      -1,    -1,  1124,    -1,    -1,  1127,    -1,    -1,  1130,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,
     192,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,    -1,  1168,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    85,    86,    -1,    -1,    -1,
    1182,  1183,  1184,  1185,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,  1205,   891,  1207,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   902,   126,    -1,    -1,   129,
     130,   131,  1224,    -1,   134,   135,    -1,   137,   138,   139,
     140,    -1,    -1,   275,    -1,    -1,   278,   279,   280,    -1,
      -1,    -1,  1244,    -1,    -1,    -1,    -1,    -1,  1450,  1251,
      -1,    -1,    -1,    -1,    -1,  1457,    -1,   299,    -1,    -1,
      -1,    -1,  1464,    -1,    -1,    -1,    -1,  1269,  1270,    -1,
      -1,    -1,    -1,    -1,  1276,  1277,   318,    -1,  1280,  1281,
      -1,    -1,   324,  1485,    -1,  1487,    -1,    -1,  1490,    -1,
      -1,  1493,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1016,
    1017,  1018,    -1,    -1,    -1,    -1,    -1,  1024,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,  1569,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1577,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1588,    -1,    -1,    -1,
      99,    -1,    -1,   435,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,   446,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,    -1,    -1,   132,    -1,   134,   135,    -1,   137,   138,
     139,   140,   141,   142,   143,   144,   145,  1124,    -1,    -1,
    1127,    -1,    -1,  1130,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1168,  1484,    -1,    -1,  1487,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1182,  1183,  1184,  1185,    -1,
     542,    -1,    -1,    -1,    -1,    -1,    -1,   549,    -1,    -1,
     552,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1205,    -1,
    1207,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1224,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1244,    -1,    -1,
      -1,    -1,    -1,    -1,  1251,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1776,  1777,    -1,  1779,    -1,    -1,
      -1,    -1,  1269,  1270,    -1,    -1,  1588,    -1,    -1,  1276,
    1277,    -1,    -1,  1280,  1281,    -1,    -1,    -1,    -1,    -1,
    1602,  1603,    -1,    -1,    -1,    -1,  1608,  1609,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1621,
      -1,    -1,  1624,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1632,    -1,    -1,  1835,    -1,    -1,   678,   679,   680,   681,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   706,   707,   708,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   725,    -1,    -1,    -1,    -1,    -1,    -1,
     732,   733,    -1,    -1,   736,   737,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   758,    -1,    -1,    -1,
      -1,    -1,    -1,   765,    -1,    -1,   768,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1787,  1788,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1484,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1811,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   891,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
     902,    -1,    -1,    -1,    -1,  1867,  1868,   119,   120,   121,
     122,   123,   124,   125,   126,    -1,   128,   129,    -1,    -1,
     132,    -1,   134,   135,    -1,   137,   138,   139,   140,   141,
     142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1602,  1603,    -1,    -1,    -1,
      -1,  1608,  1609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1621,    -1,    -1,  1624,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1632,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1016,  1017,  1018,    -1,    -1,    -1,
      -1,    -1,  1024,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,  1124,    -1,    -1,  1127,    -1,    -1,  1130,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
    1787,  1788,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,   122,   123,   124,    -1,    -1,   127,
     128,   129,   130,    -1,   132,    -1,  1168,   135,    -1,   137,
     138,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
    1182,  1183,  1184,  1185,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1205,    -1,  1207,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1867,  1868,  1224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1244,    -1,    -1,    -1,    -1,    -1,    -1,  1251,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1269,  1270,    -1,
      -1,    -1,    -1,    -1,  1276,  1277,    -1,    -1,  1280,  1281,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,    -1,    -1,    -1,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,  1484,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1602,  1603,    -1,    -1,    -1,    -1,  1608,  1609,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1621,
      -1,    -1,  1624,    -1,    -1,    -1,    -1,    -1,     0,     1,
    1632,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1787,  1788,    -1,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,  1867,  1868,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,    -1,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,   126,   127,    -1,   129,   130,   131,
     132,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,   125,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,   125,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    89,    90,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,     1,   126,     3,     4,     5,     6,    -1,     8,     9,
     134,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,     1,   126,     3,     4,     5,
       6,    -1,     8,     9,   134,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,    -1,   119,   120,   121,    -1,    -1,   124,     1,
     126,     3,     4,     5,     6,   131,     8,     9,   134,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    99,    -1,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    28,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    89,    90,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,   127,    -1,   129,    -1,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    89,    90,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    89,    90,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    89,    90,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,
     129,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,   127,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,   127,    -1,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,   129,   130,   131,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,   127,    -1,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
      -1,    -1,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,   127,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
     129,    -1,    -1,    -1,    -1,   134,   135,   136,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,   129,    -1,    -1,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,   129,    -1,
      -1,    -1,    -1,   134,   135,   136,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,   129,    -1,    -1,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,
     129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
     127,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
      -1,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,   129,    -1,    -1,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,   129,    -1,
      -1,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,
     129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,   127,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,   130,   131,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,    -1,   130,   131,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,
     129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,   130,   131,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
      -1,    -1,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,   136,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,   136,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,    -1,   131,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,
     131,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,
     131,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,    -1,   131,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
      -1,    -1,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,
     131,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    28,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,
      -1,    -1,   131,    -1,    -1,   134,   135,    -1,   137,   138,
     139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    28,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,   140,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
       0,     1,    -1,     3,     4,     5,   119,   120,   121,    -1,
      -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,   125,   126,   127,    -1,   129,
     130,    -1,    -1,    -1,   134,   135,     0,     1,    -1,     3,
       4,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,    -1,    -1,    -1,
     134,   135,     0,     1,    -1,     3,     4,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
       0,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,     0,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,     0,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,     3,
       4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      -1,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    -1,    86,    87,    88,    89,    -1,    -1,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,     1,   130,     3,     4,     5,
     134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,     1,   130,     3,     4,     5,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    89,    -1,    -1,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,     1,   130,     3,     4,     5,   134,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
      -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,
     130,     3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    -1,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    89,    -1,    -1,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
      -1,    -1,   124,    -1,   126,   127,     1,    -1,     3,     4,
       5,    -1,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,     1,   121,     3,    -1,   124,
      -1,   126,   127,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,     1,   121,     3,    -1,   124,   125,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,     3,    -1,   121,    -1,    -1,   124,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,     3,    -1,
     121,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,    -1,   137,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,     3,    -1,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
       3,    -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    -1,    -1,    -1,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,     3,    -1,   121,    -1,
      -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,    -1,
      -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,     3,    -1,   121,    -1,    -1,   124,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,     3,    -1,
     121,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,     3,    -1,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
       3,    -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    78,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,   106,    -1,    -1,     3,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     133,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    79,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,     1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,     1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   127,    -1,   129,   130,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,     1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,     1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,     0,     1,    -1,     3,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      77,    78,    -1,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,   102,     3,    -1,    -1,   106,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,    -1,
     127,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,     3,
      -1,   108,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,     3,    -1,   108,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,     1,    -1,     3,    -1,   108,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,   124,    -1,    -1,   127,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,    -1,
     127,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
      -1,   127,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      -1,    -1,   127,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,   102,    -1,     0,
       1,   106,     3,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,    -1,   124,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,   101,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,   125,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
     125,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,   101,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,   125,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,    -1,   124,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,   124,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,    -1,   124,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,   124,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,   124,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,   124,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    81,    82,    -1,    -1,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,   125,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   131,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    55,    67,    68,
      75,    76,    77,    78,    80,    81,    82,    83,    84,    86,
      87,    88,   101,   102,   106,   111,   112,   113,   114,   115,
     116,   117,   118,   121,   124,   127,   147,   148,   149,   151,
     176,   213,   214,   215,   216,   217,   218,   270,   273,   274,
     277,   278,   279,   280,   281,   282,   283,   285,   289,   292,
     293,   294,   295,   296,   297,   302,   303,   312,   313,   314,
     321,   322,   326,   327,   330,   335,   365,   368,   369,   387,
     388,   390,   391,   392,   393,   394,   395,    78,   133,     5,
      31,   218,   389,   218,   124,   124,   124,   151,   218,   389,
     283,   284,   321,   330,    37,   149,   218,   311,   312,   314,
     316,   317,   318,   320,   321,   330,   333,   334,   339,   122,
     127,   148,   149,   218,   131,   133,   127,   131,   130,   121,
     122,   213,   218,   131,   151,   218,   131,   133,   130,   122,
     131,   133,   131,   130,   131,   149,   218,   321,     1,    31,
      37,    38,    39,    40,   127,   147,   149,   215,   217,   218,
     270,   280,   281,   283,   285,   314,   318,   321,   330,   333,
     334,   335,   337,   346,   347,   348,   349,    37,    38,    39,
      40,   149,   321,   348,   124,   135,     1,    29,    30,    31,
      32,    33,    67,   117,   118,   125,   147,   218,   269,   273,
     275,   276,   283,   285,   289,   290,   291,   297,   301,   309,
     310,   352,   353,   354,   355,   356,   357,   330,   124,   326,
     314,   321,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    48,    49,    68,    86,    88,   101,
     113,   114,   115,   116,   131,   151,   172,   173,   269,   274,
     275,   283,   286,   290,   292,   300,   367,   370,   371,   372,
     377,   378,   379,    31,    77,   133,   215,   217,   302,   368,
     369,   387,   388,   395,     1,   215,   279,   296,   302,   335,
     365,   391,     1,   390,   391,     0,   218,   389,   389,     5,
     128,   389,     1,     4,     6,     8,     9,    67,    72,    73,
      74,    85,    86,    99,   103,   104,   105,   106,   107,   108,
     109,   110,   119,   120,   121,   124,   126,   134,   135,   137,
     138,   139,   140,   151,   177,   178,   218,   219,   220,   221,
     222,   225,   226,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   389,   401,   402,   403,   404,
     148,   218,   131,   151,   218,   283,   330,   135,   124,   135,
     125,   309,   310,   356,   357,   330,   333,   334,   311,   316,
     320,   321,   125,   321,   125,   321,   321,    86,   151,   203,
     205,   207,   211,   212,   218,   230,   235,   251,   255,   301,
     127,   122,   122,   127,     1,    69,    79,    81,    82,    89,
      92,    93,    94,    95,    97,    99,   100,   124,   126,   127,
     130,   152,   153,   154,   155,   156,   157,   158,   159,   174,
     175,   177,   178,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   194,   198,   199,   200,   201,   218,   226,
     249,   301,   313,   315,   321,   330,   335,   336,   366,    81,
      82,   218,   269,   273,   283,   286,   289,   297,   304,   305,
       1,   130,   200,   201,   149,   218,     1,   218,   271,   272,
       1,   130,   272,   305,    67,   204,   206,   208,   209,   210,
     218,   301,     1,   130,   200,   201,   305,     1,   130,   200,
     201,     1,   130,   200,   201,   149,   218,   129,   129,   129,
     129,   129,   131,   330,   314,   318,   321,     1,   128,   371,
     378,   379,   371,   378,   379,     1,   127,   129,   129,   330,
     127,   136,   148,   218,   244,   263,   267,   268,   129,   131,
     151,   218,   130,   131,   130,   131,   321,    37,   124,   135,
     137,   147,   149,   218,   269,   275,   283,   285,   290,   311,
     312,   321,   328,   330,   331,   334,     1,   125,   129,     1,
     125,   129,     1,   129,     1,   129,   125,   125,   314,   124,
     314,   124,   124,     1,   127,     1,   130,     1,    37,    38,
      39,    40,   127,   218,   269,   275,   283,   286,   290,   321,
     348,   349,     1,   127,     1,   367,   370,   378,   379,   367,
     370,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    86,    87,    89,    90,    91,   127,   133,   151,
     195,   196,   197,   218,   226,   230,   245,   247,   251,   263,
     264,   265,   326,   358,   359,   362,   363,   364,   371,   372,
     373,   374,   375,   376,   378,   379,   381,   382,   383,   384,
     385,   386,   130,    31,   218,   389,   218,   213,   214,   216,
     217,   311,   312,   318,   321,   330,   335,   337,   371,   379,
     215,   302,   128,   243,   244,   262,   125,   124,   230,   251,
     124,   230,   251,   230,   251,   124,   218,   269,   275,   283,
     286,   290,   308,   267,   124,   124,   308,   267,   124,   124,
     124,   124,   124,   124,   230,   251,   124,   125,   245,   247,
     265,   275,   283,   285,   290,   298,   350,   389,   131,   136,
     179,   180,   223,   227,   245,   131,     1,   130,   131,   218,
       1,     7,     8,     9,   124,   132,   135,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,   128,   246,   180,
     223,   224,   232,   252,   121,   141,   142,   138,   139,    10,
      11,   235,   255,    12,    13,   122,   123,    14,    15,   137,
     143,   144,    16,    17,   145,   246,   125,     7,     8,     9,
     124,   132,   135,   246,   121,   141,   142,   138,   139,    10,
      11,    12,    13,   122,   123,    14,    15,   137,   143,   144,
      16,    17,   145,   246,   125,   125,   108,   218,   301,   396,
     399,   400,   131,   131,   136,   148,   267,   268,   136,   148,
     267,   268,   125,   125,   125,   125,   311,   316,   320,   125,
     125,   311,    11,   123,   129,   128,   124,   321,   330,   331,
      67,   210,   218,   301,   210,     1,   218,   269,   283,   286,
     297,   306,   301,   335,   336,   124,   151,   218,   218,   301,
       1,   124,   306,   121,   124,   218,   301,   127,   326,   378,
     379,   378,   379,   378,   127,   378,   379,   127,     1,   130,
       1,     1,   127,   129,   129,    70,    71,    92,    96,    98,
     130,    70,    71,   130,   127,     1,   198,   199,     1,   198,
     199,     1,   128,   124,   133,   218,   287,   288,   311,   317,
     319,   321,   330,   337,   338,   339,     1,   301,   309,   354,
     330,   315,   321,   124,   133,   158,   159,   174,   175,   177,
     178,   187,   218,   301,   122,   151,   218,   218,   269,   283,
     286,   122,   122,   128,   326,   327,   129,     1,   127,   131,
      28,   150,   218,   123,   129,   128,   218,   331,   333,   346,
     346,   346,   346,   346,   127,   129,   130,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   223,
     224,   226,   244,   263,   300,   343,   344,   311,   314,   316,
     318,   320,   311,   318,   131,   245,   264,   340,   342,   378,
     379,   378,   379,   346,   347,   346,   347,   136,   136,   136,
      53,   352,   353,     1,   272,   131,   131,     1,   130,   200,
     201,     1,   130,   200,   201,   131,   125,   218,   309,   310,
     321,   330,   331,   356,   357,   136,   148,   267,   268,   321,
     330,   334,   330,   124,   135,   328,     1,     1,   129,     1,
      53,   218,   352,   353,   129,     1,    53,   218,   352,   353,
     129,     1,    53,   218,   352,   353,   129,    53,   218,   352,
     353,     3,    28,    46,    75,    76,   125,   323,   324,   325,
     245,   148,   218,   130,   131,   127,   127,   133,   267,   268,
     133,   124,   124,     1,   124,    54,    55,    56,    58,    59,
      60,    61,    64,    87,   218,   265,   326,   358,   381,   385,
     124,   218,   127,   127,   127,   223,   224,   247,   265,   124,
     283,   124,   124,   191,   218,   127,   127,   127,   133,   132,
     246,     1,   132,   127,   129,   247,   265,   246,   125,   129,
     247,     1,   373,   374,   373,   374,   358,   359,   367,   370,
     358,   359,   367,   370,     1,     1,   389,   389,   149,   218,
     131,   131,   330,   318,   321,   371,   379,   371,   379,   379,
     244,   145,   127,   145,    67,   147,   218,   275,   283,   285,
     290,   299,   351,   218,   300,   122,   124,   135,   218,   269,
     275,   283,   286,   290,   321,   329,   330,   332,   218,   269,
     275,   283,   286,   290,   307,   247,   350,   378,   218,   135,
     332,   307,   245,   389,   389,   389,   245,   351,   351,   125,
     218,   275,   283,   285,   290,   331,   125,   132,     1,   170,
     171,     1,   130,   129,   136,     1,   170,   171,   130,     1,
     170,   171,     1,   218,   125,   224,   227,   228,   264,     1,
     218,   247,   265,   223,   245,     1,   232,   252,   232,   252,
     232,   252,   233,   253,   233,   253,   234,   254,   234,   254,
     235,   255,   235,   255,   235,   255,   223,   224,   237,   256,
     223,   224,   237,   256,   223,   224,   238,   257,   223,   224,
     239,   258,   223,   224,   240,   259,   241,   260,   242,   261,
     133,   223,   224,   247,   248,   265,   266,   223,   245,     1,
     218,   125,   227,   228,     1,   218,   247,   265,   223,   245,
     232,   252,   232,   252,   232,   252,   233,   253,   233,   253,
     234,   254,   234,   254,   235,   255,   235,   255,   235,   255,
     235,   255,   223,   224,   237,   256,   223,   224,   237,   256,
     223,   224,   238,   257,   223,   224,   239,   258,   223,   224,
     240,   259,   241,   260,   242,   261,   133,   247,   248,   265,
     266,   223,   245,   122,   123,   218,   397,   398,   218,   130,
     396,   399,   400,   400,   136,   136,   136,   136,   136,   136,
     211,   203,   205,   207,   218,   321,   330,   123,   128,   331,
     123,   131,   122,   131,   218,   269,   283,   286,   331,   321,
     330,   337,   338,   191,   288,   311,   321,   330,   131,   218,
     131,   218,   331,   218,   321,   124,   127,   130,   181,   182,
     181,   182,   378,   378,   378,   220,   378,   378,     1,   343,
     344,   125,   267,   268,   131,   129,     1,   301,   309,   354,
     330,   311,   319,   321,   133,   326,   218,   124,   315,   315,
     218,     1,     1,   288,   212,   122,   210,   210,   267,   268,
     128,   271,   200,   201,     1,   130,   272,   128,   133,   128,
     133,   209,   205,   218,   128,   218,   128,   378,   379,     1,
     127,   129,   127,   129,   127,   162,   163,   166,   167,   168,
     130,   160,   163,   127,   130,   162,   163,   166,   167,   168,
     128,    37,   337,   338,   339,   340,   342,   345,     1,   130,
     272,     1,   130,   272,     1,   130,   200,   201,   321,   330,
     331,   125,   125,   125,   136,   136,   136,   330,   328,   125,
     356,   357,   136,   148,   267,   268,   352,   353,   301,   352,
     352,   352,   353,   125,   124,   125,   129,   324,   125,   125,
     125,     1,   170,   171,   358,   359,   367,   370,   133,   133,
     358,   359,   367,   370,   247,   265,   247,   265,   125,   247,
     265,   133,   267,   268,   133,   124,   124,   358,   124,   224,
     265,   124,   133,    58,     1,   125,   127,   218,   247,   265,
     380,   127,   127,   127,   127,   127,   389,   124,   245,   245,
     218,   358,   359,   367,   370,    91,   224,   264,    89,    90,
      91,   245,   264,   224,   264,   245,   264,   122,   318,   379,
     379,   127,   247,   248,   265,   266,   247,   248,   265,   266,
     147,   148,   147,   275,   283,   285,   290,   331,   125,   125,
     125,   331,   212,   125,   321,   332,   356,   357,   267,   268,
     122,   330,   124,   329,   135,   122,   135,   218,   269,   275,
     283,   286,   290,   332,   125,   125,   125,   125,   267,   268,
     135,   135,   332,   129,   125,   129,   129,   129,   125,   129,
     131,   232,   252,   341,   389,     1,   130,   223,   245,     1,
       1,   125,   129,   125,   136,   136,     1,   129,   133,   133,
     129,   133,   133,   125,   136,   136,   133,   133,   133,   133,
     218,   218,   127,   129,   218,   389,   130,   130,   321,   330,
     205,   212,   122,   131,   131,   218,   330,   321,   125,   330,
     311,   125,   131,   131,   218,   125,     1,   170,   171,   287,
     321,   218,   124,   311,   319,   319,   267,   268,   124,   125,
     123,   212,   123,   123,   267,   268,   127,     1,   127,   203,
     202,   301,   203,   202,   207,   128,   131,     1,   164,   165,
       1,   164,   165,   379,     1,   343,   344,   129,   130,   340,
     342,     1,   127,     1,   127,   330,   328,   125,   125,   125,
     136,   136,   136,   331,   334,   247,   125,   324,     1,   358,
     359,   367,   370,   358,   359,   367,   370,   125,   125,   125,
     125,     1,   358,   125,   247,   358,   359,   133,   133,   265,
     125,   247,   265,    58,   265,   380,   389,   124,   358,   133,
     127,     1,   127,     1,   125,   265,   380,     3,   125,   133,
     389,   125,   125,   129,   124,   124,   191,   133,   133,   133,
     133,   133,   133,   133,   133,   125,   125,     1,   125,   123,
     321,   330,   332,   125,   125,   125,   136,   136,   212,   329,
     125,   356,   357,   267,   268,   212,   267,   268,   122,   135,
     124,   340,   136,   136,   267,   268,   267,   268,   135,   350,
     218,   218,   245,     1,   218,   345,   224,   264,   223,   224,
     223,   224,   244,   262,   223,   224,   244,   262,   223,   224,
     223,   224,   244,   262,   223,   224,   244,   262,   223,   224,
     244,   262,   223,   224,   244,   262,   223,   224,   244,   262,
     223,   224,   244,   262,   397,   127,   127,   123,   212,   131,
     378,   311,   128,   131,     1,   124,   133,   133,   123,   200,
     201,   127,   200,   201,   128,   331,   128,   207,   345,   130,
     340,   342,     1,   200,   201,   200,   201,   125,   358,   358,
     358,   358,   358,   359,   125,   124,   380,   125,   247,   265,
     247,   358,     1,   125,   247,   265,   135,   360,   361,   389,
     127,   361,     3,   125,   133,   131,   191,   245,   245,     1,
       1,   329,   125,   123,   125,   125,   136,   136,   123,   136,
     136,   212,   267,   268,   350,   136,   136,   136,   136,   267,
     268,   125,   125,   125,   125,   125,   129,   130,   123,   343,
     267,   268,   267,   268,   200,   201,   203,   203,   129,   130,
       1,    66,    66,   247,   265,   125,   247,   265,   125,   127,
     125,   127,   358,   359,   125,   358,   359,   218,   125,   129,
     133,   124,     3,   125,   133,   361,   127,   361,    74,   191,
     192,   193,   125,   125,   125,   129,   123,   136,   136,   125,
     136,   136,   130,   127,   130,   358,   358,   125,   125,   127,
     358,   247,   358,   359,   136,   127,   360,   361,   245,   361,
     127,   361,   125,   133,     3,   125,   133,   378,   378,   130,
     192,   131,   191,   131,   232,   252,   340,   125,   389,   125,
     125,   125,   125,   133,   127,   361,   361,   127,   361,   193,
     125,   345,   358,   124,   127,   127,   127,   361,   125,   125,
     125,   133,   130,   129,   130,   245,   125,   127,   127,   127,
     361,   130,   125,   127,   125,   127
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

__attribute__((__unused__))
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
#else
static unsigned
yy_location_print_ (yyo, yylocp)
    FILE *yyo;
    YYLTYPE const * const yylocp;
#endif
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += fprintf (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += fprintf (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += fprintf (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += fprintf (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += fprintf (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
        break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 147: /* guess_type */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 11654 "grammar.ec"
        break;
      case 148: /* type */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 11661 "grammar.ec"
        break;
      case 149: /* base_strict_type */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 11668 "grammar.ec"
        break;
      case 150: /* base_strict_type_name */
/* Line 1398 of yacc.c  */
#line 250 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1398 of yacc.c  */
#line 11675 "grammar.ec"
        break;
      case 151: /* strict_type */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 11682 "grammar.ec"
        break;
      case 152: /* class_function_definition_start */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11689 "grammar.ec"
        break;
      case 153: /* constructor_function_definition_start */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11696 "grammar.ec"
        break;
      case 154: /* destructor_function_definition_start */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11703 "grammar.ec"
        break;
      case 155: /* virtual_class_function_definition_start */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11710 "grammar.ec"
        break;
      case 156: /* class_function_definition_start_error */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11717 "grammar.ec"
        break;
      case 157: /* virtual_class_function_definition_start_error */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11724 "grammar.ec"
        break;
      case 158: /* class_function_definition */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11731 "grammar.ec"
        break;
      case 159: /* class_function_definition_error */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11738 "grammar.ec"
        break;
      case 160: /* instance_class_function_definition_start */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11745 "grammar.ec"
        break;
      case 161: /* instance_class_function_definition_start_error */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11752 "grammar.ec"
        break;
      case 162: /* instance_class_function_definition */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11759 "grammar.ec"
        break;
      case 163: /* instance_class_function_definition_error */
/* Line 1398 of yacc.c  */
#line 242 "grammar.y"
        { FreeClassFunction(((*yyvaluep).classFunction)); };
/* Line 1398 of yacc.c  */
#line 11766 "grammar.ec"
        break;
      case 164: /* data_member_initialization */
/* Line 1398 of yacc.c  */
#line 240 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1398 of yacc.c  */
#line 11773 "grammar.ec"
        break;
      case 165: /* data_member_initialization_error */
/* Line 1398 of yacc.c  */
#line 240 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1398 of yacc.c  */
#line 11780 "grammar.ec"
        break;
      case 166: /* data_member_initialization_list */
/* Line 1398 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1398 of yacc.c  */
#line 11787 "grammar.ec"
        break;
      case 167: /* data_member_initialization_list_error */
/* Line 1398 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1398 of yacc.c  */
#line 11794 "grammar.ec"
        break;
      case 168: /* data_member_initialization_list_coloned */
/* Line 1398 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1398 of yacc.c  */
#line 11801 "grammar.ec"
        break;
      case 169: /* members_initialization_list_coloned */
/* Line 1398 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1398 of yacc.c  */
#line 11808 "grammar.ec"
        break;
      case 170: /* members_initialization_list */
/* Line 1398 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1398 of yacc.c  */
#line 11815 "grammar.ec"
        break;
      case 171: /* members_initialization_list_error */
/* Line 1398 of yacc.c  */
#line 266 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMembersInit); };
/* Line 1398 of yacc.c  */
#line 11822 "grammar.ec"
        break;
      case 172: /* instantiation_named */
/* Line 1398 of yacc.c  */
#line 238 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1398 of yacc.c  */
#line 11829 "grammar.ec"
        break;
      case 173: /* instantiation_named_error */
/* Line 1398 of yacc.c  */
#line 238 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1398 of yacc.c  */
#line 11836 "grammar.ec"
        break;
      case 177: /* instantiation_unnamed */
/* Line 1398 of yacc.c  */
#line 238 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1398 of yacc.c  */
#line 11843 "grammar.ec"
        break;
      case 178: /* instantiation_unnamed_error */
/* Line 1398 of yacc.c  */
#line 238 "grammar.y"
        { FreeInstance(((*yyvaluep).instance)); };
/* Line 1398 of yacc.c  */
#line 11850 "grammar.ec"
        break;
      case 181: /* default_property */
/* Line 1398 of yacc.c  */
#line 240 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1398 of yacc.c  */
#line 11857 "grammar.ec"
        break;
      case 182: /* default_property_error */
/* Line 1398 of yacc.c  */
#line 240 "grammar.y"
        { FreeMemberInit(((*yyvaluep).memberInit)); };
/* Line 1398 of yacc.c  */
#line 11864 "grammar.ec"
        break;
      case 183: /* default_property_list */
/* Line 1398 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1398 of yacc.c  */
#line 11871 "grammar.ec"
        break;
      case 184: /* default_property_list_error */
/* Line 1398 of yacc.c  */
#line 265 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeMemberInit); };
/* Line 1398 of yacc.c  */
#line 11878 "grammar.ec"
        break;
      case 187: /* property */
/* Line 1398 of yacc.c  */
#line 251 "grammar.y"
        { FreeProperty(((*yyvaluep).prop)); };
/* Line 1398 of yacc.c  */
#line 11885 "grammar.ec"
        break;
      case 198: /* struct_declaration */
/* Line 1398 of yacc.c  */
#line 249 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1398 of yacc.c  */
#line 11892 "grammar.ec"
        break;
      case 199: /* struct_declaration_error */
/* Line 1398 of yacc.c  */
#line 249 "grammar.y"
        { FreeClassDef(((*yyvaluep).classDef)); };
/* Line 1398 of yacc.c  */
#line 11899 "grammar.ec"
        break;
      case 200: /* struct_declaration_list */
/* Line 1398 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1398 of yacc.c  */
#line 11906 "grammar.ec"
        break;
      case 201: /* struct_declaration_list_error */
/* Line 1398 of yacc.c  */
#line 264 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeClassDef); };
/* Line 1398 of yacc.c  */
#line 11913 "grammar.ec"
        break;
      case 202: /* template_datatype */
/* Line 1398 of yacc.c  */
#line 270 "grammar.y"
        { FreeTemplateDataType(((*yyvaluep).templateDatatype)); };
/* Line 1398 of yacc.c  */
#line 11920 "grammar.ec"
        break;
      case 203: /* template_type_argument */
/* Line 1398 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1398 of yacc.c  */
#line 11927 "grammar.ec"
        break;
      case 204: /* template_type_parameter */
/* Line 1398 of yacc.c  */
#line 268 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1398 of yacc.c  */
#line 11934 "grammar.ec"
        break;
      case 205: /* template_identifier_argument */
/* Line 1398 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1398 of yacc.c  */
#line 11941 "grammar.ec"
        break;
      case 206: /* template_identifier_parameter */
/* Line 1398 of yacc.c  */
#line 268 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1398 of yacc.c  */
#line 11948 "grammar.ec"
        break;
      case 207: /* template_expression_argument */
/* Line 1398 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1398 of yacc.c  */
#line 11955 "grammar.ec"
        break;
      case 208: /* template_expression_parameter */
/* Line 1398 of yacc.c  */
#line 268 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1398 of yacc.c  */
#line 11962 "grammar.ec"
        break;
      case 209: /* template_parameter */
/* Line 1398 of yacc.c  */
#line 268 "grammar.y"
        { FreeTemplateParameter(((*yyvaluep).templateParameter)); };
/* Line 1398 of yacc.c  */
#line 11969 "grammar.ec"
        break;
      case 210: /* template_parameters_list */
/* Line 1398 of yacc.c  */
#line 271 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateParameter); };
/* Line 1398 of yacc.c  */
#line 11976 "grammar.ec"
        break;
      case 211: /* template_argument */
/* Line 1398 of yacc.c  */
#line 269 "grammar.y"
        { FreeTemplateArgument(((*yyvaluep).templateArgument)); };
/* Line 1398 of yacc.c  */
#line 11983 "grammar.ec"
        break;
      case 212: /* template_arguments_list */
/* Line 1398 of yacc.c  */
#line 272 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTemplateArgument); };
/* Line 1398 of yacc.c  */
#line 11990 "grammar.ec"
        break;
      case 213: /* class_entry */
/* Line 1398 of yacc.c  */
#line 246 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1398 of yacc.c  */
#line 11997 "grammar.ec"
        break;
      case 214: /* class_decl */
/* Line 1398 of yacc.c  */
#line 247 "grammar.y"
        { Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };
/* Line 1398 of yacc.c  */
#line 12004 "grammar.ec"
        break;
      case 215: /* class */
/* Line 1398 of yacc.c  */
#line 248 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1398 of yacc.c  */
#line 12011 "grammar.ec"
        break;
      case 216: /* class_head */
/* Line 1398 of yacc.c  */
#line 248 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1398 of yacc.c  */
#line 12018 "grammar.ec"
        break;
      case 217: /* class_error */
/* Line 1398 of yacc.c  */
#line 248 "grammar.y"
        { FreeClass(((*yyvaluep)._class)); };
/* Line 1398 of yacc.c  */
#line 12025 "grammar.ec"
        break;
      case 218: /* identifier */
/* Line 1398 of yacc.c  */
#line 202 "grammar.y"
        { FreeIdentifier(((*yyvaluep).id)); };
/* Line 1398 of yacc.c  */
#line 12032 "grammar.ec"
        break;
      case 219: /* primary_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12039 "grammar.ec"
        break;
      case 220: /* i18n_string */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12046 "grammar.ec"
        break;
      case 225: /* primary_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12053 "grammar.ec"
        break;
      case 226: /* postfix_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12060 "grammar.ec"
        break;
      case 227: /* argument_expression_list */
/* Line 1398 of yacc.c  */
#line 253 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1398 of yacc.c  */
#line 12067 "grammar.ec"
        break;
      case 228: /* argument_expression_list_error */
/* Line 1398 of yacc.c  */
#line 253 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1398 of yacc.c  */
#line 12074 "grammar.ec"
        break;
      case 230: /* unary_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12081 "grammar.ec"
        break;
      case 232: /* cast_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12088 "grammar.ec"
        break;
      case 233: /* multiplicative_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12095 "grammar.ec"
        break;
      case 234: /* additive_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12102 "grammar.ec"
        break;
      case 235: /* shift_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12109 "grammar.ec"
        break;
      case 237: /* relational_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12116 "grammar.ec"
        break;
      case 238: /* equality_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12123 "grammar.ec"
        break;
      case 239: /* and_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12130 "grammar.ec"
        break;
      case 240: /* exclusive_or_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12137 "grammar.ec"
        break;
      case 241: /* inclusive_or_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12144 "grammar.ec"
        break;
      case 242: /* logical_and_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12151 "grammar.ec"
        break;
      case 243: /* logical_or_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12158 "grammar.ec"
        break;
      case 244: /* conditional_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12165 "grammar.ec"
        break;
      case 245: /* assignment_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12172 "grammar.ec"
        break;
      case 247: /* expression */
/* Line 1398 of yacc.c  */
#line 253 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1398 of yacc.c  */
#line 12179 "grammar.ec"
        break;
      case 249: /* postfix_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12186 "grammar.ec"
        break;
      case 251: /* unary_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12193 "grammar.ec"
        break;
      case 252: /* cast_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12200 "grammar.ec"
        break;
      case 253: /* multiplicative_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12207 "grammar.ec"
        break;
      case 254: /* additive_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12214 "grammar.ec"
        break;
      case 255: /* shift_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12221 "grammar.ec"
        break;
      case 256: /* relational_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12228 "grammar.ec"
        break;
      case 257: /* equality_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12235 "grammar.ec"
        break;
      case 258: /* and_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12242 "grammar.ec"
        break;
      case 259: /* exclusive_or_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12249 "grammar.ec"
        break;
      case 260: /* inclusive_or_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12256 "grammar.ec"
        break;
      case 261: /* logical_and_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12263 "grammar.ec"
        break;
      case 262: /* logical_or_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12270 "grammar.ec"
        break;
      case 263: /* conditional_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12277 "grammar.ec"
        break;
      case 264: /* assignment_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12284 "grammar.ec"
        break;
      case 265: /* expression_error */
/* Line 1398 of yacc.c  */
#line 253 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeExpression); };
/* Line 1398 of yacc.c  */
#line 12291 "grammar.ec"
        break;
      case 267: /* constant_expression */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12298 "grammar.ec"
        break;
      case 268: /* constant_expression_error */
/* Line 1398 of yacc.c  */
#line 204 "grammar.y"
        { FreeExpression(((*yyvaluep).exp)); };
/* Line 1398 of yacc.c  */
#line 12305 "grammar.ec"
        break;
      case 269: /* storage_class_specifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12312 "grammar.ec"
        break;
      case 270: /* external_storage_class_specifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12319 "grammar.ec"
        break;
      case 271: /* enumerator */
/* Line 1398 of yacc.c  */
#line 220 "grammar.y"
        { FreeEnumerator(((*yyvaluep).enumerator)); };
/* Line 1398 of yacc.c  */
#line 12326 "grammar.ec"
        break;
      case 272: /* enumerator_list */
/* Line 1398 of yacc.c  */
#line 254 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeEnumerator); };
/* Line 1398 of yacc.c  */
#line 12333 "grammar.ec"
        break;
      case 274: /* enum_specifier_nocompound */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12340 "grammar.ec"
        break;
      case 275: /* enum_specifier_compound */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12347 "grammar.ec"
        break;
      case 276: /* enum_specifier_compound_error */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12354 "grammar.ec"
        break;
      case 278: /* enum_class */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12361 "grammar.ec"
        break;
      case 279: /* enum_class_error */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12368 "grammar.ec"
        break;
      case 280: /* class_specifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12375 "grammar.ec"
        break;
      case 281: /* class_specifier_error */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12382 "grammar.ec"
        break;
      case 282: /* ext_storage */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12389 "grammar.ec"
        break;
      case 283: /* type_qualifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12396 "grammar.ec"
        break;
      case 284: /* type_qualifier_list */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12403 "grammar.ec"
        break;
      case 285: /* type_specifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12410 "grammar.ec"
        break;
      case 286: /* strict_type_specifier */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12417 "grammar.ec"
        break;
      case 287: /* struct_declarator */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12424 "grammar.ec"
        break;
      case 288: /* struct_declarator_list */
/* Line 1398 of yacc.c  */
#line 257 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclarator); };
/* Line 1398 of yacc.c  */
#line 12431 "grammar.ec"
        break;
      case 289: /* struct_entry */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12438 "grammar.ec"
        break;
      case 290: /* struct_or_union_specifier_compound */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12445 "grammar.ec"
        break;
      case 291: /* struct_or_union_specifier_compound_error */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12452 "grammar.ec"
        break;
      case 292: /* struct_or_union_specifier_nocompound */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12459 "grammar.ec"
        break;
      case 293: /* struct_decl */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12466 "grammar.ec"
        break;
      case 294: /* struct_head */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12473 "grammar.ec"
        break;
      case 295: /* struct_class */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12480 "grammar.ec"
        break;
      case 296: /* struct_class_error */
/* Line 1398 of yacc.c  */
#line 215 "grammar.y"
        { FreeSpecifier(((*yyvaluep).specifier)); };
/* Line 1398 of yacc.c  */
#line 12487 "grammar.ec"
        break;
      case 298: /* specifier_qualifier_list */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12494 "grammar.ec"
        break;
      case 299: /* guess_specifier_qualifier_list */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12501 "grammar.ec"
        break;
      case 300: /* declaration_specifiers */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12508 "grammar.ec"
        break;
      case 301: /* guess_declaration_specifiers */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12515 "grammar.ec"
        break;
      case 302: /* external_guess_declaration_specifiers */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12522 "grammar.ec"
        break;
      case 303: /* external_guess_declaration_specifiers_error */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12529 "grammar.ec"
        break;
      case 304: /* _inheritance_specifiers */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12536 "grammar.ec"
        break;
      case 305: /* inheritance_specifiers */
/* Line 1398 of yacc.c  */
#line 255 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeSpecifier); };
/* Line 1398 of yacc.c  */
#line 12543 "grammar.ec"
        break;
      case 309: /* identifier_list_error */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12550 "grammar.ec"
        break;
      case 310: /* identifier_list */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12557 "grammar.ec"
        break;
      case 311: /* direct_declarator_nofunction_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12564 "grammar.ec"
        break;
      case 312: /* direct_declarator_nofunction */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12571 "grammar.ec"
        break;
      case 313: /* direct_declarator_function_start */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12578 "grammar.ec"
        break;
      case 314: /* direct_declarator_function */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12585 "grammar.ec"
        break;
      case 315: /* direct_declarator_function_error */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12592 "grammar.ec"
        break;
      case 316: /* direct_declarator */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12599 "grammar.ec"
        break;
      case 317: /* direct_declarator_function_start_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12606 "grammar.ec"
        break;
      case 318: /* direct_declarator_function_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12613 "grammar.ec"
        break;
      case 319: /* direct_declarator_function_error_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12620 "grammar.ec"
        break;
      case 320: /* direct_declarator_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12627 "grammar.ec"
        break;
      case 321: /* ext_decl */
/* Line 1398 of yacc.c  */
#line 275 "grammar.y"
        { FreeExtDecl(((*yyvaluep).extDecl)); };
/* Line 1398 of yacc.c  */
#line 12634 "grammar.ec"
        break;
      case 323: /* attribute_word */
/* Line 1398 of yacc.c  */
#line 250 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1398 of yacc.c  */
#line 12641 "grammar.ec"
        break;
      case 324: /* attribute */
/* Line 1398 of yacc.c  */
#line 276 "grammar.y"
        { FreeAttribute(((*yyvaluep).attribute)); };
/* Line 1398 of yacc.c  */
#line 12648 "grammar.ec"
        break;
      case 325: /* attribs_list */
/* Line 1398 of yacc.c  */
#line 277 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttribute); };
/* Line 1398 of yacc.c  */
#line 12655 "grammar.ec"
        break;
      case 326: /* attrib */
/* Line 1398 of yacc.c  */
#line 274 "grammar.y"
        { FreeAttrib(((*yyvaluep).attrib)); };
/* Line 1398 of yacc.c  */
#line 12662 "grammar.ec"
        break;
      case 327: /* multi_attrib */
/* Line 1398 of yacc.c  */
#line 278 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeAttrib); };
/* Line 1398 of yacc.c  */
#line 12669 "grammar.ec"
        break;
      case 328: /* direct_abstract_declarator */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12676 "grammar.ec"
        break;
      case 329: /* direct_abstract_declarator_noarray */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12683 "grammar.ec"
        break;
      case 330: /* pointer */
/* Line 1398 of yacc.c  */
#line 203 "grammar.y"
        { FreePointer(((*yyvaluep).pointer)); };
/* Line 1398 of yacc.c  */
#line 12690 "grammar.ec"
        break;
      case 331: /* abstract_declarator */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12697 "grammar.ec"
        break;
      case 332: /* abstract_declarator_noarray */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12704 "grammar.ec"
        break;
      case 333: /* declarator */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12711 "grammar.ec"
        break;
      case 334: /* declarator_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12718 "grammar.ec"
        break;
      case 335: /* declarator_function */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12725 "grammar.ec"
        break;
      case 336: /* declarator_function_error */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12732 "grammar.ec"
        break;
      case 337: /* declarator_function_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12739 "grammar.ec"
        break;
      case 338: /* declarator_function_error_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12746 "grammar.ec"
        break;
      case 339: /* declarator_nofunction_type_ok */
/* Line 1398 of yacc.c  */
#line 221 "grammar.y"
        { FreeDeclarator(((*yyvaluep).declarator)); };
/* Line 1398 of yacc.c  */
#line 12753 "grammar.ec"
        break;
      case 340: /* initializer */
/* Line 1398 of yacc.c  */
#line 227 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1398 of yacc.c  */
#line 12760 "grammar.ec"
        break;
      case 342: /* initializer_error */
/* Line 1398 of yacc.c  */
#line 227 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1398 of yacc.c  */
#line 12767 "grammar.ec"
        break;
      case 343: /* initializer_condition */
/* Line 1398 of yacc.c  */
#line 227 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1398 of yacc.c  */
#line 12774 "grammar.ec"
        break;
      case 344: /* initializer_condition_error */
/* Line 1398 of yacc.c  */
#line 227 "grammar.y"
        { FreeInitializer(((*yyvaluep).initializer)); };
/* Line 1398 of yacc.c  */
#line 12781 "grammar.ec"
        break;
      case 345: /* initializer_list */
/* Line 1398 of yacc.c  */
#line 259 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitializer); };
/* Line 1398 of yacc.c  */
#line 12788 "grammar.ec"
        break;
      case 346: /* init_declarator */
/* Line 1398 of yacc.c  */
#line 228 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1398 of yacc.c  */
#line 12795 "grammar.ec"
        break;
      case 347: /* init_declarator_error */
/* Line 1398 of yacc.c  */
#line 228 "grammar.y"
        { FreeInitDeclarator(((*yyvaluep).initDeclarator)); };
/* Line 1398 of yacc.c  */
#line 12802 "grammar.ec"
        break;
      case 348: /* init_declarator_list */
/* Line 1398 of yacc.c  */
#line 260 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1398 of yacc.c  */
#line 12809 "grammar.ec"
        break;
      case 349: /* init_declarator_list_error */
/* Line 1398 of yacc.c  */
#line 260 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeInitDeclarator); };
/* Line 1398 of yacc.c  */
#line 12816 "grammar.ec"
        break;
      case 350: /* type_name */
/* Line 1398 of yacc.c  */
#line 229 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1398 of yacc.c  */
#line 12823 "grammar.ec"
        break;
      case 351: /* guess_type_name */
/* Line 1398 of yacc.c  */
#line 229 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1398 of yacc.c  */
#line 12830 "grammar.ec"
        break;
      case 352: /* parameter_declaration */
/* Line 1398 of yacc.c  */
#line 229 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1398 of yacc.c  */
#line 12837 "grammar.ec"
        break;
      case 353: /* parameter_declaration_error */
/* Line 1398 of yacc.c  */
#line 229 "grammar.y"
        { FreeTypeName(((*yyvaluep).typeName)); };
/* Line 1398 of yacc.c  */
#line 12844 "grammar.ec"
        break;
      case 354: /* parameter_list */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12851 "grammar.ec"
        break;
      case 355: /* parameter_list_error */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12858 "grammar.ec"
        break;
      case 356: /* parameter_type_list */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12865 "grammar.ec"
        break;
      case 357: /* parameter_type_list_error */
/* Line 1398 of yacc.c  */
#line 261 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeTypeName); };
/* Line 1398 of yacc.c  */
#line 12872 "grammar.ec"
        break;
      case 358: /* statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12879 "grammar.ec"
        break;
      case 359: /* statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12886 "grammar.ec"
        break;
      case 363: /* labeled_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12893 "grammar.ec"
        break;
      case 364: /* labeled_statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12900 "grammar.ec"
        break;
      case 365: /* declaration_mode */
/* Line 1398 of yacc.c  */
#line 273 "grammar.y"
        { };
/* Line 1398 of yacc.c  */
#line 12907 "grammar.ec"
        break;
      case 367: /* declaration */
/* Line 1398 of yacc.c  */
#line 234 "grammar.y"
        { FreeDeclaration(((*yyvaluep).declaration)); };
/* Line 1398 of yacc.c  */
#line 12914 "grammar.ec"
        break;
      case 371: /* declaration_list */
/* Line 1398 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1398 of yacc.c  */
#line 12921 "grammar.ec"
        break;
      case 372: /* declaration_list_error */
/* Line 1398 of yacc.c  */
#line 258 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeDeclaration); };
/* Line 1398 of yacc.c  */
#line 12928 "grammar.ec"
        break;
      case 373: /* statement_list */
/* Line 1398 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1398 of yacc.c  */
#line 12935 "grammar.ec"
        break;
      case 374: /* statement_list_error */
/* Line 1398 of yacc.c  */
#line 262 "grammar.y"
        { FreeList(((*yyvaluep).list), FreeStatement); };
/* Line 1398 of yacc.c  */
#line 12942 "grammar.ec"
        break;
      case 375: /* compound_inside */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12949 "grammar.ec"
        break;
      case 376: /* compound_inside_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12956 "grammar.ec"
        break;
      case 377: /* compound_start */
/* Line 1398 of yacc.c  */
#line 267 "grammar.y"
        { PopContext(((*yyvaluep).context)); FreeContext(((*yyvaluep).context)); delete ((*yyvaluep).context); };
/* Line 1398 of yacc.c  */
#line 12963 "grammar.ec"
        break;
      case 378: /* compound_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12970 "grammar.ec"
        break;
      case 379: /* compound_statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12977 "grammar.ec"
        break;
      case 380: /* expression_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12984 "grammar.ec"
        break;
      case 381: /* selection_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12991 "grammar.ec"
        break;
      case 382: /* selection_statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 12998 "grammar.ec"
        break;
      case 383: /* iteration_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 13005 "grammar.ec"
        break;
      case 384: /* iteration_statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 13012 "grammar.ec"
        break;
      case 385: /* jump_statement */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 13019 "grammar.ec"
        break;
      case 386: /* jump_statement_error */
/* Line 1398 of yacc.c  */
#line 230 "grammar.y"
        { FreeStatement(((*yyvaluep).stmt)); };
/* Line 1398 of yacc.c  */
#line 13026 "grammar.ec"
        break;
      case 387: /* function_definition */
/* Line 1398 of yacc.c  */
#line 235 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1398 of yacc.c  */
#line 13033 "grammar.ec"
        break;
      case 388: /* function_definition_error */
/* Line 1398 of yacc.c  */
#line 235 "grammar.y"
        { FreeFunction(((*yyvaluep).function)); };
/* Line 1398 of yacc.c  */
#line 13040 "grammar.ec"
        break;
      case 389: /* string_literal */
/* Line 1398 of yacc.c  */
#line 250 "grammar.y"
        { delete ((*yyvaluep).string); };
/* Line 1398 of yacc.c  */
#line 13047 "grammar.ec"
        break;
      case 390: /* external_declaration */
/* Line 1398 of yacc.c  */
#line 236 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1398 of yacc.c  */
#line 13054 "grammar.ec"
        break;
      case 391: /* external_declaration_error */
/* Line 1398 of yacc.c  */
#line 236 "grammar.y"
        { FreeExternal(((*yyvaluep).external)); };
/* Line 1398 of yacc.c  */
#line 13061 "grammar.ec"
        break;
      case 392: /* translation_unit_error */
/* Line 1398 of yacc.c  */
#line 263 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1398 of yacc.c  */
#line 13068 "grammar.ec"
        break;
      case 393: /* translation_unit */
/* Line 1398 of yacc.c  */
#line 263 "grammar.y"
        { if(((*yyvaluep).list) != ast) FreeList(((*yyvaluep).list), FreeExternal); };
/* Line 1398 of yacc.c  */
#line 13075 "grammar.ec"
        break;

      default:
        break;
    }
}




/* The lookahead symbol.  */
int yychar;


#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;


/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
/* Line 1792 of yacc.c  */
#line 286 "grammar.y"
    {
      (yyval.specifier) = null;
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   }
    break;

  case 3:
/* Line 1792 of yacc.c  */
#line 305 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   }
    break;

  case 4:
/* Line 1792 of yacc.c  */
#line 343 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 5:
/* Line 1792 of yacc.c  */
#line 345 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   }
    break;

  case 6:
/* Line 1792 of yacc.c  */
#line 424 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); }
    break;

  case 7:
/* Line 1792 of yacc.c  */
#line 428 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 9:
/* Line 1792 of yacc.c  */
#line 432 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); }
    break;

  case 10:
/* Line 1792 of yacc.c  */
#line 434 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    }
    break;

  case 11:
/* Line 1792 of yacc.c  */
#line 473 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 12:
/* Line 1792 of yacc.c  */
#line 475 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 13:
/* Line 1792 of yacc.c  */
#line 480 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (3)].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 14:
/* Line 1792 of yacc.c  */
#line 485 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (4)].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 15:
/* Line 1792 of yacc.c  */
#line 490 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 16:
/* Line 1792 of yacc.c  */
#line 492 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 17:
/* Line 1792 of yacc.c  */
#line 497 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 18:
/* Line 1792 of yacc.c  */
#line 499 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 19:
/* Line 1792 of yacc.c  */
#line 504 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 20:
/* Line 1792 of yacc.c  */
#line 506 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); }
    break;

  case 21:
/* Line 1792 of yacc.c  */
#line 511 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 22:
/* Line 1792 of yacc.c  */
#line 513 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 23:
/* Line 1792 of yacc.c  */
#line 515 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 24:
/* Line 1792 of yacc.c  */
#line 517 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 25:
/* Line 1792 of yacc.c  */
#line 519 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 26:
/* Line 1792 of yacc.c  */
#line 523 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 27:
/* Line 1792 of yacc.c  */
#line 527 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      }
    break;

  case 28:
/* Line 1792 of yacc.c  */
#line 540 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 29:
/* Line 1792 of yacc.c  */
#line 542 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 30:
/* Line 1792 of yacc.c  */
#line 544 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 31:
/* Line 1792 of yacc.c  */
#line 546 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 32:
/* Line 1792 of yacc.c  */
#line 548 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 33:
/* Line 1792 of yacc.c  */
#line 554 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 34:
/* Line 1792 of yacc.c  */
#line 556 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 35:
/* Line 1792 of yacc.c  */
#line 561 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); }
    break;

  case 36:
/* Line 1792 of yacc.c  */
#line 566 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); }
    break;

  case 37:
/* Line 1792 of yacc.c  */
#line 571 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 38:
/* Line 1792 of yacc.c  */
#line 573 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 39:
/* Line 1792 of yacc.c  */
#line 575 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;}
    break;

  case 40:
/* Line 1792 of yacc.c  */
#line 579 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 41:
/* Line 1792 of yacc.c  */
#line 580 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 42:
/* Line 1792 of yacc.c  */
#line 584 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;}
    break;

  case 43:
/* Line 1792 of yacc.c  */
#line 586 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      }
    break;

  case 44:
/* Line 1792 of yacc.c  */
#line 596 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);}
    break;

  case 45:
/* Line 1792 of yacc.c  */
#line 600 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 46:
/* Line 1792 of yacc.c  */
#line 602 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 47:
/* Line 1792 of yacc.c  */
#line 604 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 48:
/* Line 1792 of yacc.c  */
#line 608 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); }
    break;

  case 49:
/* Line 1792 of yacc.c  */
#line 610 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 50:
/* Line 1792 of yacc.c  */
#line 612 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 51:
/* Line 1792 of yacc.c  */
#line 615 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 52:
/* Line 1792 of yacc.c  */
#line 627 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       }
    break;

  case 53:
/* Line 1792 of yacc.c  */
#line 638 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      }
    break;

  case 54:
/* Line 1792 of yacc.c  */
#line 657 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 55:
/* Line 1792 of yacc.c  */
#line 659 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 56:
/* Line 1792 of yacc.c  */
#line 663 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); }
    break;

  case 57:
/* Line 1792 of yacc.c  */
#line 664 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 58:
/* Line 1792 of yacc.c  */
#line 665 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 59:
/* Line 1792 of yacc.c  */
#line 666 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 60:
/* Line 1792 of yacc.c  */
#line 667 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 61:
/* Line 1792 of yacc.c  */
#line 668 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 63:
/* Line 1792 of yacc.c  */
#line 671 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   }
    break;

  case 64:
/* Line 1792 of yacc.c  */
#line 683 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  }
    break;

  case 66:
/* Line 1792 of yacc.c  */
#line 688 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 67:
/* Line 1792 of yacc.c  */
#line 689 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 68:
/* Line 1792 of yacc.c  */
#line 690 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 69:
/* Line 1792 of yacc.c  */
#line 694 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 70:
/* Line 1792 of yacc.c  */
#line 695 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 71:
/* Line 1792 of yacc.c  */
#line 696 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 72:
/* Line 1792 of yacc.c  */
#line 697 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 73:
/* Line 1792 of yacc.c  */
#line 698 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 74:
/* Line 1792 of yacc.c  */
#line 699 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); }
    break;

  case 75:
/* Line 1792 of yacc.c  */
#line 700 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); }
    break;

  case 76:
/* Line 1792 of yacc.c  */
#line 705 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 77:
/* Line 1792 of yacc.c  */
#line 707 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 78:
/* Line 1792 of yacc.c  */
#line 712 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 79:
/* Line 1792 of yacc.c  */
#line 714 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 80:
/* Line 1792 of yacc.c  */
#line 716 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 81:
/* Line 1792 of yacc.c  */
#line 718 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 82:
/* Line 1792 of yacc.c  */
#line 720 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 83:
/* Line 1792 of yacc.c  */
#line 750 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 84:
/* Line 1792 of yacc.c  */
#line 752 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 85:
/* Line 1792 of yacc.c  */
#line 757 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 86:
/* Line 1792 of yacc.c  */
#line 759 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 87:
/* Line 1792 of yacc.c  */
#line 761 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 88:
/* Line 1792 of yacc.c  */
#line 763 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 89:
/* Line 1792 of yacc.c  */
#line 765 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 90:
/* Line 1792 of yacc.c  */
#line 794 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 91:
/* Line 1792 of yacc.c  */
#line 796 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;}
    break;

  case 92:
/* Line 1792 of yacc.c  */
#line 798 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;}
    break;

  case 93:
/* Line 1792 of yacc.c  */
#line 803 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); }
    break;

  case 94:
/* Line 1792 of yacc.c  */
#line 805 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); }
    break;

  case 95:
/* Line 1792 of yacc.c  */
#line 810 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 96:
/* Line 1792 of yacc.c  */
#line 812 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 97:
/* Line 1792 of yacc.c  */
#line 816 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 98:
/* Line 1792 of yacc.c  */
#line 818 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 99:
/* Line 1792 of yacc.c  */
#line 820 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 100:
/* Line 1792 of yacc.c  */
#line 822 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 101:
/* Line 1792 of yacc.c  */
#line 827 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 102:
/* Line 1792 of yacc.c  */
#line 830 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); }
    break;

  case 103:
/* Line 1792 of yacc.c  */
#line 833 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); }
    break;

  case 104:
/* Line 1792 of yacc.c  */
#line 836 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); }
    break;

  case 105:
/* Line 1792 of yacc.c  */
#line 901 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; }
    break;

  case 106:
/* Line 1792 of yacc.c  */
#line 903 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; }
    break;

  case 107:
/* Line 1792 of yacc.c  */
#line 908 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 108:
/* Line 1792 of yacc.c  */
#line 910 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 109:
/* Line 1792 of yacc.c  */
#line 912 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  }
    break;

  case 110:
/* Line 1792 of yacc.c  */
#line 914 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 111:
/* Line 1792 of yacc.c  */
#line 916 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; }
    break;

  case 112:
/* Line 1792 of yacc.c  */
#line 946 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 113:
/* Line 1792 of yacc.c  */
#line 950 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 114:
/* Line 1792 of yacc.c  */
#line 951 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; }
    break;

  case 115:
/* Line 1792 of yacc.c  */
#line 952 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); }
    break;

  case 116:
/* Line 1792 of yacc.c  */
#line 956 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 117:
/* Line 1792 of yacc.c  */
#line 957 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 118:
/* Line 1792 of yacc.c  */
#line 958 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 119:
/* Line 1792 of yacc.c  */
#line 962 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); }
    break;

  case 120:
/* Line 1792 of yacc.c  */
#line 963 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 121:
/* Line 1792 of yacc.c  */
#line 964 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 123:
/* Line 1792 of yacc.c  */
#line 970 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 124:
/* Line 1792 of yacc.c  */
#line 973 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 125:
/* Line 1792 of yacc.c  */
#line 976 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 126:
/* Line 1792 of yacc.c  */
#line 979 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 127:
/* Line 1792 of yacc.c  */
#line 982 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 129:
/* Line 1792 of yacc.c  */
#line 988 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 130:
/* Line 1792 of yacc.c  */
#line 990 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 131:
/* Line 1792 of yacc.c  */
#line 992 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 132:
/* Line 1792 of yacc.c  */
#line 994 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; }
    break;

  case 133:
/* Line 1792 of yacc.c  */
#line 996 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); }
    break;

  case 134:
/* Line 1792 of yacc.c  */
#line 1000 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); }
    break;

  case 135:
/* Line 1792 of yacc.c  */
#line 1005 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 136:
/* Line 1792 of yacc.c  */
#line 1008 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 137:
/* Line 1792 of yacc.c  */
#line 1011 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 138:
/* Line 1792 of yacc.c  */
#line 1014 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 139:
/* Line 1792 of yacc.c  */
#line 1017 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); }
    break;

  case 141:
/* Line 1792 of yacc.c  */
#line 1023 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 142:
/* Line 1792 of yacc.c  */
#line 1025 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); }
    break;

  case 143:
/* Line 1792 of yacc.c  */
#line 1029 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 144:
/* Line 1792 of yacc.c  */
#line 1034 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); }
    break;

  case 145:
/* Line 1792 of yacc.c  */
#line 1036 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); }
    break;

  case 146:
/* Line 1792 of yacc.c  */
#line 1041 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 147:
/* Line 1792 of yacc.c  */
#line 1043 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); }
    break;

  case 148:
/* Line 1792 of yacc.c  */
#line 1048 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); }
    break;

  case 149:
/* Line 1792 of yacc.c  */
#line 1050 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); }
    break;

  case 150:
/* Line 1792 of yacc.c  */
#line 1055 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); }
    break;

  case 151:
/* Line 1792 of yacc.c  */
#line 1060 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); }
    break;

  case 152:
/* Line 1792 of yacc.c  */
#line 1062 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); }
    break;

  case 153:
/* Line 1792 of yacc.c  */
#line 1067 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); }
    break;

  case 154:
/* Line 1792 of yacc.c  */
#line 1069 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); }
    break;

  case 155:
/* Line 1792 of yacc.c  */
#line 1071 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); }
    break;

  case 156:
/* Line 1792 of yacc.c  */
#line 1073 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); }
    break;

  case 157:
/* Line 1792 of yacc.c  */
#line 1078 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); }
    break;

  case 158:
/* Line 1792 of yacc.c  */
#line 1080 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); }
    break;

  case 159:
/* Line 1792 of yacc.c  */
#line 1082 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); }
    break;

  case 160:
/* Line 1792 of yacc.c  */
#line 1084 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); }
    break;

  case 161:
/* Line 1792 of yacc.c  */
#line 1088 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; }
    break;

  case 162:
/* Line 1792 of yacc.c  */
#line 1089 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); }
    break;

  case 163:
/* Line 1792 of yacc.c  */
#line 1090 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 164:
/* Line 1792 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 165:
/* Line 1792 of yacc.c  */
#line 1092 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 166:
/* Line 1792 of yacc.c  */
#line 1093 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 167:
/* Line 1792 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); }
    break;

  case 168:
/* Line 1792 of yacc.c  */
#line 1095 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; }
    break;

  case 169:
/* Line 1792 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); }
    break;

  case 170:
/* Line 1792 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); }
    break;

  case 171:
/* Line 1792 of yacc.c  */
#line 1098 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); }
    break;

  case 172:
/* Line 1792 of yacc.c  */
#line 1100 "grammar.y"
    { (yyval.classDef) = null; }
    break;

  case 173:
/* Line 1792 of yacc.c  */
#line 1101 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; }
    break;

  case 174:
/* Line 1792 of yacc.c  */
#line 1103 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); }
    break;

  case 175:
/* Line 1792 of yacc.c  */
#line 1107 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 176:
/* Line 1792 of yacc.c  */
#line 1110 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 177:
/* Line 1792 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 178:
/* Line 1792 of yacc.c  */
#line 1112 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 179:
/* Line 1792 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 180:
/* Line 1792 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 181:
/* Line 1792 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 182:
/* Line 1792 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); }
    break;

  case 183:
/* Line 1792 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); }
    break;

  case 184:
/* Line 1792 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 185:
/* Line 1792 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 186:
/* Line 1792 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); }
    break;

  case 187:
/* Line 1792 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 188:
/* Line 1792 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 189:
/* Line 1792 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); }
    break;

  case 190:
/* Line 1792 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 191:
/* Line 1792 of yacc.c  */
#line 1126 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; }
    break;

  case 192:
/* Line 1792 of yacc.c  */
#line 1130 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); }
    break;

  case 193:
/* Line 1792 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 194:
/* Line 1792 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); }
    break;

  case 195:
/* Line 1792 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; }
    break;

  case 196:
/* Line 1792 of yacc.c  */
#line 1140 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 197:
/* Line 1792 of yacc.c  */
#line 1141 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 198:
/* Line 1792 of yacc.c  */
#line 1142 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 199:
/* Line 1792 of yacc.c  */
#line 1146 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); }
    break;

  case 202:
/* Line 1792 of yacc.c  */
#line 1149 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 203:
/* Line 1792 of yacc.c  */
#line 1150 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); }
    break;

  case 204:
/* Line 1792 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); }
    break;

  case 205:
/* Line 1792 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 206:
/* Line 1792 of yacc.c  */
#line 1167 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); }
    break;

  case 207:
/* Line 1792 of yacc.c  */
#line 1168 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); }
    break;

  case 208:
/* Line 1792 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); }
    break;

  case 209:
/* Line 1792 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 210:
/* Line 1792 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 211:
/* Line 1792 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 212:
/* Line 1792 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); }
    break;

  case 213:
/* Line 1792 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 214:
/* Line 1792 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); }
    break;

  case 215:
/* Line 1792 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); }
    break;

  case 216:
/* Line 1792 of yacc.c  */
#line 1183 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); }
    break;

  case 217:
/* Line 1792 of yacc.c  */
#line 1187 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); }
    break;

  case 218:
/* Line 1792 of yacc.c  */
#line 1188 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 219:
/* Line 1792 of yacc.c  */
#line 1192 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); }
    break;

  case 220:
/* Line 1792 of yacc.c  */
#line 1200 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); }
    break;

  case 221:
/* Line 1792 of yacc.c  */
#line 1201 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); }
    break;

  case 225:
/* Line 1792 of yacc.c  */
#line 1211 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); }
    break;

  case 226:
/* Line 1792 of yacc.c  */
#line 1212 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); }
    break;

  case 230:
/* Line 1792 of yacc.c  */
#line 1219 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 231:
/* Line 1792 of yacc.c  */
#line 1220 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 232:
/* Line 1792 of yacc.c  */
#line 1221 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); }
    break;

  case 233:
/* Line 1792 of yacc.c  */
#line 1261 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); }
    break;

  case 234:
/* Line 1792 of yacc.c  */
#line 1262 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); }
    break;

  case 235:
/* Line 1792 of yacc.c  */
#line 1267 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   }
    break;

  case 236:
/* Line 1792 of yacc.c  */
#line 1274 "grammar.y"
    { (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 237:
/* Line 1792 of yacc.c  */
#line 1276 "grammar.y"
    {
      (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 238:
/* Line 1792 of yacc.c  */
#line 1283 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (3)].id)._class, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 239:
/* Line 1792 of yacc.c  */
#line 1284 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (3)].specifier).nsSpec, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 240:
/* Line 1792 of yacc.c  */
#line 1286 "grammar.y"
    { (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 241:
/* Line 1792 of yacc.c  */
#line 1288 "grammar.y"
    {
      (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (5)].specifier).nsSpec, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   }
    break;

  case 242:
/* Line 1792 of yacc.c  */
#line 1296 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 243:
/* Line 1792 of yacc.c  */
#line 1297 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; }
    break;

  case 244:
/* Line 1792 of yacc.c  */
#line 1302 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      }
    break;

  case 245:
/* Line 1792 of yacc.c  */
#line 1309 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 246:
/* Line 1792 of yacc.c  */
#line 1316 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 247:
/* Line 1792 of yacc.c  */
#line 1322 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 248:
/* Line 1792 of yacc.c  */
#line 1329 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[(2) - (3)].id)._class, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 249:
/* Line 1792 of yacc.c  */
#line 1335 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass((yyvsp[(2) - (3)].specifier).nsSpec, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 250:
/* Line 1792 of yacc.c  */
#line 1344 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      }
    break;

  case 251:
/* Line 1792 of yacc.c  */
#line 1351 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 252:
/* Line 1792 of yacc.c  */
#line 1357 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 253:
/* Line 1792 of yacc.c  */
#line 1363 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 254:
/* Line 1792 of yacc.c  */
#line 1369 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 255:
/* Line 1792 of yacc.c  */
#line 1375 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 256:
/* Line 1792 of yacc.c  */
#line 1381 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      }
    break;

  case 257:
/* Line 1792 of yacc.c  */
#line 1392 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); }
    break;

  case 259:
/* Line 1792 of yacc.c  */
#line 1398 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 260:
/* Line 1792 of yacc.c  */
#line 1402 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 261:
/* Line 1792 of yacc.c  */
#line 1403 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 262:
/* Line 1792 of yacc.c  */
#line 1404 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); }
    break;

  case 263:
/* Line 1792 of yacc.c  */
#line 1408 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 264:
/* Line 1792 of yacc.c  */
#line 1412 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 265:
/* Line 1792 of yacc.c  */
#line 1413 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 266:
/* Line 1792 of yacc.c  */
#line 1414 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); }
    break;

  case 267:
/* Line 1792 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 268:
/* Line 1792 of yacc.c  */
#line 1416 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 269:
/* Line 1792 of yacc.c  */
#line 1417 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); }
    break;

  case 270:
/* Line 1792 of yacc.c  */
#line 1419 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   }
    break;

  case 271:
/* Line 1792 of yacc.c  */
#line 1431 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); }
    break;

  case 273:
/* Line 1792 of yacc.c  */
#line 1433 "grammar.y"
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); }
    break;

  case 274:
/* Line 1792 of yacc.c  */
#line 1434 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); }
    break;

  case 275:
/* Line 1792 of yacc.c  */
#line 1435 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 276:
/* Line 1792 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 277:
/* Line 1792 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 278:
/* Line 1792 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 279:
/* Line 1792 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 280:
/* Line 1792 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 281:
/* Line 1792 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 282:
/* Line 1792 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 283:
/* Line 1792 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 284:
/* Line 1792 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 285:
/* Line 1792 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 286:
/* Line 1792 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 287:
/* Line 1792 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 288:
/* Line 1792 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 289:
/* Line 1792 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 290:
/* Line 1792 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 291:
/* Line 1792 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); }
    break;

  case 292:
/* Line 1792 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); }
    break;

  case 293:
/* Line 1792 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 294:
/* Line 1792 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 295:
/* Line 1792 of yacc.c  */
#line 1456 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 300:
/* Line 1792 of yacc.c  */
#line 1462 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 301:
/* Line 1792 of yacc.c  */
#line 1463 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); }
    break;

  case 302:
/* Line 1792 of yacc.c  */
#line 1467 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 303:
/* Line 1792 of yacc.c  */
#line 1471 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 304:
/* Line 1792 of yacc.c  */
#line 1475 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 305:
/* Line 1792 of yacc.c  */
#line 1476 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 307:
/* Line 1792 of yacc.c  */
#line 1482 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 308:
/* Line 1792 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 309:
/* Line 1792 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 310:
/* Line 1792 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 311:
/* Line 1792 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; }
    break;

  case 312:
/* Line 1792 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 313:
/* Line 1792 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 314:
/* Line 1792 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 315:
/* Line 1792 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 316:
/* Line 1792 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 317:
/* Line 1792 of yacc.c  */
#line 1493 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); }
    break;

  case 318:
/* Line 1792 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); }
    break;

  case 319:
/* Line 1792 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); }
    break;

  case 320:
/* Line 1792 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 321:
/* Line 1792 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 322:
/* Line 1792 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 323:
/* Line 1792 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); }
    break;

  case 324:
/* Line 1792 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 325:
/* Line 1792 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 326:
/* Line 1792 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 327:
/* Line 1792 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 328:
/* Line 1792 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 329:
/* Line 1792 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 330:
/* Line 1792 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 331:
/* Line 1792 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  }
    break;

  case 332:
/* Line 1792 of yacc.c  */
#line 1537 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); }
    break;

  case 333:
/* Line 1792 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 334:
/* Line 1792 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 335:
/* Line 1792 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 336:
/* Line 1792 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 337:
/* Line 1792 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 338:
/* Line 1792 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 339:
/* Line 1792 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 340:
/* Line 1792 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 341:
/* Line 1792 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 342:
/* Line 1792 of yacc.c  */
#line 1553 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 343:
/* Line 1792 of yacc.c  */
#line 1555 "grammar.y"
    { (yyval.exp) = MkExpOffsetOf((yyvsp[(3) - (6)].typeName), (yyvsp[(5) - (6)].id)); (yyval.exp).loc = (yyloc); }
    break;

  case 346:
/* Line 1792 of yacc.c  */
#line 1569 "grammar.y"
    { (yyval.i) = '&'; }
    break;

  case 347:
/* Line 1792 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.i) = '*'; }
    break;

  case 348:
/* Line 1792 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.i) = '+'; }
    break;

  case 349:
/* Line 1792 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.i) = '-'; }
    break;

  case 350:
/* Line 1792 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.i) = '~'; }
    break;

  case 351:
/* Line 1792 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.i) = '!'; }
    break;

  case 352:
/* Line 1792 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.i) = DELETE; }
    break;

  case 353:
/* Line 1792 of yacc.c  */
#line 1576 "grammar.y"
    { (yyval.i) = _INCREF; }
    break;

  case 355:
/* Line 1792 of yacc.c  */
#line 1581 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].initializer)); (yyval.exp).loc = (yyloc); }
    break;

  case 356:
/* Line 1792 of yacc.c  */
#line 1582 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 358:
/* Line 1792 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 359:
/* Line 1792 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 360:
/* Line 1792 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 361:
/* Line 1792 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 362:
/* Line 1792 of yacc.c  */
#line 1591 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 363:
/* Line 1792 of yacc.c  */
#line 1592 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 365:
/* Line 1792 of yacc.c  */
#line 1597 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 366:
/* Line 1792 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 367:
/* Line 1792 of yacc.c  */
#line 1599 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 368:
/* Line 1792 of yacc.c  */
#line 1600 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 370:
/* Line 1792 of yacc.c  */
#line 1605 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 371:
/* Line 1792 of yacc.c  */
#line 1606 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 372:
/* Line 1792 of yacc.c  */
#line 1607 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 373:
/* Line 1792 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 374:
/* Line 1792 of yacc.c  */
#line 1613 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   }
    break;

  case 376:
/* Line 1792 of yacc.c  */
#line 1621 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); }
    break;

  case 377:
/* Line 1792 of yacc.c  */
#line 1622 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 378:
/* Line 1792 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 379:
/* Line 1792 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 380:
/* Line 1792 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 381:
/* Line 1792 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 382:
/* Line 1792 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 383:
/* Line 1792 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 385:
/* Line 1792 of yacc.c  */
#line 1633 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 386:
/* Line 1792 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 387:
/* Line 1792 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 388:
/* Line 1792 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 389:
/* Line 1792 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 390:
/* Line 1792 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 391:
/* Line 1792 of yacc.c  */
#line 1640 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 392:
/* Line 1792 of yacc.c  */
#line 1641 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 394:
/* Line 1792 of yacc.c  */
#line 1646 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 395:
/* Line 1792 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 396:
/* Line 1792 of yacc.c  */
#line 1649 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 397:
/* Line 1792 of yacc.c  */
#line 1650 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 399:
/* Line 1792 of yacc.c  */
#line 1655 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 400:
/* Line 1792 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 401:
/* Line 1792 of yacc.c  */
#line 1658 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 402:
/* Line 1792 of yacc.c  */
#line 1659 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 404:
/* Line 1792 of yacc.c  */
#line 1664 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 405:
/* Line 1792 of yacc.c  */
#line 1665 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 406:
/* Line 1792 of yacc.c  */
#line 1667 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 407:
/* Line 1792 of yacc.c  */
#line 1668 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 409:
/* Line 1792 of yacc.c  */
#line 1673 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 410:
/* Line 1792 of yacc.c  */
#line 1674 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 412:
/* Line 1792 of yacc.c  */
#line 1679 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 413:
/* Line 1792 of yacc.c  */
#line 1680 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 415:
/* Line 1792 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 416:
/* Line 1792 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 417:
/* Line 1792 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 418:
/* Line 1792 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 419:
/* Line 1792 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 420:
/* Line 1792 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 421:
/* Line 1792 of yacc.c  */
#line 1692 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 422:
/* Line 1792 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 423:
/* Line 1792 of yacc.c  */
#line 1695 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 424:
/* Line 1792 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 425:
/* Line 1792 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 426:
/* Line 1792 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 427:
/* Line 1792 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 428:
/* Line 1792 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 429:
/* Line 1792 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 430:
/* Line 1792 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 432:
/* Line 1792 of yacc.c  */
#line 1708 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 433:
/* Line 1792 of yacc.c  */
#line 1709 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 434:
/* Line 1792 of yacc.c  */
#line 1710 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 435:
/* Line 1792 of yacc.c  */
#line 1711 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 436:
/* Line 1792 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 437:
/* Line 1792 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 438:
/* Line 1792 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 439:
/* Line 1792 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 440:
/* Line 1792 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.i) = '='; }
    break;

  case 441:
/* Line 1792 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; }
    break;

  case 442:
/* Line 1792 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; }
    break;

  case 443:
/* Line 1792 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; }
    break;

  case 444:
/* Line 1792 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; }
    break;

  case 445:
/* Line 1792 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; }
    break;

  case 446:
/* Line 1792 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; }
    break;

  case 447:
/* Line 1792 of yacc.c  */
#line 1727 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; }
    break;

  case 448:
/* Line 1792 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.i) = AND_ASSIGN; }
    break;

  case 449:
/* Line 1792 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; }
    break;

  case 450:
/* Line 1792 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.i) = OR_ASSIGN; }
    break;

  case 451:
/* Line 1792 of yacc.c  */
#line 1734 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 452:
/* Line 1792 of yacc.c  */
#line 1735 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 453:
/* Line 1792 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 455:
/* Line 1792 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 456:
/* Line 1792 of yacc.c  */
#line 1742 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 457:
/* Line 1792 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 459:
/* Line 1792 of yacc.c  */
#line 1748 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ }
    break;

  case 461:
/* Line 1792 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); }
    break;

  case 462:
/* Line 1792 of yacc.c  */
#line 1752 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 463:
/* Line 1792 of yacc.c  */
#line 1753 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 464:
/* Line 1792 of yacc.c  */
#line 1755 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 465:
/* Line 1792 of yacc.c  */
#line 1756 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 466:
/* Line 1792 of yacc.c  */
#line 1761 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 467:
/* Line 1792 of yacc.c  */
#line 1763 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;}
    break;

  case 468:
/* Line 1792 of yacc.c  */
#line 1768 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); }
    break;

  case 469:
/* Line 1792 of yacc.c  */
#line 1796 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 470:
/* Line 1792 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 471:
/* Line 1792 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 472:
/* Line 1792 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 473:
/* Line 1792 of yacc.c  */
#line 1801 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 474:
/* Line 1792 of yacc.c  */
#line 1802 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 475:
/* Line 1792 of yacc.c  */
#line 1803 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 476:
/* Line 1792 of yacc.c  */
#line 1804 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); }
    break;

  case 477:
/* Line 1792 of yacc.c  */
#line 1806 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 478:
/* Line 1792 of yacc.c  */
#line 1807 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); }
    break;

  case 482:
/* Line 1792 of yacc.c  */
#line 1822 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 484:
/* Line 1792 of yacc.c  */
#line 1827 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 485:
/* Line 1792 of yacc.c  */
#line 1828 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 486:
/* Line 1792 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 487:
/* Line 1792 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 488:
/* Line 1792 of yacc.c  */
#line 1831 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 489:
/* Line 1792 of yacc.c  */
#line 1832 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 491:
/* Line 1792 of yacc.c  */
#line 1837 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 492:
/* Line 1792 of yacc.c  */
#line 1841 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 493:
/* Line 1792 of yacc.c  */
#line 1845 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 494:
/* Line 1792 of yacc.c  */
#line 1849 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 496:
/* Line 1792 of yacc.c  */
#line 1857 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 497:
/* Line 1792 of yacc.c  */
#line 1858 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 498:
/* Line 1792 of yacc.c  */
#line 1859 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 499:
/* Line 1792 of yacc.c  */
#line 1860 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 501:
/* Line 1792 of yacc.c  */
#line 1866 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         _DeclClass((yyvsp[(1) - (2)].exp).identifier._class, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   }
    break;

  case 502:
/* Line 1792 of yacc.c  */
#line 1908 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 503:
/* Line 1792 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 504:
/* Line 1792 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 505:
/* Line 1792 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 506:
/* Line 1792 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 507:
/* Line 1792 of yacc.c  */
#line 1913 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 508:
/* Line 1792 of yacc.c  */
#line 1914 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 510:
/* Line 1792 of yacc.c  */
#line 1919 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 511:
/* Line 1792 of yacc.c  */
#line 1920 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 512:
/* Line 1792 of yacc.c  */
#line 1921 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 513:
/* Line 1792 of yacc.c  */
#line 1922 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 514:
/* Line 1792 of yacc.c  */
#line 1929 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 515:
/* Line 1792 of yacc.c  */
#line 1930 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 516:
/* Line 1792 of yacc.c  */
#line 1931 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 517:
/* Line 1792 of yacc.c  */
#line 1932 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 519:
/* Line 1792 of yacc.c  */
#line 1937 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 520:
/* Line 1792 of yacc.c  */
#line 1938 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 521:
/* Line 1792 of yacc.c  */
#line 1940 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 522:
/* Line 1792 of yacc.c  */
#line 1941 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 524:
/* Line 1792 of yacc.c  */
#line 1946 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 525:
/* Line 1792 of yacc.c  */
#line 1947 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 526:
/* Line 1792 of yacc.c  */
#line 1949 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 527:
/* Line 1792 of yacc.c  */
#line 1950 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 529:
/* Line 1792 of yacc.c  */
#line 1955 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 530:
/* Line 1792 of yacc.c  */
#line 1956 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 531:
/* Line 1792 of yacc.c  */
#line 1958 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 532:
/* Line 1792 of yacc.c  */
#line 1959 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 534:
/* Line 1792 of yacc.c  */
#line 1964 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 535:
/* Line 1792 of yacc.c  */
#line 1965 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 537:
/* Line 1792 of yacc.c  */
#line 1970 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 538:
/* Line 1792 of yacc.c  */
#line 1971 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 540:
/* Line 1792 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 541:
/* Line 1792 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 542:
/* Line 1792 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 543:
/* Line 1792 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 544:
/* Line 1792 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 545:
/* Line 1792 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 546:
/* Line 1792 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 547:
/* Line 1792 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 548:
/* Line 1792 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 549:
/* Line 1792 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 550:
/* Line 1792 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 551:
/* Line 1792 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 552:
/* Line 1792 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 553:
/* Line 1792 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 554:
/* Line 1792 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 555:
/* Line 1792 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); }
    break;

  case 556:
/* Line 1792 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 557:
/* Line 1792 of yacc.c  */
#line 1995 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 558:
/* Line 1792 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 559:
/* Line 1792 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 560:
/* Line 1792 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 561:
/* Line 1792 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 562:
/* Line 1792 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 563:
/* Line 1792 of yacc.c  */
#line 2002 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 564:
/* Line 1792 of yacc.c  */
#line 2005 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 565:
/* Line 1792 of yacc.c  */
#line 2013 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      }
    break;

  case 566:
/* Line 1792 of yacc.c  */
#line 2017 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 567:
/* Line 1792 of yacc.c  */
#line 2022 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      }
    break;

  case 569:
/* Line 1792 of yacc.c  */
#line 2029 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 570:
/* Line 1792 of yacc.c  */
#line 2033 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 571:
/* Line 1792 of yacc.c  */
#line 2038 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 572:
/* Line 1792 of yacc.c  */
#line 2039 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); }
    break;

  case 573:
/* Line 1792 of yacc.c  */
#line 2043 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 574:
/* Line 1792 of yacc.c  */
#line 2044 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 575:
/* Line 1792 of yacc.c  */
#line 2045 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 576:
/* Line 1792 of yacc.c  */
#line 2046 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 577:
/* Line 1792 of yacc.c  */
#line 2052 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 578:
/* Line 1792 of yacc.c  */
#line 2053 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 579:
/* Line 1792 of yacc.c  */
#line 2054 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); }
    break;

  case 580:
/* Line 1792 of yacc.c  */
#line 2058 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); }
    break;

  case 581:
/* Line 1792 of yacc.c  */
#line 2059 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); }
    break;

  case 582:
/* Line 1792 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 583:
/* Line 1792 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); }
    break;

  case 586:
/* Line 1792 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); }
    break;

  case 587:
/* Line 1792 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 588:
/* Line 1792 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); }
    break;

  case 589:
/* Line 1792 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 590:
/* Line 1792 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 591:
/* Line 1792 of yacc.c  */
#line 2076 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 592:
/* Line 1792 of yacc.c  */
#line 2077 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 593:
/* Line 1792 of yacc.c  */
#line 2081 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; }
    break;

  case 594:
/* Line 1792 of yacc.c  */
#line 2082 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); }
    break;

  case 595:
/* Line 1792 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; }
    break;

  case 596:
/* Line 1792 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); }
    break;

  case 597:
/* Line 1792 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); }
    break;

  case 598:
/* Line 1792 of yacc.c  */
#line 2086 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); }
    break;

  case 599:
/* Line 1792 of yacc.c  */
#line 2087 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); }
    break;

  case 600:
/* Line 1792 of yacc.c  */
#line 2091 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null, null); }
    break;

  case 601:
/* Line 1792 of yacc.c  */
#line 2092 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 602:
/* Line 1792 of yacc.c  */
#line 2093 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp), null); }
    break;

  case 603:
/* Line 1792 of yacc.c  */
#line 2094 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (2)].id), null, (yyvsp[(2) - (2)].list)); }
    break;

  case 604:
/* Line 1792 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 605:
/* Line 1792 of yacc.c  */
#line 2096 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (4)].id), (yyvsp[(4) - (4)].exp), (yyvsp[(2) - (4)].list)); }
    break;

  case 606:
/* Line 1792 of yacc.c  */
#line 2100 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); }
    break;

  case 607:
/* Line 1792 of yacc.c  */
#line 2101 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); }
    break;

  case 609:
/* Line 1792 of yacc.c  */
#line 2106 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 610:
/* Line 1792 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 611:
/* Line 1792 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS; }
    break;

  case 612:
/* Line 1792 of yacc.c  */
#line 2115 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); }
    break;

  case 613:
/* Line 1792 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 614:
/* Line 1792 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 615:
/* Line 1792 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 616:
/* Line 1792 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 617:
/* Line 1792 of yacc.c  */
#line 2124 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 618:
/* Line 1792 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 619:
/* Line 1792 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 620:
/* Line 1792 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 621:
/* Line 1792 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS; }
    break;

  case 622:
/* Line 1792 of yacc.c  */
#line 2130 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 623:
/* Line 1792 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 624:
/* Line 1792 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 625:
/* Line 1792 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 626:
/* Line 1792 of yacc.c  */
#line 2134 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 627:
/* Line 1792 of yacc.c  */
#line 2136 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 628:
/* Line 1792 of yacc.c  */
#line 2137 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS; }
    break;

  case 629:
/* Line 1792 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); }
    break;

  case 630:
/* Line 1792 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); }
    break;

  case 631:
/* Line 1792 of yacc.c  */
#line 2146 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 632:
/* Line 1792 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 633:
/* Line 1792 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS; }
    break;

  case 634:
/* Line 1792 of yacc.c  */
#line 2152 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 635:
/* Line 1792 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 636:
/* Line 1792 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 637:
/* Line 1792 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 638:
/* Line 1792 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 639:
/* Line 1792 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 640:
/* Line 1792 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 641:
/* Line 1792 of yacc.c  */
#line 2159 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 642:
/* Line 1792 of yacc.c  */
#line 2160 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 643:
/* Line 1792 of yacc.c  */
#line 2162 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 644:
/* Line 1792 of yacc.c  */
#line 2163 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 645:
/* Line 1792 of yacc.c  */
#line 2165 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 646:
/* Line 1792 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 647:
/* Line 1792 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 648:
/* Line 1792 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 649:
/* Line 1792 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 650:
/* Line 1792 of yacc.c  */
#line 2171 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 651:
/* Line 1792 of yacc.c  */
#line 2172 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 652:
/* Line 1792 of yacc.c  */
#line 2173 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 653:
/* Line 1792 of yacc.c  */
#line 2174 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 658:
/* Line 1792 of yacc.c  */
#line 2188 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); }
    break;

  case 659:
/* Line 1792 of yacc.c  */
#line 2192 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); }
    break;

  case 660:
/* Line 1792 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); }
    break;

  case 661:
/* Line 1792 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); }
    break;

  case 662:
/* Line 1792 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 663:
/* Line 1792 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  }
    break;

  case 664:
/* Line 1792 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 665:
/* Line 1792 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 666:
/* Line 1792 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 667:
/* Line 1792 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 668:
/* Line 1792 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 669:
/* Line 1792 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 670:
/* Line 1792 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 671:
/* Line 1792 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 672:
/* Line 1792 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 673:
/* Line 1792 of yacc.c  */
#line 2213 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 674:
/* Line 1792 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 675:
/* Line 1792 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 676:
/* Line 1792 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 677:
/* Line 1792 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 678:
/* Line 1792 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 682:
/* Line 1792 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 683:
/* Line 1792 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 684:
/* Line 1792 of yacc.c  */
#line 2224 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 685:
/* Line 1792 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 686:
/* Line 1792 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); }
    break;

  case 687:
/* Line 1792 of yacc.c  */
#line 2227 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); }
    break;

  case 688:
/* Line 1792 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 689:
/* Line 1792 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 690:
/* Line 1792 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 691:
/* Line 1792 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 692:
/* Line 1792 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); }
    break;

  case 693:
/* Line 1792 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); }
    break;

  case 694:
/* Line 1792 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); }
    break;

  case 695:
/* Line 1792 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); }
    break;

  case 696:
/* Line 1792 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); }
    break;

  case 697:
/* Line 1792 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); }
    break;

  case 698:
/* Line 1792 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); }
    break;

  case 699:
/* Line 1792 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); }
    break;

  case 700:
/* Line 1792 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); }
    break;

  case 701:
/* Line 1792 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); }
    break;

  case 702:
/* Line 1792 of yacc.c  */
#line 2245 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); }
    break;

  case 703:
/* Line 1792 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); }
    break;

  case 704:
/* Line 1792 of yacc.c  */
#line 2247 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); }
    break;

  case 705:
/* Line 1792 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); }
    break;

  case 706:
/* Line 1792 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); }
    break;

  case 710:
/* Line 1792 of yacc.c  */
#line 2253 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); }
    break;

  case 711:
/* Line 1792 of yacc.c  */
#line 2254 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); }
    break;

  case 712:
/* Line 1792 of yacc.c  */
#line 2255 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); }
    break;

  case 713:
/* Line 1792 of yacc.c  */
#line 2256 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); }
    break;

  case 714:
/* Line 1792 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); }
    break;

  case 715:
/* Line 1792 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); }
    break;

  case 716:
/* Line 1792 of yacc.c  */
#line 2259 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); }
    break;

  case 717:
/* Line 1792 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); }
    break;

  case 718:
/* Line 1792 of yacc.c  */
#line 2267 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); }
    break;

  case 719:
/* Line 1792 of yacc.c  */
#line 2269 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); }
    break;

  case 720:
/* Line 1792 of yacc.c  */
#line 2271 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 721:
/* Line 1792 of yacc.c  */
#line 2273 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 722:
/* Line 1792 of yacc.c  */
#line 2275 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 723:
/* Line 1792 of yacc.c  */
#line 2277 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 724:
/* Line 1792 of yacc.c  */
#line 2279 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); }
    break;

  case 725:
/* Line 1792 of yacc.c  */
#line 2281 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 726:
/* Line 1792 of yacc.c  */
#line 2283 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 727:
/* Line 1792 of yacc.c  */
#line 2285 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); }
    break;

  case 728:
/* Line 1792 of yacc.c  */
#line 2289 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); }
    break;

  case 729:
/* Line 1792 of yacc.c  */
#line 2290 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); }
    break;

  case 730:
/* Line 1792 of yacc.c  */
#line 2295 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 731:
/* Line 1792 of yacc.c  */
#line 2301 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      }
    break;

  case 732:
/* Line 1792 of yacc.c  */
#line 2307 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      }
    break;

  case 733:
/* Line 1792 of yacc.c  */
#line 2314 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      }
    break;

  case 734:
/* Line 1792 of yacc.c  */
#line 2323 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 735:
/* Line 1792 of yacc.c  */
#line 2324 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 736:
/* Line 1792 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 737:
/* Line 1792 of yacc.c  */
#line 2326 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS; }
    break;

  case 738:
/* Line 1792 of yacc.c  */
#line 2330 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 739:
/* Line 1792 of yacc.c  */
#line 2331 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 740:
/* Line 1792 of yacc.c  */
#line 2332 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 741:
/* Line 1792 of yacc.c  */
#line 2334 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 742:
/* Line 1792 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 743:
/* Line 1792 of yacc.c  */
#line 2336 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 744:
/* Line 1792 of yacc.c  */
#line 2338 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 745:
/* Line 1792 of yacc.c  */
#line 2339 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 746:
/* Line 1792 of yacc.c  */
#line 2340 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS; }
    break;

  case 747:
/* Line 1792 of yacc.c  */
#line 2344 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 748:
/* Line 1792 of yacc.c  */
#line 2349 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (1)].specifier).id._class, (yyvsp[(1) - (1)].specifier).id.string);
        }
     }
    break;

  case 749:
/* Line 1792 of yacc.c  */
#line 2357 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (4)].specifier).id._class, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   }
    break;

  case 750:
/* Line 1792 of yacc.c  */
#line 2366 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   }
    break;

  case 751:
/* Line 1792 of yacc.c  */
#line 2374 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); }
    break;

  case 752:
/* Line 1792 of yacc.c  */
#line 2376 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 753:
/* Line 1792 of yacc.c  */
#line 2377 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 754:
/* Line 1792 of yacc.c  */
#line 2378 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 755:
/* Line 1792 of yacc.c  */
#line 2383 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 756:
/* Line 1792 of yacc.c  */
#line 2390 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   }
    break;

  case 757:
/* Line 1792 of yacc.c  */
#line 2397 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);}
    break;

  case 758:
/* Line 1792 of yacc.c  */
#line 2400 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 759:
/* Line 1792 of yacc.c  */
#line 2413 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS;
     }
    break;

  case 760:
/* Line 1792 of yacc.c  */
#line 2427 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); }
    break;

  case 761:
/* Line 1792 of yacc.c  */
#line 2430 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS;  }
    break;

  case 762:
/* Line 1792 of yacc.c  */
#line 2432 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS; }
    break;

  case 763:
/* Line 1792 of yacc.c  */
#line 2434 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS; }
    break;

  case 764:
/* Line 1792 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 765:
/* Line 1792 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; }
    break;

  case 766:
/* Line 1792 of yacc.c  */
#line 2443 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 767:
/* Line 1792 of yacc.c  */
#line 2444 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 768:
/* Line 1792 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 769:
/* Line 1792 of yacc.c  */
#line 2446 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 770:
/* Line 1792 of yacc.c  */
#line 2447 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 771:
/* Line 1792 of yacc.c  */
#line 2448 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 772:
/* Line 1792 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 773:
/* Line 1792 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 774:
/* Line 1792 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 775:
/* Line 1792 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 776:
/* Line 1792 of yacc.c  */
#line 2456 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 777:
/* Line 1792 of yacc.c  */
#line 2457 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 778:
/* Line 1792 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 779:
/* Line 1792 of yacc.c  */
#line 2459 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 780:
/* Line 1792 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 781:
/* Line 1792 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 782:
/* Line 1792 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 783:
/* Line 1792 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 784:
/* Line 1792 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 785:
/* Line 1792 of yacc.c  */
#line 2468 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 786:
/* Line 1792 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 787:
/* Line 1792 of yacc.c  */
#line 2470 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 788:
/* Line 1792 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 789:
/* Line 1792 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 790:
/* Line 1792 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 791:
/* Line 1792 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 792:
/* Line 1792 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 793:
/* Line 1792 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 794:
/* Line 1792 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 795:
/* Line 1792 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 796:
/* Line 1792 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 797:
/* Line 1792 of yacc.c  */
#line 2483 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 798:
/* Line 1792 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 799:
/* Line 1792 of yacc.c  */
#line 2485 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 800:
/* Line 1792 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 801:
/* Line 1792 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 802:
/* Line 1792 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 803:
/* Line 1792 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 804:
/* Line 1792 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 805:
/* Line 1792 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 806:
/* Line 1792 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 807:
/* Line 1792 of yacc.c  */
#line 2496 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 808:
/* Line 1792 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 809:
/* Line 1792 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 810:
/* Line 1792 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 811:
/* Line 1792 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 812:
/* Line 1792 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 813:
/* Line 1792 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 814:
/* Line 1792 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 815:
/* Line 1792 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 816:
/* Line 1792 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 817:
/* Line 1792 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 818:
/* Line 1792 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); }
    break;

  case 819:
/* Line 1792 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); }
    break;

  case 820:
/* Line 1792 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 821:
/* Line 1792 of yacc.c  */
#line 2516 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 822:
/* Line 1792 of yacc.c  */
#line 2517 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 823:
/* Line 1792 of yacc.c  */
#line 2518 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 824:
/* Line 1792 of yacc.c  */
#line 2519 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 825:
/* Line 1792 of yacc.c  */
#line 2520 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 826:
/* Line 1792 of yacc.c  */
#line 2522 "grammar.y"
    { _DeclClass((yyvsp[(1) - (1)].id)._class, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 827:
/* Line 1792 of yacc.c  */
#line 2523 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 828:
/* Line 1792 of yacc.c  */
#line 2526 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 829:
/* Line 1792 of yacc.c  */
#line 2534 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 831:
/* Line 1792 of yacc.c  */
#line 2544 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS; }
    break;

  case 832:
/* Line 1792 of yacc.c  */
#line 2548 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 833:
/* Line 1792 of yacc.c  */
#line 2549 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 834:
/* Line 1792 of yacc.c  */
#line 2550 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 835:
/* Line 1792 of yacc.c  */
#line 2551 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 836:
/* Line 1792 of yacc.c  */
#line 2552 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 837:
/* Line 1792 of yacc.c  */
#line 2553 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 838:
/* Line 1792 of yacc.c  */
#line 2554 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 839:
/* Line 1792 of yacc.c  */
#line 2555 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 840:
/* Line 1792 of yacc.c  */
#line 2557 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 841:
/* Line 1792 of yacc.c  */
#line 2565 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 842:
/* Line 1792 of yacc.c  */
#line 2573 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 843:
/* Line 1792 of yacc.c  */
#line 2574 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 844:
/* Line 1792 of yacc.c  */
#line 2575 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 845:
/* Line 1792 of yacc.c  */
#line 2576 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 846:
/* Line 1792 of yacc.c  */
#line 2577 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 847:
/* Line 1792 of yacc.c  */
#line 2578 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 848:
/* Line 1792 of yacc.c  */
#line 2579 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 849:
/* Line 1792 of yacc.c  */
#line 2580 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 850:
/* Line 1792 of yacc.c  */
#line 2581 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 851:
/* Line 1792 of yacc.c  */
#line 2582 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 852:
/* Line 1792 of yacc.c  */
#line 2583 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 853:
/* Line 1792 of yacc.c  */
#line 2584 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 854:
/* Line 1792 of yacc.c  */
#line 2586 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 855:
/* Line 1792 of yacc.c  */
#line 2594 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 856:
/* Line 1792 of yacc.c  */
#line 2602 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 857:
/* Line 1792 of yacc.c  */
#line 2603 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 858:
/* Line 1792 of yacc.c  */
#line 2604 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 859:
/* Line 1792 of yacc.c  */
#line 2605 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 860:
/* Line 1792 of yacc.c  */
#line 2606 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 861:
/* Line 1792 of yacc.c  */
#line 2607 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 862:
/* Line 1792 of yacc.c  */
#line 2608 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 863:
/* Line 1792 of yacc.c  */
#line 2609 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 864:
/* Line 1792 of yacc.c  */
#line 2610 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); }
    break;

  case 865:
/* Line 1792 of yacc.c  */
#line 2611 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); }
    break;

  case 866:
/* Line 1792 of yacc.c  */
#line 2612 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 867:
/* Line 1792 of yacc.c  */
#line 2613 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); }
    break;

  case 868:
/* Line 1792 of yacc.c  */
#line 2615 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      }
    break;

  case 869:
/* Line 1792 of yacc.c  */
#line 2623 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      }
    break;

  case 870:
/* Line 1792 of yacc.c  */
#line 2631 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 871:
/* Line 1792 of yacc.c  */
#line 2632 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 872:
/* Line 1792 of yacc.c  */
#line 2636 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); }
    break;

  case 873:
/* Line 1792 of yacc.c  */
#line 2637 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 874:
/* Line 1792 of yacc.c  */
#line 2638 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 875:
/* Line 1792 of yacc.c  */
#line 2639 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 876:
/* Line 1792 of yacc.c  */
#line 2640 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); }
    break;

  case 878:
/* Line 1792 of yacc.c  */
#line 2646 "grammar.y"
    {
      char * colon = (yyvsp[(1) - (1)].specifier).name ? RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false) : null;
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   }
    break;

  case 879:
/* Line 1792 of yacc.c  */
#line 2652 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); }
    break;

  case 880:
/* Line 1792 of yacc.c  */
#line 2655 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 881:
/* Line 1792 of yacc.c  */
#line 2664 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      }
    break;

  case 882:
/* Line 1792 of yacc.c  */
#line 2673 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      }
    break;

  case 883:
/* Line 1792 of yacc.c  */
#line 2682 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      }
    break;

  case 884:
/* Line 1792 of yacc.c  */
#line 2690 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 885:
/* Line 1792 of yacc.c  */
#line 2691 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 886:
/* Line 1792 of yacc.c  */
#line 2692 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 887:
/* Line 1792 of yacc.c  */
#line 2693 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 888:
/* Line 1792 of yacc.c  */
#line 2697 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); }
    break;

  case 889:
/* Line 1792 of yacc.c  */
#line 2698 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 890:
/* Line 1792 of yacc.c  */
#line 2699 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 891:
/* Line 1792 of yacc.c  */
#line 2700 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 892:
/* Line 1792 of yacc.c  */
#line 2701 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 893:
/* Line 1792 of yacc.c  */
#line 2702 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 894:
/* Line 1792 of yacc.c  */
#line 2703 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 895:
/* Line 1792 of yacc.c  */
#line 2704 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 896:
/* Line 1792 of yacc.c  */
#line 2705 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 898:
/* Line 1792 of yacc.c  */
#line 2713 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 899:
/* Line 1792 of yacc.c  */
#line 2714 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 900:
/* Line 1792 of yacc.c  */
#line 2715 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 901:
/* Line 1792 of yacc.c  */
#line 2716 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 902:
/* Line 1792 of yacc.c  */
#line 2717 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 903:
/* Line 1792 of yacc.c  */
#line 2723 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 904:
/* Line 1792 of yacc.c  */
#line 2732 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 905:
/* Line 1792 of yacc.c  */
#line 2741 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 906:
/* Line 1792 of yacc.c  */
#line 2750 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 910:
/* Line 1792 of yacc.c  */
#line 2773 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 911:
/* Line 1792 of yacc.c  */
#line 2774 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 912:
/* Line 1792 of yacc.c  */
#line 2775 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 913:
/* Line 1792 of yacc.c  */
#line 2776 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); }
    break;

  case 914:
/* Line 1792 of yacc.c  */
#line 2777 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); }
    break;

  case 915:
/* Line 1792 of yacc.c  */
#line 2783 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 916:
/* Line 1792 of yacc.c  */
#line 2792 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      }
    break;

  case 917:
/* Line 1792 of yacc.c  */
#line 2801 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      }
    break;

  case 918:
/* Line 1792 of yacc.c  */
#line 2810 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      }
    break;

  case 921:
/* Line 1792 of yacc.c  */
#line 2873 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 922:
/* Line 1792 of yacc.c  */
#line 2874 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); }
    break;

  case 923:
/* Line 1792 of yacc.c  */
#line 2875 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 924:
/* Line 1792 of yacc.c  */
#line 2876 "grammar.y"
    { (yyval.extDecl) = MkExtDeclMultiAttrib((yyvsp[(1) - (1)].list)); }
    break;

  case 925:
/* Line 1792 of yacc.c  */
#line 2878 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      }
    break;

  case 926:
/* Line 1792 of yacc.c  */
#line 2889 "grammar.y"
    { (yyval.i) = ATTRIB; }
    break;

  case 927:
/* Line 1792 of yacc.c  */
#line 2890 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; }
    break;

  case 928:
/* Line 1792 of yacc.c  */
#line 2891 "grammar.y"
    { (yyval.i) = __ATTRIB; }
    break;

  case 929:
/* Line 1792 of yacc.c  */
#line 2896 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 930:
/* Line 1792 of yacc.c  */
#line 2897 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 931:
/* Line 1792 of yacc.c  */
#line 2898 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 932:
/* Line 1792 of yacc.c  */
#line 2899 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 933:
/* Line 1792 of yacc.c  */
#line 2900 "grammar.y"
    { (yyval.string)  = CopyString(yytext); }
    break;

  case 934:
/* Line 1792 of yacc.c  */
#line 2904 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); }
    break;

  case 935:
/* Line 1792 of yacc.c  */
#line 2905 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); }
    break;

  case 936:
/* Line 1792 of yacc.c  */
#line 2909 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); }
    break;

  case 937:
/* Line 1792 of yacc.c  */
#line 2910 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 938:
/* Line 1792 of yacc.c  */
#line 2911 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 939:
/* Line 1792 of yacc.c  */
#line 2915 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); }
    break;

  case 940:
/* Line 1792 of yacc.c  */
#line 2916 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); }
    break;

  case 941:
/* Line 1792 of yacc.c  */
#line 2920 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attrib)); }
    break;

  case 942:
/* Line 1792 of yacc.c  */
#line 2921 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attrib)); (yyval.list) = (yyvsp[(1) - (2)].list); }
    break;

  case 943:
/* Line 1792 of yacc.c  */
#line 2925 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 944:
/* Line 1792 of yacc.c  */
#line 2926 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 945:
/* Line 1792 of yacc.c  */
#line 2927 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); }
    break;

  case 946:
/* Line 1792 of yacc.c  */
#line 2928 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 947:
/* Line 1792 of yacc.c  */
#line 2929 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); }
    break;

  case 948:
/* Line 1792 of yacc.c  */
#line 2930 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); }
    break;

  case 949:
/* Line 1792 of yacc.c  */
#line 2931 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 950:
/* Line 1792 of yacc.c  */
#line 2932 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 951:
/* Line 1792 of yacc.c  */
#line 2933 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); }
    break;

  case 952:
/* Line 1792 of yacc.c  */
#line 2934 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); }
    break;

  case 953:
/* Line 1792 of yacc.c  */
#line 2935 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 954:
/* Line 1792 of yacc.c  */
#line 2936 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 955:
/* Line 1792 of yacc.c  */
#line 2937 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 956:
/* Line 1792 of yacc.c  */
#line 2938 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 957:
/* Line 1792 of yacc.c  */
#line 2939 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 958:
/* Line 1792 of yacc.c  */
#line 2940 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 959:
/* Line 1792 of yacc.c  */
#line 2944 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); }
    break;

  case 960:
/* Line 1792 of yacc.c  */
#line 2945 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); }
    break;

  case 961:
/* Line 1792 of yacc.c  */
#line 2946 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); }
    break;

  case 962:
/* Line 1792 of yacc.c  */
#line 2947 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 963:
/* Line 1792 of yacc.c  */
#line 2948 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); }
    break;

  case 964:
/* Line 1792 of yacc.c  */
#line 2949 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); }
    break;

  case 965:
/* Line 1792 of yacc.c  */
#line 2950 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 966:
/* Line 1792 of yacc.c  */
#line 2951 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); }
    break;

  case 967:
/* Line 1792 of yacc.c  */
#line 2955 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); }
    break;

  case 968:
/* Line 1792 of yacc.c  */
#line 2956 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); }
    break;

  case 969:
/* Line 1792 of yacc.c  */
#line 2957 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); }
    break;

  case 970:
/* Line 1792 of yacc.c  */
#line 2958 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); }
    break;

  case 971:
/* Line 1792 of yacc.c  */
#line 2962 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 973:
/* Line 1792 of yacc.c  */
#line 2964 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 974:
/* Line 1792 of yacc.c  */
#line 2965 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 975:
/* Line 1792 of yacc.c  */
#line 2966 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 976:
/* Line 1792 of yacc.c  */
#line 2970 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); }
    break;

  case 978:
/* Line 1792 of yacc.c  */
#line 2972 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 979:
/* Line 1792 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); }
    break;

  case 980:
/* Line 1792 of yacc.c  */
#line 2974 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 982:
/* Line 1792 of yacc.c  */
#line 2980 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 983:
/* Line 1792 of yacc.c  */
#line 2982 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 984:
/* Line 1792 of yacc.c  */
#line 2984 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 985:
/* Line 1792 of yacc.c  */
#line 2986 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 987:
/* Line 1792 of yacc.c  */
#line 2992 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 988:
/* Line 1792 of yacc.c  */
#line 2994 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 989:
/* Line 1792 of yacc.c  */
#line 2996 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); }
    break;

  case 991:
/* Line 1792 of yacc.c  */
#line 3001 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 992:
/* Line 1792 of yacc.c  */
#line 3002 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 993:
/* Line 1792 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 995:
/* Line 1792 of yacc.c  */
#line 3008 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 996:
/* Line 1792 of yacc.c  */
#line 3009 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 997:
/* Line 1792 of yacc.c  */
#line 3010 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 999:
/* Line 1792 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1000:
/* Line 1792 of yacc.c  */
#line 3016 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1001:
/* Line 1792 of yacc.c  */
#line 3017 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1003:
/* Line 1792 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1004:
/* Line 1792 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1005:
/* Line 1792 of yacc.c  */
#line 3024 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1007:
/* Line 1792 of yacc.c  */
#line 3029 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1008:
/* Line 1792 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1009:
/* Line 1792 of yacc.c  */
#line 3031 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1010:
/* Line 1792 of yacc.c  */
#line 3035 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1011:
/* Line 1792 of yacc.c  */
#line 3036 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1012:
/* Line 1792 of yacc.c  */
#line 3038 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1013:
/* Line 1792 of yacc.c  */
#line 3054 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1014:
/* Line 1792 of yacc.c  */
#line 3056 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      }
    break;

  case 1015:
/* Line 1792 of yacc.c  */
#line 3072 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1016:
/* Line 1792 of yacc.c  */
#line 3073 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1017:
/* Line 1792 of yacc.c  */
#line 3074 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1018:
/* Line 1792 of yacc.c  */
#line 3076 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      }
    break;

  case 1019:
/* Line 1792 of yacc.c  */
#line 3089 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      }
    break;

  case 1020:
/* Line 1792 of yacc.c  */
#line 3105 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1021:
/* Line 1792 of yacc.c  */
#line 3107 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1022:
/* Line 1792 of yacc.c  */
#line 3111 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1023:
/* Line 1792 of yacc.c  */
#line 3112 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); }
    break;

  case 1024:
/* Line 1792 of yacc.c  */
#line 3116 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1025:
/* Line 1792 of yacc.c  */
#line 3117 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); }
    break;

  case 1026:
/* Line 1792 of yacc.c  */
#line 3118 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1027:
/* Line 1792 of yacc.c  */
#line 3119 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); }
    break;

  case 1028:
/* Line 1792 of yacc.c  */
#line 3122 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1029:
/* Line 1792 of yacc.c  */
#line 3123 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); }
    break;

  case 1030:
/* Line 1792 of yacc.c  */
#line 3127 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1031:
/* Line 1792 of yacc.c  */
#line 3128 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1032:
/* Line 1792 of yacc.c  */
#line 3129 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1033:
/* Line 1792 of yacc.c  */
#line 3133 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); }
    break;

  case 1034:
/* Line 1792 of yacc.c  */
#line 3137 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; }
    break;

  case 1035:
/* Line 1792 of yacc.c  */
#line 3141 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1036:
/* Line 1792 of yacc.c  */
#line 3142 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1037:
/* Line 1792 of yacc.c  */
#line 3143 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1038:
/* Line 1792 of yacc.c  */
#line 3144 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1039:
/* Line 1792 of yacc.c  */
#line 3145 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__int128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1040:
/* Line 1792 of yacc.c  */
#line 3146 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__float128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1041:
/* Line 1792 of yacc.c  */
#line 3148 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   }
    break;

  case 1042:
/* Line 1792 of yacc.c  */
#line 3156 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1043:
/* Line 1792 of yacc.c  */
#line 3165 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); }
    break;

  case 1044:
/* Line 1792 of yacc.c  */
#line 3166 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); }
    break;

  case 1045:
/* Line 1792 of yacc.c  */
#line 3167 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1046:
/* Line 1792 of yacc.c  */
#line 3168 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); }
    break;

  case 1047:
/* Line 1792 of yacc.c  */
#line 3172 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1048:
/* Line 1792 of yacc.c  */
#line 3173 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1049:
/* Line 1792 of yacc.c  */
#line 3177 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); }
    break;

  case 1050:
/* Line 1792 of yacc.c  */
#line 3178 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1051:
/* Line 1792 of yacc.c  */
#line 3183 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1052:
/* Line 1792 of yacc.c  */
#line 3184 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); }
    break;

  case 1053:
/* Line 1792 of yacc.c  */
#line 3185 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); }
    break;

  case 1054:
/* Line 1792 of yacc.c  */
#line 3186 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); }
    break;

  case 1055:
/* Line 1792 of yacc.c  */
#line 3187 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); }
    break;

  case 1056:
/* Line 1792 of yacc.c  */
#line 3189 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); }
    break;

  case 1057:
/* Line 1792 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1058:
/* Line 1792 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); }
    break;

  case 1059:
/* Line 1792 of yacc.c  */
#line 3212 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1060:
/* Line 1792 of yacc.c  */
#line 3213 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1061:
/* Line 1792 of yacc.c  */
#line 3214 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1062:
/* Line 1792 of yacc.c  */
#line 3215 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1063:
/* Line 1792 of yacc.c  */
#line 3216 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1064:
/* Line 1792 of yacc.c  */
#line 3217 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1065:
/* Line 1792 of yacc.c  */
#line 3219 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1066:
/* Line 1792 of yacc.c  */
#line 3220 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1067:
/* Line 1792 of yacc.c  */
#line 3221 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1068:
/* Line 1792 of yacc.c  */
#line 3222 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1069:
/* Line 1792 of yacc.c  */
#line 3226 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); }
    break;

  case 1070:
/* Line 1792 of yacc.c  */
#line 3227 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1071:
/* Line 1792 of yacc.c  */
#line 3228 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1072:
/* Line 1792 of yacc.c  */
#line 3229 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1073:
/* Line 1792 of yacc.c  */
#line 3230 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1074:
/* Line 1792 of yacc.c  */
#line 3232 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1075:
/* Line 1792 of yacc.c  */
#line 3233 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); }
    break;

  case 1076:
/* Line 1792 of yacc.c  */
#line 3234 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); }
    break;

  case 1078:
/* Line 1792 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1079:
/* Line 1792 of yacc.c  */
#line 3240 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1080:
/* Line 1792 of yacc.c  */
#line 3241 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1081:
/* Line 1792 of yacc.c  */
#line 3242 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); }
    break;

  case 1082:
/* Line 1792 of yacc.c  */
#line 3243 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); }
    break;

  case 1084:
/* Line 1792 of yacc.c  */
#line 3248 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); }
    break;

  case 1087:
/* Line 1792 of yacc.c  */
#line 3255 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); }
    break;

  case 1089:
/* Line 1792 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1090:
/* Line 1792 of yacc.c  */
#line 3258 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); }
    break;

  case 1091:
/* Line 1792 of yacc.c  */
#line 3259 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1099:
/* Line 1792 of yacc.c  */
#line 3270 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1100:
/* Line 1792 of yacc.c  */
#line 3271 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1101:
/* Line 1792 of yacc.c  */
#line 3272 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1102:
/* Line 1792 of yacc.c  */
#line 3273 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1103:
/* Line 1792 of yacc.c  */
#line 3274 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1104:
/* Line 1792 of yacc.c  */
#line 3275 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); }
    break;

  case 1105:
/* Line 1792 of yacc.c  */
#line 3276 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); }
    break;

  case 1106:
/* Line 1792 of yacc.c  */
#line 3280 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); }
    break;

  case 1107:
/* Line 1792 of yacc.c  */
#line 3281 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); }
    break;

  case 1108:
/* Line 1792 of yacc.c  */
#line 3282 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); }
    break;

  case 1109:
/* Line 1792 of yacc.c  */
#line 3286 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); }
    break;

  case 1110:
/* Line 1792 of yacc.c  */
#line 3287 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); }
    break;

  case 1111:
/* Line 1792 of yacc.c  */
#line 3288 "grammar.y"
    { (yyval.list) = null; }
    break;

  case 1112:
/* Line 1792 of yacc.c  */
#line 3292 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1113:
/* Line 1792 of yacc.c  */
#line 3293 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1114:
/* Line 1792 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1115:
/* Line 1792 of yacc.c  */
#line 3295 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1116:
/* Line 1792 of yacc.c  */
#line 3297 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1117:
/* Line 1792 of yacc.c  */
#line 3298 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1118:
/* Line 1792 of yacc.c  */
#line 3299 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1119:
/* Line 1792 of yacc.c  */
#line 3301 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1120:
/* Line 1792 of yacc.c  */
#line 3302 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1121:
/* Line 1792 of yacc.c  */
#line 3303 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1122:
/* Line 1792 of yacc.c  */
#line 3304 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1123:
/* Line 1792 of yacc.c  */
#line 3306 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1124:
/* Line 1792 of yacc.c  */
#line 3307 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1125:
/* Line 1792 of yacc.c  */
#line 3308 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1126:
/* Line 1792 of yacc.c  */
#line 3312 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1127:
/* Line 1792 of yacc.c  */
#line 3313 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1128:
/* Line 1792 of yacc.c  */
#line 3314 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1129:
/* Line 1792 of yacc.c  */
#line 3315 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1130:
/* Line 1792 of yacc.c  */
#line 3316 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1131:
/* Line 1792 of yacc.c  */
#line 3318 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1132:
/* Line 1792 of yacc.c  */
#line 3319 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1133:
/* Line 1792 of yacc.c  */
#line 3320 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1134:
/* Line 1792 of yacc.c  */
#line 3321 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1135:
/* Line 1792 of yacc.c  */
#line 3322 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1136:
/* Line 1792 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1137:
/* Line 1792 of yacc.c  */
#line 3327 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1138:
/* Line 1792 of yacc.c  */
#line 3328 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1139:
/* Line 1792 of yacc.c  */
#line 3329 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1140:
/* Line 1792 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; }
    break;

  case 1141:
/* Line 1792 of yacc.c  */
#line 3331 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1142:
/* Line 1792 of yacc.c  */
#line 3332 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1143:
/* Line 1792 of yacc.c  */
#line 3334 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1144:
/* Line 1792 of yacc.c  */
#line 3335 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1145:
/* Line 1792 of yacc.c  */
#line 3336 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; }
    break;

  case 1146:
/* Line 1792 of yacc.c  */
#line 3337 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; }
    break;

  case 1147:
/* Line 1792 of yacc.c  */
#line 3338 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1148:
/* Line 1792 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; }
    break;

  case 1149:
/* Line 1792 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; }
    break;

  case 1150:
/* Line 1792 of yacc.c  */
#line 3344 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; }
    break;

  case 1151:
/* Line 1792 of yacc.c  */
#line 3348 "grammar.y"
    { (yyval.declMode) = publicAccess; }
    break;

  case 1152:
/* Line 1792 of yacc.c  */
#line 3349 "grammar.y"
    { (yyval.declMode) = privateAccess; }
    break;

  case 1153:
/* Line 1792 of yacc.c  */
#line 3353 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1154:
/* Line 1792 of yacc.c  */
#line 3354 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1155:
/* Line 1792 of yacc.c  */
#line 3355 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1156:
/* Line 1792 of yacc.c  */
#line 3356 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; }
    break;

  case 1157:
/* Line 1792 of yacc.c  */
#line 3360 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); }
    break;

  case 1158:
/* Line 1792 of yacc.c  */
#line 3361 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1159:
/* Line 1792 of yacc.c  */
#line 3362 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1160:
/* Line 1792 of yacc.c  */
#line 3364 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1161:
/* Line 1792 of yacc.c  */
#line 3365 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1162:
/* Line 1792 of yacc.c  */
#line 3366 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); }
    break;

  case 1163:
/* Line 1792 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; }
    break;

  case 1164:
/* Line 1792 of yacc.c  */
#line 3374 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1165:
/* Line 1792 of yacc.c  */
#line 3375 "grammar.y"
    { structDeclMode = defaultDeclMode;  }
    break;

  case 1166:
/* Line 1792 of yacc.c  */
#line 3377 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1167:
/* Line 1792 of yacc.c  */
#line 3378 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1168:
/* Line 1792 of yacc.c  */
#line 3379 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; }
    break;

  case 1169:
/* Line 1792 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ }
    break;

  case 1170:
/* Line 1792 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1171:
/* Line 1792 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */}
    break;

  case 1172:
/* Line 1792 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); }
    break;

  case 1173:
/* Line 1792 of yacc.c  */
#line 3390 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); }
    break;

  case 1174:
/* Line 1792 of yacc.c  */
#line 3391 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); }
    break;

  case 1175:
/* Line 1792 of yacc.c  */
#line 3395 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1176:
/* Line 1792 of yacc.c  */
#line 3396 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1177:
/* Line 1792 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1178:
/* Line 1792 of yacc.c  */
#line 3401 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); }
    break;

  case 1179:
/* Line 1792 of yacc.c  */
#line 3402 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1180:
/* Line 1792 of yacc.c  */
#line 3403 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); }
    break;

  case 1181:
/* Line 1792 of yacc.c  */
#line 3404 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1182:
/* Line 1792 of yacc.c  */
#line 3405 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1183:
/* Line 1792 of yacc.c  */
#line 3406 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1184:
/* Line 1792 of yacc.c  */
#line 3407 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ }
    break;

  case 1185:
/* Line 1792 of yacc.c  */
#line 3411 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1186:
/* Line 1792 of yacc.c  */
#line 3412 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1187:
/* Line 1792 of yacc.c  */
#line 3413 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1188:
/* Line 1792 of yacc.c  */
#line 3414 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1189:
/* Line 1792 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); }
    break;

  case 1190:
/* Line 1792 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); }
    break;

  case 1191:
/* Line 1792 of yacc.c  */
#line 3420 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1192:
/* Line 1792 of yacc.c  */
#line 3421 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); }
    break;

  case 1193:
/* Line 1792 of yacc.c  */
#line 3425 "grammar.y"
    { (yyval.context) = PushContext(); }
    break;

  case 1194:
/* Line 1792 of yacc.c  */
#line 3429 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); }
    break;

  case 1195:
/* Line 1792 of yacc.c  */
#line 3434 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1196:
/* Line 1792 of yacc.c  */
#line 3436 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1197:
/* Line 1792 of yacc.c  */
#line 3439 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; }
    break;

  case 1198:
/* Line 1792 of yacc.c  */
#line 3444 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1199:
/* Line 1792 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1200:
/* Line 1792 of yacc.c  */
#line 3446 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1201:
/* Line 1792 of yacc.c  */
#line 3450 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1202:
/* Line 1792 of yacc.c  */
#line 3451 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1203:
/* Line 1792 of yacc.c  */
#line 3452 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1204:
/* Line 1792 of yacc.c  */
#line 3453 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1205:
/* Line 1792 of yacc.c  */
#line 3454 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1206:
/* Line 1792 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1207:
/* Line 1792 of yacc.c  */
#line 3459 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1209:
/* Line 1792 of yacc.c  */
#line 3464 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1210:
/* Line 1792 of yacc.c  */
#line 3465 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1211:
/* Line 1792 of yacc.c  */
#line 3466 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1212:
/* Line 1792 of yacc.c  */
#line 3468 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1213:
/* Line 1792 of yacc.c  */
#line 3469 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1214:
/* Line 1792 of yacc.c  */
#line 3471 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1215:
/* Line 1792 of yacc.c  */
#line 3472 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1216:
/* Line 1792 of yacc.c  */
#line 3473 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1217:
/* Line 1792 of yacc.c  */
#line 3474 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1218:
/* Line 1792 of yacc.c  */
#line 3475 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1219:
/* Line 1792 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1220:
/* Line 1792 of yacc.c  */
#line 3478 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1221:
/* Line 1792 of yacc.c  */
#line 3482 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1222:
/* Line 1792 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); }
    break;

  case 1223:
/* Line 1792 of yacc.c  */
#line 3484 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1224:
/* Line 1792 of yacc.c  */
#line 3485 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); }
    break;

  case 1225:
/* Line 1792 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1226:
/* Line 1792 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1227:
/* Line 1792 of yacc.c  */
#line 3491 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1228:
/* Line 1792 of yacc.c  */
#line 3492 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1229:
/* Line 1792 of yacc.c  */
#line 3494 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1230:
/* Line 1792 of yacc.c  */
#line 3495 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1231:
/* Line 1792 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1232:
/* Line 1792 of yacc.c  */
#line 3497 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1233:
/* Line 1792 of yacc.c  */
#line 3498 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1234:
/* Line 1792 of yacc.c  */
#line 3499 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1235:
/* Line 1792 of yacc.c  */
#line 3500 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1236:
/* Line 1792 of yacc.c  */
#line 3503 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1237:
/* Line 1792 of yacc.c  */
#line 3507 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1238:
/* Line 1792 of yacc.c  */
#line 3508 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1239:
/* Line 1792 of yacc.c  */
#line 3512 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1240:
/* Line 1792 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); }
    break;

  case 1241:
/* Line 1792 of yacc.c  */
#line 3517 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1242:
/* Line 1792 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1243:
/* Line 1792 of yacc.c  */
#line 3519 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); }
    break;

  case 1244:
/* Line 1792 of yacc.c  */
#line 3520 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); }
    break;

  case 1245:
/* Line 1792 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1246:
/* Line 1792 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1247:
/* Line 1792 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1248:
/* Line 1792 of yacc.c  */
#line 3524 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1249:
/* Line 1792 of yacc.c  */
#line 3528 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); }
    break;

  case 1250:
/* Line 1792 of yacc.c  */
#line 3529 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); }
    break;

  case 1251:
/* Line 1792 of yacc.c  */
#line 3530 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; }
    break;

  case 1252:
/* Line 1792 of yacc.c  */
#line 3531 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); }
    break;

  case 1253:
/* Line 1792 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1254:
/* Line 1792 of yacc.c  */
#line 3539 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1255:
/* Line 1792 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1256:
/* Line 1792 of yacc.c  */
#line 3542 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1257:
/* Line 1792 of yacc.c  */
#line 3544 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); }
    break;

  case 1258:
/* Line 1792 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);}
    break;

  case 1259:
/* Line 1792 of yacc.c  */
#line 3548 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1260:
/* Line 1792 of yacc.c  */
#line 3549 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1261:
/* Line 1792 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; }
    break;

  case 1262:
/* Line 1792 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1263:
/* Line 1792 of yacc.c  */
#line 3552 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; }
    break;

  case 1264:
/* Line 1792 of yacc.c  */
#line 3553 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; }
    break;

  case 1265:
/* Line 1792 of yacc.c  */
#line 3557 "grammar.y"
    { (yyval.string) = CopyString(yytext); }
    break;

  case 1266:
/* Line 1792 of yacc.c  */
#line 3559 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   }
    break;

  case 1267:
/* Line 1792 of yacc.c  */
#line 3570 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1268:
/* Line 1792 of yacc.c  */
#line 3572 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1269:
/* Line 1792 of yacc.c  */
#line 3575 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); }
    break;

  case 1270:
/* Line 1792 of yacc.c  */
#line 3578 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1271:
/* Line 1792 of yacc.c  */
#line 3579 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1272:
/* Line 1792 of yacc.c  */
#line 3580 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); }
    break;

  case 1273:
/* Line 1792 of yacc.c  */
#line 3582 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   }
    break;

  case 1274:
/* Line 1792 of yacc.c  */
#line 3591 "grammar.y"
    { (yyval.external) = null; }
    break;

  case 1275:
/* Line 1792 of yacc.c  */
#line 3593 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1276:
/* Line 1792 of yacc.c  */
#line 3595 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1277:
/* Line 1792 of yacc.c  */
#line 3596 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1278:
/* Line 1792 of yacc.c  */
#line 3597 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1279:
/* Line 1792 of yacc.c  */
#line 3598 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1280:
/* Line 1792 of yacc.c  */
#line 3600 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   }
    break;

  case 1281:
/* Line 1792 of yacc.c  */
#line 3609 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; }
    break;

  case 1282:
/* Line 1792 of yacc.c  */
#line 3610 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; }
    break;

  case 1283:
/* Line 1792 of yacc.c  */
#line 3611 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); }
    break;

  case 1284:
/* Line 1792 of yacc.c  */
#line 3612 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); }
    break;

  case 1285:
/* Line 1792 of yacc.c  */
#line 3613 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1286:
/* Line 1792 of yacc.c  */
#line 3614 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1287:
/* Line 1792 of yacc.c  */
#line 3618 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1288:
/* Line 1792 of yacc.c  */
#line 3620 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   }
    break;

  case 1289:
/* Line 1792 of yacc.c  */
#line 3628 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1290:
/* Line 1792 of yacc.c  */
#line 3630 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1291:
/* Line 1792 of yacc.c  */
#line 3631 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1292:
/* Line 1792 of yacc.c  */
#line 3634 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1293:
/* Line 1792 of yacc.c  */
#line 3635 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1294:
/* Line 1792 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1295:
/* Line 1792 of yacc.c  */
#line 3640 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1296:
/* Line 1792 of yacc.c  */
#line 3641 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1299:
/* Line 1792 of yacc.c  */
#line 3647 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); }
    break;

  case 1300:
/* Line 1792 of yacc.c  */
#line 3648 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); }
    break;

  case 1301:
/* Line 1792 of yacc.c  */
#line 3650 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1302:
/* Line 1792 of yacc.c  */
#line 3652 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; }
    break;

  case 1305:
/* Line 1792 of yacc.c  */
#line 3658 "grammar.y"
    { ast = MkList(); }
    break;

  case 1306:
/* Line 1792 of yacc.c  */
#line 3662 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1307:
/* Line 1792 of yacc.c  */
#line 3663 "grammar.y"
    { Symbol symbol = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); }
    break;

  case 1308:
/* Line 1792 of yacc.c  */
#line 3664 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); }
    break;

  case 1309:
/* Line 1792 of yacc.c  */
#line 3668 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); }
    break;

  case 1310:
/* Line 1792 of yacc.c  */
#line 3672 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); }
    break;

  case 1311:
/* Line 1792 of yacc.c  */
#line 3673 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); }
    break;

  case 1312:
/* Line 1792 of yacc.c  */
#line 3674 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); }
    break;

  case 1313:
/* Line 1792 of yacc.c  */
#line 3678 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); }
    break;

  case 1314:
/* Line 1792 of yacc.c  */
#line 3679 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); }
    break;

  case 1315:
/* Line 1792 of yacc.c  */
#line 3683 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); }
    break;

  case 1316:
/* Line 1792 of yacc.c  */
#line 3684 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); }
    break;

  case 1317:
/* Line 1792 of yacc.c  */
#line 3688 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1318:
/* Line 1792 of yacc.c  */
#line 3689 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); }
    break;

  case 1319:
/* Line 1792 of yacc.c  */
#line 3690 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1320:
/* Line 1792 of yacc.c  */
#line 3691 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); }
    break;

  case 1321:
/* Line 1792 of yacc.c  */
#line 3695 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); }
    break;

  case 1322:
/* Line 1792 of yacc.c  */
#line 3699 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1323:
/* Line 1792 of yacc.c  */
#line 3703 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); }
    break;

  case 1324:
/* Line 1792 of yacc.c  */
#line 3707 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); }
    break;


/* Line 1792 of yacc.c  */
#line 21288 "grammar.ec"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


/* Line 2055 of yacc.c  */
#line 3710 "grammar.y"

