EC_BINS := $(_CF_DIR)$(if $(USE_BOOTSTRAP),compiler/bootstrap/obj/bin.$(HOST_PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/,obj/$(HOST_PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/bin/)

ifdef WINDOWS_HOST
 # Auto-Select MinGW-w64 when asking for 64 bit
 ifeq "$(ARCH)" "x64"
  GCC_PREFIX=x86_64-w64-mingw32-
 endif
endif

# TOOLCHAIN
export CC      = $(CCACHE_COMPILE)$(DISTCC_COMPILE)$(GCC_PREFIX)gcc$(_SYSROOT)
export CPP     = $(CCACHE_COMPILE)$(DISTCC_COMPILE)$(GCC_PREFIX)gcc$(_SYSROOT)
export AS      = $(GCC_PREFIX)as
export LD      = $(GCC_PREFIX)ld
export AR      = $(GCC_PREFIX)ar
export STRIP   = $(GCC_PREFIX)strip
export ECP := $(call psep,$(EC_BINS)ecp$(HOST_E))
export ECC := $(call psep,$(EC_BINS)ecc$(HOST_E))$(if $(CROSS_TARGET), -t $(TARGET_PLATFORM),)
export ECS := $(call psep,$(EC_BINS)ecs$(HOST_E))$(if $(CROSS_TARGET), -t $(TARGET_PLATFORM),)
export EAR := $(call psep,$(_CF_DIR)obj/$(HOST_PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/bin/ear$(HOST_E))
UPX := upx

ifndef ARCH
TARGET_ARCH :=$(shell $(CC) -dumpmachine)
 ifdef WINDOWS_TARGET
  ifneq ($(filter x86_64%,$(TARGET_ARCH)),)
     TARGET_ARCH := x86_64
  else
     TARGET_ARCH := i386
  endif
 endif
endif

ifndef WINDOWS_HOST
export LD_LIBRARY_PATH = $(_CF_DIR)obj/$(HOST_PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/lib/
export DYLD_LIBRARY_PATH = $(_CF_DIR)obj/$(HOST_PLATFORM)$(COMPILER_SUFFIX)$(DEBUG_SUFFIX)/lib/
endif

# HARD CODED PLATFORM-SPECIFIC OPTIONS
LDFLAGS +=$(if $(LINUX_TARGET), -Wl$(comma)--no-undefined,)
LDFLAGS +=$(if $(OSX_TARGET), -framework cocoa -framework OpenGL,)

ifdef BSD_TARGET
EXCLUDED_LIBS += $(space)dl
CFLAGS += -isystem /usr/local/include -isystem /usr/local/include/freetype2
LDFLAGS += -L/usr/local/lib
endif

ifdef OSX_TARGET
CFLAGS += -I$(SYSROOT)/usr/include/ffi
else
# OFLAGS += -L/usr/lib/$(TARGET_ARCH)/ec
endif

OFLAGS += $(LDFLAGS)

# FLAGS

UPXFLAGS = -9 -q

ifdef ARCH_FLAGS
CFLAGS += $(ARCH_FLAGS)
OFLAGS += $(ARCH_FLAGS)
endif

CFLAGS += -fmessage-length=0

EARFLAGS = q

ifdef DISABLE_GL
CFLAGS += -DECERE_NOGL
endif

