from pyeC import *
from _pyecere import *

class Resource(Instance):
   def __init__(self,
                impl = None):
      Instance.__init__(self, impl = impl)

@ffi.callback("void(FontManagerRenderer, int, int)")
def cb_FontManagerRenderer_createTexture(__f, width, height):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_createTexture(fontmanagerrenderer, width, height)

@ffi.callback("void(FontManagerRenderer, int, int, int, bool)")
def cb_FontManagerRenderer_drawImage(__f, targetx, targety, imageIndex, useExtColor):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_drawImage(fontmanagerrenderer, targetx, targety, imageIndex, useExtColor)

@ffi.callback("void(FontManagerRenderer, byte *, int, int, int, int, int, int)")
def cb_FontManagerRenderer_drawImageAlt(__f, texdata, targetx, targety, offsetx, offsety, width, height):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_drawImageAlt(fontmanagerrenderer, texdata, targetx, targety, offsetx, offsety, width, height)

@ffi.callback("void(FontManagerRenderer, int, int, int)")
def cb_FontManagerRenderer_drawImageCursor(__f, targetx, targety, imageIndex):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_drawImageCursor(fontmanagerrenderer, targetx, targety, imageIndex)

@ffi.callback("void(FontManagerRenderer, float, float, float, float, int, bool)")
def cb_FontManagerRenderer_drawImageFloat(__f, targetx, targety, angsin, angcos, imageIndex, useExtColor):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_drawImageFloat(fontmanagerrenderer, targetx, targety, angsin, angcos, imageIndex, useExtColor)

@ffi.callback("void(FontManagerRenderer)")
def cb_FontManagerRenderer_flush(__f):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_flush(fontmanagerrenderer)

@ffi.callback("void(FontManagerRenderer, int)")
def cb_FontManagerRenderer_init(__f, channelCount):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_init(fontmanagerrenderer, channelCount)

@ffi.callback("void(FontManagerRenderer, int, int, int, int)")
def cb_FontManagerRenderer_registerImage(__f, offsetx, offsety, width, height):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_registerImage(fontmanagerrenderer, offsetx, offsety, width, height)

@ffi.callback("void(FontManagerRenderer)")
def cb_FontManagerRenderer_resetImages(__f):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_resetImages(fontmanagerrenderer)

@ffi.callback("void(FontManagerRenderer, int, int)")
def cb_FontManagerRenderer_resizeTexture(__f, width, height):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_resizeTexture(fontmanagerrenderer, width, height)

@ffi.callback("void(FontManagerRenderer, uint32)")
def cb_FontManagerRenderer_setLayer(__f, layerIndex):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_setLayer(fontmanagerrenderer, layerIndex)

@ffi.callback("void(FontManagerRenderer, int *, const byte *)")
def cb_FontManagerRenderer_updateTexture(__f, rect, data):
   fontmanagerrenderer = pyOrNewObject(FontManagerRenderer, __f)
   fontmanagerrenderer.fn_FontManagerRenderer_updateTexture(fontmanagerrenderer, rect, data)

class FontManagerRenderer(Instance):
   def __init__(self,
                fm = None,
                createTexture = None,
                drawImage = None,
                drawImageAlt = None,
                drawImageCursor = None,
                drawImageFloat = None,
                flush = None,
                init = None,
                registerImage = None,
                resetImages = None,
                resizeTexture = None,
                setLayer = None,
                updateTexture = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if fm is not None:              self.fm = fm
      if createTexture is not None:   self.createTexture = createTexture
      if drawImage is not None:       self.drawImage = drawImage
      if drawImageAlt is not None:    self.drawImageAlt = drawImageAlt
      if drawImageCursor is not None: self.drawImageCursor = drawImageCursor
      if drawImageFloat is not None:  self.drawImageFloat = drawImageFloat
      if flush is not None:           self.flush = flush
      if init is not None:            self.init = init
      if registerImage is not None:   self.registerImage = registerImage
      if resetImages is not None:     self.resetImages = resetImages
      if resizeTexture is not None:   self.resizeTexture = resizeTexture
      if setLayer is not None:        self.setLayer = setLayer
      if updateTexture is not None:   self.updateTexture = updateTexture

   @property
   def fm(self): return FontManager(impl = IPTR(lib, ffi, self, FontManagerRenderer).fm)
   @fm.setter
   def fm(self, value):
      if not isinstance(value, FontManager): value = FontManager(value)
      IPTR(lib, ffi, self, FontManagerRenderer).fm = value.impl

   def fn_unset_FontManagerRenderer_createTexture(self, width, height):
      return lib.FontManagerRenderer_createTexture(self.impl, width, height)

   @property
   def createTexture(self):
      if hasattr(self, 'fn_FontManagerRenderer_createTexture'): return self.fn_FontManagerRenderer_createTexture
      else: return self.fn_unset_FontManagerRenderer_createTexture
   @createTexture.setter
   def createTexture(self, value):
      self.fn_FontManagerRenderer_createTexture = value
      lib.Instance_setMethod(self.impl, "createTexture".encode('utf8'), cb_FontManagerRenderer_createTexture)

   def fn_unset_FontManagerRenderer_drawImage(self, targetx, targety, imageIndex, useExtColor):
      return lib.FontManagerRenderer_drawImage(self.impl, targetx, targety, imageIndex, useExtColor)

   @property
   def drawImage(self):
      if hasattr(self, 'fn_FontManagerRenderer_drawImage'): return self.fn_FontManagerRenderer_drawImage
      else: return self.fn_unset_FontManagerRenderer_drawImage
   @drawImage.setter
   def drawImage(self, value):
      self.fn_FontManagerRenderer_drawImage = value
      lib.Instance_setMethod(self.impl, "drawImage".encode('utf8'), cb_FontManagerRenderer_drawImage)

   def fn_unset_FontManagerRenderer_drawImageAlt(self, texdata, targetx, targety, offsetx, offsety, width, height):
      return lib.FontManagerRenderer_drawImageAlt(self.impl, texdata, targetx, targety, offsetx, offsety, width, height)

   @property
   def drawImageAlt(self):
      if hasattr(self, 'fn_FontManagerRenderer_drawImageAlt'): return self.fn_FontManagerRenderer_drawImageAlt
      else: return self.fn_unset_FontManagerRenderer_drawImageAlt
   @drawImageAlt.setter
   def drawImageAlt(self, value):
      self.fn_FontManagerRenderer_drawImageAlt = value
      lib.Instance_setMethod(self.impl, "drawImageAlt".encode('utf8'), cb_FontManagerRenderer_drawImageAlt)

   def fn_unset_FontManagerRenderer_drawImageCursor(self, targetx, targety, imageIndex):
      return lib.FontManagerRenderer_drawImageCursor(self.impl, targetx, targety, imageIndex)

   @property
   def drawImageCursor(self):
      if hasattr(self, 'fn_FontManagerRenderer_drawImageCursor'): return self.fn_FontManagerRenderer_drawImageCursor
      else: return self.fn_unset_FontManagerRenderer_drawImageCursor
   @drawImageCursor.setter
   def drawImageCursor(self, value):
      self.fn_FontManagerRenderer_drawImageCursor = value
      lib.Instance_setMethod(self.impl, "drawImageCursor".encode('utf8'), cb_FontManagerRenderer_drawImageCursor)

   def fn_unset_FontManagerRenderer_drawImageFloat(self, targetx, targety, angsin, angcos, imageIndex, useExtColor):
      return lib.FontManagerRenderer_drawImageFloat(self.impl, targetx, targety, angsin, angcos, imageIndex, useExtColor)

   @property
   def drawImageFloat(self):
      if hasattr(self, 'fn_FontManagerRenderer_drawImageFloat'): return self.fn_FontManagerRenderer_drawImageFloat
      else: return self.fn_unset_FontManagerRenderer_drawImageFloat
   @drawImageFloat.setter
   def drawImageFloat(self, value):
      self.fn_FontManagerRenderer_drawImageFloat = value
      lib.Instance_setMethod(self.impl, "drawImageFloat".encode('utf8'), cb_FontManagerRenderer_drawImageFloat)

   def fn_unset_FontManagerRenderer_flush(self):
      return lib.FontManagerRenderer_flush(self.impl)

   @property
   def flush(self):
      if hasattr(self, 'fn_FontManagerRenderer_flush'): return self.fn_FontManagerRenderer_flush
      else: return self.fn_unset_FontManagerRenderer_flush
   @flush.setter
   def flush(self, value):
      self.fn_FontManagerRenderer_flush = value
      lib.Instance_setMethod(self.impl, "flush".encode('utf8'), cb_FontManagerRenderer_flush)

   def fn_unset_FontManagerRenderer_init(self, channelCount):
      return lib.FontManagerRenderer_init(self.impl, channelCount)

   @property
   def init(self):
      if hasattr(self, 'fn_FontManagerRenderer_init'): return self.fn_FontManagerRenderer_init
      else: return self.fn_unset_FontManagerRenderer_init
   @init.setter
   def init(self, value):
      self.fn_FontManagerRenderer_init = value
      lib.Instance_setMethod(self.impl, "init".encode('utf8'), cb_FontManagerRenderer_init)

   def fn_unset_FontManagerRenderer_registerImage(self, offsetx, offsety, width, height):
      return lib.FontManagerRenderer_registerImage(self.impl, offsetx, offsety, width, height)

   @property
   def registerImage(self):
      if hasattr(self, 'fn_FontManagerRenderer_registerImage'): return self.fn_FontManagerRenderer_registerImage
      else: return self.fn_unset_FontManagerRenderer_registerImage
   @registerImage.setter
   def registerImage(self, value):
      self.fn_FontManagerRenderer_registerImage = value
      lib.Instance_setMethod(self.impl, "registerImage".encode('utf8'), cb_FontManagerRenderer_registerImage)

   def fn_unset_FontManagerRenderer_resetImages(self):
      return lib.FontManagerRenderer_resetImages(self.impl)

   @property
   def resetImages(self):
      if hasattr(self, 'fn_FontManagerRenderer_resetImages'): return self.fn_FontManagerRenderer_resetImages
      else: return self.fn_unset_FontManagerRenderer_resetImages
   @resetImages.setter
   def resetImages(self, value):
      self.fn_FontManagerRenderer_resetImages = value
      lib.Instance_setMethod(self.impl, "resetImages".encode('utf8'), cb_FontManagerRenderer_resetImages)

   def fn_unset_FontManagerRenderer_resizeTexture(self, width, height):
      return lib.FontManagerRenderer_resizeTexture(self.impl, width, height)

   @property
   def resizeTexture(self):
      if hasattr(self, 'fn_FontManagerRenderer_resizeTexture'): return self.fn_FontManagerRenderer_resizeTexture
      else: return self.fn_unset_FontManagerRenderer_resizeTexture
   @resizeTexture.setter
   def resizeTexture(self, value):
      self.fn_FontManagerRenderer_resizeTexture = value
      lib.Instance_setMethod(self.impl, "resizeTexture".encode('utf8'), cb_FontManagerRenderer_resizeTexture)

   def fn_unset_FontManagerRenderer_setLayer(self, layerIndex):
      return lib.FontManagerRenderer_setLayer(self.impl, layerIndex)

   @property
   def setLayer(self):
      if hasattr(self, 'fn_FontManagerRenderer_setLayer'): return self.fn_FontManagerRenderer_setLayer
      else: return self.fn_unset_FontManagerRenderer_setLayer
   @setLayer.setter
   def setLayer(self, value):
      self.fn_FontManagerRenderer_setLayer = value
      lib.Instance_setMethod(self.impl, "setLayer".encode('utf8'), cb_FontManagerRenderer_setLayer)

   def fn_unset_FontManagerRenderer_updateTexture(self, rect, data):
      if rect is None: rect = ffi.NULL
      return lib.FontManagerRenderer_updateTexture(self.impl, rect, data)

   @property
   def updateTexture(self):
      if hasattr(self, 'fn_FontManagerRenderer_updateTexture'): return self.fn_FontManagerRenderer_updateTexture
      else: return self.fn_unset_FontManagerRenderer_updateTexture
   @updateTexture.setter
   def updateTexture(self, value):
      self.fn_FontManagerRenderer_updateTexture = value
      lib.Instance_setMethod(self.impl, "updateTexture".encode('utf8'), cb_FontManagerRenderer_updateTexture)

class ColorRGB:
   def __init__(self, r = 0.0, g = 0.0, b = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("ColorRGB *", impl)
      else:
         if isinstance(r, tuple):
            __tuple = r
            r = 0.0
            if len(__tuple) > 0: r = __tuple[0]
            if len(__tuple) > 1: g = __tuple[1]
            if len(__tuple) > 2: b = __tuple[2]
         self.impl = ffi.new("ColorRGB *", { 'r' : r, 'g' : g, 'b' : b })

   @property
   def r(self): return self.impl.r
   @r.setter
   def r(self, value): self.impl.r = value

   @property
   def g(self): return self.impl.g
   @g.setter
   def g(self, value): self.impl.g = value

   @property
   def b(self): return self.impl.b
   @b.setter
   def b(self, value): self.impl.b = value

class Color(pyBaseClass):
   def __init__(self, r = 0, g = 0, b = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(r, Color):
         self.impl = r.impl
      else:
         if isinstance(r, tuple):
            __tuple = r
            r = 0
            if len(__tuple) > 0: r = __tuple[0]
            if len(__tuple) > 1: g = __tuple[1]
            if len(__tuple) > 2: b = __tuple[2]
         elif isinstance(r, ColorRGB):
            self.impl = lib.Color_from_ColorRGB(r.impl)
            return
         elif isinstance(r, Color444):
            self.impl = lib.Color444_to_Color(r.impl)
            return
         elif isinstance(r, Color555):
            self.impl = lib.Color555_to_Color(r.impl)
            return
         elif isinstance(r, Color565):
            self.impl = lib.Color565_to_Color(r.impl)
            return
         elif isinstance(r, ColorAlpha):
            self.impl = lib.ColorAlpha_to_Color(r.impl)
            return
         elif isinstance(r, ColorRGBA):
            self.impl = lib.ColorRGBA_to_Color(r.impl)
            return
         elif isinstance(r, ColorRGBAf):
            self.impl = lib.ColorRGBAf_to_Color(r)
            return
         self.impl = (
            (r << lib.COLOR_r_SHIFT) |
            (g << lib.COLOR_g_SHIFT) |
            (b << lib.COLOR_b_SHIFT) )

   @property
   def r(self): return ((((self.impl)) & lib.COLOR_r_MASK) >> lib.COLOR_r_SHIFT)
   @r.setter
   def r(self, value): self.value = ((self.impl) & ~(lib.COLOR_r_MASK)) | (((value)) << lib.COLOR_r_SHIFT)

   @property
   def g(self): return ((((self.impl)) & lib.COLOR_g_MASK) >> lib.COLOR_g_SHIFT)
   @g.setter
   def g(self, value): self.value = ((self.impl) & ~(lib.COLOR_g_MASK)) | (((value)) << lib.COLOR_g_SHIFT)

   @property
   def b(self): return ((((self.impl)) & lib.COLOR_b_MASK) >> lib.COLOR_b_SHIFT)
   @b.setter
   def b(self, value): self.value = ((self.impl) & ~(lib.COLOR_b_MASK)) | (((value)) << lib.COLOR_b_SHIFT)

   # here is a conversion
   # Color_to_ColorRGB
   # Color_from_ColorRGB

class ColorAlpha(pyBaseClass):
   def __init__(self, a = 0, color = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(a, ColorAlpha):
         self.impl = a.impl
      else:
         if isinstance(a, tuple):
            __tuple = a
            a = 0
            if len(__tuple) > 0: a = __tuple[0]
            if len(__tuple) > 1: color = __tuple[1]
         elif isinstance(a, Color):
            self.impl = lib.ColorAlpha_from_Color(a.impl)
            return
         elif isinstance(a, ColorRGBA):
            self.impl = lib.ColorRGBA_to_ColorAlpha(a.impl)
            return
         elif isinstance(a, ColorRGBAf):
            self.impl = lib.ColorRGBAf_to_ColorAlpha(a)
            return
         if not isinstance(color, Color): color = Color(color)
         self.impl = (
            (a          << lib.COLORALPHA_a_SHIFT)          |
            (color.impl << lib.COLORALPHA_color_SHIFT)      )

   @property
   def a(self): return ((((self.impl)) & lib.COLORALPHA_a_MASK) >> lib.COLORALPHA_a_SHIFT)
   @a.setter
   def a(self, value): self.value = ((self.impl) & ~(lib.COLORALPHA_a_MASK)) | (((value)) << lib.COLORALPHA_a_SHIFT)

   @property
   def color(self): return ((((self.impl)) & lib.COLORALPHA_color_MASK) >> lib.COLORALPHA_color_SHIFT)
   @color.setter
   def color(self, value): self.value = ((self.impl) & ~(lib.COLORALPHA_color_MASK)) | (((value)) << lib.COLORALPHA_color_SHIFT)

   # here is a conversion
   # ColorAlpha_to_Color
   # ColorAlpha_from_Color

class Bitmap(Instance):
   def __init__(self,
                width = None,
                height = None,
                pixelFormat = None,
                picture = None,
                stride = None,
                size = None,
                sizeBytes = None,
                palette = None,
                allocatePalette = None,
                transparent = None,
                shadeShift = None,
                paletteShades = None,
                alphaBlend = None,
                displaySystem = None,
                driver = None,
                driverData = None,
                keepData = None,
                mipMaps = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if width is not None:           self.width = width
      if height is not None:          self.height = height
      if pixelFormat is not None:     self.pixelFormat = pixelFormat
      if picture is not None:         self.picture = picture
      if stride is not None:          self.stride = stride
      if size is not None:            self.size = size
      if sizeBytes is not None:       self.sizeBytes = sizeBytes
      if palette is not None:         self.palette = palette
      if allocatePalette is not None: self.allocatePalette = allocatePalette
      if transparent is not None:     self.transparent = transparent
      if shadeShift is not None:      self.shadeShift = shadeShift
      if paletteShades is not None:   self.paletteShades = paletteShades
      if alphaBlend is not None:      self.alphaBlend = alphaBlend
      if displaySystem is not None:   self.displaySystem = displaySystem
      if driver is not None:          self.driver = driver
      if driverData is not None:      self.driverData = driverData
      if keepData is not None:        self.keepData = keepData
      if mipMaps is not None:         self.mipMaps = mipMaps

   @property
   def width(self): return IPTR(lib, ffi, self, Bitmap).width
   @width.setter
   def width(self, value): IPTR(lib, ffi, self, Bitmap).width = value

   @property
   def height(self): return IPTR(lib, ffi, self, Bitmap).height
   @height.setter
   def height(self, value): IPTR(lib, ffi, self, Bitmap).height = value

   @property
   def pixelFormat(self): return PixelFormat(impl = IPTR(lib, ffi, self, Bitmap).pixelFormat)
   @pixelFormat.setter
   def pixelFormat(self, value): IPTR(lib, ffi, self, Bitmap).pixelFormat = value.impl

   @property
   def picture(self): return IPTR(lib, ffi, self, Bitmap).picture
   @picture.setter
   def picture(self, value): IPTR(lib, ffi, self, Bitmap).picture = value

   @property
   def stride(self): return IPTR(lib, ffi, self, Bitmap).stride
   @stride.setter
   def stride(self, value): IPTR(lib, ffi, self, Bitmap).stride = value

   @property
   def size(self): return IPTR(lib, ffi, self, Bitmap).size
   @size.setter
   def size(self, value): IPTR(lib, ffi, self, Bitmap).size = value

   @property
   def sizeBytes(self): return IPTR(lib, ffi, self, Bitmap).sizeBytes
   @sizeBytes.setter
   def sizeBytes(self, value): IPTR(lib, ffi, self, Bitmap).sizeBytes = value

   @property
   def palette(self): return IPTR(lib, ffi, self, Bitmap).palette
   @palette.setter
   def palette(self, value): IPTR(lib, ffi, self, Bitmap).palette = value

   @property
   def allocatePalette(self): return IPTR(lib, ffi, self, Bitmap).allocatePalette
   @allocatePalette.setter
   def allocatePalette(self, value): IPTR(lib, ffi, self, Bitmap).allocatePalette = value

   @property
   def transparent(self): return IPTR(lib, ffi, self, Bitmap).transparent
   @transparent.setter
   def transparent(self, value): IPTR(lib, ffi, self, Bitmap).transparent = value

   @property
   def shadeShift(self): return IPTR(lib, ffi, self, Bitmap).shadeShift
   @shadeShift.setter
   def shadeShift(self, value): IPTR(lib, ffi, self, Bitmap).shadeShift = value

   @property
   def paletteShades(self): return IPTR(lib, ffi, self, Bitmap).paletteShades
   @paletteShades.setter
   def paletteShades(self, value): IPTR(lib, ffi, self, Bitmap).paletteShades = value

   @property
   def alphaBlend(self): return IPTR(lib, ffi, self, Bitmap).alphaBlend
   @alphaBlend.setter
   def alphaBlend(self, value): IPTR(lib, ffi, self, Bitmap).alphaBlend = value

   @property
   def displaySystem(self): return DisplaySystem(impl = IPTR(lib, ffi, self, Bitmap).displaySystem)
   @displaySystem.setter
   def displaySystem(self, value):
      if not isinstance(value, DisplaySystem): value = DisplaySystem(value)
      IPTR(lib, ffi, self, Bitmap).displaySystem = value.impl

   @property
   def driver(self): return IPTR(lib, ffi, self, Bitmap).driver
   @driver.setter
   def driver(self, value): IPTR(lib, ffi, self, Bitmap).driver = value

   @property
   def driverData(self): return IPTR(lib, ffi, self, Bitmap).driverData
   @driverData.setter
   def driverData(self, value): IPTR(lib, ffi, self, Bitmap).driverData = value

   @property
   def keepData(self): return IPTR(lib, ffi, self, Bitmap).keepData
   @keepData.setter
   def keepData(self, value): IPTR(lib, ffi, self, Bitmap).keepData = value

   @property
   def mipMaps(self): return IPTR(lib, ffi, self, Bitmap).mipMaps
   @mipMaps.setter
   def mipMaps(self, value): IPTR(lib, ffi, self, Bitmap).mipMaps = value

   def allocate(self, driverName, width, height, stride, format, allocatePalette):
      return lib.Bitmap_allocate(self.impl, driverName.encode('utf8'), width, height, stride, format, allocatePalette)

   def allocateDD(self, displaySystem, width, height):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_allocateDD(self.impl, displaySystem, width, height)

   def convert(self, displaySystem, format, palette):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_convert(self.impl, displaySystem, format, palette)

   def copy(self, source):
      if source is not None and not isinstance(source, Bitmap): source = Bitmap(source)
      if source is None: source = ffi.NULL
      return lib.Bitmap_copy(self.impl, source)

   def free(self):
      lib.Bitmap_free(self.impl)

   def getSurface(self, x, y, clip):
      if clip is not None and not isinstance(clip, Box): clip = Box(clip)
      clip = ffi.NULL if clip is None else clip.impl
      return pyOrNewObject(Surface, lib.Bitmap_getSurface(self.impl, x, y, ffi.cast("Box *", clip)))

   def grab(self, src, x, y):
      if src is not None and not isinstance(src, Bitmap): src = Bitmap(src)
      if src is None: src = ffi.NULL
      lib.Bitmap_grab(self.impl, src, x, y)

   def load(self, fileName, type, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_load(self.impl, fileName.encode('utf8'), type.encode('utf8'), displaySystem)

   def loadFromFile(self, file, type, displaySystem):
      if file is not None and not isinstance(file, File): file = File(file)
      if file is None: file = ffi.NULL
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_loadFromFile(self.impl, file, type.encode('utf8'), displaySystem)

   def loadGrayed(self, fileName, type, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_loadGrayed(self.impl, fileName.encode('utf8'), type.encode('utf8'), displaySystem)

   def loadMipMaps(self, fileName, type, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_loadMipMaps(self.impl, fileName.encode('utf8'), type.encode('utf8'), displaySystem)

   def loadMonochrome(self, fileName, type, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_loadMonochrome(self.impl, fileName.encode('utf8'), type.encode('utf8'), displaySystem)

   def loadT(self, fileName, type, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_loadT(self.impl, fileName.encode('utf8'), type.encode('utf8'), displaySystem)

   def loadTMipMaps(self, fileName, type, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_loadTMipMaps(self.impl, fileName.encode('utf8'), type.encode('utf8'), displaySystem)

   def makeDD(self, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_makeDD(self.impl, displaySystem)

   def makeMipMaps(self, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Bitmap_makeMipMaps(self.impl, displaySystem)

   def quantize(self, start, end):
      return lib.Bitmap_quantize(self.impl, start, end)

   def save(self, fileName, type, options):
      return lib.Bitmap_save(self.impl, fileName.encode('utf8'), type.encode('utf8'), options)

   def smoothEdges(self, size):
      lib.Bitmap_smoothEdges(self.impl, size)

class AlphaWriteMode:
   dontWrite = lib.AlphaWriteMode_dontWrite
   write     = lib.AlphaWriteMode_write
   blend     = lib.AlphaWriteMode_blend

class BitmapFormat(Instance):
   def __init__(self,
                impl = None):
      Instance.__init__(self, impl = impl)

class BitmapResource(Resource):
   def __init__(self,
                fileName = None,
                grayed = None,
                monochrome = None,
                transparent = None,
                alphaBlend = None,
                mipMaps = None,
                keepData = None,
                bitmap = None,
                window = None,
                impl = None):
      Resource.__init__(self, impl = impl)
      if fileName is not None:    self.fileName = fileName
      if grayed is not None:      self.grayed = grayed
      if monochrome is not None:  self.monochrome = monochrome
      if transparent is not None: self.transparent = transparent
      if alphaBlend is not None:  self.alphaBlend = alphaBlend
      if mipMaps is not None:     self.mipMaps = mipMaps
      if keepData is not None:    self.keepData = keepData
      if bitmap is not None:      self.bitmap = bitmap
      if window is not None:      self.window = window

   @property
   def fileName(self): value = lib.BitmapResource_get_fileName(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @fileName.setter
   def fileName(self, value):
      lib.BitmapResource_set_fileName(self.impl, value.encode('utf8'))

   @property
   def grayed(self): return lib.BitmapResource_get_grayed(self.impl)
   @grayed.setter
   def grayed(self, value):
      lib.BitmapResource_set_grayed(self.impl, value)

   @property
   def monochrome(self): return lib.BitmapResource_get_monochrome(self.impl)
   @monochrome.setter
   def monochrome(self, value):
      lib.BitmapResource_set_monochrome(self.impl, value)

   @property
   def transparent(self): return lib.BitmapResource_get_transparent(self.impl)
   @transparent.setter
   def transparent(self, value):
      lib.BitmapResource_set_transparent(self.impl, value)
   # @transparent.isset # tofix: how do we get isset?
   # def transparent(self): lib.BitmapResource_isSet_transparent(self.impl)

   @property
   def alphaBlend(self): return lib.BitmapResource_get_alphaBlend(self.impl)
   @alphaBlend.setter
   def alphaBlend(self, value):
      lib.BitmapResource_set_alphaBlend(self.impl, value)
   # @alphaBlend.isset # tofix: how do we get isset?
   # def alphaBlend(self): lib.BitmapResource_isSet_alphaBlend(self.impl)

   @property
   def mipMaps(self): return lib.BitmapResource_get_mipMaps(self.impl)
   @mipMaps.setter
   def mipMaps(self, value):
      lib.BitmapResource_set_mipMaps(self.impl, value)
   # @mipMaps.isset # tofix: how do we get isset?
   # def mipMaps(self): lib.BitmapResource_isSet_mipMaps(self.impl)

   @property
   def keepData(self): return lib.BitmapResource_get_keepData(self.impl)
   @keepData.setter
   def keepData(self, value):
      lib.BitmapResource_set_keepData(self.impl, value)

   @property
   def bitmap(self): return pyOrNewObject(Bitmap, lib.BitmapResource_get_bitmap(self.impl))
   @bitmap.setter
   def bitmap(self, value):
      if not isinstance(value, Bitmap): value = Bitmap(value)
      lib.BitmapResource_set_bitmap(self.impl, value.impl)

   @property
   def window(self): return None
   @window.setter
   def window(self, value):
      if not isinstance(value, Window): value = Window(value)
      lib.BitmapResource_set_window(self.impl, value.impl)

class ClearType:
   colorBuffer   = lib.ClearType_colorBuffer
   depthBuffer   = lib.ClearType_depthBuffer
   colorAndDepth = lib.ClearType_colorAndDepth

class Color444(pyBaseClass):
   def __init__(self, r = 0, g = 0, b = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(r, Color444):
         self.impl = r.impl
      else:
         if isinstance(r, tuple):
            __tuple = r
            r = 0
            if len(__tuple) > 0: r = __tuple[0]
            if len(__tuple) > 1: g = __tuple[1]
            if len(__tuple) > 2: b = __tuple[2]
         elif isinstance(r, Color):
            self.impl = lib.Color444_from_Color(r.impl)
            return
         self.impl = (
            (r << lib.COLOR444_r_SHIFT) |
            (g << lib.COLOR444_g_SHIFT) |
            (b << lib.COLOR444_b_SHIFT) )

   @property
   def r(self): return ((((self.impl)) & lib.COLOR444_r_MASK) >> lib.COLOR444_r_SHIFT)
   @r.setter
   def r(self, value): self.value = ((self.impl) & ~(lib.COLOR444_r_MASK)) | (((value)) << lib.COLOR444_r_SHIFT)

   @property
   def g(self): return ((((self.impl)) & lib.COLOR444_g_MASK) >> lib.COLOR444_g_SHIFT)
   @g.setter
   def g(self, value): self.value = ((self.impl) & ~(lib.COLOR444_g_MASK)) | (((value)) << lib.COLOR444_g_SHIFT)

   @property
   def b(self): return ((((self.impl)) & lib.COLOR444_b_MASK) >> lib.COLOR444_b_SHIFT)
   @b.setter
   def b(self, value): self.value = ((self.impl) & ~(lib.COLOR444_b_MASK)) | (((value)) << lib.COLOR444_b_SHIFT)

   # here is a conversion
   # Color444_to_Color
   # Color444_from_Color

class Color555(pyBaseClass):
   def __init__(self, r = 0, g = 0, b = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(r, Color555):
         self.impl = r.impl
      else:
         if isinstance(r, tuple):
            __tuple = r
            r = 0
            if len(__tuple) > 0: r = __tuple[0]
            if len(__tuple) > 1: g = __tuple[1]
            if len(__tuple) > 2: b = __tuple[2]
         elif isinstance(r, Color):
            self.impl = lib.Color555_from_Color(r.impl)
            return
         self.impl = (
            (r << lib.COLOR555_r_SHIFT) |
            (g << lib.COLOR555_g_SHIFT) |
            (b << lib.COLOR555_b_SHIFT) )

   @property
   def r(self): return ((((self.impl)) & lib.COLOR555_r_MASK) >> lib.COLOR555_r_SHIFT)
   @r.setter
   def r(self, value): self.value = ((self.impl) & ~(lib.COLOR555_r_MASK)) | (((value)) << lib.COLOR555_r_SHIFT)

   @property
   def g(self): return ((((self.impl)) & lib.COLOR555_g_MASK) >> lib.COLOR555_g_SHIFT)
   @g.setter
   def g(self, value): self.value = ((self.impl) & ~(lib.COLOR555_g_MASK)) | (((value)) << lib.COLOR555_g_SHIFT)

   @property
   def b(self): return ((((self.impl)) & lib.COLOR555_b_MASK) >> lib.COLOR555_b_SHIFT)
   @b.setter
   def b(self, value): self.value = ((self.impl) & ~(lib.COLOR555_b_MASK)) | (((value)) << lib.COLOR555_b_SHIFT)

   # here is a conversion
   # Color555_to_Color
   # Color555_from_Color

class Color565(pyBaseClass):
   def __init__(self, r = 0, g = 0, b = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(r, Color565):
         self.impl = r.impl
      else:
         if isinstance(r, tuple):
            __tuple = r
            r = 0
            if len(__tuple) > 0: r = __tuple[0]
            if len(__tuple) > 1: g = __tuple[1]
            if len(__tuple) > 2: b = __tuple[2]
         elif isinstance(r, Color):
            self.impl = lib.Color565_from_Color(r.impl)
            return
         self.impl = (
            (r << lib.COLOR565_r_SHIFT) |
            (g << lib.COLOR565_g_SHIFT) |
            (b << lib.COLOR565_b_SHIFT) )

   @property
   def r(self): return ((((self.impl)) & lib.COLOR565_r_MASK) >> lib.COLOR565_r_SHIFT)
   @r.setter
   def r(self, value): self.value = ((self.impl) & ~(lib.COLOR565_r_MASK)) | (((value)) << lib.COLOR565_r_SHIFT)

   @property
   def g(self): return ((((self.impl)) & lib.COLOR565_g_MASK) >> lib.COLOR565_g_SHIFT)
   @g.setter
   def g(self, value): self.value = ((self.impl) & ~(lib.COLOR565_g_MASK)) | (((value)) << lib.COLOR565_g_SHIFT)

   @property
   def b(self): return ((((self.impl)) & lib.COLOR565_b_MASK) >> lib.COLOR565_b_SHIFT)
   @b.setter
   def b(self, value): self.value = ((self.impl) & ~(lib.COLOR565_b_MASK)) | (((value)) << lib.COLOR565_b_SHIFT)

   # here is a conversion
   # Color565_to_Color
   # Color565_from_Color

class ColorCMYK:
   def __init__(self, c = 0.0, m = 0.0, y = 0.0, k = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("ColorCMYK *", impl)
      else:
         if isinstance(c, tuple):
            __tuple = c
            c = 0.0
            if len(__tuple) > 0: c = __tuple[0]
            if len(__tuple) > 1: m = __tuple[1]
            if len(__tuple) > 2: y = __tuple[2]
            if len(__tuple) > 3: k = __tuple[3]
         elif isinstance(c, ColorRGB):
            self.impl = ffi.new("ColorCMYK *")
            lib.ColorCMYK_from_ColorRGB(self.impl, c.impl)
            return
         self.impl = ffi.new("ColorCMYK *", { 'c' : c, 'm' : m, 'y' : y, 'k' : k })

   @property
   def c(self): return self.impl.c
   @c.setter
   def c(self, value): self.impl.c = value

   @property
   def m(self): return self.impl.m
   @m.setter
   def m(self, value): self.impl.m = value

   @property
   def y(self): return self.impl.y
   @y.setter
   def y(self, value): self.impl.y = value

   @property
   def k(self): return self.impl.k
   @k.setter
   def k(self, value): self.impl.k = value

   # here is a conversion
   # ColorCMYK_to_ColorRGB
   # ColorCMYK_from_ColorRGB

class ColorHSV:
   def __init__(self, h = 0, s = 0.0, v = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("ColorHSV *", impl)
      else:
         if isinstance(h, tuple):
            __tuple = h
            h = 0
            if len(__tuple) > 0: h = __tuple[0]
            if len(__tuple) > 1: s = __tuple[1]
            if len(__tuple) > 2: v = __tuple[2]
         elif isinstance(h, ColorRGB):
            self.impl = ffi.new("ColorHSV *")
            lib.ColorHSV_from_ColorRGB(self.impl, h.impl)
            return
         if h is not None:
            if not isinstance(h, Angle): h = Degrees(h)
            h = h.impl
         self.impl = ffi.new("ColorHSV *", { 'h' : h, 's' : s, 'v' : v })

   @property
   def h(self): return Degrees(impl = self.impl.h)
   @h.setter
   def h(self, value):
      if not isinstance(value, Angle): value = Degrees(value)
      self.impl.h = value.impl

   @property
   def s(self): return self.impl.s
   @s.setter
   def s(self, value): self.impl.s = value

   @property
   def v(self): return self.impl.v
   @v.setter
   def v(self, value): self.impl.v = value

   # here is a conversion
   # ColorHSV_to_ColorRGB
   # ColorHSV_from_ColorRGB

class ColorKey:
   def __init__(self, color = None, percent = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("ColorKey *", impl)
      else:
         if isinstance(color, tuple):
            __tuple = color
            color = 0
            if len(__tuple) > 0: color   = __tuple[0]
            if len(__tuple) > 1: percent = __tuple[1]
         if color is not None:
            if not isinstance(color, ColorAlpha): color = ColorAlpha(color)
            color = color.impl
         self.impl = ffi.new("ColorKey *", { 'color' : color, 'percent' : percent })

   @property
   def color(self): return ColorAlpha(impl = self.impl.color)
   @color.setter
   def color(self, value):
      if not isinstance(value, ColorAlpha): value = ColorAlpha(value)
      self.impl.color = value.impl

   @property
   def percent(self): return self.impl.percent
   @percent.setter
   def percent(self, value): self.impl.percent = value

class ColorLab:
   def __init__(self, l = 0.0, a = 0.0, b = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("ColorLab *", impl)
      else:
         if isinstance(l, tuple):
            __tuple = l
            l = 0.0
            if len(__tuple) > 0: l = __tuple[0]
            if len(__tuple) > 1: a = __tuple[1]
            if len(__tuple) > 2: b = __tuple[2]
         elif isinstance(l, ColorRGB):
            self.impl = ffi.new("ColorLab *")
            lib.ColorLab_from_ColorRGB(self.impl, l.impl)
            return
         self.impl = ffi.new("ColorLab *", { 'l' : l, 'a' : a, 'b' : b })

   @property
   def l(self): return self.impl.l
   @l.setter
   def l(self, value): self.impl.l = value

   @property
   def a(self): return self.impl.a
   @a.setter
   def a(self, value): self.impl.a = value

   @property
   def b(self): return self.impl.b
   @b.setter
   def b(self, value): self.impl.b = value

   # here is a conversion
   # ColorLab_to_ColorRGB
   # ColorLab_from_ColorRGB

class ColorRGBA(pyBaseClass):
   def __init__(self, r = 0, g = 0, b = 0, a = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(r, ColorRGBA):
         self.impl = r.impl
      else:
         if isinstance(r, tuple):
            __tuple = r
            r = 0
            if len(__tuple) > 0: r = __tuple[0]
            if len(__tuple) > 1: g = __tuple[1]
            if len(__tuple) > 2: b = __tuple[2]
            if len(__tuple) > 3: a = __tuple[3]
         elif isinstance(r, ColorAlpha):
            self.impl = lib.ColorRGBA_from_ColorAlpha(r.impl)
            return
         elif isinstance(r, Color):
            self.impl = lib.ColorRGBA_from_Color(r.impl)
            return
         self.impl = (
            (r << lib.COLORRGBA_r_SHIFT) |
            (g << lib.COLORRGBA_g_SHIFT) |
            (b << lib.COLORRGBA_b_SHIFT) |
            (a << lib.COLORRGBA_a_SHIFT) )

   @property
   def r(self): return ((((self.impl)) & lib.COLORRGBA_r_MASK) >> lib.COLORRGBA_r_SHIFT)
   @r.setter
   def r(self, value): self.value = ((self.impl) & ~(lib.COLORRGBA_r_MASK)) | (((value)) << lib.COLORRGBA_r_SHIFT)

   @property
   def g(self): return ((((self.impl)) & lib.COLORRGBA_g_MASK) >> lib.COLORRGBA_g_SHIFT)
   @g.setter
   def g(self, value): self.value = ((self.impl) & ~(lib.COLORRGBA_g_MASK)) | (((value)) << lib.COLORRGBA_g_SHIFT)

   @property
   def b(self): return ((((self.impl)) & lib.COLORRGBA_b_MASK) >> lib.COLORRGBA_b_SHIFT)
   @b.setter
   def b(self, value): self.value = ((self.impl) & ~(lib.COLORRGBA_b_MASK)) | (((value)) << lib.COLORRGBA_b_SHIFT)

   @property
   def a(self): return ((((self.impl)) & lib.COLORRGBA_a_MASK) >> lib.COLORRGBA_a_SHIFT)
   @a.setter
   def a(self, value): self.value = ((self.impl) & ~(lib.COLORRGBA_a_MASK)) | (((value)) << lib.COLORRGBA_a_SHIFT)

   # here is a conversion
   # ColorRGBA_to_ColorAlpha
   # ColorRGBA_from_ColorAlpha

   # here is a conversion
   # ColorRGBA_to_Color
   # ColorRGBA_from_Color

class ColorRGBAf:
   def __init__(self, r = 0.0, g = 0.0, b = 0.0, a = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("ColorRGBAf *", impl)
      else:
         if isinstance(r, tuple):
            __tuple = r
            r = 0.0
            if len(__tuple) > 0: r = __tuple[0]
            if len(__tuple) > 1: g = __tuple[1]
            if len(__tuple) > 2: b = __tuple[2]
            if len(__tuple) > 3: a = __tuple[3]
         elif isinstance(r, ColorAlpha):
            self.impl = ffi.new("ColorRGBAf *")
            lib.ColorRGBAf_from_ColorAlpha(self.impl, r)
            return
         elif isinstance(r, Color):
            self.impl = ffi.new("ColorRGBAf *")
            lib.ColorRGBAf_from_Color(self.impl, r)
            return
         self.impl = ffi.new("ColorRGBAf *", { 'r' : r, 'g' : g, 'b' : b, 'a' : a })

   @property
   def r(self): return self.impl.r
   @r.setter
   def r(self, value): self.impl.r = value

   @property
   def g(self): return self.impl.g
   @g.setter
   def g(self, value): self.impl.g = value

   @property
   def b(self): return self.impl.b
   @b.setter
   def b(self, value): self.impl.b = value

   @property
   def a(self): return self.impl.a
   @a.setter
   def a(self, value): self.impl.a = value

   # here is a conversion
   # ColorRGBAf_to_ColorAlpha
   # ColorRGBAf_from_ColorAlpha

   # here is a conversion
   # ColorRGBAf_to_Color
   # ColorRGBAf_from_Color

class CubeMap(Bitmap):
   def __init__(self,
                width = None,
                height = None,
                pixelFormat = None,
                picture = None,
                stride = None,
                size = None,
                sizeBytes = None,
                palette = None,
                allocatePalette = None,
                transparent = None,
                shadeShift = None,
                paletteShades = None,
                alphaBlend = None,
                displaySystem = None,
                driver = None,
                driverData = None,
                keepData = None,
                mipMaps = None,
                impl = None):
      Bitmap.__init__(self, impl = impl)
      if width is not None:           self.width = width
      if height is not None:          self.height = height
      if pixelFormat is not None:     self.pixelFormat = pixelFormat
      if picture is not None:         self.picture = picture
      if stride is not None:          self.stride = stride
      if size is not None:            self.size = size
      if sizeBytes is not None:       self.sizeBytes = sizeBytes
      if palette is not None:         self.palette = palette
      if allocatePalette is not None: self.allocatePalette = allocatePalette
      if transparent is not None:     self.transparent = transparent
      if shadeShift is not None:      self.shadeShift = shadeShift
      if paletteShades is not None:   self.paletteShades = paletteShades
      if alphaBlend is not None:      self.alphaBlend = alphaBlend
      if displaySystem is not None:   self.displaySystem = displaySystem
      if driver is not None:          self.driver = driver
      if driverData is not None:      self.driverData = driverData
      if keepData is not None:        self.keepData = keepData
      if mipMaps is not None:         self.mipMaps = mipMaps

   @property
   def width(self): return IPTR(lib, ffi, self, CubeMap).width
   @width.setter
   def width(self, value): IPTR(lib, ffi, self, CubeMap).width = value

   @property
   def height(self): return IPTR(lib, ffi, self, CubeMap).height
   @height.setter
   def height(self, value): IPTR(lib, ffi, self, CubeMap).height = value

   @property
   def pixelFormat(self): return PixelFormat(impl = IPTR(lib, ffi, self, CubeMap).pixelFormat)
   @pixelFormat.setter
   def pixelFormat(self, value): IPTR(lib, ffi, self, CubeMap).pixelFormat = value.impl

   @property
   def picture(self): return IPTR(lib, ffi, self, CubeMap).picture
   @picture.setter
   def picture(self, value): IPTR(lib, ffi, self, CubeMap).picture = value

   @property
   def stride(self): return IPTR(lib, ffi, self, CubeMap).stride
   @stride.setter
   def stride(self, value): IPTR(lib, ffi, self, CubeMap).stride = value

   @property
   def size(self): return IPTR(lib, ffi, self, CubeMap).size
   @size.setter
   def size(self, value): IPTR(lib, ffi, self, CubeMap).size = value

   @property
   def sizeBytes(self): return IPTR(lib, ffi, self, CubeMap).sizeBytes
   @sizeBytes.setter
   def sizeBytes(self, value): IPTR(lib, ffi, self, CubeMap).sizeBytes = value

   @property
   def palette(self): return IPTR(lib, ffi, self, CubeMap).palette
   @palette.setter
   def palette(self, value): IPTR(lib, ffi, self, CubeMap).palette = value

   @property
   def allocatePalette(self): return IPTR(lib, ffi, self, CubeMap).allocatePalette
   @allocatePalette.setter
   def allocatePalette(self, value): IPTR(lib, ffi, self, CubeMap).allocatePalette = value

   @property
   def transparent(self): return IPTR(lib, ffi, self, CubeMap).transparent
   @transparent.setter
   def transparent(self, value): IPTR(lib, ffi, self, CubeMap).transparent = value

   @property
   def shadeShift(self): return IPTR(lib, ffi, self, CubeMap).shadeShift
   @shadeShift.setter
   def shadeShift(self, value): IPTR(lib, ffi, self, CubeMap).shadeShift = value

   @property
   def paletteShades(self): return IPTR(lib, ffi, self, CubeMap).paletteShades
   @paletteShades.setter
   def paletteShades(self, value): IPTR(lib, ffi, self, CubeMap).paletteShades = value

   @property
   def alphaBlend(self): return IPTR(lib, ffi, self, CubeMap).alphaBlend
   @alphaBlend.setter
   def alphaBlend(self, value): IPTR(lib, ffi, self, CubeMap).alphaBlend = value

   @property
   def displaySystem(self): return DisplaySystem(impl = IPTR(lib, ffi, self, CubeMap).displaySystem)
   @displaySystem.setter
   def displaySystem(self, value):
      if not isinstance(value, DisplaySystem): value = DisplaySystem(value)
      IPTR(lib, ffi, self, CubeMap).displaySystem = value.impl

   @property
   def driver(self): return IPTR(lib, ffi, self, CubeMap).driver
   @driver.setter
   def driver(self, value): IPTR(lib, ffi, self, CubeMap).driver = value

   @property
   def driverData(self): return IPTR(lib, ffi, self, CubeMap).driverData
   @driverData.setter
   def driverData(self, value): IPTR(lib, ffi, self, CubeMap).driverData = value

   @property
   def keepData(self): return IPTR(lib, ffi, self, CubeMap).keepData
   @keepData.setter
   def keepData(self, value): IPTR(lib, ffi, self, CubeMap).keepData = value

   @property
   def mipMaps(self): return IPTR(lib, ffi, self, CubeMap).mipMaps
   @mipMaps.setter
   def mipMaps(self, value): IPTR(lib, ffi, self, CubeMap).mipMaps = value

   def load(self, displaySystem, names, extension, oldStyle):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      if extension is not None and not isinstance(extension, String): extension = String(extension)
      if extension is None: extension = ffi.NULL
      return lib.CubeMap_load(self.impl, displaySystem, names, extension, oldStyle)

class DefinedColor(Color):
   black                = Color(impl = lib.DefinedColor_black)
   dimGray              = Color(impl = lib.DefinedColor_dimGray)
   gray                 = Color(impl = lib.DefinedColor_gray)
   darkGray             = Color(impl = lib.DefinedColor_darkGray)
   silver               = Color(impl = lib.DefinedColor_silver)
   lightGray            = Color(impl = lib.DefinedColor_lightGray)
   gainsboro            = Color(impl = lib.DefinedColor_gainsboro)
   whiteSmoke           = Color(impl = lib.DefinedColor_whiteSmoke)
   white                = Color(impl = lib.DefinedColor_white)
   rosyBrown            = Color(impl = lib.DefinedColor_rosyBrown)
   indianRed            = Color(impl = lib.DefinedColor_indianRed)
   brown                = Color(impl = lib.DefinedColor_brown)
   fireBrick            = Color(impl = lib.DefinedColor_fireBrick)
   lightCoral           = Color(impl = lib.DefinedColor_lightCoral)
   maroon               = Color(impl = lib.DefinedColor_maroon)
   darkRed              = Color(impl = lib.DefinedColor_darkRed)
   red                  = Color(impl = lib.DefinedColor_red)
   snow                 = Color(impl = lib.DefinedColor_snow)
   mistyRose            = Color(impl = lib.DefinedColor_mistyRose)
   salmon               = Color(impl = lib.DefinedColor_salmon)
   tomato               = Color(impl = lib.DefinedColor_tomato)
   darkSalmon           = Color(impl = lib.DefinedColor_darkSalmon)
   coral                = Color(impl = lib.DefinedColor_coral)
   orangeRed            = Color(impl = lib.DefinedColor_orangeRed)
   lightSalmon          = Color(impl = lib.DefinedColor_lightSalmon)
   sienna               = Color(impl = lib.DefinedColor_sienna)
   seaShell             = Color(impl = lib.DefinedColor_seaShell)
   chocolate            = Color(impl = lib.DefinedColor_chocolate)
   saddleBrown          = Color(impl = lib.DefinedColor_saddleBrown)
   sandyBrown           = Color(impl = lib.DefinedColor_sandyBrown)
   peachPuff            = Color(impl = lib.DefinedColor_peachPuff)
   peru                 = Color(impl = lib.DefinedColor_peru)
   linen                = Color(impl = lib.DefinedColor_linen)
   bisque               = Color(impl = lib.DefinedColor_bisque)
   darkOrange           = Color(impl = lib.DefinedColor_darkOrange)
   burlyWood            = Color(impl = lib.DefinedColor_burlyWood)
   tan                  = Color(impl = lib.DefinedColor_tan)
   antiqueWhite         = Color(impl = lib.DefinedColor_antiqueWhite)
   navajoWhite          = Color(impl = lib.DefinedColor_navajoWhite)
   blanchedAlmond       = Color(impl = lib.DefinedColor_blanchedAlmond)
   papayaWhip           = Color(impl = lib.DefinedColor_papayaWhip)
   mocassin             = Color(impl = lib.DefinedColor_mocassin)
   orange               = Color(impl = lib.DefinedColor_orange)
   wheat                = Color(impl = lib.DefinedColor_wheat)
   oldLace              = Color(impl = lib.DefinedColor_oldLace)
   floralWhite          = Color(impl = lib.DefinedColor_floralWhite)
   darkGoldenrod        = Color(impl = lib.DefinedColor_darkGoldenrod)
   goldenrod            = Color(impl = lib.DefinedColor_goldenrod)
   cornsilk             = Color(impl = lib.DefinedColor_cornsilk)
   gold                 = Color(impl = lib.DefinedColor_gold)
   khaki                = Color(impl = lib.DefinedColor_khaki)
   lemonChiffon         = Color(impl = lib.DefinedColor_lemonChiffon)
   paleGoldenrod        = Color(impl = lib.DefinedColor_paleGoldenrod)
   darkKhaki            = Color(impl = lib.DefinedColor_darkKhaki)
   beige                = Color(impl = lib.DefinedColor_beige)
   lightGoldenRodYellow = Color(impl = lib.DefinedColor_lightGoldenRodYellow)
   olive                = Color(impl = lib.DefinedColor_olive)
   yellow               = Color(impl = lib.DefinedColor_yellow)
   lightYellow          = Color(impl = lib.DefinedColor_lightYellow)
   ivory                = Color(impl = lib.DefinedColor_ivory)
   oliveDrab            = Color(impl = lib.DefinedColor_oliveDrab)
   yellowGreen          = Color(impl = lib.DefinedColor_yellowGreen)
   darkOliveGreen       = Color(impl = lib.DefinedColor_darkOliveGreen)
   greenYellow          = Color(impl = lib.DefinedColor_greenYellow)
   chartreuse           = Color(impl = lib.DefinedColor_chartreuse)
   lawnGreen            = Color(impl = lib.DefinedColor_lawnGreen)
   darkSeaGreen         = Color(impl = lib.DefinedColor_darkSeaGreen)
   forestGreen          = Color(impl = lib.DefinedColor_forestGreen)
   limeGreen            = Color(impl = lib.DefinedColor_limeGreen)
   lightGreen           = Color(impl = lib.DefinedColor_lightGreen)
   paleGreen            = Color(impl = lib.DefinedColor_paleGreen)
   darkGreen            = Color(impl = lib.DefinedColor_darkGreen)
   green                = Color(impl = lib.DefinedColor_green)
   lime                 = Color(impl = lib.DefinedColor_lime)
   honeyDew             = Color(impl = lib.DefinedColor_honeyDew)
   seaGreen             = Color(impl = lib.DefinedColor_seaGreen)
   mediumSeaGreen       = Color(impl = lib.DefinedColor_mediumSeaGreen)
   springGreen          = Color(impl = lib.DefinedColor_springGreen)
   mintCream            = Color(impl = lib.DefinedColor_mintCream)
   mediumSpringGreen    = Color(impl = lib.DefinedColor_mediumSpringGreen)
   mediumAquaMarine     = Color(impl = lib.DefinedColor_mediumAquaMarine)
   aquamarine           = Color(impl = lib.DefinedColor_aquamarine)
   turquoise            = Color(impl = lib.DefinedColor_turquoise)
   lightSeaGreen        = Color(impl = lib.DefinedColor_lightSeaGreen)
   mediumTurquoise      = Color(impl = lib.DefinedColor_mediumTurquoise)
   darkSlateGray        = Color(impl = lib.DefinedColor_darkSlateGray)
   paleTurquoise        = Color(impl = lib.DefinedColor_paleTurquoise)
   teal                 = Color(impl = lib.DefinedColor_teal)
   darkCyan             = Color(impl = lib.DefinedColor_darkCyan)
   aqua                 = Color(impl = lib.DefinedColor_aqua)
   cyan                 = Color(impl = lib.DefinedColor_cyan)
   lightCyan            = Color(impl = lib.DefinedColor_lightCyan)
   azure                = Color(impl = lib.DefinedColor_azure)
   darkTurquoise        = Color(impl = lib.DefinedColor_darkTurquoise)
   cadetBlue            = Color(impl = lib.DefinedColor_cadetBlue)
   powderBlue           = Color(impl = lib.DefinedColor_powderBlue)
   lightBlue            = Color(impl = lib.DefinedColor_lightBlue)
   deepSkyBlue          = Color(impl = lib.DefinedColor_deepSkyBlue)
   skyBlue              = Color(impl = lib.DefinedColor_skyBlue)
   lightSkyBlue         = Color(impl = lib.DefinedColor_lightSkyBlue)
   steelBlue            = Color(impl = lib.DefinedColor_steelBlue)
   aliceBlue            = Color(impl = lib.DefinedColor_aliceBlue)
   dodgerBlue           = Color(impl = lib.DefinedColor_dodgerBlue)
   slateGray            = Color(impl = lib.DefinedColor_slateGray)
   lightSlateGray       = Color(impl = lib.DefinedColor_lightSlateGray)
   lightSteelBlue       = Color(impl = lib.DefinedColor_lightSteelBlue)
   cornflowerBlue       = Color(impl = lib.DefinedColor_cornflowerBlue)
   royalBlue            = Color(impl = lib.DefinedColor_royalBlue)
   midnightBlue         = Color(impl = lib.DefinedColor_midnightBlue)
   lavender             = Color(impl = lib.DefinedColor_lavender)
   navy                 = Color(impl = lib.DefinedColor_navy)
   darkBlue             = Color(impl = lib.DefinedColor_darkBlue)
   mediumBlue           = Color(impl = lib.DefinedColor_mediumBlue)
   blue                 = Color(impl = lib.DefinedColor_blue)
   ghostWhite           = Color(impl = lib.DefinedColor_ghostWhite)
   slateBlue            = Color(impl = lib.DefinedColor_slateBlue)
   darkSlateBlue        = Color(impl = lib.DefinedColor_darkSlateBlue)
   mediumSlateBlue      = Color(impl = lib.DefinedColor_mediumSlateBlue)
   mediumPurple         = Color(impl = lib.DefinedColor_mediumPurple)
   blueViolet           = Color(impl = lib.DefinedColor_blueViolet)
   indigo               = Color(impl = lib.DefinedColor_indigo)
   darkOrchid           = Color(impl = lib.DefinedColor_darkOrchid)
   darkViolet           = Color(impl = lib.DefinedColor_darkViolet)
   mediumOrchid         = Color(impl = lib.DefinedColor_mediumOrchid)
   thistle              = Color(impl = lib.DefinedColor_thistle)
   plum                 = Color(impl = lib.DefinedColor_plum)
   violet               = Color(impl = lib.DefinedColor_violet)
   purple               = Color(impl = lib.DefinedColor_purple)
   darkMagenta          = Color(impl = lib.DefinedColor_darkMagenta)
   magenta              = Color(impl = lib.DefinedColor_magenta)
   fuschia              = Color(impl = lib.DefinedColor_fuschia)
   orchid               = Color(impl = lib.DefinedColor_orchid)
   mediumVioletRed      = Color(impl = lib.DefinedColor_mediumVioletRed)
   deepPink             = Color(impl = lib.DefinedColor_deepPink)
   hotPink              = Color(impl = lib.DefinedColor_hotPink)
   lavenderBlush        = Color(impl = lib.DefinedColor_lavenderBlush)
   paleVioletRed        = Color(impl = lib.DefinedColor_paleVioletRed)
   crimson              = Color(impl = lib.DefinedColor_crimson)
   pink                 = Color(impl = lib.DefinedColor_pink)
   lightPink            = Color(impl = lib.DefinedColor_lightPink)

class Display(Instance):
   def __init__(self,
                fillMode = None,
                depthTest = None,
                depthWrite = None,
                fogDensity = None,
                fogColor = None,
                blend = None,
                ambient = None,
                alphaWrite = None,
                antiAlias = None,
                vSync = None,
                pickingPlanes = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                width = None,
                height = None,
                driverData = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if fillMode is not None:        self.fillMode = fillMode
      if depthTest is not None:       self.depthTest = depthTest
      if depthWrite is not None:      self.depthWrite = depthWrite
      if fogDensity is not None:      self.fogDensity = fogDensity
      if fogColor is not None:        self.fogColor = fogColor
      if blend is not None:           self.blend = blend
      if ambient is not None:         self.ambient = ambient
      if alphaWrite is not None:      self.alphaWrite = alphaWrite
      if antiAlias is not None:       self.antiAlias = antiAlias
      if vSync is not None:           self.vSync = vSync
      if pickingPlanes is not None:   self.pickingPlanes = pickingPlanes
      if alphaBlend is not None:      self.alphaBlend = alphaBlend
      if useSharedMemory is not None: self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:  self.glCapabilities = glCapabilities
      if width is not None:           self.width = width
      if height is not None:          self.height = height
      if driverData is not None:      self.driverData = driverData

   @property
   def fillMode(self): return None
   @fillMode.setter
   def fillMode(self, value):
      lib.Display_set_fillMode(self.impl, value)

   @property
   def depthTest(self): return None
   @depthTest.setter
   def depthTest(self, value):
      lib.Display_set_depthTest(self.impl, value)

   @property
   def depthWrite(self): return None
   @depthWrite.setter
   def depthWrite(self, value):
      lib.Display_set_depthWrite(self.impl, value)

   @property
   def fogDensity(self): return None
   @fogDensity.setter
   def fogDensity(self, value):
      lib.Display_set_fogDensity(self.impl, value)

   @property
   def fogColor(self): return None
   @fogColor.setter
   def fogColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.Display_set_fogColor(self.impl, value.impl)

   @property
   def blend(self): return None
   @blend.setter
   def blend(self, value):
      lib.Display_set_blend(self.impl, value)

   @property
   def ambient(self): return None
   @ambient.setter
   def ambient(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.Display_set_ambient(self.impl, value.impl)

   @property
   def alphaWrite(self): return None
   @alphaWrite.setter
   def alphaWrite(self, value):
      lib.Display_set_alphaWrite(self.impl, value)

   @property
   def antiAlias(self): return None
   @antiAlias.setter
   def antiAlias(self, value):
      lib.Display_set_antiAlias(self.impl, value)

   @property
   def vSync(self): return None
   @vSync.setter
   def vSync(self, value):
      lib.Display_set_vSync(self.impl, value)

   @property
   def pickingPlanes(self): return None
   @pickingPlanes.setter
   def pickingPlanes(self, value):
      lib.Display_set_pickingPlanes(self.impl, value)

   @property
   def flags(self): return DisplayFlags(impl = lib.Display_get_flags(self.impl))

   @property
   def pixelFormat(self): return lib.Display_get_pixelFormat(self.impl, value)

   @property
   def alphaBlend(self): return lib.Display_get_alphaBlend(self.impl)
   @alphaBlend.setter
   def alphaBlend(self, value):
      lib.Display_set_alphaBlend(self.impl, value)

   @property
   def useSharedMemory(self): return lib.Display_get_useSharedMemory(self.impl)
   @useSharedMemory.setter
   def useSharedMemory(self, value):
      lib.Display_set_useSharedMemory(self.impl, value)

   @property
   def systemWindow(self): return lib.Display_get_systemWindow(self.impl)

   @property
   def displaySystem(self): return pyOrNewObject(DisplaySystem, lib.Display_get_displaySystem(self.impl))

   @property
   def glCapabilities(self): return GLCapabilities(impl = lib.Display_get_glCapabilities(self.impl))
   @glCapabilities.setter
   def glCapabilities(self, value):
      if not isinstance(value, GLCapabilities): value = GLCapabilities(value)
      lib.Display_set_glCapabilities(self.impl, value.impl)

   @property
   def width(self): return IPTR(lib, ffi, self, Display).width
   @width.setter
   def width(self, value): IPTR(lib, ffi, self, Display).width = value

   @property
   def height(self): return IPTR(lib, ffi, self, Display).height
   @height.setter
   def height(self, value): IPTR(lib, ffi, self, Display).height = value

   @property
   def driverData(self): return IPTR(lib, ffi, self, Display).driverData
   @driverData.setter
   def driverData(self, value): IPTR(lib, ffi, self, Display).driverData = value

   def applyMaterial(self, material, mesh):
      if material is not None and not isinstance(material, Material): material = Material(material)
      if material is None: material = ffi.NULL
      if mesh is not None and not isinstance(mesh, Mesh): mesh = Mesh(mesh)
      if mesh is None: mesh = ffi.NULL
      lib.Display_applyMaterial(self.impl, material, mesh)

   def collectHits(self):
      lib.Display_collectHits(self.impl)

   def create(self, displaySystem, window):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Display_create(self.impl, displaySystem, window)

   def drawMesh(self, object):
      if object is not None and not isinstance(object, Object): object = Object(object)
      if object is None: object = ffi.NULL
      return lib.Display_drawMesh(self.impl, object)

   def drawObject(self, object):
      if object is not None and not isinstance(object, Object): object = Object(object)
      if object is None: object = ffi.NULL
      return lib.Display_drawObject(self.impl, object)

   def drawPrimitives(self, primitive, mesh):
      if primitive is not None and not isinstance(primitive, PrimitiveSingle): primitive = PrimitiveSingle(primitive)
      primitive = ffi.NULL if primitive is None else primitive.impl
      if mesh is not None and not isinstance(mesh, Mesh): mesh = Mesh(mesh)
      if mesh is None: mesh = ffi.NULL
      lib.Display_drawPrimitives(self.impl, ffi.cast("PrimitiveSingle *", primitive), mesh)

   def drawTranslucency(self):
      lib.Display_drawTranslucency(self.impl)

   def endUpdate(self):
      lib.Display_endUpdate(self.impl)

   def fontExtent(self, font, text, len):
      if font is not None and not isinstance(font, Font): font = Font(font)
      if font is None: font = ffi.NULL
      width = ffi.new("int *")
      height = ffi.new("int *")
      lib.Display_fontExtent(self.impl, font, text.encode('utf8'), len, width, height)
      return width[0], height[0]

   def fontExtent2(self, font, text, len, prevGlyph):
      if font is not None and not isinstance(font, Font): font = Font(font)
      if font is None: font = ffi.NULL
      width = ffi.new("int *")
      height = ffi.new("int *")
      rPrevGlyph = ffi.new("int *")
      overHang = ffi.new("int *")
      lib.Display_fontExtent2(self.impl, font, text.encode('utf8'), len, width, height, prevGlyph, rPrevGlyph, overHang)
      return width[0], height[0], rPrevGlyph[0], overHang[0]

   def getHits(self, list):
      if list is not None and not isinstance(list, OldList): list = OldList(list)
      list = ffi.NULL if list is None else list.impl
      return lib.Display_getHits(self.impl, ffi.cast("OldList *", list))

   def getIntersect(self, intersect):
      if intersect is not None and not isinstance(intersect, Vector3D): intersect = Vector3D(intersect)
      intersect = ffi.NULL if intersect is None else intersect.impl
      return lib.Display_getIntersect(self.impl, ffi.cast("Vector3D *", intersect))

   def getSurface(self, x, y, clip):
      if clip is not None and not isinstance(clip, Box): clip = Box(clip)
      clip = ffi.NULL if clip is None else clip.impl
      return pyOrNewObject(Surface, lib.Display_getSurface(self.impl, x, y, ffi.cast("Box *", clip)))

   def grab(self, bitmap, x, y, w, h):
      if bitmap is not None and not isinstance(bitmap, Bitmap): bitmap = Bitmap(bitmap)
      if bitmap is None: bitmap = ffi.NULL
      return lib.Display_grab(self.impl, bitmap, x, y, w, h)

   def intersectPolygons(self):
      lib.Display_intersectPolygons(self.impl)

   def isObjectVisible(self, object):
      if object is not None and not isinstance(object, Object): object = Object(object)
      if object is None: object = ffi.NULL
      return lib.Display_isObjectVisible(self.impl, object)

   def lock(self, render):
      return lib.Display_lock(self.impl, render)

   def nextPage(self):
      lib.Display_nextPage(self.impl)

   def popMatrix(self):
      lib.Display_popMatrix(self.impl)

   def position(self, x, y):
      lib.Display_position(self.impl, x, y)

   def pushMatrix(self):
      lib.Display_pushMatrix(self.impl)

   def resize(self, width, height):
      return lib.Display_resize(self.impl, width, height)

   def restorePalette(self):
      lib.Display_restorePalette(self.impl)

   def scroll(self, scroll, x, y, dirty):
      if scroll is not None and not isinstance(scroll, Box): scroll = Box(scroll)
      scroll = ffi.NULL if scroll is None else scroll.impl
      if dirty is not None and not isinstance(dirty, Extent): dirty = Extent(dirty)
      dirty = ffi.NULL if dirty is None else dirty.impl
      lib.Display_scroll(self.impl, ffi.cast("Box *", scroll), x, y, ffi.cast("Extent *", dirty))

   def selectMesh(self, mesh):
      if mesh is not None and not isinstance(mesh, Mesh): mesh = Mesh(mesh)
      if mesh is None: mesh = ffi.NULL
      lib.Display_selectMesh(self.impl, mesh)

   def setCamera(self, surface, camera):
      if surface is not None and not isinstance(surface, Surface): surface = Surface(surface)
      if surface is None: surface = ffi.NULL
      if camera is not None and not isinstance(camera, Camera): camera = Camera(camera)
      if camera is None: camera = ffi.NULL
      lib.Display_setCamera(self.impl, surface, camera)

   def setLight(self, id, light):
      if light is not None and not isinstance(light, Light): light = Light(light)
      light = ffi.NULL if light is None else light.impl
      lib.Display_setLight(self.impl, id, ffi.cast("Light *", light))

   def setLights(self, object):
      if object is not None and not isinstance(object, Object): object = Object(object)
      if object is None: object = ffi.NULL
      lib.Display_setLights(self.impl, object)

   def setPalette(self, palette, colorMatch):
      lib.Display_setPalette(self.impl, palette, colorMatch)

   def setTransform(self, matrix, viewSpace):
      if matrix is not None and not isinstance(matrix, Matrix): matrix = Matrix(matrix)
      matrix = ffi.NULL if matrix is None else matrix.impl
      lib.Display_setTransform(self.impl, ffi.cast("Matrix *", matrix), viewSpace)

   def startSelection(self, pickX, pickY, pickW, pickH):
      lib.Display_startSelection(self.impl, pickX, pickY, pickW, pickH)

   def startUpdate(self):
      lib.Display_startUpdate(self.impl)

   def stopSelection(self):
      lib.Display_stopSelection(self.impl)

   def unlock(self):
      lib.Display_unlock(self.impl)

   def update(self, updateBox):
      if updateBox is not None and not isinstance(updateBox, Box): updateBox = Box(updateBox)
      updateBox = ffi.NULL if updateBox is None else updateBox.impl
      lib.Display_update(self.impl, ffi.cast("Box *", updateBox))

@ffi.callback("void(DisplayDriver, DisplaySystem, Bitmap, int, int, int, PixelFormat, bool)")
def cb_DisplayDriver_allocateBitmap(__d, ap1, ap2, ap3, ap4, ap5, ap6, ap7):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_allocateBitmap(displaydriver, pyOrNewObject(DisplaySystem, ap1), pyOrNewObject(Bitmap, ap2), ap3, ap4, ap5, PixelFormat(impl = ap6), ap7)

@ffi.callback("void(DisplayDriver, DisplaySystem, int, bool)")
def cb_DisplayDriver_allocateIndices(__d, ap1, nIndices, indices32bit):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_allocateIndices(displaydriver, pyOrNewObject(DisplaySystem, ap1), nIndices, indices32bit)

@ffi.callback("void(DisplayDriver, DisplaySystem, Mesh *, MeshFeatures, int)")
def cb_DisplayDriver_allocateMesh(__d, ap1, ap2, ap3, nVertices):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_allocateMesh(displaydriver, pyOrNewObject(DisplaySystem, ap1), Mesh(impl = ap2), MeshFeatures(impl = ap3), nVertices)

@ffi.callback("void(DisplayDriver, Display, Material *, Mesh *)")
def cb_DisplayDriver_applyMaterial(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_applyMaterial(displaydriver, pyOrNewObject(Display, ap1), Material(impl = ap2), Mesh(impl = ap3))

@ffi.callback("void(DisplayDriver, Display, Surface, int, int, int, int)")
def cb_DisplayDriver_area(__d, ap1, ap2, x1, y1, x2, y2):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_area(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), x1, y1, x2, y2)

@ffi.callback("void(DisplayDriver, Display, Surface, Bitmap, int, int, int, int, int, int)")
def cb_DisplayDriver_blit(__d, ap1, ap2, ap3, dx, dy, sx, sy, w, h):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_blit(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), pyOrNewObject(Bitmap, ap3), dx, dy, sx, sy, w, h)

@ffi.callback("void(DisplayDriver, Display, Surface, Bitmap, int, int, int, int, int, int)")
def cb_DisplayDriver_blitDI(__d, ap1, ap2, ap3, dx, dy, sx, sy, w, h):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_blitDI(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), pyOrNewObject(Bitmap, ap3), dx, dy, sx, sy, w, h)

@ffi.callback("void(DisplayDriver, Display, Surface, ClearType)")
def cb_DisplayDriver_clear(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_clear(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), ClearType(impl = ap3))

@ffi.callback("void(DisplayDriver, Display, Surface, Box *)")
def cb_DisplayDriver_clip(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_clip(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), Box(impl = ap3))

@ffi.callback("void(DisplayDriver, DisplaySystem, Bitmap, PixelFormat, ColorAlpha *)")
def cb_DisplayDriver_convertBitmap(__d, ap1, ap2, ap3, ap4):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_convertBitmap(displaydriver, pyOrNewObject(DisplaySystem, ap1), pyOrNewObject(Bitmap, ap2), PixelFormat(impl = ap3), ap4)

@ffi.callback("void(DisplayDriver, Display)")
def cb_DisplayDriver_createDisplay(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_createDisplay(displaydriver, pyOrNewObject(Display, ap1))

@ffi.callback("void(DisplayDriver, DisplaySystem)")
def cb_DisplayDriver_createDisplaySystem(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_createDisplaySystem(displaydriver, pyOrNewObject(DisplaySystem, ap1))

@ffi.callback("void(DisplayDriver, Display)")
def cb_DisplayDriver_destroyDisplay(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_destroyDisplay(displaydriver, pyOrNewObject(Display, ap1))

@ffi.callback("void(DisplayDriver, DisplaySystem)")
def cb_DisplayDriver_destroyDisplaySystem(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_destroyDisplaySystem(displaydriver, pyOrNewObject(DisplaySystem, ap1))

@ffi.callback("void(DisplayDriver, Display, int, int)")
def cb_DisplayDriver_displayPosition(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_displayPosition(displaydriver, pyOrNewObject(Display, ap1), ap2, ap3)

@ffi.callback("void(DisplayDriver, Display, int, int)")
def cb_DisplayDriver_displaySize(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_displaySize(displaydriver, pyOrNewObject(Display, ap1), ap2, ap3)

@ffi.callback("void(DisplayDriver, Display, Surface, int, int, int, int)")
def cb_DisplayDriver_drawLine(__d, ap1, ap2, x1, y1, x2, y2):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_drawLine(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), x1, y1, x2, y2)

@ffi.callback("void(DisplayDriver, Display, PrimitiveSingle *, Mesh *)")
def cb_DisplayDriver_drawPrimitives(__d, ap1, ap2, mesh):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_drawPrimitives(displaydriver, pyOrNewObject(Display, ap1), ap2, Mesh(impl = mesh))

@ffi.callback("void(DisplayDriver, Display, Surface, char)")
def cb_DisplayDriver_drawingChar(__d, ap1, ap2, ch):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_drawingChar(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), ch)

@ffi.callback("void(DisplayDriver, Display)")
def cb_DisplayDriver_endUpdate(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_endUpdate(displaydriver, pyOrNewObject(Display, ap1))

@ffi.callback("void(DisplayDriver, Display, Surface, Bitmap, int, int, int, int, int, int, int, int)")
def cb_DisplayDriver_filter(__d, ap1, ap2, ap3, dx, dy, sx, sy, w, h, sw, sh):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_filter(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), pyOrNewObject(Bitmap, ap3), dx, dy, sx, sy, w, h, sw, sh)

@ffi.callback("void(DisplayDriver, Display, Surface, Bitmap, int, int, int, int, int, int, int, int)")
def cb_DisplayDriver_filterDI(__d, ap1, ap2, ap3, dx, dy, sx, sy, w, h, sw, sh):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_filterDI(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), pyOrNewObject(Bitmap, ap3), dx, dy, sx, sy, w, h, sw, sh)

@ffi.callback("void(DisplayDriver, DisplaySystem, Font *, constString, int, int *, int *, int, int *, int *)")
def cb_DisplayDriver_fontExtent(__d, ap1, ap2, text, len, tw, th, prevGlyph, rPrevGlyph, overHang):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_fontExtent(displaydriver, pyOrNewObject(DisplaySystem, ap1), Font(impl = ap2), text, len, tw, th, prevGlyph, rPrevGlyph, overHang)

@ffi.callback("void(DisplayDriver, DisplaySystem, Bitmap)")
def cb_DisplayDriver_freeBitmap(__d, ap1, ap2):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_freeBitmap(displaydriver, pyOrNewObject(DisplaySystem, ap1), pyOrNewObject(Bitmap, ap2))

@ffi.callback("void(DisplayDriver, DisplaySystem, void *)")
def cb_DisplayDriver_freeIndices(__d, ap1, indices):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_freeIndices(displaydriver, pyOrNewObject(DisplaySystem, ap1), indices)

@ffi.callback("void(DisplayDriver, DisplaySystem, Mesh *)")
def cb_DisplayDriver_freeMesh(__d, ap1, ap2):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_freeMesh(displaydriver, pyOrNewObject(DisplaySystem, ap1), Mesh(impl = ap2))

@ffi.callback("void(DisplayDriver, DisplaySystem, Surface, Bitmap, int, int, Box *)")
def cb_DisplayDriver_getBitmapSurface(__d, displaySystem, surface, bitmap, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_getBitmapSurface(displaydriver, pyOrNewObject(DisplaySystem, displaySystem), pyOrNewObject(Surface, surface), pyOrNewObject(Bitmap, bitmap), ap1, ap2, Box(impl = ap3))

@ffi.callback("void(DisplayDriver, Display, Surface, int, int)")
def cb_DisplayDriver_getPixel(__d, ap1, ap2, x, y):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_getPixel(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), x, y)

@ffi.callback("void(DisplayDriver, Display, Surface, int, int, Box *)")
def cb_DisplayDriver_getSurface(__d, ap1, surface, ap2, ap3, ap4):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_getSurface(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, surface), ap2, ap3, Box(impl = ap4))

@ffi.callback("void(DisplayDriver, Display, Bitmap, int, int, uint, uint)")
def cb_DisplayDriver_grabScreen(__d, ap1, ap2, ap3, ap4, ap5, ap6):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_grabScreen(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Bitmap, ap2), ap3, ap4, ap5, ap6)

@ffi.callback("void(DisplayDriver, Display, Surface, uint)")
def cb_DisplayDriver_lineStipple(__d, ap1, ap2, pattern):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_lineStipple(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), pattern)

@ffi.callback("void(DisplayDriver, DisplaySystem, const char *, float, FontFlags, float, float)")
def cb_DisplayDriver_loadFont(__d, displaySystem, faceName, size, flags, outlineSize, outlineFade):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_loadFont(displaydriver, pyOrNewObject(DisplaySystem, displaySystem), faceName.encode('utf8'), size, FontFlags(impl = flags), outlineSize, outlineFade)

@ffi.callback("void(DisplayDriver, Display)")
def cb_DisplayDriver_lock(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_lock(displaydriver, pyOrNewObject(Display, ap1))

@ffi.callback("void(DisplayDriver, DisplaySystem, void *)")
def cb_DisplayDriver_lockIndices(__d, ap1, indices):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_lockIndices(displaydriver, pyOrNewObject(DisplaySystem, ap1), indices)

@ffi.callback("void(DisplayDriver, DisplaySystem, Mesh *, MeshFeatures)")
def cb_DisplayDriver_lockMesh(__d, ap1, ap2, flags):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_lockMesh(displaydriver, pyOrNewObject(DisplaySystem, ap1), Mesh(impl = ap2), MeshFeatures(impl = flags))

@ffi.callback("void(DisplayDriver, DisplaySystem)")
def cb_DisplayDriver_lockSystem(__d, displaySystem):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_lockSystem(displaydriver, pyOrNewObject(DisplaySystem, displaySystem))

@ffi.callback("void(DisplayDriver, DisplaySystem, Bitmap, bool, int)")
def cb_DisplayDriver_makeDDBitmap(__d, ap1, ap2, mipMaps, cubeMapFace):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_makeDDBitmap(displaydriver, pyOrNewObject(DisplaySystem, ap1), pyOrNewObject(Bitmap, ap2), mipMaps, cubeMapFace)

@ffi.callback("void(DisplayDriver, Display)")
def cb_DisplayDriver_nextPage(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_nextPage(displaydriver, pyOrNewObject(Display, ap1))

@ffi.callback("void(DisplayDriver, Display, bool)")
def cb_DisplayDriver_popMatrix(__d, ap1, ap2):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_popMatrix(displaydriver, pyOrNewObject(Display, ap1), ap2)

@ffi.callback("void(DisplayDriver, Display)")
def cb_DisplayDriver_pushMatrix(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_pushMatrix(displaydriver, pyOrNewObject(Display, ap1))

@ffi.callback("void(DisplayDriver, Display, Surface, int, int)")
def cb_DisplayDriver_putPixel(__d, ap1, ap2, x, y):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_putPixel(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), x, y)

@ffi.callback("void(DisplayDriver, Display, Surface, int, int, int, int)")
def cb_DisplayDriver_rectangle(__d, ap1, ap2, x1, y1, x2, y2):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_rectangle(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), x1, y1, x2, y2)

@ffi.callback("void(DisplayDriver, Display, Surface)")
def cb_DisplayDriver_releaseSurface(__d, this, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_releaseSurface(displaydriver, pyOrNewObject(Display, this), pyOrNewObject(Surface, ap1))

@ffi.callback("void(DisplayDriver, Display)")
def cb_DisplayDriver_restorePalette(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_restorePalette(displaydriver, pyOrNewObject(Display, ap1))

@ffi.callback("void(DisplayDriver, Display, Box *, int, int, Extent *)")
def cb_DisplayDriver_scroll(__d, ap1, ap2, ap3, ap4, ap5):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_scroll(displaydriver, pyOrNewObject(Display, ap1), Box(impl = ap2), ap3, ap4, Extent(impl = ap5))

@ffi.callback("void(DisplayDriver, Display, Mesh *)")
def cb_DisplayDriver_selectMesh(__d, ap1, ap2):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_selectMesh(displaydriver, pyOrNewObject(Display, ap1), Mesh(impl = ap2))

@ffi.callback("void(DisplayDriver, Display, Surface, ColorAlpha)")
def cb_DisplayDriver_setBackground(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_setBackground(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), ColorAlpha(impl = ap3))

@ffi.callback("void(DisplayDriver, Display, Surface, ColorAlpha)")
def cb_DisplayDriver_setBlitTint(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_setBlitTint(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), ColorAlpha(impl = ap3))

@ffi.callback("void(DisplayDriver, Display, Surface, Camera)")
def cb_DisplayDriver_setCamera(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_setCamera(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), pyOrNewObject(Camera, ap3))

@ffi.callback("void(DisplayDriver, Display, Surface, ColorAlpha)")
def cb_DisplayDriver_setForeground(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_setForeground(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), ColorAlpha(impl = ap3))

@ffi.callback("void(DisplayDriver, Display, int, Light *)")
def cb_DisplayDriver_setLight(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_setLight(displaydriver, pyOrNewObject(Display, ap1), ap2, Light(impl = ap3))

@ffi.callback("void(DisplayDriver, Display, ColorAlpha *, bool)")
def cb_DisplayDriver_setPalette(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_setPalette(displaydriver, pyOrNewObject(Display, ap1), ap2, ap3)

@ffi.callback("void(DisplayDriver, Display, RenderState, uint)")
def cb_DisplayDriver_setRenderState(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_setRenderState(displaydriver, pyOrNewObject(Display, ap1), RenderState(impl = ap2), ap3)

@ffi.callback("void(DisplayDriver, Display, Matrix *, bool, bool)")
def cb_DisplayDriver_setTransform(__d, ap1, ap2, ap3, ap4):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_setTransform(displaydriver, pyOrNewObject(Display, ap1), Matrix(impl = ap2), ap3, ap4)

@ffi.callback("void(DisplayDriver, Display)")
def cb_DisplayDriver_startUpdate(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_startUpdate(displaydriver, pyOrNewObject(Display, ap1))

@ffi.callback("void(DisplayDriver, Display, Surface, Bitmap, int, int, int, int, int, int, int, int)")
def cb_DisplayDriver_stretch(__d, ap1, ap2, ap3, dx, dy, sx, sy, w, h, sw, sh):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_stretch(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), pyOrNewObject(Bitmap, ap3), dx, dy, sx, sy, w, h, sw, sh)

@ffi.callback("void(DisplayDriver, Display, Surface, Bitmap, int, int, int, int, int, int, int, int)")
def cb_DisplayDriver_stretchDI(__d, ap1, ap2, ap3, dx, dy, sx, sy, w, h, sw, sh):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_stretchDI(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), pyOrNewObject(Bitmap, ap3), dx, dy, sx, sy, w, h, sw, sh)

@ffi.callback("void(DisplayDriver, Display, Surface, constString, int, int *, int *, int, int *, int *)")
def cb_DisplayDriver_textExtent(__d, ap1, ap2, text, len, tw, th, prevGlyph, rPrevGlyph, overHang):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_textExtent(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), text, len, tw, th, prevGlyph, rPrevGlyph, overHang)

@ffi.callback("void(DisplayDriver, Display, Surface, Font *)")
def cb_DisplayDriver_textFont(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_textFont(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), Font(impl = ap3))

@ffi.callback("void(DisplayDriver, Display, Surface, bool)")
def cb_DisplayDriver_textOpacity(__d, ap1, ap2, ap3):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_textOpacity(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), ap3)

@ffi.callback("void(DisplayDriver, DisplaySystem, Font *)")
def cb_DisplayDriver_unloadFont(__d, ap1, ap2):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_unloadFont(displaydriver, pyOrNewObject(DisplaySystem, ap1), Font(impl = ap2))

@ffi.callback("void(DisplayDriver, Display)")
def cb_DisplayDriver_unlock(__d, ap1):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_unlock(displaydriver, pyOrNewObject(Display, ap1))

@ffi.callback("void(DisplayDriver, DisplaySystem, void *, bool, int)")
def cb_DisplayDriver_unlockIndices(__d, ap1, indices, indices32bit, nIndices):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_unlockIndices(displaydriver, pyOrNewObject(DisplaySystem, ap1), indices, indices32bit, nIndices)

@ffi.callback("void(DisplayDriver, DisplaySystem, Mesh *, MeshFeatures)")
def cb_DisplayDriver_unlockMesh(__d, ap1, ap2, flags):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_unlockMesh(displaydriver, pyOrNewObject(DisplaySystem, ap1), Mesh(impl = ap2), MeshFeatures(impl = flags))

@ffi.callback("void(DisplayDriver, DisplaySystem)")
def cb_DisplayDriver_unlockSystem(__d, displaySystem):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_unlockSystem(displaydriver, pyOrNewObject(DisplaySystem, displaySystem))

@ffi.callback("void(DisplayDriver, Display, Box *)")
def cb_DisplayDriver_update(__d, ap1, ap2):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_update(displaydriver, pyOrNewObject(Display, ap1), Box(impl = ap2))

@ffi.callback("void(DisplayDriver, Display, Surface, int, int, constString, int, int, int *)")
def cb_DisplayDriver_writeText(__d, ap1, ap2, x, y, text, len, prevGlyph, rPrevGlyph):
   displaydriver = pyOrNewObject(DisplayDriver, __d)
   displaydriver.fn_DisplayDriver_writeText(displaydriver, pyOrNewObject(Display, ap1), pyOrNewObject(Surface, ap2), x, y, text, len, prevGlyph, rPrevGlyph)

class DisplayDriver(Instance):
   def __init__(self,
                allocateBitmap = None,
                allocateIndices = None,
                allocateMesh = None,
                applyMaterial = None,
                area = None,
                blit = None,
                blitDI = None,
                clear = None,
                clip = None,
                convertBitmap = None,
                createDisplay = None,
                createDisplaySystem = None,
                destroyDisplay = None,
                destroyDisplaySystem = None,
                displayPosition = None,
                displaySize = None,
                drawLine = None,
                drawPrimitives = None,
                drawingChar = None,
                endUpdate = None,
                filter = None,
                filterDI = None,
                fontExtent = None,
                freeBitmap = None,
                freeIndices = None,
                freeMesh = None,
                getBitmapSurface = None,
                getPixel = None,
                getSurface = None,
                grabScreen = None,
                lineStipple = None,
                loadFont = None,
                lock = None,
                lockIndices = None,
                lockMesh = None,
                lockSystem = None,
                makeDDBitmap = None,
                nextPage = None,
                popMatrix = None,
                pushMatrix = None,
                putPixel = None,
                rectangle = None,
                releaseSurface = None,
                restorePalette = None,
                scroll = None,
                selectMesh = None,
                setBackground = None,
                setBlitTint = None,
                setCamera = None,
                setForeground = None,
                setLight = None,
                setPalette = None,
                setRenderState = None,
                setTransform = None,
                startUpdate = None,
                stretch = None,
                stretchDI = None,
                textExtent = None,
                textFont = None,
                textOpacity = None,
                unloadFont = None,
                unlock = None,
                unlockIndices = None,
                unlockMesh = None,
                unlockSystem = None,
                update = None,
                writeText = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if allocateBitmap is not None:       self.allocateBitmap = allocateBitmap
      if allocateIndices is not None:      self.allocateIndices = allocateIndices
      if allocateMesh is not None:         self.allocateMesh = allocateMesh
      if applyMaterial is not None:        self.applyMaterial = applyMaterial
      if area is not None:                 self.area = area
      if blit is not None:                 self.blit = blit
      if blitDI is not None:               self.blitDI = blitDI
      if clear is not None:                self.clear = clear
      if clip is not None:                 self.clip = clip
      if convertBitmap is not None:        self.convertBitmap = convertBitmap
      if createDisplay is not None:        self.createDisplay = createDisplay
      if createDisplaySystem is not None:  self.createDisplaySystem = createDisplaySystem
      if destroyDisplay is not None:       self.destroyDisplay = destroyDisplay
      if destroyDisplaySystem is not None: self.destroyDisplaySystem = destroyDisplaySystem
      if displayPosition is not None:      self.displayPosition = displayPosition
      if displaySize is not None:          self.displaySize = displaySize
      if drawLine is not None:             self.drawLine = drawLine
      if drawPrimitives is not None:       self.drawPrimitives = drawPrimitives
      if drawingChar is not None:          self.drawingChar = drawingChar
      if endUpdate is not None:            self.endUpdate = endUpdate
      if filter is not None:               self.filter = filter
      if filterDI is not None:             self.filterDI = filterDI
      if fontExtent is not None:           self.fontExtent = fontExtent
      if freeBitmap is not None:           self.freeBitmap = freeBitmap
      if freeIndices is not None:          self.freeIndices = freeIndices
      if freeMesh is not None:             self.freeMesh = freeMesh
      if getBitmapSurface is not None:     self.getBitmapSurface = getBitmapSurface
      if getPixel is not None:             self.getPixel = getPixel
      if getSurface is not None:           self.getSurface = getSurface
      if grabScreen is not None:           self.grabScreen = grabScreen
      if lineStipple is not None:          self.lineStipple = lineStipple
      if loadFont is not None:             self.loadFont = loadFont
      if lock is not None:                 self.lock = lock
      if lockIndices is not None:          self.lockIndices = lockIndices
      if lockMesh is not None:             self.lockMesh = lockMesh
      if lockSystem is not None:           self.lockSystem = lockSystem
      if makeDDBitmap is not None:         self.makeDDBitmap = makeDDBitmap
      if nextPage is not None:             self.nextPage = nextPage
      if popMatrix is not None:            self.popMatrix = popMatrix
      if pushMatrix is not None:           self.pushMatrix = pushMatrix
      if putPixel is not None:             self.putPixel = putPixel
      if rectangle is not None:            self.rectangle = rectangle
      if releaseSurface is not None:       self.releaseSurface = releaseSurface
      if restorePalette is not None:       self.restorePalette = restorePalette
      if scroll is not None:               self.scroll = scroll
      if selectMesh is not None:           self.selectMesh = selectMesh
      if setBackground is not None:        self.setBackground = setBackground
      if setBlitTint is not None:          self.setBlitTint = setBlitTint
      if setCamera is not None:            self.setCamera = setCamera
      if setForeground is not None:        self.setForeground = setForeground
      if setLight is not None:             self.setLight = setLight
      if setPalette is not None:           self.setPalette = setPalette
      if setRenderState is not None:       self.setRenderState = setRenderState
      if setTransform is not None:         self.setTransform = setTransform
      if startUpdate is not None:          self.startUpdate = startUpdate
      if stretch is not None:              self.stretch = stretch
      if stretchDI is not None:            self.stretchDI = stretchDI
      if textExtent is not None:           self.textExtent = textExtent
      if textFont is not None:             self.textFont = textFont
      if textOpacity is not None:          self.textOpacity = textOpacity
      if unloadFont is not None:           self.unloadFont = unloadFont
      if unlock is not None:               self.unlock = unlock
      if unlockIndices is not None:        self.unlockIndices = unlockIndices
      if unlockMesh is not None:           self.unlockMesh = unlockMesh
      if unlockSystem is not None:         self.unlockSystem = unlockSystem
      if update is not None:               self.update = update
      if writeText is not None:            self.writeText = writeText

   def fn_unset_DisplayDriver_allocateBitmap(self, ap1, ap2, ap3, ap4, ap5, ap6, ap7):
      return lib.DisplayDriver_allocateBitmap(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3, ap4, ap5, ap6, ap7)

   @property
   def allocateBitmap(self):
      if hasattr(self, 'fn_DisplayDriver_allocateBitmap'): return self.fn_DisplayDriver_allocateBitmap
      else: return self.fn_unset_DisplayDriver_allocateBitmap
   @allocateBitmap.setter
   def allocateBitmap(self, value):
      self.fn_DisplayDriver_allocateBitmap = value
      lib.Instance_setMethod(self.impl, "AllocateBitmap".encode('utf8'), cb_DisplayDriver_allocateBitmap)

   def fn_unset_DisplayDriver_allocateIndices(self, ap1, nIndices, indices32bit):
      return lib.DisplayDriver_allocateIndices(self.impl, ffi.NULL if ap1 is None else ap1.impl, nIndices, indices32bit)

   @property
   def allocateIndices(self):
      if hasattr(self, 'fn_DisplayDriver_allocateIndices'): return self.fn_DisplayDriver_allocateIndices
      else: return self.fn_unset_DisplayDriver_allocateIndices
   @allocateIndices.setter
   def allocateIndices(self, value):
      self.fn_DisplayDriver_allocateIndices = value
      lib.Instance_setMethod(self.impl, "AllocateIndices".encode('utf8'), cb_DisplayDriver_allocateIndices)

   def fn_unset_DisplayDriver_allocateMesh(self, ap1, ap2, ap3, nVertices):
      return lib.DisplayDriver_allocateMesh(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3, nVertices)

   @property
   def allocateMesh(self):
      if hasattr(self, 'fn_DisplayDriver_allocateMesh'): return self.fn_DisplayDriver_allocateMesh
      else: return self.fn_unset_DisplayDriver_allocateMesh
   @allocateMesh.setter
   def allocateMesh(self, value):
      self.fn_DisplayDriver_allocateMesh = value
      lib.Instance_setMethod(self.impl, "AllocateMesh".encode('utf8'), cb_DisplayDriver_allocateMesh)

   def fn_unset_DisplayDriver_applyMaterial(self, ap1, ap2, ap3):
      return lib.DisplayDriver_applyMaterial(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl)

   @property
   def applyMaterial(self):
      if hasattr(self, 'fn_DisplayDriver_applyMaterial'): return self.fn_DisplayDriver_applyMaterial
      else: return self.fn_unset_DisplayDriver_applyMaterial
   @applyMaterial.setter
   def applyMaterial(self, value):
      self.fn_DisplayDriver_applyMaterial = value
      lib.Instance_setMethod(self.impl, "ApplyMaterial".encode('utf8'), cb_DisplayDriver_applyMaterial)

   def fn_unset_DisplayDriver_area(self, ap1, ap2, x1, y1, x2, y2):
      return lib.DisplayDriver_area(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, x1, y1, x2, y2)

   @property
   def area(self):
      if hasattr(self, 'fn_DisplayDriver_area'): return self.fn_DisplayDriver_area
      else: return self.fn_unset_DisplayDriver_area
   @area.setter
   def area(self, value):
      self.fn_DisplayDriver_area = value
      lib.Instance_setMethod(self.impl, "Area".encode('utf8'), cb_DisplayDriver_area)

   def fn_unset_DisplayDriver_blit(self, ap1, ap2, ap3, dx, dy, sx, sy, w, h):
      return lib.DisplayDriver_blit(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl, dx, dy, sx, sy, w, h)

   @property
   def blit(self):
      if hasattr(self, 'fn_DisplayDriver_blit'): return self.fn_DisplayDriver_blit
      else: return self.fn_unset_DisplayDriver_blit
   @blit.setter
   def blit(self, value):
      self.fn_DisplayDriver_blit = value
      lib.Instance_setMethod(self.impl, "Blit".encode('utf8'), cb_DisplayDriver_blit)

   def fn_unset_DisplayDriver_blitDI(self, ap1, ap2, ap3, dx, dy, sx, sy, w, h):
      return lib.DisplayDriver_blitDI(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl, dx, dy, sx, sy, w, h)

   @property
   def blitDI(self):
      if hasattr(self, 'fn_DisplayDriver_blitDI'): return self.fn_DisplayDriver_blitDI
      else: return self.fn_unset_DisplayDriver_blitDI
   @blitDI.setter
   def blitDI(self, value):
      self.fn_DisplayDriver_blitDI = value
      lib.Instance_setMethod(self.impl, "BlitDI".encode('utf8'), cb_DisplayDriver_blitDI)

   def fn_unset_DisplayDriver_clear(self, ap1, ap2, ap3):
      return lib.DisplayDriver_clear(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3)

   @property
   def clear(self):
      if hasattr(self, 'fn_DisplayDriver_clear'): return self.fn_DisplayDriver_clear
      else: return self.fn_unset_DisplayDriver_clear
   @clear.setter
   def clear(self, value):
      self.fn_DisplayDriver_clear = value
      lib.Instance_setMethod(self.impl, "Clear".encode('utf8'), cb_DisplayDriver_clear)

   def fn_unset_DisplayDriver_clip(self, ap1, ap2, ap3):
      return lib.DisplayDriver_clip(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl)

   @property
   def clip(self):
      if hasattr(self, 'fn_DisplayDriver_clip'): return self.fn_DisplayDriver_clip
      else: return self.fn_unset_DisplayDriver_clip
   @clip.setter
   def clip(self, value):
      self.fn_DisplayDriver_clip = value
      lib.Instance_setMethod(self.impl, "Clip".encode('utf8'), cb_DisplayDriver_clip)

   def fn_unset_DisplayDriver_convertBitmap(self, ap1, ap2, ap3, ap4):
      return lib.DisplayDriver_convertBitmap(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3, ap4)

   @property
   def convertBitmap(self):
      if hasattr(self, 'fn_DisplayDriver_convertBitmap'): return self.fn_DisplayDriver_convertBitmap
      else: return self.fn_unset_DisplayDriver_convertBitmap
   @convertBitmap.setter
   def convertBitmap(self, value):
      self.fn_DisplayDriver_convertBitmap = value
      lib.Instance_setMethod(self.impl, "ConvertBitmap".encode('utf8'), cb_DisplayDriver_convertBitmap)

   def fn_unset_DisplayDriver_createDisplay(self, ap1):
      return lib.DisplayDriver_createDisplay(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def createDisplay(self):
      if hasattr(self, 'fn_DisplayDriver_createDisplay'): return self.fn_DisplayDriver_createDisplay
      else: return self.fn_unset_DisplayDriver_createDisplay
   @createDisplay.setter
   def createDisplay(self, value):
      self.fn_DisplayDriver_createDisplay = value
      lib.Instance_setMethod(self.impl, "CreateDisplay".encode('utf8'), cb_DisplayDriver_createDisplay)

   def fn_unset_DisplayDriver_createDisplaySystem(self, ap1):
      return lib.DisplayDriver_createDisplaySystem(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def createDisplaySystem(self):
      if hasattr(self, 'fn_DisplayDriver_createDisplaySystem'): return self.fn_DisplayDriver_createDisplaySystem
      else: return self.fn_unset_DisplayDriver_createDisplaySystem
   @createDisplaySystem.setter
   def createDisplaySystem(self, value):
      self.fn_DisplayDriver_createDisplaySystem = value
      lib.Instance_setMethod(self.impl, "CreateDisplaySystem".encode('utf8'), cb_DisplayDriver_createDisplaySystem)

   def fn_unset_DisplayDriver_destroyDisplay(self, ap1):
      return lib.DisplayDriver_destroyDisplay(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def destroyDisplay(self):
      if hasattr(self, 'fn_DisplayDriver_destroyDisplay'): return self.fn_DisplayDriver_destroyDisplay
      else: return self.fn_unset_DisplayDriver_destroyDisplay
   @destroyDisplay.setter
   def destroyDisplay(self, value):
      self.fn_DisplayDriver_destroyDisplay = value
      lib.Instance_setMethod(self.impl, "DestroyDisplay".encode('utf8'), cb_DisplayDriver_destroyDisplay)

   def fn_unset_DisplayDriver_destroyDisplaySystem(self, ap1):
      return lib.DisplayDriver_destroyDisplaySystem(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def destroyDisplaySystem(self):
      if hasattr(self, 'fn_DisplayDriver_destroyDisplaySystem'): return self.fn_DisplayDriver_destroyDisplaySystem
      else: return self.fn_unset_DisplayDriver_destroyDisplaySystem
   @destroyDisplaySystem.setter
   def destroyDisplaySystem(self, value):
      self.fn_DisplayDriver_destroyDisplaySystem = value
      lib.Instance_setMethod(self.impl, "DestroyDisplaySystem".encode('utf8'), cb_DisplayDriver_destroyDisplaySystem)

   def fn_unset_DisplayDriver_displayPosition(self, ap1, ap2, ap3):
      return lib.DisplayDriver_displayPosition(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ap3)

   @property
   def displayPosition(self):
      if hasattr(self, 'fn_DisplayDriver_displayPosition'): return self.fn_DisplayDriver_displayPosition
      else: return self.fn_unset_DisplayDriver_displayPosition
   @displayPosition.setter
   def displayPosition(self, value):
      self.fn_DisplayDriver_displayPosition = value
      lib.Instance_setMethod(self.impl, "DisplayPosition".encode('utf8'), cb_DisplayDriver_displayPosition)

   def fn_unset_DisplayDriver_displaySize(self, ap1, ap2, ap3):
      return lib.DisplayDriver_displaySize(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ap3)

   @property
   def displaySize(self):
      if hasattr(self, 'fn_DisplayDriver_displaySize'): return self.fn_DisplayDriver_displaySize
      else: return self.fn_unset_DisplayDriver_displaySize
   @displaySize.setter
   def displaySize(self, value):
      self.fn_DisplayDriver_displaySize = value
      lib.Instance_setMethod(self.impl, "DisplaySize".encode('utf8'), cb_DisplayDriver_displaySize)

   def fn_unset_DisplayDriver_drawLine(self, ap1, ap2, x1, y1, x2, y2):
      return lib.DisplayDriver_drawLine(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, x1, y1, x2, y2)

   @property
   def drawLine(self):
      if hasattr(self, 'fn_DisplayDriver_drawLine'): return self.fn_DisplayDriver_drawLine
      else: return self.fn_unset_DisplayDriver_drawLine
   @drawLine.setter
   def drawLine(self, value):
      self.fn_DisplayDriver_drawLine = value
      lib.Instance_setMethod(self.impl, "DrawLine".encode('utf8'), cb_DisplayDriver_drawLine)

   def fn_unset_DisplayDriver_drawPrimitives(self, ap1, ap2, mesh):
      return lib.DisplayDriver_drawPrimitives(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ffi.NULL if mesh is None else mesh.impl)

   @property
   def drawPrimitives(self):
      if hasattr(self, 'fn_DisplayDriver_drawPrimitives'): return self.fn_DisplayDriver_drawPrimitives
      else: return self.fn_unset_DisplayDriver_drawPrimitives
   @drawPrimitives.setter
   def drawPrimitives(self, value):
      self.fn_DisplayDriver_drawPrimitives = value
      lib.Instance_setMethod(self.impl, "DrawPrimitives".encode('utf8'), cb_DisplayDriver_drawPrimitives)

   def fn_unset_DisplayDriver_drawingChar(self, ap1, ap2, ch):
      return lib.DisplayDriver_drawingChar(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ch)

   @property
   def drawingChar(self):
      if hasattr(self, 'fn_DisplayDriver_drawingChar'): return self.fn_DisplayDriver_drawingChar
      else: return self.fn_unset_DisplayDriver_drawingChar
   @drawingChar.setter
   def drawingChar(self, value):
      self.fn_DisplayDriver_drawingChar = value
      lib.Instance_setMethod(self.impl, "DrawingChar".encode('utf8'), cb_DisplayDriver_drawingChar)

   def fn_unset_DisplayDriver_endUpdate(self, ap1):
      return lib.DisplayDriver_endUpdate(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def endUpdate(self):
      if hasattr(self, 'fn_DisplayDriver_endUpdate'): return self.fn_DisplayDriver_endUpdate
      else: return self.fn_unset_DisplayDriver_endUpdate
   @endUpdate.setter
   def endUpdate(self, value):
      self.fn_DisplayDriver_endUpdate = value
      lib.Instance_setMethod(self.impl, "EndUpdate".encode('utf8'), cb_DisplayDriver_endUpdate)

   def fn_unset_DisplayDriver_filter(self, ap1, ap2, ap3, dx, dy, sx, sy, w, h, sw, sh):
      return lib.DisplayDriver_filter(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl, dx, dy, sx, sy, w, h, sw, sh)

   @property
   def filter(self):
      if hasattr(self, 'fn_DisplayDriver_filter'): return self.fn_DisplayDriver_filter
      else: return self.fn_unset_DisplayDriver_filter
   @filter.setter
   def filter(self, value):
      self.fn_DisplayDriver_filter = value
      lib.Instance_setMethod(self.impl, "Filter".encode('utf8'), cb_DisplayDriver_filter)

   def fn_unset_DisplayDriver_filterDI(self, ap1, ap2, ap3, dx, dy, sx, sy, w, h, sw, sh):
      return lib.DisplayDriver_filterDI(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl, dx, dy, sx, sy, w, h, sw, sh)

   @property
   def filterDI(self):
      if hasattr(self, 'fn_DisplayDriver_filterDI'): return self.fn_DisplayDriver_filterDI
      else: return self.fn_unset_DisplayDriver_filterDI
   @filterDI.setter
   def filterDI(self, value):
      self.fn_DisplayDriver_filterDI = value
      lib.Instance_setMethod(self.impl, "FilterDI".encode('utf8'), cb_DisplayDriver_filterDI)

   def fn_unset_DisplayDriver_fontExtent(self, ap1, ap2, text, len, tw, th, prevGlyph, rPrevGlyph, overHang):
      if tw is None: tw = ffi.NULL
      if th is None: th = ffi.NULL
      if rPrevGlyph is None: rPrevGlyph = ffi.NULL
      if overHang is None: overHang = ffi.NULL
      return lib.DisplayDriver_fontExtent(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if text is None else text.impl, len, tw, th, prevGlyph, rPrevGlyph, overHang)

   @property
   def fontExtent(self):
      if hasattr(self, 'fn_DisplayDriver_fontExtent'): return self.fn_DisplayDriver_fontExtent
      else: return self.fn_unset_DisplayDriver_fontExtent
   @fontExtent.setter
   def fontExtent(self, value):
      self.fn_DisplayDriver_fontExtent = value
      lib.Instance_setMethod(self.impl, "FontExtent".encode('utf8'), cb_DisplayDriver_fontExtent)

   def fn_unset_DisplayDriver_freeBitmap(self, ap1, ap2):
      return lib.DisplayDriver_freeBitmap(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl)

   @property
   def freeBitmap(self):
      if hasattr(self, 'fn_DisplayDriver_freeBitmap'): return self.fn_DisplayDriver_freeBitmap
      else: return self.fn_unset_DisplayDriver_freeBitmap
   @freeBitmap.setter
   def freeBitmap(self, value):
      self.fn_DisplayDriver_freeBitmap = value
      lib.Instance_setMethod(self.impl, "FreeBitmap".encode('utf8'), cb_DisplayDriver_freeBitmap)

   def fn_unset_DisplayDriver_freeIndices(self, ap1, indices):
      return lib.DisplayDriver_freeIndices(self.impl, ffi.NULL if ap1 is None else ap1.impl, indices)

   @property
   def freeIndices(self):
      if hasattr(self, 'fn_DisplayDriver_freeIndices'): return self.fn_DisplayDriver_freeIndices
      else: return self.fn_unset_DisplayDriver_freeIndices
   @freeIndices.setter
   def freeIndices(self, value):
      self.fn_DisplayDriver_freeIndices = value
      lib.Instance_setMethod(self.impl, "FreeIndices".encode('utf8'), cb_DisplayDriver_freeIndices)

   def fn_unset_DisplayDriver_freeMesh(self, ap1, ap2):
      return lib.DisplayDriver_freeMesh(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl)

   @property
   def freeMesh(self):
      if hasattr(self, 'fn_DisplayDriver_freeMesh'): return self.fn_DisplayDriver_freeMesh
      else: return self.fn_unset_DisplayDriver_freeMesh
   @freeMesh.setter
   def freeMesh(self, value):
      self.fn_DisplayDriver_freeMesh = value
      lib.Instance_setMethod(self.impl, "FreeMesh".encode('utf8'), cb_DisplayDriver_freeMesh)

   def fn_unset_DisplayDriver_getBitmapSurface(self, displaySystem, surface, bitmap, ap1, ap2, ap3):
      return lib.DisplayDriver_getBitmapSurface(self.impl, ffi.NULL if displaySystem is None else displaySystem.impl, ffi.NULL if surface is None else surface.impl, ffi.NULL if bitmap is None else bitmap.impl, ap1, ap2, ffi.NULL if ap3 is None else ap3.impl)

   @property
   def getBitmapSurface(self):
      if hasattr(self, 'fn_DisplayDriver_getBitmapSurface'): return self.fn_DisplayDriver_getBitmapSurface
      else: return self.fn_unset_DisplayDriver_getBitmapSurface
   @getBitmapSurface.setter
   def getBitmapSurface(self, value):
      self.fn_DisplayDriver_getBitmapSurface = value
      lib.Instance_setMethod(self.impl, "GetBitmapSurface".encode('utf8'), cb_DisplayDriver_getBitmapSurface)

   def fn_unset_DisplayDriver_getPixel(self, ap1, ap2, x, y):
      return lib.DisplayDriver_getPixel(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, x, y)

   @property
   def getPixel(self):
      if hasattr(self, 'fn_DisplayDriver_getPixel'): return self.fn_DisplayDriver_getPixel
      else: return self.fn_unset_DisplayDriver_getPixel
   @getPixel.setter
   def getPixel(self, value):
      self.fn_DisplayDriver_getPixel = value
      lib.Instance_setMethod(self.impl, "GetPixel".encode('utf8'), cb_DisplayDriver_getPixel)

   def fn_unset_DisplayDriver_getSurface(self, ap1, surface, ap2, ap3, ap4):
      return lib.DisplayDriver_getSurface(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if surface is None else surface.impl, ap2, ap3, ffi.NULL if ap4 is None else ap4.impl)

   @property
   def getSurface(self):
      if hasattr(self, 'fn_DisplayDriver_getSurface'): return self.fn_DisplayDriver_getSurface
      else: return self.fn_unset_DisplayDriver_getSurface
   @getSurface.setter
   def getSurface(self, value):
      self.fn_DisplayDriver_getSurface = value
      lib.Instance_setMethod(self.impl, "GetSurface".encode('utf8'), cb_DisplayDriver_getSurface)

   def fn_unset_DisplayDriver_grabScreen(self, ap1, ap2, ap3, ap4, ap5, ap6):
      return lib.DisplayDriver_grabScreen(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3, ap4, ap5, ap6)

   @property
   def grabScreen(self):
      if hasattr(self, 'fn_DisplayDriver_grabScreen'): return self.fn_DisplayDriver_grabScreen
      else: return self.fn_unset_DisplayDriver_grabScreen
   @grabScreen.setter
   def grabScreen(self, value):
      self.fn_DisplayDriver_grabScreen = value
      lib.Instance_setMethod(self.impl, "GrabScreen".encode('utf8'), cb_DisplayDriver_grabScreen)

   def fn_unset_DisplayDriver_lineStipple(self, ap1, ap2, pattern):
      return lib.DisplayDriver_lineStipple(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, pattern)

   @property
   def lineStipple(self):
      if hasattr(self, 'fn_DisplayDriver_lineStipple'): return self.fn_DisplayDriver_lineStipple
      else: return self.fn_unset_DisplayDriver_lineStipple
   @lineStipple.setter
   def lineStipple(self, value):
      self.fn_DisplayDriver_lineStipple = value
      lib.Instance_setMethod(self.impl, "LineStipple".encode('utf8'), cb_DisplayDriver_lineStipple)

   def fn_unset_DisplayDriver_loadFont(self, displaySystem, faceName, size, flags, outlineSize, outlineFade):
      return lib.DisplayDriver_loadFont(self.impl, ffi.NULL if displaySystem is None else displaySystem.impl, faceName, size, flags, outlineSize, outlineFade)

   @property
   def loadFont(self):
      if hasattr(self, 'fn_DisplayDriver_loadFont'): return self.fn_DisplayDriver_loadFont
      else: return self.fn_unset_DisplayDriver_loadFont
   @loadFont.setter
   def loadFont(self, value):
      self.fn_DisplayDriver_loadFont = value
      lib.Instance_setMethod(self.impl, "LoadFont".encode('utf8'), cb_DisplayDriver_loadFont)

   def fn_unset_DisplayDriver_lock(self, ap1):
      return lib.DisplayDriver_lock(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def lock(self):
      if hasattr(self, 'fn_DisplayDriver_lock'): return self.fn_DisplayDriver_lock
      else: return self.fn_unset_DisplayDriver_lock
   @lock.setter
   def lock(self, value):
      self.fn_DisplayDriver_lock = value
      lib.Instance_setMethod(self.impl, "Lock".encode('utf8'), cb_DisplayDriver_lock)

   def fn_unset_DisplayDriver_lockIndices(self, ap1, indices):
      return lib.DisplayDriver_lockIndices(self.impl, ffi.NULL if ap1 is None else ap1.impl, indices)

   @property
   def lockIndices(self):
      if hasattr(self, 'fn_DisplayDriver_lockIndices'): return self.fn_DisplayDriver_lockIndices
      else: return self.fn_unset_DisplayDriver_lockIndices
   @lockIndices.setter
   def lockIndices(self, value):
      self.fn_DisplayDriver_lockIndices = value
      lib.Instance_setMethod(self.impl, "LockIndices".encode('utf8'), cb_DisplayDriver_lockIndices)

   def fn_unset_DisplayDriver_lockMesh(self, ap1, ap2, flags):
      return lib.DisplayDriver_lockMesh(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, flags)

   @property
   def lockMesh(self):
      if hasattr(self, 'fn_DisplayDriver_lockMesh'): return self.fn_DisplayDriver_lockMesh
      else: return self.fn_unset_DisplayDriver_lockMesh
   @lockMesh.setter
   def lockMesh(self, value):
      self.fn_DisplayDriver_lockMesh = value
      lib.Instance_setMethod(self.impl, "LockMesh".encode('utf8'), cb_DisplayDriver_lockMesh)

   def fn_unset_DisplayDriver_lockSystem(self, displaySystem):
      return lib.DisplayDriver_lockSystem(self.impl, ffi.NULL if displaySystem is None else displaySystem.impl)

   @property
   def lockSystem(self):
      if hasattr(self, 'fn_DisplayDriver_lockSystem'): return self.fn_DisplayDriver_lockSystem
      else: return self.fn_unset_DisplayDriver_lockSystem
   @lockSystem.setter
   def lockSystem(self, value):
      self.fn_DisplayDriver_lockSystem = value
      lib.Instance_setMethod(self.impl, "LockSystem".encode('utf8'), cb_DisplayDriver_lockSystem)

   def fn_unset_DisplayDriver_makeDDBitmap(self, ap1, ap2, mipMaps, cubeMapFace):
      return lib.DisplayDriver_makeDDBitmap(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, mipMaps, cubeMapFace)

   @property
   def makeDDBitmap(self):
      if hasattr(self, 'fn_DisplayDriver_makeDDBitmap'): return self.fn_DisplayDriver_makeDDBitmap
      else: return self.fn_unset_DisplayDriver_makeDDBitmap
   @makeDDBitmap.setter
   def makeDDBitmap(self, value):
      self.fn_DisplayDriver_makeDDBitmap = value
      lib.Instance_setMethod(self.impl, "MakeDDBitmap".encode('utf8'), cb_DisplayDriver_makeDDBitmap)

   def fn_unset_DisplayDriver_nextPage(self, ap1):
      return lib.DisplayDriver_nextPage(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def nextPage(self):
      if hasattr(self, 'fn_DisplayDriver_nextPage'): return self.fn_DisplayDriver_nextPage
      else: return self.fn_unset_DisplayDriver_nextPage
   @nextPage.setter
   def nextPage(self, value):
      self.fn_DisplayDriver_nextPage = value
      lib.Instance_setMethod(self.impl, "NextPage".encode('utf8'), cb_DisplayDriver_nextPage)

   def fn_unset_DisplayDriver_popMatrix(self, ap1, ap2):
      return lib.DisplayDriver_popMatrix(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2)

   @property
   def popMatrix(self):
      if hasattr(self, 'fn_DisplayDriver_popMatrix'): return self.fn_DisplayDriver_popMatrix
      else: return self.fn_unset_DisplayDriver_popMatrix
   @popMatrix.setter
   def popMatrix(self, value):
      self.fn_DisplayDriver_popMatrix = value
      lib.Instance_setMethod(self.impl, "PopMatrix".encode('utf8'), cb_DisplayDriver_popMatrix)

   def fn_unset_DisplayDriver_pushMatrix(self, ap1):
      return lib.DisplayDriver_pushMatrix(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def pushMatrix(self):
      if hasattr(self, 'fn_DisplayDriver_pushMatrix'): return self.fn_DisplayDriver_pushMatrix
      else: return self.fn_unset_DisplayDriver_pushMatrix
   @pushMatrix.setter
   def pushMatrix(self, value):
      self.fn_DisplayDriver_pushMatrix = value
      lib.Instance_setMethod(self.impl, "PushMatrix".encode('utf8'), cb_DisplayDriver_pushMatrix)

   def fn_unset_DisplayDriver_putPixel(self, ap1, ap2, x, y):
      return lib.DisplayDriver_putPixel(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, x, y)

   @property
   def putPixel(self):
      if hasattr(self, 'fn_DisplayDriver_putPixel'): return self.fn_DisplayDriver_putPixel
      else: return self.fn_unset_DisplayDriver_putPixel
   @putPixel.setter
   def putPixel(self, value):
      self.fn_DisplayDriver_putPixel = value
      lib.Instance_setMethod(self.impl, "PutPixel".encode('utf8'), cb_DisplayDriver_putPixel)

   def fn_unset_DisplayDriver_rectangle(self, ap1, ap2, x1, y1, x2, y2):
      return lib.DisplayDriver_rectangle(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, x1, y1, x2, y2)

   @property
   def rectangle(self):
      if hasattr(self, 'fn_DisplayDriver_rectangle'): return self.fn_DisplayDriver_rectangle
      else: return self.fn_unset_DisplayDriver_rectangle
   @rectangle.setter
   def rectangle(self, value):
      self.fn_DisplayDriver_rectangle = value
      lib.Instance_setMethod(self.impl, "Rectangle".encode('utf8'), cb_DisplayDriver_rectangle)

   def fn_unset_DisplayDriver_releaseSurface(self, this, ap1):
      return lib.DisplayDriver_releaseSurface(self.impl, ffi.NULL if this is None else this.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def releaseSurface(self):
      if hasattr(self, 'fn_DisplayDriver_releaseSurface'): return self.fn_DisplayDriver_releaseSurface
      else: return self.fn_unset_DisplayDriver_releaseSurface
   @releaseSurface.setter
   def releaseSurface(self, value):
      self.fn_DisplayDriver_releaseSurface = value
      lib.Instance_setMethod(self.impl, "ReleaseSurface".encode('utf8'), cb_DisplayDriver_releaseSurface)

   def fn_unset_DisplayDriver_restorePalette(self, ap1):
      return lib.DisplayDriver_restorePalette(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def restorePalette(self):
      if hasattr(self, 'fn_DisplayDriver_restorePalette'): return self.fn_DisplayDriver_restorePalette
      else: return self.fn_unset_DisplayDriver_restorePalette
   @restorePalette.setter
   def restorePalette(self, value):
      self.fn_DisplayDriver_restorePalette = value
      lib.Instance_setMethod(self.impl, "RestorePalette".encode('utf8'), cb_DisplayDriver_restorePalette)

   def fn_unset_DisplayDriver_scroll(self, ap1, ap2, ap3, ap4, ap5):
      return lib.DisplayDriver_scroll(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3, ap4, ffi.NULL if ap5 is None else ap5.impl)

   @property
   def scroll(self):
      if hasattr(self, 'fn_DisplayDriver_scroll'): return self.fn_DisplayDriver_scroll
      else: return self.fn_unset_DisplayDriver_scroll
   @scroll.setter
   def scroll(self, value):
      self.fn_DisplayDriver_scroll = value
      lib.Instance_setMethod(self.impl, "Scroll".encode('utf8'), cb_DisplayDriver_scroll)

   def fn_unset_DisplayDriver_selectMesh(self, ap1, ap2):
      return lib.DisplayDriver_selectMesh(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl)

   @property
   def selectMesh(self):
      if hasattr(self, 'fn_DisplayDriver_selectMesh'): return self.fn_DisplayDriver_selectMesh
      else: return self.fn_unset_DisplayDriver_selectMesh
   @selectMesh.setter
   def selectMesh(self, value):
      self.fn_DisplayDriver_selectMesh = value
      lib.Instance_setMethod(self.impl, "SelectMesh".encode('utf8'), cb_DisplayDriver_selectMesh)

   def fn_unset_DisplayDriver_setBackground(self, ap1, ap2, ap3):
      return lib.DisplayDriver_setBackground(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3)

   @property
   def setBackground(self):
      if hasattr(self, 'fn_DisplayDriver_setBackground'): return self.fn_DisplayDriver_setBackground
      else: return self.fn_unset_DisplayDriver_setBackground
   @setBackground.setter
   def setBackground(self, value):
      self.fn_DisplayDriver_setBackground = value
      lib.Instance_setMethod(self.impl, "SetBackground".encode('utf8'), cb_DisplayDriver_setBackground)

   def fn_unset_DisplayDriver_setBlitTint(self, ap1, ap2, ap3):
      return lib.DisplayDriver_setBlitTint(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3)

   @property
   def setBlitTint(self):
      if hasattr(self, 'fn_DisplayDriver_setBlitTint'): return self.fn_DisplayDriver_setBlitTint
      else: return self.fn_unset_DisplayDriver_setBlitTint
   @setBlitTint.setter
   def setBlitTint(self, value):
      self.fn_DisplayDriver_setBlitTint = value
      lib.Instance_setMethod(self.impl, "SetBlitTint".encode('utf8'), cb_DisplayDriver_setBlitTint)

   def fn_unset_DisplayDriver_setCamera(self, ap1, ap2, ap3):
      return lib.DisplayDriver_setCamera(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl)

   @property
   def setCamera(self):
      if hasattr(self, 'fn_DisplayDriver_setCamera'): return self.fn_DisplayDriver_setCamera
      else: return self.fn_unset_DisplayDriver_setCamera
   @setCamera.setter
   def setCamera(self, value):
      self.fn_DisplayDriver_setCamera = value
      lib.Instance_setMethod(self.impl, "SetCamera".encode('utf8'), cb_DisplayDriver_setCamera)

   def fn_unset_DisplayDriver_setForeground(self, ap1, ap2, ap3):
      return lib.DisplayDriver_setForeground(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3)

   @property
   def setForeground(self):
      if hasattr(self, 'fn_DisplayDriver_setForeground'): return self.fn_DisplayDriver_setForeground
      else: return self.fn_unset_DisplayDriver_setForeground
   @setForeground.setter
   def setForeground(self, value):
      self.fn_DisplayDriver_setForeground = value
      lib.Instance_setMethod(self.impl, "SetForeground".encode('utf8'), cb_DisplayDriver_setForeground)

   def fn_unset_DisplayDriver_setLight(self, ap1, ap2, ap3):
      return lib.DisplayDriver_setLight(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ffi.NULL if ap3 is None else ap3.impl)

   @property
   def setLight(self):
      if hasattr(self, 'fn_DisplayDriver_setLight'): return self.fn_DisplayDriver_setLight
      else: return self.fn_unset_DisplayDriver_setLight
   @setLight.setter
   def setLight(self, value):
      self.fn_DisplayDriver_setLight = value
      lib.Instance_setMethod(self.impl, "SetLight".encode('utf8'), cb_DisplayDriver_setLight)

   def fn_unset_DisplayDriver_setPalette(self, ap1, ap2, ap3):
      return lib.DisplayDriver_setPalette(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ap3)

   @property
   def setPalette(self):
      if hasattr(self, 'fn_DisplayDriver_setPalette'): return self.fn_DisplayDriver_setPalette
      else: return self.fn_unset_DisplayDriver_setPalette
   @setPalette.setter
   def setPalette(self, value):
      self.fn_DisplayDriver_setPalette = value
      lib.Instance_setMethod(self.impl, "SetPalette".encode('utf8'), cb_DisplayDriver_setPalette)

   def fn_unset_DisplayDriver_setRenderState(self, ap1, ap2, ap3):
      return lib.DisplayDriver_setRenderState(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ap3)

   @property
   def setRenderState(self):
      if hasattr(self, 'fn_DisplayDriver_setRenderState'): return self.fn_DisplayDriver_setRenderState
      else: return self.fn_unset_DisplayDriver_setRenderState
   @setRenderState.setter
   def setRenderState(self, value):
      self.fn_DisplayDriver_setRenderState = value
      lib.Instance_setMethod(self.impl, "SetRenderState".encode('utf8'), cb_DisplayDriver_setRenderState)

   def fn_unset_DisplayDriver_setTransform(self, ap1, ap2, ap3, ap4):
      return lib.DisplayDriver_setTransform(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3, ap4)

   @property
   def setTransform(self):
      if hasattr(self, 'fn_DisplayDriver_setTransform'): return self.fn_DisplayDriver_setTransform
      else: return self.fn_unset_DisplayDriver_setTransform
   @setTransform.setter
   def setTransform(self, value):
      self.fn_DisplayDriver_setTransform = value
      lib.Instance_setMethod(self.impl, "SetTransform".encode('utf8'), cb_DisplayDriver_setTransform)

   def fn_unset_DisplayDriver_startUpdate(self, ap1):
      return lib.DisplayDriver_startUpdate(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def startUpdate(self):
      if hasattr(self, 'fn_DisplayDriver_startUpdate'): return self.fn_DisplayDriver_startUpdate
      else: return self.fn_unset_DisplayDriver_startUpdate
   @startUpdate.setter
   def startUpdate(self, value):
      self.fn_DisplayDriver_startUpdate = value
      lib.Instance_setMethod(self.impl, "StartUpdate".encode('utf8'), cb_DisplayDriver_startUpdate)

   def fn_unset_DisplayDriver_stretch(self, ap1, ap2, ap3, dx, dy, sx, sy, w, h, sw, sh):
      return lib.DisplayDriver_stretch(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl, dx, dy, sx, sy, w, h, sw, sh)

   @property
   def stretch(self):
      if hasattr(self, 'fn_DisplayDriver_stretch'): return self.fn_DisplayDriver_stretch
      else: return self.fn_unset_DisplayDriver_stretch
   @stretch.setter
   def stretch(self, value):
      self.fn_DisplayDriver_stretch = value
      lib.Instance_setMethod(self.impl, "Stretch".encode('utf8'), cb_DisplayDriver_stretch)

   def fn_unset_DisplayDriver_stretchDI(self, ap1, ap2, ap3, dx, dy, sx, sy, w, h, sw, sh):
      return lib.DisplayDriver_stretchDI(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl, dx, dy, sx, sy, w, h, sw, sh)

   @property
   def stretchDI(self):
      if hasattr(self, 'fn_DisplayDriver_stretchDI'): return self.fn_DisplayDriver_stretchDI
      else: return self.fn_unset_DisplayDriver_stretchDI
   @stretchDI.setter
   def stretchDI(self, value):
      self.fn_DisplayDriver_stretchDI = value
      lib.Instance_setMethod(self.impl, "StretchDI".encode('utf8'), cb_DisplayDriver_stretchDI)

   def fn_unset_DisplayDriver_textExtent(self, ap1, ap2, text, len, tw, th, prevGlyph, rPrevGlyph, overHang):
      if tw is None: tw = ffi.NULL
      if th is None: th = ffi.NULL
      if rPrevGlyph is None: rPrevGlyph = ffi.NULL
      if overHang is None: overHang = ffi.NULL
      return lib.DisplayDriver_textExtent(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if text is None else text.impl, len, tw, th, prevGlyph, rPrevGlyph, overHang)

   @property
   def textExtent(self):
      if hasattr(self, 'fn_DisplayDriver_textExtent'): return self.fn_DisplayDriver_textExtent
      else: return self.fn_unset_DisplayDriver_textExtent
   @textExtent.setter
   def textExtent(self, value):
      self.fn_DisplayDriver_textExtent = value
      lib.Instance_setMethod(self.impl, "TextExtent".encode('utf8'), cb_DisplayDriver_textExtent)

   def fn_unset_DisplayDriver_textFont(self, ap1, ap2, ap3):
      return lib.DisplayDriver_textFont(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl)

   @property
   def textFont(self):
      if hasattr(self, 'fn_DisplayDriver_textFont'): return self.fn_DisplayDriver_textFont
      else: return self.fn_unset_DisplayDriver_textFont
   @textFont.setter
   def textFont(self, value):
      self.fn_DisplayDriver_textFont = value
      lib.Instance_setMethod(self.impl, "TextFont".encode('utf8'), cb_DisplayDriver_textFont)

   def fn_unset_DisplayDriver_textOpacity(self, ap1, ap2, ap3):
      return lib.DisplayDriver_textOpacity(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, ap3)

   @property
   def textOpacity(self):
      if hasattr(self, 'fn_DisplayDriver_textOpacity'): return self.fn_DisplayDriver_textOpacity
      else: return self.fn_unset_DisplayDriver_textOpacity
   @textOpacity.setter
   def textOpacity(self, value):
      self.fn_DisplayDriver_textOpacity = value
      lib.Instance_setMethod(self.impl, "TextOpacity".encode('utf8'), cb_DisplayDriver_textOpacity)

   def fn_unset_DisplayDriver_unloadFont(self, ap1, ap2):
      return lib.DisplayDriver_unloadFont(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl)

   @property
   def unloadFont(self):
      if hasattr(self, 'fn_DisplayDriver_unloadFont'): return self.fn_DisplayDriver_unloadFont
      else: return self.fn_unset_DisplayDriver_unloadFont
   @unloadFont.setter
   def unloadFont(self, value):
      self.fn_DisplayDriver_unloadFont = value
      lib.Instance_setMethod(self.impl, "UnloadFont".encode('utf8'), cb_DisplayDriver_unloadFont)

   def fn_unset_DisplayDriver_unlock(self, ap1):
      return lib.DisplayDriver_unlock(self.impl, ffi.NULL if ap1 is None else ap1.impl)

   @property
   def unlock(self):
      if hasattr(self, 'fn_DisplayDriver_unlock'): return self.fn_DisplayDriver_unlock
      else: return self.fn_unset_DisplayDriver_unlock
   @unlock.setter
   def unlock(self, value):
      self.fn_DisplayDriver_unlock = value
      lib.Instance_setMethod(self.impl, "Unlock".encode('utf8'), cb_DisplayDriver_unlock)

   def fn_unset_DisplayDriver_unlockIndices(self, ap1, indices, indices32bit, nIndices):
      return lib.DisplayDriver_unlockIndices(self.impl, ffi.NULL if ap1 is None else ap1.impl, indices, indices32bit, nIndices)

   @property
   def unlockIndices(self):
      if hasattr(self, 'fn_DisplayDriver_unlockIndices'): return self.fn_DisplayDriver_unlockIndices
      else: return self.fn_unset_DisplayDriver_unlockIndices
   @unlockIndices.setter
   def unlockIndices(self, value):
      self.fn_DisplayDriver_unlockIndices = value
      lib.Instance_setMethod(self.impl, "UnlockIndices".encode('utf8'), cb_DisplayDriver_unlockIndices)

   def fn_unset_DisplayDriver_unlockMesh(self, ap1, ap2, flags):
      return lib.DisplayDriver_unlockMesh(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, flags)

   @property
   def unlockMesh(self):
      if hasattr(self, 'fn_DisplayDriver_unlockMesh'): return self.fn_DisplayDriver_unlockMesh
      else: return self.fn_unset_DisplayDriver_unlockMesh
   @unlockMesh.setter
   def unlockMesh(self, value):
      self.fn_DisplayDriver_unlockMesh = value
      lib.Instance_setMethod(self.impl, "UnlockMesh".encode('utf8'), cb_DisplayDriver_unlockMesh)

   def fn_unset_DisplayDriver_unlockSystem(self, displaySystem):
      return lib.DisplayDriver_unlockSystem(self.impl, ffi.NULL if displaySystem is None else displaySystem.impl)

   @property
   def unlockSystem(self):
      if hasattr(self, 'fn_DisplayDriver_unlockSystem'): return self.fn_DisplayDriver_unlockSystem
      else: return self.fn_unset_DisplayDriver_unlockSystem
   @unlockSystem.setter
   def unlockSystem(self, value):
      self.fn_DisplayDriver_unlockSystem = value
      lib.Instance_setMethod(self.impl, "UnlockSystem".encode('utf8'), cb_DisplayDriver_unlockSystem)

   def fn_unset_DisplayDriver_update(self, ap1, ap2):
      return lib.DisplayDriver_update(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl)

   @property
   def update(self):
      if hasattr(self, 'fn_DisplayDriver_update'): return self.fn_DisplayDriver_update
      else: return self.fn_unset_DisplayDriver_update
   @update.setter
   def update(self, value):
      self.fn_DisplayDriver_update = value
      lib.Instance_setMethod(self.impl, "Update".encode('utf8'), cb_DisplayDriver_update)

   def fn_unset_DisplayDriver_writeText(self, ap1, ap2, x, y, text, len, prevGlyph, rPrevGlyph):
      if rPrevGlyph is None: rPrevGlyph = ffi.NULL
      return lib.DisplayDriver_writeText(self.impl, ffi.NULL if ap1 is None else ap1.impl, ffi.NULL if ap2 is None else ap2.impl, x, y, ffi.NULL if text is None else text.impl, len, prevGlyph, rPrevGlyph)

   @property
   def writeText(self):
      if hasattr(self, 'fn_DisplayDriver_writeText'): return self.fn_DisplayDriver_writeText
      else: return self.fn_unset_DisplayDriver_writeText
   @writeText.setter
   def writeText(self, value):
      self.fn_DisplayDriver_writeText = value
      lib.Instance_setMethod(self.impl, "WriteText".encode('utf8'), cb_DisplayDriver_writeText)

class DisplayFlags(pyBaseClass):
   def __init__(self, fullScreen = False, flipping = False, alpha = False, memBackBuffer = False, text = False, scrolling = False, printer = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(fullScreen, DisplayFlags):
         self.impl = fullScreen.impl
      else:
         self.impl = (
            (fullScreen    << lib.DISPLAYFLAGS_fullScreen_SHIFT)    |
            (flipping      << lib.DISPLAYFLAGS_flipping_SHIFT)      |
            (alpha         << lib.DISPLAYFLAGS_alpha_SHIFT)         |
            (memBackBuffer << lib.DISPLAYFLAGS_memBackBuffer_SHIFT) |
            (text          << lib.DISPLAYFLAGS_text_SHIFT)          |
            (scrolling     << lib.DISPLAYFLAGS_scrolling_SHIFT)     |
            (printer       << lib.DISPLAYFLAGS_printer_SHIFT)       )

   @property
   def fullScreen(self): return ((((self.impl)) & lib.DISPLAYFLAGS_fullScreen_MASK) >> lib.DISPLAYFLAGS_fullScreen_SHIFT)
   @fullScreen.setter
   def fullScreen(self, value): self.value = ((self.impl) & ~(lib.DISPLAYFLAGS_fullScreen_MASK)) | (((value)) << lib.DISPLAYFLAGS_fullScreen_SHIFT)

   @property
   def flipping(self): return ((((self.impl)) & lib.DISPLAYFLAGS_flipping_MASK) >> lib.DISPLAYFLAGS_flipping_SHIFT)
   @flipping.setter
   def flipping(self, value): self.value = ((self.impl) & ~(lib.DISPLAYFLAGS_flipping_MASK)) | (((value)) << lib.DISPLAYFLAGS_flipping_SHIFT)

   @property
   def alpha(self): return ((((self.impl)) & lib.DISPLAYFLAGS_alpha_MASK) >> lib.DISPLAYFLAGS_alpha_SHIFT)
   @alpha.setter
   def alpha(self, value): self.value = ((self.impl) & ~(lib.DISPLAYFLAGS_alpha_MASK)) | (((value)) << lib.DISPLAYFLAGS_alpha_SHIFT)

   @property
   def memBackBuffer(self): return ((((self.impl)) & lib.DISPLAYFLAGS_memBackBuffer_MASK) >> lib.DISPLAYFLAGS_memBackBuffer_SHIFT)
   @memBackBuffer.setter
   def memBackBuffer(self, value): self.value = ((self.impl) & ~(lib.DISPLAYFLAGS_memBackBuffer_MASK)) | (((value)) << lib.DISPLAYFLAGS_memBackBuffer_SHIFT)

   @property
   def text(self): return ((((self.impl)) & lib.DISPLAYFLAGS_text_MASK) >> lib.DISPLAYFLAGS_text_SHIFT)
   @text.setter
   def text(self, value): self.value = ((self.impl) & ~(lib.DISPLAYFLAGS_text_MASK)) | (((value)) << lib.DISPLAYFLAGS_text_SHIFT)

   @property
   def scrolling(self): return ((((self.impl)) & lib.DISPLAYFLAGS_scrolling_MASK) >> lib.DISPLAYFLAGS_scrolling_SHIFT)
   @scrolling.setter
   def scrolling(self, value): self.value = ((self.impl) & ~(lib.DISPLAYFLAGS_scrolling_MASK)) | (((value)) << lib.DISPLAYFLAGS_scrolling_SHIFT)

   @property
   def printer(self): return ((((self.impl)) & lib.DISPLAYFLAGS_printer_MASK) >> lib.DISPLAYFLAGS_printer_SHIFT)
   @printer.setter
   def printer(self, value): self.value = ((self.impl) & ~(lib.DISPLAYFLAGS_printer_MASK)) | (((value)) << lib.DISPLAYFLAGS_printer_SHIFT)

class DisplaySystem(Instance):
   def __init__(self,
                pixelFormat = None,
                flags = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if pixelFormat is not None: self.pixelFormat = pixelFormat
      if flags is not None:       self.flags = flags

   @property
   def pixelFormat(self): return PixelFormat(impl = IPTR(lib, ffi, self, DisplaySystem).pixelFormat)
   @pixelFormat.setter
   def pixelFormat(self, value): IPTR(lib, ffi, self, DisplaySystem).pixelFormat = value.impl

   @property
   def flags(self): return DisplayFlags(impl = IPTR(lib, ffi, self, DisplaySystem).flags)
   @flags.setter
   def flags(self, value):
      if not isinstance(value, DisplayFlags): value = DisplayFlags(value)
      IPTR(lib, ffi, self, DisplaySystem).flags = value.impl

   def addMaterial(self, material):
      if material is not None and not isinstance(material, Material): material = Material(material)
      if material is None: material = ffi.NULL
      return lib.DisplaySystem_addMaterial(self.impl, material)

   def addMesh(self, mesh):
      if mesh is not None and not isinstance(mesh, Mesh): mesh = Mesh(mesh)
      if mesh is None: mesh = ffi.NULL
      return pyOrNewObject(OldLink, lib.DisplaySystem_addMesh(self.impl, mesh))

   def addNamedMaterial(self, name):
      return pyOrNewObject(Material, lib.DisplaySystem_addNamedMaterial(self.impl, name.encode('utf8')))

   def addTexture(self, name, bitmap):
      if bitmap is not None and not isinstance(bitmap, Bitmap): bitmap = Bitmap(bitmap)
      if bitmap is None: bitmap = ffi.NULL
      return pyOrNewObject(NamedLink, lib.DisplaySystem_addTexture(self.impl, name.encode('utf8'), bitmap))

   def clearMaterials(self):
      lib.DisplaySystem_clearMaterials(self.impl)

   def clearMeshes(self):
      lib.DisplaySystem_clearMeshes(self.impl)

   def clearTextures(self):
      lib.DisplaySystem_clearTextures(self.impl)

   def create(self, driverName, window, fullScreen):
      return lib.DisplaySystem_create(self.impl, driverName.encode('utf8'), window, fullScreen)

   def fontExtent(self, font, text, len):
      if font is not None and not isinstance(font, Font): font = Font(font)
      if font is None: font = ffi.NULL
      width = ffi.new("int *")
      height = ffi.new("int *")
      lib.DisplaySystem_fontExtent(self.impl, font, text.encode('utf8'), len, width, height)
      return width[0], height[0]

   def fontExtent2(self, font, text, len, prevGlyph):
      if font is not None and not isinstance(font, Font): font = Font(font)
      if font is None: font = ffi.NULL
      width = ffi.new("int *")
      height = ffi.new("int *")
      rPrevGlyph = ffi.new("int *")
      overHang = ffi.new("int *")
      lib.DisplaySystem_fontExtent2(self.impl, font, text.encode('utf8'), len, width, height, prevGlyph, rPrevGlyph, overHang)
      return width[0], height[0], rPrevGlyph[0], overHang[0]

   def getMaterial(self, name):
      return pyOrNewObject(Material, lib.DisplaySystem_getMaterial(self.impl, name.encode('utf8')))

   def getTexture(self, name):
      return pyOrNewObject(Bitmap, lib.DisplaySystem_getTexture(self.impl, name.encode('utf8')))

   def loadFont(self, faceName, size, flags):
      if flags is not None and not isinstance(flags, FontFlags): flags = FontFlags(flags)
      if flags is None: flags = ffi.NULL
      return pyOrNewObject(Font, lib.DisplaySystem_loadFont(self.impl, faceName.encode('utf8'), size, flags))

   def loadOutlineFont(self, faceName, size, flags, outlineSize, outlineFade):
      if flags is not None and not isinstance(flags, FontFlags): flags = FontFlags(flags)
      if flags is None: flags = ffi.NULL
      return pyOrNewObject(Font, lib.DisplaySystem_loadOutlineFont(self.impl, faceName.encode('utf8'), size, flags, outlineSize, outlineFade))

   def loadResource(self, resource):
      if resource is not None and not isinstance(resource, Resource): resource = Resource(resource)
      if resource is None: resource = ffi.NULL
      return lib.DisplaySystem_loadResource(self.impl, resource)

   def loadResourceFM(self, resource, fm):
      if resource is not None and not isinstance(resource, Resource): resource = Resource(resource)
      if resource is None: resource = ffi.NULL
      if fm is not None and not isinstance(fm, FontManager): fm = FontManager(fm)
      if fm is None: fm = ffi.NULL
      return lib.DisplaySystem_loadResourceFM(self.impl, resource, fm)

   def lock(self):
      return lib.DisplaySystem_lock(self.impl)

   def removeMaterial(self, material):
      if material is not None and not isinstance(material, Material): material = Material(material)
      if material is None: material = ffi.NULL
      return lib.DisplaySystem_removeMaterial(self.impl, material)

   def removeMesh(self, mesh):
      if mesh is not None and not isinstance(mesh, Mesh): mesh = Mesh(mesh)
      if mesh is None: mesh = ffi.NULL
      return lib.DisplaySystem_removeMesh(self.impl, mesh)

   def removeTexture(self, name):
      return lib.DisplaySystem_removeTexture(self.impl, name.encode('utf8'))

   def unloadFont(self, font):
      if font is not None and not isinstance(font, Font): font = Font(font)
      if font is None: font = ffi.NULL
      lib.DisplaySystem_unloadFont(self.impl, font)

   def unloadResource(self, resource, res):
      if resource is not None and not isinstance(resource, Resource): resource = Resource(resource)
      if resource is None: resource = ffi.NULL
      if res is not None and not isinstance(res, DisplaySystemResPtr): res = DisplaySystemResPtr(res)
      if res is None: res = ffi.NULL
      lib.DisplaySystem_unloadResource(self.impl, resource, res)

   def unlock(self):
      lib.DisplaySystem_unlock(self.impl)

   def _LoadResource(self, resource, fm):
      if resource is not None and not isinstance(resource, Resource): resource = Resource(resource)
      if resource is None: resource = ffi.NULL
      return lib.DisplaySystem__LoadResource(self.impl, resource, fm)

class DisplaySystemResPtr:
   def __init__(self, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("DisplaySystemResPtr *", lib.Instance_new(lib.class_DisplaySystemResPtr))

@ffi.callback("void(DrawManager)")
def cb_DrawManager_flush(__d):
   drawmanager = pyOrNewObject(DrawManager, __d)
   drawmanager.fn_DrawManager_flush(drawmanager)

class DrawManager(Instance):
   def __init__(self,
                renderingFlipped = None,
                flush = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if renderingFlipped is not None: self.renderingFlipped = renderingFlipped
      if flush is not None:            self.flush = flush

   @property
   def renderingFlipped(self): return None
   @renderingFlipped.setter
   def renderingFlipped(self, value):
      lib.DrawManager_set_renderingFlipped(self.impl, value)

   def clear(self):
      lib.DrawManager_clear(self.impl)

   def drawBarrier(self):
      lib.DrawManager_drawBarrier(self.impl)

   def drawImage(self, index, offsetx, offsety, angsin, angcos, color):
      if color is not None and not isinstance(color, ColorAlpha): color = ColorAlpha(color)
      if color is None: color = ffi.NULL
      lib.DrawManager_drawImage(self.impl, index, offsetx, offsety, angsin, angcos, color)

   def end(self):
      lib.DrawManager_end(self.impl)

   def finish(self):
      lib.DrawManager_finish(self.impl)

   def fn_unset_DrawManager_flush(self):
      return lib.DrawManager_flush(self.impl)

   @property
   def flush(self):
      if hasattr(self, 'fn_DrawManager_flush'): return self.fn_DrawManager_flush
      else: return self.fn_unset_DrawManager_flush
   @flush.setter
   def flush(self, value):
      self.fn_DrawManager_flush = value
      lib.Instance_setMethod(self.impl, "flush".encode('utf8'), cb_DrawManager_flush)

   def init(self):
      return lib.DrawManager_init(self.impl)

   def ready(self, viewportWidth, viewportHeight):
      lib.DrawManager_ready(self.impl, viewportWidth, viewportHeight)

class FMFont:
   def __init__(self, link = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("FMFont *", lib.Instance_new(lib.class_FMFont))
         if link is not None: self.link = link

   @property
   def link(self): return LinkElement(impl = self.impl.link)
   @link.setter
   def link(self, value):
      if not isinstance(value, LinkElement): value = LinkElement(value)
      self.impl.link = value.impl[0]

   def setOutline(self, size, fade):
      lib.FMFont_setOutline(self.impl, size, fade)

class FMPathDraw:
   def __init__(self, prevGlyphIndex = 0, middleAlign = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("FMPathDraw *", impl)
      else:
         if isinstance(prevGlyphIndex, tuple):
            __tuple = prevGlyphIndex
            prevGlyphIndex = 0
            if len(__tuple) > 0: prevGlyphIndex = __tuple[0]
            if len(__tuple) > 1: middleAlign    = __tuple[1]
         self.impl = ffi.new("FMPathDraw *", { 'prevGlyphIndex' : prevGlyphIndex, 'middleAlign' : middleAlign })

   @property
   def prevGlyphIndex(self): return self.impl.prevGlyphIndex
   @prevGlyphIndex.setter
   def prevGlyphIndex(self, value): self.impl.prevGlyphIndex = value

   @property
   def middleAlign(self): return self.impl.middleAlign
   @middleAlign.setter
   def middleAlign(self, value): self.impl.middleAlign = value

class FMTextAlignment(pyBaseClass):
   def __init__(self, horzAlignment = 0, vertAlignment = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(horzAlignment, FMTextAlignment):
         self.impl = horzAlignment.impl
      else:
         if isinstance(horzAlignment, tuple):
            __tuple = horzAlignment
            horzAlignment = 0
            if len(__tuple) > 0: horzAlignment = __tuple[0]
            if len(__tuple) > 1: vertAlignment = __tuple[1]
         self.impl = (
            (horzAlignment << lib.FMTEXTALIGNMENT_horzAlignment_SHIFT) |
            (vertAlignment << lib.FMTEXTALIGNMENT_vertAlignment_SHIFT) )

   @property
   def horzAlignment(self): return ((((self.impl)) & lib.FMTEXTALIGNMENT_horzAlignment_MASK) >> lib.FMTEXTALIGNMENT_horzAlignment_SHIFT)
   @horzAlignment.setter
   def horzAlignment(self, value): self.value = ((self.impl) & ~(lib.FMTEXTALIGNMENT_horzAlignment_MASK)) | (((value)) << lib.FMTEXTALIGNMENT_horzAlignment_SHIFT)

   @property
   def vertAlignment(self): return ((((self.impl)) & lib.FMTEXTALIGNMENT_vertAlignment_MASK) >> lib.FMTEXTALIGNMENT_vertAlignment_SHIFT)
   @vertAlignment.setter
   def vertAlignment(self, value): self.value = ((self.impl) & ~(lib.FMTEXTALIGNMENT_vertAlignment_MASK)) | (((value)) << lib.FMTEXTALIGNMENT_vertAlignment_SHIFT)

class FMVerticalAlignment:
   baseline = lib.FMVerticalAlignment_baseline
   top      = lib.FMVerticalAlignment_top
   middle   = lib.FMVerticalAlignment_middle
   bottom   = lib.FMVerticalAlignment_bottom

class FaceInfo:
   def __init__(self, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("FaceInfo *", lib.Instance_new(lib.class_FaceInfo))

class FillModeValue:
   solid     = lib.FillModeValue_solid
   wireframe = lib.FillModeValue_wireframe

class Font:
   def __init__(self, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("Font *", lib.Instance_new(lib.class_Font))

   @property
   def ascent(self): return lib.Font_get_ascent(self.impl)

   @property
   def descent(self): return lib.Font_get_descent(self.impl)

class FontFlags(pyBaseClass):
   def __init__(self, bold = False, italic = False, underline = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(bold, FontFlags):
         self.impl = bold.impl
      else:
         if isinstance(bold, tuple):
            __tuple = bold
            bold = False
            if len(__tuple) > 0: bold = __tuple[0]
            if len(__tuple) > 1: italic = __tuple[1]
            if len(__tuple) > 2: underline = __tuple[2]
         self.impl = (
            (bold      << lib.FONTFLAGS_bold_SHIFT)      |
            (italic    << lib.FONTFLAGS_italic_SHIFT)    |
            (underline << lib.FONTFLAGS_underline_SHIFT) )

   @property
   def bold(self): return ((((self.impl)) & lib.FONTFLAGS_bold_MASK) >> lib.FONTFLAGS_bold_SHIFT)
   @bold.setter
   def bold(self, value): self.value = ((self.impl) & ~(lib.FONTFLAGS_bold_MASK)) | (((value)) << lib.FONTFLAGS_bold_SHIFT)

   @property
   def italic(self): return ((((self.impl)) & lib.FONTFLAGS_italic_MASK) >> lib.FONTFLAGS_italic_SHIFT)
   @italic.setter
   def italic(self, value): self.value = ((self.impl) & ~(lib.FONTFLAGS_italic_MASK)) | (((value)) << lib.FONTFLAGS_italic_SHIFT)

   @property
   def underline(self): return ((((self.impl)) & lib.FONTFLAGS_underline_MASK) >> lib.FONTFLAGS_underline_SHIFT)
   @underline.setter
   def underline(self, value): self.value = ((self.impl) & ~(lib.FONTFLAGS_underline_MASK)) | (((value)) << lib.FONTFLAGS_underline_SHIFT)

class FontInfo:
   def __init__(self, fixedPitch = None, defaultOrAnsiCharSet = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("FontInfo *", impl)
      else:
         if isinstance(fixedPitch, tuple):
            __tuple = fixedPitch
            fixedPitch = False
            if len(__tuple) > 0: fixedPitch           = __tuple[0]
            if len(__tuple) > 1: defaultOrAnsiCharSet = __tuple[1]
         self.impl = ffi.new("FontInfo *", { 'fixedPitch' : fixedPitch, 'defaultOrAnsiCharSet' : defaultOrAnsiCharSet })

   @property
   def fixedPitch(self): return self.impl.fixedPitch
   @fixedPitch.setter
   def fixedPitch(self, value): self.impl.fixedPitch = value

   @property
   def defaultOrAnsiCharSet(self): return self.impl.defaultOrAnsiCharSet
   @defaultOrAnsiCharSet.setter
   def defaultOrAnsiCharSet(self, value): self.impl.defaultOrAnsiCharSet = value

@ffi.callback("void(FontManager)")
def cb_FontManager_onAtlasFull(__f):
   fontmanager = pyOrNewObject(FontManager, __f)
   fontmanager.fn_FontManager_onAtlasFull(fontmanager)

class FontManager(Instance):
   def __init__(self,
                renderer = None,
                onAtlasFull = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if renderer is not None:    self.renderer = renderer
      if onAtlasFull is not None: self.onAtlasFull = onAtlasFull

   @property
   def renderer(self): return pyOrNewObject(FontManagerRenderer, lib.FontManager_get_renderer(self.impl))
   @renderer.setter
   def renderer(self, value):
      if not isinstance(value, FontManagerRenderer): value = FontManagerRenderer(value)
      lib.FontManager_set_renderer(self.impl, value.impl)

   def addFont(self, path, glyphPaddingWidth):
      if path is not None and not isinstance(path, String): path = String(path)
      if path is None: path = ffi.NULL
      return pyOrNewObject(FMFont, lib.FontManager_addFont(self.impl, path, glyphPaddingWidth))

   def addFontData(self, data, dataSize, glyphPaddingWidth):
      return pyOrNewObject(FMFont, lib.FontManager_addFontData(self.impl, data, dataSize, glyphPaddingWidth))

   def clearState(self):
      lib.FontManager_clearState(self.impl)

   def create(self, width, height, channelCount, channelIndex, renderer):
      if renderer is not None and not isinstance(renderer, FontManagerRenderer): renderer = FontManagerRenderer(renderer)
      if renderer is None: renderer = ffi.NULL
      return lib.FontManager_create(self.impl, width, height, channelCount, channelIndex, renderer)

   def drawText(self, x, y, string, stringlength):
      return lib.FontManager_drawText(self.impl, x, y, string.encode('utf8'), stringlength)

   def drawTextTruncate(self, x, y, truncatewidth, string, stringlength, extstring, extwidth):
      return lib.FontManager_drawTextTruncate(self.impl, x, y, truncatewidth, string.encode('utf8'), stringlength, extstring.encode('utf8'), extwidth)

   def drawTextWithCursor(self, x, y, string, stringlength, cursoroffset):
      return lib.FontManager_drawTextWithCursor(self.impl, x, y, string.encode('utf8'), stringlength, cursoroffset)

   def expandAtlas(self, width, height):
      return lib.FontManager_expandAtlas(self.impl, width, height)

   def flush(self, rendererFlush):
      lib.FontManager_flush(self.impl, rendererFlush)

   def flushUpdate(self):
      lib.FontManager_flushUpdate(self.impl)

   def freeFont(self, font):
      if font is not None and not isinstance(font, FMFont): font = FMFont(font)
      if font is None: font = ffi.NULL
      lib.FontManager_freeFont(self.impl, font)

   def getAtlasSize(self):
      retwidth = ffi.new("int *")
      retheight = ffi.new("int *")
      lib.FontManager_getAtlasSize(self.impl, retwidth, retheight)
      return retwidth[0], retheight[0]

   def getFont(self, fontResource):
      if fontResource is not None and not isinstance(fontResource, FontResource): fontResource = FontResource(fontResource)
      if fontResource is None: fontResource = ffi.NULL
      return pyOrNewObject(FMFont, lib.FontManager_getFont(self.impl, fontResource))

   def getFontExtent(self):
      retascent = ffi.new("int *")
      retdescent = ffi.new("int *")
      lib.FontManager_getFontExtent(self.impl, retascent, retdescent)
      return retascent[0], retdescent[0]

   def getFontLimits(self):
      retlimitminy = ffi.new("int *")
      retlimitmaxy = ffi.new("int *")
      lib.FontManager_getFontLimits(self.impl, retlimitminy, retlimitmaxy)
      return retlimitminy[0], retlimitmaxy[0]

   def getFontLineHeight(self):
      return lib.FontManager_getFontLineHeight(self.impl)

   def getTextBounds(self, x, y, string, stringlength):
      bounds = ffi.new("int *")
      lib.FontManager_getTextBounds(self.impl, x, y, string.encode('utf8'), stringlength, bounds)
      return FixTypeNameIssue(impl = bounds)


   def getTextNearestOffset(self, targetwidth, string, stringlength):
      return lib.FontManager_getTextNearestOffset(self.impl, targetwidth, string.encode('utf8'), stringlength)

   def getTextTruncateOffset(self, truncatewidth, string, stringlength, extwidth):
      retextflag = ffi.new("int *")
      retfullwidth = ffi.new("int *")
      lib.FontManager_getTextTruncateOffset(self.impl, truncatewidth, string.encode('utf8'), stringlength, extwidth, retextflag, retfullwidth)
      return retextflag[0], retfullwidth[0]

   def getTextWidth(self, string, stringlength):
      return lib.FontManager_getTextWidth(self.impl, string.encode('utf8'), stringlength)

   def getTextWidthTruncate(self, string, stringlength, truncatewidth):
      return lib.FontManager_getTextWidthTruncate(self.impl, string.encode('utf8'), stringlength, truncatewidth)

   def getTextureData(self):
      width = ffi.new("int *")
      height = ffi.new("int *")
      lib.FontManager_getTextureData(self.impl, width, height)
      return width[0], height[0]

   def initPathDraw(self, pathdraw):
      if pathdraw is not None and not isinstance(pathdraw, FMPathDraw): pathdraw = FMPathDraw(pathdraw)
      pathdraw = ffi.NULL if pathdraw is None else pathdraw.impl
      return lib.FontManager_initPathDraw(self.impl, ffi.cast("FMPathDraw *", pathdraw))

   def fn_unset_FontManager_onAtlasFull(self):
      return lib.FontManager_onAtlasFull(self.impl)

   @property
   def onAtlasFull(self):
      if hasattr(self, 'fn_FontManager_onAtlasFull'): return self.fn_FontManager_onAtlasFull
      else: return self.fn_unset_FontManager_onAtlasFull
   @onAtlasFull.setter
   def onAtlasFull(self, value):
      self.fn_FontManager_onAtlasFull = value
      lib.Instance_setMethod(self.impl, "onAtlasFull".encode('utf8'), cb_FontManager_onAtlasFull)

   def pathDrawCharacter(self, pathdraw, x, y, vectorx, vectory, unicode):
      if pathdraw is not None and not isinstance(pathdraw, FMPathDraw): pathdraw = FMPathDraw(pathdraw)
      pathdraw = ffi.NULL if pathdraw is None else pathdraw.impl
      return lib.FontManager_pathDrawCharacter(self.impl, ffi.cast("FMPathDraw *", pathdraw), x, y, vectorx, vectory, unicode)

   def pathDrawPredictAdvance(self, pathdraw, unicode):
      if pathdraw is not None and not isinstance(pathdraw, FMPathDraw): pathdraw = FMPathDraw(pathdraw)
      pathdraw = ffi.NULL if pathdraw is None else pathdraw.impl
      if unicode is not None and not isinstance(unicode, unichar): unicode = unichar(unicode)
      if unicode is None: unicode = ffi.NULL
      return lib.FontManager_pathDrawPredictAdvance(self.impl, ffi.cast("FMPathDraw *", pathdraw), unicode)

   def popState(self):
      lib.FontManager_popState(self.impl)

   def pushState(self):
      lib.FontManager_pushState(self.impl)

   def removeFont(self, font):
      if font is not None and not isinstance(font, FMFont): font = FMFont(font)
      if font is None: font = ffi.NULL
      lib.FontManager_removeFont(self.impl, font)

   def resetAtlas(self, width, height):
      return lib.FontManager_resetAtlas(self.impl, width, height)

   def setAlign(self, align):
      lib.FontManager_setAlign(self.impl, align)

   def setFont(self, font):
      if font is not None and not isinstance(font, FMFont): font = FMFont(font)
      if font is None: font = ffi.NULL
      lib.FontManager_setFont(self.impl, font)

   def setFontImageProcessing(self, font, processImage, opaquecontext):
      if font is not None and not isinstance(font, FMFont): font = FMFont(font)
      if font is None: font = ffi.NULL
      lib.FontManager_setFontImageProcessing(self.impl, font, opaquecontext)

   def setSize(self, size):
      lib.FontManager_setSize(self.impl, size)

   def setState(self, font, size, align):
      if font is not None and not isinstance(font, FMFont): font = FMFont(font)
      if font is None: font = ffi.NULL
      lib.FontManager_setState(self.impl, font, size, align)

   def validateTexture(self):
      retdirtyrect = ffi.new("int *")
      lib.FontManager_validateTexture(self.impl, retdirtyrect)
      return FixTypeNameIssue(impl = retdirtyrect)


class FontRenderer(FontManagerRenderer):
   def __init__(self,
                fm = None,
                drawManager = None,
                createTexture = None,
                drawImage = None,
                drawImageAlt = None,
                drawImageCursor = None,
                drawImageFloat = None,
                flush = None,
                init = None,
                registerImage = None,
                resetImages = None,
                resizeTexture = None,
                setLayer = None,
                updateTexture = None,
                impl = None):
      FontManagerRenderer.__init__(self, impl = impl)
      if fm is not None:              self.fm = fm
      if drawManager is not None:     self.drawManager = drawManager
      if createTexture is not None:   self.createTexture = createTexture
      if drawImage is not None:       self.drawImage = drawImage
      if drawImageAlt is not None:    self.drawImageAlt = drawImageAlt
      if drawImageCursor is not None: self.drawImageCursor = drawImageCursor
      if drawImageFloat is not None:  self.drawImageFloat = drawImageFloat
      if flush is not None:           self.flush = flush
      if init is not None:            self.init = init
      if registerImage is not None:   self.registerImage = registerImage
      if resetImages is not None:     self.resetImages = resetImages
      if resizeTexture is not None:   self.resizeTexture = resizeTexture
      if setLayer is not None:        self.setLayer = setLayer
      if updateTexture is not None:   self.updateTexture = updateTexture

   @property
   def fm(self): return FontManager(impl = IPTR(lib, ffi, self, FontRenderer).fm)
   @fm.setter
   def fm(self, value):
      if not isinstance(value, FontManager): value = FontManager(value)
      IPTR(lib, ffi, self, FontRenderer).fm = value.impl

   @property
   def drawManager(self): return None
   @drawManager.setter
   def drawManager(self, value):
      if not isinstance(value, DrawManager): value = DrawManager(value)
      lib.FontRenderer_set_drawManager(self.impl, value.impl)

   def setColor(self, color):
      if color is not None and not isinstance(color, ColorAlpha): color = ColorAlpha(color)
      if color is None: color = ffi.NULL
      lib.FontRenderer_setColor(self.impl, color)

   def setCursorColor(self, color):
      if color is not None and not isinstance(color, ColorAlpha): color = ColorAlpha(color)
      if color is None: color = ffi.NULL
      lib.FontRenderer_setCursorColor(self.impl, color)

   def setExtColor(self, color):
      if color is not None and not isinstance(color, ColorAlpha): color = ColorAlpha(color)
      if color is None: color = ffi.NULL
      lib.FontRenderer_setExtColor(self.impl, color)

class FontResource(Resource):
   def __init__(self,
                faceName = None,
                size = None,
                bold = None,
                italic = None,
                underline = None,
                window = None,
                outlineSize = None,
                outlineFade = None,
                impl = None):
      Resource.__init__(self, impl = impl)
      if faceName is not None:    self.faceName = faceName
      if size is not None:        self.size = size
      if bold is not None:        self.bold = bold
      if italic is not None:      self.italic = italic
      if underline is not None:   self.underline = underline
      if window is not None:      self.window = window
      if outlineSize is not None: self.outlineSize = outlineSize
      if outlineFade is not None: self.outlineFade = outlineFade

   @property
   def faceName(self): value = lib.FontResource_get_faceName(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @faceName.setter
   def faceName(self, value):
      lib.FontResource_set_faceName(self.impl, value.encode('utf8'))

   @property
   def size(self): return lib.FontResource_get_size(self.impl)
   @size.setter
   def size(self, value):
      lib.FontResource_set_size(self.impl, value)

   @property
   def bold(self): return lib.FontResource_get_bold(self.impl)
   @bold.setter
   def bold(self, value):
      lib.FontResource_set_bold(self.impl, value)

   @property
   def italic(self): return lib.FontResource_get_italic(self.impl)
   @italic.setter
   def italic(self, value):
      lib.FontResource_set_italic(self.impl, value)

   @property
   def underline(self): return lib.FontResource_get_underline(self.impl)
   @underline.setter
   def underline(self, value):
      lib.FontResource_set_underline(self.impl, value)

   @property
   def font(self): return lib.FontResource_get_font(self.impl, value.impl)

   @property
   def window(self): return None
   @window.setter
   def window(self, value):
      if not isinstance(value, Window): value = Window(value)
      lib.FontResource_set_window(self.impl, value.impl)

   @property
   def outlineSize(self): return lib.FontResource_get_outlineSize(self.impl)
   @outlineSize.setter
   def outlineSize(self, value):
      lib.FontResource_set_outlineSize(self.impl, value)

   @property
   def outlineFade(self): return lib.FontResource_get_outlineFade(self.impl)
   @outlineFade.setter
   def outlineFade(self, value):
      lib.FontResource_set_outlineFade(self.impl, value)

   @property
   def fmFont(self): return lib.FontResource_get_fmFont(self.impl, value.impl)

class GLCapabilities(pyBaseClass):
   def __init__(self, compatible = False, vertexBuffer = False, quads = False, intAndDouble = False, legacyFormats = False, nonPow2Textures = False, vertexPointer = False, legacy = False, shaders = False, fixedFunction = False, immediate = False, frameBuffer = False, pointSize = False, vao = False, select = False, debug = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(compatible, GLCapabilities):
         self.impl = compatible.impl
      else:
         self.impl = (
            (compatible      << lib.GLCAPABILITIES_compatible_SHIFT)      |
            (vertexBuffer    << lib.GLCAPABILITIES_vertexBuffer_SHIFT)    |
            (quads           << lib.GLCAPABILITIES_quads_SHIFT)           |
            (intAndDouble    << lib.GLCAPABILITIES_intAndDouble_SHIFT)    |
            (legacyFormats   << lib.GLCAPABILITIES_legacyFormats_SHIFT)   |
            (nonPow2Textures << lib.GLCAPABILITIES_nonPow2Textures_SHIFT) |
            (vertexPointer   << lib.GLCAPABILITIES_vertexPointer_SHIFT)   |
            (legacy          << lib.GLCAPABILITIES_legacy_SHIFT)          |
            (shaders         << lib.GLCAPABILITIES_shaders_SHIFT)         |
            (fixedFunction   << lib.GLCAPABILITIES_fixedFunction_SHIFT)   |
            (immediate       << lib.GLCAPABILITIES_immediate_SHIFT)       |
            (frameBuffer     << lib.GLCAPABILITIES_frameBuffer_SHIFT)     |
            (pointSize       << lib.GLCAPABILITIES_pointSize_SHIFT)       |
            (vao             << lib.GLCAPABILITIES_vao_SHIFT)             |
            (select          << lib.GLCAPABILITIES_select_SHIFT)          |
            (debug           << lib.GLCAPABILITIES_debug_SHIFT)           )

   @property
   def compatible(self): return ((((self.impl)) & lib.GLCAPABILITIES_compatible_MASK) >> lib.GLCAPABILITIES_compatible_SHIFT)
   @compatible.setter
   def compatible(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_compatible_MASK)) | (((value)) << lib.GLCAPABILITIES_compatible_SHIFT)

   @property
   def vertexBuffer(self): return ((((self.impl)) & lib.GLCAPABILITIES_vertexBuffer_MASK) >> lib.GLCAPABILITIES_vertexBuffer_SHIFT)
   @vertexBuffer.setter
   def vertexBuffer(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_vertexBuffer_MASK)) | (((value)) << lib.GLCAPABILITIES_vertexBuffer_SHIFT)

   @property
   def quads(self): return ((((self.impl)) & lib.GLCAPABILITIES_quads_MASK) >> lib.GLCAPABILITIES_quads_SHIFT)
   @quads.setter
   def quads(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_quads_MASK)) | (((value)) << lib.GLCAPABILITIES_quads_SHIFT)

   @property
   def intAndDouble(self): return ((((self.impl)) & lib.GLCAPABILITIES_intAndDouble_MASK) >> lib.GLCAPABILITIES_intAndDouble_SHIFT)
   @intAndDouble.setter
   def intAndDouble(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_intAndDouble_MASK)) | (((value)) << lib.GLCAPABILITIES_intAndDouble_SHIFT)

   @property
   def legacyFormats(self): return ((((self.impl)) & lib.GLCAPABILITIES_legacyFormats_MASK) >> lib.GLCAPABILITIES_legacyFormats_SHIFT)
   @legacyFormats.setter
   def legacyFormats(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_legacyFormats_MASK)) | (((value)) << lib.GLCAPABILITIES_legacyFormats_SHIFT)

   @property
   def nonPow2Textures(self): return ((((self.impl)) & lib.GLCAPABILITIES_nonPow2Textures_MASK) >> lib.GLCAPABILITIES_nonPow2Textures_SHIFT)
   @nonPow2Textures.setter
   def nonPow2Textures(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_nonPow2Textures_MASK)) | (((value)) << lib.GLCAPABILITIES_nonPow2Textures_SHIFT)

   @property
   def vertexPointer(self): return ((((self.impl)) & lib.GLCAPABILITIES_vertexPointer_MASK) >> lib.GLCAPABILITIES_vertexPointer_SHIFT)
   @vertexPointer.setter
   def vertexPointer(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_vertexPointer_MASK)) | (((value)) << lib.GLCAPABILITIES_vertexPointer_SHIFT)

   @property
   def legacy(self): return ((((self.impl)) & lib.GLCAPABILITIES_legacy_MASK) >> lib.GLCAPABILITIES_legacy_SHIFT)
   @legacy.setter
   def legacy(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_legacy_MASK)) | (((value)) << lib.GLCAPABILITIES_legacy_SHIFT)

   @property
   def shaders(self): return ((((self.impl)) & lib.GLCAPABILITIES_shaders_MASK) >> lib.GLCAPABILITIES_shaders_SHIFT)
   @shaders.setter
   def shaders(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_shaders_MASK)) | (((value)) << lib.GLCAPABILITIES_shaders_SHIFT)

   @property
   def fixedFunction(self): return ((((self.impl)) & lib.GLCAPABILITIES_fixedFunction_MASK) >> lib.GLCAPABILITIES_fixedFunction_SHIFT)
   @fixedFunction.setter
   def fixedFunction(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_fixedFunction_MASK)) | (((value)) << lib.GLCAPABILITIES_fixedFunction_SHIFT)

   @property
   def immediate(self): return ((((self.impl)) & lib.GLCAPABILITIES_immediate_MASK) >> lib.GLCAPABILITIES_immediate_SHIFT)
   @immediate.setter
   def immediate(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_immediate_MASK)) | (((value)) << lib.GLCAPABILITIES_immediate_SHIFT)

   @property
   def frameBuffer(self): return ((((self.impl)) & lib.GLCAPABILITIES_frameBuffer_MASK) >> lib.GLCAPABILITIES_frameBuffer_SHIFT)
   @frameBuffer.setter
   def frameBuffer(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_frameBuffer_MASK)) | (((value)) << lib.GLCAPABILITIES_frameBuffer_SHIFT)

   @property
   def pointSize(self): return ((((self.impl)) & lib.GLCAPABILITIES_pointSize_MASK) >> lib.GLCAPABILITIES_pointSize_SHIFT)
   @pointSize.setter
   def pointSize(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_pointSize_MASK)) | (((value)) << lib.GLCAPABILITIES_pointSize_SHIFT)

   @property
   def vao(self): return ((((self.impl)) & lib.GLCAPABILITIES_vao_MASK) >> lib.GLCAPABILITIES_vao_SHIFT)
   @vao.setter
   def vao(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_vao_MASK)) | (((value)) << lib.GLCAPABILITIES_vao_SHIFT)

   @property
   def select(self): return ((((self.impl)) & lib.GLCAPABILITIES_select_MASK) >> lib.GLCAPABILITIES_select_SHIFT)
   @select.setter
   def select(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_select_MASK)) | (((value)) << lib.GLCAPABILITIES_select_SHIFT)

   @property
   def debug(self): return ((((self.impl)) & lib.GLCAPABILITIES_debug_MASK) >> lib.GLCAPABILITIES_debug_SHIFT)
   @debug.setter
   def debug(self, value): self.value = ((self.impl) & ~(lib.GLCAPABILITIES_debug_MASK)) | (((value)) << lib.GLCAPABILITIES_debug_SHIFT)

class GradientDirection:
   vertical   = lib.GradientDirection_vertical
   horizontal = lib.GradientDirection_horizontal

class HitRecord:
   def __init__(self, prev = None, next = None, pos = None, numTags = None, center = None, tags = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("HitRecord *", lib.Instance_new(lib.class_HitRecord))
         if prev is not None:    self.prev    = prev
         if next is not None:    self.next    = next
         if pos is not None:     self.pos     = pos
         if numTags is not None: self.numTags = numTags
         if center is not None:  self.center  = center
         if tags is not None:    self.tags    = tags

   @property
   def prev(self): return self.impl.prev
   @prev.setter
   def prev(self, value):
      if not isinstance(value, HitRecord): value = HitRecord(value)
      self.impl.prev = value

   @property
   def next(self): return self.impl.next
   @next.setter
   def next(self, value):
      if not isinstance(value, HitRecord): value = HitRecord(value)
      self.impl.next = value

   @property
   def pos(self): return self.impl.pos
   @pos.setter
   def pos(self, value): self.impl.pos = value

   @property
   def numTags(self): return self.impl.numTags
   @numTags.setter
   def numTags(self, value): self.impl.numTags = value

   @property
   def center(self): return Vector3D(impl = self.impl.center)
   @center.setter
   def center(self, value):
      if not isinstance(value, Vector3D): value = Vector3D(value)
      self.impl.center = value.impl[0]

   @property
   def tags(self): return self.impl.tags
   @tags.setter
   def tags(self, value): self.impl.tags = value

   def compare(self, recordB, unused):
      if recordB is not None and not isinstance(recordB, HitRecord): recordB = HitRecord(recordB)
      if recordB is None: recordB = ffi.NULL
      return lib.HitRecord_compare(self.impl, recordB, unused)

class Light:
   def __init__(self, flags = None, ambient = None, diffuse = None, specular = None, direction = None, orientation = None, lightObject = None, target = None, fallOff = 0, hotSpot = 0, Kc = 0.0, Kl = 0.0, Kq = 0.0, start = 0, end = 0, multiplier = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("Light *", impl)
      else:
         if flags is not None:
            if not isinstance(flags, LightFlags): flags = LightFlags(flags)
            flags = flags.impl
         if ambient is not None:
            if not isinstance(ambient, ColorRGB): ambient = ColorRGB(ambient)
            ambient = ambient.impl
         if diffuse is not None:
            if not isinstance(diffuse, ColorRGB): diffuse = ColorRGB(diffuse)
            diffuse = diffuse.impl
         if specular is not None:
            if not isinstance(specular, ColorRGB): specular = ColorRGB(specular)
            specular = specular.impl
         if direction is not None:
            if not isinstance(direction, Vector3D): direction = Vector3D(direction)
            direction = direction.impl
         if orientation is not None:
            if not isinstance(orientation, Quaternion): orientation = Quaternion(orientation)
            orientation = orientation.impl
         if lightObject is not None:
            if not isinstance(lightObject, Object): lightObject = Object(lightObject)
            lightObject = lightObject.impl
         if target is not None:
            if not isinstance(target, Object): target = Object(target)
            target = target.impl
         if fallOff is not None:
            if not isinstance(fallOff, Angle): fallOff = Degrees(fallOff)
            fallOff = fallOff.impl
         if hotSpot is not None:
            if not isinstance(hotSpot, Angle): hotSpot = Degrees(hotSpot)
            hotSpot = hotSpot.impl
         if start is not None:
            if not isinstance(start, Angle): start = Degrees(start)
            start = start.impl
         if end is not None:
            if not isinstance(end, Angle): end = Degrees(end)
            end = end.impl
         self.impl = ffi.new("Light *", { 'flags' : flags, 'ambient' : ambient, 'diffuse' : diffuse, 'specular' : specular, 'direction' : direction, 'orientation' : orientation, 'lightObject' : lightObject, 'target' : target, 'fallOff' : fallOff, 'hotSpot' : hotSpot, 'Kc' : Kc, 'Kl' : Kl, 'Kq' : Kq, 'start' : start, 'end' : end, 'multiplier' : multiplier })

   @property
   def flags(self): return LightFlags(impl = self.impl.flags)
   @flags.setter
   def flags(self, value):
      if not isinstance(value, LightFlags): value = LightFlags(value)
      self.impl.flags = value.impl

   @property
   def ambient(self): return ColorRGB(impl = self.impl.ambient)
   @ambient.setter
   def ambient(self, value):
      if not isinstance(value, ColorRGB): value = ColorRGB(value)
      self.impl.ambient = value.impl[0]

   @property
   def diffuse(self): return ColorRGB(impl = self.impl.diffuse)
   @diffuse.setter
   def diffuse(self, value):
      if not isinstance(value, ColorRGB): value = ColorRGB(value)
      self.impl.diffuse = value.impl[0]

   @property
   def specular(self): return ColorRGB(impl = self.impl.specular)
   @specular.setter
   def specular(self, value):
      if not isinstance(value, ColorRGB): value = ColorRGB(value)
      self.impl.specular = value.impl[0]

   @property
   def direction(self): return Vector3D(impl = self.impl.direction)
   @direction.setter
   def direction(self, value):
      if not isinstance(value, Vector3D): value = Vector3D(value)
      self.impl.direction = value.impl[0]

   @property
   def orientation(self): return Quaternion(impl = self.impl.orientation)
   @orientation.setter
   def orientation(self, value):
      if not isinstance(value, Quaternion): value = Quaternion(value)
      self.impl.orientation = value.impl[0]

   @property
   def lightObject(self): return self.impl.lightObject
   @lightObject.setter
   def lightObject(self, value):
      if not isinstance(value, Object): value = Object(value)
      self.impl.lightObject = value

   @property
   def target(self): return self.impl.target
   @target.setter
   def target(self, value):
      if not isinstance(value, Object): value = Object(value)
      self.impl.target = value

   @property
   def fallOff(self): return Degrees(impl = self.impl.fallOff)
   @fallOff.setter
   def fallOff(self, value):
      if not isinstance(value, Angle): value = Degrees(value)
      self.impl.fallOff = value.impl

   @property
   def hotSpot(self): return Degrees(impl = self.impl.hotSpot)
   @hotSpot.setter
   def hotSpot(self, value):
      if not isinstance(value, Angle): value = Degrees(value)
      self.impl.hotSpot = value.impl

   @property
   def Kc(self): return self.impl.Kc
   @Kc.setter
   def Kc(self, value): self.impl.Kc = value

   @property
   def Kl(self): return self.impl.Kl
   @Kl.setter
   def Kl(self, value): self.impl.Kl = value

   @property
   def Kq(self): return self.impl.Kq
   @Kq.setter
   def Kq(self, value): self.impl.Kq = value

   @property
   def start(self): return Degrees(impl = self.impl.start)
   @start.setter
   def start(self, value):
      if not isinstance(value, Angle): value = Degrees(value)
      self.impl.start = value.impl

   @property
   def end(self): return Degrees(impl = self.impl.end)
   @end.setter
   def end(self, value):
      if not isinstance(value, Angle): value = Degrees(value)
      self.impl.end = value.impl

   @property
   def multiplier(self): return self.impl.multiplier
   @multiplier.setter
   def multiplier(self, value): self.impl.multiplier = value

class LightFlags(pyBaseClass):
   def __init__(self, off = False, spot = False, omni = False, attenuation = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(off, LightFlags):
         self.impl = off.impl
      else:
         if isinstance(off, tuple):
            __tuple = off
            off = False
            if len(__tuple) > 0: off = __tuple[0]
            if len(__tuple) > 1: spot = __tuple[1]
            if len(__tuple) > 2: omni = __tuple[2]
            if len(__tuple) > 3: attenuation = __tuple[3]
         self.impl = (
            (off         << lib.LIGHTFLAGS_off_SHIFT)         |
            (spot        << lib.LIGHTFLAGS_spot_SHIFT)        |
            (omni        << lib.LIGHTFLAGS_omni_SHIFT)        |
            (attenuation << lib.LIGHTFLAGS_attenuation_SHIFT) )

   @property
   def off(self): return ((((self.impl)) & lib.LIGHTFLAGS_off_MASK) >> lib.LIGHTFLAGS_off_SHIFT)
   @off.setter
   def off(self, value): self.value = ((self.impl) & ~(lib.LIGHTFLAGS_off_MASK)) | (((value)) << lib.LIGHTFLAGS_off_SHIFT)

   @property
   def spot(self): return ((((self.impl)) & lib.LIGHTFLAGS_spot_MASK) >> lib.LIGHTFLAGS_spot_SHIFT)
   @spot.setter
   def spot(self, value): self.value = ((self.impl) & ~(lib.LIGHTFLAGS_spot_MASK)) | (((value)) << lib.LIGHTFLAGS_spot_SHIFT)

   @property
   def omni(self): return ((((self.impl)) & lib.LIGHTFLAGS_omni_MASK) >> lib.LIGHTFLAGS_omni_SHIFT)
   @omni.setter
   def omni(self, value): self.value = ((self.impl) & ~(lib.LIGHTFLAGS_omni_MASK)) | (((value)) << lib.LIGHTFLAGS_omni_SHIFT)

   @property
   def attenuation(self): return ((((self.impl)) & lib.LIGHTFLAGS_attenuation_MASK) >> lib.LIGHTFLAGS_attenuation_SHIFT)
   @attenuation.setter
   def attenuation(self, value): self.value = ((self.impl) & ~(lib.LIGHTFLAGS_attenuation_MASK)) | (((value)) << lib.LIGHTFLAGS_attenuation_SHIFT)

class PixelFormat:
   pixelFormat4     = lib.PixelFormat_pixelFormat4
   pixelFormat8     = lib.PixelFormat_pixelFormat8
   pixelFormat444   = lib.PixelFormat_pixelFormat444
   pixelFormat555   = lib.PixelFormat_pixelFormat555
   pixelFormat565   = lib.PixelFormat_pixelFormat565
   pixelFormat888   = lib.PixelFormat_pixelFormat888
   pixelFormatAlpha = lib.PixelFormat_pixelFormatAlpha
   pixelFormatText  = lib.PixelFormat_pixelFormatText
   pixelFormatRGBA  = lib.PixelFormat_pixelFormatRGBA

class RenderState:
   fillMode   = lib.RenderState_fillMode
   depthTest  = lib.RenderState_depthTest
   depthWrite = lib.RenderState_depthWrite
   fogDensity = lib.RenderState_fogDensity
   fogColor   = lib.RenderState_fogColor
   blend      = lib.RenderState_blend
   ambient    = lib.RenderState_ambient
   alphaWrite = lib.RenderState_alphaWrite
   antiAlias  = lib.RenderState_antiAlias
   vSync      = lib.RenderState_vSync

class RenderStateFloat:
   def __init__(self, f = None, ui = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("RenderStateFloat *", impl)
      else:
         if isinstance(f, tuple):
            __tuple = f
            f = 0.0
            if len(__tuple) > 0: f  = __tuple[0]
         __members = { }
         if f is not None:  __members['f']  = f
         if ui is not None: __members['ui'] = ui
         self.impl = ffi.new("RenderStateFloat *", __members)

   @property
   def f(self): return self.impl.f
   @f.setter
   def f(self, value): self.impl.f = value

   @property
   def ui(self): return self.impl.ui
   @ui.setter
   def ui(self, value): self.impl.ui = value

class Resolution:
   resText80x25 = lib.Resolution_resText80x25
   res320x200   = lib.Resolution_res320x200
   res320x240   = lib.Resolution_res320x240
   res320x400   = lib.Resolution_res320x400
   res360x480   = lib.Resolution_res360x480
   res400x256   = lib.Resolution_res400x256
   res400x300   = lib.Resolution_res400x300
   res512x256   = lib.Resolution_res512x256
   res512x384   = lib.Resolution_res512x384
   res640x200   = lib.Resolution_res640x200
   res640x350   = lib.Resolution_res640x350
   res640x400   = lib.Resolution_res640x400
   res640x480   = lib.Resolution_res640x480
   res720x348   = lib.Resolution_res720x348
   res800x600   = lib.Resolution_res800x600
   res856x480   = lib.Resolution_res856x480
   res960x720   = lib.Resolution_res960x720
   res1024x768  = lib.Resolution_res1024x768
   res1152x864  = lib.Resolution_res1152x864
   res1280x1024 = lib.Resolution_res1280x1024
   res1600x1200 = lib.Resolution_res1600x1200
   res768x480   = lib.Resolution_res768x480

class Surface(Instance):
   def __init__(self,
                width = None,
                height = None,
                offset = None,
                box = None,
                unclippedBox = None,
                driverData = None,
                alphaWrite = None,
                blend = None,
                outlineColor = None,
                foreground = None,
                background = None,
                blitTint = None,
                lineStipple = None,
                font = None,
                textOpacity = None,
                drawingChar = None,
                clipping = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if width is not None:        self.width = width
      if height is not None:       self.height = height
      if offset is not None:       self.offset = offset
      if box is not None:          self.box = box
      if unclippedBox is not None: self.unclippedBox = unclippedBox
      if driverData is not None:   self.driverData = driverData
      if alphaWrite is not None:   self.alphaWrite = alphaWrite
      if blend is not None:        self.blend = blend
      if outlineColor is not None: self.outlineColor = outlineColor
      if foreground is not None:   self.foreground = foreground
      if background is not None:   self.background = background
      if blitTint is not None:     self.blitTint = blitTint
      if lineStipple is not None:  self.lineStipple = lineStipple
      if font is not None:         self.font = font
      if textOpacity is not None:  self.textOpacity = textOpacity
      if drawingChar is not None:  self.drawingChar = drawingChar
      if clipping is not None:     self.clipping = clipping

   @property
   def width(self): return IPTR(lib, ffi, self, Surface).width
   @width.setter
   def width(self, value): IPTR(lib, ffi, self, Surface).width = value

   @property
   def height(self): return IPTR(lib, ffi, self, Surface).height
   @height.setter
   def height(self, value): IPTR(lib, ffi, self, Surface).height = value

   @property
   def offset(self): return Point(impl = IPTR(lib, ffi, self, Surface).offset)
   @offset.setter
   def offset(self, value):
      if not isinstance(value, Point): value = Point(value)
      IPTR(lib, ffi, self, Surface).offset = value.impl

   @property
   def box(self): return Box(impl = IPTR(lib, ffi, self, Surface).box)
   @box.setter
   def box(self, value):
      if not isinstance(value, Box): value = Box(value)
      IPTR(lib, ffi, self, Surface).box = value.impl

   @property
   def unclippedBox(self): return Box(impl = IPTR(lib, ffi, self, Surface).unclippedBox)
   @unclippedBox.setter
   def unclippedBox(self, value):
      if not isinstance(value, Box): value = Box(value)
      IPTR(lib, ffi, self, Surface).unclippedBox = value.impl

   @property
   def driverData(self): return IPTR(lib, ffi, self, Surface).driverData
   @driverData.setter
   def driverData(self, value): IPTR(lib, ffi, self, Surface).driverData = value

   @property
   def alphaWrite(self): return lib.Surface_get_alphaWrite(self.impl, value)
   @alphaWrite.setter
   def alphaWrite(self, value):
      lib.Surface_set_alphaWrite(self.impl, value)

   @property
   def blend(self): return lib.Surface_get_blend(self.impl)
   @blend.setter
   def blend(self, value):
      lib.Surface_set_blend(self.impl, value)

   @property
   def bitmap(self): return pyOrNewObject(Bitmap, lib.Surface_get_bitmap(self.impl))

   @property
   def outlineColor(self): return ColorAlpha(impl = lib.Surface_get_outlineColor(self.impl))
   @outlineColor.setter
   def outlineColor(self, value):
      if not isinstance(value, ColorAlpha): value = ColorAlpha(value)
      lib.Surface_set_outlineColor(self.impl, value.impl)

   @property
   def foreground(self): return ColorAlpha(impl = lib.Surface_get_foreground(self.impl))
   @foreground.setter
   def foreground(self, value):
      if not isinstance(value, ColorAlpha): value = ColorAlpha(value)
      lib.Surface_set_foreground(self.impl, value.impl)

   @property
   def background(self): return ColorAlpha(impl = lib.Surface_get_background(self.impl))
   @background.setter
   def background(self, value):
      if not isinstance(value, ColorAlpha): value = ColorAlpha(value)
      lib.Surface_set_background(self.impl, value.impl)

   @property
   def blitTint(self): return ColorAlpha(impl = lib.Surface_get_blitTint(self.impl))
   @blitTint.setter
   def blitTint(self, value):
      if not isinstance(value, ColorAlpha): value = ColorAlpha(value)
      lib.Surface_set_blitTint(self.impl, value.impl)

   @property
   def lineStipple(self): return None
   @lineStipple.setter
   def lineStipple(self, value):
      lib.Surface_set_lineStipple(self.impl, value)

   @property
   def size(self): value = Size(); lib.Surface_get_size(self.impl, ffi.cast("Size *", value.impl)); return value

   @property
   def display(self): return pyOrNewObject(Display, lib.Surface_get_display(self.impl))

   @property
   def font(self): return lib.Surface_get_font(self.impl, value.impl)
   @font.setter
   def font(self, value):
      if not isinstance(value, Font): value = Font(value)
      lib.Surface_set_font(self.impl, value.impl)

   @property
   def textOpacity(self): return lib.Surface_get_textOpacity(self.impl)
   @textOpacity.setter
   def textOpacity(self, value):
      lib.Surface_set_textOpacity(self.impl, value)

   @property
   def drawingChar(self): return None
   @drawingChar.setter
   def drawingChar(self, value):
      lib.Surface_set_drawingChar(self.impl, value)

   @property
   def clipping(self): return None
   @clipping.setter
   def clipping(self, value):
      if not isinstance(value, Box): value = Box(value)
      lib.Surface_set_clipping(self.impl, ffi.cast("Box *", value.impl))

   def area(self, x1, y1, x2, y2):
      lib.Surface_area(self.impl, x1, y1, x2, y2)

   def bevel(self, inner, x, y, w, h):
      lib.Surface_bevel(self.impl, inner, x, y, w, h)

   def blit(self, src, dx, dy, sx, sy, w, h):
      if src is not None and not isinstance(src, Bitmap): src = Bitmap(src)
      if src is None: src = ffi.NULL
      lib.Surface_blit(self.impl, src, dx, dy, sx, sy, w, h)

   def centerTextf(self, x, y, format):
      lib.Surface_centerTextf(self.impl, x, y, format.encode('utf8'))

   def clear(self, type):
      lib.Surface_clear(self.impl, type)

   def clip(self, box):
      if box is not None and not isinstance(box, Box): box = Box(box)
      box = ffi.NULL if box is None else box.impl
      lib.Surface_clip(self.impl, ffi.cast("Box *", box))

   def drawLine(self, x1, y1, x2, y2):
      lib.Surface_drawLine(self.impl, x1, y1, x2, y2)

   def drawingChar(self, value):
      lib.Surface_drawingChar(self.impl, value)

   def filter(self, src, dx, dy, sx, sy, w, h, sw, sh):
      if src is not None and not isinstance(src, Bitmap): src = Bitmap(src)
      if src is None: src = ffi.NULL
      lib.Surface_filter(self.impl, src, dx, dy, sx, sy, w, h, sw, sh)

   def filterHTile(self, src, dx, dy, w, h):
      if src is not None and not isinstance(src, Bitmap): src = Bitmap(src)
      if src is None: src = ffi.NULL
      lib.Surface_filterHTile(self.impl, src, dx, dy, w, h)

   def filterVTile(self, src, dx, dy, w, h):
      if src is not None and not isinstance(src, Bitmap): src = Bitmap(src)
      if src is None: src = ffi.NULL
      lib.Surface_filterVTile(self.impl, src, dx, dy, w, h)

   def getBackground(self):
      return lib.Surface_getBackground(self.impl)

   def getBox(self, value):
      if value is not None and not isinstance(value, Box): value = Box(value)
      value = ffi.NULL if value is None else value.impl
      lib.Surface_getBox(self.impl, ffi.cast("Box *", value))

   def getDisplay(self):
      return pyOrNewObject(Display, lib.Surface_getDisplay(self.impl))

   def getFont(self):
      return pyOrNewObject(Font, lib.Surface_getFont(self.impl))

   def getForeground(self):
      return lib.Surface_getForeground(self.impl)

   def getPixel(self, x, y):
      return lib.Surface_getPixel(self.impl, x, y)

   def getSize(self):
      w = ffi.new("int *")
      h = ffi.new("int *")
      lib.Surface_getSize(self.impl, w, h)
      return w[0], h[0]

   def getTextOpacity(self):
      return lib.Surface_getTextOpacity(self.impl)

   def gradient(self, keys, numKeys, smoothness, direction, x1, y1, x2, y2):
      lib.Surface_gradient(self.impl, keys, numKeys, smoothness, direction, x1, y1, x2, y2)

   def hLine(self, x1, x2, y):
      lib.Surface_hLine(self.impl, x1, x2, y)

   def hTile(self, src, dx, dy, w, h):
      if src is not None and not isinstance(src, Bitmap): src = Bitmap(src)
      if src is None: src = ffi.NULL
      lib.Surface_hTile(self.impl, src, dx, dy, w, h)

   def lineStipple(self, value):
      lib.Surface_lineStipple(self.impl, value)

   def putPixel(self, x, y):
      lib.Surface_putPixel(self.impl, x, y)

   def rectangle(self, x1, y1, x2, y2):
      lib.Surface_rectangle(self.impl, x1, y1, x2, y2)

   def setBackground(self, value):
      if value is not None and not isinstance(value, ColorAlpha): value = ColorAlpha(value)
      if value is None: value = ffi.NULL
      lib.Surface_setBackground(self.impl, value)

   def setForeground(self, value):
      if value is not None and not isinstance(value, ColorAlpha): value = ColorAlpha(value)
      if value is None: value = ffi.NULL
      lib.Surface_setForeground(self.impl, value)

   def stretch(self, src, dx, dy, sx, sy, w, h, sw, sh):
      if src is not None and not isinstance(src, Bitmap): src = Bitmap(src)
      if src is None: src = ffi.NULL
      lib.Surface_stretch(self.impl, src, dx, dy, sx, sy, w, h, sw, sh)

   def textExtent(self, text, len):
      width = ffi.new("int *")
      height = ffi.new("int *")
      lib.Surface_textExtent(self.impl, text.encode('utf8'), len, width, height)
      return width[0], height[0]

   def textExtent2(self, text, len, prevGlyph):
      width = ffi.new("int *")
      height = ffi.new("int *")
      rPrevGlyph = ffi.new("int *")
      overHang = ffi.new("int *")
      lib.Surface_textExtent2(self.impl, text.encode('utf8'), len, width, height, prevGlyph, rPrevGlyph, overHang)
      return width[0], height[0], rPrevGlyph[0], overHang[0]

   def textFont(self, value):
      if value is not None and not isinstance(value, Font): value = Font(value)
      if value is None: value = ffi.NULL
      lib.Surface_textFont(self.impl, value)

   def textOpacity(self, value):
      lib.Surface_textOpacity(self.impl, value)

   def thinBevel(self, inner, x, y, w, h):
      lib.Surface_thinBevel(self.impl, inner, x, y, w, h)

   def tile(self, src, dx, dy, w, h):
      if src is not None and not isinstance(src, Bitmap): src = Bitmap(src)
      if src is None: src = ffi.NULL
      lib.Surface_tile(self.impl, src, dx, dy, w, h)

   def vLine(self, y1, y2, x):
      lib.Surface_vLine(self.impl, y1, y2, x)

   def vTile(self, src, dx, dy, w, h):
      if src is not None and not isinstance(src, Bitmap): src = Bitmap(src)
      if src is None: src = ffi.NULL
      lib.Surface_vTile(self.impl, src, dx, dy, w, h)

   def writeText(self, x, y, text, len):
      lib.Surface_writeText(self.impl, x, y, text.encode('utf8'), len)

   def writeText2(self, x, y, text, len, prevGlyph):
      rPrevGlyph = ffi.new("int *")
      lib.Surface_writeText2(self.impl, x, y, text.encode('utf8'), len, prevGlyph, rPrevGlyph)
      return FixTypeNameIssue(impl = rPrevGlyph)


   def writeTextDots(self, alignment, x, y, width, text, len):
      lib.Surface_writeTextDots(self.impl, alignment, x, y, width, text.encode('utf8'), len)

   def writeTextDotsf(self, alignment, x, y, width, format):
      lib.Surface_writeTextDotsf(self.impl, alignment, x, y, width, format.encode('utf8'))

   def writeTextf(self, x, y, format):
      lib.Surface_writeTextf(self.impl, x, y, format.encode('utf8'))

class SystemColor(Color):
   formColor           = Color(impl = lib.SystemColor_formColor)
   activeBorder        = Color(impl = lib.SystemColor_activeBorder)
   control             = Color(impl = lib.SystemColor_control)
   controlLight        = Color(impl = lib.SystemColor_controlLight)
   inactiveBorder      = Color(impl = lib.SystemColor_inactiveBorder)
   inactiveCaptionText = Color(impl = lib.SystemColor_inactiveCaptionText)
   menu                = Color(impl = lib.SystemColor_menu)
   scrollBar           = Color(impl = lib.SystemColor_scrollBar)
def bestColorMatch(palette, start, end, rgb): lib.bestColorMatch(palette, start, end, rgb)
def getColorDepthShifts(format): lib.getColorDepthShifts(format)
def getDefaultMaterial(): lib.getDefaultMaterial()
def getDefaultPalette(): lib.getDefaultPalette()
def getDepthBits(colorDepth): lib.getDepthBits(colorDepth)
def getResolutionHeight(resolution): lib.getResolutionHeight(resolution)
def getResolutionWidth(resolution): lib.getResolutionWidth(resolution)
def listAvailableFonts(): lib.listAvailableFonts()
def loadPalette(fileName, type): lib.loadPalette(fileName, type)
def paletteGradient(palette, numColors, keys, numKeys, smoothness): lib.paletteGradient(palette, numColors, keys, numKeys, smoothness)
def resolveCharFont(faceName, size, flags, lang, testChar): lib.resolveCharFont(ffi.NULL if faceName is None else faceName.impl, size, flags, ffi.NULL if lang is None else lang.impl, testChar)
def resolveFont(faceName, size, flags): lib.resolveFont(ffi.NULL if faceName is None else faceName.impl, size, flags)
def setPrintingDocumentName(name): lib.setPrintingDocumentName(ffi.NULL if name is None else name.impl)

@ffi.callback("void(Shader, int)")
def cb_Shader_bindAttribs(__s, program):
   shader = pyOrNewObject(Shader, __s)
   shader.fn_Shader_bindAttribs(shader, program)

@ffi.callback("void(Shader, uint64)")
def cb_Shader_getDefinitions(__s, state):
   shader = pyOrNewObject(Shader, __s)
   shader.fn_Shader_getDefinitions(shader, state)

@ffi.callback("void(Shader, int, uint64)")
def cb_Shader_registerShader(__s, program, state):
   shader = pyOrNewObject(Shader, __s)
   shader.fn_Shader_registerShader(shader, program, state)

@ffi.callback("void(Shader, Material *, MeshFeatures)")
def cb_Shader_setMaterial(__s, material, flags):
   shader = pyOrNewObject(Shader, __s)
   shader.fn_Shader_setMaterial(shader, Material(impl = material), MeshFeatures(impl = flags))

@ffi.callback("void(Shader, MatrixMode, Matrix *, bool)")
def cb_Shader_updateMatrix(__s, mode, matrix, isIdentity):
   shader = pyOrNewObject(Shader, __s)
   shader.fn_Shader_updateMatrix(shader, MatrixMode(impl = mode), Matrix(impl = matrix), isIdentity)

@ffi.callback("void(Shader, CompiledShader *)")
def cb_Shader_uploadUniforms(__s, shader):
   shader = pyOrNewObject(Shader, __s)
   shader.fn_Shader_uploadUniforms(shader, CompiledShader(impl = shader))

class Shader(Instance):
   def __init__(self,
                vertexShaderFile = None,
                fragmentShaderFile = None,
                vertexShader = None,
                fragmentShader = None,
                state = None,
                uniformsModified = None,
                bindAttribs = None,
                getDefinitions = None,
                registerShader = None,
                setMaterial = None,
                updateMatrix = None,
                uploadUniforms = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if vertexShaderFile is not None:   self.vertexShaderFile = vertexShaderFile
      if fragmentShaderFile is not None: self.fragmentShaderFile = fragmentShaderFile
      if vertexShader is not None:       self.vertexShader = vertexShader
      if fragmentShader is not None:     self.fragmentShader = fragmentShader
      if state is not None:              self.state = state
      if uniformsModified is not None:   self.uniformsModified = uniformsModified
      if bindAttribs is not None:        self.bindAttribs = bindAttribs
      if getDefinitions is not None:     self.getDefinitions = getDefinitions
      if registerShader is not None:     self.registerShader = registerShader
      if setMaterial is not None:        self.setMaterial = setMaterial
      if updateMatrix is not None:       self.updateMatrix = updateMatrix
      if uploadUniforms is not None:     self.uploadUniforms = uploadUniforms

   @property
   def vertexShaderFile(self): return None
   @vertexShaderFile.setter
   def vertexShaderFile(self, value):
      if not isinstance(value, String): value = String(value)
      lib.Shader_set_vertexShaderFile(self.impl, value.impl.encode('utf8'))

   @property
   def fragmentShaderFile(self): return None
   @fragmentShaderFile.setter
   def fragmentShaderFile(self, value):
      if not isinstance(value, String): value = String(value)
      lib.Shader_set_fragmentShaderFile(self.impl, value.impl.encode('utf8'))

   @property
   def vertexShader(self): return None
   @vertexShader.setter
   def vertexShader(self, value):
      if not isinstance(value, String): value = String(value)
      lib.Shader_set_vertexShader(self.impl, value.impl.encode('utf8'))

   @property
   def fragmentShader(self): return None
   @fragmentShader.setter
   def fragmentShader(self, value):
      if not isinstance(value, String): value = String(value)
      lib.Shader_set_fragmentShader(self.impl, value.impl.encode('utf8'))

   @property
   def state(self): return IPTR(lib, ffi, self, Shader).state
   @state.setter
   def state(self, value): IPTR(lib, ffi, self, Shader).state = value

   @property
   def uniformsModified(self): return IPTR(lib, ffi, self, Shader).uniformsModified
   @uniformsModified.setter
   def uniformsModified(self, value): IPTR(lib, ffi, self, Shader).uniformsModified = value

   def activate(self):
      return lib.Shader_activate(self.impl)

   def fn_unset_Shader_bindAttribs(self, program):
      return lib.Shader_bindAttribs(self.impl, program)

   @property
   def bindAttribs(self):
      if hasattr(self, 'fn_Shader_bindAttribs'): return self.fn_Shader_bindAttribs
      else: return self.fn_unset_Shader_bindAttribs
   @bindAttribs.setter
   def bindAttribs(self, value):
      self.fn_Shader_bindAttribs = value
      lib.Instance_setMethod(self.impl, "bindAttribs".encode('utf8'), cb_Shader_bindAttribs)

   def free(self):
      lib.Shader_free(self.impl)

   def fn_unset_Shader_getDefinitions(self, state):
      return lib.Shader_getDefinitions(self.impl, state)

   @property
   def getDefinitions(self):
      if hasattr(self, 'fn_Shader_getDefinitions'): return self.fn_Shader_getDefinitions
      else: return self.fn_unset_Shader_getDefinitions
   @getDefinitions.setter
   def getDefinitions(self, value):
      self.fn_Shader_getDefinitions = value
      lib.Instance_setMethod(self.impl, "getDefinitions".encode('utf8'), cb_Shader_getDefinitions)

   def load(self, state):
      return pyOrNewObject(CompiledShader, lib.Shader_load(self.impl, state))

   def fn_unset_Shader_registerShader(self, program, state):
      return lib.Shader_registerShader(self.impl, program, state)

   @property
   def registerShader(self):
      if hasattr(self, 'fn_Shader_registerShader'): return self.fn_Shader_registerShader
      else: return self.fn_unset_Shader_registerShader
   @registerShader.setter
   def registerShader(self, value):
      self.fn_Shader_registerShader = value
      lib.Instance_setMethod(self.impl, "registerShader".encode('utf8'), cb_Shader_registerShader)

   def select(self):
      lib.Shader_select(self.impl)

   def fn_unset_Shader_setMaterial(self, material, flags):
      return lib.Shader_setMaterial(self.impl, ffi.NULL if material is None else material.impl, flags)

   @property
   def setMaterial(self):
      if hasattr(self, 'fn_Shader_setMaterial'): return self.fn_Shader_setMaterial
      else: return self.fn_unset_Shader_setMaterial
   @setMaterial.setter
   def setMaterial(self, value):
      self.fn_Shader_setMaterial = value
      lib.Instance_setMethod(self.impl, "setMaterial".encode('utf8'), cb_Shader_setMaterial)

   def fn_unset_Shader_updateMatrix(self, mode, matrix, isIdentity):
      return lib.Shader_updateMatrix(self.impl, mode, ffi.NULL if matrix is None else matrix.impl, isIdentity)

   @property
   def updateMatrix(self):
      if hasattr(self, 'fn_Shader_updateMatrix'): return self.fn_Shader_updateMatrix
      else: return self.fn_unset_Shader_updateMatrix
   @updateMatrix.setter
   def updateMatrix(self, value):
      self.fn_Shader_updateMatrix = value
      lib.Instance_setMethod(self.impl, "updateMatrix".encode('utf8'), cb_Shader_updateMatrix)

   def fn_unset_Shader_uploadUniforms(self, shader):
      return lib.Shader_uploadUniforms(self.impl, ffi.NULL if shader is None else shader.impl)

   @property
   def uploadUniforms(self):
      if hasattr(self, 'fn_Shader_uploadUniforms'): return self.fn_Shader_uploadUniforms
      else: return self.fn_unset_Shader_uploadUniforms
   @uploadUniforms.setter
   def uploadUniforms(self, value):
      self.fn_Shader_uploadUniforms = value
      lib.Instance_setMethod(self.impl, "uploadUniforms".encode('utf8'), cb_Shader_uploadUniforms)

class GLEAB:
   def __init__(self, buffer = 0, impl = None):
      if impl is not None:
         self.impl = ffi.new("GLEAB *", impl)
      else:
         self.impl = ffi.new("GLEAB *", { 'buffer' : buffer })

   @property
   def buffer(self): return self.impl.buffer
   @buffer.setter
   def buffer(self, value): self.impl.buffer = value

   def allocate(self, size, data, usage):
      lib.GLEAB_allocate(ffi.cast("GLEAB *", self.impl), size, data, usage)

   def draw(self, primType, count, type, indices):
      lib.GLEAB_draw(ffi.cast("GLEAB *", self.impl), primType, count, type, indices)

   def free(self):
      lib.GLEAB_free(ffi.cast("GLEAB *", self.impl))

   def upload(self, offset, size, data):
      lib.GLEAB_upload(ffi.cast("GLEAB *", self.impl), offset, size, data)

class GLAB:
   def __init__(self, buffer = 0, impl = None):
      if impl is not None:
         self.impl = ffi.new("GLAB *", impl)
      else:
         self.impl = ffi.new("GLAB *", { 'buffer' : buffer })

   @property
   def buffer(self): return self.impl.buffer
   @buffer.setter
   def buffer(self, value): self.impl.buffer = value

   def allocate(self, size, data, usage):
      lib.GLAB_allocate(ffi.cast("GLAB *", self.impl), size, data, usage)

   def deleteBuffers(self, count, buffers):
      lib.GLAB_deleteBuffers(ffi.cast("GLAB *", self.impl), count, buffers)

   def free(self):
      lib.GLAB_free(ffi.cast("GLAB *", self.impl))

   def upload(self, offset, size, data):
      lib.GLAB_upload(ffi.cast("GLAB *", self.impl), offset, size, data)

   def use(self, contents, n, type, stride, pointer):
      lib.GLAB_use(ffi.cast("GLAB *", self.impl), contents, n, type, stride, pointer)

   def useVertTrans(self, count, n, type, stride, pointer):
      lib.GLAB_useVertTrans(ffi.cast("GLAB *", self.impl), count, n, type, stride, pointer)

class CompiledShader:
   def __init__(self, program = None, vertex = None, fragment = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("CompiledShader *", lib.Instance_new(lib.class_CompiledShader))
         if program is not None:  self.program  = program
         if vertex is not None:   self.vertex   = vertex
         if fragment is not None: self.fragment = fragment

   @property
   def program(self): return self.impl.program
   @program.setter
   def program(self, value): self.impl.program = value

   @property
   def vertex(self): return self.impl.vertex
   @vertex.setter
   def vertex(self, value): self.impl.vertex = value

   @property
   def fragment(self): return self.impl.fragment
   @fragment.setter
   def fragment(self, value): self.impl.fragment = value

   def free(self):
      lib.CompiledShader_free(self.impl)

noAB = GLAB ( 0 )

noEAB = GLEAB ( 0 )

class CompiledDefaultShader(CompiledShader):
   def __init__(self,
                program = None,
                vertex = None,
                fragment = None,
                uPrjMatrix = None,
                uMVMatrix = None,
                uTextureMatrix = None,
                uNormalsMatrix = None,
                uFogDensity = None,
                uFogColor = None,
                uGlobalAmbient = None,
                uNearPlane = None,
                uLightsPos = None,
                uLightsDiffuse = None,
                uLightsAmbient = None,
                uLightsSpecular = None,
                uLightsAtt = None,
                uLightsSpotDir = None,
                uLightsSpotCutOffCos = None,
                uLightsSpotExp = None,
                uMatDiffuse = None,
                uMatAmbient = None,
                uMatSpecular = None,
                uMatEmissive = None,
                uMatPower = None,
                uMatOpacity = None,
                uDiffuseTex = None,
                uBumpTex = None,
                uSpecularTex = None,
                uEnvTex = None,
                uReflectTex = None,
                uRefractionETA = None,
                uMatReflectivity = None,
                uCubeMapMatrix = None,
                impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("CompiledDefaultShader *", lib.Instance_new(lib.class_CompiledDefaultShader))
         if program is not None:              self.program              = program
         if vertex is not None:               self.vertex               = vertex
         if fragment is not None:             self.fragment             = fragment
         if uPrjMatrix is not None:           self.uPrjMatrix           = uPrjMatrix
         if uMVMatrix is not None:            self.uMVMatrix            = uMVMatrix
         if uTextureMatrix is not None:       self.uTextureMatrix       = uTextureMatrix
         if uNormalsMatrix is not None:       self.uNormalsMatrix       = uNormalsMatrix
         if uFogDensity is not None:          self.uFogDensity          = uFogDensity
         if uFogColor is not None:            self.uFogColor            = uFogColor
         if uGlobalAmbient is not None:       self.uGlobalAmbient       = uGlobalAmbient
         if uNearPlane is not None:           self.uNearPlane           = uNearPlane
         if uLightsPos is not None:           self.uLightsPos           = uLightsPos
         if uLightsDiffuse is not None:       self.uLightsDiffuse       = uLightsDiffuse
         if uLightsAmbient is not None:       self.uLightsAmbient       = uLightsAmbient
         if uLightsSpecular is not None:      self.uLightsSpecular      = uLightsSpecular
         if uLightsAtt is not None:           self.uLightsAtt           = uLightsAtt
         if uLightsSpotDir is not None:       self.uLightsSpotDir       = uLightsSpotDir
         if uLightsSpotCutOffCos is not None: self.uLightsSpotCutOffCos = uLightsSpotCutOffCos
         if uLightsSpotExp is not None:       self.uLightsSpotExp       = uLightsSpotExp
         if uMatDiffuse is not None:          self.uMatDiffuse          = uMatDiffuse
         if uMatAmbient is not None:          self.uMatAmbient          = uMatAmbient
         if uMatSpecular is not None:         self.uMatSpecular         = uMatSpecular
         if uMatEmissive is not None:         self.uMatEmissive         = uMatEmissive
         if uMatPower is not None:            self.uMatPower            = uMatPower
         if uMatOpacity is not None:          self.uMatOpacity          = uMatOpacity
         if uDiffuseTex is not None:          self.uDiffuseTex          = uDiffuseTex
         if uBumpTex is not None:             self.uBumpTex             = uBumpTex
         if uSpecularTex is not None:         self.uSpecularTex         = uSpecularTex
         if uEnvTex is not None:              self.uEnvTex              = uEnvTex
         if uReflectTex is not None:          self.uReflectTex          = uReflectTex
         if uRefractionETA is not None:       self.uRefractionETA       = uRefractionETA
         if uMatReflectivity is not None:     self.uMatReflectivity     = uMatReflectivity
         if uCubeMapMatrix is not None:       self.uCubeMapMatrix       = uCubeMapMatrix

   @property
   def program(self): return self.impl.program
   @program.setter
   def program(self, value): self.impl.program = value

   @property
   def vertex(self): return self.impl.vertex
   @vertex.setter
   def vertex(self, value): self.impl.vertex = value

   @property
   def fragment(self): return self.impl.fragment
   @fragment.setter
   def fragment(self, value): self.impl.fragment = value

   @property
   def uPrjMatrix(self): return self.impl.uPrjMatrix
   @uPrjMatrix.setter
   def uPrjMatrix(self, value): self.impl.uPrjMatrix = value

   @property
   def uMVMatrix(self): return self.impl.uMVMatrix
   @uMVMatrix.setter
   def uMVMatrix(self, value): self.impl.uMVMatrix = value

   @property
   def uTextureMatrix(self): return self.impl.uTextureMatrix
   @uTextureMatrix.setter
   def uTextureMatrix(self, value): self.impl.uTextureMatrix = value

   @property
   def uNormalsMatrix(self): return self.impl.uNormalsMatrix
   @uNormalsMatrix.setter
   def uNormalsMatrix(self, value): self.impl.uNormalsMatrix = value

   @property
   def uFogDensity(self): return self.impl.uFogDensity
   @uFogDensity.setter
   def uFogDensity(self, value): self.impl.uFogDensity = value

   @property
   def uFogColor(self): return self.impl.uFogColor
   @uFogColor.setter
   def uFogColor(self, value): self.impl.uFogColor = value

   @property
   def uGlobalAmbient(self): return self.impl.uGlobalAmbient
   @uGlobalAmbient.setter
   def uGlobalAmbient(self, value): self.impl.uGlobalAmbient = value

   @property
   def uNearPlane(self): return self.impl.uNearPlane
   @uNearPlane.setter
   def uNearPlane(self, value): self.impl.uNearPlane = value

   @property
   def uLightsPos(self): return self.impl.uLightsPos
   @uLightsPos.setter
   def uLightsPos(self, value): self.impl.uLightsPos = value

   @property
   def uLightsDiffuse(self): return self.impl.uLightsDiffuse
   @uLightsDiffuse.setter
   def uLightsDiffuse(self, value): self.impl.uLightsDiffuse = value

   @property
   def uLightsAmbient(self): return self.impl.uLightsAmbient
   @uLightsAmbient.setter
   def uLightsAmbient(self, value): self.impl.uLightsAmbient = value

   @property
   def uLightsSpecular(self): return self.impl.uLightsSpecular
   @uLightsSpecular.setter
   def uLightsSpecular(self, value): self.impl.uLightsSpecular = value

   @property
   def uLightsAtt(self): return self.impl.uLightsAtt
   @uLightsAtt.setter
   def uLightsAtt(self, value): self.impl.uLightsAtt = value

   @property
   def uLightsSpotDir(self): return self.impl.uLightsSpotDir
   @uLightsSpotDir.setter
   def uLightsSpotDir(self, value): self.impl.uLightsSpotDir = value

   @property
   def uLightsSpotCutOffCos(self): return self.impl.uLightsSpotCutOffCos
   @uLightsSpotCutOffCos.setter
   def uLightsSpotCutOffCos(self, value): self.impl.uLightsSpotCutOffCos = value

   @property
   def uLightsSpotExp(self): return self.impl.uLightsSpotExp
   @uLightsSpotExp.setter
   def uLightsSpotExp(self, value): self.impl.uLightsSpotExp = value

   @property
   def uMatDiffuse(self): return self.impl.uMatDiffuse
   @uMatDiffuse.setter
   def uMatDiffuse(self, value): self.impl.uMatDiffuse = value

   @property
   def uMatAmbient(self): return self.impl.uMatAmbient
   @uMatAmbient.setter
   def uMatAmbient(self, value): self.impl.uMatAmbient = value

   @property
   def uMatSpecular(self): return self.impl.uMatSpecular
   @uMatSpecular.setter
   def uMatSpecular(self, value): self.impl.uMatSpecular = value

   @property
   def uMatEmissive(self): return self.impl.uMatEmissive
   @uMatEmissive.setter
   def uMatEmissive(self, value): self.impl.uMatEmissive = value

   @property
   def uMatPower(self): return self.impl.uMatPower
   @uMatPower.setter
   def uMatPower(self, value): self.impl.uMatPower = value

   @property
   def uMatOpacity(self): return self.impl.uMatOpacity
   @uMatOpacity.setter
   def uMatOpacity(self, value): self.impl.uMatOpacity = value

   @property
   def uDiffuseTex(self): return self.impl.uDiffuseTex
   @uDiffuseTex.setter
   def uDiffuseTex(self, value): self.impl.uDiffuseTex = value

   @property
   def uBumpTex(self): return self.impl.uBumpTex
   @uBumpTex.setter
   def uBumpTex(self, value): self.impl.uBumpTex = value

   @property
   def uSpecularTex(self): return self.impl.uSpecularTex
   @uSpecularTex.setter
   def uSpecularTex(self, value): self.impl.uSpecularTex = value

   @property
   def uEnvTex(self): return self.impl.uEnvTex
   @uEnvTex.setter
   def uEnvTex(self, value): self.impl.uEnvTex = value

   @property
   def uReflectTex(self): return self.impl.uReflectTex
   @uReflectTex.setter
   def uReflectTex(self, value): self.impl.uReflectTex = value

   @property
   def uRefractionETA(self): return self.impl.uRefractionETA
   @uRefractionETA.setter
   def uRefractionETA(self, value): self.impl.uRefractionETA = value

   @property
   def uMatReflectivity(self): return self.impl.uMatReflectivity
   @uMatReflectivity.setter
   def uMatReflectivity(self, value): self.impl.uMatReflectivity = value

   @property
   def uCubeMapMatrix(self): return self.impl.uCubeMapMatrix
   @uCubeMapMatrix.setter
   def uCubeMapMatrix(self, value): self.impl.uCubeMapMatrix = value

   def registerUniforms(self, program, state):
      if state is not None and not isinstance(state, DefaultShaderBits): state = DefaultShaderBits(state)
      if state is None: state = ffi.NULL
      lib.CompiledDefaultShader_registerUniforms(self.impl, program, state)

class DefaultShader(Shader):
   def __init__(self,
                vertexShaderFile = None,
                fragmentShaderFile = None,
                vertexShader = None,
                fragmentShader = None,
                state = None,
                uniformsModified = None,
                modelView = None,
                projection = None,
                matTexture = None,
                cubemap_matrix = None,
                normalsMatrix = None,
                nearPlane = None,
                globalAmbient = None,
                lDiffuse = None,
                lAmbient = None,
                lSpecular = None,
                lPosition = None,
                lAtt = None,
                lCutOffCos = None,
                lSpotDir = None,
                lSpotExp = None,
                diffuse = None,
                ambient = None,
                specular = None,
                emissive = None,
                power = None,
                refractionETA = None,
                reflectivity = None,
                fogOn = None,
                lightBits = None,
                fogDensity = None,
                fogColor = None,
                color = None,
                backLightState = None,
                bindAttribs = None,
                getDefinitions = None,
                registerShader = None,
                setMaterial = None,
                updateMatrix = None,
                uploadUniforms = None,
                impl = None):
      Shader.__init__(self, impl = impl)
      if vertexShaderFile is not None:   self.vertexShaderFile = vertexShaderFile
      if fragmentShaderFile is not None: self.fragmentShaderFile = fragmentShaderFile
      if vertexShader is not None:       self.vertexShader = vertexShader
      if fragmentShader is not None:     self.fragmentShader = fragmentShader
      if state is not None:              self.state = state
      if uniformsModified is not None:   self.uniformsModified = uniformsModified
      if modelView is not None:          self.modelView = modelView
      if projection is not None:         self.projection = projection
      if matTexture is not None:         self.matTexture = matTexture
      if cubemap_matrix is not None:     self.cubemap_matrix = cubemap_matrix
      if normalsMatrix is not None:      self.normalsMatrix = normalsMatrix
      if nearPlane is not None:          self.nearPlane = nearPlane
      if globalAmbient is not None:      self.globalAmbient = globalAmbient
      if lDiffuse is not None:           self.lDiffuse = lDiffuse
      if lAmbient is not None:           self.lAmbient = lAmbient
      if lSpecular is not None:          self.lSpecular = lSpecular
      if lPosition is not None:          self.lPosition = lPosition
      if lAtt is not None:               self.lAtt = lAtt
      if lCutOffCos is not None:         self.lCutOffCos = lCutOffCos
      if lSpotDir is not None:           self.lSpotDir = lSpotDir
      if lSpotExp is not None:           self.lSpotExp = lSpotExp
      if diffuse is not None:            self.diffuse = diffuse
      if ambient is not None:            self.ambient = ambient
      if specular is not None:           self.specular = specular
      if emissive is not None:           self.emissive = emissive
      if power is not None:              self.power = power
      if refractionETA is not None:      self.refractionETA = refractionETA
      if reflectivity is not None:       self.reflectivity = reflectivity
      if fogOn is not None:              self.fogOn = fogOn
      if lightBits is not None:          self.lightBits = lightBits
      if fogDensity is not None:         self.fogDensity = fogDensity
      if fogColor is not None:           self.fogColor = fogColor
      if color is not None:              self.color = color
      if backLightState is not None:     self.backLightState = backLightState
      if bindAttribs is not None:        self.bindAttribs = bindAttribs
      if getDefinitions is not None:     self.getDefinitions = getDefinitions
      if registerShader is not None:     self.registerShader = registerShader
      if setMaterial is not None:        self.setMaterial = setMaterial
      if updateMatrix is not None:       self.updateMatrix = updateMatrix
      if uploadUniforms is not None:     self.uploadUniforms = uploadUniforms

   @property
   def state(self): return IPTR(lib, ffi, self, DefaultShader).state
   @state.setter
   def state(self, value): IPTR(lib, ffi, self, DefaultShader).state = value

   @property
   def uniformsModified(self): return IPTR(lib, ffi, self, DefaultShader).uniformsModified
   @uniformsModified.setter
   def uniformsModified(self, value): IPTR(lib, ffi, self, DefaultShader).uniformsModified = value

   @property
   def modelView(self): return IPTR(lib, ffi, self, DefaultShader).modelView
   @modelView.setter
   def modelView(self, value): IPTR(lib, ffi, self, DefaultShader).modelView = value

   @property
   def projection(self): return IPTR(lib, ffi, self, DefaultShader).projection
   @projection.setter
   def projection(self, value): IPTR(lib, ffi, self, DefaultShader).projection = value

   @property
   def matTexture(self): return IPTR(lib, ffi, self, DefaultShader).matTexture
   @matTexture.setter
   def matTexture(self, value): IPTR(lib, ffi, self, DefaultShader).matTexture = value

   @property
   def cubemap_matrix(self): return IPTR(lib, ffi, self, DefaultShader).cubemap_matrix
   @cubemap_matrix.setter
   def cubemap_matrix(self, value): IPTR(lib, ffi, self, DefaultShader).cubemap_matrix = value

   @property
   def normalsMatrix(self): return IPTR(lib, ffi, self, DefaultShader).normalsMatrix
   @normalsMatrix.setter
   def normalsMatrix(self, value): IPTR(lib, ffi, self, DefaultShader).normalsMatrix = value

   @property
   def nearPlane(self): return IPTR(lib, ffi, self, DefaultShader).nearPlane
   @nearPlane.setter
   def nearPlane(self, value): IPTR(lib, ffi, self, DefaultShader).nearPlane = value

   @property
   def globalAmbient(self): return IPTR(lib, ffi, self, DefaultShader).globalAmbient
   @globalAmbient.setter
   def globalAmbient(self, value): IPTR(lib, ffi, self, DefaultShader).globalAmbient = value

   @property
   def lDiffuse(self): return IPTR(lib, ffi, self, DefaultShader).lDiffuse
   @lDiffuse.setter
   def lDiffuse(self, value): IPTR(lib, ffi, self, DefaultShader).lDiffuse = value

   @property
   def lAmbient(self): return IPTR(lib, ffi, self, DefaultShader).lAmbient
   @lAmbient.setter
   def lAmbient(self, value): IPTR(lib, ffi, self, DefaultShader).lAmbient = value

   @property
   def lSpecular(self): return IPTR(lib, ffi, self, DefaultShader).lSpecular
   @lSpecular.setter
   def lSpecular(self, value): IPTR(lib, ffi, self, DefaultShader).lSpecular = value

   @property
   def lPosition(self): return IPTR(lib, ffi, self, DefaultShader).lPosition
   @lPosition.setter
   def lPosition(self, value): IPTR(lib, ffi, self, DefaultShader).lPosition = value

   @property
   def lAtt(self): return IPTR(lib, ffi, self, DefaultShader).lAtt
   @lAtt.setter
   def lAtt(self, value): IPTR(lib, ffi, self, DefaultShader).lAtt = value

   @property
   def lCutOffCos(self): return IPTR(lib, ffi, self, DefaultShader).lCutOffCos
   @lCutOffCos.setter
   def lCutOffCos(self, value): IPTR(lib, ffi, self, DefaultShader).lCutOffCos = value

   @property
   def lSpotDir(self): return IPTR(lib, ffi, self, DefaultShader).lSpotDir
   @lSpotDir.setter
   def lSpotDir(self, value): IPTR(lib, ffi, self, DefaultShader).lSpotDir = value

   @property
   def lSpotExp(self): return IPTR(lib, ffi, self, DefaultShader).lSpotExp
   @lSpotExp.setter
   def lSpotExp(self, value): IPTR(lib, ffi, self, DefaultShader).lSpotExp = value

   @property
   def diffuse(self): return IPTR(lib, ffi, self, DefaultShader).diffuse
   @diffuse.setter
   def diffuse(self, value): IPTR(lib, ffi, self, DefaultShader).diffuse = value

   @property
   def ambient(self): return IPTR(lib, ffi, self, DefaultShader).ambient
   @ambient.setter
   def ambient(self, value): IPTR(lib, ffi, self, DefaultShader).ambient = value

   @property
   def specular(self): return IPTR(lib, ffi, self, DefaultShader).specular
   @specular.setter
   def specular(self, value): IPTR(lib, ffi, self, DefaultShader).specular = value

   @property
   def emissive(self): return IPTR(lib, ffi, self, DefaultShader).emissive
   @emissive.setter
   def emissive(self, value): IPTR(lib, ffi, self, DefaultShader).emissive = value

   @property
   def power(self): return IPTR(lib, ffi, self, DefaultShader).power
   @power.setter
   def power(self, value): IPTR(lib, ffi, self, DefaultShader).power = value

   @property
   def refractionETA(self): return IPTR(lib, ffi, self, DefaultShader).refractionETA
   @refractionETA.setter
   def refractionETA(self, value): IPTR(lib, ffi, self, DefaultShader).refractionETA = value

   @property
   def reflectivity(self): return IPTR(lib, ffi, self, DefaultShader).reflectivity
   @reflectivity.setter
   def reflectivity(self, value): IPTR(lib, ffi, self, DefaultShader).reflectivity = value

   @property
   def fogOn(self): return IPTR(lib, ffi, self, DefaultShader).fogOn
   @fogOn.setter
   def fogOn(self, value): IPTR(lib, ffi, self, DefaultShader).fogOn = value

   @property
   def lightBits(self): return IPTR(lib, ffi, self, DefaultShader).lightBits
   @lightBits.setter
   def lightBits(self, value): IPTR(lib, ffi, self, DefaultShader).lightBits = value

   @property
   def fogDensity(self): return IPTR(lib, ffi, self, DefaultShader).fogDensity
   @fogDensity.setter
   def fogDensity(self, value): IPTR(lib, ffi, self, DefaultShader).fogDensity = value

   @property
   def fogColor(self): return IPTR(lib, ffi, self, DefaultShader).fogColor
   @fogColor.setter
   def fogColor(self, value): IPTR(lib, ffi, self, DefaultShader).fogColor = value

   @property
   def color(self): return IPTR(lib, ffi, self, DefaultShader).color
   @color.setter
   def color(self, value): IPTR(lib, ffi, self, DefaultShader).color = value

   @property
   def backLightState(self): return DefaultShaderBits(impl = IPTR(lib, ffi, self, DefaultShader).backLightState)
   @backLightState.setter
   def backLightState(self, value):
      if not isinstance(value, DefaultShaderBits): value = DefaultShaderBits(value)
      IPTR(lib, ffi, self, DefaultShader).backLightState = value.impl

   def debugging(self, on):
      lib.DefaultShader_debugging(self.impl, on)

   def fog(self, on):
      lib.DefaultShader_fog(self.impl, on)

   def lighting(self, on):
      lib.DefaultShader_lighting(self.impl, on)

   def setCamera(self, camera):
      if camera is not None and not isinstance(camera, Camera): camera = Camera(camera)
      if camera is None: camera = ffi.NULL
      lib.DefaultShader_setCamera(self.impl, camera)

   def setColor(self, r, g, b, a):
      lib.DefaultShader_setColor(self.impl, r, g, b, a)

   def setFogColor(self, r, g, b):
      lib.DefaultShader_setFogColor(self.impl, r, g, b)

   def setFogDensity(self, density):
      lib.DefaultShader_setFogDensity(self.impl, density)

   def setGlobalAmbient(self, r, g, b, a):
      lib.DefaultShader_setGlobalAmbient(self.impl, r, g, b, a)

   def setLight(self, display, id, light):
      if display is not None and not isinstance(display, Display): display = Display(display)
      if display is None: display = ffi.NULL
      if light is not None and not isinstance(light, Light): light = Light(light)
      light = ffi.NULL if light is None else light.impl
      lib.DefaultShader_setLight(self.impl, display, id, ffi.cast("Light *", light))

   def setPerVertexColor(self, perVertexColor):
      lib.DefaultShader_setPerVertexColor(self.impl, perVertexColor)

   def setSimpleMaterial(self, color, twoSided):
      if color is not None and not isinstance(color, ColorAlpha): color = ColorAlpha(color)
      if color is None: color = ffi.NULL
      lib.DefaultShader_setSimpleMaterial(self.impl, color, twoSided)

   def shader(self):
      return pyOrNewObject(DefaultShader, lib.DefaultShader_shader(self.impl))

   def swizzle(self, swizzle):
      lib.DefaultShader_swizzle(self.impl, swizzle)

   def texturing(self, on):
      lib.DefaultShader_texturing(self.impl, on)

class DefaultShaderBits(pyBaseClass):
   def __init__(self, lighting = False, nonLocalViewer = False, twoSided = False, specular = False, separateSpecular = False, blinnSpecular = False, lightBits = 0, perVertexColor = False, swizzle = 0, textureMatrix = False, texturing = False, cubeMap = False, modelView = False, fog = False, normalsMapping = False, specularMapping = False, environmentMapping = False, reflection = False, reflectionMap = False, refraction = False, debugging = False,
                impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(lighting, DefaultShaderBits):
         self.impl = lighting.impl
      else:
         self.impl = (
            (lighting           << lib.DEFAULTSHADERBITS_lighting_SHIFT)           |
            (nonLocalViewer     << lib.DEFAULTSHADERBITS_nonLocalViewer_SHIFT)     |
            (twoSided           << lib.DEFAULTSHADERBITS_twoSided_SHIFT)           |
            (specular           << lib.DEFAULTSHADERBITS_specular_SHIFT)           |
            (separateSpecular   << lib.DEFAULTSHADERBITS_separateSpecular_SHIFT)   |
            (blinnSpecular      << lib.DEFAULTSHADERBITS_blinnSpecular_SHIFT)      |
            (lightBits          << lib.DEFAULTSHADERBITS_lightBits_SHIFT)          |
            (perVertexColor     << lib.DEFAULTSHADERBITS_perVertexColor_SHIFT)     |
            (swizzle            << lib.DEFAULTSHADERBITS_swizzle_SHIFT)            |
            (textureMatrix      << lib.DEFAULTSHADERBITS_textureMatrix_SHIFT)      |
            (texturing          << lib.DEFAULTSHADERBITS_texturing_SHIFT)          |
            (cubeMap            << lib.DEFAULTSHADERBITS_cubeMap_SHIFT)            |
            (modelView          << lib.DEFAULTSHADERBITS_modelView_SHIFT)          |
            (fog                << lib.DEFAULTSHADERBITS_fog_SHIFT)                |
            (normalsMapping     << lib.DEFAULTSHADERBITS_normalsMapping_SHIFT)     |
            (specularMapping    << lib.DEFAULTSHADERBITS_specularMapping_SHIFT)    |
            (environmentMapping << lib.DEFAULTSHADERBITS_environmentMapping_SHIFT) |
            (reflection         << lib.DEFAULTSHADERBITS_reflection_SHIFT)         |
            (reflectionMap      << lib.DEFAULTSHADERBITS_reflectionMap_SHIFT)      |
            (refraction         << lib.DEFAULTSHADERBITS_refraction_SHIFT)         |
            (debugging          << lib.DEFAULTSHADERBITS_debugging_SHIFT)          )

   @property
   def lighting(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_lighting_MASK) >> lib.DEFAULTSHADERBITS_lighting_SHIFT)
   @lighting.setter
   def lighting(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_lighting_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_lighting_SHIFT)

   @property
   def nonLocalViewer(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_nonLocalViewer_MASK) >> lib.DEFAULTSHADERBITS_nonLocalViewer_SHIFT)
   @nonLocalViewer.setter
   def nonLocalViewer(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_nonLocalViewer_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_nonLocalViewer_SHIFT)

   @property
   def twoSided(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_twoSided_MASK) >> lib.DEFAULTSHADERBITS_twoSided_SHIFT)
   @twoSided.setter
   def twoSided(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_twoSided_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_twoSided_SHIFT)

   @property
   def specular(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_specular_MASK) >> lib.DEFAULTSHADERBITS_specular_SHIFT)
   @specular.setter
   def specular(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_specular_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_specular_SHIFT)

   @property
   def separateSpecular(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_separateSpecular_MASK) >> lib.DEFAULTSHADERBITS_separateSpecular_SHIFT)
   @separateSpecular.setter
   def separateSpecular(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_separateSpecular_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_separateSpecular_SHIFT)

   @property
   def blinnSpecular(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_blinnSpecular_MASK) >> lib.DEFAULTSHADERBITS_blinnSpecular_SHIFT)
   @blinnSpecular.setter
   def blinnSpecular(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_blinnSpecular_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_blinnSpecular_SHIFT)

   @property
   def lightBits(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_lightBits_MASK) >> lib.DEFAULTSHADERBITS_lightBits_SHIFT)
   @lightBits.setter
   def lightBits(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_lightBits_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_lightBits_SHIFT)

   @property
   def perVertexColor(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_perVertexColor_MASK) >> lib.DEFAULTSHADERBITS_perVertexColor_SHIFT)
   @perVertexColor.setter
   def perVertexColor(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_perVertexColor_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_perVertexColor_SHIFT)

   @property
   def swizzle(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_swizzle_MASK) >> lib.DEFAULTSHADERBITS_swizzle_SHIFT)
   @swizzle.setter
   def swizzle(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_swizzle_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_swizzle_SHIFT)

   @property
   def textureMatrix(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_textureMatrix_MASK) >> lib.DEFAULTSHADERBITS_textureMatrix_SHIFT)
   @textureMatrix.setter
   def textureMatrix(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_textureMatrix_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_textureMatrix_SHIFT)

   @property
   def texturing(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_texturing_MASK) >> lib.DEFAULTSHADERBITS_texturing_SHIFT)
   @texturing.setter
   def texturing(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_texturing_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_texturing_SHIFT)

   @property
   def cubeMap(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_cubeMap_MASK) >> lib.DEFAULTSHADERBITS_cubeMap_SHIFT)
   @cubeMap.setter
   def cubeMap(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_cubeMap_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_cubeMap_SHIFT)

   @property
   def modelView(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_modelView_MASK) >> lib.DEFAULTSHADERBITS_modelView_SHIFT)
   @modelView.setter
   def modelView(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_modelView_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_modelView_SHIFT)

   @property
   def fog(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_fog_MASK) >> lib.DEFAULTSHADERBITS_fog_SHIFT)
   @fog.setter
   def fog(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_fog_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_fog_SHIFT)

   @property
   def normalsMapping(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_normalsMapping_MASK) >> lib.DEFAULTSHADERBITS_normalsMapping_SHIFT)
   @normalsMapping.setter
   def normalsMapping(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_normalsMapping_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_normalsMapping_SHIFT)

   @property
   def specularMapping(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_specularMapping_MASK) >> lib.DEFAULTSHADERBITS_specularMapping_SHIFT)
   @specularMapping.setter
   def specularMapping(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_specularMapping_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_specularMapping_SHIFT)

   @property
   def environmentMapping(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_environmentMapping_MASK) >> lib.DEFAULTSHADERBITS_environmentMapping_SHIFT)
   @environmentMapping.setter
   def environmentMapping(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_environmentMapping_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_environmentMapping_SHIFT)

   @property
   def reflection(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_reflection_MASK) >> lib.DEFAULTSHADERBITS_reflection_SHIFT)
   @reflection.setter
   def reflection(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_reflection_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_reflection_SHIFT)

   @property
   def reflectionMap(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_reflectionMap_MASK) >> lib.DEFAULTSHADERBITS_reflectionMap_SHIFT)
   @reflectionMap.setter
   def reflectionMap(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_reflectionMap_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_reflectionMap_SHIFT)

   @property
   def refraction(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_refraction_MASK) >> lib.DEFAULTSHADERBITS_refraction_SHIFT)
   @refraction.setter
   def refraction(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_refraction_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_refraction_SHIFT)

   @property
   def debugging(self): return ((((self.impl)) & lib.DEFAULTSHADERBITS_debugging_MASK) >> lib.DEFAULTSHADERBITS_debugging_SHIFT)
   @debugging.setter
   def debugging(self, value): self.value = ((self.impl) & ~(lib.DEFAULTSHADERBITS_debugging_MASK)) | (((value)) << lib.DEFAULTSHADERBITS_debugging_SHIFT)

class GLBufferContents:
   vertex      = lib.GLBufferContents_vertex
   normal      = lib.GLBufferContents_normal
   texCoord    = lib.GLBufferContents_texCoord
   color       = lib.GLBufferContents_color
   tangent1    = lib.GLBufferContents_tangent1
   tangent2    = lib.GLBufferContents_tangent2
   lightVector = lib.GLBufferContents_lightVector

class GLBufferUsage:
   staticDraw  = lib.GLBufferUsage_staticDraw
   dynamicDraw = lib.GLBufferUsage_dynamicDraw
   streamDraw  = lib.GLBufferUsage_streamDraw

class GLIMTKMode:
   unset         = lib.GLIMTKMode_unset
   points        = lib.GLIMTKMode_points
   lines         = lib.GLIMTKMode_lines
   lineLoop      = lib.GLIMTKMode_lineLoop
   lineStrip     = lib.GLIMTKMode_lineStrip
   triangles     = lib.GLIMTKMode_triangles
   triangleStrip = lib.GLIMTKMode_triangleStrip
   triangleFan   = lib.GLIMTKMode_triangleFan
   quads         = lib.GLIMTKMode_quads
   quadStrip     = lib.GLIMTKMode_quadStrip
   polygon       = lib.GLIMTKMode_polygon

class GLMSWhatToGet:
   modelViewMatrix  = lib.GLMSWhatToGet_modelViewMatrix
   projectionMatrix = lib.GLMSWhatToGet_projectionMatrix
   textureMatrix    = lib.GLMSWhatToGet_textureMatrix

class LFBDisplay:
   def __init__(self, bitmap = None, rgbLookup = None, lightTable = None, updateBoxes = None, x = None, y = None, selfManaged = None, displayCallback = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("LFBDisplay *", lib.Instance_new(lib.class_LFBDisplay))
         if bitmap is not None:          self.bitmap          = bitmap
         if rgbLookup is not None:       self.rgbLookup       = rgbLookup
         if lightTable is not None:      self.lightTable      = lightTable
         if updateBoxes is not None:     self.updateBoxes     = updateBoxes
         if x is not None:               self.x               = x
         if y is not None:               self.y               = y
         if selfManaged is not None:     self.selfManaged     = selfManaged
         if displayCallback is not None: self.displayCallback = displayCallback

   @property
   def bitmap(self): return pyOrNewObject(Bitmap, self.impl.bitmap)
   @bitmap.setter
   def bitmap(self, value):
      if not isinstance(value, Bitmap): value = Bitmap(value)
      self.impl.bitmap = value

   @property
   def rgbLookup(self): return self.impl.rgbLookup
   @rgbLookup.setter
   def rgbLookup(self, value): self.impl.rgbLookup = value

   @property
   def lightTable(self): return self.impl.lightTable
   @lightTable.setter
   def lightTable(self, value): self.impl.lightTable = value

   @property
   def updateBoxes(self): return OldList(impl = self.impl.updateBoxes)
   @updateBoxes.setter
   def updateBoxes(self, value):
      if not isinstance(value, OldList): value = OldList(value)
      self.impl.updateBoxes = value.impl[0]

   @property
   def x(self): return self.impl.x
   @x.setter
   def x(self, value): self.impl.x = value

   @property
   def y(self): return self.impl.y
   @y.setter
   def y(self, value): self.impl.y = value

   @property
   def selfManaged(self): return self.impl.selfManaged
   @selfManaged.setter
   def selfManaged(self, value): self.impl.selfManaged = value

   @property
   def displayCallback(self): return self.impl.displayCallback
   @displayCallback.setter
   def displayCallback(self, value): self.impl.displayCallback = value

class LFBDisplayDriver(DisplayDriver):
   def __init__(self,
                allocateBitmap = None,
                allocateIndices = None,
                allocateMesh = None,
                applyMaterial = None,
                area = None,
                blit = None,
                blitDI = None,
                clear = None,
                clip = None,
                convertBitmap = None,
                createDisplay = None,
                createDisplaySystem = None,
                destroyDisplay = None,
                destroyDisplaySystem = None,
                displayPosition = None,
                displaySize = None,
                drawLine = None,
                drawPrimitives = None,
                drawingChar = None,
                endUpdate = None,
                filter = None,
                filterDI = None,
                fontExtent = None,
                freeBitmap = None,
                freeIndices = None,
                freeMesh = None,
                getBitmapSurface = None,
                getPixel = None,
                getSurface = None,
                grabScreen = None,
                lineStipple = None,
                loadFont = None,
                lock = None,
                lockIndices = None,
                lockMesh = None,
                lockSystem = None,
                makeDDBitmap = None,
                nextPage = None,
                popMatrix = None,
                pushMatrix = None,
                putPixel = None,
                rectangle = None,
                releaseSurface = None,
                restorePalette = None,
                scroll = None,
                selectMesh = None,
                setBackground = None,
                setBlitTint = None,
                setCamera = None,
                setForeground = None,
                setLight = None,
                setPalette = None,
                setRenderState = None,
                setTransform = None,
                startUpdate = None,
                stretch = None,
                stretchDI = None,
                textExtent = None,
                textFont = None,
                textOpacity = None,
                unloadFont = None,
                unlock = None,
                unlockIndices = None,
                unlockMesh = None,
                unlockSystem = None,
                update = None,
                writeText = None,
                impl = None):
      DisplayDriver.__init__(self, impl = impl)
      if allocateBitmap is not None:       self.allocateBitmap = allocateBitmap
      if allocateIndices is not None:      self.allocateIndices = allocateIndices
      if allocateMesh is not None:         self.allocateMesh = allocateMesh
      if applyMaterial is not None:        self.applyMaterial = applyMaterial
      if area is not None:                 self.area = area
      if blit is not None:                 self.blit = blit
      if blitDI is not None:               self.blitDI = blitDI
      if clear is not None:                self.clear = clear
      if clip is not None:                 self.clip = clip
      if convertBitmap is not None:        self.convertBitmap = convertBitmap
      if createDisplay is not None:        self.createDisplay = createDisplay
      if createDisplaySystem is not None:  self.createDisplaySystem = createDisplaySystem
      if destroyDisplay is not None:       self.destroyDisplay = destroyDisplay
      if destroyDisplaySystem is not None: self.destroyDisplaySystem = destroyDisplaySystem
      if displayPosition is not None:      self.displayPosition = displayPosition
      if displaySize is not None:          self.displaySize = displaySize
      if drawLine is not None:             self.drawLine = drawLine
      if drawPrimitives is not None:       self.drawPrimitives = drawPrimitives
      if drawingChar is not None:          self.drawingChar = drawingChar
      if endUpdate is not None:            self.endUpdate = endUpdate
      if filter is not None:               self.filter = filter
      if filterDI is not None:             self.filterDI = filterDI
      if fontExtent is not None:           self.fontExtent = fontExtent
      if freeBitmap is not None:           self.freeBitmap = freeBitmap
      if freeIndices is not None:          self.freeIndices = freeIndices
      if freeMesh is not None:             self.freeMesh = freeMesh
      if getBitmapSurface is not None:     self.getBitmapSurface = getBitmapSurface
      if getPixel is not None:             self.getPixel = getPixel
      if getSurface is not None:           self.getSurface = getSurface
      if grabScreen is not None:           self.grabScreen = grabScreen
      if lineStipple is not None:          self.lineStipple = lineStipple
      if loadFont is not None:             self.loadFont = loadFont
      if lock is not None:                 self.lock = lock
      if lockIndices is not None:          self.lockIndices = lockIndices
      if lockMesh is not None:             self.lockMesh = lockMesh
      if lockSystem is not None:           self.lockSystem = lockSystem
      if makeDDBitmap is not None:         self.makeDDBitmap = makeDDBitmap
      if nextPage is not None:             self.nextPage = nextPage
      if popMatrix is not None:            self.popMatrix = popMatrix
      if pushMatrix is not None:           self.pushMatrix = pushMatrix
      if putPixel is not None:             self.putPixel = putPixel
      if rectangle is not None:            self.rectangle = rectangle
      if releaseSurface is not None:       self.releaseSurface = releaseSurface
      if restorePalette is not None:       self.restorePalette = restorePalette
      if scroll is not None:               self.scroll = scroll
      if selectMesh is not None:           self.selectMesh = selectMesh
      if setBackground is not None:        self.setBackground = setBackground
      if setBlitTint is not None:          self.setBlitTint = setBlitTint
      if setCamera is not None:            self.setCamera = setCamera
      if setForeground is not None:        self.setForeground = setForeground
      if setLight is not None:             self.setLight = setLight
      if setPalette is not None:           self.setPalette = setPalette
      if setRenderState is not None:       self.setRenderState = setRenderState
      if setTransform is not None:         self.setTransform = setTransform
      if startUpdate is not None:          self.startUpdate = startUpdate
      if stretch is not None:              self.stretch = stretch
      if stretchDI is not None:            self.stretchDI = stretchDI
      if textExtent is not None:           self.textExtent = textExtent
      if textFont is not None:             self.textFont = textFont
      if textOpacity is not None:          self.textOpacity = textOpacity
      if unloadFont is not None:           self.unloadFont = unloadFont
      if unlock is not None:               self.unlock = unlock
      if unlockIndices is not None:        self.unlockIndices = unlockIndices
      if unlockMesh is not None:           self.unlockMesh = unlockMesh
      if unlockSystem is not None:         self.unlockSystem = unlockSystem
      if update is not None:               self.update = update
      if writeText is not None:            self.writeText = writeText

class LFBSurface:
   def __init__(self, font = None, opaqueText = None, xOffset = None, writingText = None, writingOutline = None, bitmap = None, foreground = None, background = None, foregroundRgb = None, stipple = None, drawingChar = None, paletteShades = None, clearing = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("LFBSurface *", lib.Instance_new(lib.class_LFBSurface))
         if font is not None:           self.font           = font
         if opaqueText is not None:     self.opaqueText     = opaqueText
         if xOffset is not None:        self.xOffset        = xOffset
         if writingText is not None:    self.writingText    = writingText
         if writingOutline is not None: self.writingOutline = writingOutline
         if bitmap is not None:         self.bitmap         = bitmap
         if foreground is not None:     self.foreground     = foreground
         if background is not None:     self.background     = background
         if foregroundRgb is not None:  self.foregroundRgb  = foregroundRgb
         if stipple is not None:        self.stipple        = stipple
         if drawingChar is not None:    self.drawingChar    = drawingChar
         if paletteShades is not None:  self.paletteShades  = paletteShades
         if clearing is not None:       self.clearing       = clearing

   @property
   def font(self): return self.impl.font
   @font.setter
   def font(self, value):
      if not isinstance(value, Font): value = Font(value)
      self.impl.font = value

   @property
   def opaqueText(self): return self.impl.opaqueText
   @opaqueText.setter
   def opaqueText(self, value): self.impl.opaqueText = value

   @property
   def xOffset(self): return self.impl.xOffset
   @xOffset.setter
   def xOffset(self, value): self.impl.xOffset = value

   @property
   def writingText(self): return self.impl.writingText
   @writingText.setter
   def writingText(self, value): self.impl.writingText = value

   @property
   def writingOutline(self): return self.impl.writingOutline
   @writingOutline.setter
   def writingOutline(self, value): self.impl.writingOutline = value

   @property
   def bitmap(self): return pyOrNewObject(Bitmap, self.impl.bitmap)
   @bitmap.setter
   def bitmap(self, value):
      if not isinstance(value, Bitmap): value = Bitmap(value)
      self.impl.bitmap = value

   @property
   def foreground(self): return self.impl.foreground
   @foreground.setter
   def foreground(self, value): self.impl.foreground = value

   @property
   def background(self): return self.impl.background
   @background.setter
   def background(self, value): self.impl.background = value

   @property
   def foregroundRgb(self): return ColorAlpha(impl = self.impl.foregroundRgb)
   @foregroundRgb.setter
   def foregroundRgb(self, value):
      if not isinstance(value, ColorAlpha): value = ColorAlpha(value)
      self.impl.foregroundRgb = value.impl

   @property
   def stipple(self): return self.impl.stipple
   @stipple.setter
   def stipple(self, value): self.impl.stipple = value

   @property
   def drawingChar(self): return self.impl.drawingChar
   @drawingChar.setter
   def drawingChar(self, value): self.impl.drawingChar = value

   @property
   def paletteShades(self): return self.impl.paletteShades
   @paletteShades.setter
   def paletteShades(self, value): self.impl.paletteShades = value

   @property
   def clearing(self): return self.impl.clearing
   @clearing.setter
   def clearing(self, value): self.impl.clearing = value

class LFBSystem:
   def __init__(self, format = None, palette = None, rgbLookup = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("LFBSystem *", lib.Instance_new(lib.class_LFBSystem))
         if format is not None:    self.format    = format
         if palette is not None:   self.palette   = palette
         if rgbLookup is not None: self.rgbLookup = rgbLookup

   @property
   def format(self): return self.impl.format
   @format.setter
   def format(self, value): self.impl.format = value

   @property
   def palette(self): return self.impl.palette
   @palette.setter
   def palette(self, value): self.impl.palette = value

   @property
   def rgbLookup(self): return self.impl.rgbLookup
   @rgbLookup.setter
   def rgbLookup(self, value): self.impl.rgbLookup = value

class LightMode:
   off        = lib.LightMode_off
   dir        = lib.LightMode_dir
   pos        = lib.LightMode_pos
   posAtt     = lib.LightMode_posAtt
   posSpot    = lib.LightMode_posSpot
   posSpotAtt = lib.LightMode_posSpotAtt

class MatrixMode:
   modelView  = lib.MatrixMode_modelView
   projection = lib.MatrixMode_projection
   texture    = lib.MatrixMode_texture

class SwizzleMode:
   off   = lib.SwizzleMode_off
   alpha = lib.SwizzleMode_alpha
   red   = lib.SwizzleMode_red
def gLABBindBuffer(target, buffer): lib.gLABBindBuffer(target, buffer)
def gLSetupFog(enable): lib.gLSetupFog(enable)
def gLSetupLighting(enable): lib.gLSetupLighting(enable)
def gLSetupTexturing(enable): lib.gLSetupTexturing(enable)
def useSingleGLContext(useSingle): lib.useSingleGLContext(useSingle)
def glimtkBegin(mode): lib.glimtkBegin(mode)
def glimtkColor3f(r, g, b): lib.glimtkColor3f(r, g, b)
def glimtkColor4f(r, g, b, a): lib.glimtkColor4f(r, g, b, a)
def glimtkColor4fv(a): lib.glimtkColor4fv(a)
def glimtkColor4ub(r, g, b, a): lib.glimtkColor4ub(r, g, b, a)
def glimtkEnd(): lib.glimtkEnd()
def glimtkNormal3d(x, y, z): lib.glimtkNormal3d(x, y, z)
def glimtkNormal3f(x, y, z): lib.glimtkNormal3f(x, y, z)
def glimtkNormal3fd(coords): lib.glimtkNormal3fd(coords)
def glimtkNormal3fv(coords): lib.glimtkNormal3fv(coords)
def glimtkRecti(a, b, c, d): lib.glimtkRecti(a, b, c, d)
def glimtkTexCoord2d(x, y): lib.glimtkTexCoord2d(x, y)
def glimtkTexCoord2f(x, y): lib.glimtkTexCoord2f(x, y)
def glimtkTexCoord2fv(a): lib.glimtkTexCoord2fv(a)
def glimtkTexCoord2i(x, y): lib.glimtkTexCoord2i(x, y)
def glimtkVertex2d(x, y): lib.glimtkVertex2d(x, y)
def glimtkVertex2f(x, y): lib.glimtkVertex2f(x, y)
def glimtkVertex2i(x, y): lib.glimtkVertex2i(x, y)
def glimtkVertex3d(x, y, z): lib.glimtkVertex3d(x, y, z)
def glimtkVertex3dv(coords): lib.glimtkVertex3dv(coords)
def glimtkVertex3f(x, y, z): lib.glimtkVertex3f(x, y, z)
def glimtkVertex3fv(coords): lib.glimtkVertex3fv(coords)
def glmsFlushMatrices(): lib.glmsFlushMatrices()
def glmsFrustum(l, r, b, t, n, f): lib.glmsFrustum(l, r, b, t, n, f)
def glmsGetDoublev(what, i): lib.glmsGetDoublev(what, i)
def glmsGetNearPlane(): lib.glmsGetNearPlane()
def glmsLoadIdentity(): lib.glmsLoadIdentity()
def glmsLoadMatrix(matrix): lib.glmsLoadMatrix(ffi.NULL if matrix is None else matrix.impl)
def glmsLoadMatrixd(i): lib.glmsLoadMatrixd(i)
def glmsLoadMatrixf(i): lib.glmsLoadMatrixf(i)
def glmsMatrixMode(mode): lib.glmsMatrixMode(mode)
def glmsMultMatrixd(i): lib.glmsMultMatrixd(i)
def glmsOrtho(l, r, b, t, n, f): lib.glmsOrtho(l, r, b, t, n, f)
def glmsPopMatrix(): lib.glmsPopMatrix()
def glmsPushMatrix(): lib.glmsPushMatrix()
def glmsRotated(angle, x, y, z): lib.glmsRotated(angle, x, y, z)
def glmsScaled(a, b, c): lib.glmsScaled(a, b, c)
def glmsSetNearPlane(value): lib.glmsSetNearPlane(value)
def glmsTranslated(a, b, c): lib.glmsTranslated(a, b, c)
def glsupLightModeli(pname, param): lib.glsupLightModeli(pname, param)
def glsupLineStipple(i, j): lib.glsupLineStipple(i, j)

class PrimitiveGroupType(pyBaseClass):
   def __init__(self, primitiveType = 0, vertexRange = False, indices32bit = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(primitiveType, PrimitiveGroupType):
         self.impl = primitiveType.impl
      else:
         if isinstance(primitiveType, tuple):
            __tuple = primitiveType
            primitiveType = 0
            if len(__tuple) > 0: primitiveType = __tuple[0]
            if len(__tuple) > 1: vertexRange = __tuple[1]
            if len(__tuple) > 2: indices32bit = __tuple[2]
         self.impl = (
            (primitiveType << lib.PRIMITIVEGROUPTYPE_primitiveType_SHIFT) |
            (vertexRange   << lib.PRIMITIVEGROUPTYPE_vertexRange_SHIFT)   |
            (indices32bit  << lib.PRIMITIVEGROUPTYPE_indices32bit_SHIFT)  )

   @property
   def primitiveType(self): return ((((self.impl)) & lib.PRIMITIVEGROUPTYPE_primitiveType_MASK) >> lib.PRIMITIVEGROUPTYPE_primitiveType_SHIFT)
   @primitiveType.setter
   def primitiveType(self, value): self.value = ((self.impl) & ~(lib.PRIMITIVEGROUPTYPE_primitiveType_MASK)) | (((value)) << lib.PRIMITIVEGROUPTYPE_primitiveType_SHIFT)

   @property
   def vertexRange(self): return ((((self.impl)) & lib.PRIMITIVEGROUPTYPE_vertexRange_MASK) >> lib.PRIMITIVEGROUPTYPE_vertexRange_SHIFT)
   @vertexRange.setter
   def vertexRange(self, value): self.value = ((self.impl) & ~(lib.PRIMITIVEGROUPTYPE_vertexRange_MASK)) | (((value)) << lib.PRIMITIVEGROUPTYPE_vertexRange_SHIFT)

   @property
   def indices32bit(self): return ((((self.impl)) & lib.PRIMITIVEGROUPTYPE_indices32bit_MASK) >> lib.PRIMITIVEGROUPTYPE_indices32bit_SHIFT)
   @indices32bit.setter
   def indices32bit(self, value): self.value = ((self.impl) & ~(lib.PRIMITIVEGROUPTYPE_indices32bit_MASK)) | (((value)) << lib.PRIMITIVEGROUPTYPE_indices32bit_SHIFT)

class Camera(Instance):
   def __init__(self,
                type = None,
                position = None,
                orientation = None,
                eulerOrientation = None,
                fov = None,
                zMin = None,
                zMax = None,
                target = None,
                fovDirection = None,
                aspectRatio = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if type is not None:             self.type = type
      if position is not None:         self.position = position
      if orientation is not None:      self.orientation = orientation
      if eulerOrientation is not None: self.eulerOrientation = eulerOrientation
      if fov is not None:              self.fov = fov
      if zMin is not None:             self.zMin = zMin
      if zMax is not None:             self.zMax = zMax
      if target is not None:           self.target = target
      if fovDirection is not None:     self.fovDirection = fovDirection
      if aspectRatio is not None:      self.aspectRatio = aspectRatio

   @property
   def type(self): return lib.Camera_get_type(self.impl, value)
   @type.setter
   def type(self, value):
      lib.Camera_set_type(self.impl, value)

   @property
   def position(self): value = Vector3D(); lib.Camera_get_position(self.impl, ffi.cast("Vector3D *", value.impl)); return value
   @position.setter
   def position(self, value):
      if not isinstance(value, Vector3D): value = Vector3D(value)
      lib.Camera_set_position(self.impl, ffi.cast("Vector3D *", value.impl))

   @property
   def orientation(self): value = Quaternion(); lib.Camera_get_orientation(self.impl, ffi.cast("Quaternion *", value.impl)); return value
   @orientation.setter
   def orientation(self, value):
      if not isinstance(value, Quaternion): value = Quaternion(value)
      lib.Camera_set_orientation(self.impl, ffi.cast("Quaternion *", value.impl))

   @property
   def eulerOrientation(self): value = Euler(); lib.Camera_get_eulerOrientation(self.impl, ffi.cast("Euler *", value.impl)); return value
   @eulerOrientation.setter
   def eulerOrientation(self, value):
      if not isinstance(value, Euler): value = Euler(value)
      lib.Camera_set_eulerOrientation(self.impl, ffi.cast("Euler *", value.impl))

   @property
   def cPosition(self): value = Vector3D(); lib.Camera_get_cPosition(self.impl, ffi.cast("Vector3D *", value.impl)); return value

   @property
   def cOrientation(self): value = Quaternion(); lib.Camera_get_cOrientation(self.impl, ffi.cast("Quaternion *", value.impl)); return value

   @property
   def fov(self): return Degrees(lib.Camera_get_fov(self.impl))
   @fov.setter
   def fov(self, value):
      if not isinstance(value, Angle): value = Degrees(value)
      lib.Camera_set_fov(self.impl, value.impl)

   @property
   def zMin(self): return lib.Camera_get_zMin(self.impl)
   @zMin.setter
   def zMin(self, value):
      lib.Camera_set_zMin(self.impl, value)

   @property
   def zMax(self): return lib.Camera_get_zMax(self.impl)
   @zMax.setter
   def zMax(self, value):
      lib.Camera_set_zMax(self.impl, value)

   @property
   def target(self): return lib.Camera_get_target(self.impl, value.impl)
   @target.setter
   def target(self, value):
      if not isinstance(value, Object): value = Object(value)
      lib.Camera_set_target(self.impl, value.impl)

   @property
   def fovDirection(self): return lib.Camera_get_fovDirection(self.impl, value)
   @fovDirection.setter
   def fovDirection(self, value):
      lib.Camera_set_fovDirection(self.impl, value)

   @property
   def aspectRatio(self): return lib.Camera_get_aspectRatio(self.impl)
   @aspectRatio.setter
   def aspectRatio(self, value):
      lib.Camera_set_aspectRatio(self.impl, value)

   @property
   def focal(self): value = Size(); lib.Camera_get_focal(self.impl, ffi.cast("Size *", value.impl)); return value

   def adjustAngle(self, angle):
      if angle is not None and not isinstance(angle, Quaternion): angle = Quaternion(angle)
      angle = ffi.NULL if angle is None else angle.impl
      lib.Camera_adjustAngle(self.impl, ffi.cast("Quaternion *", angle))

   def adjustPosition(self, position):
      if position is not None and not isinstance(position, Vector3D): position = Vector3D(position)
      position = ffi.NULL if position is None else position.impl
      lib.Camera_adjustPosition(self.impl, ffi.cast("Vector3D *", position))

   def move(self, direction):
      if direction is not None and not isinstance(direction, Vector3D): direction = Vector3D(direction)
      direction = ffi.NULL if direction is None else direction.impl
      lib.Camera_move(self.impl, ffi.cast("Vector3D *", direction))

   def pointsVisible(self, points, numPoints, threshold):
      return lib.Camera_pointsVisible(self.impl, points, numPoints, threshold)

   def project(self, vector, point):
      if vector is not None and not isinstance(vector, Vector3D): vector = Vector3D(vector)
      vector = ffi.NULL if vector is None else vector.impl
      if point is not None and not isinstance(point, Vector3D): point = Vector3D(point)
      point = ffi.NULL if point is None else point.impl
      return lib.Camera_project(self.impl, ffi.cast("Vector3D *", vector), ffi.cast("Vector3D *", point))

   def projectSize(self, vector, point):
      if vector is not None and not isinstance(vector, Vector3D): vector = Vector3D(vector)
      vector = ffi.NULL if vector is None else vector.impl
      if point is not None and not isinstance(point, Point): point = Point(point)
      point = ffi.NULL if point is None else point.impl
      return lib.Camera_projectSize(self.impl, ffi.cast("Vector3D *", vector), ffi.cast("Point *", point))

   def rotatePitch(self, amount, min, max):
      if amount is not None and not isinstance(amount, Angle): amount = Degrees(amount)
      if amount is None: amount = ffi.NULL
      if min is not None and not isinstance(min, Angle): min = Degrees(min)
      if min is None: min = ffi.NULL
      if max is not None and not isinstance(max, Angle): max = Degrees(max)
      if max is None: max = ffi.NULL
      lib.Camera_rotatePitch(self.impl, amount, min, max)

   def rotateRoll(self, amount, min, max):
      if amount is not None and not isinstance(amount, Angle): amount = Degrees(amount)
      if amount is None: amount = ffi.NULL
      if min is not None and not isinstance(min, Angle): min = Degrees(min)
      if min is None: min = ffi.NULL
      if max is not None and not isinstance(max, Angle): max = Degrees(max)
      if max is None: max = ffi.NULL
      lib.Camera_rotateRoll(self.impl, amount, min, max)

   def rotateYaw(self, amount, min, max):
      if amount is not None and not isinstance(amount, Angle): amount = Degrees(amount)
      if amount is None: amount = ffi.NULL
      if min is not None and not isinstance(min, Angle): min = Degrees(min)
      if min is None: min = ffi.NULL
      if max is not None and not isinstance(max, Angle): max = Degrees(max)
      if max is None: max = ffi.NULL
      lib.Camera_rotateYaw(self.impl, amount, min, max)

   def setup(self, width, height, origin):
      if origin is not None and not isinstance(origin, Point): origin = Point(origin)
      origin = ffi.NULL if origin is None else origin.impl
      lib.Camera_setup(self.impl, width, height, ffi.cast("Point *", origin))

   def slerp(self, amount):
      lib.Camera_slerp(self.impl, amount)

   def sphereVisible(self, center, radius):
      if center is not None and not isinstance(center, Vector3D): center = Vector3D(center)
      center = ffi.NULL if center is None else center.impl
      return lib.Camera_sphereVisible(self.impl, ffi.cast("Vector3D *", center), radius)

   def transformMatrix(self, dest, src):
      if dest is not None and not isinstance(dest, Matrix): dest = Matrix(dest)
      dest = ffi.NULL if dest is None else dest.impl
      if src is not None and not isinstance(src, Matrix): src = Matrix(src)
      src = ffi.NULL if src is None else src.impl
      lib.Camera_transformMatrix(self.impl, ffi.cast("Matrix *", dest), ffi.cast("Matrix *", src))

   def transformNormal(self, dest, src):
      if dest is not None and not isinstance(dest, Vector3D): dest = Vector3D(dest)
      dest = ffi.NULL if dest is None else dest.impl
      if src is not None and not isinstance(src, Vector3D): src = Vector3D(src)
      src = ffi.NULL if src is None else src.impl
      lib.Camera_transformNormal(self.impl, ffi.cast("Vector3D *", dest), ffi.cast("Vector3D *", src))

   def transformPoint(self, dest, src):
      if dest is not None and not isinstance(dest, Vector3D): dest = Vector3D(dest)
      dest = ffi.NULL if dest is None else dest.impl
      if src is not None and not isinstance(src, Vector3D): src = Vector3D(src)
      src = ffi.NULL if src is None else src.impl
      lib.Camera_transformPoint(self.impl, ffi.cast("Vector3D *", dest), ffi.cast("Vector3D *", src))

   def unproject(self, point, vector):
      if point is not None and not isinstance(point, Vector3D): point = Vector3D(point)
      point = ffi.NULL if point is None else point.impl
      if vector is not None and not isinstance(vector, Vector3D): vector = Vector3D(vector)
      vector = ffi.NULL if vector is None else vector.impl
      lib.Camera_unproject(self.impl, ffi.cast("Vector3D *", point), ffi.cast("Vector3D *", vector))

   def untransform(self, src, result):
      if src is not None and not isinstance(src, Vector3D): src = Vector3D(src)
      src = ffi.NULL if src is None else src.impl
      if result is not None and not isinstance(result, Vector3D): result = Vector3D(result)
      result = ffi.NULL if result is None else result.impl
      lib.Camera_untransform(self.impl, ffi.cast("Vector3D *", src), ffi.cast("Vector3D *", result))

   def update(self):
      return lib.Camera_update(self.impl)

   def setCPosition(self, value):
      if value is not None and not isinstance(value, Vector3D): value = Vector3D(value)
      value = ffi.NULL if value is None else value.impl
      lib.Camera_setCPosition(self.impl, ffi.cast("Vector3D *", value))

   def setViewMatrix(self, value):
      if value is not None and not isinstance(value, Matrix): value = Matrix(value)
      value = ffi.NULL if value is None else value.impl
      lib.Camera_setViewMatrix(self.impl, ffi.cast("Matrix *", value))

class CameraType:
   fixed              = lib.CameraType_fixed
   fixedQuaternion    = lib.CameraType_fixedQuaternion
   attached           = lib.CameraType_attached
   attachedQuaternion = lib.CameraType_attachedQuaternion
   lookAt             = lib.CameraType_lookAt
   lookAtObject       = lib.CameraType_lookAtObject

class ClippingPlane:
   left   = lib.ClippingPlane_left
   right  = lib.ClippingPlane_right
   top    = lib.ClippingPlane_top
   bottom = lib.ClippingPlane_bottom
   near   = lib.ClippingPlane_near
   far    = lib.ClippingPlane_far

class Euler:
   def __init__(self, yaw = 0, pitch = 0, roll = 0, impl = None):
      if impl is not None:
         self.impl = ffi.new("Euler *", impl)
      else:
         if isinstance(yaw, tuple):
            __tuple = yaw
            yaw = 0
            if len(__tuple) > 0: yaw   = __tuple[0]
            if len(__tuple) > 1: pitch = __tuple[1]
            if len(__tuple) > 2: roll  = __tuple[2]
         elif isinstance(yaw, Quaternion):
            self.impl = ffi.new("Euler *")
            lib.Euler_from_Quaternion(self.impl, yaw.impl)
            return
         if yaw is not None:
            if not isinstance(yaw, Angle): yaw = Degrees(yaw)
            yaw = yaw.impl
         if pitch is not None:
            if not isinstance(pitch, Angle): pitch = Degrees(pitch)
            pitch = pitch.impl
         if roll is not None:
            if not isinstance(roll, Angle): roll = Degrees(roll)
            roll = roll.impl
         self.impl = ffi.new("Euler *", { 'yaw' : yaw, 'pitch' : pitch, 'roll' : roll })

   @property
   def yaw(self): return Degrees(impl = self.impl.yaw)
   @yaw.setter
   def yaw(self, value):
      if not isinstance(value, Angle): value = Degrees(value)
      self.impl.yaw = value.impl

   @property
   def pitch(self): return Degrees(impl = self.impl.pitch)
   @pitch.setter
   def pitch(self, value):
      if not isinstance(value, Angle): value = Degrees(value)
      self.impl.pitch = value.impl

   @property
   def roll(self): return Degrees(impl = self.impl.roll)
   @roll.setter
   def roll(self, value):
      if not isinstance(value, Angle): value = Degrees(value)
      self.impl.roll = value.impl

   # here is a conversion
   # Euler_to_Quaternion
   # Euler_from_Quaternion

   def add(self, e1, e2):
      if e1 is not None and not isinstance(e1, Euler): e1 = Euler(e1)
      e1 = ffi.NULL if e1 is None else e1.impl
      if e2 is not None and not isinstance(e2, Euler): e2 = Euler(e2)
      e2 = ffi.NULL if e2 is None else e2.impl
      lib.Euler_add(ffi.cast("Euler *", self.impl), ffi.cast("Euler *", e1), ffi.cast("Euler *", e2))

class FovDirection:
   widest     = lib.FovDirection_widest
   horizontal = lib.FovDirection_horizontal
   vertical   = lib.FovDirection_vertical

class FrameKey:
   def __init__(self, frame = None, tension = None, continuity = None, bias = None, easeFrom = None, easeTo = None, position = None, orientation = None, scaling = None, roll = None, fov = None, color = None, hotSpot = None, fallOff = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("FrameKey *", impl)
      else:
         if position is not None:
            if not isinstance(position, Vector3Df): position = Vector3Df(position)
         if orientation is not None:
            if not isinstance(orientation, Quaternion): orientation = Quaternion(orientation)
         if scaling is not None:
            if not isinstance(scaling, Vector3Df): scaling = Vector3Df(scaling)
         if color is not None:
            if not isinstance(color, ColorRGB): color = ColorRGB(color)
         __members = { }
         if frame is not None:       __members['frame']       = frame
         if tension is not None:     __members['tension']     = tension
         if continuity is not None:  __members['continuity']  = continuity
         if bias is not None:        __members['bias']        = bias
         if easeFrom is not None:    __members['easeFrom']    = easeFrom
         if easeTo is not None:      __members['easeTo']      = easeTo
         if position is not None:    __members['position']    = position.impl[0]
         if orientation is not None: __members['orientation'] = orientation.impl[0]
         if scaling is not None:     __members['scaling']     = scaling.impl[0]
         if roll is not None:        __members['roll']        = roll
         if fov is not None:         __members['fov']         = fov
         if color is not None:       __members['color']       = color.impl[0]
         if hotSpot is not None:     __members['hotSpot']     = hotSpot
         if fallOff is not None:     __members['fallOff']     = fallOff
         self.impl = ffi.new("FrameKey *", __members)

   @property
   def frame(self): return self.impl.frame
   @frame.setter
   def frame(self, value): self.impl.frame = value

   @property
   def tension(self): return self.impl.tension
   @tension.setter
   def tension(self, value): self.impl.tension = value

   @property
   def continuity(self): return self.impl.continuity
   @continuity.setter
   def continuity(self, value): self.impl.continuity = value

   @property
   def bias(self): return self.impl.bias
   @bias.setter
   def bias(self, value): self.impl.bias = value

   @property
   def easeFrom(self): return self.impl.easeFrom
   @easeFrom.setter
   def easeFrom(self, value): self.impl.easeFrom = value

   @property
   def easeTo(self): return self.impl.easeTo
   @easeTo.setter
   def easeTo(self, value): self.impl.easeTo = value

   @property
   def position(self): return Vector3Df(impl = self.impl.position)
   @position.setter
   def position(self, value):
      if not isinstance(value, Vector3Df): value = Vector3Df(value)
      self.impl.position = value.impl[0]

   @property
   def orientation(self): return Quaternion(impl = self.impl.orientation)
   @orientation.setter
   def orientation(self, value):
      if not isinstance(value, Quaternion): value = Quaternion(value)
      self.impl.orientation = value.impl[0]

   @property
   def scaling(self): return Vector3Df(impl = self.impl.scaling)
   @scaling.setter
   def scaling(self, value):
      if not isinstance(value, Vector3Df): value = Vector3Df(value)
      self.impl.scaling = value.impl[0]

   @property
   def roll(self): return self.impl.roll
   @roll.setter
   def roll(self, value): self.impl.roll = value

   @property
   def fov(self): return self.impl.fov
   @fov.setter
   def fov(self, value): self.impl.fov = value

   @property
   def color(self): return ColorRGB(impl = self.impl.color)
   @color.setter
   def color(self, value):
      if not isinstance(value, ColorRGB): value = ColorRGB(value)
      self.impl.color = value.impl[0]

   @property
   def hotSpot(self): return self.impl.hotSpot
   @hotSpot.setter
   def hotSpot(self, value): self.impl.hotSpot = value

   @property
   def fallOff(self): return self.impl.fallOff
   @fallOff.setter
   def fallOff(self, value): self.impl.fallOff = value

class FrameTrack:
   def __init__(self, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("FrameTrack *", lib.Instance_new(lib.class_FrameTrack))

class FrameTrackBits(pyBaseClass):pass

class FrameTrackType:
   position    = lib.FrameTrackType_position
   rotation    = lib.FrameTrackType_rotation
   scaling     = lib.FrameTrackType_scaling
   fov         = lib.FrameTrackType_fov
   roll        = lib.FrameTrackType_roll
   colorChange = lib.FrameTrackType_colorChange
   morph       = lib.FrameTrackType_morph
   hotSpot     = lib.FrameTrackType_hotSpot
   fallOff     = lib.FrameTrackType_fallOff
   hide        = lib.FrameTrackType_hide

class FrustumPlacement:
   outside      = lib.FrustumPlacement_outside
   inside       = lib.FrustumPlacement_inside
   intersecting = lib.FrustumPlacement_intersecting

class Line:
   def __init__(self, p0 = None, delta = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("Line *", impl)
      else:
         if isinstance(p0, tuple):
            __tuple = p0
            p0 = None
            if len(__tuple) > 0: p0    = __tuple[0]
            if len(__tuple) > 1: delta = __tuple[1]
         if p0 is not None:
            if not isinstance(p0, Vector3D): p0 = Vector3D(p0)
            p0 = p0.impl
         if delta is not None:
            if not isinstance(delta, Vector3D): delta = Vector3D(delta)
            delta = delta.impl
         self.impl = ffi.new("Line *", { 'p0' : p0, 'delta' : delta })

   @property
   def p0(self): return Vector3D(impl = self.impl.p0)
   @p0.setter
   def p0(self, value):
      if not isinstance(value, Vector3D): value = Vector3D(value)
      self.impl.p0 = value.impl[0]

   @property
   def delta(self): return Vector3D(impl = self.impl.delta)
   @delta.setter
   def delta(self, value):
      if not isinstance(value, Vector3D): value = Vector3D(value)
      self.impl.delta = value.impl[0]

   def intersectSphere(self, radius):
      t = ffi.new("double *")
      lib.Line_intersectSphere(ffi.cast("Line *", self.impl), radius, t)
      return FixTypeNameIssue(impl = t)


class Material:
   def __init__(self, prev = None, next = None, name = None, opacity = None, diffuse = None, ambient = None, specular = None, emissive = None, power = None, baseMap = None, bumpMap = None, specularMap = None, reflectMap = None, envMap = None, reflectivity = None, refractiveIndex = None, refractiveIndexContainer = None, flags = None, uScale = None, vScale = None, shader = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("Material *", lib.Instance_new(lib.class_Material))
         if prev is not None:                     self.prev                     = prev
         if next is not None:                     self.next                     = next
         if name is not None:                     self.name                     = name
         if opacity is not None:                  self.opacity                  = opacity
         if diffuse is not None:                  self.diffuse                  = diffuse
         if ambient is not None:                  self.ambient                  = ambient
         if specular is not None:                 self.specular                 = specular
         if emissive is not None:                 self.emissive                 = emissive
         if power is not None:                    self.power                    = power
         if baseMap is not None:                  self.baseMap                  = baseMap
         if bumpMap is not None:                  self.bumpMap                  = bumpMap
         if specularMap is not None:              self.specularMap              = specularMap
         if reflectMap is not None:               self.reflectMap               = reflectMap
         if envMap is not None:                   self.envMap                   = envMap
         if reflectivity is not None:             self.reflectivity             = reflectivity
         if refractiveIndex is not None:          self.refractiveIndex          = refractiveIndex
         if refractiveIndexContainer is not None: self.refractiveIndexContainer = refractiveIndexContainer
         if flags is not None:                    self.flags                    = flags
         if uScale is not None:                   self.uScale                   = uScale
         if vScale is not None:                   self.vScale                   = vScale
         if shader is not None:                   self.shader                   = shader

   @property
   def prev(self): return self.impl.prev
   @prev.setter
   def prev(self, value):
      if not isinstance(value, Material): value = Material(value)
      self.impl.prev = value

   @property
   def next(self): return self.impl.next
   @next.setter
   def next(self, value):
      if not isinstance(value, Material): value = Material(value)
      self.impl.next = value

   @property
   def name(self): return self.impl.name
   @name.setter
   def name(self, value): self.impl.name = value

   @property
   def opacity(self): return self.impl.opacity
   @opacity.setter
   def opacity(self, value): self.impl.opacity = value

   @property
   def diffuse(self): return ColorRGB(impl = self.impl.diffuse)
   @diffuse.setter
   def diffuse(self, value):
      if not isinstance(value, ColorRGB): value = ColorRGB(value)
      self.impl.diffuse = value.impl[0]

   @property
   def ambient(self): return ColorRGB(impl = self.impl.ambient)
   @ambient.setter
   def ambient(self, value):
      if not isinstance(value, ColorRGB): value = ColorRGB(value)
      self.impl.ambient = value.impl[0]

   @property
   def specular(self): return ColorRGB(impl = self.impl.specular)
   @specular.setter
   def specular(self, value):
      if not isinstance(value, ColorRGB): value = ColorRGB(value)
      self.impl.specular = value.impl[0]

   @property
   def emissive(self): return ColorRGB(impl = self.impl.emissive)
   @emissive.setter
   def emissive(self, value):
      if not isinstance(value, ColorRGB): value = ColorRGB(value)
      self.impl.emissive = value.impl[0]

   @property
   def power(self): return self.impl.power
   @power.setter
   def power(self, value): self.impl.power = value

   @property
   def baseMap(self): return pyOrNewObject(Bitmap, self.impl.baseMap)
   @baseMap.setter
   def baseMap(self, value):
      if not isinstance(value, Bitmap): value = Bitmap(value)
      self.impl.baseMap = value

   @property
   def bumpMap(self): return pyOrNewObject(Bitmap, self.impl.bumpMap)
   @bumpMap.setter
   def bumpMap(self, value):
      if not isinstance(value, Bitmap): value = Bitmap(value)
      self.impl.bumpMap = value

   @property
   def specularMap(self): return pyOrNewObject(Bitmap, self.impl.specularMap)
   @specularMap.setter
   def specularMap(self, value):
      if not isinstance(value, Bitmap): value = Bitmap(value)
      self.impl.specularMap = value

   @property
   def reflectMap(self): return pyOrNewObject(Bitmap, self.impl.reflectMap)
   @reflectMap.setter
   def reflectMap(self, value):
      if not isinstance(value, Bitmap): value = Bitmap(value)
      self.impl.reflectMap = value

   @property
   def envMap(self): return pyOrNewObject(CubeMap, self.impl.envMap)
   @envMap.setter
   def envMap(self, value):
      if not isinstance(value, CubeMap): value = CubeMap(value)
      self.impl.envMap = value

   @property
   def reflectivity(self): return self.impl.reflectivity
   @reflectivity.setter
   def reflectivity(self, value): self.impl.reflectivity = value

   @property
   def refractiveIndex(self): return self.impl.refractiveIndex
   @refractiveIndex.setter
   def refractiveIndex(self, value): self.impl.refractiveIndex = value

   @property
   def refractiveIndexContainer(self): return self.impl.refractiveIndexContainer
   @refractiveIndexContainer.setter
   def refractiveIndexContainer(self, value): self.impl.refractiveIndexContainer = value

   @property
   def flags(self): return MaterialFlags(impl = self.impl.flags)
   @flags.setter
   def flags(self, value):
      if not isinstance(value, MaterialFlags): value = MaterialFlags(value)
      self.impl.flags = value.impl

   @property
   def uScale(self): return self.impl.uScale
   @uScale.setter
   def uScale(self, value): self.impl.uScale = value

   @property
   def vScale(self): return self.impl.vScale
   @vScale.setter
   def vScale(self, value): self.impl.vScale = value

   @property
   def shader(self): return pyOrNewObject(Shader, self.impl.shader)
   @shader.setter
   def shader(self, value):
      if not isinstance(value, Shader): value = Shader(value)
      self.impl.shader = value

   def free(self):
      lib.Material_free(self.impl)

class MaterialFlags(pyBaseClass):
   def __init__(self, doubleSided = False, translucent = False, tile = False, noFog = False, singleSideLight = False, separateSpecular = False, cubeMap = False, noLighting = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(doubleSided, MaterialFlags):
         self.impl = doubleSided.impl
      else:
         self.impl = (
            (doubleSided      << lib.MATERIALFLAGS_doubleSided_SHIFT)      |
            (translucent      << lib.MATERIALFLAGS_translucent_SHIFT)      |
            (tile             << lib.MATERIALFLAGS_tile_SHIFT)             |
            (noFog            << lib.MATERIALFLAGS_noFog_SHIFT)            |
            (singleSideLight  << lib.MATERIALFLAGS_singleSideLight_SHIFT)  |
            (separateSpecular << lib.MATERIALFLAGS_separateSpecular_SHIFT) |
            (cubeMap          << lib.MATERIALFLAGS_cubeMap_SHIFT)          |
            (noLighting       << lib.MATERIALFLAGS_noLighting_SHIFT)       )

   @property
   def doubleSided(self): return ((((self.impl)) & lib.MATERIALFLAGS_doubleSided_MASK) >> lib.MATERIALFLAGS_doubleSided_SHIFT)
   @doubleSided.setter
   def doubleSided(self, value): self.value = ((self.impl) & ~(lib.MATERIALFLAGS_doubleSided_MASK)) | (((value)) << lib.MATERIALFLAGS_doubleSided_SHIFT)

   @property
   def translucent(self): return ((((self.impl)) & lib.MATERIALFLAGS_translucent_MASK) >> lib.MATERIALFLAGS_translucent_SHIFT)
   @translucent.setter
   def translucent(self, value): self.value = ((self.impl) & ~(lib.MATERIALFLAGS_translucent_MASK)) | (((value)) << lib.MATERIALFLAGS_translucent_SHIFT)

   @property
   def tile(self): return ((((self.impl)) & lib.MATERIALFLAGS_tile_MASK) >> lib.MATERIALFLAGS_tile_SHIFT)
   @tile.setter
   def tile(self, value): self.value = ((self.impl) & ~(lib.MATERIALFLAGS_tile_MASK)) | (((value)) << lib.MATERIALFLAGS_tile_SHIFT)

   @property
   def noFog(self): return ((((self.impl)) & lib.MATERIALFLAGS_noFog_MASK) >> lib.MATERIALFLAGS_noFog_SHIFT)
   @noFog.setter
   def noFog(self, value): self.value = ((self.impl) & ~(lib.MATERIALFLAGS_noFog_MASK)) | (((value)) << lib.MATERIALFLAGS_noFog_SHIFT)

   @property
   def singleSideLight(self): return ((((self.impl)) & lib.MATERIALFLAGS_singleSideLight_MASK) >> lib.MATERIALFLAGS_singleSideLight_SHIFT)
   @singleSideLight.setter
   def singleSideLight(self, value): self.value = ((self.impl) & ~(lib.MATERIALFLAGS_singleSideLight_MASK)) | (((value)) << lib.MATERIALFLAGS_singleSideLight_SHIFT)

   @property
   def separateSpecular(self): return ((((self.impl)) & lib.MATERIALFLAGS_separateSpecular_MASK) >> lib.MATERIALFLAGS_separateSpecular_SHIFT)
   @separateSpecular.setter
   def separateSpecular(self, value): self.value = ((self.impl) & ~(lib.MATERIALFLAGS_separateSpecular_MASK)) | (((value)) << lib.MATERIALFLAGS_separateSpecular_SHIFT)

   @property
   def cubeMap(self): return ((((self.impl)) & lib.MATERIALFLAGS_cubeMap_MASK) >> lib.MATERIALFLAGS_cubeMap_SHIFT)
   @cubeMap.setter
   def cubeMap(self, value): self.value = ((self.impl) & ~(lib.MATERIALFLAGS_cubeMap_MASK)) | (((value)) << lib.MATERIALFLAGS_cubeMap_SHIFT)

   @property
   def noLighting(self): return ((((self.impl)) & lib.MATERIALFLAGS_noLighting_MASK) >> lib.MATERIALFLAGS_noLighting_SHIFT)
   @noLighting.setter
   def noLighting(self, value): self.value = ((self.impl) & ~(lib.MATERIALFLAGS_noLighting_MASK)) | (((value)) << lib.MATERIALFLAGS_noLighting_SHIFT)

class Matrix:
   def __init__(self, array = None, m = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("Matrix *", impl)
      else:
         if isinstance(array, tuple):
            __tuple = array
            array = None
            if len(__tuple) > 0: array = __tuple[0]
         elif isinstance(array, Quaternion):
            self.impl = ffi.new("Matrix *")
            lib.Matrix_from_Quaternion(self.impl, array.impl)
            return
         __members = { }
         if array is not None: __members['array'] = array.impl[0]
         if m is not None:     __members['m']     = m.impl[0]
         self.impl = ffi.new("Matrix *", __members)

   @property
   def array(self): return self.impl.array
   @array.setter
   def array(self, value): self.impl.array = value

   @property
   def m(self): return self.impl.m
   @m.setter
   def m(self, value): self.impl.m = value

   # here is a conversion
   # Matrix_to_Quaternion
   # Matrix_from_Quaternion

   def determinant(self):
      lib.Matrix_determinant(ffi.cast("Matrix *", self.impl))

   def identity(self):
      lib.Matrix_identity(ffi.cast("Matrix *", self.impl))

   def inverse(self, source):
      if source is not None and not isinstance(source, Matrix): source = Matrix(source)
      source = ffi.NULL if source is None else source.impl
      lib.Matrix_inverse(ffi.cast("Matrix *", self.impl), ffi.cast("Matrix *", source))

   def multiply(self, a, b):
      if a is not None and not isinstance(a, Matrix): a = Matrix(a)
      a = ffi.NULL if a is None else a.impl
      if b is not None and not isinstance(b, Matrix): b = Matrix(b)
      b = ffi.NULL if b is None else b.impl
      lib.Matrix_multiply(ffi.cast("Matrix *", self.impl), ffi.cast("Matrix *", a), ffi.cast("Matrix *", b))

   def rotate(self, quat):
      if quat is not None and not isinstance(quat, Quaternion): quat = Quaternion(quat)
      quat = ffi.NULL if quat is None else quat.impl
      lib.Matrix_rotate(ffi.cast("Matrix *", self.impl), ffi.cast("Quaternion *", quat))

   def rotationQuaternion(self, quat):
      if quat is not None and not isinstance(quat, Quaternion): quat = Quaternion(quat)
      quat = ffi.NULL if quat is None else quat.impl
      lib.Matrix_rotationQuaternion(ffi.cast("Matrix *", self.impl), ffi.cast("Quaternion *", quat))

   def scale(self, sx, sy, sz):
      lib.Matrix_scale(ffi.cast("Matrix *", self.impl), sx, sy, sz)

   def toEuler(self, euler):
      if euler is not None and not isinstance(euler, Euler): euler = Euler(euler)
      euler = ffi.NULL if euler is None else euler.impl
      lib.Matrix_toEuler(ffi.cast("Matrix *", self.impl), ffi.cast("Euler *", euler))

   def translate(self, tx, ty, tz):
      lib.Matrix_translate(ffi.cast("Matrix *", self.impl), tx, ty, tz)

   def transpose(self, source):
      if source is not None and not isinstance(source, Matrix): source = Matrix(source)
      source = ffi.NULL if source is None else source.impl
      lib.Matrix_transpose(ffi.cast("Matrix *", self.impl), ffi.cast("Matrix *", source))

class Mesh:
   def __init__(self, texCoords = None, nVertices = None, vertices = None, normals = None, tangents = None, colors = None, lightVectors = None, flags = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("Mesh *", lib.Instance_new(lib.class_Mesh))
         if texCoords is not None:    self.texCoords         = texCoords
         if nVertices is not None:    self.nVertices         = nVertices
         if vertices is not None:     self.vertices          = vertices
         if normals is not None:      self.normals           = normals
         if tangents is not None:     self.tangents          = tangents
         if colors is not None:       self.colors            = colors
         if lightVectors is not None: self.lightVectors      = lightVectors
         if flags is not None:        self.flags             = flags
         if texCoords is not None:    self.texCoords    = texCoords
         if nVertices is not None:    self.nVertices    = nVertices
         if vertices is not None:     self.vertices     = vertices
         if normals is not None:      self.normals      = normals
         if tangents is not None:     self.tangents     = tangents
         if colors is not None:       self.colors       = colors
         if lightVectors is not None: self.lightVectors = lightVectors
         if flags is not None:        self.flags        = flags

   @property
   def texCoords(self): return lib.Mesh_get_texCoords(self.impl)
   @texCoords.setter
   def texCoords(self, value):
      lib.Mesh_set_texCoords(self.impl, value.impl)

   @property
   def nVertices(self): return lib.Mesh_get_nVertices(self.impl)
   @nVertices.setter
   def nVertices(self, value):
      lib.Mesh_set_nVertices(self.impl, value)

   @property
   def vertices(self): return lib.Mesh_get_vertices(self.impl)
   @vertices.setter
   def vertices(self, value):
      lib.Mesh_set_vertices(self.impl, value.impl)

   @property
   def normals(self): return lib.Mesh_get_normals(self.impl)
   @normals.setter
   def normals(self, value):
      lib.Mesh_set_normals(self.impl, value.impl)

   @property
   def tangents(self): return lib.Mesh_get_tangents(self.impl)
   @tangents.setter
   def tangents(self, value):
      lib.Mesh_set_tangents(self.impl, value.impl)

   @property
   def colors(self): return lib.Mesh_get_colors(self.impl)
   @colors.setter
   def colors(self, value):
      lib.Mesh_set_colors(self.impl, value.impl)

   @property
   def lightVectors(self): return lib.Mesh_get_lightVectors(self.impl)
   @lightVectors.setter
   def lightVectors(self, value):
      lib.Mesh_set_lightVectors(self.impl, value.impl)

   @property
   def groups(self): value = OldList(); lib.Mesh_get_groups(self.impl, ffi.cast("OldList *", value.impl)); return value

   @property
   def flags(self): return MeshFeatures(impl = lib.Mesh_get_flags(self.impl))
   @flags.setter
   def flags(self, value):
      if not isinstance(value, MeshFeatures): value = MeshFeatures(value)
      lib.Mesh_set_flags(self.impl, value.impl)

   def addPrimitiveGroup(self, flags, nIndices):
      if flags is not None and not isinstance(flags, PrimitiveGroupType): flags = PrimitiveGroupType(flags)
      if flags is None: flags = ffi.NULL
      return pyOrNewObject(PrimitiveGroup, lib.Mesh_addPrimitiveGroup(self.impl, flags, nIndices))

   def allocate(self, what, nVertices, displaySystem):
      if what is not None and not isinstance(what, MeshFeatures): what = MeshFeatures(what)
      if what is None: what = ffi.NULL
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Mesh_allocate(self.impl, what, nVertices, displaySystem)

   def allocatePrimitive(self, primitive, flags, nIndices):
      if primitive is not None and not isinstance(primitive, PrimitiveSingle): primitive = PrimitiveSingle(primitive)
      primitive = ffi.NULL if primitive is None else primitive.impl
      if flags is not None and not isinstance(flags, PrimitiveGroupType): flags = PrimitiveGroupType(flags)
      if flags is None: flags = ffi.NULL
      return lib.Mesh_allocatePrimitive(self.impl, ffi.cast("PrimitiveSingle *", primitive), flags, nIndices)

   def applyMaterial(self, material):
      if material is not None and not isinstance(material, Material): material = Material(material)
      if material is None: material = ffi.NULL
      lib.Mesh_applyMaterial(self.impl, material)

   def applyTranslucency(self, object):
      if object is not None and not isinstance(object, Object): object = Object(object)
      if object is None: object = ffi.NULL
      return lib.Mesh_applyTranslucency(self.impl, object)

   def computeNormals(self):
      lib.Mesh_computeNormals(self.impl)

   def free(self, what):
      if what is not None and not isinstance(what, MeshFeatures): what = MeshFeatures(what)
      if what is None: what = ffi.NULL
      lib.Mesh_free(self.impl, what)

   def freePrimitive(self, primitive):
      if primitive is not None and not isinstance(primitive, PrimitiveSingle): primitive = PrimitiveSingle(primitive)
      primitive = ffi.NULL if primitive is None else primitive.impl
      lib.Mesh_freePrimitive(self.impl, ffi.cast("PrimitiveSingle *", primitive))

   def freePrimitiveGroup(self, group):
      if group is not None and not isinstance(group, PrimitiveGroup): group = PrimitiveGroup(group)
      if group is None: group = ffi.NULL
      lib.Mesh_freePrimitiveGroup(self.impl, group)

   def getData(self):
      return lib.Mesh_getData(self.impl)

   def lock(self, flags):
      if flags is not None and not isinstance(flags, MeshFeatures): flags = MeshFeatures(flags)
      if flags is None: flags = ffi.NULL
      return lib.Mesh_lock(self.impl, flags)

   def lockPrimitive(self, primitive):
      if primitive is not None and not isinstance(primitive, PrimitiveSingle): primitive = PrimitiveSingle(primitive)
      primitive = ffi.NULL if primitive is None else primitive.impl
      return lib.Mesh_lockPrimitive(self.impl, ffi.cast("PrimitiveSingle *", primitive))

   def lockPrimitiveGroup(self, group):
      if group is not None and not isinstance(group, PrimitiveGroup): group = PrimitiveGroup(group)
      if group is None: group = ffi.NULL
      return lib.Mesh_lockPrimitiveGroup(self.impl, group)

   def setData(self, value):
      lib.Mesh_setData(self.impl, value)

   def unlock(self, flags):
      if flags is not None and not isinstance(flags, MeshFeatures): flags = MeshFeatures(flags)
      if flags is None: flags = ffi.NULL
      lib.Mesh_unlock(self.impl, flags)

   def unlockPrimitive(self, primitive):
      if primitive is not None and not isinstance(primitive, PrimitiveSingle): primitive = PrimitiveSingle(primitive)
      primitive = ffi.NULL if primitive is None else primitive.impl
      lib.Mesh_unlockPrimitive(self.impl, ffi.cast("PrimitiveSingle *", primitive))

   def unlockPrimitiveGroup(self, group):
      if group is not None and not isinstance(group, PrimitiveGroup): group = PrimitiveGroup(group)
      if group is None: group = ffi.NULL
      lib.Mesh_unlockPrimitiveGroup(self.impl, group)

class MeshFeatures(pyBaseClass):
   def __init__(self, vertices = False, normals = False, texCoords1 = False, texCoords2 = False, doubleNormals = False, doubleVertices = False, colors = False, lightVectors = False, tangents = False, intVertices = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(vertices, MeshFeatures):
         self.impl = vertices.impl
      else:
         self.impl = (
            (vertices       << lib.MESHFEATURES_vertices_SHIFT)       |
            (normals        << lib.MESHFEATURES_normals_SHIFT)        |
            (texCoords1     << lib.MESHFEATURES_texCoords1_SHIFT)     |
            (texCoords2     << lib.MESHFEATURES_texCoords2_SHIFT)     |
            (doubleNormals  << lib.MESHFEATURES_doubleNormals_SHIFT)  |
            (doubleVertices << lib.MESHFEATURES_doubleVertices_SHIFT) |
            (colors         << lib.MESHFEATURES_colors_SHIFT)         |
            (lightVectors   << lib.MESHFEATURES_lightVectors_SHIFT)   |
            (tangents       << lib.MESHFEATURES_tangents_SHIFT)       |
            (intVertices    << lib.MESHFEATURES_intVertices_SHIFT)    )

   @property
   def vertices(self): return ((((self.impl)) & lib.MESHFEATURES_vertices_MASK) >> lib.MESHFEATURES_vertices_SHIFT)
   @vertices.setter
   def vertices(self, value): self.value = ((self.impl) & ~(lib.MESHFEATURES_vertices_MASK)) | (((value)) << lib.MESHFEATURES_vertices_SHIFT)

   @property
   def normals(self): return ((((self.impl)) & lib.MESHFEATURES_normals_MASK) >> lib.MESHFEATURES_normals_SHIFT)
   @normals.setter
   def normals(self, value): self.value = ((self.impl) & ~(lib.MESHFEATURES_normals_MASK)) | (((value)) << lib.MESHFEATURES_normals_SHIFT)

   @property
   def texCoords1(self): return ((((self.impl)) & lib.MESHFEATURES_texCoords1_MASK) >> lib.MESHFEATURES_texCoords1_SHIFT)
   @texCoords1.setter
   def texCoords1(self, value): self.value = ((self.impl) & ~(lib.MESHFEATURES_texCoords1_MASK)) | (((value)) << lib.MESHFEATURES_texCoords1_SHIFT)

   @property
   def texCoords2(self): return ((((self.impl)) & lib.MESHFEATURES_texCoords2_MASK) >> lib.MESHFEATURES_texCoords2_SHIFT)
   @texCoords2.setter
   def texCoords2(self, value): self.value = ((self.impl) & ~(lib.MESHFEATURES_texCoords2_MASK)) | (((value)) << lib.MESHFEATURES_texCoords2_SHIFT)

   @property
   def doubleNormals(self): return ((((self.impl)) & lib.MESHFEATURES_doubleNormals_MASK) >> lib.MESHFEATURES_doubleNormals_SHIFT)
   @doubleNormals.setter
   def doubleNormals(self, value): self.value = ((self.impl) & ~(lib.MESHFEATURES_doubleNormals_MASK)) | (((value)) << lib.MESHFEATURES_doubleNormals_SHIFT)

   @property
   def doubleVertices(self): return ((((self.impl)) & lib.MESHFEATURES_doubleVertices_MASK) >> lib.MESHFEATURES_doubleVertices_SHIFT)
   @doubleVertices.setter
   def doubleVertices(self, value): self.value = ((self.impl) & ~(lib.MESHFEATURES_doubleVertices_MASK)) | (((value)) << lib.MESHFEATURES_doubleVertices_SHIFT)

   @property
   def colors(self): return ((((self.impl)) & lib.MESHFEATURES_colors_MASK) >> lib.MESHFEATURES_colors_SHIFT)
   @colors.setter
   def colors(self, value): self.value = ((self.impl) & ~(lib.MESHFEATURES_colors_MASK)) | (((value)) << lib.MESHFEATURES_colors_SHIFT)

   @property
   def lightVectors(self): return ((((self.impl)) & lib.MESHFEATURES_lightVectors_MASK) >> lib.MESHFEATURES_lightVectors_SHIFT)
   @lightVectors.setter
   def lightVectors(self, value): self.value = ((self.impl) & ~(lib.MESHFEATURES_lightVectors_MASK)) | (((value)) << lib.MESHFEATURES_lightVectors_SHIFT)

   @property
   def tangents(self): return ((((self.impl)) & lib.MESHFEATURES_tangents_MASK) >> lib.MESHFEATURES_tangents_SHIFT)
   @tangents.setter
   def tangents(self, value): self.value = ((self.impl) & ~(lib.MESHFEATURES_tangents_MASK)) | (((value)) << lib.MESHFEATURES_tangents_SHIFT)

   @property
   def intVertices(self): return ((((self.impl)) & lib.MESHFEATURES_intVertices_MASK) >> lib.MESHFEATURES_intVertices_SHIFT)
   @intVertices.setter
   def intVertices(self, value): self.value = ((self.impl) & ~(lib.MESHFEATURES_intVertices_MASK)) | (((value)) << lib.MESHFEATURES_intVertices_SHIFT)

class Object:
   def __init__(self, transform = None, material = None, tag = None, frame = None, startFrame = None, endFrame = None, mesh = None, cameraTarget = None, flags = None, light = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("Object *", lib.Instance_new(lib.class_Object))
         if transform is not None:    self.transform         = transform
         if material is not None:     self.material          = material
         if tag is not None:          self.tag               = tag
         if frame is not None:        self.frame             = frame
         if startFrame is not None:   self.startFrame        = startFrame
         if endFrame is not None:     self.endFrame          = endFrame
         if mesh is not None:         self.mesh              = mesh
         if cameraTarget is not None: self.cameraTarget      = cameraTarget
         if flags is not None:        self.flags             = flags
         if light is not None:        self.light             = light
         if transform is not None:    self.transform    = transform
         if material is not None:     self.material     = material
         if tag is not None:          self.tag          = tag
         if frame is not None:        self.frame        = frame
         if startFrame is not None:   self.startFrame   = startFrame
         if endFrame is not None:     self.endFrame     = endFrame
         if mesh is not None:         self.mesh         = mesh
         if cameraTarget is not None: self.cameraTarget = cameraTarget
         if flags is not None:        self.flags        = flags
         if light is not None:        self.light        = light

   @property
   def transform(self): value = Transform(); lib.Object_get_transform(self.impl, ffi.cast("Transform *", value.impl)); return value
   @transform.setter
   def transform(self, value):
      if not isinstance(value, Transform): value = Transform(value)
      lib.Object_set_transform(self.impl, ffi.cast("Transform *", value.impl))

   @property
   def material(self): return lib.Object_get_material(self.impl, value.impl)
   @material.setter
   def material(self, value):
      if not isinstance(value, Material): value = Material(value)
      lib.Object_set_material(self.impl, value.impl)

   @property
   def max(self): value = Vector3Df(); lib.Object_get_max(self.impl, ffi.cast("Vector3Df *", value.impl)); return value

   @property
   def min(self): value = Vector3Df(); lib.Object_get_min(self.impl, ffi.cast("Vector3Df *", value.impl)); return value

   @property
   def center(self): value = Vector3Df(); lib.Object_get_center(self.impl, ffi.cast("Vector3Df *", value.impl)); return value

   @property
   def radius(self): return lib.Object_get_radius(self.impl)

   @property
   def wmax(self): value = Vector3D(); lib.Object_get_wmax(self.impl, ffi.cast("Vector3D *", value.impl)); return value

   @property
   def wmin(self): value = Vector3D(); lib.Object_get_wmin(self.impl, ffi.cast("Vector3D *", value.impl)); return value

   @property
   def wcenter(self): value = Vector3D(); lib.Object_get_wcenter(self.impl, ffi.cast("Vector3D *", value.impl)); return value

   @property
   def wradius(self): return lib.Object_get_wradius(self.impl)

   @property
   def tag(self): return lib.Object_get_tag(self.impl)
   @tag.setter
   def tag(self, value):
      lib.Object_set_tag(self.impl, value)

   @property
   def frame(self): return lib.Object_get_frame(self.impl)
   @frame.setter
   def frame(self, value):
      lib.Object_set_frame(self.impl, value)

   @property
   def startFrame(self): return lib.Object_get_startFrame(self.impl)
   @startFrame.setter
   def startFrame(self, value):
      lib.Object_set_startFrame(self.impl, value)

   @property
   def endFrame(self): return lib.Object_get_endFrame(self.impl)
   @endFrame.setter
   def endFrame(self, value):
      lib.Object_set_endFrame(self.impl, value)

   @property
   def mesh(self): return lib.Object_get_mesh(self.impl, value.impl)
   @mesh.setter
   def mesh(self, value):
      if not isinstance(value, Mesh): value = Mesh(value)
      lib.Object_set_mesh(self.impl, value.impl)

   @property
   def camera(self): return pyOrNewObject(Camera, lib.Object_get_camera(self.impl))

   @property
   def firstChild(self): return lib.Object_get_firstChild(self.impl, value.impl)

   @property
   def next(self): return lib.Object_get_next(self.impl, value.impl)

   @property
   def name(self): value = lib.Object_get_name(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')

   @property
   def matrix(self): value = Matrix(); lib.Object_get_matrix(self.impl, ffi.cast("Matrix *", value.impl)); return value

   @property
   def cameraTarget(self): return lib.Object_get_cameraTarget(self.impl, value.impl)
   @cameraTarget.setter
   def cameraTarget(self, value):
      if not isinstance(value, Object): value = Object(value)
      lib.Object_set_cameraTarget(self.impl, value.impl)

   @property
   def tracks(self): return lib.Object_get_tracks(self.impl)

   @property
   def flags(self): return ObjectFlags(impl = lib.Object_get_flags(self.impl))
   @flags.setter
   def flags(self, value):
      if not isinstance(value, ObjectFlags): value = ObjectFlags(value)
      lib.Object_set_flags(self.impl, value.impl)

   @property
   def parent(self): return lib.Object_get_parent(self.impl, value.impl)

   @property
   def numChildren(self): return lib.Object_get_numChildren(self.impl)

   @property
   def localMatrixPtr(self): return lib.Object_get_localMatrixPtr(self.impl)

   @property
   def matrixPtr(self): return lib.Object_get_matrixPtr(self.impl)

   @property
   def light(self): value = Light(); lib.Object_get_light(self.impl, ffi.cast("Light *", value.impl)); return value
   @light.setter
   def light(self, value):
      if not isinstance(value, Light): value = Light(value)
      lib.Object_set_light(self.impl, ffi.cast("Light *", value.impl))

   def add(self, object):
      if object is not None and not isinstance(object, Object): object = Object(object)
      if object is None: object = ffi.NULL
      lib.Object_add(self.impl, object)

   def addName(self, object, name):
      if object is not None and not isinstance(object, Object): object = Object(object)
      if object is None: object = ffi.NULL
      return lib.Object_addName(self.impl, object, name.encode('utf8'))

   def animate(self, frame):
      lib.Object_animate(self.impl, frame)

   def doubleSided(self, flag):
      lib.Object_doubleSided(self.impl, flag)

   def duplicate(self, model):
      if model is not None and not isinstance(model, Object): model = Object(model)
      if model is None: model = ffi.NULL
      lib.Object_duplicate(self.impl, model)

   def find(self, name):
      return pyOrNewObject(Object, lib.Object_find(self.impl, name.encode('utf8')))

   def free(self, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      lib.Object_free(self.impl, displaySystem)

   def freeMesh(self, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      lib.Object_freeMesh(self.impl, displaySystem)

   def initialize(self):
      lib.Object_initialize(self.impl)

   def initializeMesh(self, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return pyOrNewObject(Mesh, lib.Object_initializeMesh(self.impl, displaySystem))

   def intersectsGroundPolygon(self, count, pointfs):
      return lib.Object_intersectsGroundPolygon(self.impl, count, pointfs)

   def load(self, fileName, type, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Object_load(self.impl, fileName.encode('utf8'), type.encode('utf8'), displaySystem)

   def merge(self, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Object_merge(self.impl, displaySystem)

   def move(self, direction):
      if direction is not None and not isinstance(direction, Vector3D): direction = Vector3D(direction)
      direction = ffi.NULL if direction is None else direction.impl
      lib.Object_move(self.impl, ffi.cast("Vector3D *", direction))

   def rotateEuler(self, rotation, min, max):
      if rotation is not None and not isinstance(rotation, Euler): rotation = Euler(rotation)
      rotation = ffi.NULL if rotation is None else rotation.impl
      if min is not None and not isinstance(min, Euler): min = Euler(min)
      min = ffi.NULL if min is None else min.impl
      if max is not None and not isinstance(max, Euler): max = Euler(max)
      max = ffi.NULL if max is None else max.impl
      lib.Object_rotateEuler(self.impl, ffi.cast("Euler *", rotation), ffi.cast("Euler *", min), ffi.cast("Euler *", max))

   def setMinMaxRadius(self, processMesh):
      lib.Object_setMinMaxRadius(self.impl, processMesh)

   def updateTransform(self):
      lib.Object_updateTransform(self.impl)

class ObjectFlags(pyBaseClass):
   def __init__(self, root = False, viewSpace = False, ownMesh = False, translucent = False, flipWindings = False, keysLoaded = False, transform = False, mesh = False, light = False, camera = False, localMatrixSet = False, computeLightVectors = False, hierarchy = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(root, ObjectFlags):
         self.impl = root.impl
      else:
         self.impl = (
            (root                << lib.OBJECTFLAGS_root_SHIFT)                |
            (viewSpace           << lib.OBJECTFLAGS_viewSpace_SHIFT)           |
            (ownMesh             << lib.OBJECTFLAGS_ownMesh_SHIFT)             |
            (translucent         << lib.OBJECTFLAGS_translucent_SHIFT)         |
            (flipWindings        << lib.OBJECTFLAGS_flipWindings_SHIFT)        |
            (keysLoaded          << lib.OBJECTFLAGS_keysLoaded_SHIFT)          |
            (transform           << lib.OBJECTFLAGS_transform_SHIFT)           |
            (mesh                << lib.OBJECTFLAGS_mesh_SHIFT)                |
            (light               << lib.OBJECTFLAGS_light_SHIFT)               |
            (camera              << lib.OBJECTFLAGS_camera_SHIFT)              |
            (localMatrixSet      << lib.OBJECTFLAGS_localMatrixSet_SHIFT)      |
            (computeLightVectors << lib.OBJECTFLAGS_computeLightVectors_SHIFT) |
            (hierarchy           << lib.OBJECTFLAGS_hierarchy_SHIFT)           )

   @property
   def root(self): return ((((self.impl)) & lib.OBJECTFLAGS_root_MASK) >> lib.OBJECTFLAGS_root_SHIFT)
   @root.setter
   def root(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_root_MASK)) | (((value)) << lib.OBJECTFLAGS_root_SHIFT)

   @property
   def viewSpace(self): return ((((self.impl)) & lib.OBJECTFLAGS_viewSpace_MASK) >> lib.OBJECTFLAGS_viewSpace_SHIFT)
   @viewSpace.setter
   def viewSpace(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_viewSpace_MASK)) | (((value)) << lib.OBJECTFLAGS_viewSpace_SHIFT)

   @property
   def ownMesh(self): return ((((self.impl)) & lib.OBJECTFLAGS_ownMesh_MASK) >> lib.OBJECTFLAGS_ownMesh_SHIFT)
   @ownMesh.setter
   def ownMesh(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_ownMesh_MASK)) | (((value)) << lib.OBJECTFLAGS_ownMesh_SHIFT)

   @property
   def translucent(self): return ((((self.impl)) & lib.OBJECTFLAGS_translucent_MASK) >> lib.OBJECTFLAGS_translucent_SHIFT)
   @translucent.setter
   def translucent(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_translucent_MASK)) | (((value)) << lib.OBJECTFLAGS_translucent_SHIFT)

   @property
   def flipWindings(self): return ((((self.impl)) & lib.OBJECTFLAGS_flipWindings_MASK) >> lib.OBJECTFLAGS_flipWindings_SHIFT)
   @flipWindings.setter
   def flipWindings(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_flipWindings_MASK)) | (((value)) << lib.OBJECTFLAGS_flipWindings_SHIFT)

   @property
   def keysLoaded(self): return ((((self.impl)) & lib.OBJECTFLAGS_keysLoaded_MASK) >> lib.OBJECTFLAGS_keysLoaded_SHIFT)
   @keysLoaded.setter
   def keysLoaded(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_keysLoaded_MASK)) | (((value)) << lib.OBJECTFLAGS_keysLoaded_SHIFT)

   @property
   def transform(self): return ((((self.impl)) & lib.OBJECTFLAGS_transform_MASK) >> lib.OBJECTFLAGS_transform_SHIFT)
   @transform.setter
   def transform(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_transform_MASK)) | (((value)) << lib.OBJECTFLAGS_transform_SHIFT)

   @property
   def mesh(self): return ((((self.impl)) & lib.OBJECTFLAGS_mesh_MASK) >> lib.OBJECTFLAGS_mesh_SHIFT)
   @mesh.setter
   def mesh(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_mesh_MASK)) | (((value)) << lib.OBJECTFLAGS_mesh_SHIFT)

   @property
   def light(self): return ((((self.impl)) & lib.OBJECTFLAGS_light_MASK) >> lib.OBJECTFLAGS_light_SHIFT)
   @light.setter
   def light(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_light_MASK)) | (((value)) << lib.OBJECTFLAGS_light_SHIFT)

   @property
   def camera(self): return ((((self.impl)) & lib.OBJECTFLAGS_camera_MASK) >> lib.OBJECTFLAGS_camera_SHIFT)
   @camera.setter
   def camera(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_camera_MASK)) | (((value)) << lib.OBJECTFLAGS_camera_SHIFT)

   @property
   def localMatrixSet(self): return ((((self.impl)) & lib.OBJECTFLAGS_localMatrixSet_MASK) >> lib.OBJECTFLAGS_localMatrixSet_SHIFT)
   @localMatrixSet.setter
   def localMatrixSet(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_localMatrixSet_MASK)) | (((value)) << lib.OBJECTFLAGS_localMatrixSet_SHIFT)

   @property
   def computeLightVectors(self): return ((((self.impl)) & lib.OBJECTFLAGS_computeLightVectors_MASK) >> lib.OBJECTFLAGS_computeLightVectors_SHIFT)
   @computeLightVectors.setter
   def computeLightVectors(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_computeLightVectors_MASK)) | (((value)) << lib.OBJECTFLAGS_computeLightVectors_SHIFT)

   @property
   def hierarchy(self): return ((((self.impl)) & lib.OBJECTFLAGS_hierarchy_MASK) >> lib.OBJECTFLAGS_hierarchy_SHIFT)
   @hierarchy.setter
   def hierarchy(self, value): self.value = ((self.impl) & ~(lib.OBJECTFLAGS_hierarchy_MASK)) | (((value)) << lib.OBJECTFLAGS_hierarchy_SHIFT)

class ObjectFormat(Instance):
   def __init__(self,
                impl = None):
      Instance.__init__(self, impl = impl)

class Plane:
   def __init__(self, a = None, b = None, c = None, d = None, normal = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("Plane *", impl)
      else:
         if isinstance(a, tuple):
            __tuple = a
            a = 0.0
            if len(__tuple) > 0: a      = __tuple[0]
            if len(__tuple) > 1: d      = __tuple[1]
         if normal is not None:
            if not isinstance(normal, Vector3D): normal = Vector3D(normal)
         __members = { }
         if a is not None:      __members['a']      = a
         if b is not None:      __members['b']      = b
         if c is not None:      __members['c']      = c
         if d is not None:      __members['d']      = d
         if normal is not None: __members['normal'] = normal.impl[0]
         self.impl = ffi.new("Plane *", __members)

   @property
   def a(self): return self.impl.a
   @a.setter
   def a(self, value): self.impl.a = value

   @property
   def b(self): return self.impl.b
   @b.setter
   def b(self, value): self.impl.b = value

   @property
   def c(self): return self.impl.c
   @c.setter
   def c(self, value): self.impl.c = value

   @property
   def d(self): return self.impl.d
   @d.setter
   def d(self, value): self.impl.d = value

   @property
   def normal(self): return Vector3D(impl = self.impl.normal)
   @normal.setter
   def normal(self, value):
      if not isinstance(value, Vector3D): value = Vector3D(value)
      self.impl.normal = value.impl[0]

   def fromPointNormal(self, normal, point):
      if normal is not None and not isinstance(normal, Vector3D): normal = Vector3D(normal)
      normal = ffi.NULL if normal is None else normal.impl
      if point is not None and not isinstance(point, Vector3D): point = Vector3D(point)
      point = ffi.NULL if point is None else point.impl
      lib.Plane_fromPointNormal(ffi.cast("Plane *", self.impl), ffi.cast("Vector3D *", normal), ffi.cast("Vector3D *", point))

   def fromPoints(self, v1, v2, v3):
      if v1 is not None and not isinstance(v1, Vector3D): v1 = Vector3D(v1)
      v1 = ffi.NULL if v1 is None else v1.impl
      if v2 is not None and not isinstance(v2, Vector3D): v2 = Vector3D(v2)
      v2 = ffi.NULL if v2 is None else v2.impl
      if v3 is not None and not isinstance(v3, Vector3D): v3 = Vector3D(v3)
      v3 = ffi.NULL if v3 is None else v3.impl
      lib.Plane_fromPoints(ffi.cast("Plane *", self.impl), ffi.cast("Vector3D *", v1), ffi.cast("Vector3D *", v2), ffi.cast("Vector3D *", v3))

   def fromPointsf(self, v1, v2, v3):
      if v1 is not None and not isinstance(v1, Vector3Df): v1 = Vector3Df(v1)
      v1 = ffi.NULL if v1 is None else v1.impl
      if v2 is not None and not isinstance(v2, Vector3Df): v2 = Vector3Df(v2)
      v2 = ffi.NULL if v2 is None else v2.impl
      if v3 is not None and not isinstance(v3, Vector3Df): v3 = Vector3Df(v3)
      v3 = ffi.NULL if v3 is None else v3.impl
      lib.Plane_fromPointsf(ffi.cast("Plane *", self.impl), ffi.cast("Vector3Df *", v1), ffi.cast("Vector3Df *", v2), ffi.cast("Vector3Df *", v3))

   def intersectLine(self, line, result):
      if line is not None and not isinstance(line, Line): line = Line(line)
      line = ffi.NULL if line is None else line.impl
      if result is not None and not isinstance(result, Vector3D): result = Vector3D(result)
      result = ffi.NULL if result is None else result.impl
      lib.Plane_intersectLine(ffi.cast("Plane *", self.impl), ffi.cast("Line *", line), ffi.cast("Vector3D *", result))

   def intersectLinef(self, line, result):
      if line is not None and not isinstance(line, Line): line = Line(line)
      line = ffi.NULL if line is None else line.impl
      if result is not None and not isinstance(result, Vector3Df): result = Vector3Df(result)
      result = ffi.NULL if result is None else result.impl
      lib.Plane_intersectLinef(ffi.cast("Plane *", self.impl), ffi.cast("Line *", line), ffi.cast("Vector3Df *", result))

   def multMatrix(self, source, inverseTranspose):
      if source is not None and not isinstance(source, Plane): source = Plane(source)
      source = ffi.NULL if source is None else source.impl
      if inverseTranspose is not None and not isinstance(inverseTranspose, Matrix): inverseTranspose = Matrix(inverseTranspose)
      inverseTranspose = ffi.NULL if inverseTranspose is None else inverseTranspose.impl
      lib.Plane_multMatrix(ffi.cast("Plane *", self.impl), ffi.cast("Plane *", source), ffi.cast("Matrix *", inverseTranspose))

class PrimitiveGroup:
   def __init__(self, prev = None, next = None, type = None, indices = None, nIndices = None, material = None, first = None, nVertices = None, indices32 = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("PrimitiveGroup *", lib.Instance_new(lib.class_PrimitiveGroup))
         if prev is not None:      self.prev      = prev
         if next is not None:      self.next      = next
         if type is not None:      self.type      = type
         if indices is not None:   self.indices   = indices
         if nIndices is not None:  self.nIndices  = nIndices
         if material is not None:  self.material  = material
         if first is not None:     self.first     = first
         if nVertices is not None: self.nVertices = nVertices
         if indices32 is not None: self.indices32 = indices32

   @property
   def prev(self): return self.impl.prev
   @prev.setter
   def prev(self, value):
      if not isinstance(value, PrimitiveGroup): value = PrimitiveGroup(value)
      self.impl.prev = value

   @property
   def next(self): return self.impl.next
   @next.setter
   def next(self, value):
      if not isinstance(value, PrimitiveGroup): value = PrimitiveGroup(value)
      self.impl.next = value

   @property
   def type(self): return PrimitiveGroupType(impl = self.impl.type)
   @type.setter
   def type(self, value):
      if not isinstance(value, PrimitiveGroupType): value = PrimitiveGroupType(value)
      self.impl.type = value.impl

   @property
   def indices(self): return self.impl.indices
   @indices.setter
   def indices(self, value): self.impl.indices = value

   @property
   def nIndices(self): return self.impl.nIndices
   @nIndices.setter
   def nIndices(self, value): self.impl.nIndices = value

   @property
   def material(self): return self.impl.material
   @material.setter
   def material(self, value):
      if not isinstance(value, Material): value = Material(value)
      self.impl.material = value

   @property
   def first(self): return self.impl.first
   @first.setter
   def first(self, value): self.impl.first = value

   @property
   def nVertices(self): return self.impl.nVertices
   @nVertices.setter
   def nVertices(self, value): self.impl.nVertices = value

   @property
   def indices32(self): return self.impl.indices32
   @indices32.setter
   def indices32(self, value): self.impl.indices32 = value

class PrimitiveSingle:
   def __init__(self, type = None, indices = None, nIndices = None, material = None, first = None, nVertices = None, indices32 = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("PrimitiveSingle *", impl)
      else:
         if type is not None:
            if not isinstance(type, PrimitiveGroupType): type = PrimitiveGroupType(type)
         if material is not None:
            if not isinstance(material, Material): material = Material(material)
         __members = { }
         if type is not None:      __members['type']      = type.impl[0]
         if indices is not None:   __members['indices']   = indices.impl[0]
         if nIndices is not None:  __members['nIndices']  = nIndices
         if material is not None:  __members['material']  = material.impl[0]
         if first is not None:     __members['first']     = first
         if nVertices is not None: __members['nVertices'] = nVertices
         if indices32 is not None: __members['indices32'] = indices32
         self.impl = ffi.new("PrimitiveSingle *", __members)

   @property
   def type(self): return PrimitiveGroupType(impl = self.impl.type)
   @type.setter
   def type(self, value):
      if not isinstance(value, PrimitiveGroupType): value = PrimitiveGroupType(value)
      self.impl.type = value.impl

   @property
   def indices(self): return self.impl.indices
   @indices.setter
   def indices(self, value): self.impl.indices = value

   @property
   def nIndices(self): return self.impl.nIndices
   @nIndices.setter
   def nIndices(self, value): self.impl.nIndices = value

   @property
   def material(self): return self.impl.material
   @material.setter
   def material(self, value):
      if not isinstance(value, Material): value = Material(value)
      self.impl.material = value

   @property
   def first(self): return self.impl.first
   @first.setter
   def first(self, value): self.impl.first = value

   @property
   def nVertices(self): return self.impl.nVertices
   @nVertices.setter
   def nVertices(self, value): self.impl.nVertices = value

   @property
   def indices32(self): return self.impl.indices32
   @indices32.setter
   def indices32(self, value): self.impl.indices32 = value

class Quaternion:
   def __init__(self, w = 0.0, x = 0.0, y = 0.0, z = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("Quaternion *", impl)
      else:
         if isinstance(w, tuple):
            __tuple = w
            w = 0.0
            if len(__tuple) > 0: w = __tuple[0]
            if len(__tuple) > 1: x = __tuple[1]
            if len(__tuple) > 2: y = __tuple[2]
            if len(__tuple) > 3: z = __tuple[3]
         self.impl = ffi.new("Quaternion *", { 'w' : w, 'x' : x, 'y' : y, 'z' : z })

   @property
   def w(self): return self.impl.w
   @w.setter
   def w(self, value): self.impl.w = value

   @property
   def x(self): return self.impl.x
   @x.setter
   def x(self, value): self.impl.x = value

   @property
   def y(self): return self.impl.y
   @y.setter
   def y(self, value): self.impl.y = value

   @property
   def z(self): return self.impl.z
   @z.setter
   def z(self, value): self.impl.z = value

   def divide(self, q1, q2):
      if q1 is not None and not isinstance(q1, Quaternion): q1 = Quaternion(q1)
      q1 = ffi.NULL if q1 is None else q1.impl
      if q2 is not None and not isinstance(q2, Quaternion): q2 = Quaternion(q2)
      q2 = ffi.NULL if q2 is None else q2.impl
      lib.Quaternion_divide(ffi.cast("Quaternion *", self.impl), ffi.cast("Quaternion *", q1), ffi.cast("Quaternion *", q2))

   def identity(self):
      lib.Quaternion_identity(ffi.cast("Quaternion *", self.impl))

   def inverse(self, source):
      if source is not None and not isinstance(source, Quaternion): source = Quaternion(source)
      source = ffi.NULL if source is None else source.impl
      lib.Quaternion_inverse(ffi.cast("Quaternion *", self.impl), ffi.cast("Quaternion *", source))

   def multiply(self, q1, q2):
      if q1 is not None and not isinstance(q1, Quaternion): q1 = Quaternion(q1)
      q1 = ffi.NULL if q1 is None else q1.impl
      if q2 is not None and not isinstance(q2, Quaternion): q2 = Quaternion(q2)
      q2 = ffi.NULL if q2 is None else q2.impl
      lib.Quaternion_multiply(ffi.cast("Quaternion *", self.impl), ffi.cast("Quaternion *", q1), ffi.cast("Quaternion *", q2))

   def normalize(self, source):
      if source is not None and not isinstance(source, Quaternion): source = Quaternion(source)
      source = ffi.NULL if source is None else source.impl
      lib.Quaternion_normalize(ffi.cast("Quaternion *", self.impl), ffi.cast("Quaternion *", source))

   def pitch(self, angle):
      if angle is not None and not isinstance(angle, Angle): angle = Degrees(angle)
      if angle is None: angle = ffi.NULL
      lib.Quaternion_pitch(ffi.cast("Quaternion *", self.impl), angle)

   def roll(self, angle):
      if angle is not None and not isinstance(angle, Angle): angle = Degrees(angle)
      if angle is None: angle = ffi.NULL
      lib.Quaternion_roll(ffi.cast("Quaternion *", self.impl), angle)

   def rotatePitch(self, pitch):
      if pitch is not None and not isinstance(pitch, Angle): pitch = Degrees(pitch)
      if pitch is None: pitch = ffi.NULL
      lib.Quaternion_rotatePitch(ffi.cast("Quaternion *", self.impl), pitch)

   def rotateRoll(self, roll):
      if roll is not None and not isinstance(roll, Angle): roll = Degrees(roll)
      if roll is None: roll = ffi.NULL
      lib.Quaternion_rotateRoll(ffi.cast("Quaternion *", self.impl), roll)

   def rotateYaw(self, yaw):
      if yaw is not None and not isinstance(yaw, Angle): yaw = Degrees(yaw)
      if yaw is None: yaw = ffi.NULL
      lib.Quaternion_rotateYaw(ffi.cast("Quaternion *", self.impl), yaw)

   def rotateYawPitch(self, yaw, pitch):
      if yaw is not None and not isinstance(yaw, Angle): yaw = Degrees(yaw)
      if yaw is None: yaw = ffi.NULL
      if pitch is not None and not isinstance(pitch, Angle): pitch = Degrees(pitch)
      if pitch is None: pitch = ffi.NULL
      lib.Quaternion_rotateYawPitch(ffi.cast("Quaternion *", self.impl), yaw, pitch)

   def rotationAxis(self, axis, angle):
      if axis is not None and not isinstance(axis, Vector3D): axis = Vector3D(axis)
      axis = ffi.NULL if axis is None else axis.impl
      if angle is not None and not isinstance(angle, Angle): angle = Degrees(angle)
      if angle is None: angle = ffi.NULL
      lib.Quaternion_rotationAxis(ffi.cast("Quaternion *", self.impl), ffi.cast("Vector3D *", axis), angle)

   def rotationDirection(self, direction):
      if direction is not None and not isinstance(direction, Vector3D): direction = Vector3D(direction)
      direction = ffi.NULL if direction is None else direction.impl
      lib.Quaternion_rotationDirection(ffi.cast("Quaternion *", self.impl), ffi.cast("Vector3D *", direction))

   def rotationMatrix(self, m):
      if m is not None and not isinstance(m, Matrix): m = Matrix(m)
      m = ffi.NULL if m is None else m.impl
      lib.Quaternion_rotationMatrix(ffi.cast("Quaternion *", self.impl), ffi.cast("Matrix *", m))

   def rotationYawPitchRoll(self, euler):
      if euler is not None and not isinstance(euler, Euler): euler = Euler(euler)
      euler = ffi.NULL if euler is None else euler.impl
      lib.Quaternion_rotationYawPitchRoll(ffi.cast("Quaternion *", self.impl), ffi.cast("Euler *", euler))

   def slerp(self, _from, to, t):
      if _from is not None and not isinstance(_from, Quaternion): _from = Quaternion(_from)
      _from = ffi.NULL if _from is None else _from.impl
      if to is not None and not isinstance(to, Quaternion): to = Quaternion(to)
      to = ffi.NULL if to is None else to.impl
      lib.Quaternion_slerp(ffi.cast("Quaternion *", self.impl), ffi.cast("Quaternion *", _from), ffi.cast("Quaternion *", to), t)

   def toDirection(self, direction):
      if direction is not None and not isinstance(direction, Vector3D): direction = Vector3D(direction)
      direction = ffi.NULL if direction is None else direction.impl
      lib.Quaternion_toDirection(ffi.cast("Quaternion *", self.impl), ffi.cast("Vector3D *", direction))

   def yaw(self, angle):
      if angle is not None and not isinstance(angle, Angle): angle = Degrees(angle)
      if angle is None: angle = ffi.NULL
      lib.Quaternion_yaw(ffi.cast("Quaternion *", self.impl), angle)

   def yawPitch(self, yaw, pitch):
      if yaw is not None and not isinstance(yaw, Angle): yaw = Degrees(yaw)
      if yaw is None: yaw = ffi.NULL
      if pitch is not None and not isinstance(pitch, Angle): pitch = Degrees(pitch)
      if pitch is None: pitch = ffi.NULL
      lib.Quaternion_yawPitch(ffi.cast("Quaternion *", self.impl), yaw, pitch)

class RenderPrimitiveType(PrimitiveGroupType):
   dot       = PrimitiveGroupType(impl = lib.RenderPrimitiveType_dot)
   lines     = PrimitiveGroupType(impl = lib.RenderPrimitiveType_lines)
   triangles = PrimitiveGroupType(impl = lib.RenderPrimitiveType_triangles)
   triStrip  = PrimitiveGroupType(impl = lib.RenderPrimitiveType_triStrip)
   triFan    = PrimitiveGroupType(impl = lib.RenderPrimitiveType_triFan)
   quads     = PrimitiveGroupType(impl = lib.RenderPrimitiveType_quads)
   quadStrip = PrimitiveGroupType(impl = lib.RenderPrimitiveType_quadStrip)
   lineStrip = PrimitiveGroupType(impl = lib.RenderPrimitiveType_lineStrip)

class Transform:
   def __init__(self, position = None, orientation = None, scaling = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("Transform *", impl)
      else:
         if isinstance(position, tuple):
            __tuple = position
            position = None
            if len(__tuple) > 0: position    = __tuple[0]
            if len(__tuple) > 1: orientation = __tuple[1]
            if len(__tuple) > 2: scaling     = __tuple[2]
         if position is not None:
            if not isinstance(position, Vector3D): position = Vector3D(position)
            position = position.impl
         if orientation is not None:
            if not isinstance(orientation, Quaternion): orientation = Quaternion(orientation)
            orientation = orientation.impl
         if scaling is not None:
            if not isinstance(scaling, Vector3Df): scaling = Vector3Df(scaling)
            scaling = scaling.impl
         self.impl = ffi.new("Transform *", { 'position' : position, 'orientation' : orientation, 'scaling' : scaling })

   @property
   def position(self): return Vector3D(impl = self.impl.position)
   @position.setter
   def position(self, value):
      if not isinstance(value, Vector3D): value = Vector3D(value)
      self.impl.position = value.impl[0]

   @property
   def orientation(self): return Quaternion(impl = self.impl.orientation)
   @orientation.setter
   def orientation(self, value):
      if not isinstance(value, Quaternion): value = Quaternion(value)
      self.impl.orientation = value.impl[0]

   @property
   def scaling(self): return Vector3Df(impl = self.impl.scaling)
   @scaling.setter
   def scaling(self, value):
      if not isinstance(value, Vector3Df): value = Vector3Df(value)
      self.impl.scaling = value.impl[0]

class Vector3D:
   def __init__(self, x = 0.0, y = 0.0, z = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("Vector3D *", impl)
      else:
         if isinstance(x, tuple):
            __tuple = x
            x = 0.0
            if len(__tuple) > 0: x = __tuple[0]
            if len(__tuple) > 1: y = __tuple[1]
            if len(__tuple) > 2: z = __tuple[2]
         self.impl = ffi.new("Vector3D *", { 'x' : x, 'y' : y, 'z' : z })

   @property
   def x(self): return self.impl.x
   @x.setter
   def x(self, value): self.impl.x = value

   @property
   def y(self): return self.impl.y
   @y.setter
   def y(self, value): self.impl.y = value

   @property
   def z(self): return self.impl.z
   @z.setter
   def z(self, value): self.impl.z = value

   @property
   def length(self): return lib.Vector3D_get_length(self.impl)

   @property
   def lengthApprox(self): return lib.Vector3D_get_lengthApprox(self.impl)

   def add(self, vector1, vector2):
      if vector1 is not None and not isinstance(vector1, Vector3D): vector1 = Vector3D(vector1)
      vector1 = ffi.NULL if vector1 is None else vector1.impl
      if vector2 is not None and not isinstance(vector2, Vector3D): vector2 = Vector3D(vector2)
      vector2 = ffi.NULL if vector2 is None else vector2.impl
      lib.Vector3D_add(ffi.cast("Vector3D *", self.impl), ffi.cast("Vector3D *", vector1), ffi.cast("Vector3D *", vector2))

   def crossProduct(self, vector1, vector2):
      if vector1 is not None and not isinstance(vector1, Vector3D): vector1 = Vector3D(vector1)
      vector1 = ffi.NULL if vector1 is None else vector1.impl
      if vector2 is not None and not isinstance(vector2, Vector3D): vector2 = Vector3D(vector2)
      vector2 = ffi.NULL if vector2 is None else vector2.impl
      lib.Vector3D_crossProduct(ffi.cast("Vector3D *", self.impl), ffi.cast("Vector3D *", vector1), ffi.cast("Vector3D *", vector2))

   def divideMatrix(self, source, matrix):
      if source is not None and not isinstance(source, Vector3D): source = Vector3D(source)
      source = ffi.NULL if source is None else source.impl
      if matrix is not None and not isinstance(matrix, Matrix): matrix = Matrix(matrix)
      matrix = ffi.NULL if matrix is None else matrix.impl
      lib.Vector3D_divideMatrix(ffi.cast("Vector3D *", self.impl), ffi.cast("Vector3D *", source), ffi.cast("Matrix *", matrix))

   def dotProduct(self, vector2):
      if vector2 is not None and not isinstance(vector2, Vector3D): vector2 = Vector3D(vector2)
      vector2 = ffi.NULL if vector2 is None else vector2.impl
      lib.Vector3D_dotProduct(ffi.cast("Vector3D *", self.impl), ffi.cast("Vector3D *", vector2))

   def dotProductf(self, vector2):
      if vector2 is not None and not isinstance(vector2, Vector3Df): vector2 = Vector3Df(vector2)
      vector2 = ffi.NULL if vector2 is None else vector2.impl
      lib.Vector3D_dotProductf(ffi.cast("Vector3D *", self.impl), ffi.cast("Vector3Df *", vector2))

   def multMatrix(self, source, matrix):
      if source is not None and not isinstance(source, Vector3D): source = Vector3D(source)
      source = ffi.NULL if source is None else source.impl
      if matrix is not None and not isinstance(matrix, Matrix): matrix = Matrix(matrix)
      matrix = ffi.NULL if matrix is None else matrix.impl
      lib.Vector3D_multMatrix(ffi.cast("Vector3D *", self.impl), ffi.cast("Vector3D *", source), ffi.cast("Matrix *", matrix))

   def multMatrixf(self, source, matrix):
      if source is not None and not isinstance(source, Vector3Df): source = Vector3Df(source)
      source = ffi.NULL if source is None else source.impl
      if matrix is not None and not isinstance(matrix, Matrix): matrix = Matrix(matrix)
      matrix = ffi.NULL if matrix is None else matrix.impl
      lib.Vector3D_multMatrixf(ffi.cast("Vector3D *", self.impl), ffi.cast("Vector3Df *", source), ffi.cast("Matrix *", matrix))

   def normalize(self, source):
      if source is not None and not isinstance(source, Vector3D): source = Vector3D(source)
      source = ffi.NULL if source is None else source.impl
      lib.Vector3D_normalize(ffi.cast("Vector3D *", self.impl), ffi.cast("Vector3D *", source))

   def scale(self, vector1, s):
      if vector1 is not None and not isinstance(vector1, Vector3D): vector1 = Vector3D(vector1)
      vector1 = ffi.NULL if vector1 is None else vector1.impl
      lib.Vector3D_scale(ffi.cast("Vector3D *", self.impl), ffi.cast("Vector3D *", vector1), s)

   def subtract(self, vector1, vector2):
      if vector1 is not None and not isinstance(vector1, Vector3D): vector1 = Vector3D(vector1)
      vector1 = ffi.NULL if vector1 is None else vector1.impl
      if vector2 is not None and not isinstance(vector2, Vector3D): vector2 = Vector3D(vector2)
      vector2 = ffi.NULL if vector2 is None else vector2.impl
      lib.Vector3D_subtract(ffi.cast("Vector3D *", self.impl), ffi.cast("Vector3D *", vector1), ffi.cast("Vector3D *", vector2))

class Vector3Df:
   def __init__(self, x = 0.0, y = 0.0, z = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("Vector3Df *", impl)
      else:
         if isinstance(x, tuple):
            __tuple = x
            x = 0.0
            if len(__tuple) > 0: x = __tuple[0]
            if len(__tuple) > 1: y = __tuple[1]
            if len(__tuple) > 2: z = __tuple[2]
         self.impl = ffi.new("Vector3Df *", { 'x' : x, 'y' : y, 'z' : z })

   @property
   def x(self): return self.impl.x
   @x.setter
   def x(self, value): self.impl.x = value

   @property
   def y(self): return self.impl.y
   @y.setter
   def y(self, value): self.impl.y = value

   @property
   def z(self): return self.impl.z
   @z.setter
   def z(self, value): self.impl.z = value

   @property
   def length(self): return lib.Vector3Df_get_length(self.impl)

   @property
   def lengthApprox(self): return lib.Vector3Df_get_lengthApprox(self.impl)

   def add(self, vector1, vector2):
      if vector1 is not None and not isinstance(vector1, Vector3Df): vector1 = Vector3Df(vector1)
      vector1 = ffi.NULL if vector1 is None else vector1.impl
      if vector2 is not None and not isinstance(vector2, Vector3Df): vector2 = Vector3Df(vector2)
      vector2 = ffi.NULL if vector2 is None else vector2.impl
      lib.Vector3Df_add(ffi.cast("Vector3Df *", self.impl), ffi.cast("Vector3Df *", vector1), ffi.cast("Vector3Df *", vector2))

   def crossProduct(self, vector1, vector2):
      if vector1 is not None and not isinstance(vector1, Vector3Df): vector1 = Vector3Df(vector1)
      vector1 = ffi.NULL if vector1 is None else vector1.impl
      if vector2 is not None and not isinstance(vector2, Vector3Df): vector2 = Vector3Df(vector2)
      vector2 = ffi.NULL if vector2 is None else vector2.impl
      lib.Vector3Df_crossProduct(ffi.cast("Vector3Df *", self.impl), ffi.cast("Vector3Df *", vector1), ffi.cast("Vector3Df *", vector2))

   def divideMatrix(self, source, matrix):
      if source is not None and not isinstance(source, Vector3Df): source = Vector3Df(source)
      source = ffi.NULL if source is None else source.impl
      if matrix is not None and not isinstance(matrix, Matrix): matrix = Matrix(matrix)
      matrix = ffi.NULL if matrix is None else matrix.impl
      lib.Vector3Df_divideMatrix(ffi.cast("Vector3Df *", self.impl), ffi.cast("Vector3Df *", source), ffi.cast("Matrix *", matrix))

   def dotProduct(self, vector2):
      if vector2 is not None and not isinstance(vector2, Vector3Df): vector2 = Vector3Df(vector2)
      vector2 = ffi.NULL if vector2 is None else vector2.impl
      lib.Vector3Df_dotProduct(ffi.cast("Vector3Df *", self.impl), ffi.cast("Vector3Df *", vector2))

   def multMatrix(self, source, matrix):
      if source is not None and not isinstance(source, Vector3Df): source = Vector3Df(source)
      source = ffi.NULL if source is None else source.impl
      if matrix is not None and not isinstance(matrix, Matrix): matrix = Matrix(matrix)
      matrix = ffi.NULL if matrix is None else matrix.impl
      lib.Vector3Df_multMatrix(ffi.cast("Vector3Df *", self.impl), ffi.cast("Vector3Df *", source), ffi.cast("Matrix *", matrix))

   def normalize(self, source):
      if source is not None and not isinstance(source, Vector3Df): source = Vector3Df(source)
      source = ffi.NULL if source is None else source.impl
      lib.Vector3Df_normalize(ffi.cast("Vector3Df *", self.impl), ffi.cast("Vector3Df *", source))

   def scale(self, vector1, s):
      if vector1 is not None and not isinstance(vector1, Vector3Df): vector1 = Vector3Df(vector1)
      vector1 = ffi.NULL if vector1 is None else vector1.impl
      lib.Vector3Df_scale(ffi.cast("Vector3Df *", self.impl), ffi.cast("Vector3Df *", vector1), s)

   def subtract(self, vector1, vector2):
      if vector1 is not None and not isinstance(vector1, Vector3Df): vector1 = Vector3Df(vector1)
      vector1 = ffi.NULL if vector1 is None else vector1.impl
      if vector2 is not None and not isinstance(vector2, Vector3Df): vector2 = Vector3Df(vector2)
      vector2 = ffi.NULL if vector2 is None else vector2.impl
      lib.Vector3Df_subtract(ffi.cast("Vector3Df *", self.impl), ffi.cast("Vector3Df *", vector1), ffi.cast("Vector3Df *", vector2))
def fastInvSqrt(x): lib.fastInvSqrt(x)
def fastInvSqrtDouble(x): lib.fastInvSqrtDouble(x)

class Cube(Object):
   def __init__(self, transform = None, material = None, tag = None, frame = None, startFrame = None, endFrame = None, mesh = None, cameraTarget = None, flags = None, light = None, size = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("Cube *", lib.Instance_new(lib.class_Cube))
         if transform is not None:    self.transform         = transform
         if material is not None:     self.material          = material
         if tag is not None:          self.tag               = tag
         if frame is not None:        self.frame             = frame
         if startFrame is not None:   self.startFrame        = startFrame
         if endFrame is not None:     self.endFrame          = endFrame
         if mesh is not None:         self.mesh              = mesh
         if cameraTarget is not None: self.cameraTarget      = cameraTarget
         if flags is not None:        self.flags             = flags
         if light is not None:        self.light             = light
         if size is not None:         self.size              = size
         if transform is not None:    self.transform    = transform
         if material is not None:     self.material     = material
         if tag is not None:          self.tag          = tag
         if frame is not None:        self.frame        = frame
         if startFrame is not None:   self.startFrame   = startFrame
         if endFrame is not None:     self.endFrame     = endFrame
         if mesh is not None:         self.mesh         = mesh
         if cameraTarget is not None: self.cameraTarget = cameraTarget
         if flags is not None:        self.flags        = flags
         if light is not None:        self.light        = light
         if size is not None:         self.size         = size

   @property
   def size(self): return None
   @size.setter
   def size(self, value):
      if not isinstance(value, Vector3Df): value = Vector3Df(value)
      lib.Cube_set_size(self.impl, ffi.cast("Vector3Df *", value.impl))

   def create(self, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Cube_create(self.impl, displaySystem)

class SkyBox(Object):
   def __init__(self, transform = None, material = None, tag = None, frame = None, startFrame = None, endFrame = None, mesh = None, cameraTarget = None, flags = None, light = None, size = None, folder = None, extension = None, newStyle = None, cubeMap = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("SkyBox *", lib.Instance_new(lib.class_SkyBox))
         if transform is not None:    self.transform         = transform
         if material is not None:     self.material          = material
         if tag is not None:          self.tag               = tag
         if frame is not None:        self.frame             = frame
         if startFrame is not None:   self.startFrame        = startFrame
         if endFrame is not None:     self.endFrame          = endFrame
         if mesh is not None:         self.mesh              = mesh
         if cameraTarget is not None: self.cameraTarget      = cameraTarget
         if flags is not None:        self.flags             = flags
         if light is not None:        self.light             = light
         if size is not None:         self.size              = size
         if folder is not None:       self.folder            = folder
         if extension is not None:    self.extension         = extension
         if newStyle is not None:     self.newStyle          = newStyle
         if cubeMap is not None:      self.cubeMap           = cubeMap
         if transform is not None:    self.transform    = transform
         if material is not None:     self.material     = material
         if tag is not None:          self.tag          = tag
         if frame is not None:        self.frame        = frame
         if startFrame is not None:   self.startFrame   = startFrame
         if endFrame is not None:     self.endFrame     = endFrame
         if mesh is not None:         self.mesh         = mesh
         if cameraTarget is not None: self.cameraTarget = cameraTarget
         if flags is not None:        self.flags        = flags
         if light is not None:        self.light        = light
         if size is not None:         self.size         = size
         if folder is not None:       self.folder       = folder
         if extension is not None:    self.extension    = extension
         if newStyle is not None:     self.newStyle     = newStyle
         if cubeMap is not None:      self.cubeMap      = cubeMap

   @property
   def size(self): return None
   @size.setter
   def size(self, value):
      if not isinstance(value, Vector3Df): value = Vector3Df(value)
      lib.SkyBox_set_size(self.impl, ffi.cast("Vector3Df *", value.impl))

   @property
   def folder(self): return None
   @folder.setter
   def folder(self, value):
      lib.SkyBox_set_folder(self.impl, value.encode('utf8'))

   @property
   def extension(self): return None
   @extension.setter
   def extension(self, value):
      lib.SkyBox_set_extension(self.impl, value.encode('utf8'))

   @property
   def newStyle(self): return None
   @newStyle.setter
   def newStyle(self, value):
      lib.SkyBox_set_newStyle(self.impl, value)

   @property
   def cubeMap(self): return None
   @cubeMap.setter
   def cubeMap(self, value):
      if not isinstance(value, CubeMap): value = CubeMap(value)
      lib.SkyBox_set_cubeMap(self.impl, value.impl)

   def create(self, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.SkyBox_create(self.impl, displaySystem)

   def render(self, camera, display):
      if camera is not None and not isinstance(camera, Camera): camera = Camera(camera)
      if camera is None: camera = ffi.NULL
      if display is not None and not isinstance(display, Display): display = Display(display)
      if display is None: display = ffi.NULL
      lib.SkyBox_render(self.impl, camera, display)

class Sphere(Object):
   def __init__(self, transform = None, material = None, tag = None, frame = None, startFrame = None, endFrame = None, mesh = None, cameraTarget = None, flags = None, light = None, numLat = None, numLon = None, flattenedBody = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("Sphere *", lib.Instance_new(lib.class_Sphere))
         if transform is not None:     self.transform          = transform
         if material is not None:      self.material           = material
         if tag is not None:           self.tag                = tag
         if frame is not None:         self.frame              = frame
         if startFrame is not None:    self.startFrame         = startFrame
         if endFrame is not None:      self.endFrame           = endFrame
         if mesh is not None:          self.mesh               = mesh
         if cameraTarget is not None:  self.cameraTarget       = cameraTarget
         if flags is not None:         self.flags              = flags
         if light is not None:         self.light              = light
         if numLat is not None:        self.numLat             = numLat
         if numLon is not None:        self.numLon             = numLon
         if flattenedBody is not None: self.flattenedBody      = flattenedBody
         if transform is not None:     self.transform     = transform
         if material is not None:      self.material      = material
         if tag is not None:           self.tag           = tag
         if frame is not None:         self.frame         = frame
         if startFrame is not None:    self.startFrame    = startFrame
         if endFrame is not None:      self.endFrame      = endFrame
         if mesh is not None:          self.mesh          = mesh
         if cameraTarget is not None:  self.cameraTarget  = cameraTarget
         if flags is not None:         self.flags         = flags
         if light is not None:         self.light         = light
         if numLat is not None:        self.numLat        = numLat
         if numLon is not None:        self.numLon        = numLon
         if flattenedBody is not None: self.flattenedBody = flattenedBody

   @property
   def numLat(self): return None
   @numLat.setter
   def numLat(self, value):
      lib.Sphere_set_numLat(self.impl, value)

   @property
   def numLon(self): return None
   @numLon.setter
   def numLon(self, value):
      lib.Sphere_set_numLon(self.impl, value)

   @property
   def flattenedBody(self): return None
   @flattenedBody.setter
   def flattenedBody(self, value):
      lib.Sphere_set_flattenedBody(self.impl, value)

   def create(self, displaySystem):
      if displaySystem is not None and not isinstance(displaySystem, DisplaySystem): displaySystem = DisplaySystem(displaySystem)
      if displaySystem is None: displaySystem = ffi.NULL
      return lib.Sphere_create(self.impl, displaySystem)

@ffi.callback("void(Window, MinMaxValue *, MinMaxValue *)")
def cb_Window_getDecorationsSize(__w, w, h):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_getDecorationsSize(window, w, h)

@ffi.callback("void(Window, int, int)")
def cb_Window_isInside(__w, x, y):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_isInside(window, x, y)

@ffi.callback("void(Window, int, int, int, int)")
def cb_Window_isMouseMoving(__w, x, y, w, h):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_isMouseMoving(window, x, y, w, h)

@ffi.callback("void(Window, int, int, int, int, bool *, bool *, bool *, bool *)")
def cb_Window_isMouseResizing(__w, x, y, w, h, resizeX, resizeY, resizeEndX, resizeEndY):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_isMouseResizing(window, x, y, w, h, resizeX, resizeY, resizeEndX, resizeEndY)

@ffi.callback("void(Window)")
def cb_Window_isOpaque(__w):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_isOpaque(window)

@ffi.callback("void(Window, Window, bool, Window)")
def cb_Window_notifyActivate(__w, window, active, previous):
   window = pyOrNewObject(Window, window)
   window.fn_Window_notifyActivate(pyOrNewObject(Window, __w), window, active, pyOrNewObject(Window, previous))

@ffi.callback("void(Window, Window, DialogResult)")
def cb_Window_notifyDestroyed(__w, window, result):
   window = pyOrNewObject(Window, window)
   window.fn_Window_notifyDestroyed(pyOrNewObject(Window, __w), window, DialogResult(impl = result))

@ffi.callback("void(Window, Window, const char *)")
def cb_Window_notifySaved(__w, window, filePath):
   window = pyOrNewObject(Window, window)
   window.fn_Window_notifySaved(pyOrNewObject(Window, __w), window, filePath.encode('utf8'))

@ffi.callback("void(Window, bool, Window, bool *, bool)")
def cb_Window_onActivate(__w, active, previous, goOnWithActivation, direct):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onActivate(window, active, pyOrNewObject(Window, previous), goOnWithActivation, direct)

@ffi.callback("void(Window, Window, Window)")
def cb_Window_onActivateClient(__w, client, previous):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onActivateClient(window, pyOrNewObject(Window, client), pyOrNewObject(Window, previous))

@ffi.callback("void(Window)")
def cb_Window_onApplyGraphics(__w):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onApplyGraphics(window)

@ffi.callback("void(Window, Window, bool)")
def cb_Window_onChildAddedOrRemoved(__w, child, removed):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onChildAddedOrRemoved(window, pyOrNewObject(Window, child), removed)

@ffi.callback("void(Window, Window, int, int, int, int)")
def cb_Window_onChildResized(__w, child, x, y, w, h):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onChildResized(window, pyOrNewObject(Window, child), x, y, w, h)

@ffi.callback("void(Window, Window, bool)")
def cb_Window_onChildVisibilityToggled(__w, child, visible):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onChildVisibilityToggled(window, pyOrNewObject(Window, child), visible)

@ffi.callback("void(Window, bool)")
def cb_Window_onClose(__w, parentClosing):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onClose(window, parentClosing)

@ffi.callback("void(Window)")
def cb_Window_onCreate(__w):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onCreate(window)

@ffi.callback("void(Window)")
def cb_Window_onDestroy(__w):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onDestroy(window)

@ffi.callback("void(Window)")
def cb_Window_onDestroyed(__w):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onDestroyed(window)

@ffi.callback("void(Window, Surface)")
def cb_Window_onDrawOverChildren(__w, surface):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onDrawOverChildren(window, pyOrNewObject(Surface, surface))

@ffi.callback("void(Window, FileChange, const char *)")
def cb_Window_onFileModified(__w, fileChange, param):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onFileModified(window, FileChange(impl = fileChange), param.encode('utf8'))

@ffi.callback("void(Window, ScrollBarAction, int, Key)")
def cb_Window_onHScroll(__w, action, position, key):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onHScroll(window, ScrollBarAction(impl = action), position, Key(impl = key))

@ffi.callback("void(Window, Key, unichar)")
def cb_Window_onKeyDown(__w, key, ch):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onKeyDown(window, Key(impl = key), ch)

@ffi.callback("void(Window, Key, unichar)")
def cb_Window_onKeyHit(__w, key, ch):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onKeyHit(window, Key(impl = key), ch)

@ffi.callback("void(Window, Key, unichar)")
def cb_Window_onKeyUp(__w, key, ch):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onKeyUp(window, Key(impl = key), ch)

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onLeftButtonDown(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onLeftButtonDown(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onLeftButtonUp(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onLeftButtonUp(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onLeftDoubleClick(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onLeftDoubleClick(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window)")
def cb_Window_onLoadGraphics(__w):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onLoadGraphics(window)

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onMiddleButtonDown(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onMiddleButtonDown(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onMiddleButtonUp(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onMiddleButtonUp(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onMiddleDoubleClick(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onMiddleDoubleClick(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window)")
def cb_Window_onMouseCaptureLost(__w):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onMouseCaptureLost(window)

@ffi.callback("void(Window, Modifiers)")
def cb_Window_onMouseLeave(__w, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onMouseLeave(window, Modifiers(impl = mods))

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onMouseMove(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onMouseMove(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onMouseOver(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onMouseOver(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, int *, int *, int, int)")
def cb_Window_onMoving(__w, x, y, w, h):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onMoving(window, x, y, w, h)

@ffi.callback("void(Window, TouchPointerEvent, Array, Modifiers)")
def cb_Window_onMultiTouch(__w, event, infos, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onMultiTouch(window, TouchPointerEvent(impl = event), Array("<TouchPointerInfo>", impl = infos), Modifiers(impl = mods))

@ffi.callback("void(Window, int, int, int, int)")
def cb_Window_onPosition(__w, x, y, width, height):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onPosition(window, x, y, width, height)

@ffi.callback("void(Window)")
def cb_Window_onPostCreate(__w):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onPostCreate(window)

@ffi.callback("void(Window, Surface)")
def cb_Window_onRedraw(__w, surface):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onRedraw(window, pyOrNewObject(Surface, surface))

@ffi.callback("void(Window, int, int)")
def cb_Window_onResize(__w, width, height):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onResize(window, width, height)

@ffi.callback("void(Window, int *, int *)")
def cb_Window_onResizing(__w, width, height):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onResizing(window, width, height)

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onRightButtonDown(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onRightButtonDown(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onRightButtonUp(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onRightButtonUp(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, int, int, Modifiers)")
def cb_Window_onRightDoubleClick(__w, x, y, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onRightDoubleClick(window, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, const char *)")
def cb_Window_onSaveFile(__w, fileName):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onSaveFile(window, fileName.encode('utf8'))

@ffi.callback("void(Window, WindowState, Modifiers)")
def cb_Window_onStateChange(__w, state, mods):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onStateChange(window, WindowState(impl = state), Modifiers(impl = mods))

@ffi.callback("void(Window, Key, unichar)")
def cb_Window_onSysKeyDown(__w, key, ch):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onSysKeyDown(window, Key(impl = key), ch)

@ffi.callback("void(Window, Key, unichar)")
def cb_Window_onSysKeyHit(__w, key, ch):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onSysKeyHit(window, Key(impl = key), ch)

@ffi.callback("void(Window, Key, unichar)")
def cb_Window_onSysKeyUp(__w, key, ch):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onSysKeyUp(window, Key(impl = key), ch)

@ffi.callback("void(Window)")
def cb_Window_onUnloadGraphics(__w):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onUnloadGraphics(window)

@ffi.callback("void(Window, ScrollBarAction, int, Key)")
def cb_Window_onVScroll(__w, action, position, key):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_onVScroll(window, ScrollBarAction(impl = action), position, Key(impl = key))

@ffi.callback("void(Window, Font *, Surface, const char *, bool, bool)")
def cb_Window_preShowDecorations(__w, captionFont, surface, name, active, moving):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_preShowDecorations(window, Font(impl = captionFont), pyOrNewObject(Surface, surface), name.encode('utf8'), active, moving)

@ffi.callback("void(Window, Box *)")
def cb_Window_setBox(__w, box):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_setBox(window, Box(impl = box))

@ffi.callback("void(Window, int *, int *, MinMaxValue *, MinMaxValue *, MinMaxValue *, MinMaxValue *)")
def cb_Window_setWindowArea(__w, x, y, w, h, cw, ch):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_setWindowArea(window, x, y, w, h, cw, ch)

@ffi.callback("void(Window, MinMaxValue *, MinMaxValue *)")
def cb_Window_setWindowMinimum(__w, mw, mh):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_setWindowMinimum(window, mw, mh)

@ffi.callback("void(Window, Font *, Surface, const char *, bool, bool)")
def cb_Window_showDecorations(__w, captionFont, surface, name, active, moving):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_showDecorations(window, Font(impl = captionFont), pyOrNewObject(Surface, surface), name.encode('utf8'), active, moving)

@ffi.callback("void(Window)")
def cb_Window_updateNonClient(__w):
   window = pyOrNewObject(Window, __w)
   window.fn_Window_updateNonClient(window)

class Window(Instance):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def parent(self): return pyOrNewObject(Window, lib.Window_get_parent(self.impl))
   @parent.setter
   def parent(self, value):
      if not isinstance(value, Window): value = Window(value)
      lib.Window_set_parent(self.impl, value.impl)

   @property
   def master(self): return pyOrNewObject(Window, lib.Window_get_master(self.impl))
   @master.setter
   def master(self, value):
      if not isinstance(value, Window): value = Window(value)
      lib.Window_set_master(self.impl, value.impl)

   @property
   def caption(self): value = lib.Window_get_caption(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @caption.setter
   def caption(self, value):
      lib.Window_set_caption(self.impl, value.encode('utf8'))

   @property
   def hotKey(self): return Key(impl = lib.Window_get_hotKey(self.impl))
   @hotKey.setter
   def hotKey(self, value):
      if not isinstance(value, Key): value = Key(value)
      lib.Window_set_hotKey(self.impl, value.impl)

   @property
   def background(self): return Color(impl = lib.Window_get_background(self.impl))
   @background.setter
   def background(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.Window_set_background(self.impl, value.impl)

   @property
   def opacity(self): return Percentage(lib.Window_get_opacity(self.impl))
   @opacity.setter
   def opacity(self, value):
      if not isinstance(value, Percentage): value = Percentage(value)
      lib.Window_set_opacity(self.impl, value.impl)

   @property
   def foreground(self): return Color(impl = lib.Window_get_foreground(self.impl))
   @foreground.setter
   def foreground(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.Window_set_foreground(self.impl, value.impl)

   @property
   def borderStyle(self): return lib.Window_get_borderStyle(self.impl, value.impl)
   @borderStyle.setter
   def borderStyle(self, value):
      lib.Window_set_borderStyle(self.impl, value.impl)

   @property
   def minClientSize(self): value = Size(); lib.Window_get_minClientSize(self.impl, ffi.cast("Size *", value.impl)); return value
   @minClientSize.setter
   def minClientSize(self, value):
      if not isinstance(value, Size): value = Size(value)
      lib.Window_set_minClientSize(self.impl, ffi.cast("Size *", value.impl))

   @property
   def maxClientSize(self): value = Size(); lib.Window_get_maxClientSize(self.impl, ffi.cast("Size *", value.impl)); return value
   @maxClientSize.setter
   def maxClientSize(self, value):
      if not isinstance(value, Size): value = Size(value)
      lib.Window_set_maxClientSize(self.impl, ffi.cast("Size *", value.impl))

   @property
   def hasMaximize(self): return lib.Window_get_hasMaximize(self.impl)
   @hasMaximize.setter
   def hasMaximize(self, value):
      lib.Window_set_hasMaximize(self.impl, value)

   @property
   def hasMinimize(self): return lib.Window_get_hasMinimize(self.impl)
   @hasMinimize.setter
   def hasMinimize(self, value):
      lib.Window_set_hasMinimize(self.impl, value)

   @property
   def hasClose(self): return lib.Window_get_hasClose(self.impl)
   @hasClose.setter
   def hasClose(self, value):
      lib.Window_set_hasClose(self.impl, value)

   @property
   def nonClient(self): return lib.Window_get_nonClient(self.impl)
   @nonClient.setter
   def nonClient(self, value):
      lib.Window_set_nonClient(self.impl, value)

   @property
   def inactive(self): return lib.Window_get_inactive(self.impl)
   @inactive.setter
   def inactive(self, value):
      lib.Window_set_inactive(self.impl, value)

   @property
   def clickThrough(self): return lib.Window_get_clickThrough(self.impl)
   @clickThrough.setter
   def clickThrough(self, value):
      lib.Window_set_clickThrough(self.impl, value)

   @property
   def isRemote(self): return lib.Window_get_isRemote(self.impl)
   @isRemote.setter
   def isRemote(self, value):
      lib.Window_set_isRemote(self.impl, value)

   @property
   def noCycle(self): return lib.Window_get_noCycle(self.impl)
   @noCycle.setter
   def noCycle(self, value):
      lib.Window_set_noCycle(self.impl, value)

   @property
   def isModal(self): return lib.Window_get_isModal(self.impl)
   @isModal.setter
   def isModal(self, value):
      lib.Window_set_isModal(self.impl, value)

   @property
   def interim(self): return lib.Window_get_interim(self.impl)
   @interim.setter
   def interim(self, value):
      lib.Window_set_interim(self.impl, value)

   @property
   def tabCycle(self): return lib.Window_get_tabCycle(self.impl)
   @tabCycle.setter
   def tabCycle(self, value):
      lib.Window_set_tabCycle(self.impl, value)

   @property
   def isDefault(self): return lib.Window_get_isDefault(self.impl)
   @isDefault.setter
   def isDefault(self, value):
      lib.Window_set_isDefault(self.impl, value)

   @property
   def drawBehind(self): return lib.Window_get_drawBehind(self.impl)
   @drawBehind.setter
   def drawBehind(self, value):
      lib.Window_set_drawBehind(self.impl, value)

   @property
   def hasMenuBar(self): return lib.Window_get_hasMenuBar(self.impl)
   @hasMenuBar.setter
   def hasMenuBar(self, value):
      lib.Window_set_hasMenuBar(self.impl, value)

   @property
   def hasStatusBar(self): return lib.Window_get_hasStatusBar(self.impl)
   @hasStatusBar.setter
   def hasStatusBar(self, value):
      lib.Window_set_hasStatusBar(self.impl, value)

   @property
   def stayOnTop(self): return lib.Window_get_stayOnTop(self.impl)
   @stayOnTop.setter
   def stayOnTop(self, value):
      lib.Window_set_stayOnTop(self.impl, value)

   @property
   def menu(self): return pyOrNewObject(Menu, lib.Window_get_menu(self.impl))
   @menu.setter
   def menu(self, value):
      if not isinstance(value, Menu): value = Menu(value)
      lib.Window_set_menu(self.impl, value.impl)

   @property
   def font(self): return pyOrNewObject(FontResource, lib.Window_get_font(self.impl))
   @font.setter
   def font(self, value):
      if not isinstance(value, FontResource): value = FontResource(value)
      lib.Window_set_font(self.impl, value.impl)
   # @font.isset # tofix: how do we get isset?
   # def font(self): lib.Window_isSet_font(self.impl)

   @property
   def sizeAnchor(self): value = SizeAnchor(); lib.Window_get_sizeAnchor(self.impl, ffi.cast("SizeAnchor *", value.impl)); return value
   @sizeAnchor.setter
   def sizeAnchor(self, value):
      if not isinstance(value, SizeAnchor): value = SizeAnchor(value)
      lib.Window_set_sizeAnchor(self.impl, ffi.cast("SizeAnchor *", value.impl))
   # @sizeAnchor.isset # tofix: how do we get isset?
   # def sizeAnchor(self): lib.Window_isSet_sizeAnchor(self.impl)

   @property
   def size(self): value = Size(); lib.Window_get_size(self.impl, ffi.cast("Size *", value.impl)); return value
   @size.setter
   def size(self, value):
      if not isinstance(value, Size): value = Size(value)
      lib.Window_set_size(self.impl, ffi.cast("Size *", value.impl))
   # @size.isset # tofix: how do we get isset?
   # def size(self): lib.Window_isSet_size(self.impl)

   @property
   def clientSize(self): value = Size(); lib.Window_get_clientSize(self.impl, ffi.cast("Size *", value.impl)); return value
   @clientSize.setter
   def clientSize(self, value):
      if not isinstance(value, Size): value = Size(value)
      lib.Window_set_clientSize(self.impl, ffi.cast("Size *", value.impl))
   # @clientSize.isset # tofix: how do we get isset?
   # def clientSize(self): lib.Window_isSet_clientSize(self.impl)

   @property
   def initSize(self): value = Size(); lib.Window_get_initSize(self.impl, ffi.cast("Size *", value.impl)); return value

   @property
   def anchor(self): value = Anchor(); lib.Window_get_anchor(self.impl, ffi.cast("Anchor *", value.impl)); return value
   @anchor.setter
   def anchor(self, value):
      if not isinstance(value, Anchor): value = Anchor(value)
      lib.Window_set_anchor(self.impl, ffi.cast("Anchor *", value.impl))
   # @anchor.isset # tofix: how do we get isset?
   # def anchor(self): lib.Window_isSet_anchor(self.impl)

   @property
   def position(self): value = Point(); lib.Window_get_position(self.impl, ffi.cast("Point *", value.impl)); return value
   @position.setter
   def position(self, value):
      if not isinstance(value, Point): value = Point(value)
      lib.Window_set_position(self.impl, ffi.cast("Point *", value.impl))

   @property
   def disabled(self): return lib.Window_get_disabled(self.impl)
   @disabled.setter
   def disabled(self, value):
      lib.Window_set_disabled(self.impl, value)

   @property
   def isEnabled(self): return lib.Window_get_isEnabled(self.impl)

   @property
   def state(self): return lib.Window_get_state(self.impl, value)
   @state.setter
   def state(self, value):
      lib.Window_set_state(self.impl, value)

   @property
   def visible(self): return lib.Window_get_visible(self.impl)
   @visible.setter
   def visible(self, value):
      lib.Window_set_visible(self.impl, value)

   @property
   def isDocument(self): return lib.Window_get_isDocument(self.impl)
   @isDocument.setter
   def isDocument(self, value):
      lib.Window_set_isDocument(self.impl, value)

   @property
   def mergeMenus(self): return lib.Window_get_mergeMenus(self.impl)
   @mergeMenus.setter
   def mergeMenus(self, value):
      lib.Window_set_mergeMenus(self.impl, value)

   @property
   def hasHorzScroll(self): return lib.Window_get_hasHorzScroll(self.impl)
   @hasHorzScroll.setter
   def hasHorzScroll(self, value):
      lib.Window_set_hasHorzScroll(self.impl, value)

   @property
   def hasVertScroll(self): return lib.Window_get_hasVertScroll(self.impl)
   @hasVertScroll.setter
   def hasVertScroll(self, value):
      lib.Window_set_hasVertScroll(self.impl, value)

   @property
   def dontHideScroll(self): return lib.Window_get_dontHideScroll(self.impl)
   @dontHideScroll.setter
   def dontHideScroll(self, value):
      lib.Window_set_dontHideScroll(self.impl, value)

   @property
   def dontScrollVert(self): return lib.Window_get_dontScrollVert(self.impl)
   @dontScrollVert.setter
   def dontScrollVert(self, value):
      lib.Window_set_dontScrollVert(self.impl, value)

   @property
   def dontScrollHorz(self): return lib.Window_get_dontScrollHorz(self.impl)
   @dontScrollHorz.setter
   def dontScrollHorz(self, value):
      lib.Window_set_dontScrollHorz(self.impl, value)

   @property
   def snapVertScroll(self): return lib.Window_get_snapVertScroll(self.impl)
   @snapVertScroll.setter
   def snapVertScroll(self, value):
      lib.Window_set_snapVertScroll(self.impl, value)

   @property
   def snapHorzScroll(self): return lib.Window_get_snapHorzScroll(self.impl)
   @snapHorzScroll.setter
   def snapHorzScroll(self, value):
      lib.Window_set_snapHorzScroll(self.impl, value)

   @property
   def scroll(self): value = Point(); lib.Window_get_scroll(self.impl, ffi.cast("Point *", value.impl)); return value
   @scroll.setter
   def scroll(self, value):
      if not isinstance(value, Point): value = Point(value)
      lib.Window_set_scroll(self.impl, ffi.cast("Point *", value.impl))

   @property
   def modifyVirtualArea(self): return lib.Window_get_modifyVirtualArea(self.impl)
   @modifyVirtualArea.setter
   def modifyVirtualArea(self, value):
      lib.Window_set_modifyVirtualArea(self.impl, value)

   @property
   def dontAutoScrollArea(self): return lib.Window_get_dontAutoScrollArea(self.impl)
   @dontAutoScrollArea.setter
   def dontAutoScrollArea(self, value):
      lib.Window_set_dontAutoScrollArea(self.impl, value)

   @property
   def fileName(self): value = lib.Window_get_fileName(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @fileName.setter
   def fileName(self, value):
      lib.Window_set_fileName(self.impl, value.encode('utf8'))

   @property
   def id(self): return lib.Window_get_id(self.impl)
   @id.setter
   def id(self, value):
      lib.Window_set_id(self.impl, value)

   @property
   def modifiedDocument(self): return lib.Window_get_modifiedDocument(self.impl)
   @modifiedDocument.setter
   def modifiedDocument(self, value):
      lib.Window_set_modifiedDocument(self.impl, value)

   @property
   def showInTaskBar(self): return lib.Window_get_showInTaskBar(self.impl)
   @showInTaskBar.setter
   def showInTaskBar(self, value):
      lib.Window_set_showInTaskBar(self.impl, value)

   @property
   def saveDialog(self): return None
   @saveDialog.setter
   def saveDialog(self, value):
      if not isinstance(value, FileDialog): value = FileDialog(value)
      lib.Window_set_saveDialog(self.impl, value.impl)

   @property
   def isActiveClient(self): return lib.Window_get_isActiveClient(self.impl)
   @isActiveClient.setter
   def isActiveClient(self, value):
      lib.Window_set_isActiveClient(self.impl, value)

   @property
   def cursor(self): return pyOrNewObject(Cursor, lib.Window_get_cursor(self.impl))
   @cursor.setter
   def cursor(self, value):
      if not isinstance(value, Cursor): value = Cursor(value)
      lib.Window_set_cursor(self.impl, value.impl)

   @property
   def name(self): value = lib.Window_get_name(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @name.setter
   def name(self, value):
      lib.Window_set_name(self.impl, value.encode('utf8'))

   @property
   def displayDriver(self): value = lib.Window_get_displayDriver(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @displayDriver.setter
   def displayDriver(self, value):
      lib.Window_set_displayDriver(self.impl, value.encode('utf8'))

   @property
   def autoCreate(self): return lib.Window_get_autoCreate(self.impl)
   @autoCreate.setter
   def autoCreate(self, value):
      lib.Window_set_autoCreate(self.impl, value)

   @property
   def scrollArea(self): value = Size(); lib.Window_get_scrollArea(self.impl, ffi.cast("Size *", value.impl)); return value
   @scrollArea.setter
   def scrollArea(self, value):
      if not isinstance(value, Size): value = Size(value)
      lib.Window_set_scrollArea(self.impl, ffi.cast("Size *", value.impl))
   # @scrollArea.isset # tofix: how do we get isset?
   # def scrollArea(self): lib.Window_isSet_scrollArea(self.impl)

   @property
   def is3D(self): return lib.Window_get_is3D(self.impl)
   @is3D.setter
   def is3D(self, value):
      lib.Window_set_is3D(self.impl, value)

   @property
   def fontObject(self): return lib.Window_get_fontObject(self.impl, value.impl)

   @property
   def clientStart(self): value = Point(); lib.Window_get_clientStart(self.impl, ffi.cast("Point *", value.impl)); return value

   @property
   def absPosition(self): value = Point(); lib.Window_get_absPosition(self.impl, ffi.cast("Point *", value.impl)); return value

   @property
   def normalAnchor(self): value = Anchor(); lib.Window_get_normalAnchor(self.impl, ffi.cast("Anchor *", value.impl)); return value

   @property
   def normalSizeAnchor(self): value = SizeAnchor(); lib.Window_get_normalSizeAnchor(self.impl, ffi.cast("SizeAnchor *", value.impl)); return value

   @property
   def active(self): return lib.Window_get_active(self.impl)

   @property
   def created(self): return lib.Window_get_created(self.impl)

   @property
   def destroyed(self): return lib.Window_get_destroyed(self.impl)

   @property
   def firstSlave(self): return pyOrNewObject(Window, lib.Window_get_firstSlave(self.impl))

   @property
   def firstChild(self): return pyOrNewObject(Window, lib.Window_get_firstChild(self.impl))

   @property
   def lastChild(self): return pyOrNewObject(Window, lib.Window_get_lastChild(self.impl))

   @property
   def activeClient(self): return pyOrNewObject(Window, lib.Window_get_activeClient(self.impl))

   @property
   def activeChild(self): return pyOrNewObject(Window, lib.Window_get_activeChild(self.impl))

   @property
   def display(self): return pyOrNewObject(Display, lib.Window_get_display(self.impl))

   @property
   def displaySystem(self): return pyOrNewObject(DisplaySystem, lib.Window_get_displaySystem(self.impl))

   @property
   def horzScroll(self): return pyOrNewObject(ScrollBar, lib.Window_get_horzScroll(self.impl))

   @property
   def vertScroll(self): return pyOrNewObject(ScrollBar, lib.Window_get_vertScroll(self.impl))

   @property
   def statusBar(self): return pyOrNewObject(StatusBar, lib.Window_get_statusBar(self.impl))

   @property
   def rootWindow(self): return pyOrNewObject(Window, lib.Window_get_rootWindow(self.impl))

   @property
   def closing(self): return lib.Window_get_closing(self.impl)
   @closing.setter
   def closing(self, value):
      lib.Window_set_closing(self.impl, value)

   @property
   def documentID(self): return lib.Window_get_documentID(self.impl)

   @property
   def previous(self): return pyOrNewObject(Window, lib.Window_get_previous(self.impl))

   @property
   def next(self): return pyOrNewObject(Window, lib.Window_get_next(self.impl))

   @property
   def nextSlave(self): return pyOrNewObject(Window, lib.Window_get_nextSlave(self.impl))

   @property
   def menuBar(self): return pyOrNewObject(PopupMenu, lib.Window_get_menuBar(self.impl))

   @property
   def sbv(self): return pyOrNewObject(ScrollBar, lib.Window_get_sbv(self.impl))

   @property
   def sbh(self): return pyOrNewObject(ScrollBar, lib.Window_get_sbh(self.impl))

   @property
   def fullRender(self): return lib.Window_get_fullRender(self.impl)
   @fullRender.setter
   def fullRender(self, value):
      lib.Window_set_fullRender(self.impl, value)

   @property
   def systemHandle(self): return lib.Window_get_systemHandle(self.impl)

   @property
   def minimizeButton(self): return pyOrNewObject(Button, lib.Window_get_minimizeButton(self.impl))

   @property
   def maximizeButton(self): return pyOrNewObject(Button, lib.Window_get_maximizeButton(self.impl))

   @property
   def closeButton(self): return pyOrNewObject(Button, lib.Window_get_closeButton(self.impl))

   @property
   def icon(self): return pyOrNewObject(BitmapResource, lib.Window_get_icon(self.impl))
   @icon.setter
   def icon(self, value):
      if not isinstance(value, BitmapResource): value = BitmapResource(value)
      lib.Window_set_icon(self.impl, value.impl)

   @property
   def moveable(self): return lib.Window_get_moveable(self.impl)
   @moveable.setter
   def moveable(self, value):
      lib.Window_set_moveable(self.impl, value)

   @property
   def alphaBlend(self): return lib.Window_get_alphaBlend(self.impl)
   @alphaBlend.setter
   def alphaBlend(self, value):
      lib.Window_set_alphaBlend(self.impl, value)

   @property
   def useSharedMemory(self): return lib.Window_get_useSharedMemory(self.impl)
   @useSharedMemory.setter
   def useSharedMemory(self, value):
      lib.Window_set_useSharedMemory(self.impl, value)

   @property
   def glCapabilities(self): return GLCapabilities(impl = lib.Window_get_glCapabilities(self.impl))
   @glCapabilities.setter
   def glCapabilities(self, value):
      if not isinstance(value, GLCapabilities): value = GLCapabilities(value)
      lib.Window_set_glCapabilities(self.impl, value.impl)

   @property
   def creationActivation(self): return lib.Window_get_creationActivation(self.impl, value)
   @creationActivation.setter
   def creationActivation(self, value):
      lib.Window_set_creationActivation(self.impl, value)

   @property
   def nativeDecorations(self): return lib.Window_get_nativeDecorations(self.impl)
   @nativeDecorations.setter
   def nativeDecorations(self, value):
      lib.Window_set_nativeDecorations(self.impl, value)
   # @nativeDecorations.isset # tofix: how do we get isset?
   # def nativeDecorations(self): lib.Window_isSet_nativeDecorations(self.impl)

   @property
   def manageDisplay(self): return lib.Window_get_manageDisplay(self.impl)
   @manageDisplay.setter
   def manageDisplay(self, value):
      lib.Window_set_manageDisplay(self.impl, value)

   @property
   def text(self): value = lib.Window_get_text(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @text.setter
   def text(self, value):
      lib.Window_set_text(self.impl, value.encode('utf8'))

   @property
   def controller(self): return pyOrNewObject(WindowController, lib.Window_get_controller(self.impl))
   @controller.setter
   def controller(self, value):
      if not isinstance(value, WindowController): value = WindowController(value)
      lib.Window_set_controller(self.impl, value.impl)

   @property
   def noConsequential(self): return lib.Window_get_noConsequential(self.impl)
   @noConsequential.setter
   def noConsequential(self, value):
      lib.Window_set_noConsequential(self.impl, value)

   def acquireInput(self, acquired):
      return lib.Window_acquireInput(self.impl, acquired)

   def activate(self):
      lib.Window_activate(self.impl)

   def addResource(self, resource):
      if resource is not None and not isinstance(resource, Resource): resource = Resource(resource)
      if resource is None: resource = ffi.NULL
      lib.Window_addResource(self.impl, resource)

   def buttonCloseDialog(self, button, x, y, mods):
      if button is not None and not isinstance(button, Button): button = Button(button)
      if button is None: button = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_buttonCloseDialog(self.impl, button, x, y, mods)

   def capture(self):
      return lib.Window_capture(self.impl)

   def closeConfirmation(self, parentClosing):
      return lib.Window_closeConfirmation(self.impl, parentClosing)

   def create(self):
      return lib.Window_create(self.impl)

   def cycleChildren(self, backward, clientOnly, tabCycleOnly, cycleParents):
      return lib.Window_cycleChildren(self.impl, backward, clientOnly, tabCycleOnly, cycleParents)

   def deactivate(self):
      lib.Window_deactivate(self.impl)

   def destroy(self, code):
      return lib.Window_destroy(self.impl, code)

   def doModal(self):
      return lib.Window_doModal(self.impl)

   def doModalEnd(self):
      return lib.Window_doModalEnd(self.impl)

   def doModalLoop(self):
      return lib.Window_doModalLoop(self.impl)

   def doModalStart(self):
      lib.Window_doModalStart(self.impl)

   def externalPosition(self, x, y, w, h):
      lib.Window_externalPosition(self.impl, x, y, w, h)

   def flash(self):
      lib.Window_flash(self.impl)

   def freeMouseRange(self):
      lib.Window_freeMouseRange(self.impl)

   def getCaretPosition(self, caretPos):
      if caretPos is not None and not isinstance(caretPos, Point): caretPos = Point(caretPos)
      caretPos = ffi.NULL if caretPos is None else caretPos.impl
      lib.Window_getCaretPosition(self.impl, ffi.cast("Point *", caretPos))

   def getCaretSize(self):
      return lib.Window_getCaretSize(self.impl)

   def fn_unset_Window_getDecorationsSize(self, w, h):
      if w is None: w = ffi.NULL
      if h is None: h = ffi.NULL
      return lib.Window_getDecorationsSize(self.impl, w, h)

   @property
   def getDecorationsSize(self):
      if hasattr(self, 'fn_Window_getDecorationsSize'): return self.fn_Window_getDecorationsSize
      else: return self.fn_unset_Window_getDecorationsSize
   @getDecorationsSize.setter
   def getDecorationsSize(self, value):
      self.fn_Window_getDecorationsSize = value
      lib.Instance_setMethod(self.impl, "GetDecorationsSize".encode('utf8'), cb_Window_getDecorationsSize)

   def getIcon(self, iconID):
      return pyOrNewObject(BitmapResource, lib.Window_getIcon(self.impl, iconID))

   def getMousePosition(self):
      x = ffi.new("int *")
      y = ffi.new("int *")
      lib.Window_getMousePosition(self.impl, x, y)
      return x[0], y[0]

   def getNCMousePosition(self):
      x = ffi.new("int *")
      y = ffi.new("int *")
      lib.Window_getNCMousePosition(self.impl, x, y)
      return x[0], y[0]

   def grab(self, bitmap, box, decorations):
      if bitmap is not None and not isinstance(bitmap, Bitmap): bitmap = Bitmap(bitmap)
      if bitmap is None: bitmap = ffi.NULL
      if box is not None and not isinstance(box, Box): box = Box(box)
      box = ffi.NULL if box is None else box.impl
      return lib.Window_grab(self.impl, bitmap, ffi.cast("Box *", box), decorations)

   def fn_unset_Window_isInside(self, x, y):
      return lib.Window_isInside(self.impl, x, y)

   @property
   def isInside(self):
      if hasattr(self, 'fn_Window_isInside'): return self.fn_Window_isInside
      else: return self.fn_unset_Window_isInside
   @isInside.setter
   def isInside(self, value):
      self.fn_Window_isInside = value
      lib.Instance_setMethod(self.impl, "IsInside".encode('utf8'), cb_Window_isInside)

   def fn_unset_Window_isMouseMoving(self, x, y, w, h):
      return lib.Window_isMouseMoving(self.impl, x, y, w, h)

   @property
   def isMouseMoving(self):
      if hasattr(self, 'fn_Window_isMouseMoving'): return self.fn_Window_isMouseMoving
      else: return self.fn_unset_Window_isMouseMoving
   @isMouseMoving.setter
   def isMouseMoving(self, value):
      self.fn_Window_isMouseMoving = value
      lib.Instance_setMethod(self.impl, "IsMouseMoving".encode('utf8'), cb_Window_isMouseMoving)

   def fn_unset_Window_isMouseResizing(self, x, y, w, h, resizeX, resizeY, resizeEndX, resizeEndY):
      if resizeX is None: resizeX = ffi.NULL
      if resizeY is None: resizeY = ffi.NULL
      if resizeEndX is None: resizeEndX = ffi.NULL
      if resizeEndY is None: resizeEndY = ffi.NULL
      return lib.Window_isMouseResizing(self.impl, x, y, w, h, resizeX, resizeY, resizeEndX, resizeEndY)

   @property
   def isMouseResizing(self):
      if hasattr(self, 'fn_Window_isMouseResizing'): return self.fn_Window_isMouseResizing
      else: return self.fn_unset_Window_isMouseResizing
   @isMouseResizing.setter
   def isMouseResizing(self, value):
      self.fn_Window_isMouseResizing = value
      lib.Instance_setMethod(self.impl, "IsMouseResizing".encode('utf8'), cb_Window_isMouseResizing)

   def fn_unset_Window_isOpaque(self):
      return lib.Window_isOpaque(self.impl)

   @property
   def isOpaque(self):
      if hasattr(self, 'fn_Window_isOpaque'): return self.fn_Window_isOpaque
      else: return self.fn_unset_Window_isOpaque
   @isOpaque.setter
   def isOpaque(self, value):
      self.fn_Window_isOpaque = value
      lib.Instance_setMethod(self.impl, "IsOpaque".encode('utf8'), cb_Window_isOpaque)

   def makeActive(self):
      lib.Window_makeActive(self.impl)

   def menuFileClose(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuFileClose(self.impl, selection, mods)

   def menuFileExit(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuFileExit(self.impl, selection, mods)

   def menuFileSave(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuFileSave(self.impl, selection, mods)

   def menuFileSaveAll(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuFileSaveAll(self.impl, selection, mods)

   def menuFileSaveAs(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuFileSaveAs(self.impl, selection, mods)

   def menuWindowArrangeIcons(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowArrangeIcons(self.impl, selection, mods)

   def menuWindowCascade(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowCascade(self.impl, selection, mods)

   def menuWindowClose(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowClose(self.impl, selection, mods)

   def menuWindowCloseAll(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowCloseAll(self.impl, selection, mods)

   def menuWindowMaximize(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowMaximize(self.impl, selection, mods)

   def menuWindowMinimize(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowMinimize(self.impl, selection, mods)

   def menuWindowMove(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowMove(self.impl, selection, mods)

   def menuWindowNext(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowNext(self.impl, selection, mods)

   def menuWindowPrevious(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowPrevious(self.impl, selection, mods)

   def menuWindowRestore(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowRestore(self.impl, selection, mods)

   def menuWindowSelectWindow(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowSelectWindow(self.impl, selection, mods)

   def menuWindowSize(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowSize(self.impl, selection, mods)

   def menuWindowStayOnTop(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowStayOnTop(self.impl, selection, mods)

   def menuWindowTileHorz(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowTileHorz(self.impl, selection, mods)

   def menuWindowTileVert(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowTileVert(self.impl, selection, mods)

   def menuWindowWindows(self, selection, mods):
      if selection is not None and not isinstance(selection, MenuItem): selection = MenuItem(selection)
      if selection is None: selection = ffi.NULL
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      return lib.Window_menuWindowWindows(self.impl, selection, mods)

   def modal(self):
      return lib.Window_modal(self.impl)

   def mouseMessage(self, method, x, y, mods, consequential, activate):
      return lib.Window_mouseMessage(self.impl, method, x, y, mods, consequential, activate)

   def move(self, x, y, w, h):
      lib.Window_move(self.impl, x, y, w, h)

   def multiTouchMessage(self, event, infos, mods, consequential, activate):
      return lib.Window_multiTouchMessage(self.impl, event, Array.impl, mods, consequential, activate)

   def fn_unset_Window_notifyActivate(self, _window, window, active, previous):
      return lib.Window_notifyActivate(self.impl, _window.impl, ffi.NULL if window is None else window.impl, active, ffi.NULL if previous is None else previous.impl)

   @property
   def notifyActivate(self):
      if hasattr(self, 'fn_Window_notifyActivate'): return self.fn_Window_notifyActivate
      else: return self.fn_unset_Window_notifyActivate
   @notifyActivate.setter
   def notifyActivate(self, value):
      self.fn_Window_notifyActivate = value
      lib.Instance_setMethod(self.impl, "NotifyActivate".encode('utf8'), cb_Window_notifyActivate)

   def fn_unset_Window_notifyDestroyed(self, _window, window, result):
      return lib.Window_notifyDestroyed(self.impl, _window.impl, ffi.NULL if window is None else window.impl, result)

   @property
   def notifyDestroyed(self):
      if hasattr(self, 'fn_Window_notifyDestroyed'): return self.fn_Window_notifyDestroyed
      else: return self.fn_unset_Window_notifyDestroyed
   @notifyDestroyed.setter
   def notifyDestroyed(self, value):
      self.fn_Window_notifyDestroyed = value
      lib.Instance_setMethod(self.impl, "NotifyDestroyed".encode('utf8'), cb_Window_notifyDestroyed)

   def fn_unset_Window_notifySaved(self, _window, window, filePath):
      return lib.Window_notifySaved(self.impl, _window.impl, ffi.NULL if window is None else window.impl, filePath)

   @property
   def notifySaved(self):
      if hasattr(self, 'fn_Window_notifySaved'): return self.fn_Window_notifySaved
      else: return self.fn_unset_Window_notifySaved
   @notifySaved.setter
   def notifySaved(self, value):
      self.fn_Window_notifySaved = value
      lib.Instance_setMethod(self.impl, "NotifySaved".encode('utf8'), cb_Window_notifySaved)

   def fn_unset_Window_onActivate(self, active, previous, goOnWithActivation, direct):
      if goOnWithActivation is None: goOnWithActivation = ffi.NULL
      return lib.Window_onActivate(self.impl, active, ffi.NULL if previous is None else previous.impl, goOnWithActivation, direct)

   @property
   def onActivate(self):
      if hasattr(self, 'fn_Window_onActivate'): return self.fn_Window_onActivate
      else: return self.fn_unset_Window_onActivate
   @onActivate.setter
   def onActivate(self, value):
      self.fn_Window_onActivate = value
      lib.Instance_setMethod(self.impl, "OnActivate".encode('utf8'), cb_Window_onActivate)

   def fn_unset_Window_onActivateClient(self, client, previous):
      return lib.Window_onActivateClient(self.impl, ffi.NULL if client is None else client.impl, ffi.NULL if previous is None else previous.impl)

   @property
   def onActivateClient(self):
      if hasattr(self, 'fn_Window_onActivateClient'): return self.fn_Window_onActivateClient
      else: return self.fn_unset_Window_onActivateClient
   @onActivateClient.setter
   def onActivateClient(self, value):
      self.fn_Window_onActivateClient = value
      lib.Instance_setMethod(self.impl, "OnActivateClient".encode('utf8'), cb_Window_onActivateClient)

   def fn_unset_Window_onApplyGraphics(self):
      return lib.Window_onApplyGraphics(self.impl)

   @property
   def onApplyGraphics(self):
      if hasattr(self, 'fn_Window_onApplyGraphics'): return self.fn_Window_onApplyGraphics
      else: return self.fn_unset_Window_onApplyGraphics
   @onApplyGraphics.setter
   def onApplyGraphics(self, value):
      self.fn_Window_onApplyGraphics = value
      lib.Instance_setMethod(self.impl, "OnApplyGraphics".encode('utf8'), cb_Window_onApplyGraphics)

   def fn_unset_Window_onChildAddedOrRemoved(self, child, removed):
      return lib.Window_onChildAddedOrRemoved(self.impl, ffi.NULL if child is None else child.impl, removed)

   @property
   def onChildAddedOrRemoved(self):
      if hasattr(self, 'fn_Window_onChildAddedOrRemoved'): return self.fn_Window_onChildAddedOrRemoved
      else: return self.fn_unset_Window_onChildAddedOrRemoved
   @onChildAddedOrRemoved.setter
   def onChildAddedOrRemoved(self, value):
      self.fn_Window_onChildAddedOrRemoved = value
      lib.Instance_setMethod(self.impl, "OnChildAddedOrRemoved".encode('utf8'), cb_Window_onChildAddedOrRemoved)

   def fn_unset_Window_onChildResized(self, child, x, y, w, h):
      return lib.Window_onChildResized(self.impl, ffi.NULL if child is None else child.impl, x, y, w, h)

   @property
   def onChildResized(self):
      if hasattr(self, 'fn_Window_onChildResized'): return self.fn_Window_onChildResized
      else: return self.fn_unset_Window_onChildResized
   @onChildResized.setter
   def onChildResized(self, value):
      self.fn_Window_onChildResized = value
      lib.Instance_setMethod(self.impl, "OnChildResized".encode('utf8'), cb_Window_onChildResized)

   def fn_unset_Window_onChildVisibilityToggled(self, child, visible):
      return lib.Window_onChildVisibilityToggled(self.impl, ffi.NULL if child is None else child.impl, visible)

   @property
   def onChildVisibilityToggled(self):
      if hasattr(self, 'fn_Window_onChildVisibilityToggled'): return self.fn_Window_onChildVisibilityToggled
      else: return self.fn_unset_Window_onChildVisibilityToggled
   @onChildVisibilityToggled.setter
   def onChildVisibilityToggled(self, value):
      self.fn_Window_onChildVisibilityToggled = value
      lib.Instance_setMethod(self.impl, "OnChildVisibilityToggled".encode('utf8'), cb_Window_onChildVisibilityToggled)

   def fn_unset_Window_onClose(self, parentClosing):
      return lib.Window_onClose(self.impl, parentClosing)

   @property
   def onClose(self):
      if hasattr(self, 'fn_Window_onClose'): return self.fn_Window_onClose
      else: return self.fn_unset_Window_onClose
   @onClose.setter
   def onClose(self, value):
      self.fn_Window_onClose = value
      lib.Instance_setMethod(self.impl, "OnClose".encode('utf8'), cb_Window_onClose)

   def fn_unset_Window_onCreate(self):
      return lib.Window_onCreate(self.impl)

   @property
   def onCreate(self):
      if hasattr(self, 'fn_Window_onCreate'): return self.fn_Window_onCreate
      else: return self.fn_unset_Window_onCreate
   @onCreate.setter
   def onCreate(self, value):
      self.fn_Window_onCreate = value
      lib.Instance_setMethod(self.impl, "OnCreate".encode('utf8'), cb_Window_onCreate)

   def fn_unset_Window_onDestroy(self):
      return lib.Window_onDestroy(self.impl)

   @property
   def onDestroy(self):
      if hasattr(self, 'fn_Window_onDestroy'): return self.fn_Window_onDestroy
      else: return self.fn_unset_Window_onDestroy
   @onDestroy.setter
   def onDestroy(self, value):
      self.fn_Window_onDestroy = value
      lib.Instance_setMethod(self.impl, "OnDestroy".encode('utf8'), cb_Window_onDestroy)

   def fn_unset_Window_onDestroyed(self):
      return lib.Window_onDestroyed(self.impl)

   @property
   def onDestroyed(self):
      if hasattr(self, 'fn_Window_onDestroyed'): return self.fn_Window_onDestroyed
      else: return self.fn_unset_Window_onDestroyed
   @onDestroyed.setter
   def onDestroyed(self, value):
      self.fn_Window_onDestroyed = value
      lib.Instance_setMethod(self.impl, "OnDestroyed".encode('utf8'), cb_Window_onDestroyed)

   def fn_unset_Window_onDrawOverChildren(self, surface):
      return lib.Window_onDrawOverChildren(self.impl, ffi.NULL if surface is None else surface.impl)

   @property
   def onDrawOverChildren(self):
      if hasattr(self, 'fn_Window_onDrawOverChildren'): return self.fn_Window_onDrawOverChildren
      else: return self.fn_unset_Window_onDrawOverChildren
   @onDrawOverChildren.setter
   def onDrawOverChildren(self, value):
      self.fn_Window_onDrawOverChildren = value
      lib.Instance_setMethod(self.impl, "OnDrawOverChildren".encode('utf8'), cb_Window_onDrawOverChildren)

   def fn_unset_Window_onFileModified(self, fileChange, param):
      return lib.Window_onFileModified(self.impl, fileChange, param)

   @property
   def onFileModified(self):
      if hasattr(self, 'fn_Window_onFileModified'): return self.fn_Window_onFileModified
      else: return self.fn_unset_Window_onFileModified
   @onFileModified.setter
   def onFileModified(self, value):
      self.fn_Window_onFileModified = value
      lib.Instance_setMethod(self.impl, "OnFileModified".encode('utf8'), cb_Window_onFileModified)

   def fn_unset_Window_onHScroll(self, action, position, key):
      return lib.Window_onHScroll(self.impl, action, position, key)

   @property
   def onHScroll(self):
      if hasattr(self, 'fn_Window_onHScroll'): return self.fn_Window_onHScroll
      else: return self.fn_unset_Window_onHScroll
   @onHScroll.setter
   def onHScroll(self, value):
      self.fn_Window_onHScroll = value
      lib.Instance_setMethod(self.impl, "OnHScroll".encode('utf8'), cb_Window_onHScroll)

   def fn_unset_Window_onKeyDown(self, key, ch):
      return lib.Window_onKeyDown(self.impl, key, ch)

   @property
   def onKeyDown(self):
      if hasattr(self, 'fn_Window_onKeyDown'): return self.fn_Window_onKeyDown
      else: return self.fn_unset_Window_onKeyDown
   @onKeyDown.setter
   def onKeyDown(self, value):
      self.fn_Window_onKeyDown = value
      lib.Instance_setMethod(self.impl, "OnKeyDown".encode('utf8'), cb_Window_onKeyDown)

   def fn_unset_Window_onKeyHit(self, key, ch):
      return lib.Window_onKeyHit(self.impl, key, ch)

   @property
   def onKeyHit(self):
      if hasattr(self, 'fn_Window_onKeyHit'): return self.fn_Window_onKeyHit
      else: return self.fn_unset_Window_onKeyHit
   @onKeyHit.setter
   def onKeyHit(self, value):
      self.fn_Window_onKeyHit = value
      lib.Instance_setMethod(self.impl, "OnKeyHit".encode('utf8'), cb_Window_onKeyHit)

   def fn_unset_Window_onKeyUp(self, key, ch):
      return lib.Window_onKeyUp(self.impl, key, ch)

   @property
   def onKeyUp(self):
      if hasattr(self, 'fn_Window_onKeyUp'): return self.fn_Window_onKeyUp
      else: return self.fn_unset_Window_onKeyUp
   @onKeyUp.setter
   def onKeyUp(self, value):
      self.fn_Window_onKeyUp = value
      lib.Instance_setMethod(self.impl, "OnKeyUp".encode('utf8'), cb_Window_onKeyUp)

   def fn_unset_Window_onLeftButtonDown(self, x, y, mods):
      return lib.Window_onLeftButtonDown(self.impl, x, y, mods)

   @property
   def onLeftButtonDown(self):
      if hasattr(self, 'fn_Window_onLeftButtonDown'): return self.fn_Window_onLeftButtonDown
      else: return self.fn_unset_Window_onLeftButtonDown
   @onLeftButtonDown.setter
   def onLeftButtonDown(self, value):
      self.fn_Window_onLeftButtonDown = value
      lib.Instance_setMethod(self.impl, "OnLeftButtonDown".encode('utf8'), cb_Window_onLeftButtonDown)

   def fn_unset_Window_onLeftButtonUp(self, x, y, mods):
      return lib.Window_onLeftButtonUp(self.impl, x, y, mods)

   @property
   def onLeftButtonUp(self):
      if hasattr(self, 'fn_Window_onLeftButtonUp'): return self.fn_Window_onLeftButtonUp
      else: return self.fn_unset_Window_onLeftButtonUp
   @onLeftButtonUp.setter
   def onLeftButtonUp(self, value):
      self.fn_Window_onLeftButtonUp = value
      lib.Instance_setMethod(self.impl, "OnLeftButtonUp".encode('utf8'), cb_Window_onLeftButtonUp)

   def fn_unset_Window_onLeftDoubleClick(self, x, y, mods):
      return lib.Window_onLeftDoubleClick(self.impl, x, y, mods)

   @property
   def onLeftDoubleClick(self):
      if hasattr(self, 'fn_Window_onLeftDoubleClick'): return self.fn_Window_onLeftDoubleClick
      else: return self.fn_unset_Window_onLeftDoubleClick
   @onLeftDoubleClick.setter
   def onLeftDoubleClick(self, value):
      self.fn_Window_onLeftDoubleClick = value
      lib.Instance_setMethod(self.impl, "OnLeftDoubleClick".encode('utf8'), cb_Window_onLeftDoubleClick)

   def fn_unset_Window_onLoadGraphics(self):
      return lib.Window_onLoadGraphics(self.impl)

   @property
   def onLoadGraphics(self):
      if hasattr(self, 'fn_Window_onLoadGraphics'): return self.fn_Window_onLoadGraphics
      else: return self.fn_unset_Window_onLoadGraphics
   @onLoadGraphics.setter
   def onLoadGraphics(self, value):
      self.fn_Window_onLoadGraphics = value
      lib.Instance_setMethod(self.impl, "OnLoadGraphics".encode('utf8'), cb_Window_onLoadGraphics)

   def fn_unset_Window_onMiddleButtonDown(self, x, y, mods):
      return lib.Window_onMiddleButtonDown(self.impl, x, y, mods)

   @property
   def onMiddleButtonDown(self):
      if hasattr(self, 'fn_Window_onMiddleButtonDown'): return self.fn_Window_onMiddleButtonDown
      else: return self.fn_unset_Window_onMiddleButtonDown
   @onMiddleButtonDown.setter
   def onMiddleButtonDown(self, value):
      self.fn_Window_onMiddleButtonDown = value
      lib.Instance_setMethod(self.impl, "OnMiddleButtonDown".encode('utf8'), cb_Window_onMiddleButtonDown)

   def fn_unset_Window_onMiddleButtonUp(self, x, y, mods):
      return lib.Window_onMiddleButtonUp(self.impl, x, y, mods)

   @property
   def onMiddleButtonUp(self):
      if hasattr(self, 'fn_Window_onMiddleButtonUp'): return self.fn_Window_onMiddleButtonUp
      else: return self.fn_unset_Window_onMiddleButtonUp
   @onMiddleButtonUp.setter
   def onMiddleButtonUp(self, value):
      self.fn_Window_onMiddleButtonUp = value
      lib.Instance_setMethod(self.impl, "OnMiddleButtonUp".encode('utf8'), cb_Window_onMiddleButtonUp)

   def fn_unset_Window_onMiddleDoubleClick(self, x, y, mods):
      return lib.Window_onMiddleDoubleClick(self.impl, x, y, mods)

   @property
   def onMiddleDoubleClick(self):
      if hasattr(self, 'fn_Window_onMiddleDoubleClick'): return self.fn_Window_onMiddleDoubleClick
      else: return self.fn_unset_Window_onMiddleDoubleClick
   @onMiddleDoubleClick.setter
   def onMiddleDoubleClick(self, value):
      self.fn_Window_onMiddleDoubleClick = value
      lib.Instance_setMethod(self.impl, "OnMiddleDoubleClick".encode('utf8'), cb_Window_onMiddleDoubleClick)

   def fn_unset_Window_onMouseCaptureLost(self):
      return lib.Window_onMouseCaptureLost(self.impl)

   @property
   def onMouseCaptureLost(self):
      if hasattr(self, 'fn_Window_onMouseCaptureLost'): return self.fn_Window_onMouseCaptureLost
      else: return self.fn_unset_Window_onMouseCaptureLost
   @onMouseCaptureLost.setter
   def onMouseCaptureLost(self, value):
      self.fn_Window_onMouseCaptureLost = value
      lib.Instance_setMethod(self.impl, "OnMouseCaptureLost".encode('utf8'), cb_Window_onMouseCaptureLost)

   def fn_unset_Window_onMouseLeave(self, mods):
      return lib.Window_onMouseLeave(self.impl, mods)

   @property
   def onMouseLeave(self):
      if hasattr(self, 'fn_Window_onMouseLeave'): return self.fn_Window_onMouseLeave
      else: return self.fn_unset_Window_onMouseLeave
   @onMouseLeave.setter
   def onMouseLeave(self, value):
      self.fn_Window_onMouseLeave = value
      lib.Instance_setMethod(self.impl, "OnMouseLeave".encode('utf8'), cb_Window_onMouseLeave)

   def fn_unset_Window_onMouseMove(self, x, y, mods):
      return lib.Window_onMouseMove(self.impl, x, y, mods)

   @property
   def onMouseMove(self):
      if hasattr(self, 'fn_Window_onMouseMove'): return self.fn_Window_onMouseMove
      else: return self.fn_unset_Window_onMouseMove
   @onMouseMove.setter
   def onMouseMove(self, value):
      self.fn_Window_onMouseMove = value
      lib.Instance_setMethod(self.impl, "OnMouseMove".encode('utf8'), cb_Window_onMouseMove)

   def fn_unset_Window_onMouseOver(self, x, y, mods):
      return lib.Window_onMouseOver(self.impl, x, y, mods)

   @property
   def onMouseOver(self):
      if hasattr(self, 'fn_Window_onMouseOver'): return self.fn_Window_onMouseOver
      else: return self.fn_unset_Window_onMouseOver
   @onMouseOver.setter
   def onMouseOver(self, value):
      self.fn_Window_onMouseOver = value
      lib.Instance_setMethod(self.impl, "OnMouseOver".encode('utf8'), cb_Window_onMouseOver)

   def fn_unset_Window_onMoving(self, x, y, w, h):
      if x is None: x = ffi.NULL
      if y is None: y = ffi.NULL
      return lib.Window_onMoving(self.impl, x, y, w, h)

   @property
   def onMoving(self):
      if hasattr(self, 'fn_Window_onMoving'): return self.fn_Window_onMoving
      else: return self.fn_unset_Window_onMoving
   @onMoving.setter
   def onMoving(self, value):
      self.fn_Window_onMoving = value
      lib.Instance_setMethod(self.impl, "OnMoving".encode('utf8'), cb_Window_onMoving)

   def fn_unset_Window_onMultiTouch(self, event, infos, mods):
      return lib.Window_onMultiTouch(self.impl, event, ffi.NULL if infos is None else infos.impl, mods)

   @property
   def onMultiTouch(self):
      if hasattr(self, 'fn_Window_onMultiTouch'): return self.fn_Window_onMultiTouch
      else: return self.fn_unset_Window_onMultiTouch
   @onMultiTouch.setter
   def onMultiTouch(self, value):
      self.fn_Window_onMultiTouch = value
      lib.Instance_setMethod(self.impl, "OnMultiTouch".encode('utf8'), cb_Window_onMultiTouch)

   def fn_unset_Window_onPosition(self, x, y, width, height):
      return lib.Window_onPosition(self.impl, x, y, width, height)

   @property
   def onPosition(self):
      if hasattr(self, 'fn_Window_onPosition'): return self.fn_Window_onPosition
      else: return self.fn_unset_Window_onPosition
   @onPosition.setter
   def onPosition(self, value):
      self.fn_Window_onPosition = value
      lib.Instance_setMethod(self.impl, "OnPosition".encode('utf8'), cb_Window_onPosition)

   def fn_unset_Window_onPostCreate(self):
      return lib.Window_onPostCreate(self.impl)

   @property
   def onPostCreate(self):
      if hasattr(self, 'fn_Window_onPostCreate'): return self.fn_Window_onPostCreate
      else: return self.fn_unset_Window_onPostCreate
   @onPostCreate.setter
   def onPostCreate(self, value):
      self.fn_Window_onPostCreate = value
      lib.Instance_setMethod(self.impl, "OnPostCreate".encode('utf8'), cb_Window_onPostCreate)

   def fn_unset_Window_onRedraw(self, surface):
      return lib.Window_onRedraw(self.impl, ffi.NULL if surface is None else surface.impl)

   @property
   def onRedraw(self):
      if hasattr(self, 'fn_Window_onRedraw'): return self.fn_Window_onRedraw
      else: return self.fn_unset_Window_onRedraw
   @onRedraw.setter
   def onRedraw(self, value):
      self.fn_Window_onRedraw = value
      lib.Instance_setMethod(self.impl, "OnRedraw".encode('utf8'), cb_Window_onRedraw)

   def fn_unset_Window_onResize(self, width, height):
      return lib.Window_onResize(self.impl, width, height)

   @property
   def onResize(self):
      if hasattr(self, 'fn_Window_onResize'): return self.fn_Window_onResize
      else: return self.fn_unset_Window_onResize
   @onResize.setter
   def onResize(self, value):
      self.fn_Window_onResize = value
      lib.Instance_setMethod(self.impl, "OnResize".encode('utf8'), cb_Window_onResize)

   def fn_unset_Window_onResizing(self, width, height):
      if width is None: width = ffi.NULL
      if height is None: height = ffi.NULL
      return lib.Window_onResizing(self.impl, width, height)

   @property
   def onResizing(self):
      if hasattr(self, 'fn_Window_onResizing'): return self.fn_Window_onResizing
      else: return self.fn_unset_Window_onResizing
   @onResizing.setter
   def onResizing(self, value):
      self.fn_Window_onResizing = value
      lib.Instance_setMethod(self.impl, "OnResizing".encode('utf8'), cb_Window_onResizing)

   def fn_unset_Window_onRightButtonDown(self, x, y, mods):
      return lib.Window_onRightButtonDown(self.impl, x, y, mods)

   @property
   def onRightButtonDown(self):
      if hasattr(self, 'fn_Window_onRightButtonDown'): return self.fn_Window_onRightButtonDown
      else: return self.fn_unset_Window_onRightButtonDown
   @onRightButtonDown.setter
   def onRightButtonDown(self, value):
      self.fn_Window_onRightButtonDown = value
      lib.Instance_setMethod(self.impl, "OnRightButtonDown".encode('utf8'), cb_Window_onRightButtonDown)

   def fn_unset_Window_onRightButtonUp(self, x, y, mods):
      return lib.Window_onRightButtonUp(self.impl, x, y, mods)

   @property
   def onRightButtonUp(self):
      if hasattr(self, 'fn_Window_onRightButtonUp'): return self.fn_Window_onRightButtonUp
      else: return self.fn_unset_Window_onRightButtonUp
   @onRightButtonUp.setter
   def onRightButtonUp(self, value):
      self.fn_Window_onRightButtonUp = value
      lib.Instance_setMethod(self.impl, "OnRightButtonUp".encode('utf8'), cb_Window_onRightButtonUp)

   def fn_unset_Window_onRightDoubleClick(self, x, y, mods):
      return lib.Window_onRightDoubleClick(self.impl, x, y, mods)

   @property
   def onRightDoubleClick(self):
      if hasattr(self, 'fn_Window_onRightDoubleClick'): return self.fn_Window_onRightDoubleClick
      else: return self.fn_unset_Window_onRightDoubleClick
   @onRightDoubleClick.setter
   def onRightDoubleClick(self, value):
      self.fn_Window_onRightDoubleClick = value
      lib.Instance_setMethod(self.impl, "OnRightDoubleClick".encode('utf8'), cb_Window_onRightDoubleClick)

   def fn_unset_Window_onSaveFile(self, fileName):
      return lib.Window_onSaveFile(self.impl, fileName)

   @property
   def onSaveFile(self):
      if hasattr(self, 'fn_Window_onSaveFile'): return self.fn_Window_onSaveFile
      else: return self.fn_unset_Window_onSaveFile
   @onSaveFile.setter
   def onSaveFile(self, value):
      self.fn_Window_onSaveFile = value
      lib.Instance_setMethod(self.impl, "OnSaveFile".encode('utf8'), cb_Window_onSaveFile)

   def fn_unset_Window_onStateChange(self, state, mods):
      return lib.Window_onStateChange(self.impl, state, mods)

   @property
   def onStateChange(self):
      if hasattr(self, 'fn_Window_onStateChange'): return self.fn_Window_onStateChange
      else: return self.fn_unset_Window_onStateChange
   @onStateChange.setter
   def onStateChange(self, value):
      self.fn_Window_onStateChange = value
      lib.Instance_setMethod(self.impl, "OnStateChange".encode('utf8'), cb_Window_onStateChange)

   def fn_unset_Window_onSysKeyDown(self, key, ch):
      return lib.Window_onSysKeyDown(self.impl, key, ch)

   @property
   def onSysKeyDown(self):
      if hasattr(self, 'fn_Window_onSysKeyDown'): return self.fn_Window_onSysKeyDown
      else: return self.fn_unset_Window_onSysKeyDown
   @onSysKeyDown.setter
   def onSysKeyDown(self, value):
      self.fn_Window_onSysKeyDown = value
      lib.Instance_setMethod(self.impl, "OnSysKeyDown".encode('utf8'), cb_Window_onSysKeyDown)

   def fn_unset_Window_onSysKeyHit(self, key, ch):
      return lib.Window_onSysKeyHit(self.impl, key, ch)

   @property
   def onSysKeyHit(self):
      if hasattr(self, 'fn_Window_onSysKeyHit'): return self.fn_Window_onSysKeyHit
      else: return self.fn_unset_Window_onSysKeyHit
   @onSysKeyHit.setter
   def onSysKeyHit(self, value):
      self.fn_Window_onSysKeyHit = value
      lib.Instance_setMethod(self.impl, "OnSysKeyHit".encode('utf8'), cb_Window_onSysKeyHit)

   def fn_unset_Window_onSysKeyUp(self, key, ch):
      return lib.Window_onSysKeyUp(self.impl, key, ch)

   @property
   def onSysKeyUp(self):
      if hasattr(self, 'fn_Window_onSysKeyUp'): return self.fn_Window_onSysKeyUp
      else: return self.fn_unset_Window_onSysKeyUp
   @onSysKeyUp.setter
   def onSysKeyUp(self, value):
      self.fn_Window_onSysKeyUp = value
      lib.Instance_setMethod(self.impl, "OnSysKeyUp".encode('utf8'), cb_Window_onSysKeyUp)

   def fn_unset_Window_onUnloadGraphics(self):
      return lib.Window_onUnloadGraphics(self.impl)

   @property
   def onUnloadGraphics(self):
      if hasattr(self, 'fn_Window_onUnloadGraphics'): return self.fn_Window_onUnloadGraphics
      else: return self.fn_unset_Window_onUnloadGraphics
   @onUnloadGraphics.setter
   def onUnloadGraphics(self, value):
      self.fn_Window_onUnloadGraphics = value
      lib.Instance_setMethod(self.impl, "OnUnloadGraphics".encode('utf8'), cb_Window_onUnloadGraphics)

   def fn_unset_Window_onVScroll(self, action, position, key):
      return lib.Window_onVScroll(self.impl, action, position, key)

   @property
   def onVScroll(self):
      if hasattr(self, 'fn_Window_onVScroll'): return self.fn_Window_onVScroll
      else: return self.fn_unset_Window_onVScroll
   @onVScroll.setter
   def onVScroll(self, value):
      self.fn_Window_onVScroll = value
      lib.Instance_setMethod(self.impl, "OnVScroll".encode('utf8'), cb_Window_onVScroll)

   def fn_unset_Window_preShowDecorations(self, captionFont, surface, name, active, moving):
      return lib.Window_preShowDecorations(self.impl, ffi.NULL if captionFont is None else captionFont.impl, ffi.NULL if surface is None else surface.impl, name, active, moving)

   @property
   def preShowDecorations(self):
      if hasattr(self, 'fn_Window_preShowDecorations'): return self.fn_Window_preShowDecorations
      else: return self.fn_unset_Window_preShowDecorations
   @preShowDecorations.setter
   def preShowDecorations(self, value):
      self.fn_Window_preShowDecorations = value
      lib.Instance_setMethod(self.impl, "PreShowDecorations".encode('utf8'), cb_Window_preShowDecorations)

   def releaseCapture(self):
      lib.Window_releaseCapture(self.impl)

   def removeResource(self, resource):
      if resource is not None and not isinstance(resource, Resource): resource = Resource(resource)
      if resource is None: resource = ffi.NULL
      lib.Window_removeResource(self.impl, resource)

   def restoreCaret(self):
      lib.Window_restoreCaret(self.impl)

   def scroll(self, x, y):
      lib.Window_scroll(self.impl, x, y)

   def fn_unset_Window_setBox(self, box):
      return lib.Window_setBox(self.impl, ffi.NULL if box is None else box.impl)

   @property
   def setBox(self):
      if hasattr(self, 'fn_Window_setBox'): return self.fn_Window_setBox
      else: return self.fn_unset_Window_setBox
   @setBox.setter
   def setBox(self, value):
      self.fn_Window_setBox = value
      lib.Instance_setMethod(self.impl, "SetBox".encode('utf8'), cb_Window_setBox)

   def setCaption(self, format):
      lib.Window_setCaption(self.impl, format.encode('utf8'))

   def setCaret(self, x, y, size):
      lib.Window_setCaret(self.impl, x, y, size)

   def setMouseRange(self, range):
      if range is not None and not isinstance(range, Box): range = Box(range)
      range = ffi.NULL if range is None else range.impl
      lib.Window_setMouseRange(self.impl, ffi.cast("Box *", range))

   def setMouseRangeToClient(self):
      lib.Window_setMouseRangeToClient(self.impl)

   def setMouseRangeToWindow(self):
      lib.Window_setMouseRangeToWindow(self.impl)

   def setScrollArea(self, width, height, snapToStep):
      lib.Window_setScrollArea(self.impl, width, height, snapToStep)

   def setScrollLineStep(self, stepX, stepY):
      lib.Window_setScrollLineStep(self.impl, stepX, stepY)

   def setScrollPosition(self, x, y):
      lib.Window_setScrollPosition(self.impl, x, y)

   def setState(self, newState, activate, mods):
      if mods is not None and not isinstance(mods, Modifiers): mods = Modifiers(mods)
      if mods is None: mods = ffi.NULL
      lib.Window_setState(self.impl, newState, activate, mods)

   def setText(self, format):
      lib.Window_setText(self.impl, format.encode('utf8'))

   def fn_unset_Window_setWindowArea(self, x, y, w, h, cw, ch):
      if x is None: x = ffi.NULL
      if y is None: y = ffi.NULL
      if w is None: w = ffi.NULL
      if h is None: h = ffi.NULL
      if cw is None: cw = ffi.NULL
      if ch is None: ch = ffi.NULL
      return lib.Window_setWindowArea(self.impl, x, y, w, h, cw, ch)

   @property
   def setWindowArea(self):
      if hasattr(self, 'fn_Window_setWindowArea'): return self.fn_Window_setWindowArea
      else: return self.fn_unset_Window_setWindowArea
   @setWindowArea.setter
   def setWindowArea(self, value):
      self.fn_Window_setWindowArea = value
      lib.Instance_setMethod(self.impl, "SetWindowArea".encode('utf8'), cb_Window_setWindowArea)

   def fn_unset_Window_setWindowMinimum(self, mw, mh):
      if mw is None: mw = ffi.NULL
      if mh is None: mh = ffi.NULL
      return lib.Window_setWindowMinimum(self.impl, mw, mh)

   @property
   def setWindowMinimum(self):
      if hasattr(self, 'fn_Window_setWindowMinimum'): return self.fn_Window_setWindowMinimum
      else: return self.fn_unset_Window_setWindowMinimum
   @setWindowMinimum.setter
   def setWindowMinimum(self, value):
      self.fn_Window_setWindowMinimum = value
      lib.Instance_setMethod(self.impl, "SetWindowMinimum".encode('utf8'), cb_Window_setWindowMinimum)

   def fn_unset_Window_showDecorations(self, captionFont, surface, name, active, moving):
      return lib.Window_showDecorations(self.impl, ffi.NULL if captionFont is None else captionFont.impl, ffi.NULL if surface is None else surface.impl, name, active, moving)

   @property
   def showDecorations(self):
      if hasattr(self, 'fn_Window_showDecorations'): return self.fn_Window_showDecorations
      else: return self.fn_unset_Window_showDecorations
   @showDecorations.setter
   def showDecorations(self, value):
      self.fn_Window_showDecorations = value
      lib.Instance_setMethod(self.impl, "ShowDecorations".encode('utf8'), cb_Window_showDecorations)

   def showSysMenu(self, x, y):
      lib.Window_showSysMenu(self.impl, x, y)

   def softActivate(self):
      lib.Window_softActivate(self.impl)

   def update(self, region = None):
      if region is not None and not isinstance(region, Box): region = Box(region)
      region = ffi.NULL if region is None else region.impl
      lib.Window_update(self.impl, ffi.cast("Box *", region))

   def updateDisplay(self):
      lib.Window_updateDisplay(self.impl)

   def fn_unset_Window_updateNonClient(self):
      return lib.Window_updateNonClient(self.impl)

   @property
   def updateNonClient(self):
      if hasattr(self, 'fn_Window_updateNonClient'): return self.fn_Window_updateNonClient
      else: return self.fn_unset_Window_updateNonClient
   @updateNonClient.setter
   def updateNonClient(self, value):
      self.fn_Window_updateNonClient = value
      lib.Instance_setMethod(self.impl, "UpdateNonClient".encode('utf8'), cb_Window_updateNonClient)

   def writeCaption(self, surface, x, y):
      if surface is not None and not isinstance(surface, Surface): surface = Surface(surface)
      if surface is None: surface = ffi.NULL
      lib.Window_writeCaption(self.impl, surface, x, y)

class SmartKey(pyBaseClass):
   def __init__(self, code = 0, shift = False, ctrl = False, alt = False, modifiers = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(code, SmartKey):
         self.impl = code.impl
      else:
         if isinstance(code, tuple):
            __tuple = code
            code = 0
            if len(__tuple) > 0: code = __tuple[0]
            if len(__tuple) > 1: shift = __tuple[1]
            if len(__tuple) > 2: ctrl = __tuple[2]
            if len(__tuple) > 3: alt = __tuple[3]
            if len(__tuple) > 4: modifiers = __tuple[4]
         elif isinstance(code, Key):
            self.impl = lib.Key_to_SmartKey(code.impl)
            return
         if not isinstance(modifiers, Modifiers): modifiers = Modifiers(modifiers)
         self.impl = (
            (code           << lib.SMARTKEY_code_SHIFT)           |
            (shift          << lib.SMARTKEY_shift_SHIFT)          |
            (ctrl           << lib.SMARTKEY_ctrl_SHIFT)           |
            (alt            << lib.SMARTKEY_alt_SHIFT)            |
            (modifiers.impl << lib.SMARTKEY_modifiers_SHIFT)      )

   @property
   def code(self): return ((((self.impl)) & lib.SMARTKEY_code_MASK) >> lib.SMARTKEY_code_SHIFT)
   @code.setter
   def code(self, value): self.value = ((self.impl) & ~(lib.SMARTKEY_code_MASK)) | (((value)) << lib.SMARTKEY_code_SHIFT)

   @property
   def shift(self): return ((((self.impl)) & lib.SMARTKEY_shift_MASK) >> lib.SMARTKEY_shift_SHIFT)
   @shift.setter
   def shift(self, value): self.value = ((self.impl) & ~(lib.SMARTKEY_shift_MASK)) | (((value)) << lib.SMARTKEY_shift_SHIFT)

   @property
   def ctrl(self): return ((((self.impl)) & lib.SMARTKEY_ctrl_MASK) >> lib.SMARTKEY_ctrl_SHIFT)
   @ctrl.setter
   def ctrl(self, value): self.value = ((self.impl) & ~(lib.SMARTKEY_ctrl_MASK)) | (((value)) << lib.SMARTKEY_ctrl_SHIFT)

   @property
   def alt(self): return ((((self.impl)) & lib.SMARTKEY_alt_MASK) >> lib.SMARTKEY_alt_SHIFT)
   @alt.setter
   def alt(self, value): self.value = ((self.impl) & ~(lib.SMARTKEY_alt_MASK)) | (((value)) << lib.SMARTKEY_alt_SHIFT)

   @property
   def modifiers(self): return ((((self.impl)) & lib.SMARTKEY_modifiers_MASK) >> lib.SMARTKEY_modifiers_SHIFT)
   @modifiers.setter
   def modifiers(self, value): self.value = ((self.impl) & ~(lib.SMARTKEY_modifiers_MASK)) | (((value)) << lib.SMARTKEY_modifiers_SHIFT)

class Key(pyBaseClass):
   def __init__(self, code = 0, shift = False, ctrl = False, alt = False, cmd = False, modifiers = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(code, Key):
         self.impl = code.impl
      else:
         if isinstance(code, SmartKey):
            self.impl = lib.Key_from_SmartKey(code.impl)
            return
         if not isinstance(modifiers, Modifiers): modifiers = Modifiers(modifiers)
         self.impl = (
            (code           << lib.KEY_code_SHIFT)           |
            (shift          << lib.KEY_shift_SHIFT)          |
            (ctrl           << lib.KEY_ctrl_SHIFT)           |
            (alt            << lib.KEY_alt_SHIFT)            |
            (cmd            << lib.KEY_cmd_SHIFT)            |
            (modifiers.impl << lib.KEY_modifiers_SHIFT)      )

   @property
   def code(self): return ((((self.impl)) & lib.KEY_code_MASK) >> lib.KEY_code_SHIFT)
   @code.setter
   def code(self, value): self.value = ((self.impl) & ~(lib.KEY_code_MASK)) | (((value)) << lib.KEY_code_SHIFT)

   @property
   def shift(self): return ((((self.impl)) & lib.KEY_shift_MASK) >> lib.KEY_shift_SHIFT)
   @shift.setter
   def shift(self, value): self.value = ((self.impl) & ~(lib.KEY_shift_MASK)) | (((value)) << lib.KEY_shift_SHIFT)

   @property
   def ctrl(self): return ((((self.impl)) & lib.KEY_ctrl_MASK) >> lib.KEY_ctrl_SHIFT)
   @ctrl.setter
   def ctrl(self, value): self.value = ((self.impl) & ~(lib.KEY_ctrl_MASK)) | (((value)) << lib.KEY_ctrl_SHIFT)

   @property
   def alt(self): return ((((self.impl)) & lib.KEY_alt_MASK) >> lib.KEY_alt_SHIFT)
   @alt.setter
   def alt(self, value): self.value = ((self.impl) & ~(lib.KEY_alt_MASK)) | (((value)) << lib.KEY_alt_SHIFT)

   @property
   def cmd(self): return ((((self.impl)) & lib.KEY_cmd_MASK) >> lib.KEY_cmd_SHIFT)
   @cmd.setter
   def cmd(self, value): self.value = ((self.impl) & ~(lib.KEY_cmd_MASK)) | (((value)) << lib.KEY_cmd_SHIFT)

   @property
   def modifiers(self): return ((((self.impl)) & lib.KEY_modifiers_MASK) >> lib.KEY_modifiers_SHIFT)
   @modifiers.setter
   def modifiers(self, value): self.value = ((self.impl) & ~(lib.KEY_modifiers_MASK)) | (((value)) << lib.KEY_modifiers_SHIFT)

   # here is a conversion
   # Key_to_SmartKey
   # Key_from_SmartKey

class BorderBits(pyBaseClass):
   def __init__(self, contour = False, fixed = False, sizable = False, deep = False, bevel = False, thin = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(contour, BorderBits):
         self.impl = contour.impl
      else:
         self.impl = (
            (contour << lib.BORDERBITS_contour_SHIFT) |
            (fixed   << lib.BORDERBITS_fixed_SHIFT)   |
            (sizable << lib.BORDERBITS_sizable_SHIFT) |
            (deep    << lib.BORDERBITS_deep_SHIFT)    |
            (bevel   << lib.BORDERBITS_bevel_SHIFT)   |
            (thin    << lib.BORDERBITS_thin_SHIFT)    )

   @property
   def contour(self): return ((((self.impl)) & lib.BORDERBITS_contour_MASK) >> lib.BORDERBITS_contour_SHIFT)
   @contour.setter
   def contour(self, value): self.value = ((self.impl) & ~(lib.BORDERBITS_contour_MASK)) | (((value)) << lib.BORDERBITS_contour_SHIFT)

   @property
   def fixed(self): return ((((self.impl)) & lib.BORDERBITS_fixed_MASK) >> lib.BORDERBITS_fixed_SHIFT)
   @fixed.setter
   def fixed(self, value): self.value = ((self.impl) & ~(lib.BORDERBITS_fixed_MASK)) | (((value)) << lib.BORDERBITS_fixed_SHIFT)

   @property
   def sizable(self): return ((((self.impl)) & lib.BORDERBITS_sizable_MASK) >> lib.BORDERBITS_sizable_SHIFT)
   @sizable.setter
   def sizable(self, value): self.value = ((self.impl) & ~(lib.BORDERBITS_sizable_MASK)) | (((value)) << lib.BORDERBITS_sizable_SHIFT)

   @property
   def deep(self): return ((((self.impl)) & lib.BORDERBITS_deep_MASK) >> lib.BORDERBITS_deep_SHIFT)
   @deep.setter
   def deep(self, value): self.value = ((self.impl) & ~(lib.BORDERBITS_deep_MASK)) | (((value)) << lib.BORDERBITS_deep_SHIFT)

   @property
   def bevel(self): return ((((self.impl)) & lib.BORDERBITS_bevel_MASK) >> lib.BORDERBITS_bevel_SHIFT)
   @bevel.setter
   def bevel(self, value): self.value = ((self.impl) & ~(lib.BORDERBITS_bevel_MASK)) | (((value)) << lib.BORDERBITS_bevel_SHIFT)

   @property
   def thin(self): return ((((self.impl)) & lib.BORDERBITS_thin_MASK) >> lib.BORDERBITS_thin_SHIFT)
   @thin.setter
   def thin(self, value): self.value = ((self.impl) & ~(lib.BORDERBITS_thin_MASK)) | (((value)) << lib.BORDERBITS_thin_SHIFT)

class Anchor:
   def __init__(self, left = None, top = None, right = None, bottom = None, horz = None, vert = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("Anchor *", impl)
      else:
         if isinstance(left, tuple):
            __tuple = left
            left = None
            if len(__tuple) > 0: left   = __tuple[0]
            if len(__tuple) > 1: top    = __tuple[1]
            if len(__tuple) > 2: right  = __tuple[2]
            if len(__tuple) > 3: bottom = __tuple[3]
         if left is not None:
            if not isinstance(left, AnchorValue): left = AnchorValue(left)
         if top is not None:
            if not isinstance(top, AnchorValue): top = AnchorValue(top)
         if right is not None:
            if not isinstance(right, AnchorValue): right = AnchorValue(right)
         if bottom is not None:
            if not isinstance(bottom, AnchorValue): bottom = AnchorValue(bottom)
         if horz is not None:
            if not isinstance(horz, MiddleAnchorValue): horz = MiddleAnchorValue(horz)
         if vert is not None:
            if not isinstance(vert, MiddleAnchorValue): vert = MiddleAnchorValue(vert)
         __members = { }
         if left is not None:   __members['left']   = left.impl[0]
         if top is not None:    __members['top']    = top.impl[0]
         if right is not None:  __members['right']  = right.impl[0]
         if bottom is not None: __members['bottom'] = bottom.impl[0]
         if horz is not None:   __members['horz']   = horz.impl[0]
         if vert is not None:   __members['vert']   = vert.impl[0]
         self.impl = ffi.new("Anchor *", __members)

   @property
   def left(self): return AnchorValue(impl = self.impl.left)
   @left.setter
   def left(self, value):
      if not isinstance(value, AnchorValue): value = AnchorValue(value)
      self.impl.left = value.impl[0]

   @property
   def top(self): return AnchorValue(impl = self.impl.top)
   @top.setter
   def top(self, value):
      if not isinstance(value, AnchorValue): value = AnchorValue(value)
      self.impl.top = value.impl[0]

   @property
   def right(self): return AnchorValue(impl = self.impl.right)
   @right.setter
   def right(self, value):
      if not isinstance(value, AnchorValue): value = AnchorValue(value)
      self.impl.right = value.impl[0]

   @property
   def bottom(self): return AnchorValue(impl = self.impl.bottom)
   @bottom.setter
   def bottom(self, value):
      if not isinstance(value, AnchorValue): value = AnchorValue(value)
      self.impl.bottom = value.impl[0]

   @property
   def horz(self): return MiddleAnchorValue(impl = self.impl.horz)
   @horz.setter
   def horz(self, value):
      if not isinstance(value, MiddleAnchorValue): value = MiddleAnchorValue(value)
      self.impl.horz = value.impl[0]

   @property
   def vert(self): return MiddleAnchorValue(impl = self.impl.vert)
   @vert.setter
   def vert(self, value):
      if not isinstance(value, MiddleAnchorValue): value = MiddleAnchorValue(value)
      self.impl.vert = value.impl[0]

class AnchorValue:
   def __init__(self, type = None, distance = None, percent = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("AnchorValue *", impl)
      else:
         if isinstance(type, tuple):
            __tuple = type
            type = 0
            if len(__tuple) > 0: type     = __tuple[0]
            if len(__tuple) > 1: distance = __tuple[1]
         elif isinstance(type, MinMaxValue):
            self.impl = ffi.new("AnchorValue *")
            lib.AnchorValue_from_MinMaxValue(self.impl, type.impl)
            return
         elif isinstance(type, int):
            self.impl = ffi.new("AnchorValue *")
            lib.AnchorValue_from_int(self.impl, type)
            return
         elif isinstance(type, float):
            self.impl = ffi.new("AnchorValue *")
            lib.AnchorValue_from_double(self.impl, type)
            return
         __members = { }
         if type is not None:     __members['type']     = type
         if distance is not None: __members['distance'] = distance
         if percent is not None:  __members['percent']  = percent
         self.impl = ffi.new("AnchorValue *", __members)

   @property
   def type(self): return self.impl.type
   @type.setter
   def type(self, value): self.impl.type = value

   @property
   def distance(self): return self.impl.distance
   @distance.setter
   def distance(self, value): self.impl.distance = value

   @property
   def percent(self): return self.impl.percent
   @percent.setter
   def percent(self, value): self.impl.percent = value

   # here is a conversion
   # AnchorValue_to_MinMaxValue
   # AnchorValue_from_MinMaxValue

   def __int__(self): return lib.AnchorValue_to_int(self.impl)

   def __float__(self): return lib.AnchorValue_to_double(self.impl)

class AnchorValueType:
   none           = lib.AnchorValueType_none
   offset         = lib.AnchorValueType_offset
   relative       = lib.AnchorValueType_relative
   middleRelative = lib.AnchorValueType_middleRelative
   cascade        = lib.AnchorValueType_cascade
   vTiled         = lib.AnchorValueType_vTiled
   hTiled         = lib.AnchorValueType_hTiled

class BorderStyle(BorderBits):
   none         = BorderBits(impl = lib.BorderStyle_none)
   contour      = BorderBits(impl = lib.BorderStyle_contour)
   fixed        = BorderBits(impl = lib.BorderStyle_fixed)
   sizable      = BorderBits(impl = lib.BorderStyle_sizable)
   thin         = BorderBits(impl = lib.BorderStyle_thin)
   sizableThin  = BorderBits(impl = lib.BorderStyle_sizableThin)
   deep         = BorderBits(impl = lib.BorderStyle_deep)
   bevel        = BorderBits(impl = lib.BorderStyle_bevel)
   sizableDeep  = BorderBits(impl = lib.BorderStyle_sizableDeep)
   sizableBevel = BorderBits(impl = lib.BorderStyle_sizableBevel)
   fixedDeep    = BorderBits(impl = lib.BorderStyle_fixedDeep)
   fixedBevel   = BorderBits(impl = lib.BorderStyle_fixedBevel)
   deepContour  = BorderBits(impl = lib.BorderStyle_deepContour)

class ClipBoard:
   def __init__(self, text = None, handle = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("ClipBoard *", lib.Instance_new(lib.class_ClipBoard))
         if text is not None:   self.text   = text
         if handle is not None: self.handle = handle

   @property
   def text(self): return self.impl.text
   @text.setter
   def text(self, value): self.impl.text = value

   @property
   def handle(self): return self.impl.handle
   @handle.setter
   def handle(self, value): self.impl.handle = value

   @property
   def memory(self): value = lib.ClipBoard_get_memory(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')

   def allocate(self, size):
      return lib.ClipBoard_allocate(self.impl, size)

   def clear(self):
      lib.ClipBoard_clear(self.impl)

   def load(self):
      return lib.ClipBoard_load(self.impl)

   def save(self):
      return lib.ClipBoard_save(self.impl)

   def unload(self):
      lib.ClipBoard_unload(self.impl)

class CommonControl(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def toolTip(self): value = lib.CommonControl_get_toolTip(self.impl) if self is not None and self.impl != ffi.NULL else ffi.NULL; return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @toolTip.setter
   def toolTip(self, value):
      if not isinstance(value, String): value = String(value)
      lib.CommonControl_set_toolTip(self.impl, value.impl.encode('utf8'))

class ControllableWindow(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

class CreationActivationOption:
   activate  = lib.CreationActivationOption_activate
   flash     = lib.CreationActivationOption_flash
   doNothing = lib.CreationActivationOption_doNothing

class Cursor(Instance):
   def __init__(self,
                systemCursor = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if systemCursor is not None: self.systemCursor = systemCursor

   @property
   def systemCursor(self): return None
   @systemCursor.setter
   def systemCursor(self, value):
      lib.Cursor_set_systemCursor(self.impl, value)

   def load(self, name, hotSpotX, hotSpotY, paletteShades):
      return lib.Cursor_load(self.impl, name.encode('utf8'), hotSpotX, hotSpotY, paletteShades)

class DialogResult:
   cancel = lib.DialogResult_cancel
   yes    = lib.DialogResult_yes
   no     = lib.DialogResult_no
   ok     = lib.DialogResult_ok

class Extent(OldList):
   def __init__(self, first = None, last = None, count = 0, offset = 0, circ = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("Extent *", impl)
      else:
         if isinstance(first, tuple):
            __tuple = first
            first = None
            if len(__tuple) > 0: first  = __tuple[0]
            if len(__tuple) > 1: last   = __tuple[1]
            if len(__tuple) > 2: count  = __tuple[2]
            if len(__tuple) > 3: offset = __tuple[3]
         self.impl = ffi.new("Extent *", { 'first' : first, 'last' : last, 'count' : count, 'offset' : offset, 'circ' : circ })

   @property
   def first(self): return self.impl.first
   @first.setter
   def first(self, value): self.impl.first = value

   @property
   def last(self): return self.impl.last
   @last.setter
   def last(self, value): self.impl.last = value

   @property
   def count(self): return self.impl.count
   @count.setter
   def count(self, value): self.impl.count = value

   @property
   def offset(self): return self.impl.offset
   @offset.setter
   def offset(self, value): self.impl.offset = value

   @property
   def circ(self): return self.impl.circ
   @circ.setter
   def circ(self, value): self.impl.circ = value

   def addBox(self, box):
      if box is not None and not isinstance(box, Box): box = Box(box)
      box = ffi.NULL if box is None else box.impl
      lib.Extent_addBox(ffi.cast("Extent *", self.impl), ffi.cast("Box *", box))

   def copy(self, source):
      if source is not None and not isinstance(source, Extent): source = Extent(source)
      source = ffi.NULL if source is None else source.impl
      lib.Extent_copy(ffi.cast("Extent *", self.impl), ffi.cast("Extent *", source))

   def empty(self):
      lib.Extent_empty(ffi.cast("Extent *", self.impl))

   def excludeBox(self, box, temp):
      if box is not None and not isinstance(box, Box): box = Box(box)
      box = ffi.NULL if box is None else box.impl
      if temp is not None and not isinstance(temp, Extent): temp = Extent(temp)
      temp = ffi.NULL if temp is None else temp.impl
      lib.Extent_excludeBox(ffi.cast("Extent *", self.impl), ffi.cast("Box *", box), ffi.cast("Extent *", temp))

   def exclusion(self, b, temp):
      if b is not None and not isinstance(b, Extent): b = Extent(b)
      b = ffi.NULL if b is None else b.impl
      if temp is not None and not isinstance(temp, Extent): temp = Extent(temp)
      temp = ffi.NULL if temp is None else temp.impl
      lib.Extent_exclusion(ffi.cast("Extent *", self.impl), ffi.cast("Extent *", b), ffi.cast("Extent *", temp))

   def intersectBox(self, box):
      if box is not None and not isinstance(box, Box): box = Box(box)
      box = ffi.NULL if box is None else box.impl
      lib.Extent_intersectBox(ffi.cast("Extent *", self.impl), ffi.cast("Box *", box))

   def intersection(self, b, temp, temp2, temp3):
      if b is not None and not isinstance(b, Extent): b = Extent(b)
      b = ffi.NULL if b is None else b.impl
      if temp is not None and not isinstance(temp, Extent): temp = Extent(temp)
      temp = ffi.NULL if temp is None else temp.impl
      if temp2 is not None and not isinstance(temp2, Extent): temp2 = Extent(temp2)
      temp2 = ffi.NULL if temp2 is None else temp2.impl
      if temp3 is not None and not isinstance(temp3, Extent): temp3 = Extent(temp3)
      temp3 = ffi.NULL if temp3 is None else temp3.impl
      lib.Extent_intersection(ffi.cast("Extent *", self.impl), ffi.cast("Extent *", b), ffi.cast("Extent *", temp), ffi.cast("Extent *", temp2), ffi.cast("Extent *", temp3))

   def offset(self, x, y):
      lib.Extent_offset(ffi.cast("Extent *", self.impl), x, y)

   def union(self, b, temp):
      if b is not None and not isinstance(b, Extent): b = Extent(b)
      b = ffi.NULL if b is None else b.impl
      if temp is not None and not isinstance(temp, Extent): temp = Extent(temp)
      temp = ffi.NULL if temp is None else temp.impl
      lib.Extent_union(ffi.cast("Extent *", self.impl), ffi.cast("Extent *", b), ffi.cast("Extent *", temp))

   def unionBox(self, box, temp):
      if box is not None and not isinstance(box, Box): box = Box(box)
      box = ffi.NULL if box is None else box.impl
      if temp is not None and not isinstance(temp, Extent): temp = Extent(temp)
      temp = ffi.NULL if temp is None else temp.impl
      lib.Extent_unionBox(ffi.cast("Extent *", self.impl), ffi.cast("Box *", box), ffi.cast("Extent *", temp))

@ffi.callback("void(GuiApplication, bool)")
def cb_GuiApplication_cycle(__g, idle):
   guiapplication = pyOrNewObject(GuiApplication, __g)
   guiapplication.fn_GuiApplication_cycle(guiapplication, idle)

@ffi.callback("void(GuiApplication)")
def cb_GuiApplication_init(__g):
   guiapplication = pyOrNewObject(GuiApplication, __g)
   guiapplication.fn_GuiApplication_init(guiapplication)

@ffi.callback("void(GuiApplication)")
def cb_GuiApplication_terminate(__g):
   guiapplication = pyOrNewObject(GuiApplication, __g)
   guiapplication.fn_GuiApplication_terminate(guiapplication)

class GuiApplication(Application):
   # hack: hardcoded content
   def __init__(self, appGlobals = None):
      Application.__init__(self)
      lib.ecere_init(self.impl)
      rApp = ffi.new("Instance *", self.impl); lib.Instance_evolve(rApp, lib.class_GuiApplication); self.impl = rApp[0]
      if appGlobals is not None:
         self.appGlobals.append(appGlobals)
      else:
         self.appGlobals.append(globals())
   # hack: end of hardcoded content
      self.registerClass(String, True)
      self.registerClass(AVLTree, True)
      self.registerClass(Array, True)
      self.registerClass(CIString, True)
      self.registerClass(ClassDesignerBase, True)
      self.registerClass(Container, True)
      self.registerClass(CustomAVLTree, True)
      self.registerClass(DesignerBase, True)
      self.registerClass(IOChannel, True)
      self.registerClass(LinkList, True)
      self.registerClass(List, True)
      self.registerClass(Map, True)
      self.registerClass(SerialBuffer, True)
      self.registerClass(ZString, True)
      self.registerClass(Bitmap, True)
      self.registerClass(BitmapFormat, True)
      self.registerClass(BitmapResource, True)
      self.registerClass(CubeMap, True)
      self.registerClass(Display, True)
      self.registerClass(DisplayDriver, True)
      self.registerClass(DisplaySystem, True)
      self.registerClass(DrawManager, True)
      self.registerClass(FontManager, True)
      self.registerClass(FontManagerRenderer, True)
      self.registerClass(FontRenderer, True)
      self.registerClass(FontResource, True)
      self.registerClass(Resource, True)
      self.registerClass(Surface, True)
      self.registerClass(DefaultShader, True)
      self.registerClass(LFBDisplayDriver, True)
      self.registerClass(Shader, True)
      self.registerClass(Camera, True)
      self.registerClass(ObjectFormat, True)
      self.registerClass(CommonControl, True)
      self.registerClass(ControllableWindow, True)
      self.registerClass(Cursor, True)
      self.registerClass(GuiApplication, True)
      self.registerClass(Interface, True)
      self.registerClass(MultiLineString, True)
      self.registerClass(Skin, True)
      self.registerClass(Timer, True)
      self.registerClass(Window, True)
      self.registerClass(WindowController, True)
      self.registerClass(Button, True)
      self.registerClass(CalendarControl, True)
      self.registerClass(DataBox, True)
      self.registerClass(DataField, True)
      self.registerClass(DataRow, True)
      self.registerClass(DirPath, True)
      self.registerClass(DirectoriesBox, True)
      self.registerClass(DropBox, True)
      self.registerClass(EditBox, True)
      self.registerClass(EditBoxStream, True)
      self.registerClass(EditableSelectorButton, True)
      self.registerClass(FilePath, True)
      self.registerClass(Label, True)
      self.registerClass(ListBox, True)
      self.registerClass(Menu, True)
      self.registerClass(MenuDivider, True)
      self.registerClass(MenuItem, True)
      self.registerClass(MenuPlacement, True)
      self.registerClass(OldArray, True)
      self.registerClass(PaneSplitter, True)
      self.registerClass(PathBox, True)
      self.registerClass(Picture, True)
      self.registerClass(PopupMenu, True)
      self.registerClass(ProgressBar, True)
      self.registerClass(SavingDataBox, True)
      self.registerClass(ScrollBar, True)
      self.registerClass(SelectorBar, True)
      self.registerClass(SelectorButton, True)
      self.registerClass(Stacker, True)
      self.registerClass(StatusBar, True)
      self.registerClass(StatusField, True)
      self.registerClass(SyntaxColorScheme, True)
      self.registerClass(Tab, True)
      self.registerClass(TabControl, True)
      self.registerClass(ToolBar, True)
      self.registerClass(ToolButton, True)
      self.registerClass(ToolSeparator, True)
      self.registerClass(ToolTip, True)
      self.registerClass(UndoBuffer, True)
      self.registerClass(ColorPicker, True)
      self.registerClass(CreateDirectoryDialog, True)
      self.registerClass(FileDialog, True)
      self.registerClass(FindDialog, True)
      self.registerClass(GoToDialog, True)
      self.registerClass(MessageBox, True)
      self.registerClass(ReplaceDialog, True)
      self.registerClass(WindowList, True)
      self.registerClass(TVisionSkin_Window, True)
      self.registerClass(WindowsSkin_Button, True)
      self.registerClass(WindowsSkin_Window, True)
      self.registerClass(DCOMClientObject, True)
      self.registerClass(DCOMSendControl, True)
      self.registerClass(DCOMServerObject, True)
      self.registerClass(DCOMServerSocket, True)
      self.registerClass(DCOMService, True)
      self.registerClass(FileServerConnection, True)
      self.registerClass(HTTPFile, True)
      self.registerClass(NetworkClientFile, True)
      self.registerClass(SSLSocket, True)
      self.registerClass(Service, True)
      self.registerClass(Socket, True)
      self.registerClass(Archive, True)
      self.registerClass(ArchiveDir, True)
      self.registerClass(BufferedFile, True)
      self.registerClass(ConsoleFile, True)
      self.registerClass(DualPipe, True)
      self.registerClass(ECONGlobalSettings, True)
      self.registerClass(ECONParser, True)
      self.registerClass(File, True)
      self.registerClass(FileMonitor, True)
      self.registerClass(GlobalAppSettings, True)
      self.registerClass(GlobalSettings, True)
      self.registerClass(GlobalSettingsData, True)
      self.registerClass(GlobalSettingsDriver, True)
      self.registerClass(JSONGlobalSettings, True)
      self.registerClass(JSONParser, True)
      self.registerClass(RepButton, True)
      self.registerClass(TempFile, True)
      self.registerClass(Thread, True)


   @property
   def application(self): return Application(impl = IPTR(lib, ffi, self, GuiApplication).application)
   @application.setter
   def application(self, value):
      if not isinstance(value, Application): value = Application(value)
      IPTR(lib, ffi, self, GuiApplication).application = value.impl

   @property
   def classes(self): return OldList(impl = IPTR(lib, ffi, self, GuiApplication).classes)
   @classes.setter
   def classes(self, value):
      if not isinstance(value, OldList): value = OldList(value)
      IPTR(lib, ffi, self, GuiApplication).classes = value.impl

   @property
   def defines(self): return OldList(impl = IPTR(lib, ffi, self, GuiApplication).defines)
   @defines.setter
   def defines(self, value):
      if not isinstance(value, OldList): value = OldList(value)
      IPTR(lib, ffi, self, GuiApplication).defines = value.impl

   @property
   def functions(self): return OldList(impl = IPTR(lib, ffi, self, GuiApplication).functions)
   @functions.setter
   def functions(self, value):
      if not isinstance(value, OldList): value = OldList(value)
      IPTR(lib, ffi, self, GuiApplication).functions = value.impl

   @property
   def modules(self): return OldList(impl = IPTR(lib, ffi, self, GuiApplication).modules)
   @modules.setter
   def modules(self, value):
      if not isinstance(value, OldList): value = OldList(value)
      IPTR(lib, ffi, self, GuiApplication).modules = value.impl

   @property
   def prev(self): return Module(impl = IPTR(lib, ffi, self, GuiApplication).prev)
   @prev.setter
   def prev(self, value):
      if not isinstance(value, Module): value = Module(value)
      IPTR(lib, ffi, self, GuiApplication).prev = value.impl

   @property
   def next(self): return Module(impl = IPTR(lib, ffi, self, GuiApplication).next)
   @next.setter
   def next(self, value):
      if not isinstance(value, Module): value = Module(value)
      IPTR(lib, ffi, self, GuiApplication).next = value.impl

   @property
   def name(self): return IPTR(lib, ffi, self, GuiApplication).name
   @name.setter
   def name(self, value): IPTR(lib, ffi, self, GuiApplication).name = value

   @property
   def library(self): return IPTR(lib, ffi, self, GuiApplication).library
   @library.setter
   def library(self, value): IPTR(lib, ffi, self, GuiApplication).library = value

   @property
   def Unload(self): return IPTR(lib, ffi, self, GuiApplication).Unload
   @Unload.setter
   def Unload(self, value): IPTR(lib, ffi, self, GuiApplication).Unload = value

   @property
   def importType(self): return ImportType(impl = IPTR(lib, ffi, self, GuiApplication).importType)
   @importType.setter
   def importType(self, value): IPTR(lib, ffi, self, GuiApplication).importType = value.impl

   @property
   def origImportType(self): return ImportType(impl = IPTR(lib, ffi, self, GuiApplication).origImportType)
   @origImportType.setter
   def origImportType(self, value): IPTR(lib, ffi, self, GuiApplication).origImportType = value.impl

   @property
   def privateNameSpace(self): return NameSpace(impl = IPTR(lib, ffi, self, GuiApplication).privateNameSpace)
   @privateNameSpace.setter
   def privateNameSpace(self, value):
      if not isinstance(value, NameSpace): value = NameSpace(value)
      IPTR(lib, ffi, self, GuiApplication).privateNameSpace = value.impl

   @property
   def publicNameSpace(self): return NameSpace(impl = IPTR(lib, ffi, self, GuiApplication).publicNameSpace)
   @publicNameSpace.setter
   def publicNameSpace(self, value):
      if not isinstance(value, NameSpace): value = NameSpace(value)
      IPTR(lib, ffi, self, GuiApplication).publicNameSpace = value.impl

   @property
   def argc(self): return IPTR(lib, ffi, self, GuiApplication).argc
   @argc.setter
   def argc(self, value): IPTR(lib, ffi, self, GuiApplication).argc = value

   @property
   def argv(self): return IPTR(lib, ffi, self, GuiApplication).argv
   @argv.setter
   def argv(self, value): IPTR(lib, ffi, self, GuiApplication).argv = value

   @property
   def exitCode(self): return IPTR(lib, ffi, self, GuiApplication).exitCode
   @exitCode.setter
   def exitCode(self, value): IPTR(lib, ffi, self, GuiApplication).exitCode = value

   @property
   def isGUIApp(self): return IPTR(lib, ffi, self, GuiApplication).isGUIApp
   @isGUIApp.setter
   def isGUIApp(self, value): IPTR(lib, ffi, self, GuiApplication).isGUIApp = value

   @property
   def allModules(self): return OldList(impl = IPTR(lib, ffi, self, GuiApplication).allModules)
   @allModules.setter
   def allModules(self, value):
      if not isinstance(value, OldList): value = OldList(value)
      IPTR(lib, ffi, self, GuiApplication).allModules = value.impl

   @property
   def parsedCommand(self): return IPTR(lib, ffi, self, GuiApplication).parsedCommand
   @parsedCommand.setter
   def parsedCommand(self, value): IPTR(lib, ffi, self, GuiApplication).parsedCommand = value

   @property
   def systemNameSpace(self): return NameSpace(impl = IPTR(lib, ffi, self, GuiApplication).systemNameSpace)
   @systemNameSpace.setter
   def systemNameSpace(self, value):
      if not isinstance(value, NameSpace): value = NameSpace(value)
      IPTR(lib, ffi, self, GuiApplication).systemNameSpace = value.impl

   @property
   def appName(self): value = lib.GuiApplication_get_appName(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @appName.setter
   def appName(self, value):
      lib.GuiApplication_set_appName(self.impl, value.encode('utf8'))

   @property
   def semaphore(self): return lib.GuiApplication_get_semaphore(self.impl, value.impl)

   @property
   def alwaysEmptyInput(self): return lib.GuiApplication_get_alwaysEmptyInput(self.impl)
   @alwaysEmptyInput.setter
   def alwaysEmptyInput(self, value):
      lib.GuiApplication_set_alwaysEmptyInput(self.impl, value)

   @property
   def fullScreen(self): return lib.GuiApplication_get_fullScreen(self.impl)
   @fullScreen.setter
   def fullScreen(self, value):
      lib.GuiApplication_set_fullScreen(self.impl, value)

   @property
   def driver(self): value = lib.GuiApplication_get_driver(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @driver.setter
   def driver(self, value):
      lib.GuiApplication_set_driver(self.impl, value.encode('utf8'))

   @property
   def resolution(self): return lib.GuiApplication_get_resolution(self.impl, value)
   @resolution.setter
   def resolution(self, value):
      lib.GuiApplication_set_resolution(self.impl, value)

   @property
   def pixelFormat(self): return lib.GuiApplication_get_pixelFormat(self.impl, value)
   @pixelFormat.setter
   def pixelFormat(self, value):
      lib.GuiApplication_set_pixelFormat(self.impl, value)

   @property
   def refreshRate(self): return lib.GuiApplication_get_refreshRate(self.impl)
   @refreshRate.setter
   def refreshRate(self, value):
      lib.GuiApplication_set_refreshRate(self.impl, value)

   @property
   def skin(self): value = lib.GuiApplication_get_skin(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @skin.setter
   def skin(self, value):
      lib.GuiApplication_set_skin(self.impl, value.encode('utf8'))

   @property
   def textMode(self): return lib.GuiApplication_get_textMode(self.impl)
   @textMode.setter
   def textMode(self, value):
      lib.GuiApplication_set_textMode(self.impl, value)

   @property
   def desktop(self): return pyOrNewObject(Window, lib.GuiApplication_get_desktop(self.impl))

   @property
   def drivers(self): return lib.GuiApplication_get_drivers(self.impl)

   @property
   def skins(self): return lib.GuiApplication_get_skins(self.impl)

   @property
   def currentSkin(self): value = Class(); return lib.GuiApplication_get_currentSkin(self.impl, value.impl)

   @property
   def numDrivers(self): return lib.GuiApplication_get_numDrivers(self.impl)

   @property
   def numSkins(self): return lib.GuiApplication_get_numSkins(self.impl)

   @property
   def timerResolution(self): return None
   @timerResolution.setter
   def timerResolution(self, value):
      lib.GuiApplication_set_timerResolution(self.impl, value)

   @property
   def acquiredWindow(self): return pyOrNewObject(Window, lib.GuiApplication_get_acquiredWindow(self.impl))

   def fn_unset_GuiApplication_cycle(self, idle):
      return lib.GuiApplication_cycle(self.impl, idle)

   @property
   def cycle(self):
      if hasattr(self, 'fn_GuiApplication_cycle'): return self.fn_GuiApplication_cycle
      else: return self.fn_unset_GuiApplication_cycle
   @cycle.setter
   def cycle(self, value):
      self.fn_GuiApplication_cycle = value
      lib.Instance_setMethod(self.impl, "Cycle".encode('utf8'), cb_GuiApplication_cycle)

   def getCursor(self, cursor):
      return pyOrNewObject(Cursor, lib.GuiApplication_getCursor(self.impl, cursor))

   def getKeyState(self, key):
      if key is not None and not isinstance(key, Key): key = Key(key)
      if key is None: key = ffi.NULL
      return lib.GuiApplication_getKeyState(self.impl, key)

   def getMouseState(self, buttons):
      x = ffi.new("int *")
      y = ffi.new("int *")
      lib.GuiApplication_getMouseState(self.impl, buttons, x, y)
      return x[0], y[0]

   def fn_unset_GuiApplication_init(self):
      return lib.GuiApplication_init(self.impl)

   @property
   def init(self):
      if hasattr(self, 'fn_GuiApplication_init'): return self.fn_GuiApplication_init
      else: return self.fn_unset_GuiApplication_init
   @init.setter
   def init(self, value):
      self.fn_GuiApplication_init = value
      lib.Instance_setMethod(self.impl, "Init".encode('utf8'), cb_GuiApplication_init)

   def lock(self):
      lib.GuiApplication_lock(self.impl)

   def lockEx(self, count):
      lib.GuiApplication_lockEx(self.impl, count)

   def pauseNetworkEvents(self):
      lib.GuiApplication_pauseNetworkEvents(self.impl)

   def processFileNotifications(self):
      return lib.GuiApplication_processFileNotifications(self.impl)

   def processInput(self, useProcessAll):
      return lib.GuiApplication_processInput(self.impl, useProcessAll)

   def processNetworkEvents(self):
      return lib.GuiApplication_processNetworkEvents(self.impl)

   def resumeNetworkEvents(self):
      lib.GuiApplication_resumeNetworkEvents(self.impl)

   def setDesktopPosition(self, x, y, w, h, moveChildren):
      return lib.GuiApplication_setDesktopPosition(self.impl, x, y, w, h, moveChildren)

   def signalEvent(self):
      lib.GuiApplication_signalEvent(self.impl)

   def switchMode(self, fullScreen, driverName, resolution, colorDepth, refreshRate, skinName, fallBack):
      return lib.GuiApplication_switchMode(self.impl, fullScreen, driverName.encode('utf8'), resolution, colorDepth, refreshRate, skinName.encode('utf8'), fallBack)

   def fn_unset_GuiApplication_terminate(self):
      return lib.GuiApplication_terminate(self.impl)

   @property
   def terminate(self):
      if hasattr(self, 'fn_GuiApplication_terminate'): return self.fn_GuiApplication_terminate
      else: return self.fn_unset_GuiApplication_terminate
   @terminate.setter
   def terminate(self, value):
      self.fn_GuiApplication_terminate = value
      lib.Instance_setMethod(self.impl, "Terminate".encode('utf8'), cb_GuiApplication_terminate)

   def unlock(self):
      lib.GuiApplication_unlock(self.impl)

   def unlockEx(self):
      return lib.GuiApplication_unlockEx(self.impl)

   def updateDisplay(self):
      lib.GuiApplication_updateDisplay(self.impl)

   def wait(self):
      lib.GuiApplication_wait(self.impl)

   def waitEvent(self):
      lib.GuiApplication_waitEvent(self.impl)

   def waitNetworkEvent(self):
      lib.GuiApplication_waitNetworkEvent(self.impl)

@ffi.callback("void(Interface, Window, bool)")
def cb_Interface_acquireInput(__i, window, state):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_acquireInput(interface, pyOrNewObject(Window, window), state)

@ffi.callback("void(Interface, Window)")
def cb_Interface_activateRootWindow(__i, window):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_activateRootWindow(interface, pyOrNewObject(Window, window))

@ffi.callback("void(Interface, ClipBoard *, uint)")
def cb_Interface_allocateClipboard(__i, clipBoard, size):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_allocateClipboard(interface, ClipBoard(impl = clipBoard), size)

@ffi.callback("void(Interface)")
def cb_Interface_clearClipboard(__i):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_clearClipboard(interface)

@ffi.callback("void(Interface, Window)")
def cb_Interface_createRootWindow(__i, window):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_createRootWindow(interface, pyOrNewObject(Window, window))

@ffi.callback("void(Interface, Window)")
def cb_Interface_destroyRootWindow(__i, window):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_destroyRootWindow(interface, pyOrNewObject(Window, window))

@ffi.callback("void(Interface, bool *)")
def cb_Interface_ensureFullScreen(__i, fullScreen):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_ensureFullScreen(interface, fullScreen)

@ffi.callback("void(Interface, Window)")
def cb_Interface_flashRootWindow(__i, window):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_flashRootWindow(interface, pyOrNewObject(Window, window))

@ffi.callback("void(Interface, bool *, Resolution *, PixelFormat *, int *)")
def cb_Interface_getCurrentMode(__i, fullScreen, resolution, colorDepth, refreshRate):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_getCurrentMode(interface, fullScreen, resolution, colorDepth, refreshRate)

@ffi.callback("void(Interface, int, Joystick *)")
def cb_Interface_getJoystickState(__i, device, joystick):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_getJoystickState(interface, device, Joystick(impl = joystick))

@ffi.callback("void(Interface, Key)")
def cb_Interface_getKeyState(__i, key):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_getKeyState(interface, Key(impl = key))

@ffi.callback("void(Interface, int *, int *)")
def cb_Interface_getMousePosition(__i, x, y):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_getMousePosition(interface, x, y)

@ffi.callback("void(Interface, MouseButtons *, int *, int *)")
def cb_Interface_getMouseState(__i, buttons, x, y):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_getMouseState(interface, buttons, x, y)

@ffi.callback("void(Interface, Window, Box *)")
def cb_Interface_getScreenArea(__i, window, box):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_getScreenArea(interface, pyOrNewObject(Window, window), Box(impl = box))

@ffi.callback("void(Interface, int *)")
def cb_Interface_graphicsDrivers(__i, numDrivers):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_graphicsDrivers(interface, numDrivers)

@ffi.callback("void(Interface)")
def cb_Interface_initialize(__i):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_initialize(interface)

@ffi.callback("void(Interface, ClipBoard *)")
def cb_Interface_loadClipboard(__i, clipBoard):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_loadClipboard(interface, ClipBoard(impl = clipBoard))

@ffi.callback("void(Interface, Window)")
def cb_Interface_lock(__i, window):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_lock(interface, pyOrNewObject(Window, window))

@ffi.callback("void(Interface, Window, int *, int *)")
def cb_Interface_offsetWindow(__i, window, x, y):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_offsetWindow(interface, pyOrNewObject(Window, window), x, y)

@ffi.callback("void(Interface, Window, bool)")
def cb_Interface_orderRootWindow(__i, window, topMost):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_orderRootWindow(interface, pyOrNewObject(Window, window), topMost)

@ffi.callback("void(Interface, Window, int, int, int, int, bool, bool)")
def cb_Interface_positionRootWindow(__i, window, x, y, w, h, move, resize):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_positionRootWindow(interface, pyOrNewObject(Window, window), x, y, w, h, move, resize)

@ffi.callback("void(Interface, bool)")
def cb_Interface_processInput(__i, processAll):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_processInput(interface, processAll)

@ffi.callback("void(Interface, ClipBoard *)")
def cb_Interface_saveClipboard(__i, clipBoard):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_saveClipboard(interface, ClipBoard(impl = clipBoard))

@ffi.callback("void(Interface, bool, Resolution, PixelFormat, int, bool *)")
def cb_Interface_screenMode(__i, fullScreen, resolution, colorDepth, refreshRate, textMode):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_screenMode(interface, fullScreen, Resolution(impl = resolution), PixelFormat(impl = colorDepth), refreshRate, textMode)

@ffi.callback("void(Interface, int, int, int)")
def cb_Interface_setCaret(__i, caretX, caretY, size):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_setCaret(interface, caretX, caretY, size)

@ffi.callback("void(Interface, Window, BitmapResource)")
def cb_Interface_setIcon(__i, window, icon):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_setIcon(interface, pyOrNewObject(Window, window), pyOrNewObject(BitmapResource, icon))

@ffi.callback("void(Interface, Window)")
def cb_Interface_setMouseCapture(__i, window):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_setMouseCapture(interface, pyOrNewObject(Window, window))

@ffi.callback("void(Interface, Window, SystemCursor)")
def cb_Interface_setMouseCursor(__i, window, cursor):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_setMouseCursor(interface, pyOrNewObject(Window, window), SystemCursor(impl = cursor))

@ffi.callback("void(Interface, int, int)")
def cb_Interface_setMousePosition(__i, x, y):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_setMousePosition(interface, x, y)

@ffi.callback("void(Interface, Window, Box *)")
def cb_Interface_setMouseRange(__i, window, box):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_setMouseRange(interface, pyOrNewObject(Window, window), Box(impl = box))

@ffi.callback("void(Interface, Window, const char *)")
def cb_Interface_setRootWindowCaption(__i, window, name):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_setRootWindowCaption(interface, pyOrNewObject(Window, window), name.encode('utf8'))

@ffi.callback("void(Interface, Window)")
def cb_Interface_setRootWindowColor(__i, window):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_setRootWindowColor(interface, pyOrNewObject(Window, window))

@ffi.callback("void(Interface, Window, WindowState, bool)")
def cb_Interface_setRootWindowState(__i, window, state, visible):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_setRootWindowState(interface, pyOrNewObject(Window, window), WindowState(impl = state), visible)

@ffi.callback("void(Interface, uint)")
def cb_Interface_setTimerResolution(__i, hertz):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_setTimerResolution(interface, hertz)

@ffi.callback("void(Interface, Window, int, int, bool)")
def cb_Interface_startMoving(__i, window, x, y, fromKeyBoard):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_startMoving(interface, pyOrNewObject(Window, window), x, y, fromKeyBoard)

@ffi.callback("void(Interface, Window)")
def cb_Interface_stopMoving(__i, window):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_stopMoving(interface, pyOrNewObject(Window, window))

@ffi.callback("void(Interface)")
def cb_Interface_terminate(__i):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_terminate(interface)

@ffi.callback("void(Interface, ClipBoard *)")
def cb_Interface_unloadClipboard(__i, clipBoard):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_unloadClipboard(interface, ClipBoard(impl = clipBoard))

@ffi.callback("void(Interface, Window)")
def cb_Interface_unlock(__i, window):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_unlock(interface, pyOrNewObject(Window, window))

@ffi.callback("void(Interface, Window)")
def cb_Interface_updateRootWindow(__i, window):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_updateRootWindow(interface, pyOrNewObject(Window, window))

@ffi.callback("void(Interface)")
def cb_Interface_wait(__i):
   interface = pyOrNewObject(Interface, __i)
   interface.fn_Interface_wait(interface)

class Interface(Instance):
   def __init__(self,
                acquireInput = None,
                activateRootWindow = None,
                allocateClipboard = None,
                clearClipboard = None,
                createRootWindow = None,
                destroyRootWindow = None,
                ensureFullScreen = None,
                flashRootWindow = None,
                getCurrentMode = None,
                getJoystickState = None,
                getKeyState = None,
                getMousePosition = None,
                getMouseState = None,
                getScreenArea = None,
                graphicsDrivers = None,
                initialize = None,
                loadClipboard = None,
                lock = None,
                offsetWindow = None,
                orderRootWindow = None,
                positionRootWindow = None,
                processInput = None,
                saveClipboard = None,
                screenMode = None,
                setCaret = None,
                setIcon = None,
                setMouseCapture = None,
                setMouseCursor = None,
                setMousePosition = None,
                setMouseRange = None,
                setRootWindowCaption = None,
                setRootWindowColor = None,
                setRootWindowState = None,
                setTimerResolution = None,
                startMoving = None,
                stopMoving = None,
                terminate = None,
                unloadClipboard = None,
                unlock = None,
                updateRootWindow = None,
                wait = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if acquireInput is not None:         self.acquireInput = acquireInput
      if activateRootWindow is not None:   self.activateRootWindow = activateRootWindow
      if allocateClipboard is not None:    self.allocateClipboard = allocateClipboard
      if clearClipboard is not None:       self.clearClipboard = clearClipboard
      if createRootWindow is not None:     self.createRootWindow = createRootWindow
      if destroyRootWindow is not None:    self.destroyRootWindow = destroyRootWindow
      if ensureFullScreen is not None:     self.ensureFullScreen = ensureFullScreen
      if flashRootWindow is not None:      self.flashRootWindow = flashRootWindow
      if getCurrentMode is not None:       self.getCurrentMode = getCurrentMode
      if getJoystickState is not None:     self.getJoystickState = getJoystickState
      if getKeyState is not None:          self.getKeyState = getKeyState
      if getMousePosition is not None:     self.getMousePosition = getMousePosition
      if getMouseState is not None:        self.getMouseState = getMouseState
      if getScreenArea is not None:        self.getScreenArea = getScreenArea
      if graphicsDrivers is not None:      self.graphicsDrivers = graphicsDrivers
      if initialize is not None:           self.initialize = initialize
      if loadClipboard is not None:        self.loadClipboard = loadClipboard
      if lock is not None:                 self.lock = lock
      if offsetWindow is not None:         self.offsetWindow = offsetWindow
      if orderRootWindow is not None:      self.orderRootWindow = orderRootWindow
      if positionRootWindow is not None:   self.positionRootWindow = positionRootWindow
      if processInput is not None:         self.processInput = processInput
      if saveClipboard is not None:        self.saveClipboard = saveClipboard
      if screenMode is not None:           self.screenMode = screenMode
      if setCaret is not None:             self.setCaret = setCaret
      if setIcon is not None:              self.setIcon = setIcon
      if setMouseCapture is not None:      self.setMouseCapture = setMouseCapture
      if setMouseCursor is not None:       self.setMouseCursor = setMouseCursor
      if setMousePosition is not None:     self.setMousePosition = setMousePosition
      if setMouseRange is not None:        self.setMouseRange = setMouseRange
      if setRootWindowCaption is not None: self.setRootWindowCaption = setRootWindowCaption
      if setRootWindowColor is not None:   self.setRootWindowColor = setRootWindowColor
      if setRootWindowState is not None:   self.setRootWindowState = setRootWindowState
      if setTimerResolution is not None:   self.setTimerResolution = setTimerResolution
      if startMoving is not None:          self.startMoving = startMoving
      if stopMoving is not None:           self.stopMoving = stopMoving
      if terminate is not None:            self.terminate = terminate
      if unloadClipboard is not None:      self.unloadClipboard = unloadClipboard
      if unlock is not None:               self.unlock = unlock
      if updateRootWindow is not None:     self.updateRootWindow = updateRootWindow
      if wait is not None:                 self.wait = wait

   def fn_unset_Interface_acquireInput(self, window, state):
      return lib.Interface_acquireInput(self.impl, ffi.NULL if window is None else window.impl, state)

   @property
   def acquireInput(self):
      if hasattr(self, 'fn_Interface_acquireInput'): return self.fn_Interface_acquireInput
      else: return self.fn_unset_Interface_acquireInput
   @acquireInput.setter
   def acquireInput(self, value):
      self.fn_Interface_acquireInput = value
      lib.Instance_setMethod(self.impl, "AcquireInput".encode('utf8'), cb_Interface_acquireInput)

   def fn_unset_Interface_activateRootWindow(self, window):
      return lib.Interface_activateRootWindow(self.impl, ffi.NULL if window is None else window.impl)

   @property
   def activateRootWindow(self):
      if hasattr(self, 'fn_Interface_activateRootWindow'): return self.fn_Interface_activateRootWindow
      else: return self.fn_unset_Interface_activateRootWindow
   @activateRootWindow.setter
   def activateRootWindow(self, value):
      self.fn_Interface_activateRootWindow = value
      lib.Instance_setMethod(self.impl, "ActivateRootWindow".encode('utf8'), cb_Interface_activateRootWindow)

   def fn_unset_Interface_allocateClipboard(self, clipBoard, size):
      return lib.Interface_allocateClipboard(self.impl, ffi.NULL if clipBoard is None else clipBoard.impl, size)

   @property
   def allocateClipboard(self):
      if hasattr(self, 'fn_Interface_allocateClipboard'): return self.fn_Interface_allocateClipboard
      else: return self.fn_unset_Interface_allocateClipboard
   @allocateClipboard.setter
   def allocateClipboard(self, value):
      self.fn_Interface_allocateClipboard = value
      lib.Instance_setMethod(self.impl, "AllocateClipboard".encode('utf8'), cb_Interface_allocateClipboard)

   def fn_unset_Interface_clearClipboard(self):
      return lib.Interface_clearClipboard(self.impl)

   @property
   def clearClipboard(self):
      if hasattr(self, 'fn_Interface_clearClipboard'): return self.fn_Interface_clearClipboard
      else: return self.fn_unset_Interface_clearClipboard
   @clearClipboard.setter
   def clearClipboard(self, value):
      self.fn_Interface_clearClipboard = value
      lib.Instance_setMethod(self.impl, "ClearClipboard".encode('utf8'), cb_Interface_clearClipboard)

   def fn_unset_Interface_createRootWindow(self, window):
      return lib.Interface_createRootWindow(self.impl, ffi.NULL if window is None else window.impl)

   @property
   def createRootWindow(self):
      if hasattr(self, 'fn_Interface_createRootWindow'): return self.fn_Interface_createRootWindow
      else: return self.fn_unset_Interface_createRootWindow
   @createRootWindow.setter
   def createRootWindow(self, value):
      self.fn_Interface_createRootWindow = value
      lib.Instance_setMethod(self.impl, "CreateRootWindow".encode('utf8'), cb_Interface_createRootWindow)

   def fn_unset_Interface_destroyRootWindow(self, window):
      return lib.Interface_destroyRootWindow(self.impl, ffi.NULL if window is None else window.impl)

   @property
   def destroyRootWindow(self):
      if hasattr(self, 'fn_Interface_destroyRootWindow'): return self.fn_Interface_destroyRootWindow
      else: return self.fn_unset_Interface_destroyRootWindow
   @destroyRootWindow.setter
   def destroyRootWindow(self, value):
      self.fn_Interface_destroyRootWindow = value
      lib.Instance_setMethod(self.impl, "DestroyRootWindow".encode('utf8'), cb_Interface_destroyRootWindow)

   def fn_unset_Interface_ensureFullScreen(self, fullScreen):
      if fullScreen is None: fullScreen = ffi.NULL
      return lib.Interface_ensureFullScreen(self.impl, fullScreen)

   @property
   def ensureFullScreen(self):
      if hasattr(self, 'fn_Interface_ensureFullScreen'): return self.fn_Interface_ensureFullScreen
      else: return self.fn_unset_Interface_ensureFullScreen
   @ensureFullScreen.setter
   def ensureFullScreen(self, value):
      self.fn_Interface_ensureFullScreen = value
      lib.Instance_setMethod(self.impl, "EnsureFullScreen".encode('utf8'), cb_Interface_ensureFullScreen)

   def fn_unset_Interface_flashRootWindow(self, window):
      return lib.Interface_flashRootWindow(self.impl, ffi.NULL if window is None else window.impl)

   @property
   def flashRootWindow(self):
      if hasattr(self, 'fn_Interface_flashRootWindow'): return self.fn_Interface_flashRootWindow
      else: return self.fn_unset_Interface_flashRootWindow
   @flashRootWindow.setter
   def flashRootWindow(self, value):
      self.fn_Interface_flashRootWindow = value
      lib.Instance_setMethod(self.impl, "FlashRootWindow".encode('utf8'), cb_Interface_flashRootWindow)

   def fn_unset_Interface_getCurrentMode(self, fullScreen, resolution, colorDepth, refreshRate):
      if fullScreen is None: fullScreen = ffi.NULL
      if refreshRate is None: refreshRate = ffi.NULL
      return lib.Interface_getCurrentMode(self.impl, fullScreen, resolution, colorDepth, refreshRate)

   @property
   def getCurrentMode(self):
      if hasattr(self, 'fn_Interface_getCurrentMode'): return self.fn_Interface_getCurrentMode
      else: return self.fn_unset_Interface_getCurrentMode
   @getCurrentMode.setter
   def getCurrentMode(self, value):
      self.fn_Interface_getCurrentMode = value
      lib.Instance_setMethod(self.impl, "GetCurrentMode".encode('utf8'), cb_Interface_getCurrentMode)

   def getExtendedKey(self, key):
      if key is not None and not isinstance(key, Key): key = Key(key)
      if key is None: key = ffi.NULL
      return lib.Interface_getExtendedKey(self.impl, key)

   def fn_unset_Interface_getJoystickState(self, device, joystick):
      return lib.Interface_getJoystickState(self.impl, device, ffi.NULL if joystick is None else joystick.impl)

   @property
   def getJoystickState(self):
      if hasattr(self, 'fn_Interface_getJoystickState'): return self.fn_Interface_getJoystickState
      else: return self.fn_unset_Interface_getJoystickState
   @getJoystickState.setter
   def getJoystickState(self, value):
      self.fn_Interface_getJoystickState = value
      lib.Instance_setMethod(self.impl, "GetJoystickState".encode('utf8'), cb_Interface_getJoystickState)

   def fn_unset_Interface_getKeyState(self, key):
      return lib.Interface_getKeyState(self.impl, key)

   @property
   def getKeyState(self):
      if hasattr(self, 'fn_Interface_getKeyState'): return self.fn_Interface_getKeyState
      else: return self.fn_unset_Interface_getKeyState
   @getKeyState.setter
   def getKeyState(self, value):
      self.fn_Interface_getKeyState = value
      lib.Instance_setMethod(self.impl, "GetKeyState".encode('utf8'), cb_Interface_getKeyState)

   def fn_unset_Interface_getMousePosition(self, x, y):
      if x is None: x = ffi.NULL
      if y is None: y = ffi.NULL
      return lib.Interface_getMousePosition(self.impl, x, y)

   @property
   def getMousePosition(self):
      if hasattr(self, 'fn_Interface_getMousePosition'): return self.fn_Interface_getMousePosition
      else: return self.fn_unset_Interface_getMousePosition
   @getMousePosition.setter
   def getMousePosition(self, value):
      self.fn_Interface_getMousePosition = value
      lib.Instance_setMethod(self.impl, "GetMousePosition".encode('utf8'), cb_Interface_getMousePosition)

   def fn_unset_Interface_getMouseState(self, buttons, x, y):
      if x is None: x = ffi.NULL
      if y is None: y = ffi.NULL
      return lib.Interface_getMouseState(self.impl, buttons, x, y)

   @property
   def getMouseState(self):
      if hasattr(self, 'fn_Interface_getMouseState'): return self.fn_Interface_getMouseState
      else: return self.fn_unset_Interface_getMouseState
   @getMouseState.setter
   def getMouseState(self, value):
      self.fn_Interface_getMouseState = value
      lib.Instance_setMethod(self.impl, "GetMouseState".encode('utf8'), cb_Interface_getMouseState)

   def fn_unset_Interface_getScreenArea(self, window, box):
      return lib.Interface_getScreenArea(self.impl, ffi.NULL if window is None else window.impl, ffi.NULL if box is None else box.impl)

   @property
   def getScreenArea(self):
      if hasattr(self, 'fn_Interface_getScreenArea'): return self.fn_Interface_getScreenArea
      else: return self.fn_unset_Interface_getScreenArea
   @getScreenArea.setter
   def getScreenArea(self, value):
      self.fn_Interface_getScreenArea = value
      lib.Instance_setMethod(self.impl, "GetScreenArea".encode('utf8'), cb_Interface_getScreenArea)

   def fn_unset_Interface_graphicsDrivers(self, numDrivers):
      if numDrivers is None: numDrivers = ffi.NULL
      return lib.Interface_graphicsDrivers(self.impl, numDrivers)

   @property
   def graphicsDrivers(self):
      if hasattr(self, 'fn_Interface_graphicsDrivers'): return self.fn_Interface_graphicsDrivers
      else: return self.fn_unset_Interface_graphicsDrivers
   @graphicsDrivers.setter
   def graphicsDrivers(self, value):
      self.fn_Interface_graphicsDrivers = value
      lib.Instance_setMethod(self.impl, "GraphicsDrivers".encode('utf8'), cb_Interface_graphicsDrivers)

   def fn_unset_Interface_initialize(self):
      return lib.Interface_initialize(self.impl)

   @property
   def initialize(self):
      if hasattr(self, 'fn_Interface_initialize'): return self.fn_Interface_initialize
      else: return self.fn_unset_Interface_initialize
   @initialize.setter
   def initialize(self, value):
      self.fn_Interface_initialize = value
      lib.Instance_setMethod(self.impl, "Initialize".encode('utf8'), cb_Interface_initialize)

   def fn_unset_Interface_loadClipboard(self, clipBoard):
      return lib.Interface_loadClipboard(self.impl, ffi.NULL if clipBoard is None else clipBoard.impl)

   @property
   def loadClipboard(self):
      if hasattr(self, 'fn_Interface_loadClipboard'): return self.fn_Interface_loadClipboard
      else: return self.fn_unset_Interface_loadClipboard
   @loadClipboard.setter
   def loadClipboard(self, value):
      self.fn_Interface_loadClipboard = value
      lib.Instance_setMethod(self.impl, "LoadClipboard".encode('utf8'), cb_Interface_loadClipboard)

   def fn_unset_Interface_lock(self, window):
      return lib.Interface_lock(self.impl, ffi.NULL if window is None else window.impl)

   @property
   def lock(self):
      if hasattr(self, 'fn_Interface_lock'): return self.fn_Interface_lock
      else: return self.fn_unset_Interface_lock
   @lock.setter
   def lock(self, value):
      self.fn_Interface_lock = value
      lib.Instance_setMethod(self.impl, "Lock".encode('utf8'), cb_Interface_lock)

   def fn_unset_Interface_offsetWindow(self, window, x, y):
      if x is None: x = ffi.NULL
      if y is None: y = ffi.NULL
      return lib.Interface_offsetWindow(self.impl, ffi.NULL if window is None else window.impl, x, y)

   @property
   def offsetWindow(self):
      if hasattr(self, 'fn_Interface_offsetWindow'): return self.fn_Interface_offsetWindow
      else: return self.fn_unset_Interface_offsetWindow
   @offsetWindow.setter
   def offsetWindow(self, value):
      self.fn_Interface_offsetWindow = value
      lib.Instance_setMethod(self.impl, "OffsetWindow".encode('utf8'), cb_Interface_offsetWindow)

   def fn_unset_Interface_orderRootWindow(self, window, topMost):
      return lib.Interface_orderRootWindow(self.impl, ffi.NULL if window is None else window.impl, topMost)

   @property
   def orderRootWindow(self):
      if hasattr(self, 'fn_Interface_orderRootWindow'): return self.fn_Interface_orderRootWindow
      else: return self.fn_unset_Interface_orderRootWindow
   @orderRootWindow.setter
   def orderRootWindow(self, value):
      self.fn_Interface_orderRootWindow = value
      lib.Instance_setMethod(self.impl, "OrderRootWindow".encode('utf8'), cb_Interface_orderRootWindow)

   def fn_unset_Interface_positionRootWindow(self, window, x, y, w, h, move, resize):
      return lib.Interface_positionRootWindow(self.impl, ffi.NULL if window is None else window.impl, x, y, w, h, move, resize)

   @property
   def positionRootWindow(self):
      if hasattr(self, 'fn_Interface_positionRootWindow'): return self.fn_Interface_positionRootWindow
      else: return self.fn_unset_Interface_positionRootWindow
   @positionRootWindow.setter
   def positionRootWindow(self, value):
      self.fn_Interface_positionRootWindow = value
      lib.Instance_setMethod(self.impl, "PositionRootWindow".encode('utf8'), cb_Interface_positionRootWindow)

   def fn_unset_Interface_processInput(self, processAll):
      return lib.Interface_processInput(self.impl, processAll)

   @property
   def processInput(self):
      if hasattr(self, 'fn_Interface_processInput'): return self.fn_Interface_processInput
      else: return self.fn_unset_Interface_processInput
   @processInput.setter
   def processInput(self, value):
      self.fn_Interface_processInput = value
      lib.Instance_setMethod(self.impl, "ProcessInput".encode('utf8'), cb_Interface_processInput)

   def fn_unset_Interface_saveClipboard(self, clipBoard):
      return lib.Interface_saveClipboard(self.impl, ffi.NULL if clipBoard is None else clipBoard.impl)

   @property
   def saveClipboard(self):
      if hasattr(self, 'fn_Interface_saveClipboard'): return self.fn_Interface_saveClipboard
      else: return self.fn_unset_Interface_saveClipboard
   @saveClipboard.setter
   def saveClipboard(self, value):
      self.fn_Interface_saveClipboard = value
      lib.Instance_setMethod(self.impl, "SaveClipboard".encode('utf8'), cb_Interface_saveClipboard)

   def fn_unset_Interface_screenMode(self, fullScreen, resolution, colorDepth, refreshRate, textMode):
      if textMode is None: textMode = ffi.NULL
      return lib.Interface_screenMode(self.impl, fullScreen, resolution, colorDepth, refreshRate, textMode)

   @property
   def screenMode(self):
      if hasattr(self, 'fn_Interface_screenMode'): return self.fn_Interface_screenMode
      else: return self.fn_unset_Interface_screenMode
   @screenMode.setter
   def screenMode(self, value):
      self.fn_Interface_screenMode = value
      lib.Instance_setMethod(self.impl, "ScreenMode".encode('utf8'), cb_Interface_screenMode)

   def fn_unset_Interface_setCaret(self, caretX, caretY, size):
      return lib.Interface_setCaret(self.impl, caretX, caretY, size)

   @property
   def setCaret(self):
      if hasattr(self, 'fn_Interface_setCaret'): return self.fn_Interface_setCaret
      else: return self.fn_unset_Interface_setCaret
   @setCaret.setter
   def setCaret(self, value):
      self.fn_Interface_setCaret = value
      lib.Instance_setMethod(self.impl, "SetCaret".encode('utf8'), cb_Interface_setCaret)

   def fn_unset_Interface_setIcon(self, window, icon):
      return lib.Interface_setIcon(self.impl, ffi.NULL if window is None else window.impl, ffi.NULL if icon is None else icon.impl)

   @property
   def setIcon(self):
      if hasattr(self, 'fn_Interface_setIcon'): return self.fn_Interface_setIcon
      else: return self.fn_unset_Interface_setIcon
   @setIcon.setter
   def setIcon(self, value):
      self.fn_Interface_setIcon = value
      lib.Instance_setMethod(self.impl, "SetIcon".encode('utf8'), cb_Interface_setIcon)

   def fn_unset_Interface_setMouseCapture(self, window):
      return lib.Interface_setMouseCapture(self.impl, ffi.NULL if window is None else window.impl)

   @property
   def setMouseCapture(self):
      if hasattr(self, 'fn_Interface_setMouseCapture'): return self.fn_Interface_setMouseCapture
      else: return self.fn_unset_Interface_setMouseCapture
   @setMouseCapture.setter
   def setMouseCapture(self, value):
      self.fn_Interface_setMouseCapture = value
      lib.Instance_setMethod(self.impl, "SetMouseCapture".encode('utf8'), cb_Interface_setMouseCapture)

   def fn_unset_Interface_setMouseCursor(self, window, cursor):
      return lib.Interface_setMouseCursor(self.impl, ffi.NULL if window is None else window.impl, cursor)

   @property
   def setMouseCursor(self):
      if hasattr(self, 'fn_Interface_setMouseCursor'): return self.fn_Interface_setMouseCursor
      else: return self.fn_unset_Interface_setMouseCursor
   @setMouseCursor.setter
   def setMouseCursor(self, value):
      self.fn_Interface_setMouseCursor = value
      lib.Instance_setMethod(self.impl, "SetMouseCursor".encode('utf8'), cb_Interface_setMouseCursor)

   def fn_unset_Interface_setMousePosition(self, x, y):
      return lib.Interface_setMousePosition(self.impl, x, y)

   @property
   def setMousePosition(self):
      if hasattr(self, 'fn_Interface_setMousePosition'): return self.fn_Interface_setMousePosition
      else: return self.fn_unset_Interface_setMousePosition
   @setMousePosition.setter
   def setMousePosition(self, value):
      self.fn_Interface_setMousePosition = value
      lib.Instance_setMethod(self.impl, "SetMousePosition".encode('utf8'), cb_Interface_setMousePosition)

   def fn_unset_Interface_setMouseRange(self, window, box):
      return lib.Interface_setMouseRange(self.impl, ffi.NULL if window is None else window.impl, ffi.NULL if box is None else box.impl)

   @property
   def setMouseRange(self):
      if hasattr(self, 'fn_Interface_setMouseRange'): return self.fn_Interface_setMouseRange
      else: return self.fn_unset_Interface_setMouseRange
   @setMouseRange.setter
   def setMouseRange(self, value):
      self.fn_Interface_setMouseRange = value
      lib.Instance_setMethod(self.impl, "SetMouseRange".encode('utf8'), cb_Interface_setMouseRange)

   def fn_unset_Interface_setRootWindowCaption(self, window, name):
      return lib.Interface_setRootWindowCaption(self.impl, ffi.NULL if window is None else window.impl, name)

   @property
   def setRootWindowCaption(self):
      if hasattr(self, 'fn_Interface_setRootWindowCaption'): return self.fn_Interface_setRootWindowCaption
      else: return self.fn_unset_Interface_setRootWindowCaption
   @setRootWindowCaption.setter
   def setRootWindowCaption(self, value):
      self.fn_Interface_setRootWindowCaption = value
      lib.Instance_setMethod(self.impl, "SetRootWindowCaption".encode('utf8'), cb_Interface_setRootWindowCaption)

   def fn_unset_Interface_setRootWindowColor(self, window):
      return lib.Interface_setRootWindowColor(self.impl, ffi.NULL if window is None else window.impl)

   @property
   def setRootWindowColor(self):
      if hasattr(self, 'fn_Interface_setRootWindowColor'): return self.fn_Interface_setRootWindowColor
      else: return self.fn_unset_Interface_setRootWindowColor
   @setRootWindowColor.setter
   def setRootWindowColor(self, value):
      self.fn_Interface_setRootWindowColor = value
      lib.Instance_setMethod(self.impl, "SetRootWindowColor".encode('utf8'), cb_Interface_setRootWindowColor)

   def fn_unset_Interface_setRootWindowState(self, window, state, visible):
      return lib.Interface_setRootWindowState(self.impl, ffi.NULL if window is None else window.impl, state, visible)

   @property
   def setRootWindowState(self):
      if hasattr(self, 'fn_Interface_setRootWindowState'): return self.fn_Interface_setRootWindowState
      else: return self.fn_unset_Interface_setRootWindowState
   @setRootWindowState.setter
   def setRootWindowState(self, value):
      self.fn_Interface_setRootWindowState = value
      lib.Instance_setMethod(self.impl, "SetRootWindowState".encode('utf8'), cb_Interface_setRootWindowState)

   def fn_unset_Interface_setTimerResolution(self, hertz):
      return lib.Interface_setTimerResolution(self.impl, hertz)

   @property
   def setTimerResolution(self):
      if hasattr(self, 'fn_Interface_setTimerResolution'): return self.fn_Interface_setTimerResolution
      else: return self.fn_unset_Interface_setTimerResolution
   @setTimerResolution.setter
   def setTimerResolution(self, value):
      self.fn_Interface_setTimerResolution = value
      lib.Instance_setMethod(self.impl, "SetTimerResolution".encode('utf8'), cb_Interface_setTimerResolution)

   def fn_unset_Interface_startMoving(self, window, x, y, fromKeyBoard):
      return lib.Interface_startMoving(self.impl, ffi.NULL if window is None else window.impl, x, y, fromKeyBoard)

   @property
   def startMoving(self):
      if hasattr(self, 'fn_Interface_startMoving'): return self.fn_Interface_startMoving
      else: return self.fn_unset_Interface_startMoving
   @startMoving.setter
   def startMoving(self, value):
      self.fn_Interface_startMoving = value
      lib.Instance_setMethod(self.impl, "StartMoving".encode('utf8'), cb_Interface_startMoving)

   def fn_unset_Interface_stopMoving(self, window):
      return lib.Interface_stopMoving(self.impl, ffi.NULL if window is None else window.impl)

   @property
   def stopMoving(self):
      if hasattr(self, 'fn_Interface_stopMoving'): return self.fn_Interface_stopMoving
      else: return self.fn_unset_Interface_stopMoving
   @stopMoving.setter
   def stopMoving(self, value):
      self.fn_Interface_stopMoving = value
      lib.Instance_setMethod(self.impl, "StopMoving".encode('utf8'), cb_Interface_stopMoving)

   def fn_unset_Interface_terminate(self):
      return lib.Interface_terminate(self.impl)

   @property
   def terminate(self):
      if hasattr(self, 'fn_Interface_terminate'): return self.fn_Interface_terminate
      else: return self.fn_unset_Interface_terminate
   @terminate.setter
   def terminate(self, value):
      self.fn_Interface_terminate = value
      lib.Instance_setMethod(self.impl, "Terminate".encode('utf8'), cb_Interface_terminate)

   def translateKey(self, key, shift):
      if key is not None and not isinstance(key, Key): key = Key(key)
      if key is None: key = ffi.NULL
      return lib.Interface_translateKey(self.impl, key, shift)

   def fn_unset_Interface_unloadClipboard(self, clipBoard):
      return lib.Interface_unloadClipboard(self.impl, ffi.NULL if clipBoard is None else clipBoard.impl)

   @property
   def unloadClipboard(self):
      if hasattr(self, 'fn_Interface_unloadClipboard'): return self.fn_Interface_unloadClipboard
      else: return self.fn_unset_Interface_unloadClipboard
   @unloadClipboard.setter
   def unloadClipboard(self, value):
      self.fn_Interface_unloadClipboard = value
      lib.Instance_setMethod(self.impl, "UnloadClipboard".encode('utf8'), cb_Interface_unloadClipboard)

   def fn_unset_Interface_unlock(self, window):
      return lib.Interface_unlock(self.impl, ffi.NULL if window is None else window.impl)

   @property
   def unlock(self):
      if hasattr(self, 'fn_Interface_unlock'): return self.fn_Interface_unlock
      else: return self.fn_unset_Interface_unlock
   @unlock.setter
   def unlock(self, value):
      self.fn_Interface_unlock = value
      lib.Instance_setMethod(self.impl, "Unlock".encode('utf8'), cb_Interface_unlock)

   def fn_unset_Interface_updateRootWindow(self, window):
      return lib.Interface_updateRootWindow(self.impl, ffi.NULL if window is None else window.impl)

   @property
   def updateRootWindow(self):
      if hasattr(self, 'fn_Interface_updateRootWindow'): return self.fn_Interface_updateRootWindow
      else: return self.fn_unset_Interface_updateRootWindow
   @updateRootWindow.setter
   def updateRootWindow(self, value):
      self.fn_Interface_updateRootWindow = value
      lib.Instance_setMethod(self.impl, "UpdateRootWindow".encode('utf8'), cb_Interface_updateRootWindow)

   def fn_unset_Interface_wait(self):
      return lib.Interface_wait(self.impl)

   @property
   def wait(self):
      if hasattr(self, 'fn_Interface_wait'): return self.fn_Interface_wait
      else: return self.fn_unset_Interface_wait
   @wait.setter
   def wait(self, value):
      self.fn_Interface_wait = value
      lib.Instance_setMethod(self.impl, "Wait".encode('utf8'), cb_Interface_wait)

   def writeKeyedText(self, surface, x, y, text, hotKey):
      if surface is not None and not isinstance(surface, Surface): surface = Surface(surface)
      if surface is None: surface = ffi.NULL
      if hotKey is not None and not isinstance(hotKey, Key): hotKey = Key(hotKey)
      if hotKey is None: hotKey = ffi.NULL
      lib.Interface_writeKeyedText(self.impl, surface, x, y, text.encode('utf8'), hotKey)

   def writeKeyedTextDisabled(self, surface, x, y, text, hotKey, disabled):
      if surface is not None and not isinstance(surface, Surface): surface = Surface(surface)
      if surface is None: surface = ffi.NULL
      if hotKey is not None and not isinstance(hotKey, Key): hotKey = Key(hotKey)
      if hotKey is None: hotKey = ffi.NULL
      lib.Interface_writeKeyedTextDisabled(self.impl, surface, x, y, text.encode('utf8'), hotKey, disabled)

class Joystick:
   def __init__(self, x = 0, y = 0, z = 0, rx = 0, ry = 0, rz = 0, buttons = 0, impl = None):
      if impl is not None:
         self.impl = ffi.new("Joystick *", impl)
      else:
         self.impl = ffi.new("Joystick *", { 'x' : x, 'y' : y, 'z' : z, 'rx' : rx, 'ry' : ry, 'rz' : rz, 'buttons' : buttons })

   @property
   def x(self): return self.impl.x
   @x.setter
   def x(self, value): self.impl.x = value

   @property
   def y(self): return self.impl.y
   @y.setter
   def y(self, value): self.impl.y = value

   @property
   def z(self): return self.impl.z
   @z.setter
   def z(self, value): self.impl.z = value

   @property
   def rx(self): return self.impl.rx
   @rx.setter
   def rx(self, value): self.impl.rx = value

   @property
   def ry(self): return self.impl.ry
   @ry.setter
   def ry(self, value): self.impl.ry = value

   @property
   def rz(self): return self.impl.rz
   @rz.setter
   def rz(self, value): self.impl.rz = value

   @property
   def buttons(self): return self.impl.buttons
   @buttons.setter
   def buttons(self, value): self.impl.buttons = value

class KeyCode(Key):
   escape           = Key(impl = lib.KeyCode_escape)
   k1               = Key(impl = lib.KeyCode_k1)
   bang             = Key(impl = lib.KeyCode_bang)
   k2               = Key(impl = lib.KeyCode_k2)
   commercial       = Key(impl = lib.KeyCode_commercial)
   k3               = Key(impl = lib.KeyCode_k3)
   pound            = Key(impl = lib.KeyCode_pound)
   k4               = Key(impl = lib.KeyCode_k4)
   dollar           = Key(impl = lib.KeyCode_dollar)
   k5               = Key(impl = lib.KeyCode_k5)
   percent          = Key(impl = lib.KeyCode_percent)
   k6               = Key(impl = lib.KeyCode_k6)
   circumflex       = Key(impl = lib.KeyCode_circumflex)
   k7               = Key(impl = lib.KeyCode_k7)
   ampersand        = Key(impl = lib.KeyCode_ampersand)
   k8               = Key(impl = lib.KeyCode_k8)
   star             = Key(impl = lib.KeyCode_star)
   k9               = Key(impl = lib.KeyCode_k9)
   leftParanthesis  = Key(impl = lib.KeyCode_leftParanthesis)
   k0               = Key(impl = lib.KeyCode_k0)
   rightParanthesis = Key(impl = lib.KeyCode_rightParanthesis)
   minus            = Key(impl = lib.KeyCode_minus)
   underscore       = Key(impl = lib.KeyCode_underscore)
   equal            = Key(impl = lib.KeyCode_equal)
   plus             = Key(impl = lib.KeyCode_plus)
   backSpace        = Key(impl = lib.KeyCode_backSpace)
   tab              = Key(impl = lib.KeyCode_tab)
   q                = Key(impl = lib.KeyCode_q)
   w                = Key(impl = lib.KeyCode_w)
   e                = Key(impl = lib.KeyCode_e)
   r                = Key(impl = lib.KeyCode_r)
   t                = Key(impl = lib.KeyCode_t)
   y                = Key(impl = lib.KeyCode_y)
   u                = Key(impl = lib.KeyCode_u)
   i                = Key(impl = lib.KeyCode_i)
   o                = Key(impl = lib.KeyCode_o)
   p                = Key(impl = lib.KeyCode_p)
   leftBracket      = Key(impl = lib.KeyCode_leftBracket)
   rightBracket     = Key(impl = lib.KeyCode_rightBracket)
   enter            = Key(impl = lib.KeyCode_enter)
   leftControl      = Key(impl = lib.KeyCode_leftControl)
   a                = Key(impl = lib.KeyCode_a)
   s                = Key(impl = lib.KeyCode_s)
   d                = Key(impl = lib.KeyCode_d)
   f                = Key(impl = lib.KeyCode_f)
   g                = Key(impl = lib.KeyCode_g)
   h                = Key(impl = lib.KeyCode_h)
   j                = Key(impl = lib.KeyCode_j)
   k                = Key(impl = lib.KeyCode_k)
   l                = Key(impl = lib.KeyCode_l)
   semicolon        = Key(impl = lib.KeyCode_semicolon)
   colon            = Key(impl = lib.KeyCode_colon)
   quote            = Key(impl = lib.KeyCode_quote)
   doubleQuote      = Key(impl = lib.KeyCode_doubleQuote)
   tilde            = Key(impl = lib.KeyCode_tilde)
   backQuote        = Key(impl = lib.KeyCode_backQuote)
   leftShift        = Key(impl = lib.KeyCode_leftShift)
   backSlash        = Key(impl = lib.KeyCode_backSlash)
   pipe             = Key(impl = lib.KeyCode_pipe)
   z                = Key(impl = lib.KeyCode_z)
   x                = Key(impl = lib.KeyCode_x)
   c                = Key(impl = lib.KeyCode_c)
   v                = Key(impl = lib.KeyCode_v)
   b                = Key(impl = lib.KeyCode_b)
   n                = Key(impl = lib.KeyCode_n)
   m                = Key(impl = lib.KeyCode_m)
   comma            = Key(impl = lib.KeyCode_comma)
   smallerThan      = Key(impl = lib.KeyCode_smallerThan)
   period           = Key(impl = lib.KeyCode_period)
   greaterThan      = Key(impl = lib.KeyCode_greaterThan)
   slash            = Key(impl = lib.KeyCode_slash)
   questionMark     = Key(impl = lib.KeyCode_questionMark)
   rightShift       = Key(impl = lib.KeyCode_rightShift)
   keyPadStar       = Key(impl = lib.KeyCode_keyPadStar)
   leftAlt          = Key(impl = lib.KeyCode_leftAlt)
   space            = Key(impl = lib.KeyCode_space)
   capsLock         = Key(impl = lib.KeyCode_capsLock)
   f1               = Key(impl = lib.KeyCode_f1)
   f2               = Key(impl = lib.KeyCode_f2)
   f3               = Key(impl = lib.KeyCode_f3)
   f4               = Key(impl = lib.KeyCode_f4)
   f5               = Key(impl = lib.KeyCode_f5)
   f6               = Key(impl = lib.KeyCode_f6)
   f7               = Key(impl = lib.KeyCode_f7)
   f8               = Key(impl = lib.KeyCode_f8)
   f9               = Key(impl = lib.KeyCode_f9)
   f10              = Key(impl = lib.KeyCode_f10)
   numLock          = Key(impl = lib.KeyCode_numLock)
   scrollLock       = Key(impl = lib.KeyCode_scrollLock)
   keyPadHome       = Key(impl = lib.KeyCode_keyPadHome)
   keyPad7          = Key(impl = lib.KeyCode_keyPad7)
   keyPadUp         = Key(impl = lib.KeyCode_keyPadUp)
   keyPad8          = Key(impl = lib.KeyCode_keyPad8)
   keyPadPageUp     = Key(impl = lib.KeyCode_keyPadPageUp)
   keyPad9          = Key(impl = lib.KeyCode_keyPad9)
   keyPadMinus      = Key(impl = lib.KeyCode_keyPadMinus)
   keyPadLeft       = Key(impl = lib.KeyCode_keyPadLeft)
   keyPad4          = Key(impl = lib.KeyCode_keyPad4)
   keyPad5          = Key(impl = lib.KeyCode_keyPad5)
   keyPadRight      = Key(impl = lib.KeyCode_keyPadRight)
   keyPad6          = Key(impl = lib.KeyCode_keyPad6)
   keyPadPlus       = Key(impl = lib.KeyCode_keyPadPlus)
   keyPadEnd        = Key(impl = lib.KeyCode_keyPadEnd)
   keyPad1          = Key(impl = lib.KeyCode_keyPad1)
   keyPadDown       = Key(impl = lib.KeyCode_keyPadDown)
   keyPad2          = Key(impl = lib.KeyCode_keyPad2)
   keyPadPageDown   = Key(impl = lib.KeyCode_keyPadPageDown)
   keyPad3          = Key(impl = lib.KeyCode_keyPad3)
   keyPadInsert     = Key(impl = lib.KeyCode_keyPadInsert)
   keyPad0          = Key(impl = lib.KeyCode_keyPad0)
   keyPadDelete     = Key(impl = lib.KeyCode_keyPadDelete)
   f11              = Key(impl = lib.KeyCode_f11)
   f12              = Key(impl = lib.KeyCode_f12)
   keyPadEnter      = Key(impl = lib.KeyCode_keyPadEnter)
   rightControl     = Key(impl = lib.KeyCode_rightControl)
   keyPadSlash      = Key(impl = lib.KeyCode_keyPadSlash)
   printScreen      = Key(impl = lib.KeyCode_printScreen)
   rightAlt         = Key(impl = lib.KeyCode_rightAlt)
   pauseBreak       = Key(impl = lib.KeyCode_pauseBreak)
   home             = Key(impl = lib.KeyCode_home)
   up               = Key(impl = lib.KeyCode_up)
   pageUp           = Key(impl = lib.KeyCode_pageUp)
   left             = Key(impl = lib.KeyCode_left)
   right            = Key(impl = lib.KeyCode_right)
   end              = Key(impl = lib.KeyCode_end)
   down             = Key(impl = lib.KeyCode_down)
   pageDown         = Key(impl = lib.KeyCode_pageDown)
   insert           = Key(impl = lib.KeyCode_insert)
   _del             = Key(impl = lib.KeyCode_del)
   shift            = Key(impl = lib.KeyCode_shift)
   alt              = Key(impl = lib.KeyCode_alt)
   control          = Key(impl = lib.KeyCode_control)
   wheelUp          = Key(impl = lib.KeyCode_wheelUp)
   wheelDown        = Key(impl = lib.KeyCode_wheelDown)
   hotKey           = Key(impl = lib.KeyCode_hotKey)
   defaultKey       = Key(impl = lib.KeyCode_defaultKey)
   capsState        = Key(impl = lib.KeyCode_capsState)
   numState         = Key(impl = lib.KeyCode_numState)
   scrollState      = Key(impl = lib.KeyCode_scrollState)
   play             = Key(impl = lib.KeyCode_play)
   record           = Key(impl = lib.KeyCode_record)
   pause            = Key(impl = lib.KeyCode_pause)
   rewind           = Key(impl = lib.KeyCode_rewind)
   fastForward      = Key(impl = lib.KeyCode_fastForward)
   previousTrack    = Key(impl = lib.KeyCode_previousTrack)
   nextTrack        = Key(impl = lib.KeyCode_nextTrack)
   stop             = Key(impl = lib.KeyCode_stop)
   eject            = Key(impl = lib.KeyCode_eject)
   volumeUp         = Key(impl = lib.KeyCode_volumeUp)
   volumeDown       = Key(impl = lib.KeyCode_volumeDown)
   mute             = Key(impl = lib.KeyCode_mute)
   remoteHome       = Key(impl = lib.KeyCode_remoteHome)
   back             = Key(impl = lib.KeyCode_back)
   menu1            = Key(impl = lib.KeyCode_menu1)
   menu2            = Key(impl = lib.KeyCode_menu2)
   menu3            = Key(impl = lib.KeyCode_menu3)
   menu4            = Key(impl = lib.KeyCode_menu4)
   select           = Key(impl = lib.KeyCode_select)

class MiddleAnchorValue:
   def __init__(self, type = None, distance = None, percent = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("MiddleAnchorValue *", impl)
      else:
         if isinstance(type, tuple):
            __tuple = type
            type = 0
            if len(__tuple) > 0: type     = __tuple[0]
            if len(__tuple) > 1: distance = __tuple[1]
         elif isinstance(type, MinMaxValue):
            self.impl = ffi.new("MiddleAnchorValue *")
            lib.MiddleAnchorValue_from_MinMaxValue(self.impl, type.impl)
            return
         elif isinstance(type, int):
            self.impl = ffi.new("MiddleAnchorValue *")
            lib.MiddleAnchorValue_from_int(self.impl, type)
            return
         elif isinstance(type, float):
            self.impl = ffi.new("MiddleAnchorValue *")
            lib.MiddleAnchorValue_from_double(self.impl, type)
            return
         __members = { }
         if type is not None:     __members['type']     = type
         if distance is not None: __members['distance'] = distance
         if percent is not None:  __members['percent']  = percent
         self.impl = ffi.new("MiddleAnchorValue *", __members)

   @property
   def type(self): return self.impl.type
   @type.setter
   def type(self, value): self.impl.type = value

   @property
   def distance(self): return self.impl.distance
   @distance.setter
   def distance(self, value): self.impl.distance = value

   @property
   def percent(self): return self.impl.percent
   @percent.setter
   def percent(self, value): self.impl.percent = value

   # here is a conversion
   # MiddleAnchorValue_to_MinMaxValue
   # MiddleAnchorValue_from_MinMaxValue

   def __int__(self): return lib.MiddleAnchorValue_to_int(self.impl)

   def __float__(self): return lib.MiddleAnchorValue_to_double(self.impl)

class Modifiers(pyBaseClass):
   def __init__(self, shift = False, ctrl = False, alt = False, cmd = False, left = False, middle = False, right = False, isActivate = False, isSideEffect = False, closingDropDown = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(shift, Modifiers):
         self.impl = shift.impl
      else:
         self.impl = (
            (shift           << lib.MODIFIERS_shift_SHIFT)           |
            (ctrl            << lib.MODIFIERS_ctrl_SHIFT)            |
            (alt             << lib.MODIFIERS_alt_SHIFT)             |
            (cmd             << lib.MODIFIERS_cmd_SHIFT)             |
            (left            << lib.MODIFIERS_left_SHIFT)            |
            (middle          << lib.MODIFIERS_middle_SHIFT)          |
            (right           << lib.MODIFIERS_right_SHIFT)           |
            (isActivate      << lib.MODIFIERS_isActivate_SHIFT)      |
            (isSideEffect    << lib.MODIFIERS_isSideEffect_SHIFT)    |
            (closingDropDown << lib.MODIFIERS_closingDropDown_SHIFT) )

   @property
   def shift(self): return ((((self.impl)) & lib.MODIFIERS_shift_MASK) >> lib.MODIFIERS_shift_SHIFT)
   @shift.setter
   def shift(self, value): self.value = ((self.impl) & ~(lib.MODIFIERS_shift_MASK)) | (((value)) << lib.MODIFIERS_shift_SHIFT)

   @property
   def ctrl(self): return ((((self.impl)) & lib.MODIFIERS_ctrl_MASK) >> lib.MODIFIERS_ctrl_SHIFT)
   @ctrl.setter
   def ctrl(self, value): self.value = ((self.impl) & ~(lib.MODIFIERS_ctrl_MASK)) | (((value)) << lib.MODIFIERS_ctrl_SHIFT)

   @property
   def alt(self): return ((((self.impl)) & lib.MODIFIERS_alt_MASK) >> lib.MODIFIERS_alt_SHIFT)
   @alt.setter
   def alt(self, value): self.value = ((self.impl) & ~(lib.MODIFIERS_alt_MASK)) | (((value)) << lib.MODIFIERS_alt_SHIFT)

   @property
   def cmd(self): return ((((self.impl)) & lib.MODIFIERS_cmd_MASK) >> lib.MODIFIERS_cmd_SHIFT)
   @cmd.setter
   def cmd(self, value): self.value = ((self.impl) & ~(lib.MODIFIERS_cmd_MASK)) | (((value)) << lib.MODIFIERS_cmd_SHIFT)

   @property
   def left(self): return ((((self.impl)) & lib.MODIFIERS_left_MASK) >> lib.MODIFIERS_left_SHIFT)
   @left.setter
   def left(self, value): self.value = ((self.impl) & ~(lib.MODIFIERS_left_MASK)) | (((value)) << lib.MODIFIERS_left_SHIFT)

   @property
   def middle(self): return ((((self.impl)) & lib.MODIFIERS_middle_MASK) >> lib.MODIFIERS_middle_SHIFT)
   @middle.setter
   def middle(self, value): self.value = ((self.impl) & ~(lib.MODIFIERS_middle_MASK)) | (((value)) << lib.MODIFIERS_middle_SHIFT)

   @property
   def right(self): return ((((self.impl)) & lib.MODIFIERS_right_MASK) >> lib.MODIFIERS_right_SHIFT)
   @right.setter
   def right(self, value): self.value = ((self.impl) & ~(lib.MODIFIERS_right_MASK)) | (((value)) << lib.MODIFIERS_right_SHIFT)

   @property
   def isActivate(self): return ((((self.impl)) & lib.MODIFIERS_isActivate_MASK) >> lib.MODIFIERS_isActivate_SHIFT)
   @isActivate.setter
   def isActivate(self, value): self.value = ((self.impl) & ~(lib.MODIFIERS_isActivate_MASK)) | (((value)) << lib.MODIFIERS_isActivate_SHIFT)

   @property
   def isSideEffect(self): return ((((self.impl)) & lib.MODIFIERS_isSideEffect_MASK) >> lib.MODIFIERS_isSideEffect_SHIFT)
   @isSideEffect.setter
   def isSideEffect(self, value): self.value = ((self.impl) & ~(lib.MODIFIERS_isSideEffect_MASK)) | (((value)) << lib.MODIFIERS_isSideEffect_SHIFT)

   @property
   def closingDropDown(self): return ((((self.impl)) & lib.MODIFIERS_closingDropDown_MASK) >> lib.MODIFIERS_closingDropDown_SHIFT)
   @closingDropDown.setter
   def closingDropDown(self, value): self.value = ((self.impl) & ~(lib.MODIFIERS_closingDropDown_MASK)) | (((value)) << lib.MODIFIERS_closingDropDown_SHIFT)

class MouseButtons(pyBaseClass):
   def __init__(self, left = False, right = False, middle = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(left, MouseButtons):
         self.impl = left.impl
      else:
         if isinstance(left, tuple):
            __tuple = left
            left = False
            if len(__tuple) > 0: left = __tuple[0]
            if len(__tuple) > 1: right = __tuple[1]
            if len(__tuple) > 2: middle = __tuple[2]
         self.impl = (
            (left   << lib.MOUSEBUTTONS_left_SHIFT)   |
            (right  << lib.MOUSEBUTTONS_right_SHIFT)  |
            (middle << lib.MOUSEBUTTONS_middle_SHIFT) )

   @property
   def left(self): return ((((self.impl)) & lib.MOUSEBUTTONS_left_MASK) >> lib.MOUSEBUTTONS_left_SHIFT)
   @left.setter
   def left(self, value): self.value = ((self.impl) & ~(lib.MOUSEBUTTONS_left_MASK)) | (((value)) << lib.MOUSEBUTTONS_left_SHIFT)

   @property
   def right(self): return ((((self.impl)) & lib.MOUSEBUTTONS_right_MASK) >> lib.MOUSEBUTTONS_right_SHIFT)
   @right.setter
   def right(self, value): self.value = ((self.impl) & ~(lib.MOUSEBUTTONS_right_MASK)) | (((value)) << lib.MOUSEBUTTONS_right_SHIFT)

   @property
   def middle(self): return ((((self.impl)) & lib.MOUSEBUTTONS_middle_MASK) >> lib.MOUSEBUTTONS_middle_SHIFT)
   @middle.setter
   def middle(self, value): self.value = ((self.impl) & ~(lib.MOUSEBUTTONS_middle_MASK)) | (((value)) << lib.MOUSEBUTTONS_middle_SHIFT)

class MultiLineString(String):
   def __init__(self,
                impl = None):
      String.__init__(self, impl = impl)

class Percentage(pyBaseClass):
   def __init__(self, impl = 0):
      self.impl = impl

Percentage.buc = Percentage

class PredefinedKey(Key):
   alt0           = Key(impl = lib.PredefinedKey_alt0)
   alt1           = Key(impl = lib.PredefinedKey_alt1)
   alt2           = Key(impl = lib.PredefinedKey_alt2)
   alt3           = Key(impl = lib.PredefinedKey_alt3)
   alt4           = Key(impl = lib.PredefinedKey_alt4)
   alt5           = Key(impl = lib.PredefinedKey_alt5)
   alt6           = Key(impl = lib.PredefinedKey_alt6)
   alt7           = Key(impl = lib.PredefinedKey_alt7)
   alt8           = Key(impl = lib.PredefinedKey_alt8)
   alt9           = Key(impl = lib.PredefinedKey_alt9)
   altA           = Key(impl = lib.PredefinedKey_altA)
   altB           = Key(impl = lib.PredefinedKey_altB)
   altC           = Key(impl = lib.PredefinedKey_altC)
   altD           = Key(impl = lib.PredefinedKey_altD)
   altE           = Key(impl = lib.PredefinedKey_altE)
   altF           = Key(impl = lib.PredefinedKey_altF)
   altG           = Key(impl = lib.PredefinedKey_altG)
   altH           = Key(impl = lib.PredefinedKey_altH)
   altI           = Key(impl = lib.PredefinedKey_altI)
   altJ           = Key(impl = lib.PredefinedKey_altJ)
   altK           = Key(impl = lib.PredefinedKey_altK)
   altL           = Key(impl = lib.PredefinedKey_altL)
   altM           = Key(impl = lib.PredefinedKey_altM)
   altN           = Key(impl = lib.PredefinedKey_altN)
   altO           = Key(impl = lib.PredefinedKey_altO)
   altP           = Key(impl = lib.PredefinedKey_altP)
   altQ           = Key(impl = lib.PredefinedKey_altQ)
   altR           = Key(impl = lib.PredefinedKey_altR)
   altS           = Key(impl = lib.PredefinedKey_altS)
   altT           = Key(impl = lib.PredefinedKey_altT)
   altU           = Key(impl = lib.PredefinedKey_altU)
   altV           = Key(impl = lib.PredefinedKey_altV)
   altW           = Key(impl = lib.PredefinedKey_altW)
   altX           = Key(impl = lib.PredefinedKey_altX)
   altY           = Key(impl = lib.PredefinedKey_altY)
   altZ           = Key(impl = lib.PredefinedKey_altZ)
   altF1          = Key(impl = lib.PredefinedKey_altF1)
   altF2          = Key(impl = lib.PredefinedKey_altF2)
   altF3          = Key(impl = lib.PredefinedKey_altF3)
   altF4          = Key(impl = lib.PredefinedKey_altF4)
   altF5          = Key(impl = lib.PredefinedKey_altF5)
   altF6          = Key(impl = lib.PredefinedKey_altF6)
   altF7          = Key(impl = lib.PredefinedKey_altF7)
   altF8          = Key(impl = lib.PredefinedKey_altF8)
   altF9          = Key(impl = lib.PredefinedKey_altF9)
   altF10         = Key(impl = lib.PredefinedKey_altF10)
   altF11         = Key(impl = lib.PredefinedKey_altF11)
   altF12         = Key(impl = lib.PredefinedKey_altF12)
   altLeft        = Key(impl = lib.PredefinedKey_altLeft)
   altRight       = Key(impl = lib.PredefinedKey_altRight)
   altUp          = Key(impl = lib.PredefinedKey_altUp)
   altDown        = Key(impl = lib.PredefinedKey_altDown)
   altEnter       = Key(impl = lib.PredefinedKey_altEnter)
   altKeyPadEnter = Key(impl = lib.PredefinedKey_altKeyPadEnter)
   altHome        = Key(impl = lib.PredefinedKey_altHome)
   altEnd         = Key(impl = lib.PredefinedKey_altEnd)
   altMinus       = Key(impl = lib.PredefinedKey_altMinus)
   altSpace       = Key(impl = lib.PredefinedKey_altSpace)
   ctrl0          = Key(impl = lib.PredefinedKey_ctrl0)
   ctrl1          = Key(impl = lib.PredefinedKey_ctrl1)
   ctrl2          = Key(impl = lib.PredefinedKey_ctrl2)
   ctrl3          = Key(impl = lib.PredefinedKey_ctrl3)
   ctrl4          = Key(impl = lib.PredefinedKey_ctrl4)
   ctrl5          = Key(impl = lib.PredefinedKey_ctrl5)
   ctrl6          = Key(impl = lib.PredefinedKey_ctrl6)
   ctrl7          = Key(impl = lib.PredefinedKey_ctrl7)
   ctrl8          = Key(impl = lib.PredefinedKey_ctrl8)
   ctrl9          = Key(impl = lib.PredefinedKey_ctrl9)
   ctrlA          = Key(impl = lib.PredefinedKey_ctrlA)
   ctrlB          = Key(impl = lib.PredefinedKey_ctrlB)
   ctrlC          = Key(impl = lib.PredefinedKey_ctrlC)
   ctrlD          = Key(impl = lib.PredefinedKey_ctrlD)
   ctrlE          = Key(impl = lib.PredefinedKey_ctrlE)
   ctrlF          = Key(impl = lib.PredefinedKey_ctrlF)
   ctrlG          = Key(impl = lib.PredefinedKey_ctrlG)
   ctrlH          = Key(impl = lib.PredefinedKey_ctrlH)
   ctrlI          = Key(impl = lib.PredefinedKey_ctrlI)
   ctrlJ          = Key(impl = lib.PredefinedKey_ctrlJ)
   ctrlK          = Key(impl = lib.PredefinedKey_ctrlK)
   ctrlL          = Key(impl = lib.PredefinedKey_ctrlL)
   ctrlM          = Key(impl = lib.PredefinedKey_ctrlM)
   ctrlN          = Key(impl = lib.PredefinedKey_ctrlN)
   ctrlO          = Key(impl = lib.PredefinedKey_ctrlO)
   ctrlP          = Key(impl = lib.PredefinedKey_ctrlP)
   ctrlQ          = Key(impl = lib.PredefinedKey_ctrlQ)
   ctrlR          = Key(impl = lib.PredefinedKey_ctrlR)
   ctrlS          = Key(impl = lib.PredefinedKey_ctrlS)
   ctrlT          = Key(impl = lib.PredefinedKey_ctrlT)
   ctrlU          = Key(impl = lib.PredefinedKey_ctrlU)
   ctrlV          = Key(impl = lib.PredefinedKey_ctrlV)
   ctrlW          = Key(impl = lib.PredefinedKey_ctrlW)
   ctrlX          = Key(impl = lib.PredefinedKey_ctrlX)
   ctrlY          = Key(impl = lib.PredefinedKey_ctrlY)
   ctrlZ          = Key(impl = lib.PredefinedKey_ctrlZ)
   ctrlF1         = Key(impl = lib.PredefinedKey_ctrlF1)
   ctrlF2         = Key(impl = lib.PredefinedKey_ctrlF2)
   ctrlF3         = Key(impl = lib.PredefinedKey_ctrlF3)
   ctrlF4         = Key(impl = lib.PredefinedKey_ctrlF4)
   ctrlF5         = Key(impl = lib.PredefinedKey_ctrlF5)
   ctrlF6         = Key(impl = lib.PredefinedKey_ctrlF6)
   ctrlF7         = Key(impl = lib.PredefinedKey_ctrlF7)
   ctrlF8         = Key(impl = lib.PredefinedKey_ctrlF8)
   ctrlF9         = Key(impl = lib.PredefinedKey_ctrlF9)
   ctrlF10        = Key(impl = lib.PredefinedKey_ctrlF10)
   ctrlF11        = Key(impl = lib.PredefinedKey_ctrlF11)
   ctrlF12        = Key(impl = lib.PredefinedKey_ctrlF12)
   ctrlLeft       = Key(impl = lib.PredefinedKey_ctrlLeft)
   ctrlRight      = Key(impl = lib.PredefinedKey_ctrlRight)
   ctrlUp         = Key(impl = lib.PredefinedKey_ctrlUp)
   ctrlDown       = Key(impl = lib.PredefinedKey_ctrlDown)
   ctrlEnter      = Key(impl = lib.PredefinedKey_ctrlEnter)
   ctrlHome       = Key(impl = lib.PredefinedKey_ctrlHome)
   ctrlEnd        = Key(impl = lib.PredefinedKey_ctrlEnd)
   ctrlPageUp     = Key(impl = lib.PredefinedKey_ctrlPageUp)
   ctrlPageDown   = Key(impl = lib.PredefinedKey_ctrlPageDown)
   ctrlInsert     = Key(impl = lib.PredefinedKey_ctrlInsert)
   ctrlSpace      = Key(impl = lib.PredefinedKey_ctrlSpace)
   shiftTab       = Key(impl = lib.PredefinedKey_shiftTab)
   shiftF1        = Key(impl = lib.PredefinedKey_shiftF1)
   shiftF2        = Key(impl = lib.PredefinedKey_shiftF2)
   shiftF3        = Key(impl = lib.PredefinedKey_shiftF3)
   shiftF4        = Key(impl = lib.PredefinedKey_shiftF4)
   shiftF5        = Key(impl = lib.PredefinedKey_shiftF5)
   shiftF6        = Key(impl = lib.PredefinedKey_shiftF6)
   shiftF7        = Key(impl = lib.PredefinedKey_shiftF7)
   shiftF8        = Key(impl = lib.PredefinedKey_shiftF8)
   shiftF9        = Key(impl = lib.PredefinedKey_shiftF9)
   shiftF10       = Key(impl = lib.PredefinedKey_shiftF10)
   shiftF11       = Key(impl = lib.PredefinedKey_shiftF11)
   shiftF12       = Key(impl = lib.PredefinedKey_shiftF12)
   shiftInsert    = Key(impl = lib.PredefinedKey_shiftInsert)
   shiftDel       = Key(impl = lib.PredefinedKey_shiftDel)

class SizeAnchor:
   def __init__(self, size = None, isClientW = None, isClientH = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("SizeAnchor *", impl)
      else:
         if isinstance(size, tuple):
            __tuple = size
            size = None
            if len(__tuple) > 0: size      = __tuple[0]
            if len(__tuple) > 1: isClientW = __tuple[1]
            if len(__tuple) > 2: isClientH = __tuple[2]
         if size is not None:
            if not isinstance(size, Size): size = Size(size)
            size = size.impl
         self.impl = ffi.new("SizeAnchor *", { 'size' : size, 'isClientW' : isClientW, 'isClientH' : isClientH })

   @property
   def size(self): return Size(impl = self.impl.size)
   @size.setter
   def size(self, value):
      if not isinstance(value, Size): value = Size(value)
      self.impl.size = value.impl[0]

   @property
   def isClientW(self): return self.impl.isClientW
   @isClientW.setter
   def isClientW(self, value): self.impl.isClientW = value

   @property
   def isClientH(self): return self.impl.isClientH
   @isClientH.setter
   def isClientH(self, value): self.impl.isClientH = value

@ffi.callback("void(Skin)")
def cb_Skin_captionFont(__s):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_captionFont(skin)

@ffi.callback("void(Skin, uint, int *, int *, byte **)")
def cb_Skin_cursorsBitmaps(__s, id, hotSpotX, hotSpotY, paletteShades):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_cursorsBitmaps(skin, id, hotSpotX, hotSpotY, paletteShades)

@ffi.callback("void(Skin, SkinBitmap)")
def cb_Skin_getBitmap(__s, ap1):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_getBitmap(skin, SkinBitmap(impl = ap1))

@ffi.callback("void(Skin, Window, MinMaxValue *, MinMaxValue *)")
def cb_Skin_getDecorationsSize(__s, ap1, ap2, ap3):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_getDecorationsSize(skin, pyOrNewObject(Window, ap1), ap2, ap3)

@ffi.callback("void(Skin)")
def cb_Skin_horizontalSBH(__s):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_horizontalSBH(skin)

@ffi.callback("void(Skin, Window, int, int, int, int)")
def cb_Skin_isMouseMoving(__s, ap1, ap2, ap3, ap4, ap5):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_isMouseMoving(skin, pyOrNewObject(Window, ap1), ap2, ap3, ap4, ap5)

@ffi.callback("void(Skin, Window, int, int, int, int, bool *, bool *, bool *, bool *)")
def cb_Skin_isMouseResizing(__s, ap1, ap2, ap3, ap4, ap5, ap6, ap7, ap8, ap9):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_isMouseResizing(skin, pyOrNewObject(Window, ap1), ap2, ap3, ap4, ap5, ap6, ap7, ap8, ap9)

@ffi.callback("void(Skin, Window, int *, int *, MinMaxValue *, MinMaxValue *, MinMaxValue *, MinMaxValue *)")
def cb_Skin_setWindowArea(__s, ap1, ap2, ap3, ap4, ap5, ap6, ap7):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_setWindowArea(skin, pyOrNewObject(Window, ap1), ap2, ap3, ap4, ap5, ap6, ap7)

@ffi.callback("void(Skin, Window, MinMaxValue *, MinMaxValue *)")
def cb_Skin_setWindowMinimum(__s, ap1, ap2, ap3):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_setWindowMinimum(skin, pyOrNewObject(Window, ap1), ap2, ap3)

@ffi.callback("void(Skin, void *, Surface, Window, const char *, bool, bool)")
def cb_Skin_showDecorations(__s, ap1, ap2, ap3, ap4, ap5, ap6):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_showDecorations(skin, ap1, pyOrNewObject(Surface, ap2), pyOrNewObject(Window, ap3), ap4.encode('utf8'), ap5, ap6)

@ffi.callback("void(Skin)")
def cb_Skin_systemFont(__s):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_systemFont(skin)

@ffi.callback("void(Skin, void *)")
def cb_Skin_updateNonClient(__s, ap1):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_updateNonClient(skin, ap1)

@ffi.callback("void(Skin)")
def cb_Skin_verticalSBW(__s):
   skin = pyOrNewObject(Skin, __s)
   skin.fn_Skin_verticalSBW(skin)

class Skin(Instance):
   def __init__(self,
                captionFont = None,
                cursorsBitmaps = None,
                getBitmap = None,
                getDecorationsSize = None,
                horizontalSBH = None,
                isMouseMoving = None,
                isMouseResizing = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                systemFont = None,
                updateNonClient = None,
                verticalSBW = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if captionFont is not None:        self.captionFont = captionFont
      if cursorsBitmaps is not None:     self.cursorsBitmaps = cursorsBitmaps
      if getBitmap is not None:          self.getBitmap = getBitmap
      if getDecorationsSize is not None: self.getDecorationsSize = getDecorationsSize
      if horizontalSBH is not None:      self.horizontalSBH = horizontalSBH
      if isMouseMoving is not None:      self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:    self.isMouseResizing = isMouseResizing
      if setWindowArea is not None:      self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:   self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:    self.showDecorations = showDecorations
      if systemFont is not None:         self.systemFont = systemFont
      if updateNonClient is not None:    self.updateNonClient = updateNonClient
      if verticalSBW is not None:        self.verticalSBW = verticalSBW

   def fn_unset_Skin_captionFont(self):
      return lib.Skin_captionFont(self.impl)

   @property
   def captionFont(self):
      if hasattr(self, 'fn_Skin_captionFont'): return self.fn_Skin_captionFont
      else: return self.fn_unset_Skin_captionFont
   @captionFont.setter
   def captionFont(self, value):
      self.fn_Skin_captionFont = value
      lib.Instance_setMethod(self.impl, "CaptionFont".encode('utf8'), cb_Skin_captionFont)

   def fn_unset_Skin_cursorsBitmaps(self, id, hotSpotX, hotSpotY, paletteShades):
      if hotSpotX is None: hotSpotX = ffi.NULL
      if hotSpotY is None: hotSpotY = ffi.NULL
      return lib.Skin_cursorsBitmaps(self.impl, id, hotSpotX, hotSpotY, paletteShades)

   @property
   def cursorsBitmaps(self):
      if hasattr(self, 'fn_Skin_cursorsBitmaps'): return self.fn_Skin_cursorsBitmaps
      else: return self.fn_unset_Skin_cursorsBitmaps
   @cursorsBitmaps.setter
   def cursorsBitmaps(self, value):
      self.fn_Skin_cursorsBitmaps = value
      lib.Instance_setMethod(self.impl, "CursorsBitmaps".encode('utf8'), cb_Skin_cursorsBitmaps)

   def fn_unset_Skin_getBitmap(self, ap1):
      return lib.Skin_getBitmap(self.impl, ap1)

   @property
   def getBitmap(self):
      if hasattr(self, 'fn_Skin_getBitmap'): return self.fn_Skin_getBitmap
      else: return self.fn_unset_Skin_getBitmap
   @getBitmap.setter
   def getBitmap(self, value):
      self.fn_Skin_getBitmap = value
      lib.Instance_setMethod(self.impl, "GetBitmap".encode('utf8'), cb_Skin_getBitmap)

   def fn_unset_Skin_getDecorationsSize(self, ap1, ap2, ap3):
      if ap2 is None: ap2 = ffi.NULL
      if ap3 is None: ap3 = ffi.NULL
      return lib.Skin_getDecorationsSize(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ap3)

   @property
   def getDecorationsSize(self):
      if hasattr(self, 'fn_Skin_getDecorationsSize'): return self.fn_Skin_getDecorationsSize
      else: return self.fn_unset_Skin_getDecorationsSize
   @getDecorationsSize.setter
   def getDecorationsSize(self, value):
      self.fn_Skin_getDecorationsSize = value
      lib.Instance_setMethod(self.impl, "GetDecorationsSize".encode('utf8'), cb_Skin_getDecorationsSize)

   def fn_unset_Skin_horizontalSBH(self):
      return lib.Skin_horizontalSBH(self.impl)

   @property
   def horizontalSBH(self):
      if hasattr(self, 'fn_Skin_horizontalSBH'): return self.fn_Skin_horizontalSBH
      else: return self.fn_unset_Skin_horizontalSBH
   @horizontalSBH.setter
   def horizontalSBH(self, value):
      self.fn_Skin_horizontalSBH = value
      lib.Instance_setMethod(self.impl, "HorizontalSBH".encode('utf8'), cb_Skin_horizontalSBH)

   def fn_unset_Skin_isMouseMoving(self, ap1, ap2, ap3, ap4, ap5):
      return lib.Skin_isMouseMoving(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ap3, ap4, ap5)

   @property
   def isMouseMoving(self):
      if hasattr(self, 'fn_Skin_isMouseMoving'): return self.fn_Skin_isMouseMoving
      else: return self.fn_unset_Skin_isMouseMoving
   @isMouseMoving.setter
   def isMouseMoving(self, value):
      self.fn_Skin_isMouseMoving = value
      lib.Instance_setMethod(self.impl, "IsMouseMoving".encode('utf8'), cb_Skin_isMouseMoving)

   def fn_unset_Skin_isMouseResizing(self, ap1, ap2, ap3, ap4, ap5, ap6, ap7, ap8, ap9):
      if ap6 is None: ap6 = ffi.NULL
      if ap7 is None: ap7 = ffi.NULL
      if ap8 is None: ap8 = ffi.NULL
      if ap9 is None: ap9 = ffi.NULL
      return lib.Skin_isMouseResizing(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ap3, ap4, ap5, ap6, ap7, ap8, ap9)

   @property
   def isMouseResizing(self):
      if hasattr(self, 'fn_Skin_isMouseResizing'): return self.fn_Skin_isMouseResizing
      else: return self.fn_unset_Skin_isMouseResizing
   @isMouseResizing.setter
   def isMouseResizing(self, value):
      self.fn_Skin_isMouseResizing = value
      lib.Instance_setMethod(self.impl, "IsMouseResizing".encode('utf8'), cb_Skin_isMouseResizing)

   def fn_unset_Skin_setWindowArea(self, ap1, ap2, ap3, ap4, ap5, ap6, ap7):
      if ap2 is None: ap2 = ffi.NULL
      if ap3 is None: ap3 = ffi.NULL
      if ap4 is None: ap4 = ffi.NULL
      if ap5 is None: ap5 = ffi.NULL
      if ap6 is None: ap6 = ffi.NULL
      if ap7 is None: ap7 = ffi.NULL
      return lib.Skin_setWindowArea(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ap3, ap4, ap5, ap6, ap7)

   @property
   def setWindowArea(self):
      if hasattr(self, 'fn_Skin_setWindowArea'): return self.fn_Skin_setWindowArea
      else: return self.fn_unset_Skin_setWindowArea
   @setWindowArea.setter
   def setWindowArea(self, value):
      self.fn_Skin_setWindowArea = value
      lib.Instance_setMethod(self.impl, "SetWindowArea".encode('utf8'), cb_Skin_setWindowArea)

   def fn_unset_Skin_setWindowMinimum(self, ap1, ap2, ap3):
      if ap2 is None: ap2 = ffi.NULL
      if ap3 is None: ap3 = ffi.NULL
      return lib.Skin_setWindowMinimum(self.impl, ffi.NULL if ap1 is None else ap1.impl, ap2, ap3)

   @property
   def setWindowMinimum(self):
      if hasattr(self, 'fn_Skin_setWindowMinimum'): return self.fn_Skin_setWindowMinimum
      else: return self.fn_unset_Skin_setWindowMinimum
   @setWindowMinimum.setter
   def setWindowMinimum(self, value):
      self.fn_Skin_setWindowMinimum = value
      lib.Instance_setMethod(self.impl, "SetWindowMinimum".encode('utf8'), cb_Skin_setWindowMinimum)

   def fn_unset_Skin_showDecorations(self, ap1, ap2, ap3, ap4, ap5, ap6):
      return lib.Skin_showDecorations(self.impl, ap1, ffi.NULL if ap2 is None else ap2.impl, ffi.NULL if ap3 is None else ap3.impl, ap4, ap5, ap6)

   @property
   def showDecorations(self):
      if hasattr(self, 'fn_Skin_showDecorations'): return self.fn_Skin_showDecorations
      else: return self.fn_unset_Skin_showDecorations
   @showDecorations.setter
   def showDecorations(self, value):
      self.fn_Skin_showDecorations = value
      lib.Instance_setMethod(self.impl, "ShowDecorations".encode('utf8'), cb_Skin_showDecorations)

   def fn_unset_Skin_systemFont(self):
      return lib.Skin_systemFont(self.impl)

   @property
   def systemFont(self):
      if hasattr(self, 'fn_Skin_systemFont'): return self.fn_Skin_systemFont
      else: return self.fn_unset_Skin_systemFont
   @systemFont.setter
   def systemFont(self, value):
      self.fn_Skin_systemFont = value
      lib.Instance_setMethod(self.impl, "SystemFont".encode('utf8'), cb_Skin_systemFont)

   def fn_unset_Skin_updateNonClient(self, ap1):
      return lib.Skin_updateNonClient(self.impl, ap1)

   @property
   def updateNonClient(self):
      if hasattr(self, 'fn_Skin_updateNonClient'): return self.fn_Skin_updateNonClient
      else: return self.fn_unset_Skin_updateNonClient
   @updateNonClient.setter
   def updateNonClient(self, value):
      self.fn_Skin_updateNonClient = value
      lib.Instance_setMethod(self.impl, "UpdateNonClient".encode('utf8'), cb_Skin_updateNonClient)

   def fn_unset_Skin_verticalSBW(self):
      return lib.Skin_verticalSBW(self.impl)

   @property
   def verticalSBW(self):
      if hasattr(self, 'fn_Skin_verticalSBW'): return self.fn_Skin_verticalSBW
      else: return self.fn_unset_Skin_verticalSBW
   @verticalSBW.setter
   def verticalSBW(self, value):
      self.fn_Skin_verticalSBW = value
      lib.Instance_setMethod(self.impl, "VerticalSBW".encode('utf8'), cb_Skin_verticalSBW)

class SkinBitmap:
   minimize = lib.SkinBitmap_minimize
   maximize = lib.SkinBitmap_maximize
   restore  = lib.SkinBitmap_restore
   close    = lib.SkinBitmap_close

class SystemCursor:
   arrow    = lib.SystemCursor_arrow
   iBeam    = lib.SystemCursor_iBeam
   cross    = lib.SystemCursor_cross
   moving   = lib.SystemCursor_moving
   sizeNESW = lib.SystemCursor_sizeNESW
   sizeNS   = lib.SystemCursor_sizeNS
   sizeNWSE = lib.SystemCursor_sizeNWSE
   sizeWE   = lib.SystemCursor_sizeWE
   hand     = lib.SystemCursor_hand

@ffi.callback("void(Timer)")
def cb_Timer_delayExpired(__t):
   timer = pyOrNewObject(Timer, __t)
   timer.fn_Timer_delayExpired(timer.userData)

class Timer(Instance):
   def __init__(self,
                userData = None,
                delay = None,
                started = None,
                _delay = None,
                delayExpired = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if self.impl != ffi.NULL: lib.Timer_set_userData(self.impl, self.impl)
      if userData is not None:     self.userData = userData
      if delay is not None:        self.delay = delay
      if started is not None:      self.started = started
      if _delay is not None:       self._delay = _delay
      if delayExpired is not None: self.delayExpired = delayExpired

   userData = None

   @property
   def delay(self): return Seconds(lib.Timer_get_delay(self.impl))
   @delay.setter
   def delay(self, value):
      if not isinstance(value, Time): value = Seconds(value)
      lib.Timer_set_delay(self.impl, value.impl)

   @property
   def started(self): return lib.Timer_get_started(self.impl)
   @started.setter
   def started(self, value):
      lib.Timer_set_started(self.impl, value)

   @property
   def _delay(self): return Seconds(impl = IPTR(lib, ffi, self, Timer)._delay)
   @_delay.setter
   def _delay(self, value):
      if not isinstance(value, Time): value = Seconds(value)
      IPTR(lib, ffi, self, Timer)._delay = value.impl

   def fn_unset_Timer_delayExpired(self, _instance):
      return lib.Timer_delayExpired(self.impl, _instance.impl)

   @property
   def delayExpired(self):
      if hasattr(self, 'fn_Timer_delayExpired'): return self.fn_Timer_delayExpired
      else: return self.fn_unset_Timer_delayExpired
   @delayExpired.setter
   def delayExpired(self, value):
      self.fn_Timer_delayExpired = value
      lib.Instance_setMethod(self.impl, "DelayExpired".encode('utf8'), cb_Timer_delayExpired)

   def start(self):
      lib.Timer_start(self.impl)

   def stop(self):
      lib.Timer_stop(self.impl)

class TouchPointerEvent:
   move        = lib.TouchPointerEvent_move
   up          = lib.TouchPointerEvent_up
   down        = lib.TouchPointerEvent_down
   pointerUp   = lib.TouchPointerEvent_pointerUp
   pointerDown = lib.TouchPointerEvent_pointerDown

class TouchPointerInfo:
   def __init__(self, id = 0, point = None, size = 0.0, pressure = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("TouchPointerInfo *", impl)
      else:
         if isinstance(id, tuple):
            __tuple = id
            id = 0
            if len(__tuple) > 0: id       = __tuple[0]
            if len(__tuple) > 1: point    = __tuple[1]
            if len(__tuple) > 2: size     = __tuple[2]
            if len(__tuple) > 3: pressure = __tuple[3]
         if point is not None:
            if not isinstance(point, Point): point = Point(point)
            point = point.impl
         self.impl = ffi.new("TouchPointerInfo *", { 'id' : id, 'point' : point, 'size' : size, 'pressure' : pressure })

   @property
   def id(self): return self.impl.id
   @id.setter
   def id(self, value): self.impl.id = value

   @property
   def point(self): return Point(impl = self.impl.point)
   @point.setter
   def point(self, value):
      if not isinstance(value, Point): value = Point(value)
      self.impl.point = value.impl[0]

   @property
   def size(self): return self.impl.size
   @size.setter
   def size(self, value): self.impl.size = value

   @property
   def pressure(self): return self.impl.pressure
   @pressure.setter
   def pressure(self, value): self.impl.pressure = value

@ffi.callback("void(uint64, WindowController)")
def cb_WindowController_onCreate(__u, controller):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onCreate(pyObject(lib.oTAInstance(__u)), windowcontroller)

@ffi.callback("void(uint64, WindowController, Key, unichar)")
def cb_WindowController_onKeyDown(__u, controller, key, ch):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onKeyDown(pyObject(lib.oTAInstance(__u)), windowcontroller, Key(impl = key), ch)

@ffi.callback("void(uint64, WindowController, Key, unichar)")
def cb_WindowController_onKeyHit(__u, controller, key, ch):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onKeyHit(pyObject(lib.oTAInstance(__u)), windowcontroller, Key(impl = key), ch)

@ffi.callback("void(uint64, WindowController, Key, unichar)")
def cb_WindowController_onKeyUp(__u, controller, key, ch):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onKeyUp(pyObject(lib.oTAInstance(__u)), windowcontroller, Key(impl = key), ch)

@ffi.callback("void(uint64, WindowController, int, int, Modifiers)")
def cb_WindowController_onLeftButtonDown(__u, controller, x, y, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onLeftButtonDown(pyObject(lib.oTAInstance(__u)), windowcontroller, x, y, Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController, int, int, Modifiers)")
def cb_WindowController_onLeftButtonUp(__u, controller, x, y, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onLeftButtonUp(pyObject(lib.oTAInstance(__u)), windowcontroller, x, y, Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController, int, int, Modifiers)")
def cb_WindowController_onLeftDoubleClick(__u, controller, x, y, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onLeftDoubleClick(pyObject(lib.oTAInstance(__u)), windowcontroller, x, y, Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController)")
def cb_WindowController_onLoadGraphics(__u, controller):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onLoadGraphics(pyObject(lib.oTAInstance(__u)), windowcontroller)

@ffi.callback("void(uint64, WindowController, int, int, Modifiers)")
def cb_WindowController_onMiddleButtonDown(__u, controller, x, y, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onMiddleButtonDown(pyObject(lib.oTAInstance(__u)), windowcontroller, x, y, Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController, int, int, Modifiers)")
def cb_WindowController_onMiddleButtonUp(__u, controller, x, y, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onMiddleButtonUp(pyObject(lib.oTAInstance(__u)), windowcontroller, x, y, Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController, int, int, Modifiers)")
def cb_WindowController_onMiddleDoubleClick(__u, controller, x, y, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onMiddleDoubleClick(pyObject(lib.oTAInstance(__u)), windowcontroller, x, y, Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController, int, int, Modifiers)")
def cb_WindowController_onMouseMove(__u, controller, x, y, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onMouseMove(pyObject(lib.oTAInstance(__u)), windowcontroller, x, y, Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController, TouchPointerEvent, Array, Modifiers)")
def cb_WindowController_onMultiTouch(__u, controller, event, infos, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onMultiTouch(pyObject(lib.oTAInstance(__u)), windowcontroller, TouchPointerEvent(impl = event), Array("<TouchPointerInfo>", impl = infos), Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController, Surface)")
def cb_WindowController_onRedraw(__u, controller, surface):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onRedraw(pyObject(lib.oTAInstance(__u)), windowcontroller, pyOrNewObject(Surface, surface))

@ffi.callback("void(uint64, WindowController, int, int)")
def cb_WindowController_onResize(__u, controller, width, height):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onResize(pyObject(lib.oTAInstance(__u)), windowcontroller, width, height)

@ffi.callback("void(uint64, WindowController, int, int, Modifiers)")
def cb_WindowController_onRightButtonDown(__u, controller, x, y, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onRightButtonDown(pyObject(lib.oTAInstance(__u)), windowcontroller, x, y, Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController, int, int, Modifiers)")
def cb_WindowController_onRightButtonUp(__u, controller, x, y, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onRightButtonUp(pyObject(lib.oTAInstance(__u)), windowcontroller, x, y, Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController, int, int, Modifiers)")
def cb_WindowController_onRightDoubleClick(__u, controller, x, y, mods):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onRightDoubleClick(pyObject(lib.oTAInstance(__u)), windowcontroller, x, y, Modifiers(impl = mods))

@ffi.callback("void(uint64, WindowController)")
def cb_WindowController_onUnloadGraphics(__u, controller):
   windowcontroller = pyOrNewObject(WindowController, controller)
   windowcontroller.fn_WindowController_onUnloadGraphics(pyObject(lib.oTAInstance(__u)), windowcontroller)

class WindowController(Instance):
   def __init__(self, templateParams = None,
                controlled = None,
                windowVTbl = None,
                onCreate = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseMove = None,
                onMultiTouch = None,
                onRedraw = None,
                onResize = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onUnloadGraphics = None,
                impl = None):
      Instance.__init__(self, templateParams, impl = impl)
      if controlled is not None:          self.controlled = controlled
      if windowVTbl is not None:          self.windowVTbl = windowVTbl
      if onCreate is not None:            self.onCreate = onCreate
      if onKeyDown is not None:           self.onKeyDown = onKeyDown
      if onKeyHit is not None:            self.onKeyHit = onKeyHit
      if onKeyUp is not None:             self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:    self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:      self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:   self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:      self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:  self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:    self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None: self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseMove is not None:         self.onMouseMove = onMouseMove
      if onMultiTouch is not None:        self.onMultiTouch = onMultiTouch
      if onRedraw is not None:            self.onRedraw = onRedraw
      if onResize is not None:            self.onResize = onResize
      if onRightButtonDown is not None:   self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:     self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:  self.onRightDoubleClick = onRightDoubleClick
      if onUnloadGraphics is not None:    self.onUnloadGraphics = onUnloadGraphics

   @property
   def window(self): return pyOrNewObject(Window, lib.WindowController_get_window(self.impl))

   @property
   def controlled(self): value = lib.WindowController_get_controlled(self.impl); return pyOrNewObject(Instance, lib.oTAInstance(value))
   @controlled.setter
   def controlled(self, value):
      lib.WindowController_set_controlled(self.impl, TA(value))

   @property
   def windowVTbl(self): return IPTR(lib, ffi, self, WindowController).windowVTbl
   @windowVTbl.setter
   def windowVTbl(self, value): IPTR(lib, ffi, self, WindowController).windowVTbl = value

   def fn_unset_WindowController_onCreate(self, controller):
      return lib.WindowController_onCreate(self.impl, ffi.NULL if controller is None else controller.impl)

   @property
   def onCreate(self):
      if hasattr(self, 'fn_WindowController_onCreate'): return self.fn_WindowController_onCreate
      else: return self.fn_unset_WindowController_onCreate
   @onCreate.setter
   def onCreate(self, value):
      self.fn_WindowController_onCreate = value
      lib.Instance_setMethod(self.impl, "OnCreate".encode('utf8'), cb_WindowController_onCreate)

   def fn_unset_WindowController_onKeyDown(self, controller, key, ch):
      return lib.WindowController_onKeyDown(self.impl, ffi.NULL if controller is None else controller.impl, key, ch)

   @property
   def onKeyDown(self):
      if hasattr(self, 'fn_WindowController_onKeyDown'): return self.fn_WindowController_onKeyDown
      else: return self.fn_unset_WindowController_onKeyDown
   @onKeyDown.setter
   def onKeyDown(self, value):
      self.fn_WindowController_onKeyDown = value
      lib.Instance_setMethod(self.impl, "OnKeyDown".encode('utf8'), cb_WindowController_onKeyDown)

   def fn_unset_WindowController_onKeyHit(self, controller, key, ch):
      return lib.WindowController_onKeyHit(self.impl, ffi.NULL if controller is None else controller.impl, key, ch)

   @property
   def onKeyHit(self):
      if hasattr(self, 'fn_WindowController_onKeyHit'): return self.fn_WindowController_onKeyHit
      else: return self.fn_unset_WindowController_onKeyHit
   @onKeyHit.setter
   def onKeyHit(self, value):
      self.fn_WindowController_onKeyHit = value
      lib.Instance_setMethod(self.impl, "OnKeyHit".encode('utf8'), cb_WindowController_onKeyHit)

   def fn_unset_WindowController_onKeyUp(self, controller, key, ch):
      return lib.WindowController_onKeyUp(self.impl, ffi.NULL if controller is None else controller.impl, key, ch)

   @property
   def onKeyUp(self):
      if hasattr(self, 'fn_WindowController_onKeyUp'): return self.fn_WindowController_onKeyUp
      else: return self.fn_unset_WindowController_onKeyUp
   @onKeyUp.setter
   def onKeyUp(self, value):
      self.fn_WindowController_onKeyUp = value
      lib.Instance_setMethod(self.impl, "OnKeyUp".encode('utf8'), cb_WindowController_onKeyUp)

   def fn_unset_WindowController_onLeftButtonDown(self, controller, x, y, mods):
      return lib.WindowController_onLeftButtonDown(self.impl, ffi.NULL if controller is None else controller.impl, x, y, mods)

   @property
   def onLeftButtonDown(self):
      if hasattr(self, 'fn_WindowController_onLeftButtonDown'): return self.fn_WindowController_onLeftButtonDown
      else: return self.fn_unset_WindowController_onLeftButtonDown
   @onLeftButtonDown.setter
   def onLeftButtonDown(self, value):
      self.fn_WindowController_onLeftButtonDown = value
      lib.Instance_setMethod(self.impl, "OnLeftButtonDown".encode('utf8'), cb_WindowController_onLeftButtonDown)

   def fn_unset_WindowController_onLeftButtonUp(self, controller, x, y, mods):
      return lib.WindowController_onLeftButtonUp(self.impl, ffi.NULL if controller is None else controller.impl, x, y, mods)

   @property
   def onLeftButtonUp(self):
      if hasattr(self, 'fn_WindowController_onLeftButtonUp'): return self.fn_WindowController_onLeftButtonUp
      else: return self.fn_unset_WindowController_onLeftButtonUp
   @onLeftButtonUp.setter
   def onLeftButtonUp(self, value):
      self.fn_WindowController_onLeftButtonUp = value
      lib.Instance_setMethod(self.impl, "OnLeftButtonUp".encode('utf8'), cb_WindowController_onLeftButtonUp)

   def fn_unset_WindowController_onLeftDoubleClick(self, controller, x, y, mods):
      return lib.WindowController_onLeftDoubleClick(self.impl, ffi.NULL if controller is None else controller.impl, x, y, mods)

   @property
   def onLeftDoubleClick(self):
      if hasattr(self, 'fn_WindowController_onLeftDoubleClick'): return self.fn_WindowController_onLeftDoubleClick
      else: return self.fn_unset_WindowController_onLeftDoubleClick
   @onLeftDoubleClick.setter
   def onLeftDoubleClick(self, value):
      self.fn_WindowController_onLeftDoubleClick = value
      lib.Instance_setMethod(self.impl, "OnLeftDoubleClick".encode('utf8'), cb_WindowController_onLeftDoubleClick)

   def fn_unset_WindowController_onLoadGraphics(self, controller):
      return lib.WindowController_onLoadGraphics(self.impl, ffi.NULL if controller is None else controller.impl)

   @property
   def onLoadGraphics(self):
      if hasattr(self, 'fn_WindowController_onLoadGraphics'): return self.fn_WindowController_onLoadGraphics
      else: return self.fn_unset_WindowController_onLoadGraphics
   @onLoadGraphics.setter
   def onLoadGraphics(self, value):
      self.fn_WindowController_onLoadGraphics = value
      lib.Instance_setMethod(self.impl, "OnLoadGraphics".encode('utf8'), cb_WindowController_onLoadGraphics)

   def fn_unset_WindowController_onMiddleButtonDown(self, controller, x, y, mods):
      return lib.WindowController_onMiddleButtonDown(self.impl, ffi.NULL if controller is None else controller.impl, x, y, mods)

   @property
   def onMiddleButtonDown(self):
      if hasattr(self, 'fn_WindowController_onMiddleButtonDown'): return self.fn_WindowController_onMiddleButtonDown
      else: return self.fn_unset_WindowController_onMiddleButtonDown
   @onMiddleButtonDown.setter
   def onMiddleButtonDown(self, value):
      self.fn_WindowController_onMiddleButtonDown = value
      lib.Instance_setMethod(self.impl, "OnMiddleButtonDown".encode('utf8'), cb_WindowController_onMiddleButtonDown)

   def fn_unset_WindowController_onMiddleButtonUp(self, controller, x, y, mods):
      return lib.WindowController_onMiddleButtonUp(self.impl, ffi.NULL if controller is None else controller.impl, x, y, mods)

   @property
   def onMiddleButtonUp(self):
      if hasattr(self, 'fn_WindowController_onMiddleButtonUp'): return self.fn_WindowController_onMiddleButtonUp
      else: return self.fn_unset_WindowController_onMiddleButtonUp
   @onMiddleButtonUp.setter
   def onMiddleButtonUp(self, value):
      self.fn_WindowController_onMiddleButtonUp = value
      lib.Instance_setMethod(self.impl, "OnMiddleButtonUp".encode('utf8'), cb_WindowController_onMiddleButtonUp)

   def fn_unset_WindowController_onMiddleDoubleClick(self, controller, x, y, mods):
      return lib.WindowController_onMiddleDoubleClick(self.impl, ffi.NULL if controller is None else controller.impl, x, y, mods)

   @property
   def onMiddleDoubleClick(self):
      if hasattr(self, 'fn_WindowController_onMiddleDoubleClick'): return self.fn_WindowController_onMiddleDoubleClick
      else: return self.fn_unset_WindowController_onMiddleDoubleClick
   @onMiddleDoubleClick.setter
   def onMiddleDoubleClick(self, value):
      self.fn_WindowController_onMiddleDoubleClick = value
      lib.Instance_setMethod(self.impl, "OnMiddleDoubleClick".encode('utf8'), cb_WindowController_onMiddleDoubleClick)

   def fn_unset_WindowController_onMouseMove(self, controller, x, y, mods):
      return lib.WindowController_onMouseMove(self.impl, ffi.NULL if controller is None else controller.impl, x, y, mods)

   @property
   def onMouseMove(self):
      if hasattr(self, 'fn_WindowController_onMouseMove'): return self.fn_WindowController_onMouseMove
      else: return self.fn_unset_WindowController_onMouseMove
   @onMouseMove.setter
   def onMouseMove(self, value):
      self.fn_WindowController_onMouseMove = value
      lib.Instance_setMethod(self.impl, "OnMouseMove".encode('utf8'), cb_WindowController_onMouseMove)

   def fn_unset_WindowController_onMultiTouch(self, controller, event, infos, mods):
      return lib.WindowController_onMultiTouch(self.impl, ffi.NULL if controller is None else controller.impl, event, ffi.NULL if infos is None else infos.impl, mods)

   @property
   def onMultiTouch(self):
      if hasattr(self, 'fn_WindowController_onMultiTouch'): return self.fn_WindowController_onMultiTouch
      else: return self.fn_unset_WindowController_onMultiTouch
   @onMultiTouch.setter
   def onMultiTouch(self, value):
      self.fn_WindowController_onMultiTouch = value
      lib.Instance_setMethod(self.impl, "OnMultiTouch".encode('utf8'), cb_WindowController_onMultiTouch)

   def fn_unset_WindowController_onRedraw(self, controller, surface):
      return lib.WindowController_onRedraw(self.impl, ffi.NULL if controller is None else controller.impl, ffi.NULL if surface is None else surface.impl)

   @property
   def onRedraw(self):
      if hasattr(self, 'fn_WindowController_onRedraw'): return self.fn_WindowController_onRedraw
      else: return self.fn_unset_WindowController_onRedraw
   @onRedraw.setter
   def onRedraw(self, value):
      self.fn_WindowController_onRedraw = value
      lib.Instance_setMethod(self.impl, "OnRedraw".encode('utf8'), cb_WindowController_onRedraw)

   def fn_unset_WindowController_onResize(self, controller, width, height):
      return lib.WindowController_onResize(self.impl, ffi.NULL if controller is None else controller.impl, width, height)

   @property
   def onResize(self):
      if hasattr(self, 'fn_WindowController_onResize'): return self.fn_WindowController_onResize
      else: return self.fn_unset_WindowController_onResize
   @onResize.setter
   def onResize(self, value):
      self.fn_WindowController_onResize = value
      lib.Instance_setMethod(self.impl, "OnResize".encode('utf8'), cb_WindowController_onResize)

   def fn_unset_WindowController_onRightButtonDown(self, controller, x, y, mods):
      return lib.WindowController_onRightButtonDown(self.impl, ffi.NULL if controller is None else controller.impl, x, y, mods)

   @property
   def onRightButtonDown(self):
      if hasattr(self, 'fn_WindowController_onRightButtonDown'): return self.fn_WindowController_onRightButtonDown
      else: return self.fn_unset_WindowController_onRightButtonDown
   @onRightButtonDown.setter
   def onRightButtonDown(self, value):
      self.fn_WindowController_onRightButtonDown = value
      lib.Instance_setMethod(self.impl, "OnRightButtonDown".encode('utf8'), cb_WindowController_onRightButtonDown)

   def fn_unset_WindowController_onRightButtonUp(self, controller, x, y, mods):
      return lib.WindowController_onRightButtonUp(self.impl, ffi.NULL if controller is None else controller.impl, x, y, mods)

   @property
   def onRightButtonUp(self):
      if hasattr(self, 'fn_WindowController_onRightButtonUp'): return self.fn_WindowController_onRightButtonUp
      else: return self.fn_unset_WindowController_onRightButtonUp
   @onRightButtonUp.setter
   def onRightButtonUp(self, value):
      self.fn_WindowController_onRightButtonUp = value
      lib.Instance_setMethod(self.impl, "OnRightButtonUp".encode('utf8'), cb_WindowController_onRightButtonUp)

   def fn_unset_WindowController_onRightDoubleClick(self, controller, x, y, mods):
      return lib.WindowController_onRightDoubleClick(self.impl, ffi.NULL if controller is None else controller.impl, x, y, mods)

   @property
   def onRightDoubleClick(self):
      if hasattr(self, 'fn_WindowController_onRightDoubleClick'): return self.fn_WindowController_onRightDoubleClick
      else: return self.fn_unset_WindowController_onRightDoubleClick
   @onRightDoubleClick.setter
   def onRightDoubleClick(self, value):
      self.fn_WindowController_onRightDoubleClick = value
      lib.Instance_setMethod(self.impl, "OnRightDoubleClick".encode('utf8'), cb_WindowController_onRightDoubleClick)

   def fn_unset_WindowController_onUnloadGraphics(self, controller):
      return lib.WindowController_onUnloadGraphics(self.impl, ffi.NULL if controller is None else controller.impl)

   @property
   def onUnloadGraphics(self):
      if hasattr(self, 'fn_WindowController_onUnloadGraphics'): return self.fn_WindowController_onUnloadGraphics
      else: return self.fn_unset_WindowController_onUnloadGraphics
   @onUnloadGraphics.setter
   def onUnloadGraphics(self, value):
      self.fn_WindowController_onUnloadGraphics = value
      lib.Instance_setMethod(self.impl, "OnUnloadGraphics".encode('utf8'), cb_WindowController_onUnloadGraphics)

class WindowState:
   normal    = lib.WindowState_normal
   minimized = lib.WindowState_minimized
   maximized = lib.WindowState_maximized
def applySkin(c, name, vTbl): lib.applySkin(ffi.NULL if c is None else c.impl, name, vTbl)
def desktop3DFullScreen(window): lib.desktop3DFullScreen(ffi.NULL if window is None else window.impl)
def desktop3DGetClipBox(box): lib.desktop3DGetClipBox(ffi.NULL if box is None else box.impl)
def desktop3DGetClippedWindow(): lib.desktop3DGetClippedWindow()
def desktop3DGetWindowHandle(window): lib.desktop3DGetWindowHandle(ffi.NULL if window is None else window.impl)
def desktop3DInitialize(window, setup, update): lib.desktop3DInitialize(ffi.NULL if window is None else window.impl, setup, update)
def desktop3DMouseMessage(window, method, x, y, mods, consequential, activate): lib.desktop3DMouseMessage(ffi.NULL if window is None else window.impl, method, x, y, mods, consequential, activate)
def desktop3DSetDesktopDirty(): lib.desktop3DSetDesktopDirty()
def desktop3DTitleBarClicked(clickedWindow, x, y): lib.desktop3DTitleBarClicked(ffi.NULL if clickedWindow is None else clickedWindow.impl, x, y)
def desktop3DUpdateDisplay(): lib.desktop3DUpdateDisplay()
def unapplySkin(c): lib.unapplySkin(ffi.NULL if c is None else c.impl)

class Time(pyBaseClass):
   def __init__(self, impl = 0):
      self.impl = impl

Time.buc = Time

class SecSince1970(pyBaseClass):
   def __init__(self, impl = 0):
      self.impl = impl

   @property
   def _global(self): return SecSince1970(lib.SecSince1970_get_global(self.impl))

   @property
   def local(self): return SecSince1970(lib.SecSince1970_get_local(self.impl))

SecSince1970.buc = SecSince1970

class Radians(Angle):
   def __init__(self, value = 0, impl = None):
      if impl is not None: self.impl = impl
      elif isinstance(value, Angle): self.impl = value.impl
      else: self.impl = value
   @property
   def value(self): return self.impl
   @value.setter
   def value(self, value): self.impl = value

Radians.buc = Angle

class JSONParser(Instance):
   def __init__(self,
                f = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if f is not None: self.f = f

   @property
   def f(self): return File(impl = IPTR(lib, ffi, self, JSONParser).f)
   @f.setter
   def f(self, value):
      if not isinstance(value, File): value = File(value)
      IPTR(lib, ffi, self, JSONParser).f = value.impl

   def getObject(self, objectType, object):
      if objectType is not None and not isinstance(objectType, Class): objectType = Class(objectType)
      if objectType is None: objectType = ffi.NULL
      return lib.JSONParser_getObject(self.impl, objectType, object)

@ffi.callback("void(GlobalSettingsDriver, File, GlobalSettings)")
def cb_GlobalSettingsDriver_load(__g, f, globalSettings):
   globalsettingsdriver = pyOrNewObject(GlobalSettingsDriver, __g)
   globalsettingsdriver.fn_GlobalSettingsDriver_load(globalsettingsdriver, pyOrNewObject(File, f), pyOrNewObject(GlobalSettings, globalSettings))

@ffi.callback("void(GlobalSettingsDriver, File, GlobalSettings)")
def cb_GlobalSettingsDriver_save(__g, f, globalSettings):
   globalsettingsdriver = pyOrNewObject(GlobalSettingsDriver, __g)
   globalsettingsdriver.fn_GlobalSettingsDriver_save(globalsettingsdriver, pyOrNewObject(File, f), pyOrNewObject(GlobalSettings, globalSettings))

class GlobalSettingsDriver(Instance):
   def __init__(self,
                load = None,
                save = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if load is not None: self.load = load
      if save is not None: self.save = save

   def fn_unset_GlobalSettingsDriver_load(self, f, globalSettings):
      return lib.GlobalSettingsDriver_load(self.impl, ffi.NULL if f is None else f.impl, ffi.NULL if globalSettings is None else globalSettings.impl)

   @property
   def load(self):
      if hasattr(self, 'fn_GlobalSettingsDriver_load'): return self.fn_GlobalSettingsDriver_load
      else: return self.fn_unset_GlobalSettingsDriver_load
   @load.setter
   def load(self, value):
      self.fn_GlobalSettingsDriver_load = value
      lib.Instance_setMethod(self.impl, "Load".encode('utf8'), cb_GlobalSettingsDriver_load)

   def fn_unset_GlobalSettingsDriver_save(self, f, globalSettings):
      return lib.GlobalSettingsDriver_save(self.impl, ffi.NULL if f is None else f.impl, ffi.NULL if globalSettings is None else globalSettings.impl)

   @property
   def save(self):
      if hasattr(self, 'fn_GlobalSettingsDriver_save'): return self.fn_GlobalSettingsDriver_save
      else: return self.fn_unset_GlobalSettingsDriver_save
   @save.setter
   def save(self, value):
      self.fn_GlobalSettingsDriver_save = value
      lib.Instance_setMethod(self.impl, "Save".encode('utf8'), cb_GlobalSettingsDriver_save)

@ffi.callback("void(GlobalSettings)")
def cb_GlobalSettings_load(__g):
   globalsettings = pyOrNewObject(GlobalSettings, __g)
   globalsettings.fn_GlobalSettings_load(globalsettings)

@ffi.callback("void(GlobalSettings)")
def cb_GlobalSettings_onAskReloadSettings(__g):
   globalsettings = pyOrNewObject(GlobalSettings, __g)
   globalsettings.fn_GlobalSettings_onAskReloadSettings(globalsettings)

@ffi.callback("void(GlobalSettings)")
def cb_GlobalSettings_save(__g):
   globalsettings = pyOrNewObject(GlobalSettings, __g)
   globalsettings.fn_GlobalSettings_save(globalsettings)

class GlobalSettings(Instance):
   def __init__(self,
                settingsName = None,
                settingsExtension = None,
                settingsDirectory = None,
                settingsLocation = None,
                settingsFilePath = None,
                allowDefaultLocations = None,
                allUsers = None,
                portable = None,
                driver = None,
                data = None,
                dataOwner = None,
                dataClass = None,
                load = None,
                onAskReloadSettings = None,
                save = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if settingsName is not None:          self.settingsName = settingsName
      if settingsExtension is not None:     self.settingsExtension = settingsExtension
      if settingsDirectory is not None:     self.settingsDirectory = settingsDirectory
      if settingsLocation is not None:      self.settingsLocation = settingsLocation
      if settingsFilePath is not None:      self.settingsFilePath = settingsFilePath
      if allowDefaultLocations is not None: self.allowDefaultLocations = allowDefaultLocations
      if allUsers is not None:              self.allUsers = allUsers
      if portable is not None:              self.portable = portable
      if driver is not None:                self.driver = driver
      if data is not None:                  self.data = data
      if dataOwner is not None:             self.dataOwner = dataOwner
      if dataClass is not None:             self.dataClass = dataClass
      if load is not None:                  self.load = load
      if onAskReloadSettings is not None:   self.onAskReloadSettings = onAskReloadSettings
      if save is not None:                  self.save = save

   @property
   def settingsName(self): value = lib.GlobalSettings_get_settingsName(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @settingsName.setter
   def settingsName(self, value):
      lib.GlobalSettings_set_settingsName(self.impl, value.encode('utf8'))

   @property
   def settingsExtension(self): value = lib.GlobalSettings_get_settingsExtension(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @settingsExtension.setter
   def settingsExtension(self, value):
      lib.GlobalSettings_set_settingsExtension(self.impl, value.encode('utf8'))

   @property
   def settingsDirectory(self): value = lib.GlobalSettings_get_settingsDirectory(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @settingsDirectory.setter
   def settingsDirectory(self, value):
      lib.GlobalSettings_set_settingsDirectory(self.impl, value.encode('utf8'))

   @property
   def settingsLocation(self): value = lib.GlobalSettings_get_settingsLocation(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @settingsLocation.setter
   def settingsLocation(self, value):
      lib.GlobalSettings_set_settingsLocation(self.impl, value.encode('utf8'))

   @property
   def settingsFilePath(self): value = lib.GlobalSettings_get_settingsFilePath(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @settingsFilePath.setter
   def settingsFilePath(self, value):
      lib.GlobalSettings_set_settingsFilePath(self.impl, value.encode('utf8'))

   @property
   def allowDefaultLocations(self): return lib.GlobalSettings_get_allowDefaultLocations(self.impl)
   @allowDefaultLocations.setter
   def allowDefaultLocations(self, value):
      lib.GlobalSettings_set_allowDefaultLocations(self.impl, value)

   @property
   def allUsers(self): return lib.GlobalSettings_get_allUsers(self.impl)
   @allUsers.setter
   def allUsers(self, value):
      lib.GlobalSettings_set_allUsers(self.impl, value)

   @property
   def portable(self): return lib.GlobalSettings_get_portable(self.impl)
   @portable.setter
   def portable(self, value):
      lib.GlobalSettings_set_portable(self.impl, value)

   @property
   def driver(self): value = lib.GlobalSettings_get_driver(self.impl) if self is not None and self.impl != ffi.NULL else ffi.NULL; return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @driver.setter
   def driver(self, value):
      if not isinstance(value, String): value = String(value)
      lib.GlobalSettings_set_driver(self.impl, value.impl.encode('utf8'))

   @property
   def data(self): return GlobalSettingsData(impl = IPTR(lib, ffi, self, GlobalSettings).data)
   @data.setter
   def data(self, value):
      if not isinstance(value, GlobalSettingsData): value = GlobalSettingsData(value)
      IPTR(lib, ffi, self, GlobalSettings).data = value.impl

   @property
   def dataOwner(self): return IPTR(lib, ffi, self, GlobalSettings).dataOwner
   @dataOwner.setter
   def dataOwner(self, value): IPTR(lib, ffi, self, GlobalSettings).dataOwner = value

   @property
   def dataClass(self): return IPTR(lib, ffi, self, GlobalSettings).dataClass
   @dataClass.setter
   def dataClass(self, value): IPTR(lib, ffi, self, GlobalSettings).dataClass = value

   @property
   def isGlobalPath(self): return lib.GlobalSettings_get_isGlobalPath(self.impl)

   def close(self):
      lib.GlobalSettings_close(self.impl)

   def closeAndMonitor(self):
      lib.GlobalSettings_closeAndMonitor(self.impl)

   def fn_unset_GlobalSettings_load(self):
      return lib.GlobalSettings_load(self.impl)

   @property
   def load(self):
      if hasattr(self, 'fn_GlobalSettings_load'): return self.fn_GlobalSettings_load
      else: return self.fn_unset_GlobalSettings_load
   @load.setter
   def load(self, value):
      self.fn_GlobalSettings_load = value
      lib.Instance_setMethod(self.impl, "Load".encode('utf8'), cb_GlobalSettings_load)

   def fn_unset_GlobalSettings_onAskReloadSettings(self):
      return lib.GlobalSettings_onAskReloadSettings(self.impl)

   @property
   def onAskReloadSettings(self):
      if hasattr(self, 'fn_GlobalSettings_onAskReloadSettings'): return self.fn_GlobalSettings_onAskReloadSettings
      else: return self.fn_unset_GlobalSettings_onAskReloadSettings
   @onAskReloadSettings.setter
   def onAskReloadSettings(self, value):
      self.fn_GlobalSettings_onAskReloadSettings = value
      lib.Instance_setMethod(self.impl, "OnAskReloadSettings".encode('utf8'), cb_GlobalSettings_onAskReloadSettings)

   def openAndLock(self):
      fileSize = ffi.new("FileSize *")
      lib.GlobalSettings_openAndLock(self.impl, fileSize)
      return FileSize(impl = fileSize)


   def fn_unset_GlobalSettings_save(self):
      return lib.GlobalSettings_save(self.impl)

   @property
   def save(self):
      if hasattr(self, 'fn_GlobalSettings_save'): return self.fn_GlobalSettings_save
      else: return self.fn_unset_GlobalSettings_save
   @save.setter
   def save(self, value):
      self.fn_GlobalSettings_save = value
      lib.Instance_setMethod(self.impl, "Save".encode('utf8'), cb_GlobalSettings_save)

class FileChange(pyBaseClass):
   def __init__(self, created = False, renamed = False, modified = False, deleted = False, attribs = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(created, FileChange):
         self.impl = created.impl
      else:
         if isinstance(created, tuple):
            __tuple = created
            created = False
            if len(__tuple) > 0: created = __tuple[0]
            if len(__tuple) > 1: renamed = __tuple[1]
            if len(__tuple) > 2: modified = __tuple[2]
            if len(__tuple) > 3: deleted = __tuple[3]
            if len(__tuple) > 4: attribs = __tuple[4]
         self.impl = (
            (created  << lib.FILECHANGE_created_SHIFT)  |
            (renamed  << lib.FILECHANGE_renamed_SHIFT)  |
            (modified << lib.FILECHANGE_modified_SHIFT) |
            (deleted  << lib.FILECHANGE_deleted_SHIFT)  |
            (attribs  << lib.FILECHANGE_attribs_SHIFT)  )

   @property
   def created(self): return ((((self.impl)) & lib.FILECHANGE_created_MASK) >> lib.FILECHANGE_created_SHIFT)
   @created.setter
   def created(self, value): self.value = ((self.impl) & ~(lib.FILECHANGE_created_MASK)) | (((value)) << lib.FILECHANGE_created_SHIFT)

   @property
   def renamed(self): return ((((self.impl)) & lib.FILECHANGE_renamed_MASK) >> lib.FILECHANGE_renamed_SHIFT)
   @renamed.setter
   def renamed(self, value): self.value = ((self.impl) & ~(lib.FILECHANGE_renamed_MASK)) | (((value)) << lib.FILECHANGE_renamed_SHIFT)

   @property
   def modified(self): return ((((self.impl)) & lib.FILECHANGE_modified_MASK) >> lib.FILECHANGE_modified_SHIFT)
   @modified.setter
   def modified(self, value): self.value = ((self.impl) & ~(lib.FILECHANGE_modified_MASK)) | (((value)) << lib.FILECHANGE_modified_SHIFT)

   @property
   def deleted(self): return ((((self.impl)) & lib.FILECHANGE_deleted_MASK) >> lib.FILECHANGE_deleted_SHIFT)
   @deleted.setter
   def deleted(self, value): self.value = ((self.impl) & ~(lib.FILECHANGE_deleted_MASK)) | (((value)) << lib.FILECHANGE_deleted_SHIFT)

   @property
   def attribs(self): return ((((self.impl)) & lib.FILECHANGE_attribs_MASK) >> lib.FILECHANGE_attribs_SHIFT)
   @attribs.setter
   def attribs(self, value): self.value = ((self.impl) & ~(lib.FILECHANGE_attribs_MASK)) | (((value)) << lib.FILECHANGE_attribs_SHIFT)

@ffi.callback("void(File)")
def cb_File_close(__f):
   file = pyOrNewObject(File, __f)
   file.fn_File_close(file)

@ffi.callback("void(File)")
def cb_File_closeInput(__f):
   file = pyOrNewObject(File, __f)
   file.fn_File_closeInput(file)

@ffi.callback("void(File)")
def cb_File_closeOutput(__f):
   file = pyOrNewObject(File, __f)
   file.fn_File_closeOutput(file)

@ffi.callback("void(File)")
def cb_File_eof(__f):
   file = pyOrNewObject(File, __f)
   file.fn_File_eof(file)

@ffi.callback("void(File)")
def cb_File_getSize(__f):
   file = pyOrNewObject(File, __f)
   file.fn_File_getSize(file)

@ffi.callback("void(File, char *)")
def cb_File_getc(__f, ch):
   file = pyOrNewObject(File, __f)
   file.fn_File_getc(file, ch.encode('utf8'))

@ffi.callback("void(File, FileLock, uint64, uint64, bool)")
def cb_File_lock(__f, type, start, length, wait):
   file = pyOrNewObject(File, __f)
   file.fn_File_lock(file, FileLock(impl = type), start, length, wait)

@ffi.callback("void(File, char)")
def cb_File_putc(__f, ch):
   file = pyOrNewObject(File, __f)
   file.fn_File_putc(file, ch)

@ffi.callback("void(File, const char *)")
def cb_File_puts(__f, string):
   file = pyOrNewObject(File, __f)
   file.fn_File_puts(file, string.encode('utf8'))

@ffi.callback("void(File, void *, uint, uint)")
def cb_File_read(__f, buffer, size, count):
   file = pyOrNewObject(File, __f)
   file.fn_File_read(file, buffer, size, count)

@ffi.callback("void(File, int, FileSeekMode)")
def cb_File_seek(__f, pos, mode):
   file = pyOrNewObject(File, __f)
   file.fn_File_seek(file, pos, FileSeekMode(impl = mode))

@ffi.callback("void(File, int64, FileSeekMode)")
def cb_File_seek64(__f, pos, mode):
   file = pyOrNewObject(File, __f)
   file.fn_File_seek64(file, pos, FileSeekMode(impl = mode))

@ffi.callback("void(File)")
def cb_File_tell(__f):
   file = pyOrNewObject(File, __f)
   file.fn_File_tell(file)

@ffi.callback("void(File, FileSize)")
def cb_File_truncate(__f, size):
   file = pyOrNewObject(File, __f)
   file.fn_File_truncate(file, FileSize(impl = size))

@ffi.callback("void(File, uint64, uint64, bool)")
def cb_File_unlock(__f, start, length, wait):
   file = pyOrNewObject(File, __f)
   file.fn_File_unlock(file, start, length, wait)

@ffi.callback("void(File, const void *, uint, uint)")
def cb_File_write(__f, buffer, size, count):
   file = pyOrNewObject(File, __f)
   file.fn_File_write(file, buffer, size, count)

class File(IOChannel):
   def __init__(self,
                input = None,
                output = None,
                buffered = None,
                readData = None,
                writeData = None,
                close = None,
                closeInput = None,
                closeOutput = None,
                eof = None,
                getSize = None,
                getc = None,
                lock = None,
                putc = None,
                puts = None,
                read = None,
                seek = None,
                seek64 = None,
                tell = None,
                truncate = None,
                unlock = None,
                write = None,
                impl = None):
      IOChannel.__init__(self, impl = impl)
      if input is not None:       self.input = input
      if output is not None:      self.output = output
      if buffered is not None:    self.buffered = buffered
      if readData is not None:    self.readData = readData
      if writeData is not None:   self.writeData = writeData
      if close is not None:       self.close = close
      if closeInput is not None:  self.closeInput = closeInput
      if closeOutput is not None: self.closeOutput = closeOutput
      if eof is not None:         self.eof = eof
      if getSize is not None:     self.getSize = getSize
      if getc is not None:        self.getc = getc
      if lock is not None:        self.lock = lock
      if putc is not None:        self.putc = putc
      if puts is not None:        self.puts = puts
      if read is not None:        self.read = read
      if seek is not None:        self.seek = seek
      if seek64 is not None:      self.seek64 = seek64
      if tell is not None:        self.tell = tell
      if truncate is not None:    self.truncate = truncate
      if unlock is not None:      self.unlock = unlock
      if write is not None:       self.write = write

   @property
   def input(self): return lib.File_get_input(self.impl)
   @input.setter
   def input(self, value):
      lib.File_set_input(self.impl, value)

   @property
   def output(self): return lib.File_get_output(self.impl)
   @output.setter
   def output(self, value):
      lib.File_set_output(self.impl, value)

   @property
   def buffered(self): return None
   @buffered.setter
   def buffered(self, value):
      lib.File_set_buffered(self.impl, value)

   @property
   def eof(self): return lib.File_get_eof(self.impl)

   def fn_unset_File_close(self):
      return lib.File_close(self.impl)

   @property
   def close(self):
      if hasattr(self, 'fn_File_close'): return self.fn_File_close
      else: return self.fn_unset_File_close
   @close.setter
   def close(self, value):
      self.fn_File_close = value
      lib.Instance_setMethod(self.impl, "Close".encode('utf8'), cb_File_close)

   def fn_unset_File_closeInput(self):
      return lib.File_closeInput(self.impl)

   @property
   def closeInput(self):
      if hasattr(self, 'fn_File_closeInput'): return self.fn_File_closeInput
      else: return self.fn_unset_File_closeInput
   @closeInput.setter
   def closeInput(self, value):
      self.fn_File_closeInput = value
      lib.Instance_setMethod(self.impl, "CloseInput".encode('utf8'), cb_File_closeInput)

   def fn_unset_File_closeOutput(self):
      return lib.File_closeOutput(self.impl)

   @property
   def closeOutput(self):
      if hasattr(self, 'fn_File_closeOutput'): return self.fn_File_closeOutput
      else: return self.fn_unset_File_closeOutput
   @closeOutput.setter
   def closeOutput(self, value):
      self.fn_File_closeOutput = value
      lib.Instance_setMethod(self.impl, "CloseOutput".encode('utf8'), cb_File_closeOutput)

   def copyTo(self, outputFileName):
      return lib.File_copyTo(self.impl, outputFileName.encode('utf8'))

   def fn_unset_File_eof(self):
      return lib.File_eof(self.impl)

   @property
   def eof(self):
      if hasattr(self, 'fn_File_eof'): return self.fn_File_eof
      else: return self.fn_unset_File_eof
   @eof.setter
   def eof(self, value):
      self.fn_File_eof = value
      lib.Instance_setMethod(self.impl, "Eof".encode('utf8'), cb_File_eof)

   def flush(self):
      return lib.File_flush(self.impl)

   def getDouble(self):
      return lib.File_getDouble(self.impl)

   def getFloat(self):
      return lib.File_getFloat(self.impl)

   def getHexValue(self):
      return lib.File_getHexValue(self.impl)

   def getLine(self, s, max):
      return lib.File_getLine(self.impl, s.encode('utf8'), max)

   def getLineEx(self, s, max):
      hasNewLineChar = ffi.new("Bool *")
      lib.File_getLineEx(self.impl, s.encode('utf8'), max, hasNewLineChar)
      return bool(impl = hasNewLineChar)


   def fn_unset_File_getSize(self):
      return lib.File_getSize(self.impl)

   @property
   def getSize(self):
      if hasattr(self, 'fn_File_getSize'): return self.fn_File_getSize
      else: return self.fn_unset_File_getSize
   @getSize.setter
   def getSize(self, value):
      self.fn_File_getSize = value
      lib.Instance_setMethod(self.impl, "GetSize".encode('utf8'), cb_File_getSize)

   def getString(self, string, max):
      return lib.File_getString(self.impl, string.encode('utf8'), max)

   def getValue(self):
      return lib.File_getValue(self.impl)

   def fn_unset_File_getc(self, ch):
      return lib.File_getc(self.impl, ch)

   @property
   def getc(self):
      if hasattr(self, 'fn_File_getc'): return self.fn_File_getc
      else: return self.fn_unset_File_getc
   @getc.setter
   def getc(self, value):
      self.fn_File_getc = value
      lib.Instance_setMethod(self.impl, "Getc".encode('utf8'), cb_File_getc)

   def fn_unset_File_lock(self, type, start, length, wait):
      return lib.File_lock(self.impl, type, start, length, wait)

   @property
   def lock(self):
      if hasattr(self, 'fn_File_lock'): return self.fn_File_lock
      else: return self.fn_unset_File_lock
   @lock.setter
   def lock(self, value):
      self.fn_File_lock = value
      lib.Instance_setMethod(self.impl, "Lock".encode('utf8'), cb_File_lock)

   def print(self, object):
      lib.File_print(self.impl, object)

   def printLn(self, object):
      lib.File_printLn(self.impl, object)

   def printf(self, format):
      return lib.File_printf(self.impl, format.encode('utf8'))

   def fn_unset_File_putc(self, ch):
      return lib.File_putc(self.impl, ch)

   @property
   def putc(self):
      if hasattr(self, 'fn_File_putc'): return self.fn_File_putc
      else: return self.fn_unset_File_putc
   @putc.setter
   def putc(self, value):
      self.fn_File_putc = value
      lib.Instance_setMethod(self.impl, "Putc".encode('utf8'), cb_File_putc)

   def fn_unset_File_puts(self, string):
      return lib.File_puts(self.impl, string)

   @property
   def puts(self):
      if hasattr(self, 'fn_File_puts'): return self.fn_File_puts
      else: return self.fn_unset_File_puts
   @puts.setter
   def puts(self, value):
      self.fn_File_puts = value
      lib.Instance_setMethod(self.impl, "Puts".encode('utf8'), cb_File_puts)

   def fn_unset_File_read(self, buffer, size, count):
      return lib.File_read(self.impl, buffer, size, count)

   @property
   def read(self):
      if hasattr(self, 'fn_File_read'): return self.fn_File_read
      else: return self.fn_unset_File_read
   @read.setter
   def read(self, value):
      self.fn_File_read = value
      lib.Instance_setMethod(self.impl, "Read".encode('utf8'), cb_File_read)

   def fn_unset_File_seek(self, pos, mode):
      return lib.File_seek(self.impl, pos, mode)

   @property
   def seek(self):
      if hasattr(self, 'fn_File_seek'): return self.fn_File_seek
      else: return self.fn_unset_File_seek
   @seek.setter
   def seek(self, value):
      self.fn_File_seek = value
      lib.Instance_setMethod(self.impl, "Seek".encode('utf8'), cb_File_seek)

   def fn_unset_File_seek64(self, pos, mode):
      return lib.File_seek64(self.impl, pos, mode)

   @property
   def seek64(self):
      if hasattr(self, 'fn_File_seek64'): return self.fn_File_seek64
      else: return self.fn_unset_File_seek64
   @seek64.setter
   def seek64(self, value):
      self.fn_File_seek64 = value
      lib.Instance_setMethod(self.impl, "Seek64".encode('utf8'), cb_File_seek64)

   def fn_unset_File_tell(self):
      return lib.File_tell(self.impl)

   @property
   def tell(self):
      if hasattr(self, 'fn_File_tell'): return self.fn_File_tell
      else: return self.fn_unset_File_tell
   @tell.setter
   def tell(self, value):
      self.fn_File_tell = value
      lib.Instance_setMethod(self.impl, "Tell".encode('utf8'), cb_File_tell)

   def fn_unset_File_truncate(self, size):
      return lib.File_truncate(self.impl, size)

   @property
   def truncate(self):
      if hasattr(self, 'fn_File_truncate'): return self.fn_File_truncate
      else: return self.fn_unset_File_truncate
   @truncate.setter
   def truncate(self, value):
      self.fn_File_truncate = value
      lib.Instance_setMethod(self.impl, "Truncate".encode('utf8'), cb_File_truncate)

   def fn_unset_File_unlock(self, start, length, wait):
      return lib.File_unlock(self.impl, start, length, wait)

   @property
   def unlock(self):
      if hasattr(self, 'fn_File_unlock'): return self.fn_File_unlock
      else: return self.fn_unset_File_unlock
   @unlock.setter
   def unlock(self, value):
      self.fn_File_unlock = value
      lib.Instance_setMethod(self.impl, "Unlock".encode('utf8'), cb_File_unlock)

   def fn_unset_File_write(self, buffer, size, count):
      return lib.File_write(self.impl, buffer, size, count)

   @property
   def write(self):
      if hasattr(self, 'fn_File_write'): return self.fn_File_write
      else: return self.fn_unset_File_write
   @write.setter
   def write(self, value):
      self.fn_File_write = value
      lib.Instance_setMethod(self.impl, "Write".encode('utf8'), cb_File_write)

class ErrorCode(pyBaseClass):
   def __init__(self, level = 0, code = 0, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(level, ErrorCode):
         self.impl = level.impl
      else:
         if isinstance(level, tuple):
            __tuple = level
            level = 0
            if len(__tuple) > 0: level = __tuple[0]
            if len(__tuple) > 1: code = __tuple[1]
         self.impl = (
            (level << lib.ERRORCODE_level_SHIFT) |
            (code  << lib.ERRORCODE_code_SHIFT)  )

   @property
   def level(self): return ((((self.impl)) & lib.ERRORCODE_level_MASK) >> lib.ERRORCODE_level_SHIFT)
   @level.setter
   def level(self, value): self.value = ((self.impl) & ~(lib.ERRORCODE_level_MASK)) | (((value)) << lib.ERRORCODE_level_SHIFT)

   @property
   def code(self): return ((((self.impl)) & lib.ERRORCODE_code_MASK) >> lib.ERRORCODE_code_SHIFT)
   @code.setter
   def code(self, value): self.value = ((self.impl) & ~(lib.ERRORCODE_code_MASK)) | (((value)) << lib.ERRORCODE_code_SHIFT)

class Distance(pyBaseClass):
   def __init__(self, impl = 0):
      self.impl = impl

Distance.buc = Distance

class CharCategories(pyBaseClass):
   def __init__(self, none = False, markNonSpacing = False, markSpacing = False, markEnclosing = False, numberDecimalDigit = False, numberLetter = False, numberOther = False, separatorSpace = False, separatorLine = False, separatorParagraph = False, otherControl = False, otherFormat = False, otherSurrogate = False, otherPrivateUse = False, otherNotAssigned = False, letterUpperCase = False, letterLowerCase = False, letterTitleCase = False, letterModifier = False, letterOther = False, punctuationConnector = False, punctuationDash = False, punctuationOpen = False, punctuationClose = False, punctuationInitial = False, punctuationFinal = False, punctuationOther = False, symbolMath = False, symbolCurrency = False, symbolModifier = False, symbolOther = False,
                impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(none, CharCategories):
         self.impl = none.impl
      else:
         self.impl = (
            (none                 << lib.CHARCATEGORIES_none_SHIFT)                 |
            (markNonSpacing       << lib.CHARCATEGORIES_markNonSpacing_SHIFT)       |
            (markSpacing          << lib.CHARCATEGORIES_markSpacing_SHIFT)          |
            (markEnclosing        << lib.CHARCATEGORIES_markEnclosing_SHIFT)        |
            (numberDecimalDigit   << lib.CHARCATEGORIES_numberDecimalDigit_SHIFT)   |
            (numberLetter         << lib.CHARCATEGORIES_numberLetter_SHIFT)         |
            (numberOther          << lib.CHARCATEGORIES_numberOther_SHIFT)          |
            (separatorSpace       << lib.CHARCATEGORIES_separatorSpace_SHIFT)       |
            (separatorLine        << lib.CHARCATEGORIES_separatorLine_SHIFT)        |
            (separatorParagraph   << lib.CHARCATEGORIES_separatorParagraph_SHIFT)   |
            (otherControl         << lib.CHARCATEGORIES_otherControl_SHIFT)         |
            (otherFormat          << lib.CHARCATEGORIES_otherFormat_SHIFT)          |
            (otherSurrogate       << lib.CHARCATEGORIES_otherSurrogate_SHIFT)       |
            (otherPrivateUse      << lib.CHARCATEGORIES_otherPrivateUse_SHIFT)      |
            (otherNotAssigned     << lib.CHARCATEGORIES_otherNotAssigned_SHIFT)     |
            (letterUpperCase      << lib.CHARCATEGORIES_letterUpperCase_SHIFT)      |
            (letterLowerCase      << lib.CHARCATEGORIES_letterLowerCase_SHIFT)      |
            (letterTitleCase      << lib.CHARCATEGORIES_letterTitleCase_SHIFT)      |
            (letterModifier       << lib.CHARCATEGORIES_letterModifier_SHIFT)       |
            (letterOther          << lib.CHARCATEGORIES_letterOther_SHIFT)          |
            (punctuationConnector << lib.CHARCATEGORIES_punctuationConnector_SHIFT) |
            (punctuationDash      << lib.CHARCATEGORIES_punctuationDash_SHIFT)      |
            (punctuationOpen      << lib.CHARCATEGORIES_punctuationOpen_SHIFT)      |
            (punctuationClose     << lib.CHARCATEGORIES_punctuationClose_SHIFT)     |
            (punctuationInitial   << lib.CHARCATEGORIES_punctuationInitial_SHIFT)   |
            (punctuationFinal     << lib.CHARCATEGORIES_punctuationFinal_SHIFT)     |
            (punctuationOther     << lib.CHARCATEGORIES_punctuationOther_SHIFT)     |
            (symbolMath           << lib.CHARCATEGORIES_symbolMath_SHIFT)           |
            (symbolCurrency       << lib.CHARCATEGORIES_symbolCurrency_SHIFT)       |
            (symbolModifier       << lib.CHARCATEGORIES_symbolModifier_SHIFT)       |
            (symbolOther          << lib.CHARCATEGORIES_symbolOther_SHIFT)          )

   @property
   def none(self): return ((((self.impl)) & lib.CHARCATEGORIES_none_MASK) >> lib.CHARCATEGORIES_none_SHIFT)
   @none.setter
   def none(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_none_MASK)) | (((value)) << lib.CHARCATEGORIES_none_SHIFT)

   @property
   def markNonSpacing(self): return ((((self.impl)) & lib.CHARCATEGORIES_markNonSpacing_MASK) >> lib.CHARCATEGORIES_markNonSpacing_SHIFT)
   @markNonSpacing.setter
   def markNonSpacing(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_markNonSpacing_MASK)) | (((value)) << lib.CHARCATEGORIES_markNonSpacing_SHIFT)

   @property
   def markSpacing(self): return ((((self.impl)) & lib.CHARCATEGORIES_markSpacing_MASK) >> lib.CHARCATEGORIES_markSpacing_SHIFT)
   @markSpacing.setter
   def markSpacing(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_markSpacing_MASK)) | (((value)) << lib.CHARCATEGORIES_markSpacing_SHIFT)

   @property
   def markEnclosing(self): return ((((self.impl)) & lib.CHARCATEGORIES_markEnclosing_MASK) >> lib.CHARCATEGORIES_markEnclosing_SHIFT)
   @markEnclosing.setter
   def markEnclosing(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_markEnclosing_MASK)) | (((value)) << lib.CHARCATEGORIES_markEnclosing_SHIFT)

   @property
   def numberDecimalDigit(self): return ((((self.impl)) & lib.CHARCATEGORIES_numberDecimalDigit_MASK) >> lib.CHARCATEGORIES_numberDecimalDigit_SHIFT)
   @numberDecimalDigit.setter
   def numberDecimalDigit(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_numberDecimalDigit_MASK)) | (((value)) << lib.CHARCATEGORIES_numberDecimalDigit_SHIFT)

   @property
   def numberLetter(self): return ((((self.impl)) & lib.CHARCATEGORIES_numberLetter_MASK) >> lib.CHARCATEGORIES_numberLetter_SHIFT)
   @numberLetter.setter
   def numberLetter(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_numberLetter_MASK)) | (((value)) << lib.CHARCATEGORIES_numberLetter_SHIFT)

   @property
   def numberOther(self): return ((((self.impl)) & lib.CHARCATEGORIES_numberOther_MASK) >> lib.CHARCATEGORIES_numberOther_SHIFT)
   @numberOther.setter
   def numberOther(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_numberOther_MASK)) | (((value)) << lib.CHARCATEGORIES_numberOther_SHIFT)

   @property
   def separatorSpace(self): return ((((self.impl)) & lib.CHARCATEGORIES_separatorSpace_MASK) >> lib.CHARCATEGORIES_separatorSpace_SHIFT)
   @separatorSpace.setter
   def separatorSpace(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_separatorSpace_MASK)) | (((value)) << lib.CHARCATEGORIES_separatorSpace_SHIFT)

   @property
   def separatorLine(self): return ((((self.impl)) & lib.CHARCATEGORIES_separatorLine_MASK) >> lib.CHARCATEGORIES_separatorLine_SHIFT)
   @separatorLine.setter
   def separatorLine(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_separatorLine_MASK)) | (((value)) << lib.CHARCATEGORIES_separatorLine_SHIFT)

   @property
   def separatorParagraph(self): return ((((self.impl)) & lib.CHARCATEGORIES_separatorParagraph_MASK) >> lib.CHARCATEGORIES_separatorParagraph_SHIFT)
   @separatorParagraph.setter
   def separatorParagraph(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_separatorParagraph_MASK)) | (((value)) << lib.CHARCATEGORIES_separatorParagraph_SHIFT)

   @property
   def otherControl(self): return ((((self.impl)) & lib.CHARCATEGORIES_otherControl_MASK) >> lib.CHARCATEGORIES_otherControl_SHIFT)
   @otherControl.setter
   def otherControl(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_otherControl_MASK)) | (((value)) << lib.CHARCATEGORIES_otherControl_SHIFT)

   @property
   def otherFormat(self): return ((((self.impl)) & lib.CHARCATEGORIES_otherFormat_MASK) >> lib.CHARCATEGORIES_otherFormat_SHIFT)
   @otherFormat.setter
   def otherFormat(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_otherFormat_MASK)) | (((value)) << lib.CHARCATEGORIES_otherFormat_SHIFT)

   @property
   def otherSurrogate(self): return ((((self.impl)) & lib.CHARCATEGORIES_otherSurrogate_MASK) >> lib.CHARCATEGORIES_otherSurrogate_SHIFT)
   @otherSurrogate.setter
   def otherSurrogate(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_otherSurrogate_MASK)) | (((value)) << lib.CHARCATEGORIES_otherSurrogate_SHIFT)

   @property
   def otherPrivateUse(self): return ((((self.impl)) & lib.CHARCATEGORIES_otherPrivateUse_MASK) >> lib.CHARCATEGORIES_otherPrivateUse_SHIFT)
   @otherPrivateUse.setter
   def otherPrivateUse(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_otherPrivateUse_MASK)) | (((value)) << lib.CHARCATEGORIES_otherPrivateUse_SHIFT)

   @property
   def otherNotAssigned(self): return ((((self.impl)) & lib.CHARCATEGORIES_otherNotAssigned_MASK) >> lib.CHARCATEGORIES_otherNotAssigned_SHIFT)
   @otherNotAssigned.setter
   def otherNotAssigned(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_otherNotAssigned_MASK)) | (((value)) << lib.CHARCATEGORIES_otherNotAssigned_SHIFT)

   @property
   def letterUpperCase(self): return ((((self.impl)) & lib.CHARCATEGORIES_letterUpperCase_MASK) >> lib.CHARCATEGORIES_letterUpperCase_SHIFT)
   @letterUpperCase.setter
   def letterUpperCase(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_letterUpperCase_MASK)) | (((value)) << lib.CHARCATEGORIES_letterUpperCase_SHIFT)

   @property
   def letterLowerCase(self): return ((((self.impl)) & lib.CHARCATEGORIES_letterLowerCase_MASK) >> lib.CHARCATEGORIES_letterLowerCase_SHIFT)
   @letterLowerCase.setter
   def letterLowerCase(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_letterLowerCase_MASK)) | (((value)) << lib.CHARCATEGORIES_letterLowerCase_SHIFT)

   @property
   def letterTitleCase(self): return ((((self.impl)) & lib.CHARCATEGORIES_letterTitleCase_MASK) >> lib.CHARCATEGORIES_letterTitleCase_SHIFT)
   @letterTitleCase.setter
   def letterTitleCase(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_letterTitleCase_MASK)) | (((value)) << lib.CHARCATEGORIES_letterTitleCase_SHIFT)

   @property
   def letterModifier(self): return ((((self.impl)) & lib.CHARCATEGORIES_letterModifier_MASK) >> lib.CHARCATEGORIES_letterModifier_SHIFT)
   @letterModifier.setter
   def letterModifier(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_letterModifier_MASK)) | (((value)) << lib.CHARCATEGORIES_letterModifier_SHIFT)

   @property
   def letterOther(self): return ((((self.impl)) & lib.CHARCATEGORIES_letterOther_MASK) >> lib.CHARCATEGORIES_letterOther_SHIFT)
   @letterOther.setter
   def letterOther(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_letterOther_MASK)) | (((value)) << lib.CHARCATEGORIES_letterOther_SHIFT)

   @property
   def punctuationConnector(self): return ((((self.impl)) & lib.CHARCATEGORIES_punctuationConnector_MASK) >> lib.CHARCATEGORIES_punctuationConnector_SHIFT)
   @punctuationConnector.setter
   def punctuationConnector(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_punctuationConnector_MASK)) | (((value)) << lib.CHARCATEGORIES_punctuationConnector_SHIFT)

   @property
   def punctuationDash(self): return ((((self.impl)) & lib.CHARCATEGORIES_punctuationDash_MASK) >> lib.CHARCATEGORIES_punctuationDash_SHIFT)
   @punctuationDash.setter
   def punctuationDash(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_punctuationDash_MASK)) | (((value)) << lib.CHARCATEGORIES_punctuationDash_SHIFT)

   @property
   def punctuationOpen(self): return ((((self.impl)) & lib.CHARCATEGORIES_punctuationOpen_MASK) >> lib.CHARCATEGORIES_punctuationOpen_SHIFT)
   @punctuationOpen.setter
   def punctuationOpen(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_punctuationOpen_MASK)) | (((value)) << lib.CHARCATEGORIES_punctuationOpen_SHIFT)

   @property
   def punctuationClose(self): return ((((self.impl)) & lib.CHARCATEGORIES_punctuationClose_MASK) >> lib.CHARCATEGORIES_punctuationClose_SHIFT)
   @punctuationClose.setter
   def punctuationClose(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_punctuationClose_MASK)) | (((value)) << lib.CHARCATEGORIES_punctuationClose_SHIFT)

   @property
   def punctuationInitial(self): return ((((self.impl)) & lib.CHARCATEGORIES_punctuationInitial_MASK) >> lib.CHARCATEGORIES_punctuationInitial_SHIFT)
   @punctuationInitial.setter
   def punctuationInitial(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_punctuationInitial_MASK)) | (((value)) << lib.CHARCATEGORIES_punctuationInitial_SHIFT)

   @property
   def punctuationFinal(self): return ((((self.impl)) & lib.CHARCATEGORIES_punctuationFinal_MASK) >> lib.CHARCATEGORIES_punctuationFinal_SHIFT)
   @punctuationFinal.setter
   def punctuationFinal(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_punctuationFinal_MASK)) | (((value)) << lib.CHARCATEGORIES_punctuationFinal_SHIFT)

   @property
   def punctuationOther(self): return ((((self.impl)) & lib.CHARCATEGORIES_punctuationOther_MASK) >> lib.CHARCATEGORIES_punctuationOther_SHIFT)
   @punctuationOther.setter
   def punctuationOther(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_punctuationOther_MASK)) | (((value)) << lib.CHARCATEGORIES_punctuationOther_SHIFT)

   @property
   def symbolMath(self): return ((((self.impl)) & lib.CHARCATEGORIES_symbolMath_MASK) >> lib.CHARCATEGORIES_symbolMath_SHIFT)
   @symbolMath.setter
   def symbolMath(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_symbolMath_MASK)) | (((value)) << lib.CHARCATEGORIES_symbolMath_SHIFT)

   @property
   def symbolCurrency(self): return ((((self.impl)) & lib.CHARCATEGORIES_symbolCurrency_MASK) >> lib.CHARCATEGORIES_symbolCurrency_SHIFT)
   @symbolCurrency.setter
   def symbolCurrency(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_symbolCurrency_MASK)) | (((value)) << lib.CHARCATEGORIES_symbolCurrency_SHIFT)

   @property
   def symbolModifier(self): return ((((self.impl)) & lib.CHARCATEGORIES_symbolModifier_MASK) >> lib.CHARCATEGORIES_symbolModifier_SHIFT)
   @symbolModifier.setter
   def symbolModifier(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_symbolModifier_MASK)) | (((value)) << lib.CHARCATEGORIES_symbolModifier_SHIFT)

   @property
   def symbolOther(self): return ((((self.impl)) & lib.CHARCATEGORIES_symbolOther_MASK) >> lib.CHARCATEGORIES_symbolOther_SHIFT)
   @symbolOther.setter
   def symbolOther(self, value): self.value = ((self.impl) & ~(lib.CHARCATEGORIES_symbolOther_MASK)) | (((value)) << lib.CHARCATEGORIES_symbolOther_SHIFT)

@ffi.callback("void(Window, Button, int, int, Modifiers)")
def cb_Button_notifyClicked(__w, button, x, y, mods):
   button = pyOrNewObject(Button, button)
   button.fn_Button_notifyClicked(pyOrNewObject(Button, __w), button, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, Button, int, int, Modifiers)")
def cb_Button_notifyDoubleClick(__w, button, x, y, mods):
   button = pyOrNewObject(Button, button)
   button.fn_Button_notifyDoubleClick(pyOrNewObject(Button, __w), button, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, Button, Modifiers)")
def cb_Button_notifyMouseLeave(__w, button, mods):
   button = pyOrNewObject(Button, button)
   button.fn_Button_notifyMouseLeave(pyOrNewObject(Button, __w), button, Modifiers(impl = mods))

@ffi.callback("void(Window, Button, int, int, Modifiers)")
def cb_Button_notifyMouseMove(__w, button, x, y, mods):
   button = pyOrNewObject(Button, button)
   button.fn_Button_notifyMouseMove(pyOrNewObject(Button, __w), button, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, Button, int, int, Modifiers)")
def cb_Button_notifyMouseOver(__w, button, x, y, mods):
   button = pyOrNewObject(Button, button)
   button.fn_Button_notifyMouseOver(pyOrNewObject(Button, __w), button, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, Button, int, int, Modifiers)")
def cb_Button_notifyPushed(__w, button, x, y, mods):
   button = pyOrNewObject(Button, button)
   button.fn_Button_notifyPushed(pyOrNewObject(Button, __w), button, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, Button, int, int, Modifiers)")
def cb_Button_notifyReleased(__w, button, x, y, mods):
   button = pyOrNewObject(Button, button)
   button.fn_Button_notifyReleased(pyOrNewObject(Button, __w), button, x, y, Modifiers(impl = mods))

class Button(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                isRadio = None,
                isCheckbox = None,
                bevel = None,
                bevelOver = None,
                toggle = None,
                checked = None,
                alignment = None,
                bitmap = None,
                stayUp = None,
                scaleBitmap = None,
                keyRepeat = None,
                symbol = None,
                ellipsis = None,
                stayDown = None,
                offset = None,
                buttonState = None,
                bitmapAlignment = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyClicked = None,
                notifyDoubleClick = None,
                notifyMouseLeave = None,
                notifyMouseMove = None,
                notifyMouseOver = None,
                notifyPushed = None,
                notifyReleased = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if isRadio is not None:                  self.isRadio = isRadio
      if isCheckbox is not None:               self.isCheckbox = isCheckbox
      if bevel is not None:                    self.bevel = bevel
      if bevelOver is not None:                self.bevelOver = bevelOver
      if toggle is not None:                   self.toggle = toggle
      if checked is not None:                  self.checked = checked
      if alignment is not None:                self.alignment = alignment
      if bitmap is not None:                   self.bitmap = bitmap
      if stayUp is not None:                   self.stayUp = stayUp
      if scaleBitmap is not None:              self.scaleBitmap = scaleBitmap
      if keyRepeat is not None:                self.keyRepeat = keyRepeat
      if symbol is not None:                   self.symbol = symbol
      if ellipsis is not None:                 self.ellipsis = ellipsis
      if stayDown is not None:                 self.stayDown = stayDown
      if offset is not None:                   self.offset = offset
      if buttonState is not None:              self.buttonState = buttonState
      if bitmapAlignment is not None:          self.bitmapAlignment = bitmapAlignment
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyClicked is not None:            self.notifyClicked = notifyClicked
      if notifyDoubleClick is not None:        self.notifyDoubleClick = notifyDoubleClick
      if notifyMouseLeave is not None:         self.notifyMouseLeave = notifyMouseLeave
      if notifyMouseMove is not None:          self.notifyMouseMove = notifyMouseMove
      if notifyMouseOver is not None:          self.notifyMouseOver = notifyMouseOver
      if notifyPushed is not None:             self.notifyPushed = notifyPushed
      if notifyReleased is not None:           self.notifyReleased = notifyReleased

   @property
   def isRadio(self): return lib.Button_get_isRadio(self.impl)
   @isRadio.setter
   def isRadio(self, value):
      lib.Button_set_isRadio(self.impl, value)

   @property
   def isCheckbox(self): return lib.Button_get_isCheckbox(self.impl)
   @isCheckbox.setter
   def isCheckbox(self, value):
      lib.Button_set_isCheckbox(self.impl, value)

   @property
   def bevel(self): return lib.Button_get_bevel(self.impl)
   @bevel.setter
   def bevel(self, value):
      lib.Button_set_bevel(self.impl, value)

   @property
   def bevelOver(self): return lib.Button_get_bevelOver(self.impl)
   @bevelOver.setter
   def bevelOver(self, value):
      lib.Button_set_bevelOver(self.impl, value)

   @property
   def toggle(self): return lib.Button_get_toggle(self.impl)
   @toggle.setter
   def toggle(self, value):
      lib.Button_set_toggle(self.impl, value)

   @property
   def checked(self): return lib.Button_get_checked(self.impl)
   @checked.setter
   def checked(self, value):
      lib.Button_set_checked(self.impl, value)

   @property
   def alignment(self): return lib.Button_get_alignment(self.impl, value)
   @alignment.setter
   def alignment(self, value):
      lib.Button_set_alignment(self.impl, value)

   @property
   def bitmap(self): return pyOrNewObject(BitmapResource, lib.Button_get_bitmap(self.impl))
   @bitmap.setter
   def bitmap(self, value):
      if not isinstance(value, BitmapResource): value = BitmapResource(value)
      lib.Button_set_bitmap(self.impl, value.impl)

   @property
   def stayUp(self): return lib.Button_get_stayUp(self.impl)
   @stayUp.setter
   def stayUp(self, value):
      lib.Button_set_stayUp(self.impl, value)

   @property
   def scaleBitmap(self): return lib.Button_get_scaleBitmap(self.impl)
   @scaleBitmap.setter
   def scaleBitmap(self, value):
      lib.Button_set_scaleBitmap(self.impl, value)

   @property
   def keyRepeat(self): return lib.Button_get_keyRepeat(self.impl)
   @keyRepeat.setter
   def keyRepeat(self, value):
      lib.Button_set_keyRepeat(self.impl, value)

   @property
   def symbol(self): return unichar(lib.Button_get_symbol(self.impl))
   @symbol.setter
   def symbol(self, value):
      if not isinstance(value, unichar): value = unichar(value)
      lib.Button_set_symbol(self.impl, value.impl)

   @property
   def ellipsis(self): return lib.Button_get_ellipsis(self.impl)
   @ellipsis.setter
   def ellipsis(self, value):
      lib.Button_set_ellipsis(self.impl, value)

   @property
   def stayDown(self): return lib.Button_get_stayDown(self.impl)
   @stayDown.setter
   def stayDown(self, value):
      lib.Button_set_stayDown(self.impl, value)

   @property
   def offset(self): return lib.Button_get_offset(self.impl)
   @offset.setter
   def offset(self, value):
      lib.Button_set_offset(self.impl, value)

   @property
   def buttonState(self): return lib.Button_get_buttonState(self.impl, value)
   @buttonState.setter
   def buttonState(self, value):
      lib.Button_set_buttonState(self.impl, value)

   @property
   def bitmapAlignment(self): return lib.Button_get_bitmapAlignment(self.impl, value)
   @bitmapAlignment.setter
   def bitmapAlignment(self, value):
      lib.Button_set_bitmapAlignment(self.impl, value)

   def fn_unset_Button_notifyClicked(self, _window, button, x, y, mods):
      return lib.Button_notifyClicked(self.impl, _window.impl, ffi.NULL if button is None else button.impl, x, y, mods)

   @property
   def notifyClicked(self):
      if hasattr(self, 'fn_Button_notifyClicked'): return self.fn_Button_notifyClicked
      else: return self.fn_unset_Button_notifyClicked
   @notifyClicked.setter
   def notifyClicked(self, value):
      self.fn_Button_notifyClicked = value
      lib.Instance_setMethod(self.impl, "NotifyClicked".encode('utf8'), cb_Button_notifyClicked)

   def fn_unset_Button_notifyDoubleClick(self, _window, button, x, y, mods):
      return lib.Button_notifyDoubleClick(self.impl, _window.impl, ffi.NULL if button is None else button.impl, x, y, mods)

   @property
   def notifyDoubleClick(self):
      if hasattr(self, 'fn_Button_notifyDoubleClick'): return self.fn_Button_notifyDoubleClick
      else: return self.fn_unset_Button_notifyDoubleClick
   @notifyDoubleClick.setter
   def notifyDoubleClick(self, value):
      self.fn_Button_notifyDoubleClick = value
      lib.Instance_setMethod(self.impl, "NotifyDoubleClick".encode('utf8'), cb_Button_notifyDoubleClick)

   def fn_unset_Button_notifyMouseLeave(self, _window, button, mods):
      return lib.Button_notifyMouseLeave(self.impl, _window.impl, ffi.NULL if button is None else button.impl, mods)

   @property
   def notifyMouseLeave(self):
      if hasattr(self, 'fn_Button_notifyMouseLeave'): return self.fn_Button_notifyMouseLeave
      else: return self.fn_unset_Button_notifyMouseLeave
   @notifyMouseLeave.setter
   def notifyMouseLeave(self, value):
      self.fn_Button_notifyMouseLeave = value
      lib.Instance_setMethod(self.impl, "NotifyMouseLeave".encode('utf8'), cb_Button_notifyMouseLeave)

   def fn_unset_Button_notifyMouseMove(self, _window, button, x, y, mods):
      return lib.Button_notifyMouseMove(self.impl, _window.impl, ffi.NULL if button is None else button.impl, x, y, mods)

   @property
   def notifyMouseMove(self):
      if hasattr(self, 'fn_Button_notifyMouseMove'): return self.fn_Button_notifyMouseMove
      else: return self.fn_unset_Button_notifyMouseMove
   @notifyMouseMove.setter
   def notifyMouseMove(self, value):
      self.fn_Button_notifyMouseMove = value
      lib.Instance_setMethod(self.impl, "NotifyMouseMove".encode('utf8'), cb_Button_notifyMouseMove)

   def fn_unset_Button_notifyMouseOver(self, _window, button, x, y, mods):
      return lib.Button_notifyMouseOver(self.impl, _window.impl, ffi.NULL if button is None else button.impl, x, y, mods)

   @property
   def notifyMouseOver(self):
      if hasattr(self, 'fn_Button_notifyMouseOver'): return self.fn_Button_notifyMouseOver
      else: return self.fn_unset_Button_notifyMouseOver
   @notifyMouseOver.setter
   def notifyMouseOver(self, value):
      self.fn_Button_notifyMouseOver = value
      lib.Instance_setMethod(self.impl, "NotifyMouseOver".encode('utf8'), cb_Button_notifyMouseOver)

   def fn_unset_Button_notifyPushed(self, _window, button, x, y, mods):
      return lib.Button_notifyPushed(self.impl, _window.impl, ffi.NULL if button is None else button.impl, x, y, mods)

   @property
   def notifyPushed(self):
      if hasattr(self, 'fn_Button_notifyPushed'): return self.fn_Button_notifyPushed
      else: return self.fn_unset_Button_notifyPushed
   @notifyPushed.setter
   def notifyPushed(self, value):
      self.fn_Button_notifyPushed = value
      lib.Instance_setMethod(self.impl, "NotifyPushed".encode('utf8'), cb_Button_notifyPushed)

   def fn_unset_Button_notifyReleased(self, _window, button, x, y, mods):
      return lib.Button_notifyReleased(self.impl, _window.impl, ffi.NULL if button is None else button.impl, x, y, mods)

   @property
   def notifyReleased(self):
      if hasattr(self, 'fn_Button_notifyReleased'): return self.fn_Button_notifyReleased
      else: return self.fn_unset_Button_notifyReleased
   @notifyReleased.setter
   def notifyReleased(self, value):
      self.fn_Button_notifyReleased = value
      lib.Instance_setMethod(self.impl, "NotifyReleased".encode('utf8'), cb_Button_notifyReleased)

   def removeRadio(self):
      lib.Button_removeRadio(self.impl)

   def setColor(self, state, value):
      if value is not None and not isinstance(value, Color): value = Color(value)
      if value is None: value = ffi.NULL
      lib.Button_setColor(self.impl, state, value)

   def setTextColor(self, state, value):
      if value is not None and not isinstance(value, Color): value = Color(value)
      if value is None: value = ffi.NULL
      lib.Button_setTextColor(self.impl, state, value)

AnyFileChange = FileChange ( True, True, True, True, True )

Pi = Radians ( 3.1415926535897932384626433832795028841971 )

@ffi.callback("void(Archive)")
def cb_Archive_clear(__a):
   archive = pyOrNewObject(Archive, __a)
   archive.fn_Archive_clear(archive)

@ffi.callback("void(Archive, const char *)")
def cb_Archive_fileExists(__a, fileName):
   archive = pyOrNewObject(Archive, __a)
   archive.fn_Archive_fileExists(archive, fileName.encode('utf8'))

@ffi.callback("void(Archive, const char *)")
def cb_Archive_fileOpen(__a, fileName):
   archive = pyOrNewObject(Archive, __a)
   archive.fn_Archive_fileOpen(archive, fileName.encode('utf8'))

@ffi.callback("void(Archive, uint)")
def cb_Archive_fileOpenAtPosition(__a, position):
   archive = pyOrNewObject(Archive, __a)
   archive.fn_Archive_fileOpenAtPosition(archive, position)

@ffi.callback("void(Archive, const char *, FileStats *, ArchiveAddMode)")
def cb_Archive_openDirectory(__a, name, stats, addMode):
   archive = pyOrNewObject(Archive, __a)
   archive.fn_Archive_openDirectory(archive, name.encode('utf8'), FileStats(impl = stats), ArchiveAddMode(impl = addMode))

@ffi.callback("void(Archive, uint)")
def cb_Archive_setBufferRead(__a, bufferRead):
   archive = pyOrNewObject(Archive, __a)
   archive.fn_Archive_setBufferRead(archive, bufferRead)

@ffi.callback("void(Archive, uint)")
def cb_Archive_setBufferSize(__a, bufferSize):
   archive = pyOrNewObject(Archive, __a)
   archive.fn_Archive_setBufferSize(archive, bufferSize)

class Archive(Instance):
   def __init__(self,
                totalSize = None,
                bufferSize = None,
                bufferRead = None,
                clear = None,
                fileExists = None,
                fileOpen = None,
                fileOpenAtPosition = None,
                openDirectory = None,
                setBufferRead = None,
                setBufferSize = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if totalSize is not None:          self.totalSize = totalSize
      if bufferSize is not None:         self.bufferSize = bufferSize
      if bufferRead is not None:         self.bufferRead = bufferRead
      if clear is not None:              self.clear = clear
      if fileExists is not None:         self.fileExists = fileExists
      if fileOpen is not None:           self.fileOpen = fileOpen
      if fileOpenAtPosition is not None: self.fileOpenAtPosition = fileOpenAtPosition
      if openDirectory is not None:      self.openDirectory = openDirectory
      if setBufferRead is not None:      self.setBufferRead = setBufferRead
      if setBufferSize is not None:      self.setBufferSize = setBufferSize

   @property
   def totalSize(self): return FileSize(lib.Archive_get_totalSize(self.impl))
   @totalSize.setter
   def totalSize(self, value):
      if not isinstance(value, FileSize): value = FileSize(value)
      lib.Archive_set_totalSize(self.impl, value.impl)

   @property
   def bufferSize(self): return None
   @bufferSize.setter
   def bufferSize(self, value):
      lib.Archive_set_bufferSize(self.impl, value)

   @property
   def bufferRead(self): return None
   @bufferRead.setter
   def bufferRead(self, value):
      lib.Archive_set_bufferRead(self.impl, value)

   def fn_unset_Archive_clear(self):
      return lib.Archive_clear(self.impl)

   @property
   def clear(self):
      if hasattr(self, 'fn_Archive_clear'): return self.fn_Archive_clear
      else: return self.fn_unset_Archive_clear
   @clear.setter
   def clear(self, value):
      self.fn_Archive_clear = value
      lib.Instance_setMethod(self.impl, "Clear".encode('utf8'), cb_Archive_clear)

   def fn_unset_Archive_fileExists(self, fileName):
      return lib.Archive_fileExists(self.impl, fileName)

   @property
   def fileExists(self):
      if hasattr(self, 'fn_Archive_fileExists'): return self.fn_Archive_fileExists
      else: return self.fn_unset_Archive_fileExists
   @fileExists.setter
   def fileExists(self, value):
      self.fn_Archive_fileExists = value
      lib.Instance_setMethod(self.impl, "FileExists".encode('utf8'), cb_Archive_fileExists)

   def fn_unset_Archive_fileOpen(self, fileName):
      return lib.Archive_fileOpen(self.impl, fileName)

   @property
   def fileOpen(self):
      if hasattr(self, 'fn_Archive_fileOpen'): return self.fn_Archive_fileOpen
      else: return self.fn_unset_Archive_fileOpen
   @fileOpen.setter
   def fileOpen(self, value):
      self.fn_Archive_fileOpen = value
      lib.Instance_setMethod(self.impl, "FileOpen".encode('utf8'), cb_Archive_fileOpen)

   def fn_unset_Archive_fileOpenAtPosition(self, position):
      return lib.Archive_fileOpenAtPosition(self.impl, position)

   @property
   def fileOpenAtPosition(self):
      if hasattr(self, 'fn_Archive_fileOpenAtPosition'): return self.fn_Archive_fileOpenAtPosition
      else: return self.fn_unset_Archive_fileOpenAtPosition
   @fileOpenAtPosition.setter
   def fileOpenAtPosition(self, value):
      self.fn_Archive_fileOpenAtPosition = value
      lib.Instance_setMethod(self.impl, "FileOpenAtPosition".encode('utf8'), cb_Archive_fileOpenAtPosition)

   def fn_unset_Archive_openDirectory(self, name, stats, addMode):
      return lib.Archive_openDirectory(self.impl, name, ffi.NULL if stats is None else stats.impl, addMode)

   @property
   def openDirectory(self):
      if hasattr(self, 'fn_Archive_openDirectory'): return self.fn_Archive_openDirectory
      else: return self.fn_unset_Archive_openDirectory
   @openDirectory.setter
   def openDirectory(self, value):
      self.fn_Archive_openDirectory = value
      lib.Instance_setMethod(self.impl, "OpenDirectory".encode('utf8'), cb_Archive_openDirectory)

   def fn_unset_Archive_setBufferRead(self, bufferRead):
      return lib.Archive_setBufferRead(self.impl, bufferRead)

   @property
   def setBufferRead(self):
      if hasattr(self, 'fn_Archive_setBufferRead'): return self.fn_Archive_setBufferRead
      else: return self.fn_unset_Archive_setBufferRead
   @setBufferRead.setter
   def setBufferRead(self, value):
      self.fn_Archive_setBufferRead = value
      lib.Instance_setMethod(self.impl, "SetBufferRead".encode('utf8'), cb_Archive_setBufferRead)

   def fn_unset_Archive_setBufferSize(self, bufferSize):
      return lib.Archive_setBufferSize(self.impl, bufferSize)

   @property
   def setBufferSize(self):
      if hasattr(self, 'fn_Archive_setBufferSize'): return self.fn_Archive_setBufferSize
      else: return self.fn_unset_Archive_setBufferSize
   @setBufferSize.setter
   def setBufferSize(self, value):
      self.fn_Archive_setBufferSize = value
      lib.Instance_setMethod(self.impl, "SetBufferSize".encode('utf8'), cb_Archive_setBufferSize)

class ArchiveAddMode:
   replace     = lib.ArchiveAddMode_replace
   refresh     = lib.ArchiveAddMode_refresh
   update      = lib.ArchiveAddMode_update
   readOnlyDir = lib.ArchiveAddMode_readOnlyDir

@ffi.callback("void(ArchiveDir, const char *, File, FileStats *, ArchiveAddMode, int, int *, uint *)")
def cb_ArchiveDir_addFromFile(__a, name, input, stats, addMode, compression, ratio, newPosition):
   archivedir = pyOrNewObject(ArchiveDir, __a)
   archivedir.fn_ArchiveDir_addFromFile(archivedir, name.encode('utf8'), pyOrNewObject(File, input), FileStats(impl = stats), ArchiveAddMode(impl = addMode), compression, ratio, newPosition)

@ffi.callback("void(ArchiveDir, uint, const char *, File, FileStats *, ArchiveAddMode, int, int *, uint *)")
def cb_ArchiveDir_addFromFileAtPosition(__a, position, name, input, stats, addMode, compression, ratio, newPosition):
   archivedir = pyOrNewObject(ArchiveDir, __a)
   archivedir.fn_ArchiveDir_addFromFileAtPosition(archivedir, position, name.encode('utf8'), pyOrNewObject(File, input), FileStats(impl = stats), ArchiveAddMode(impl = addMode), compression, ratio, newPosition)

@ffi.callback("void(ArchiveDir, const char *)")
def cb_ArchiveDir_delete(__a, fileName):
   archivedir = pyOrNewObject(ArchiveDir, __a)
   archivedir.fn_ArchiveDir_delete(archivedir, fileName.encode('utf8'))

@ffi.callback("void(ArchiveDir, const char *)")
def cb_ArchiveDir_fileExists(__a, fileName):
   archivedir = pyOrNewObject(ArchiveDir, __a)
   archivedir.fn_ArchiveDir_fileExists(archivedir, fileName.encode('utf8'))

@ffi.callback("void(ArchiveDir, const char *)")
def cb_ArchiveDir_fileOpen(__a, fileName):
   archivedir = pyOrNewObject(ArchiveDir, __a)
   archivedir.fn_ArchiveDir_fileOpen(archivedir, fileName.encode('utf8'))

@ffi.callback("void(ArchiveDir, const char *, ArchiveDir)")
def cb_ArchiveDir_move(__a, name, to):
   archivedir = pyOrNewObject(ArchiveDir, __a)
   archivedir.fn_ArchiveDir_move(archivedir, name.encode('utf8'), pyOrNewObject(ArchiveDir, to))

@ffi.callback("void(ArchiveDir, const char *, FileStats *, ArchiveAddMode)")
def cb_ArchiveDir_openDirectory(__a, name, stats, addMode):
   archivedir = pyOrNewObject(ArchiveDir, __a)
   archivedir.fn_ArchiveDir_openDirectory(archivedir, name.encode('utf8'), FileStats(impl = stats), ArchiveAddMode(impl = addMode))

@ffi.callback("void(ArchiveDir, const char *, const char *)")
def cb_ArchiveDir_rename(__a, name, newName):
   archivedir = pyOrNewObject(ArchiveDir, __a)
   archivedir.fn_ArchiveDir_rename(archivedir, name.encode('utf8'), newName.encode('utf8'))

class ArchiveDir(Instance):
   def __init__(self,
                addFromFile = None,
                addFromFileAtPosition = None,
                delete = None,
                fileExists = None,
                fileOpen = None,
                move = None,
                openDirectory = None,
                rename = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if addFromFile is not None:           self.addFromFile = addFromFile
      if addFromFileAtPosition is not None: self.addFromFileAtPosition = addFromFileAtPosition
      if delete is not None:                self.delete = delete
      if fileExists is not None:            self.fileExists = fileExists
      if fileOpen is not None:              self.fileOpen = fileOpen
      if move is not None:                  self.move = move
      if openDirectory is not None:         self.openDirectory = openDirectory
      if rename is not None:                self.rename = rename

   def add(self, name, path, addMode, compression):
      ratio = ffi.new("int *")
      newPosition = ffi.new("uint *")
      lib.ArchiveDir_add(self.impl, name.encode('utf8'), path.encode('utf8'), addMode, compression, ratio, newPosition)
      return ratio[0], newPosition[0]

   def fn_unset_ArchiveDir_addFromFile(self, name, input, stats, addMode, compression, ratio, newPosition):
      if ratio is None: ratio = ffi.NULL
      if newPosition is None: newPosition = ffi.NULL
      return lib.ArchiveDir_addFromFile(self.impl, name, ffi.NULL if input is None else input.impl, ffi.NULL if stats is None else stats.impl, addMode, compression, ratio, newPosition)

   @property
   def addFromFile(self):
      if hasattr(self, 'fn_ArchiveDir_addFromFile'): return self.fn_ArchiveDir_addFromFile
      else: return self.fn_unset_ArchiveDir_addFromFile
   @addFromFile.setter
   def addFromFile(self, value):
      self.fn_ArchiveDir_addFromFile = value
      lib.Instance_setMethod(self.impl, "AddFromFile".encode('utf8'), cb_ArchiveDir_addFromFile)

   def fn_unset_ArchiveDir_addFromFileAtPosition(self, position, name, input, stats, addMode, compression, ratio, newPosition):
      if ratio is None: ratio = ffi.NULL
      if newPosition is None: newPosition = ffi.NULL
      return lib.ArchiveDir_addFromFileAtPosition(self.impl, position, name, ffi.NULL if input is None else input.impl, ffi.NULL if stats is None else stats.impl, addMode, compression, ratio, newPosition)

   @property
   def addFromFileAtPosition(self):
      if hasattr(self, 'fn_ArchiveDir_addFromFileAtPosition'): return self.fn_ArchiveDir_addFromFileAtPosition
      else: return self.fn_unset_ArchiveDir_addFromFileAtPosition
   @addFromFileAtPosition.setter
   def addFromFileAtPosition(self, value):
      self.fn_ArchiveDir_addFromFileAtPosition = value
      lib.Instance_setMethod(self.impl, "AddFromFileAtPosition".encode('utf8'), cb_ArchiveDir_addFromFileAtPosition)

   def fn_unset_ArchiveDir_delete(self, fileName):
      return lib.ArchiveDir_delete(self.impl, fileName)

   @property
   def delete(self):
      if hasattr(self, 'fn_ArchiveDir_delete'): return self.fn_ArchiveDir_delete
      else: return self.fn_unset_ArchiveDir_delete
   @delete.setter
   def delete(self, value):
      self.fn_ArchiveDir_delete = value
      lib.Instance_setMethod(self.impl, "Delete".encode('utf8'), cb_ArchiveDir_delete)

   def fn_unset_ArchiveDir_fileExists(self, fileName):
      return lib.ArchiveDir_fileExists(self.impl, fileName)

   @property
   def fileExists(self):
      if hasattr(self, 'fn_ArchiveDir_fileExists'): return self.fn_ArchiveDir_fileExists
      else: return self.fn_unset_ArchiveDir_fileExists
   @fileExists.setter
   def fileExists(self, value):
      self.fn_ArchiveDir_fileExists = value
      lib.Instance_setMethod(self.impl, "FileExists".encode('utf8'), cb_ArchiveDir_fileExists)

   def fn_unset_ArchiveDir_fileOpen(self, fileName):
      return lib.ArchiveDir_fileOpen(self.impl, fileName)

   @property
   def fileOpen(self):
      if hasattr(self, 'fn_ArchiveDir_fileOpen'): return self.fn_ArchiveDir_fileOpen
      else: return self.fn_unset_ArchiveDir_fileOpen
   @fileOpen.setter
   def fileOpen(self, value):
      self.fn_ArchiveDir_fileOpen = value
      lib.Instance_setMethod(self.impl, "FileOpen".encode('utf8'), cb_ArchiveDir_fileOpen)

   def fn_unset_ArchiveDir_move(self, name, to):
      return lib.ArchiveDir_move(self.impl, name, ffi.NULL if to is None else to.impl)

   @property
   def move(self):
      if hasattr(self, 'fn_ArchiveDir_move'): return self.fn_ArchiveDir_move
      else: return self.fn_unset_ArchiveDir_move
   @move.setter
   def move(self, value):
      self.fn_ArchiveDir_move = value
      lib.Instance_setMethod(self.impl, "Move".encode('utf8'), cb_ArchiveDir_move)

   def fn_unset_ArchiveDir_openDirectory(self, name, stats, addMode):
      return lib.ArchiveDir_openDirectory(self.impl, name, ffi.NULL if stats is None else stats.impl, addMode)

   @property
   def openDirectory(self):
      if hasattr(self, 'fn_ArchiveDir_openDirectory'): return self.fn_ArchiveDir_openDirectory
      else: return self.fn_unset_ArchiveDir_openDirectory
   @openDirectory.setter
   def openDirectory(self, value):
      self.fn_ArchiveDir_openDirectory = value
      lib.Instance_setMethod(self.impl, "OpenDirectory".encode('utf8'), cb_ArchiveDir_openDirectory)

   def fn_unset_ArchiveDir_rename(self, name, newName):
      return lib.ArchiveDir_rename(self.impl, name, newName)

   @property
   def rename(self):
      if hasattr(self, 'fn_ArchiveDir_rename'): return self.fn_ArchiveDir_rename
      else: return self.fn_unset_ArchiveDir_rename
   @rename.setter
   def rename(self, value):
      self.fn_ArchiveDir_rename = value
      lib.Instance_setMethod(self.impl, "Rename".encode('utf8'), cb_ArchiveDir_rename)

class ArchiveOpenFlags(pyBaseClass):
   def __init__(self, writeAccess = False, buffered = False, exclusive = False, waitLock = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(writeAccess, ArchiveOpenFlags):
         self.impl = writeAccess.impl
      else:
         if isinstance(writeAccess, tuple):
            __tuple = writeAccess
            writeAccess = False
            if len(__tuple) > 0: writeAccess = __tuple[0]
            if len(__tuple) > 1: buffered = __tuple[1]
            if len(__tuple) > 2: exclusive = __tuple[2]
            if len(__tuple) > 3: waitLock = __tuple[3]
         self.impl = (
            (writeAccess << lib.ARCHIVEOPENFLAGS_writeAccess_SHIFT) |
            (buffered    << lib.ARCHIVEOPENFLAGS_buffered_SHIFT)    |
            (exclusive   << lib.ARCHIVEOPENFLAGS_exclusive_SHIFT)   |
            (waitLock    << lib.ARCHIVEOPENFLAGS_waitLock_SHIFT)    )

   @property
   def writeAccess(self): return ((((self.impl)) & lib.ARCHIVEOPENFLAGS_writeAccess_MASK) >> lib.ARCHIVEOPENFLAGS_writeAccess_SHIFT)
   @writeAccess.setter
   def writeAccess(self, value): self.value = ((self.impl) & ~(lib.ARCHIVEOPENFLAGS_writeAccess_MASK)) | (((value)) << lib.ARCHIVEOPENFLAGS_writeAccess_SHIFT)

   @property
   def buffered(self): return ((((self.impl)) & lib.ARCHIVEOPENFLAGS_buffered_MASK) >> lib.ARCHIVEOPENFLAGS_buffered_SHIFT)
   @buffered.setter
   def buffered(self, value): self.value = ((self.impl) & ~(lib.ARCHIVEOPENFLAGS_buffered_MASK)) | (((value)) << lib.ARCHIVEOPENFLAGS_buffered_SHIFT)

   @property
   def exclusive(self): return ((((self.impl)) & lib.ARCHIVEOPENFLAGS_exclusive_MASK) >> lib.ARCHIVEOPENFLAGS_exclusive_SHIFT)
   @exclusive.setter
   def exclusive(self, value): self.value = ((self.impl) & ~(lib.ARCHIVEOPENFLAGS_exclusive_MASK)) | (((value)) << lib.ARCHIVEOPENFLAGS_exclusive_SHIFT)

   @property
   def waitLock(self): return ((((self.impl)) & lib.ARCHIVEOPENFLAGS_waitLock_MASK) >> lib.ARCHIVEOPENFLAGS_waitLock_SHIFT)
   @waitLock.setter
   def waitLock(self, value): self.value = ((self.impl) & ~(lib.ARCHIVEOPENFLAGS_waitLock_MASK)) | (((value)) << lib.ARCHIVEOPENFLAGS_waitLock_SHIFT)

class Box:
   def __init__(self, left = 0, top = 0, right = 0, bottom = 0, width = None, height = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("Box *", impl)
      else:
         if isinstance(left, tuple):
            __tuple = left
            left = 0
            if len(__tuple) > 0: left   = __tuple[0]
            if len(__tuple) > 1: top    = __tuple[1]
            if len(__tuple) > 2: right  = __tuple[2]
            if len(__tuple) > 3: bottom = __tuple[3]
         self.impl = ffi.new("Box *", { 'left' : left, 'top' : top, 'right' : right, 'bottom' : bottom })
         if width is not None:  self.width       = width
         if height is not None: self.height      = height
         if width is not None:  self.width       = width
         if height is not None: self.height      = height
      if width is not None:  self.width       = width
      if height is not None: self.height      = height

   @property
   def left(self): return self.impl.left
   @left.setter
   def left(self, value): self.impl.left = value

   @property
   def top(self): return self.impl.top
   @top.setter
   def top(self, value): self.impl.top = value

   @property
   def right(self): return self.impl.right
   @right.setter
   def right(self, value): self.impl.right = value

   @property
   def bottom(self): return self.impl.bottom
   @bottom.setter
   def bottom(self, value): self.impl.bottom = value

   @property
   def width(self): return lib.Box_get_width(self.impl)
   @width.setter
   def width(self, value):
      lib.Box_set_width(self.impl, value)

   @property
   def height(self): return lib.Box_get_height(self.impl)
   @height.setter
   def height(self, value):
      lib.Box_set_height(self.impl, value)

   def clip(self, against):
      if against is not None and not isinstance(against, Box): against = Box(against)
      against = ffi.NULL if against is None else against.impl
      lib.Box_clip(ffi.cast("Box *", self.impl), ffi.cast("Box *", against))

   def clipOffset(self, against, x, y):
      if against is not None and not isinstance(against, Box): against = Box(against)
      against = ffi.NULL if against is None else against.impl
      lib.Box_clipOffset(ffi.cast("Box *", self.impl), ffi.cast("Box *", against), x, y)

   def isPointInside(self, point):
      if point is not None and not isinstance(point, Point): point = Point(point)
      point = ffi.NULL if point is None else point.impl
      lib.Box_isPointInside(ffi.cast("Box *", self.impl), ffi.cast("Point *", point))

   def overlap(self, box):
      if box is not None and not isinstance(box, Box): box = Box(box)
      box = ffi.NULL if box is None else box.impl
      lib.Box_overlap(ffi.cast("Box *", self.impl), ffi.cast("Box *", box))

class BufferedFile(File):
   def __init__(self,
                input = None,
                output = None,
                buffered = None,
                handle = None,
                bufferSize = None,
                bufferRead = None,
                readData = None,
                writeData = None,
                close = None,
                closeInput = None,
                closeOutput = None,
                eof = None,
                getSize = None,
                getc = None,
                lock = None,
                putc = None,
                puts = None,
                read = None,
                seek = None,
                seek64 = None,
                tell = None,
                truncate = None,
                unlock = None,
                write = None,
                impl = None):
      File.__init__(self, impl = impl)
      if input is not None:       self.input = input
      if output is not None:      self.output = output
      if buffered is not None:    self.buffered = buffered
      if handle is not None:      self.handle = handle
      if bufferSize is not None:  self.bufferSize = bufferSize
      if bufferRead is not None:  self.bufferRead = bufferRead
      if readData is not None:    self.readData = readData
      if writeData is not None:   self.writeData = writeData
      if close is not None:       self.close = close
      if closeInput is not None:  self.closeInput = closeInput
      if closeOutput is not None: self.closeOutput = closeOutput
      if eof is not None:         self.eof = eof
      if getSize is not None:     self.getSize = getSize
      if getc is not None:        self.getc = getc
      if lock is not None:        self.lock = lock
      if putc is not None:        self.putc = putc
      if puts is not None:        self.puts = puts
      if read is not None:        self.read = read
      if seek is not None:        self.seek = seek
      if seek64 is not None:      self.seek64 = seek64
      if tell is not None:        self.tell = tell
      if truncate is not None:    self.truncate = truncate
      if unlock is not None:      self.unlock = unlock
      if write is not None:       self.write = write

   @property
   def handle(self): return pyOrNewObject(File, lib.BufferedFile_get_handle(self.impl))
   @handle.setter
   def handle(self, value):
      if not isinstance(value, File): value = File(value)
      lib.BufferedFile_set_handle(self.impl, value.impl)

   @property
   def bufferSize(self): return lib.BufferedFile_get_bufferSize(self.impl)
   @bufferSize.setter
   def bufferSize(self, value):
      lib.BufferedFile_set_bufferSize(self.impl, value)

   @property
   def bufferRead(self): return lib.BufferedFile_get_bufferRead(self.impl)
   @bufferRead.setter
   def bufferRead(self, value):
      lib.BufferedFile_set_bufferRead(self.impl, value)

class Centimeters(Distance):
   def __init__(self, value = 0, impl = None):
      if impl is not None: self.impl = impl
      elif isinstance(value, Distance): self.impl = value.impl
      else: self.value = value

   # conv Distance <-> Meters
   @property
   def value(self): return self.impl * 100
   @value.setter
   def value(self, value): self.impl = value * 0.01

Centimeters.buc = Distance

class CharCategory:
   none                 = lib.CharCategory_none
   Mn                   = lib.CharCategory_Mn
   markNonSpacing       = lib.CharCategory_markNonSpacing
   Mc                   = lib.CharCategory_Mc
   markSpacing          = lib.CharCategory_markSpacing
   Me                   = lib.CharCategory_Me
   markEnclosing        = lib.CharCategory_markEnclosing
   Nd                   = lib.CharCategory_Nd
   numberDecimalDigit   = lib.CharCategory_numberDecimalDigit
   Nl                   = lib.CharCategory_Nl
   numberLetter         = lib.CharCategory_numberLetter
   No                   = lib.CharCategory_No
   numberOther          = lib.CharCategory_numberOther
   Zs                   = lib.CharCategory_Zs
   separatorSpace       = lib.CharCategory_separatorSpace
   Zl                   = lib.CharCategory_Zl
   separatorLine        = lib.CharCategory_separatorLine
   Zp                   = lib.CharCategory_Zp
   separatorParagraph   = lib.CharCategory_separatorParagraph
   Cc                   = lib.CharCategory_Cc
   otherControl         = lib.CharCategory_otherControl
   Cf                   = lib.CharCategory_Cf
   otherFormat          = lib.CharCategory_otherFormat
   Cs                   = lib.CharCategory_Cs
   otherSurrogate       = lib.CharCategory_otherSurrogate
   Co                   = lib.CharCategory_Co
   otherPrivateUse      = lib.CharCategory_otherPrivateUse
   Cn                   = lib.CharCategory_Cn
   otherNotAssigned     = lib.CharCategory_otherNotAssigned
   Lu                   = lib.CharCategory_Lu
   letterUpperCase      = lib.CharCategory_letterUpperCase
   Ll                   = lib.CharCategory_Ll
   letterLowerCase      = lib.CharCategory_letterLowerCase
   Lt                   = lib.CharCategory_Lt
   letterTitleCase      = lib.CharCategory_letterTitleCase
   Lm                   = lib.CharCategory_Lm
   letterModifier       = lib.CharCategory_letterModifier
   Lo                   = lib.CharCategory_Lo
   letterOther          = lib.CharCategory_letterOther
   Pc                   = lib.CharCategory_Pc
   punctuationConnector = lib.CharCategory_punctuationConnector
   Pd                   = lib.CharCategory_Pd
   punctuationDash      = lib.CharCategory_punctuationDash
   Ps                   = lib.CharCategory_Ps
   punctuationOpen      = lib.CharCategory_punctuationOpen
   Pe                   = lib.CharCategory_Pe
   punctuationClose     = lib.CharCategory_punctuationClose
   Pi                   = lib.CharCategory_Pi
   punctuationInitial   = lib.CharCategory_punctuationInitial
   Pf                   = lib.CharCategory_Pf
   punctuationFinal     = lib.CharCategory_punctuationFinal
   Po                   = lib.CharCategory_Po
   punctuationOther     = lib.CharCategory_punctuationOther
   Sm                   = lib.CharCategory_Sm
   symbolMath           = lib.CharCategory_symbolMath
   Sc                   = lib.CharCategory_Sc
   symbolCurrency       = lib.CharCategory_symbolCurrency
   Sk                   = lib.CharCategory_Sk
   symbolModifier       = lib.CharCategory_symbolModifier
   So                   = lib.CharCategory_So
   symbolOther          = lib.CharCategory_symbolOther

class Condition:
   def __init__(self, name = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("Condition *", lib.Instance_new(lib.class_Condition))
         if name is not None: self.name      = name
         if name is not None: self.name = name

   @property
   def name(self): value = lib.Condition_get_name(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @name.setter
   def name(self, value):
      lib.Condition_set_name(self.impl, value.encode('utf8'))

   def signal(self):
      lib.Condition_signal(self.impl)

   def wait(self, mutex):
      if mutex is not None and not isinstance(mutex, Mutex): mutex = Mutex(mutex)
      if mutex is None: mutex = ffi.NULL
      lib.Condition_wait(self.impl, mutex)

class ConsoleFile(File):
   def __init__(self,
                input = None,
                output = None,
                buffered = None,
                readData = None,
                writeData = None,
                close = None,
                closeInput = None,
                closeOutput = None,
                eof = None,
                getSize = None,
                getc = None,
                lock = None,
                putc = None,
                puts = None,
                read = None,
                seek = None,
                seek64 = None,
                tell = None,
                truncate = None,
                unlock = None,
                write = None,
                impl = None):
      File.__init__(self, impl = impl)
      if input is not None:       self.input = input
      if output is not None:      self.output = output
      if buffered is not None:    self.buffered = buffered
      if readData is not None:    self.readData = readData
      if writeData is not None:   self.writeData = writeData
      if close is not None:       self.close = close
      if closeInput is not None:  self.closeInput = closeInput
      if closeOutput is not None: self.closeOutput = closeOutput
      if eof is not None:         self.eof = eof
      if getSize is not None:     self.getSize = getSize
      if getc is not None:        self.getc = getc
      if lock is not None:        self.lock = lock
      if putc is not None:        self.putc = putc
      if puts is not None:        self.puts = puts
      if read is not None:        self.read = read
      if seek is not None:        self.seek = seek
      if seek64 is not None:      self.seek64 = seek64
      if tell is not None:        self.tell = tell
      if truncate is not None:    self.truncate = truncate
      if unlock is not None:      self.unlock = unlock
      if write is not None:       self.write = write

class Date:
   def __init__(self, year = 0, month = None, day = 0, impl = None):
      if impl is not None:
         self.impl = ffi.new("Date *", impl)
      else:
         if isinstance(year, tuple):
            __tuple = year
            year = 0
            if len(__tuple) > 0: year  = __tuple[0]
            if len(__tuple) > 1: month = __tuple[1]
            if len(__tuple) > 2: day   = __tuple[2]
         self.impl = ffi.new("Date *", { 'year' : year, 'month' : month, 'day' : day })

   @property
   def year(self): return self.impl.year
   @year.setter
   def year(self, value): self.impl.year = value

   @property
   def month(self): return self.impl.month
   @month.setter
   def month(self, value): self.impl.month = value

   @property
   def day(self): return self.impl.day
   @day.setter
   def day(self, value): self.impl.day = value

   @property
   def dayOfTheWeek(self): return lib.Date_get_dayOfTheWeek(self.impl, value)

   def onGetStringEn(self, stringOutput, fieldData):
      needClass = ffi.new("Bool *")
      lib.Date_onGetStringEn(ffi.cast("Date *", self.impl), stringOutput.encode('utf8'), fieldData, needClass)
      return bool(impl = needClass)


class DateTime:
   def __init__(self, year = 0, month = None, day = 0, hour = 0, minute = 0, second = 0, dayOfTheWeek = None, dayInTheYear = 0, _global = None, local = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("DateTime *", impl)
      else:
         if isinstance(year, SecSince1970):
            self.impl = ffi.new("DateTime *")
            lib.DateTime_from_SecSince1970(self.impl, year.impl)
            return
         elif isinstance(year, Date):
            self.impl = ffi.new("DateTime *")
            lib.DateTime_from_Date(self.impl, year.impl)
            return
         self.impl = ffi.new("DateTime *", { 'year' : year, 'month' : month, 'day' : day, 'hour' : hour, 'minute' : minute, 'second' : second, 'dayOfTheWeek' : dayOfTheWeek, 'dayInTheYear' : dayInTheYear })
         if _global is not None:      self._global           = _global
         if local is not None:        self.local             = local
         if _global is not None:      self._global           = _global
         if local is not None:        self.local             = local
      if not isinstance(_global, DateTime): _global = DateTime(_global)
      if _global is not None:      self._global           = _global.impl
      if not isinstance(local, DateTime): local = DateTime(local)
      if local is not None:        self.local             = local.impl

   @property
   def year(self): return self.impl.year
   @year.setter
   def year(self, value): self.impl.year = value

   @property
   def month(self): return self.impl.month
   @month.setter
   def month(self, value): self.impl.month = value

   @property
   def day(self): return self.impl.day
   @day.setter
   def day(self, value): self.impl.day = value

   @property
   def hour(self): return self.impl.hour
   @hour.setter
   def hour(self, value): self.impl.hour = value

   @property
   def minute(self): return self.impl.minute
   @minute.setter
   def minute(self, value): self.impl.minute = value

   @property
   def second(self): return self.impl.second
   @second.setter
   def second(self, value): self.impl.second = value

   @property
   def dayOfTheWeek(self): return self.impl.dayOfTheWeek
   @dayOfTheWeek.setter
   def dayOfTheWeek(self, value): self.impl.dayOfTheWeek = value

   @property
   def dayInTheYear(self): return self.impl.dayInTheYear
   @dayInTheYear.setter
   def dayInTheYear(self, value): self.impl.dayInTheYear = value

   @property
   def _global(self): value = DateTime(); lib.DateTime_get_global(self.impl, ffi.cast("DateTime *", value.impl)); return value
   @_global.setter
   def _global(self, value):
      if not isinstance(value, DateTime): value = DateTime(value)
      lib.DateTime_set_global(self.impl, ffi.cast("DateTime *", value.impl))

   @property
   def local(self): value = DateTime(); lib.DateTime_get_local(self.impl, ffi.cast("DateTime *", value.impl)); return value
   @local.setter
   def local(self, value):
      if not isinstance(value, DateTime): value = DateTime(value)
      lib.DateTime_set_local(self.impl, ffi.cast("DateTime *", value.impl))

   @property
   def daysSince1970(self): return lib.DateTime_get_daysSince1970(self.impl)

   # here is a conversion
   # DateTime_to_SecSince1970
   # DateTime_from_SecSince1970

   # here is a conversion
   # DateTime_to_Date
   # DateTime_from_Date

   def fixDayOfYear(self):
      lib.DateTime_fixDayOfYear(ffi.cast("DateTime *", self.impl))

   def getLocalTime(self):
      lib.DateTime_getLocalTime(ffi.cast("DateTime *", self.impl))

class DayOfTheWeek:
   sunday    = lib.DayOfTheWeek_sunday
   monday    = lib.DayOfTheWeek_monday
   tuesday   = lib.DayOfTheWeek_tuesday
   wednesday = lib.DayOfTheWeek_wednesday
   thursday  = lib.DayOfTheWeek_thursday
   friday    = lib.DayOfTheWeek_friday
   saturday  = lib.DayOfTheWeek_saturday

class Degrees(Angle):
   def __init__(self, value = 0, impl = None):
      if impl is not None: self.impl = impl
      elif isinstance(value, Angle): self.impl = value.impl
      else: self.value = value

   # conv Angle <-> Radians
   @property
   def value(self): return self.impl * 57.2957795130823
   @value.setter
   def value(self, value): self.impl = value * 0.0174532925199433

Degrees.buc = Angle

class DualPipe(File):
   def __init__(self,
                input = None,
                output = None,
                buffered = None,
                readData = None,
                writeData = None,
                close = None,
                closeInput = None,
                closeOutput = None,
                eof = None,
                getSize = None,
                getc = None,
                lock = None,
                putc = None,
                puts = None,
                read = None,
                seek = None,
                seek64 = None,
                tell = None,
                truncate = None,
                unlock = None,
                write = None,
                impl = None):
      File.__init__(self, impl = impl)
      if input is not None:       self.input = input
      if output is not None:      self.output = output
      if buffered is not None:    self.buffered = buffered
      if readData is not None:    self.readData = readData
      if writeData is not None:   self.writeData = writeData
      if close is not None:       self.close = close
      if closeInput is not None:  self.closeInput = closeInput
      if closeOutput is not None: self.closeOutput = closeOutput
      if eof is not None:         self.eof = eof
      if getSize is not None:     self.getSize = getSize
      if getc is not None:        self.getc = getc
      if lock is not None:        self.lock = lock
      if putc is not None:        self.putc = putc
      if puts is not None:        self.puts = puts
      if read is not None:        self.read = read
      if seek is not None:        self.seek = seek
      if seek64 is not None:      self.seek64 = seek64
      if tell is not None:        self.tell = tell
      if truncate is not None:    self.truncate = truncate
      if unlock is not None:      self.unlock = unlock
      if write is not None:       self.write = write

   def getExitCode(self):
      return lib.DualPipe_getExitCode(self.impl)

   def getLinePeek(self, s, max):
      charsRead = ffi.new("int *")
      lib.DualPipe_getLinePeek(self.impl, s.encode('utf8'), max, charsRead)
      return FixTypeNameIssue(impl = charsRead)


   def getProcessID(self):
      return lib.DualPipe_getProcessID(self.impl)

   def peek(self):
      return lib.DualPipe_peek(self.impl)

   def terminate(self):
      lib.DualPipe_terminate(self.impl)

   def wait(self):
      lib.DualPipe_wait(self.impl)

class ECONGlobalSettings(GlobalSettingsDriver):
   def __init__(self,
                load = None,
                save = None,
                impl = None):
      GlobalSettingsDriver.__init__(self, impl = impl)
      if load is not None: self.load = load
      if save is not None: self.save = save

class ECONParser(JSONParser):
   def __init__(self,
                f = None,
                impl = None):
      JSONParser.__init__(self, impl = impl)
      if f is not None: self.f = f

   @property
   def f(self): return File(impl = IPTR(lib, ffi, self, ECONParser).f)
   @f.setter
   def f(self, value):
      if not isinstance(value, File): value = File(value)
      IPTR(lib, ffi, self, ECONParser).f = value.impl

class ErrorLevel:
   veryFatal = lib.ErrorLevel_veryFatal
   fatal     = lib.ErrorLevel_fatal
   major     = lib.ErrorLevel_major
   minor     = lib.ErrorLevel_minor

class Feet(Distance):
   def __init__(self, value = 0, impl = None):
      if impl is not None: self.impl = impl
      elif isinstance(value, Distance): self.impl = value.impl
      else: self.value = value

   # conv Distance <-> Meters
   @property
   def value(self): return self.impl * 3.28083985446533
   @value.setter
   def value(self, value): self.impl = value * 0.304800003767014

Feet.buc = Distance

class FileAttribs(Bool):
   def __init__(self, isFile = False, isArchive = False, isHidden = False, isReadOnly = False, isSystem = False, isTemporary = False, isDirectory = False, isDrive = False, isCDROM = False, isRemote = False, isRemovable = False, isServer = False, isShare = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(isFile, FileAttribs):
         self.impl = isFile.impl
      else:
         self.impl = (
            (isFile      << lib.FILEATTRIBS_isFile_SHIFT)      |
            (isArchive   << lib.FILEATTRIBS_isArchive_SHIFT)   |
            (isHidden    << lib.FILEATTRIBS_isHidden_SHIFT)    |
            (isReadOnly  << lib.FILEATTRIBS_isReadOnly_SHIFT)  |
            (isSystem    << lib.FILEATTRIBS_isSystem_SHIFT)    |
            (isTemporary << lib.FILEATTRIBS_isTemporary_SHIFT) |
            (isDirectory << lib.FILEATTRIBS_isDirectory_SHIFT) |
            (isDrive     << lib.FILEATTRIBS_isDrive_SHIFT)     |
            (isCDROM     << lib.FILEATTRIBS_isCDROM_SHIFT)     |
            (isRemote    << lib.FILEATTRIBS_isRemote_SHIFT)    |
            (isRemovable << lib.FILEATTRIBS_isRemovable_SHIFT) |
            (isServer    << lib.FILEATTRIBS_isServer_SHIFT)    |
            (isShare     << lib.FILEATTRIBS_isShare_SHIFT)     )

   @property
   def isFile(self): return ((((self.impl)) & lib.FILEATTRIBS_isFile_MASK) >> lib.FILEATTRIBS_isFile_SHIFT)
   @isFile.setter
   def isFile(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isFile_MASK)) | (((value)) << lib.FILEATTRIBS_isFile_SHIFT)

   @property
   def isArchive(self): return ((((self.impl)) & lib.FILEATTRIBS_isArchive_MASK) >> lib.FILEATTRIBS_isArchive_SHIFT)
   @isArchive.setter
   def isArchive(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isArchive_MASK)) | (((value)) << lib.FILEATTRIBS_isArchive_SHIFT)

   @property
   def isHidden(self): return ((((self.impl)) & lib.FILEATTRIBS_isHidden_MASK) >> lib.FILEATTRIBS_isHidden_SHIFT)
   @isHidden.setter
   def isHidden(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isHidden_MASK)) | (((value)) << lib.FILEATTRIBS_isHidden_SHIFT)

   @property
   def isReadOnly(self): return ((((self.impl)) & lib.FILEATTRIBS_isReadOnly_MASK) >> lib.FILEATTRIBS_isReadOnly_SHIFT)
   @isReadOnly.setter
   def isReadOnly(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isReadOnly_MASK)) | (((value)) << lib.FILEATTRIBS_isReadOnly_SHIFT)

   @property
   def isSystem(self): return ((((self.impl)) & lib.FILEATTRIBS_isSystem_MASK) >> lib.FILEATTRIBS_isSystem_SHIFT)
   @isSystem.setter
   def isSystem(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isSystem_MASK)) | (((value)) << lib.FILEATTRIBS_isSystem_SHIFT)

   @property
   def isTemporary(self): return ((((self.impl)) & lib.FILEATTRIBS_isTemporary_MASK) >> lib.FILEATTRIBS_isTemporary_SHIFT)
   @isTemporary.setter
   def isTemporary(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isTemporary_MASK)) | (((value)) << lib.FILEATTRIBS_isTemporary_SHIFT)

   @property
   def isDirectory(self): return ((((self.impl)) & lib.FILEATTRIBS_isDirectory_MASK) >> lib.FILEATTRIBS_isDirectory_SHIFT)
   @isDirectory.setter
   def isDirectory(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isDirectory_MASK)) | (((value)) << lib.FILEATTRIBS_isDirectory_SHIFT)

   @property
   def isDrive(self): return ((((self.impl)) & lib.FILEATTRIBS_isDrive_MASK) >> lib.FILEATTRIBS_isDrive_SHIFT)
   @isDrive.setter
   def isDrive(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isDrive_MASK)) | (((value)) << lib.FILEATTRIBS_isDrive_SHIFT)

   @property
   def isCDROM(self): return ((((self.impl)) & lib.FILEATTRIBS_isCDROM_MASK) >> lib.FILEATTRIBS_isCDROM_SHIFT)
   @isCDROM.setter
   def isCDROM(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isCDROM_MASK)) | (((value)) << lib.FILEATTRIBS_isCDROM_SHIFT)

   @property
   def isRemote(self): return ((((self.impl)) & lib.FILEATTRIBS_isRemote_MASK) >> lib.FILEATTRIBS_isRemote_SHIFT)
   @isRemote.setter
   def isRemote(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isRemote_MASK)) | (((value)) << lib.FILEATTRIBS_isRemote_SHIFT)

   @property
   def isRemovable(self): return ((((self.impl)) & lib.FILEATTRIBS_isRemovable_MASK) >> lib.FILEATTRIBS_isRemovable_SHIFT)
   @isRemovable.setter
   def isRemovable(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isRemovable_MASK)) | (((value)) << lib.FILEATTRIBS_isRemovable_SHIFT)

   @property
   def isServer(self): return ((((self.impl)) & lib.FILEATTRIBS_isServer_MASK) >> lib.FILEATTRIBS_isServer_SHIFT)
   @isServer.setter
   def isServer(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isServer_MASK)) | (((value)) << lib.FILEATTRIBS_isServer_SHIFT)

   @property
   def isShare(self): return ((((self.impl)) & lib.FILEATTRIBS_isShare_MASK) >> lib.FILEATTRIBS_isShare_SHIFT)
   @isShare.setter
   def isShare(self, value): self.value = ((self.impl) & ~(lib.FILEATTRIBS_isShare_MASK)) | (((value)) << lib.FILEATTRIBS_isShare_SHIFT)

class FileListing:
   def __init__(self, directory = None, extensions = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("FileListing *", impl)
      else:
         if isinstance(directory, tuple):
            __tuple = directory
            directory = None
            if len(__tuple) > 0: directory  = __tuple[0]
            if len(__tuple) > 1: extensions = __tuple[1]
         self.impl = ffi.new("FileListing *", { 'directory' : directory, 'extensions' : extensions })

   @property
   def directory(self): return self.impl.directory
   @directory.setter
   def directory(self, value): self.impl.directory = value

   @property
   def extensions(self): return self.impl.extensions
   @extensions.setter
   def extensions(self, value): self.impl.extensions = value

   @property
   def name(self): value = lib.FileListing_get_name(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')

   @property
   def path(self): value = lib.FileListing_get_path(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')

   @property
   def stats(self): value = FileStats(); lib.FileListing_get_stats(self.impl, ffi.cast("FileStats *", value.impl)); return value

   def find(self):
      lib.FileListing_find(ffi.cast("FileListing *", self.impl))

   def stop(self):
      lib.FileListing_stop(ffi.cast("FileListing *", self.impl))

class FileLock:
   unlocked  = lib.FileLock_unlocked
   shared    = lib.FileLock_shared
   exclusive = lib.FileLock_exclusive

@ffi.callback("void(FileMonitor, FileChange, const char *, const char *)")
def cb_FileMonitor_onDirNotify(__f, action, fileName, param):
   filemonitor = pyOrNewObject(FileMonitor, __f)
   filemonitor.fn_FileMonitor_onDirNotify(filemonitor.userData, action, fileName.encode('utf8'), param.encode('utf8'))

@ffi.callback("void(FileMonitor, FileChange, const char *)")
def cb_FileMonitor_onFileNotify(__f, action, param):
   filemonitor = pyOrNewObject(FileMonitor, __f)
   filemonitor.fn_FileMonitor_onFileNotify(filemonitor.userData, action, param.encode('utf8'))

class FileMonitor(Instance):
   def __init__(self,
                userData = None,
                fileChange = None,
                fileName = None,
                directoryName = None,
                onDirNotify = None,
                onFileNotify = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if self.impl != ffi.NULL: lib.FileMonitor_set_userData(self.impl, self.impl)
      if userData is not None:      self.userData = userData
      if fileChange is not None:    self.fileChange = fileChange
      if fileName is not None:      self.fileName = fileName
      if directoryName is not None: self.directoryName = directoryName
      if onDirNotify is not None:   self.onDirNotify = onDirNotify
      if onFileNotify is not None:  self.onFileNotify = onFileNotify

   userData = None

   @property
   def fileChange(self): return None
   @fileChange.setter
   def fileChange(self, value):
      if not isinstance(value, FileChange): value = FileChange(value)
      lib.FileMonitor_set_fileChange(self.impl, value.impl)

   @property
   def fileName(self): value = lib.FileMonitor_get_fileName(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @fileName.setter
   def fileName(self, value):
      lib.FileMonitor_set_fileName(self.impl, value.encode('utf8'))

   @property
   def directoryName(self): value = lib.FileMonitor_get_directoryName(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @directoryName.setter
   def directoryName(self, value):
      lib.FileMonitor_set_directoryName(self.impl, value.encode('utf8'))

   def fn_unset_FileMonitor_onDirNotify(self, _instance, action, fileName, param):
      return lib.FileMonitor_onDirNotify(self.impl, _instance.impl, action, fileName, param)

   @property
   def onDirNotify(self):
      if hasattr(self, 'fn_FileMonitor_onDirNotify'): return self.fn_FileMonitor_onDirNotify
      else: return self.fn_unset_FileMonitor_onDirNotify
   @onDirNotify.setter
   def onDirNotify(self, value):
      self.fn_FileMonitor_onDirNotify = value
      lib.Instance_setMethod(self.impl, "OnDirNotify".encode('utf8'), cb_FileMonitor_onDirNotify)

   def fn_unset_FileMonitor_onFileNotify(self, _instance, action, param):
      return lib.FileMonitor_onFileNotify(self.impl, _instance.impl, action, param)

   @property
   def onFileNotify(self):
      if hasattr(self, 'fn_FileMonitor_onFileNotify'): return self.fn_FileMonitor_onFileNotify
      else: return self.fn_unset_FileMonitor_onFileNotify
   @onFileNotify.setter
   def onFileNotify(self, value):
      self.fn_FileMonitor_onFileNotify = value
      lib.Instance_setMethod(self.impl, "OnFileNotify".encode('utf8'), cb_FileMonitor_onFileNotify)

   def startMonitoring(self):
      lib.FileMonitor_startMonitoring(self.impl)

   def stopMonitoring(self):
      lib.FileMonitor_stopMonitoring(self.impl)

class FileOpenMode:
   read       = lib.FileOpenMode_read
   write      = lib.FileOpenMode_write
   append     = lib.FileOpenMode_append
   readWrite  = lib.FileOpenMode_readWrite
   writeRead  = lib.FileOpenMode_writeRead
   appendRead = lib.FileOpenMode_appendRead

class FileSeekMode:
   start   = lib.FileSeekMode_start
   current = lib.FileSeekMode_current
   end     = lib.FileSeekMode_end

class FileSize(pyBaseClass):
   def __init__(self, impl = 0):
      self.impl = impl

FileSize.buc = FileSize

class FileSize64(pyBaseClass):
   def __init__(self, impl = 0):
      self.impl = impl

FileSize64.buc = FileSize64

class FileStats:
   def __init__(self, attribs = None, size = None, accessed = None, modified = None, created = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("FileStats *", impl)
      else:
         if isinstance(attribs, tuple):
            __tuple = attribs
            attribs = 0
            if len(__tuple) > 0: attribs  = __tuple[0]
            if len(__tuple) > 1: size     = __tuple[1]
            if len(__tuple) > 2: accessed = __tuple[2]
            if len(__tuple) > 3: modified = __tuple[3]
         if attribs is not None:
            if not isinstance(attribs, FileAttribs): attribs = FileAttribs(attribs)
            attribs = attribs.impl
         if size is not None:
            if not isinstance(size, FileSize): size = FileSize(size)
            size = size.impl
         if accessed is not None:
            if not isinstance(accessed, SecSince1970): accessed = SecSince1970(accessed)
            accessed = accessed.impl
         if modified is not None:
            if not isinstance(modified, SecSince1970): modified = SecSince1970(modified)
            modified = modified.impl
         if created is not None:
            if not isinstance(created, SecSince1970): created = SecSince1970(created)
            created = created.impl
         self.impl = ffi.new("FileStats *", { 'attribs' : attribs, 'size' : size, 'accessed' : accessed, 'modified' : modified, 'created' : created })

   @property
   def attribs(self): return FileAttribs(impl = self.impl.attribs)
   @attribs.setter
   def attribs(self, value):
      if not isinstance(value, FileAttribs): value = FileAttribs(value)
      self.impl.attribs = value.impl

   @property
   def size(self): return FileSize(impl = self.impl.size)
   @size.setter
   def size(self, value):
      if not isinstance(value, FileSize): value = FileSize(value)
      self.impl.size = value.impl

   @property
   def accessed(self): return SecSince1970(impl = self.impl.accessed)
   @accessed.setter
   def accessed(self, value):
      if not isinstance(value, SecSince1970): value = SecSince1970(value)
      self.impl.accessed = value.impl

   @property
   def modified(self): return SecSince1970(impl = self.impl.modified)
   @modified.setter
   def modified(self, value):
      if not isinstance(value, SecSince1970): value = SecSince1970(value)
      self.impl.modified = value.impl

   @property
   def created(self): return SecSince1970(impl = self.impl.created)
   @created.setter
   def created(self, value):
      if not isinstance(value, SecSince1970): value = SecSince1970(value)
      self.impl.created = value.impl

class GlobalAppSettings(GlobalSettings):
   def __init__(self,
                settingsName = None,
                settingsExtension = None,
                settingsDirectory = None,
                settingsLocation = None,
                settingsFilePath = None,
                allowDefaultLocations = None,
                allUsers = None,
                portable = None,
                driver = None,
                data = None,
                dataOwner = None,
                dataClass = None,
                load = None,
                onAskReloadSettings = None,
                save = None,
                impl = None):
      GlobalSettings.__init__(self, impl = impl)
      if settingsName is not None:          self.settingsName = settingsName
      if settingsExtension is not None:     self.settingsExtension = settingsExtension
      if settingsDirectory is not None:     self.settingsDirectory = settingsDirectory
      if settingsLocation is not None:      self.settingsLocation = settingsLocation
      if settingsFilePath is not None:      self.settingsFilePath = settingsFilePath
      if allowDefaultLocations is not None: self.allowDefaultLocations = allowDefaultLocations
      if allUsers is not None:              self.allUsers = allUsers
      if portable is not None:              self.portable = portable
      if driver is not None:                self.driver = driver
      if data is not None:                  self.data = data
      if dataOwner is not None:             self.dataOwner = dataOwner
      if dataClass is not None:             self.dataClass = dataClass
      if load is not None:                  self.load = load
      if onAskReloadSettings is not None:   self.onAskReloadSettings = onAskReloadSettings
      if save is not None:                  self.save = save

   @property
   def data(self): return GlobalSettingsData(impl = IPTR(lib, ffi, self, GlobalAppSettings).data)
   @data.setter
   def data(self, value):
      if not isinstance(value, GlobalSettingsData): value = GlobalSettingsData(value)
      IPTR(lib, ffi, self, GlobalAppSettings).data = value.impl

   @property
   def dataOwner(self): return IPTR(lib, ffi, self, GlobalAppSettings).dataOwner
   @dataOwner.setter
   def dataOwner(self, value): IPTR(lib, ffi, self, GlobalAppSettings).dataOwner = value

   @property
   def dataClass(self): return IPTR(lib, ffi, self, GlobalAppSettings).dataClass
   @dataClass.setter
   def dataClass(self, value): IPTR(lib, ffi, self, GlobalAppSettings).dataClass = value

   def getGlobalValue(self, section, name, type, value):
      return lib.GlobalAppSettings_getGlobalValue(self.impl, section.encode('utf8'), name.encode('utf8'), type, value)

   def putGlobalValue(self, section, name, type, value):
      return lib.GlobalAppSettings_putGlobalValue(self.impl, section.encode('utf8'), name.encode('utf8'), type, value)

class GlobalSettingType:
   integer      = lib.GlobalSettingType_integer
   singleString = lib.GlobalSettingType_singleString
   stringList   = lib.GlobalSettingType_stringList

class GlobalSettingsData(Instance):
   def __init__(self,
                impl = None):
      Instance.__init__(self, impl = impl)

class GuiErrorCode(ErrorCode):
   driverNotSupported    = ErrorCode(impl = lib.GuiErrorCode_driverNotSupported)
   windowCreationFailed  = ErrorCode(impl = lib.GuiErrorCode_windowCreationFailed)
   graphicsLoadingFailed = ErrorCode(impl = lib.GuiErrorCode_graphicsLoadingFailed)
   modeSwitchFailed      = ErrorCode(impl = lib.GuiErrorCode_modeSwitchFailed)

class JSONGlobalSettings(GlobalSettingsDriver):
   def __init__(self,
                load = None,
                save = None,
                impl = None):
      GlobalSettingsDriver.__init__(self, impl = impl)
      if load is not None: self.load = load
      if save is not None: self.save = save

class JSONResult:
   syntaxError  = lib.JSONResult_syntaxError
   success      = lib.JSONResult_success
   typeMismatch = lib.JSONResult_typeMismatch
   noItem       = lib.JSONResult_noItem

class LoggingMode:
   noLogging = lib.LoggingMode_noLogging
   stdOut    = lib.LoggingMode_stdOut
   stdErr    = lib.LoggingMode_stdErr
   debug     = lib.LoggingMode_debug
   logFile   = lib.LoggingMode_logFile
   msgBox    = lib.LoggingMode_msgBox
   buffer    = lib.LoggingMode_buffer

class Meters(Distance):
   def __init__(self, value = 0, impl = None):
      if impl is not None: self.impl = impl
      elif isinstance(value, Distance): self.impl = value.impl
      else: self.impl = value
   @property
   def value(self): return self.impl
   @value.setter
   def value(self, value): self.impl = value

Meters.buc = Distance

class MinMaxValue(pyBaseClass):
   def __init__(self, impl = 0):
      self.impl = impl

MinMaxValue.buc = MinMaxValue

class Month:
   january   = lib.Month_january
   february  = lib.Month_february
   march     = lib.Month_march
   april     = lib.Month_april
   may       = lib.Month_may
   june      = lib.Month_june
   july      = lib.Month_july
   august    = lib.Month_august
   september = lib.Month_september
   october   = lib.Month_october
   november  = lib.Month_november
   december  = lib.Month_december

   def getNumDays(self, year):
      return lib.Month_getNumDays(self.impl, year)

class MoveFileOptions(pyBaseClass):
   def __init__(self, overwrite = False, sync = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(overwrite, MoveFileOptions):
         self.impl = overwrite.impl
      else:
         if isinstance(overwrite, tuple):
            __tuple = overwrite
            overwrite = False
            if len(__tuple) > 0: overwrite = __tuple[0]
            if len(__tuple) > 1: sync = __tuple[1]
         self.impl = (
            (overwrite << lib.MOVEFILEOPTIONS_overwrite_SHIFT) |
            (sync      << lib.MOVEFILEOPTIONS_sync_SHIFT)      )

   @property
   def overwrite(self): return ((((self.impl)) & lib.MOVEFILEOPTIONS_overwrite_MASK) >> lib.MOVEFILEOPTIONS_overwrite_SHIFT)
   @overwrite.setter
   def overwrite(self, value): self.value = ((self.impl) & ~(lib.MOVEFILEOPTIONS_overwrite_MASK)) | (((value)) << lib.MOVEFILEOPTIONS_overwrite_SHIFT)

   @property
   def sync(self): return ((((self.impl)) & lib.MOVEFILEOPTIONS_sync_MASK) >> lib.MOVEFILEOPTIONS_sync_SHIFT)
   @sync.setter
   def sync(self, value): self.value = ((self.impl) & ~(lib.MOVEFILEOPTIONS_sync_MASK)) | (((value)) << lib.MOVEFILEOPTIONS_sync_SHIFT)

class PipeOpenMode(pyBaseClass):
   def __init__(self, output = False, error = False, input = False, showWindow = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(output, PipeOpenMode):
         self.impl = output.impl
      else:
         if isinstance(output, tuple):
            __tuple = output
            output = False
            if len(__tuple) > 0: output = __tuple[0]
            if len(__tuple) > 1: error = __tuple[1]
            if len(__tuple) > 2: input = __tuple[2]
            if len(__tuple) > 3: showWindow = __tuple[3]
         self.impl = (
            (output     << lib.PIPEOPENMODE_output_SHIFT)     |
            (error      << lib.PIPEOPENMODE_error_SHIFT)      |
            (input      << lib.PIPEOPENMODE_input_SHIFT)      |
            (showWindow << lib.PIPEOPENMODE_showWindow_SHIFT) )

   @property
   def output(self): return ((((self.impl)) & lib.PIPEOPENMODE_output_MASK) >> lib.PIPEOPENMODE_output_SHIFT)
   @output.setter
   def output(self, value): self.value = ((self.impl) & ~(lib.PIPEOPENMODE_output_MASK)) | (((value)) << lib.PIPEOPENMODE_output_SHIFT)

   @property
   def error(self): return ((((self.impl)) & lib.PIPEOPENMODE_error_MASK) >> lib.PIPEOPENMODE_error_SHIFT)
   @error.setter
   def error(self, value): self.value = ((self.impl) & ~(lib.PIPEOPENMODE_error_MASK)) | (((value)) << lib.PIPEOPENMODE_error_SHIFT)

   @property
   def input(self): return ((((self.impl)) & lib.PIPEOPENMODE_input_MASK) >> lib.PIPEOPENMODE_input_SHIFT)
   @input.setter
   def input(self, value): self.value = ((self.impl) & ~(lib.PIPEOPENMODE_input_MASK)) | (((value)) << lib.PIPEOPENMODE_input_SHIFT)

   @property
   def showWindow(self): return ((((self.impl)) & lib.PIPEOPENMODE_showWindow_MASK) >> lib.PIPEOPENMODE_showWindow_SHIFT)
   @showWindow.setter
   def showWindow(self, value): self.value = ((self.impl) & ~(lib.PIPEOPENMODE_showWindow_MASK)) | (((value)) << lib.PIPEOPENMODE_showWindow_SHIFT)

class Point:
   def __init__(self, x = 0, y = 0, impl = None):
      if impl is not None:
         self.impl = ffi.new("Point *", impl)
      else:
         if isinstance(x, tuple):
            __tuple = x
            x = 0
            if len(__tuple) > 0: x = __tuple[0]
            if len(__tuple) > 1: y = __tuple[1]
         self.impl = ffi.new("Point *", { 'x' : x, 'y' : y })

   @property
   def x(self): return self.impl.x
   @x.setter
   def x(self, value): self.impl.x = value

   @property
   def y(self): return self.impl.y
   @y.setter
   def y(self, value): self.impl.y = value

class Pointf:
   def __init__(self, x = 0.0, y = 0.0, impl = None):
      if impl is not None:
         self.impl = ffi.new("Pointf *", impl)
      else:
         if isinstance(x, tuple):
            __tuple = x
            x = 0.0
            if len(__tuple) > 0: x = __tuple[0]
            if len(__tuple) > 1: y = __tuple[1]
         self.impl = ffi.new("Pointf *", { 'x' : x, 'y' : y })

   @property
   def x(self): return self.impl.x
   @x.setter
   def x(self, value): self.impl.x = value

   @property
   def y(self): return self.impl.y
   @y.setter
   def y(self, value): self.impl.y = value

class PredefinedCharCategories(CharCategories):
   none        = CharCategories(impl = lib.PredefinedCharCategories_none)
   marks       = CharCategories(impl = lib.PredefinedCharCategories_marks)
   numbers     = CharCategories(impl = lib.PredefinedCharCategories_numbers)
   separators  = CharCategories(impl = lib.PredefinedCharCategories_separators)
   others      = CharCategories(impl = lib.PredefinedCharCategories_others)
   letters     = CharCategories(impl = lib.PredefinedCharCategories_letters)
   punctuation = CharCategories(impl = lib.PredefinedCharCategories_punctuation)
   symbols     = CharCategories(impl = lib.PredefinedCharCategories_symbols)
   connector   = CharCategories(impl = lib.PredefinedCharCategories_connector)

class RepButton(Button):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                isRadio = None,
                isCheckbox = None,
                bevel = None,
                bevelOver = None,
                toggle = None,
                checked = None,
                alignment = None,
                bitmap = None,
                stayUp = None,
                scaleBitmap = None,
                keyRepeat = None,
                symbol = None,
                ellipsis = None,
                stayDown = None,
                offset = None,
                buttonState = None,
                bitmapAlignment = None,
                pressing = None,
                delay = None,
                delay0 = None,
                timer = None,
                timer2 = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyClicked = None,
                notifyDoubleClick = None,
                notifyMouseLeave = None,
                notifyMouseMove = None,
                notifyMouseOver = None,
                notifyPushed = None,
                notifyReleased = None,
                impl = None):
      Button.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if isRadio is not None:                  self.isRadio = isRadio
      if isCheckbox is not None:               self.isCheckbox = isCheckbox
      if bevel is not None:                    self.bevel = bevel
      if bevelOver is not None:                self.bevelOver = bevelOver
      if toggle is not None:                   self.toggle = toggle
      if checked is not None:                  self.checked = checked
      if alignment is not None:                self.alignment = alignment
      if bitmap is not None:                   self.bitmap = bitmap
      if stayUp is not None:                   self.stayUp = stayUp
      if scaleBitmap is not None:              self.scaleBitmap = scaleBitmap
      if keyRepeat is not None:                self.keyRepeat = keyRepeat
      if symbol is not None:                   self.symbol = symbol
      if ellipsis is not None:                 self.ellipsis = ellipsis
      if stayDown is not None:                 self.stayDown = stayDown
      if offset is not None:                   self.offset = offset
      if buttonState is not None:              self.buttonState = buttonState
      if bitmapAlignment is not None:          self.bitmapAlignment = bitmapAlignment
      if pressing is not None:                 self.pressing = pressing
      if delay is not None:                    self.delay = delay
      if delay0 is not None:                   self.delay0 = delay0
      if timer is not None:                    self.timer = timer
      if timer2 is not None:                   self.timer2 = timer2
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyClicked is not None:            self.notifyClicked = notifyClicked
      if notifyDoubleClick is not None:        self.notifyDoubleClick = notifyDoubleClick
      if notifyMouseLeave is not None:         self.notifyMouseLeave = notifyMouseLeave
      if notifyMouseMove is not None:          self.notifyMouseMove = notifyMouseMove
      if notifyMouseOver is not None:          self.notifyMouseOver = notifyMouseOver
      if notifyPushed is not None:             self.notifyPushed = notifyPushed
      if notifyReleased is not None:           self.notifyReleased = notifyReleased

   @property
   def pressing(self): return IPTR(lib, ffi, self, RepButton).pressing
   @pressing.setter
   def pressing(self, value): IPTR(lib, ffi, self, RepButton).pressing = value

   @property
   def delay(self): return None
   @delay.setter
   def delay(self, value):
      if not isinstance(value, Time): value = Seconds(value)
      lib.RepButton_set_delay(self.impl, value.impl)

   @property
   def delay0(self): return None
   @delay0.setter
   def delay0(self, value):
      if not isinstance(value, Time): value = Seconds(value)
      lib.RepButton_set_delay0(self.impl, value.impl)

   @property
   def timer(self): return Timer(impl = IPTR(lib, ffi, self, RepButton).timer)
   @timer.setter
   def timer(self, value):
      if not isinstance(value, Timer): value = Timer(value)
      IPTR(lib, ffi, self, RepButton).timer = value.impl

   @property
   def timer2(self): return Timer(impl = IPTR(lib, ffi, self, RepButton).timer2)
   @timer2.setter
   def timer2(self, value):
      if not isinstance(value, Timer): value = Timer(value)
      IPTR(lib, ffi, self, RepButton).timer2 = value.impl

class Seconds(Time):
   def __init__(self, value = 0, impl = None):
      if impl is not None: self.impl = impl
      elif isinstance(value, Time): self.impl = value.impl
      else: self.impl = value
   @property
   def value(self): return self.impl
   @value.setter
   def value(self, value): self.impl = value

Seconds.buc = Time

class Semaphore:
   def __init__(self, initCount = None, maxCount = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("Semaphore *", lib.Instance_new(lib.class_Semaphore))
         if initCount is not None: self.initCount      = initCount
         if maxCount is not None:  self.maxCount       = maxCount
         if initCount is not None: self.initCount = initCount
         if maxCount is not None:  self.maxCount  = maxCount

   @property
   def initCount(self): return lib.Semaphore_get_initCount(self.impl)
   @initCount.setter
   def initCount(self, value):
      lib.Semaphore_set_initCount(self.impl, value)

   @property
   def maxCount(self): return lib.Semaphore_get_maxCount(self.impl)
   @maxCount.setter
   def maxCount(self, value):
      lib.Semaphore_set_maxCount(self.impl, value)

   def release(self):
      lib.Semaphore_release(self.impl)

   def tryWait(self):
      return lib.Semaphore_tryWait(self.impl)

   def wait(self):
      lib.Semaphore_wait(self.impl)

class SetBool:
   unset = lib.SetBool_unset
   false = lib.SetBool_false
   true  = lib.SetBool_true

class SettingsIOResult:
   error                       = lib.SettingsIOResult_error
   success                     = lib.SettingsIOResult_success
   fileNotFound                = lib.SettingsIOResult_fileNotFound
   fileNotCompatibleWithDriver = lib.SettingsIOResult_fileNotCompatibleWithDriver

class Size:
   def __init__(self, w = 0, h = 0, impl = None):
      if impl is not None:
         self.impl = ffi.new("Size *", impl)
      else:
         if isinstance(w, tuple):
            __tuple = w
            w = 0
            if len(__tuple) > 0: w = __tuple[0]
            if len(__tuple) > 1: h = __tuple[1]
         if w is not None:
            if not isinstance(w, MinMaxValue): w = MinMaxValue(w)
            w = w.impl
         if h is not None:
            if not isinstance(h, MinMaxValue): h = MinMaxValue(h)
            h = h.impl
         self.impl = ffi.new("Size *", { 'w' : w, 'h' : h })

   @property
   def w(self): return MinMaxValue(impl = self.impl.w)
   @w.setter
   def w(self, value):
      if not isinstance(value, MinMaxValue): value = MinMaxValue(value)
      self.impl.w = value.impl

   @property
   def h(self): return MinMaxValue(impl = self.impl.h)
   @h.setter
   def h(self, value):
      if not isinstance(value, MinMaxValue): value = MinMaxValue(value)
      self.impl.h = value.impl

class SysErrorCode(ErrorCode):
   allocationFailed = ErrorCode(impl = lib.SysErrorCode_allocationFailed)
   nameInexistant   = ErrorCode(impl = lib.SysErrorCode_nameInexistant)
   nameExists       = ErrorCode(impl = lib.SysErrorCode_nameExists)
   missingLibrary   = ErrorCode(impl = lib.SysErrorCode_missingLibrary)
   fileNotFound     = ErrorCode(impl = lib.SysErrorCode_fileNotFound)
   writeFailed      = ErrorCode(impl = lib.SysErrorCode_writeFailed)

class TempFile(File):
   def __init__(self,
                input = None,
                output = None,
                buffered = None,
                openMode = None,
                readData = None,
                writeData = None,
                close = None,
                closeInput = None,
                closeOutput = None,
                eof = None,
                getSize = None,
                getc = None,
                lock = None,
                putc = None,
                puts = None,
                read = None,
                seek = None,
                seek64 = None,
                tell = None,
                truncate = None,
                unlock = None,
                write = None,
                impl = None):
      File.__init__(self, impl = impl)
      if input is not None:       self.input = input
      if output is not None:      self.output = output
      if buffered is not None:    self.buffered = buffered
      if openMode is not None:    self.openMode = openMode
      if readData is not None:    self.readData = readData
      if writeData is not None:   self.writeData = writeData
      if close is not None:       self.close = close
      if closeInput is not None:  self.closeInput = closeInput
      if closeOutput is not None: self.closeOutput = closeOutput
      if eof is not None:         self.eof = eof
      if getSize is not None:     self.getSize = getSize
      if getc is not None:        self.getc = getc
      if lock is not None:        self.lock = lock
      if putc is not None:        self.putc = putc
      if puts is not None:        self.puts = puts
      if read is not None:        self.read = read
      if seek is not None:        self.seek = seek
      if seek64 is not None:      self.seek64 = seek64
      if tell is not None:        self.tell = tell
      if truncate is not None:    self.truncate = truncate
      if unlock is not None:      self.unlock = unlock
      if write is not None:       self.write = write

   @property
   def openMode(self): return lib.TempFile_get_openMode(self.impl, value)
   @openMode.setter
   def openMode(self, value):
      lib.TempFile_set_openMode(self.impl, value)

   @property
   def buffer(self): return lib.TempFile_get_buffer(self.impl)

@ffi.callback("void(Thread)")
def cb_Thread_main(__t):
   thread = pyOrNewObject(Thread, __t)
   thread.fn_Thread_main(thread)

class Thread(Instance):
   def __init__(self,
                main = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if main is not None: self.main = main

   @property
   def created(self): return lib.Thread_get_created(self.impl)

   def create(self):
      lib.Thread_create(self.impl)

   def kill(self):
      lib.Thread_kill(self.impl)

   def fn_unset_Thread_main(self):
      return lib.Thread_main(self.impl)

   @property
   def main(self):
      if hasattr(self, 'fn_Thread_main'): return self.fn_Thread_main
      else: return self.fn_unset_Thread_main
   @main.setter
   def main(self, value):
      self.fn_Thread_main = value
      lib.Instance_setMethod(self.impl, "Main".encode('utf8'), cb_Thread_main)

   def setPriority(self, priority):
      lib.Thread_setPriority(self.impl, priority)

   def wait(self):
      lib.Thread_wait(self.impl)

class ThreadPriority:
   normal       = lib.ThreadPriority_normal
   aboveNormal  = lib.ThreadPriority_aboveNormal
   belowNormal  = lib.ThreadPriority_belowNormal
   highest      = lib.ThreadPriority_highest
   lowest       = lib.ThreadPriority_lowest
   idle         = lib.ThreadPriority_idle
   timeCritical = lib.ThreadPriority_timeCritical

class TimeStamp(SecSince1970):
   def __init__(self, value = 0, impl = None):
      if impl is not None: self.impl = impl
      elif isinstance(value, SecSince1970): self.impl = value.impl
      else: self.impl = value
   @property
   def value(self): return self.impl
   @value.setter
   def value(self, value): self.impl = value

TimeStamp.buc = SecSince1970

class TimeStamp32(pyBaseClass):
   def __init__(self, impl = 0):
      self.impl = impl

TimeStamp32.buc = TimeStamp32
def archiveOpen(fileName, flags): lib.archiveOpen(fileName, flags)
def archiveQuerySize(fileName, size): lib.archiveQuerySize(fileName, size)
def changeWorkingDir(buf): lib.changeWorkingDir(buf)
def charMatchCategories(ch, categories): lib.charMatchCategories(ch, categories)
def copyBytes(dest, source, count): lib.copyBytes(dest, source, count)
def copyBytesBy2(dest, source, count): lib.copyBytesBy2(dest, source, count)
def copyBytesBy4(dest, source, count): lib.copyBytesBy4(dest, source, count)
def copySystemPath(p): lib.copySystemPath(p)
def copyUnixPath(p): lib.copyUnixPath(p)
def createTemporaryDir(tempFileName, template): lib.createTemporaryDir(tempFileName, template)
def createTemporaryFile(tempFileName, template): lib.createTemporaryFile(tempFileName, template)
def deleteFile(fileName): lib.deleteFile(fileName)
def dualPipeOpen(mode, commandLine): lib.dualPipeOpen(mode, commandLine)
def dualPipeOpenEnv(mode, env, commandLine): lib.dualPipeOpenEnv(mode, env, commandLine)
def dualPipeOpenEnvf(mode, env, command): lib.dualPipeOpenEnvf(mode, env, command)
def dualPipeOpenf(mode, command): lib.dualPipeOpenf(mode, command)
def dumpErrors(display): lib.dumpErrors(display)
def execute(command): lib.execute(command)
def executeEnv(env, command): lib.executeEnv(env, command)
def executeWait(command): lib.executeWait(command)
def fileExists(fileName): lib.fileExists(fileName)
def fileFixCase(file): lib.fileFixCase(file)
def fileGetSize(fileName, size): lib.fileGetSize(fileName, size)
def fileGetStats(fileName, stats): lib.fileGetStats(fileName, ffi.NULL if stats is None else stats.impl)
def fileOpen(fileName, mode): lib.fileOpen(fileName, mode)
def fileOpenBuffered(fileName, mode): lib.fileOpenBuffered(fileName, mode)
def fileSetAttribs(fileName, attribs): lib.fileSetAttribs(fileName, attribs)
def fileSetTime(fileName, created, accessed, modified): lib.fileSetTime(fileName, created, accessed, modified)
def fileTruncate(fileName, size): lib.fileTruncate(fileName, size)
def fillBytes(area, value, count): lib.fillBytes(area, value, count)
def fillBytesBy2(area, value, count): lib.fillBytesBy2(area, value, count)
def fillBytesBy4(area, value, count): lib.fillBytesBy4(area, value, count)
def getAlNum(input, string, max): lib.getAlNum(input, string, max)
def getCharCategory(ch): lib.getCharCategory(ch)
def getEnvironment(envName, envValue, max): lib.getEnvironment(envName, envValue, max)
def getFreeSpace(path, size): lib.getFreeSpace(path, size)
def getLastErrorCode(): lib.getLastErrorCode()
def getRandom(lo, hi): lib.getRandom(lo, hi)
def getSlashPathBuffer(d, p): lib.getSlashPathBuffer(d, p)
def getSystemPathBuffer(d, p): lib.getSystemPathBuffer(d, p)
def getTime(): lib.getTime()
def getWorkingDir(buf, size): lib.getWorkingDir(buf, size)
def log(text): lib.log(text)
def logErrorCode(errorCode, details): lib.logErrorCode(errorCode, details)
def logf(format): lib.logf(format)
def makeDir(path): lib.makeDir(path)
def makeSlashPath(p): lib.makeSlashPath(p)
def makeSystemPath(p): lib.makeSystemPath(p)
def moveBytes(dest, source, count): lib.moveBytes(dest, source, count)
def moveFile(source, dest): lib.moveFile(source, dest)
def moveFileEx(source, dest, options): lib.moveFileEx(source, dest, options)
def randomSeed(seed): lib.randomSeed(seed)
def removeDir(path): lib.removeDir(path)
def renameFile(oldName, newName): lib.renameFile(oldName, newName)
def resetError(): lib.resetError()
def setEnvironment(envName, envValue): lib.setEnvironment(envName, envValue)
def setErrorLevel(level): lib.setErrorLevel(level)
def setLoggingMode(mode, where): lib.setLoggingMode(mode, where)
def shellOpen(fileName): lib.shellOpen(fileName)
def sleep(seconds): lib.sleep(seconds)
def uTF16BEtoUTF8Buffer(source, dest, max): lib.uTF16BEtoUTF8Buffer(source, dest, max)
def uTF8toISO8859_1(source, dest, max): lib.uTF8toISO8859_1(source, dest, max)
def uTF8toUTF16BufferLen(source, dest, max, len): lib.uTF8toUTF16BufferLen(source, dest, max, len)
def uTF8toUTF16Len(source, byteCount, wordCount): lib.uTF8toUTF16Len(source, byteCount, wordCount)
def unsetEnvironment(envName): lib.unsetEnvironment(envName)
def writeColorAlpha(f, type, value, indent, eCON): lib.writeColorAlpha(ffi.NULL if f is None else f.impl, ffi.NULL if type is None else type.impl, ffi.NULL if value is None else value.impl, indent, eCON)
def writeECONObject(f, objectType, object, indent): lib.writeECONObject(ffi.NULL if f is None else f.impl, ffi.NULL if objectType is None else objectType.impl, object, indent)
def writeJSONObject(f, objectType, object, indent): lib.writeJSONObject(ffi.NULL if f is None else f.impl, ffi.NULL if objectType is None else objectType.impl, object, indent)

class Stacker(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                direction = None,
                gap = None,
                reverse = None,
                scrollable = None,
                flipper = None,
                flipSpring = None,
                autoSize = None,
                margin = None,
                endButtons = None,
                hoverScroll = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if direction is not None:                self.direction = direction
      if gap is not None:                      self.gap = gap
      if reverse is not None:                  self.reverse = reverse
      if scrollable is not None:               self.scrollable = scrollable
      if flipper is not None:                  self.flipper = flipper
      if flipSpring is not None:               self.flipSpring = flipSpring
      if autoSize is not None:                 self.autoSize = autoSize
      if margin is not None:                   self.margin = margin
      if endButtons is not None:               self.endButtons = endButtons
      if hoverScroll is not None:              self.hoverScroll = hoverScroll
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def direction(self): return lib.Stacker_get_direction(self.impl, value)
   @direction.setter
   def direction(self, value):
      lib.Stacker_set_direction(self.impl, value)

   @property
   def gap(self): return lib.Stacker_get_gap(self.impl)
   @gap.setter
   def gap(self, value):
      lib.Stacker_set_gap(self.impl, value)

   @property
   def reverse(self): return lib.Stacker_get_reverse(self.impl)
   @reverse.setter
   def reverse(self, value):
      lib.Stacker_set_reverse(self.impl, value)

   @property
   def scrollable(self): return lib.Stacker_get_scrollable(self.impl)
   @scrollable.setter
   def scrollable(self, value):
      lib.Stacker_set_scrollable(self.impl, value)

   @property
   def controls(self): return pyOrNewObject(Array, lib.Stacker_get_controls(self.impl))

   @property
   def flipper(self): return pyOrNewObject(Window, lib.Stacker_get_flipper(self.impl))
   @flipper.setter
   def flipper(self, value):
      if not isinstance(value, Window): value = Window(value)
      lib.Stacker_set_flipper(self.impl, value.impl)

   @property
   def flipSpring(self): return lib.Stacker_get_flipSpring(self.impl)
   @flipSpring.setter
   def flipSpring(self, value):
      lib.Stacker_set_flipSpring(self.impl, value)

   @property
   def autoSize(self): return lib.Stacker_get_autoSize(self.impl)
   @autoSize.setter
   def autoSize(self, value):
      lib.Stacker_set_autoSize(self.impl, value)

   @property
   def margin(self): return lib.Stacker_get_margin(self.impl)
   @margin.setter
   def margin(self, value):
      lib.Stacker_set_margin(self.impl, value)

   @property
   def endButtons(self): return lib.Stacker_get_endButtons(self.impl)
   @endButtons.setter
   def endButtons(self, value):
      lib.Stacker_set_endButtons(self.impl, value)

   @property
   def hoverScroll(self): return lib.Stacker_get_hoverScroll(self.impl)
   @hoverScroll.setter
   def hoverScroll(self, value):
      lib.Stacker_set_hoverScroll(self.impl, value)

   def destroyChildren(self):
      lib.Stacker_destroyChildren(self.impl)

   def getNextStackedItem(self, current, previous, filter):
      if current is not None and not isinstance(current, Window): current = Window(current)
      if current is None: current = ffi.NULL
      if filter is not None and not isinstance(filter, Class): filter = Class(filter)
      if filter is None: filter = ffi.NULL
      return pyOrNewObject(Window, lib.Stacker_getNextStackedItem(self.impl, current, previous, filter))

   def makeControlVisible(self, control):
      if control is not None and not isinstance(control, Window): control = Window(control)
      if control is None: control = ffi.NULL
      lib.Stacker_makeControlVisible(self.impl, control)

class SelectorButton(Button):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                isRadio = None,
                isCheckbox = None,
                bevel = None,
                bevelOver = None,
                toggle = None,
                checked = None,
                alignment = None,
                bitmap = None,
                stayUp = None,
                scaleBitmap = None,
                keyRepeat = None,
                symbol = None,
                ellipsis = None,
                stayDown = None,
                offset = None,
                buttonState = None,
                bitmapAlignment = None,
                focusHolder = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyClicked = None,
                notifyDoubleClick = None,
                notifyMouseLeave = None,
                notifyMouseMove = None,
                notifyMouseOver = None,
                notifyPushed = None,
                notifyReleased = None,
                impl = None):
      Button.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if isRadio is not None:                  self.isRadio = isRadio
      if isCheckbox is not None:               self.isCheckbox = isCheckbox
      if bevel is not None:                    self.bevel = bevel
      if bevelOver is not None:                self.bevelOver = bevelOver
      if toggle is not None:                   self.toggle = toggle
      if checked is not None:                  self.checked = checked
      if alignment is not None:                self.alignment = alignment
      if bitmap is not None:                   self.bitmap = bitmap
      if stayUp is not None:                   self.stayUp = stayUp
      if scaleBitmap is not None:              self.scaleBitmap = scaleBitmap
      if keyRepeat is not None:                self.keyRepeat = keyRepeat
      if symbol is not None:                   self.symbol = symbol
      if ellipsis is not None:                 self.ellipsis = ellipsis
      if stayDown is not None:                 self.stayDown = stayDown
      if offset is not None:                   self.offset = offset
      if buttonState is not None:              self.buttonState = buttonState
      if bitmapAlignment is not None:          self.bitmapAlignment = bitmapAlignment
      if focusHolder is not None:              self.focusHolder = focusHolder
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyClicked is not None:            self.notifyClicked = notifyClicked
      if notifyDoubleClick is not None:        self.notifyDoubleClick = notifyDoubleClick
      if notifyMouseLeave is not None:         self.notifyMouseLeave = notifyMouseLeave
      if notifyMouseMove is not None:          self.notifyMouseMove = notifyMouseMove
      if notifyMouseOver is not None:          self.notifyMouseOver = notifyMouseOver
      if notifyPushed is not None:             self.notifyPushed = notifyPushed
      if notifyReleased is not None:           self.notifyReleased = notifyReleased

   @property
   def focusHolder(self): return Window(impl = IPTR(lib, ffi, self, SelectorButton).focusHolder)
   @focusHolder.setter
   def focusHolder(self, value):
      if not isinstance(value, Window): value = Window(value)
      IPTR(lib, ffi, self, SelectorButton).focusHolder = value.impl

@ffi.callback("void(Window, MenuItem, Modifiers)")
def cb_MenuItem_notifySelect(__w, selection, mods):
   selection = pyOrNewObject(MenuItem, selection)
   selection.fn_MenuItem_notifySelect(pyOrNewObject(MenuItem, __w), selection, Modifiers(impl = mods))

class MenuItem(Instance):
   def __init__(self,
                parent = None,
                text = None,
                hotKey = None,
                accelerator = None,
                checked = None,
                disabled = None,
                checkable = None,
                isRadio = None,
                id = None,
                bitmap = None,
                copyText = None,
                bold = None,
                notifySelect = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if parent is not None:       self.parent = parent
      if text is not None:         self.text = text
      if hotKey is not None:       self.hotKey = hotKey
      if accelerator is not None:  self.accelerator = accelerator
      if checked is not None:      self.checked = checked
      if disabled is not None:     self.disabled = disabled
      if checkable is not None:    self.checkable = checkable
      if isRadio is not None:      self.isRadio = isRadio
      if id is not None:           self.id = id
      if bitmap is not None:       self.bitmap = bitmap
      if copyText is not None:     self.copyText = copyText
      if bold is not None:         self.bold = bold
      if notifySelect is not None: self.notifySelect = notifySelect

   @property
   def parent(self): return None
   @parent.setter
   def parent(self, value):
      if not isinstance(value, Menu): value = Menu(value)
      lib.MenuItem_set_parent(self.impl, value.impl)

   @property
   def text(self): return None
   @text.setter
   def text(self, value):
      lib.MenuItem_set_text(self.impl, value.encode('utf8'))

   @property
   def hotKey(self): return None
   @hotKey.setter
   def hotKey(self, value):
      if not isinstance(value, Key): value = Key(value)
      lib.MenuItem_set_hotKey(self.impl, value.impl)

   @property
   def accelerator(self): return None
   @accelerator.setter
   def accelerator(self, value):
      if not isinstance(value, Key): value = Key(value)
      lib.MenuItem_set_accelerator(self.impl, value.impl)

   @property
   def checked(self): return lib.MenuItem_get_checked(self.impl)
   @checked.setter
   def checked(self, value):
      lib.MenuItem_set_checked(self.impl, value)

   @property
   def disabled(self): return None
   @disabled.setter
   def disabled(self, value):
      lib.MenuItem_set_disabled(self.impl, value)

   @property
   def checkable(self): return None
   @checkable.setter
   def checkable(self, value):
      lib.MenuItem_set_checkable(self.impl, value)

   @property
   def isRadio(self): return None
   @isRadio.setter
   def isRadio(self, value):
      lib.MenuItem_set_isRadio(self.impl, value)

   @property
   def id(self): return lib.MenuItem_get_id(self.impl)
   @id.setter
   def id(self, value):
      lib.MenuItem_set_id(self.impl, value)

   @property
   def bitmap(self): return pyOrNewObject(BitmapResource, lib.MenuItem_get_bitmap(self.impl))
   @bitmap.setter
   def bitmap(self, value):
      if not isinstance(value, BitmapResource): value = BitmapResource(value)
      lib.MenuItem_set_bitmap(self.impl, value.impl)

   @property
   def copyText(self): return None
   @copyText.setter
   def copyText(self, value):
      lib.MenuItem_set_copyText(self.impl, value)

   @property
   def bold(self): return lib.MenuItem_get_bold(self.impl)
   @bold.setter
   def bold(self, value):
      lib.MenuItem_set_bold(self.impl, value)

   def fn_unset_MenuItem_notifySelect(self, _window, selection, mods):
      return lib.MenuItem_notifySelect(self.impl, _window.impl, ffi.NULL if selection is None else selection.impl, mods)

   @property
   def notifySelect(self):
      if hasattr(self, 'fn_MenuItem_notifySelect'): return self.fn_MenuItem_notifySelect
      else: return self.fn_unset_MenuItem_notifySelect
   @notifySelect.setter
   def notifySelect(self, value):
      self.fn_MenuItem_notifySelect = value
      lib.Instance_setMethod(self.impl, "NotifySelect".encode('utf8'), cb_MenuItem_notifySelect)

class FilePath(String):
   def __init__(self,
                impl = None):
      String.__init__(self, impl = impl)

@ffi.callback("void(Window, DataBox, bool)")
def cb_DataBox_notifyChanged(__w, dataBox, closingDropDown):
   dataBox = pyOrNewObject(DataBox, dataBox)
   dataBox.fn_DataBox_notifyChanged(pyOrNewObject(DataBox, __w), dataBox, closingDropDown)

@ffi.callback("void(Window)")
def cb_DataBox_notifyModified(__w):
   databox = pyOrNewObject(DataBox, databox)
   databox.fn_DataBox_notifyModified(pyOrNewObject(DataBox, __w))

@ffi.callback("void(DataBox, Window)")
def cb_DataBox_onConfigure(__d, editor):
   databox = pyOrNewObject(DataBox, __d)
   databox.fn_DataBox_onConfigure(databox, pyOrNewObject(Window, editor))

@ffi.callback("void(DataBox, any_object, bool)")
def cb_DataBox_setData(__d, newData, closingDropDown):
   databox = pyOrNewObject(DataBox, __d)
   databox.fn_DataBox_setData(databox, any_object(impl = newData), closingDropDown)

class DataBox(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                type = None,
                data = None,
                fieldData = None,
                editor = None,
                readOnly = None,
                keepEditor = None,
                autoSize = None,
                needUpdate = None,
                stringValue = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyChanged = None,
                notifyModified = None,
                onConfigure = None,
                setData = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if type is not None:                     self.type = type
      if data is not None:                     self.data = data
      if fieldData is not None:                self.fieldData = fieldData
      if editor is not None:                   self.editor = editor
      if readOnly is not None:                 self.readOnly = readOnly
      if keepEditor is not None:               self.keepEditor = keepEditor
      if autoSize is not None:                 self.autoSize = autoSize
      if needUpdate is not None:               self.needUpdate = needUpdate
      if stringValue is not None:              self.stringValue = stringValue
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyChanged is not None:            self.notifyChanged = notifyChanged
      if notifyModified is not None:           self.notifyModified = notifyModified
      if onConfigure is not None:              self.onConfigure = onConfigure
      if setData is not None:                  self.setData = setData

   @property
   def type(self): return Class(impl = IPTR(lib, ffi, self, DataBox).type)
   @type.setter
   def type(self, value):
      if not isinstance(value, Class): value = Class(value)
      IPTR(lib, ffi, self, DataBox).type = value.impl

   @property
   def data(self): return IPTR(lib, ffi, self, DataBox).data
   @data.setter
   def data(self, value): IPTR(lib, ffi, self, DataBox).data = value

   @property
   def fieldData(self): return IPTR(lib, ffi, self, DataBox).fieldData
   @fieldData.setter
   def fieldData(self, value): IPTR(lib, ffi, self, DataBox).fieldData = value

   @property
   def editor(self): return Window(impl = IPTR(lib, ffi, self, DataBox).editor)
   @editor.setter
   def editor(self, value):
      if not isinstance(value, Window): value = Window(value)
      IPTR(lib, ffi, self, DataBox).editor = value.impl

   @property
   def readOnly(self): return IPTR(lib, ffi, self, DataBox).readOnly
   @readOnly.setter
   def readOnly(self, value): IPTR(lib, ffi, self, DataBox).readOnly = value

   @property
   def keepEditor(self): return IPTR(lib, ffi, self, DataBox).keepEditor
   @keepEditor.setter
   def keepEditor(self, value): IPTR(lib, ffi, self, DataBox).keepEditor = value

   @property
   def autoSize(self): return IPTR(lib, ffi, self, DataBox).autoSize
   @autoSize.setter
   def autoSize(self, value): IPTR(lib, ffi, self, DataBox).autoSize = value

   @property
   def needUpdate(self): return IPTR(lib, ffi, self, DataBox).needUpdate
   @needUpdate.setter
   def needUpdate(self, value): IPTR(lib, ffi, self, DataBox).needUpdate = value

   @property
   def stringValue(self): return String(impl = IPTR(lib, ffi, self, DataBox).stringValue)
   @stringValue.setter
   def stringValue(self, value):
      if not isinstance(value, String): value = String(value)
      IPTR(lib, ffi, self, DataBox).stringValue = value.impl

   def modified(self):
      lib.DataBox_modified(self.impl)

   def fn_unset_DataBox_notifyChanged(self, _window, dataBox, closingDropDown):
      return lib.DataBox_notifyChanged(self.impl, _window.impl, ffi.NULL if dataBox is None else dataBox.impl, closingDropDown)

   @property
   def notifyChanged(self):
      if hasattr(self, 'fn_DataBox_notifyChanged'): return self.fn_DataBox_notifyChanged
      else: return self.fn_unset_DataBox_notifyChanged
   @notifyChanged.setter
   def notifyChanged(self, value):
      self.fn_DataBox_notifyChanged = value
      lib.Instance_setMethod(self.impl, "NotifyChanged".encode('utf8'), cb_DataBox_notifyChanged)

   def fn_unset_DataBox_notifyModified(self, _window):
      return lib.DataBox_notifyModified(self.impl, _window.impl)

   @property
   def notifyModified(self):
      if hasattr(self, 'fn_DataBox_notifyModified'): return self.fn_DataBox_notifyModified
      else: return self.fn_unset_DataBox_notifyModified
   @notifyModified.setter
   def notifyModified(self, value):
      self.fn_DataBox_notifyModified = value
      lib.Instance_setMethod(self.impl, "NotifyModified".encode('utf8'), cb_DataBox_notifyModified)

   def fn_unset_DataBox_onConfigure(self, editor):
      return lib.DataBox_onConfigure(self.impl, ffi.NULL if editor is None else editor.impl)

   @property
   def onConfigure(self):
      if hasattr(self, 'fn_DataBox_onConfigure'): return self.fn_DataBox_onConfigure
      else: return self.fn_unset_DataBox_onConfigure
   @onConfigure.setter
   def onConfigure(self, value):
      self.fn_DataBox_onConfigure = value
      lib.Instance_setMethod(self.impl, "OnConfigure".encode('utf8'), cb_DataBox_onConfigure)

   def refresh(self):
      lib.DataBox_refresh(self.impl)

   def saveData(self):
      return lib.DataBox_saveData(self.impl)

   def fn_unset_DataBox_setData(self, newData, closingDropDown):
      return lib.DataBox_setData(self.impl, newData, closingDropDown)

   @property
   def setData(self):
      if hasattr(self, 'fn_DataBox_setData'): return self.fn_DataBox_setData
      else: return self.fn_unset_DataBox_setData
   @setData.setter
   def setData(self, value):
      self.fn_DataBox_setData = value
      lib.Instance_setMethod(self.impl, "SetData".encode('utf8'), cb_DataBox_setData)

class BoxAlignment:
   center = lib.BoxAlignment_center
   left   = lib.BoxAlignment_left
   right  = lib.BoxAlignment_right
   top    = lib.BoxAlignment_top
   bottom = lib.BoxAlignment_bottom

class BufferLocation:
   def __init__(self, line = None, y = 0, x = 0, impl = None):
      if impl is not None:
         self.impl = ffi.new("BufferLocation *", impl)
      else:
         if isinstance(line, tuple):
            __tuple = line
            line = None
            if len(__tuple) > 0: line = __tuple[0]
            if len(__tuple) > 1: y    = __tuple[1]
            if len(__tuple) > 2: x    = __tuple[2]
         if line is not None:
            if not isinstance(line, EditLine): line = EditLine(line)
            line = line.impl
         self.impl = ffi.new("BufferLocation *", { 'line' : line, 'y' : y, 'x' : x })

   @property
   def line(self): return self.impl.line
   @line.setter
   def line(self, value):
      if not isinstance(value, EditLine): value = EditLine(value)
      self.impl.line = value

   @property
   def y(self): return self.impl.y
   @y.setter
   def y(self, value): self.impl.y = value

   @property
   def x(self): return self.impl.x
   @x.setter
   def x(self, value): self.impl.x = value

   def adjustAdd(self, start, end):
      if start is not None and not isinstance(start, BufferLocation): start = BufferLocation(start)
      start = ffi.NULL if start is None else start.impl
      if end is not None and not isinstance(end, BufferLocation): end = BufferLocation(end)
      end = ffi.NULL if end is None else end.impl
      lib.BufferLocation_adjustAdd(ffi.cast("BufferLocation *", self.impl), ffi.cast("BufferLocation *", start), ffi.cast("BufferLocation *", end))

   def adjustDelete(self, start, end):
      if start is not None and not isinstance(start, BufferLocation): start = BufferLocation(start)
      start = ffi.NULL if start is None else start.impl
      if end is not None and not isinstance(end, BufferLocation): end = BufferLocation(end)
      end = ffi.NULL if end is None else end.impl
      lib.BufferLocation_adjustDelete(ffi.cast("BufferLocation *", self.impl), ffi.cast("BufferLocation *", start), ffi.cast("BufferLocation *", end))

class ButtonState:
   up              = lib.ButtonState_up
   down            = lib.ButtonState_down
   over            = lib.ButtonState_over
   disabled        = lib.ButtonState_disabled
   upChecked       = lib.ButtonState_upChecked
   downChecked     = lib.ButtonState_downChecked
   overChecked     = lib.ButtonState_overChecked
   disabledChecked = lib.ButtonState_disabledChecked

@ffi.callback("void(Window, CalendarControl, bool)")
def cb_CalendarControl_notifyChanged(__w, calendarControl, close):
   calendarControl = pyOrNewObject(CalendarControl, calendarControl)
   calendarControl.fn_CalendarControl_notifyChanged(pyOrNewObject(CalendarControl, __w), calendarControl, close)

class CalendarControl(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                dateValue = None,
                shownMonth = None,
                shownYear = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyChanged = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if dateValue is not None:                self.dateValue = dateValue
      if shownMonth is not None:               self.shownMonth = shownMonth
      if shownYear is not None:                self.shownYear = shownYear
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyChanged is not None:            self.notifyChanged = notifyChanged

   @property
   def dateValue(self): return Date(impl = IPTR(lib, ffi, self, CalendarControl).dateValue)
   @dateValue.setter
   def dateValue(self, value):
      if not isinstance(value, Date): value = Date(value)
      IPTR(lib, ffi, self, CalendarControl).dateValue = value.impl

   @property
   def shownMonth(self): return Month(impl = IPTR(lib, ffi, self, CalendarControl).shownMonth)
   @shownMonth.setter
   def shownMonth(self, value): IPTR(lib, ffi, self, CalendarControl).shownMonth = value.impl

   @property
   def shownYear(self): return IPTR(lib, ffi, self, CalendarControl).shownYear
   @shownYear.setter
   def shownYear(self, value): IPTR(lib, ffi, self, CalendarControl).shownYear = value

   def fn_unset_CalendarControl_notifyChanged(self, _window, calendarControl, close):
      return lib.CalendarControl_notifyChanged(self.impl, _window.impl, ffi.NULL if calendarControl is None else calendarControl.impl, close)

   @property
   def notifyChanged(self):
      if hasattr(self, 'fn_CalendarControl_notifyChanged'): return self.fn_CalendarControl_notifyChanged
      else: return self.fn_unset_CalendarControl_notifyChanged
   @notifyChanged.setter
   def notifyChanged(self, value):
      self.fn_CalendarControl_notifyChanged = value
      lib.Instance_setMethod(self.impl, "NotifyChanged".encode('utf8'), cb_CalendarControl_notifyChanged)

class DataDisplayFlags(pyBaseClass):
   def __init__(self, selected = False, fullRow = False, current = False, active = False, dropBox = False, header = False, firstField = False, impl = None):
      if impl is not None:
         self.impl = impl
      elif isinstance(selected, DataDisplayFlags):
         self.impl = selected.impl
      else:
         self.impl = (
            (selected   << lib.DATADISPLAYFLAGS_selected_SHIFT)   |
            (fullRow    << lib.DATADISPLAYFLAGS_fullRow_SHIFT)    |
            (current    << lib.DATADISPLAYFLAGS_current_SHIFT)    |
            (active     << lib.DATADISPLAYFLAGS_active_SHIFT)     |
            (dropBox    << lib.DATADISPLAYFLAGS_dropBox_SHIFT)    |
            (header     << lib.DATADISPLAYFLAGS_header_SHIFT)     |
            (firstField << lib.DATADISPLAYFLAGS_firstField_SHIFT) )

   @property
   def selected(self): return ((((self.impl)) & lib.DATADISPLAYFLAGS_selected_MASK) >> lib.DATADISPLAYFLAGS_selected_SHIFT)
   @selected.setter
   def selected(self, value): self.value = ((self.impl) & ~(lib.DATADISPLAYFLAGS_selected_MASK)) | (((value)) << lib.DATADISPLAYFLAGS_selected_SHIFT)

   @property
   def fullRow(self): return ((((self.impl)) & lib.DATADISPLAYFLAGS_fullRow_MASK) >> lib.DATADISPLAYFLAGS_fullRow_SHIFT)
   @fullRow.setter
   def fullRow(self, value): self.value = ((self.impl) & ~(lib.DATADISPLAYFLAGS_fullRow_MASK)) | (((value)) << lib.DATADISPLAYFLAGS_fullRow_SHIFT)

   @property
   def current(self): return ((((self.impl)) & lib.DATADISPLAYFLAGS_current_MASK) >> lib.DATADISPLAYFLAGS_current_SHIFT)
   @current.setter
   def current(self, value): self.value = ((self.impl) & ~(lib.DATADISPLAYFLAGS_current_MASK)) | (((value)) << lib.DATADISPLAYFLAGS_current_SHIFT)

   @property
   def active(self): return ((((self.impl)) & lib.DATADISPLAYFLAGS_active_MASK) >> lib.DATADISPLAYFLAGS_active_SHIFT)
   @active.setter
   def active(self, value): self.value = ((self.impl) & ~(lib.DATADISPLAYFLAGS_active_MASK)) | (((value)) << lib.DATADISPLAYFLAGS_active_SHIFT)

   @property
   def dropBox(self): return ((((self.impl)) & lib.DATADISPLAYFLAGS_dropBox_MASK) >> lib.DATADISPLAYFLAGS_dropBox_SHIFT)
   @dropBox.setter
   def dropBox(self, value): self.value = ((self.impl) & ~(lib.DATADISPLAYFLAGS_dropBox_MASK)) | (((value)) << lib.DATADISPLAYFLAGS_dropBox_SHIFT)

   @property
   def header(self): return ((((self.impl)) & lib.DATADISPLAYFLAGS_header_MASK) >> lib.DATADISPLAYFLAGS_header_SHIFT)
   @header.setter
   def header(self, value): self.value = ((self.impl) & ~(lib.DATADISPLAYFLAGS_header_MASK)) | (((value)) << lib.DATADISPLAYFLAGS_header_SHIFT)

   @property
   def firstField(self): return ((((self.impl)) & lib.DATADISPLAYFLAGS_firstField_MASK) >> lib.DATADISPLAYFLAGS_firstField_SHIFT)
   @firstField.setter
   def firstField(self, value): self.value = ((self.impl) & ~(lib.DATADISPLAYFLAGS_firstField_MASK)) | (((value)) << lib.DATADISPLAYFLAGS_firstField_SHIFT)

class DataField(Instance):
   def __init__(self,
                dataType = None,
                editable = None,
                fixed = None,
                alignment = None,
                width = None,
                position = None,
                header = None,
                userData = None,
                freeData = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if dataType is not None:  self.dataType = dataType
      if editable is not None:  self.editable = editable
      if fixed is not None:     self.fixed = fixed
      if alignment is not None: self.alignment = alignment
      if width is not None:     self.width = width
      if position is not None:  self.position = position
      if header is not None:    self.header = header
      if userData is not None:  self.userData = userData
      if freeData is not None:  self.freeData = freeData

   @property
   def dataType(self): return lib.DataField_get_dataType(self.impl, value.impl)
   @dataType.setter
   def dataType(self, value):
      if not isinstance(value, Class): value = Class(value)
      lib.DataField_set_dataType(self.impl, value.impl)

   @property
   def editable(self): return None
   @editable.setter
   def editable(self, value):
      lib.DataField_set_editable(self.impl, value)

   @property
   def fixed(self): return lib.DataField_get_fixed(self.impl)
   @fixed.setter
   def fixed(self, value):
      lib.DataField_set_fixed(self.impl, value)

   @property
   def alignment(self): return lib.DataField_get_alignment(self.impl, value)
   @alignment.setter
   def alignment(self, value):
      lib.DataField_set_alignment(self.impl, value)

   @property
   def width(self): return lib.DataField_get_width(self.impl)
   @width.setter
   def width(self, value):
      lib.DataField_set_width(self.impl, value)

   @property
   def index(self): return lib.DataField_get_index(self.impl)

   @property
   def position(self): return lib.DataField_get_position(self.impl)
   @position.setter
   def position(self, value):
      lib.DataField_set_position(self.impl, value)

   @property
   def sortOrder(self): return lib.DataField_get_sortOrder(self.impl)

   @property
   def header(self): return None
   @header.setter
   def header(self, value):
      lib.DataField_set_header(self.impl, value.encode('utf8'))

   @property
   def userData(self): return lib.DataField_get_userData(self.impl)
   @userData.setter
   def userData(self, value):
      lib.DataField_set_userData(self.impl, value)

   @property
   def freeData(self): return lib.DataField_get_freeData(self.impl)
   @freeData.setter
   def freeData(self, value):
      lib.DataField_set_freeData(self.impl, value)

   @property
   def prev(self): return pyOrNewObject(DataField, lib.DataField_get_prev(self.impl))

   @property
   def next(self): return pyOrNewObject(DataField, lib.DataField_get_next(self.impl))

   def autoSize(self):
      lib.DataField_autoSize(self.impl)

   def move(self, after):
      if after is not None and not isinstance(after, DataField): after = DataField(after)
      if after is None: after = ffi.NULL
      lib.DataField_move(self.impl, after)

class DataRow(Instance):
   def __init__(self,
                tag = None,
                string = None,
                isHeader = None,
                icon = None,
                collapsed = None,
                selected = None,
                parent = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if tag is not None:       self.tag = tag
      if string is not None:    self.string = string
      if isHeader is not None:  self.isHeader = isHeader
      if icon is not None:      self.icon = icon
      if collapsed is not None: self.collapsed = collapsed
      if selected is not None:  self.selected = selected
      if parent is not None:    self.parent = parent

   @property
   def tag(self): return lib.DataRow_get_tag(self.impl)
   @tag.setter
   def tag(self, value):
      lib.DataRow_set_tag(self.impl, value)

   @property
   def previous(self): return pyOrNewObject(DataRow, lib.DataRow_get_previous(self.impl))

   @property
   def next(self): return pyOrNewObject(DataRow, lib.DataRow_get_next(self.impl))

   @property
   def index(self): return lib.DataRow_get_index(self.impl)

   @property
   def string(self): value = lib.DataRow_get_string(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @string.setter
   def string(self, value):
      lib.DataRow_set_string(self.impl, value.encode('utf8'))

   @property
   def isHeader(self): return lib.DataRow_get_isHeader(self.impl)
   @isHeader.setter
   def isHeader(self, value):
      lib.DataRow_set_isHeader(self.impl, value)

   @property
   def icon(self): return pyOrNewObject(BitmapResource, lib.DataRow_get_icon(self.impl))
   @icon.setter
   def icon(self, value):
      if not isinstance(value, BitmapResource): value = BitmapResource(value)
      lib.DataRow_set_icon(self.impl, value.impl)

   @property
   def collapsed(self): return lib.DataRow_get_collapsed(self.impl)
   @collapsed.setter
   def collapsed(self, value):
      lib.DataRow_set_collapsed(self.impl, value)

   @property
   def selected(self): return lib.DataRow_get_selected(self.impl)
   @selected.setter
   def selected(self, value):
      lib.DataRow_set_selected(self.impl, value)

   @property
   def parent(self): return pyOrNewObject(DataRow, lib.DataRow_get_parent(self.impl))
   @parent.setter
   def parent(self, value):
      if not isinstance(value, DataRow): value = DataRow(value)
      lib.DataRow_set_parent(self.impl, value.impl)

   @property
   def lastRow(self): return pyOrNewObject(DataRow, lib.DataRow_get_lastRow(self.impl))

   @property
   def firstRow(self): return pyOrNewObject(DataRow, lib.DataRow_get_firstRow(self.impl))

   def addRow(self):
      return pyOrNewObject(DataRow, lib.DataRow_addRow(self.impl))

   def addRowAfter(self, after):
      if after is not None and not isinstance(after, DataRow): after = DataRow(after)
      if after is None: after = ffi.NULL
      return pyOrNewObject(DataRow, lib.DataRow_addRowAfter(self.impl, after))

   def addString(self, string):
      return pyOrNewObject(DataRow, lib.DataRow_addString(self.impl, string.encode('utf8')))

   def addStringf(self, format):
      return pyOrNewObject(DataRow, lib.DataRow_addStringf(self.impl, format.encode('utf8')))

   def edit(self, field):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      lib.DataRow_edit(self.impl, field)

   def findRow(self, tag):
      return pyOrNewObject(DataRow, lib.DataRow_findRow(self.impl, tag))

   def findSubRow(self, tag):
      return pyOrNewObject(DataRow, lib.DataRow_findSubRow(self.impl, tag))

   def getData(self, field):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      return lib.DataRow_getData(self.impl, field)

   def getNextRow(self):
      return pyOrNewObject(DataRow, lib.DataRow_getNextRow(self.impl))

   def getPrevRow(self):
      return pyOrNewObject(DataRow, lib.DataRow_getPrevRow(self.impl))

   def move(self, after):
      if after is not None and not isinstance(after, DataRow): after = DataRow(after)
      if after is None: after = ffi.NULL
      lib.DataRow_move(self.impl, after)

   def setData(self, field, newData):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      return lib.DataRow_setData(self.impl, field, newData)

   def sortSubRows(self, scrollToCurrent):
      lib.DataRow_sortSubRows(self.impl, scrollToCurrent)

   def unsetData(self, field):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      lib.DataRow_unsetData(self.impl, field)

class DirPath(FilePath):
   def __init__(self,
                impl = None):
      FilePath.__init__(self, impl = impl)

@ffi.callback("void(Window, DirectoriesBox)")
def cb_DirectoriesBox_notifyModified(__w, dirsBox):
   dirsBox = pyOrNewObject(DirectoriesBox, dirsBox)
   dirsBox.fn_DirectoriesBox_notifyModified(pyOrNewObject(DirectoriesBox, __w), dirsBox)

@ffi.callback("void(Window, DirectoriesBox, PathBox)")
def cb_DirectoriesBox_notifyPathBoxModified(__w, dirsBox, pathBox):
   dirsBox = pyOrNewObject(DirectoriesBox, dirsBox)
   dirsBox.fn_DirectoriesBox_notifyPathBoxModified(pyOrNewObject(DirectoriesBox, __w), dirsBox, pyOrNewObject(PathBox, pathBox))

@ffi.callback("void(DirectoriesBox, char **)")
def cb_DirectoriesBox_onBrowsedDir(__d, directory):
   directoriesbox = pyOrNewObject(DirectoriesBox, __d)
   directoriesbox.fn_DirectoriesBox_onBrowsedDir(directoriesbox, directory)

@ffi.callback("void(DirectoriesBox, char **)")
def cb_DirectoriesBox_onChangedDir(__d, directory):
   directoriesbox = pyOrNewObject(DirectoriesBox, __d)
   directoriesbox.fn_DirectoriesBox_onChangedDir(directoriesbox, directory)

@ffi.callback("void(DirectoriesBox, char **)")
def cb_DirectoriesBox_onPrepareBrowseDir(__d, directory):
   directoriesbox = pyOrNewObject(DirectoriesBox, __d)
   directoriesbox.fn_DirectoriesBox_onPrepareBrowseDir(directoriesbox, directory)

class DirectoriesBox(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                browsing = None,
                strings = None,
                browseDialog = None,
                baseBrowsePath = None,
                add = None,
                remove = None,
                up = None,
                down = None,
                list = None,
                dirField = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyModified = None,
                notifyPathBoxModified = None,
                onBrowsedDir = None,
                onChangedDir = None,
                onPrepareBrowseDir = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if browsing is not None:                 self.browsing = browsing
      if strings is not None:                  self.strings = strings
      if browseDialog is not None:             self.browseDialog = browseDialog
      if baseBrowsePath is not None:           self.baseBrowsePath = baseBrowsePath
      if add is not None:                      self.add = add
      if remove is not None:                   self.remove = remove
      if up is not None:                       self.up = up
      if down is not None:                     self.down = down
      if list is not None:                     self.list = list
      if dirField is not None:                 self.dirField = dirField
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyModified is not None:           self.notifyModified = notifyModified
      if notifyPathBoxModified is not None:    self.notifyPathBoxModified = notifyPathBoxModified
      if onBrowsedDir is not None:             self.onBrowsedDir = onBrowsedDir
      if onChangedDir is not None:             self.onChangedDir = onChangedDir
      if onPrepareBrowseDir is not None:       self.onPrepareBrowseDir = onPrepareBrowseDir

   @property
   def browsing(self): return IPTR(lib, ffi, self, DirectoriesBox).browsing
   @browsing.setter
   def browsing(self, value): IPTR(lib, ffi, self, DirectoriesBox).browsing = value

   @property
   def strings(self): return pyOrNewObject(Array, lib.DirectoriesBox_get_strings(self.impl))
   @strings.setter
   def strings(self, value):
      lib.DirectoriesBox_set_strings(self.impl, value.impl)

   @property
   def browseDialog(self): return pyOrNewObject(FileDialog, lib.DirectoriesBox_get_browseDialog(self.impl))
   @browseDialog.setter
   def browseDialog(self, value):
      if not isinstance(value, FileDialog): value = FileDialog(value)
      lib.DirectoriesBox_set_browseDialog(self.impl, value.impl)

   @property
   def baseBrowsePath(self): value = lib.DirectoriesBox_get_baseBrowsePath(self.impl) if self is not None and self.impl != ffi.NULL else ffi.NULL; return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @baseBrowsePath.setter
   def baseBrowsePath(self, value):
      if not isinstance(value, String): value = String(value)
      lib.DirectoriesBox_set_baseBrowsePath(self.impl, value.impl.encode('utf8'))

   @property
   def add(self): return Button(impl = IPTR(lib, ffi, self, DirectoriesBox).add)
   @add.setter
   def add(self, value):
      if not isinstance(value, Button): value = Button(value)
      IPTR(lib, ffi, self, DirectoriesBox).add = value.impl

   @property
   def remove(self): return Button(impl = IPTR(lib, ffi, self, DirectoriesBox).remove)
   @remove.setter
   def remove(self, value):
      if not isinstance(value, Button): value = Button(value)
      IPTR(lib, ffi, self, DirectoriesBox).remove = value.impl

   @property
   def up(self): return RepButton(impl = IPTR(lib, ffi, self, DirectoriesBox).up)
   @up.setter
   def up(self, value):
      if not isinstance(value, RepButton): value = RepButton(value)
      IPTR(lib, ffi, self, DirectoriesBox).up = value.impl

   @property
   def down(self): return RepButton(impl = IPTR(lib, ffi, self, DirectoriesBox).down)
   @down.setter
   def down(self, value):
      if not isinstance(value, RepButton): value = RepButton(value)
      IPTR(lib, ffi, self, DirectoriesBox).down = value.impl

   @property
   def list(self): return ListBox(impl = IPTR(lib, ffi, self, DirectoriesBox).list)
   @list.setter
   def list(self, value):
      if not isinstance(value, ListBox): value = ListBox(value)
      IPTR(lib, ffi, self, DirectoriesBox).list = value.impl

   @property
   def dirField(self): return DataField(impl = IPTR(lib, ffi, self, DirectoriesBox).dirField)
   @dirField.setter
   def dirField(self, value):
      if not isinstance(value, DataField): value = DataField(value)
      IPTR(lib, ffi, self, DirectoriesBox).dirField = value.impl

   def fn_unset_DirectoriesBox_notifyModified(self, _window, dirsBox):
      return lib.DirectoriesBox_notifyModified(self.impl, _window.impl, ffi.NULL if dirsBox is None else dirsBox.impl)

   @property
   def notifyModified(self):
      if hasattr(self, 'fn_DirectoriesBox_notifyModified'): return self.fn_DirectoriesBox_notifyModified
      else: return self.fn_unset_DirectoriesBox_notifyModified
   @notifyModified.setter
   def notifyModified(self, value):
      self.fn_DirectoriesBox_notifyModified = value
      lib.Instance_setMethod(self.impl, "NotifyModified".encode('utf8'), cb_DirectoriesBox_notifyModified)

   def fn_unset_DirectoriesBox_notifyPathBoxModified(self, _window, dirsBox, pathBox):
      return lib.DirectoriesBox_notifyPathBoxModified(self.impl, _window.impl, ffi.NULL if dirsBox is None else dirsBox.impl, ffi.NULL if pathBox is None else pathBox.impl)

   @property
   def notifyPathBoxModified(self):
      if hasattr(self, 'fn_DirectoriesBox_notifyPathBoxModified'): return self.fn_DirectoriesBox_notifyPathBoxModified
      else: return self.fn_unset_DirectoriesBox_notifyPathBoxModified
   @notifyPathBoxModified.setter
   def notifyPathBoxModified(self, value):
      self.fn_DirectoriesBox_notifyPathBoxModified = value
      lib.Instance_setMethod(self.impl, "NotifyPathBoxModified".encode('utf8'), cb_DirectoriesBox_notifyPathBoxModified)

   def fn_unset_DirectoriesBox_onBrowsedDir(self, directory):
      return lib.DirectoriesBox_onBrowsedDir(self.impl, directory)

   @property
   def onBrowsedDir(self):
      if hasattr(self, 'fn_DirectoriesBox_onBrowsedDir'): return self.fn_DirectoriesBox_onBrowsedDir
      else: return self.fn_unset_DirectoriesBox_onBrowsedDir
   @onBrowsedDir.setter
   def onBrowsedDir(self, value):
      self.fn_DirectoriesBox_onBrowsedDir = value
      lib.Instance_setMethod(self.impl, "OnBrowsedDir".encode('utf8'), cb_DirectoriesBox_onBrowsedDir)

   def fn_unset_DirectoriesBox_onChangedDir(self, directory):
      return lib.DirectoriesBox_onChangedDir(self.impl, directory)

   @property
   def onChangedDir(self):
      if hasattr(self, 'fn_DirectoriesBox_onChangedDir'): return self.fn_DirectoriesBox_onChangedDir
      else: return self.fn_unset_DirectoriesBox_onChangedDir
   @onChangedDir.setter
   def onChangedDir(self, value):
      self.fn_DirectoriesBox_onChangedDir = value
      lib.Instance_setMethod(self.impl, "OnChangedDir".encode('utf8'), cb_DirectoriesBox_onChangedDir)

   def fn_unset_DirectoriesBox_onPrepareBrowseDir(self, directory):
      return lib.DirectoriesBox_onPrepareBrowseDir(self.impl, directory)

   @property
   def onPrepareBrowseDir(self):
      if hasattr(self, 'fn_DirectoriesBox_onPrepareBrowseDir'): return self.fn_DirectoriesBox_onPrepareBrowseDir
      else: return self.fn_unset_DirectoriesBox_onPrepareBrowseDir
   @onPrepareBrowseDir.setter
   def onPrepareBrowseDir(self, value):
      self.fn_DirectoriesBox_onPrepareBrowseDir = value
      lib.Instance_setMethod(self.impl, "OnPrepareBrowseDir".encode('utf8'), cb_DirectoriesBox_onPrepareBrowseDir)

@ffi.callback("void(Window, DropBox)")
def cb_DropBox_notifyClose(__w, dropBox):
   dropBox = pyOrNewObject(DropBox, dropBox)
   dropBox.fn_DropBox_notifyClose(pyOrNewObject(DropBox, __w), dropBox)

@ffi.callback("void(Window, DropBox, DataRow, Modifiers)")
def cb_DropBox_notifyHighlight(__w, dropBox, row, mods):
   dropBox = pyOrNewObject(DropBox, dropBox)
   dropBox.fn_DropBox_notifyHighlight(pyOrNewObject(DropBox, __w), dropBox, pyOrNewObject(DataRow, row), Modifiers(impl = mods))

@ffi.callback("void(Window, DropBox, DataRow, Modifiers)")
def cb_DropBox_notifySelect(__w, dropBox, row, mods):
   dropBox = pyOrNewObject(DropBox, dropBox)
   dropBox.fn_DropBox_notifySelect(pyOrNewObject(DropBox, __w), dropBox, pyOrNewObject(DataRow, row), Modifiers(impl = mods))

@ffi.callback("void(Window, DropBox, const char *, bool)")
def cb_DropBox_notifyTextEntry(__w, dropBox, string, confirmed):
   dropBox = pyOrNewObject(DropBox, dropBox)
   dropBox.fn_DropBox_notifyTextEntry(pyOrNewObject(DropBox, __w), dropBox, string.encode('utf8'), confirmed)

@ffi.callback("void(DropBox, Window)")
def cb_DropBox_onCloseDropDown(__d, pullDown):
   dropbox = pyOrNewObject(DropBox, __d)
   dropbox.fn_DropBox_onCloseDropDown(dropbox, pyOrNewObject(Window, pullDown))

@ffi.callback("void(DropBox)")
def cb_DropBox_onDropDown(__d):
   dropbox = pyOrNewObject(DropBox, __d)
   dropbox.fn_DropBox_onDropDown(dropbox)

class DropBox(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                activeStipple = None,
                showButton = None,
                alignment = None,
                noHighlight = None,
                activeColor = None,
                currentRow = None,
                contents = None,
                editText = None,
                typingTimeout = None,
                rowHeight = None,
                maxShown = None,
                showNone = None,
                selectionColor = None,
                selectionText = None,
                changeContents = None,
                button = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyClose = None,
                notifyHighlight = None,
                notifySelect = None,
                notifyTextEntry = None,
                onCloseDropDown = None,
                onDropDown = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if activeStipple is not None:            self.activeStipple = activeStipple
      if showButton is not None:               self.showButton = showButton
      if alignment is not None:                self.alignment = alignment
      if noHighlight is not None:              self.noHighlight = noHighlight
      if activeColor is not None:              self.activeColor = activeColor
      if currentRow is not None:               self.currentRow = currentRow
      if contents is not None:                 self.contents = contents
      if editText is not None:                 self.editText = editText
      if typingTimeout is not None:            self.typingTimeout = typingTimeout
      if rowHeight is not None:                self.rowHeight = rowHeight
      if maxShown is not None:                 self.maxShown = maxShown
      if showNone is not None:                 self.showNone = showNone
      if selectionColor is not None:           self.selectionColor = selectionColor
      if selectionText is not None:            self.selectionText = selectionText
      if changeContents is not None:           self.changeContents = changeContents
      if button is not None:                   self.button = button
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyClose is not None:              self.notifyClose = notifyClose
      if notifyHighlight is not None:          self.notifyHighlight = notifyHighlight
      if notifySelect is not None:             self.notifySelect = notifySelect
      if notifyTextEntry is not None:          self.notifyTextEntry = notifyTextEntry
      if onCloseDropDown is not None:          self.onCloseDropDown = onCloseDropDown
      if onDropDown is not None:               self.onDropDown = onDropDown

   @property
   def activeStipple(self): return lib.DropBox_get_activeStipple(self.impl)
   @activeStipple.setter
   def activeStipple(self, value):
      lib.DropBox_set_activeStipple(self.impl, value)

   @property
   def showButton(self): return lib.DropBox_get_showButton(self.impl)
   @showButton.setter
   def showButton(self, value):
      lib.DropBox_set_showButton(self.impl, value)

   @property
   def alignment(self): return lib.DropBox_get_alignment(self.impl, value)
   @alignment.setter
   def alignment(self, value):
      lib.DropBox_set_alignment(self.impl, value)

   @property
   def noHighlight(self): return lib.DropBox_get_noHighlight(self.impl)
   @noHighlight.setter
   def noHighlight(self, value):
      lib.DropBox_set_noHighlight(self.impl, value)

   @property
   def activeColor(self): return lib.DropBox_get_activeColor(self.impl)
   @activeColor.setter
   def activeColor(self, value):
      lib.DropBox_set_activeColor(self.impl, value)

   @property
   def currentRow(self): return pyOrNewObject(DataRow, lib.DropBox_get_currentRow(self.impl))
   @currentRow.setter
   def currentRow(self, value):
      if not isinstance(value, DataRow): value = DataRow(value)
      lib.DropBox_set_currentRow(self.impl, value.impl)

   @property
   def firstRow(self): return pyOrNewObject(DataRow, lib.DropBox_get_firstRow(self.impl))

   @property
   def lastRow(self): return pyOrNewObject(DataRow, lib.DropBox_get_lastRow(self.impl))

   @property
   def contents(self): value = lib.DropBox_get_contents(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @contents.setter
   def contents(self, value):
      lib.DropBox_set_contents(self.impl, value.encode('utf8'))

   @property
   def editText(self): return lib.DropBox_get_editText(self.impl)
   @editText.setter
   def editText(self, value):
      lib.DropBox_set_editText(self.impl, value)

   @property
   def editBox(self): return pyOrNewObject(EditBox, lib.DropBox_get_editBox(self.impl))

   @property
   def typingTimeout(self): return Seconds(lib.DropBox_get_typingTimeout(self.impl))
   @typingTimeout.setter
   def typingTimeout(self, value):
      if not isinstance(value, Time): value = Seconds(value)
      lib.DropBox_set_typingTimeout(self.impl, value.impl)

   @property
   def rowHeight(self): return lib.DropBox_get_rowHeight(self.impl)
   @rowHeight.setter
   def rowHeight(self, value):
      lib.DropBox_set_rowHeight(self.impl, value)

   @property
   def maxShown(self): return lib.DropBox_get_maxShown(self.impl)
   @maxShown.setter
   def maxShown(self, value):
      lib.DropBox_set_maxShown(self.impl, value)

   @property
   def pullDown(self): return pyOrNewObject(Window, lib.DropBox_get_pullDown(self.impl))

   @property
   def showNone(self): return lib.DropBox_get_showNone(self.impl)
   @showNone.setter
   def showNone(self, value):
      lib.DropBox_set_showNone(self.impl, value)

   @property
   def selectionColor(self): return Color(impl = lib.DropBox_get_selectionColor(self.impl))
   @selectionColor.setter
   def selectionColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.DropBox_set_selectionColor(self.impl, value.impl)
   # @selectionColor.isset # tofix: how do we get isset?
   # def selectionColor(self): lib.DropBox_isSet_selectionColor(self.impl)

   @property
   def selectionText(self): return Color(impl = lib.DropBox_get_selectionText(self.impl))
   @selectionText.setter
   def selectionText(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.DropBox_set_selectionText(self.impl, value.impl)
   # @selectionText.isset # tofix: how do we get isset?
   # def selectionText(self): lib.DropBox_isSet_selectionText(self.impl)

   @property
   def changeContents(self): return lib.DropBox_get_changeContents(self.impl)
   @changeContents.setter
   def changeContents(self, value):
      lib.DropBox_set_changeContents(self.impl, value)

   @property
   def listBox(self): return pyOrNewObject(ListBox, lib.DropBox_get_listBox(self.impl))

   @property
   def rowCount(self): return lib.DropBox_get_rowCount(self.impl)

   @property
   def button(self): return Button(impl = IPTR(lib, ffi, self, DropBox).button)
   @button.setter
   def button(self, value):
      if not isinstance(value, Button): value = Button(value)
      IPTR(lib, ffi, self, DropBox).button = value.impl

   def addField(self, field):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      lib.DropBox_addField(self.impl, field)

   def addRow(self):
      return pyOrNewObject(DataRow, lib.DropBox_addRow(self.impl))

   def addRowAfter(self, after):
      if after is not None and not isinstance(after, DataRow): after = DataRow(after)
      if after is None: after = ffi.NULL
      return pyOrNewObject(DataRow, lib.DropBox_addRowAfter(self.impl, after))

   def addString(self, string):
      return pyOrNewObject(DataRow, lib.DropBox_addString(self.impl, string.encode('utf8')))

   def addStringf(self, format):
      return pyOrNewObject(DataRow, lib.DropBox_addStringf(self.impl, format.encode('utf8')))

   def clear(self):
      lib.DropBox_clear(self.impl)

   def deleteRow(self, row):
      if row is not None and not isinstance(row, DataRow): row = DataRow(row)
      if row is None: row = ffi.NULL
      lib.DropBox_deleteRow(self.impl, row)

   def findRow(self, tag):
      return pyOrNewObject(DataRow, lib.DropBox_findRow(self.impl, tag))

   def findSubRow(self, tag):
      return pyOrNewObject(DataRow, lib.DropBox_findSubRow(self.impl, tag))

   def getData(self, field):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      return lib.DropBox_getData(self.impl, field)

   def getRowCount(self):
      return lib.DropBox_getRowCount(self.impl)

   def getTag(self):
      return lib.DropBox_getTag(self.impl)

   def fn_unset_DropBox_notifyClose(self, _window, dropBox):
      return lib.DropBox_notifyClose(self.impl, _window.impl, ffi.NULL if dropBox is None else dropBox.impl)

   @property
   def notifyClose(self):
      if hasattr(self, 'fn_DropBox_notifyClose'): return self.fn_DropBox_notifyClose
      else: return self.fn_unset_DropBox_notifyClose
   @notifyClose.setter
   def notifyClose(self, value):
      self.fn_DropBox_notifyClose = value
      lib.Instance_setMethod(self.impl, "NotifyClose".encode('utf8'), cb_DropBox_notifyClose)

   def fn_unset_DropBox_notifyHighlight(self, _window, dropBox, row, mods):
      return lib.DropBox_notifyHighlight(self.impl, _window.impl, ffi.NULL if dropBox is None else dropBox.impl, ffi.NULL if row is None else row.impl, mods)

   @property
   def notifyHighlight(self):
      if hasattr(self, 'fn_DropBox_notifyHighlight'): return self.fn_DropBox_notifyHighlight
      else: return self.fn_unset_DropBox_notifyHighlight
   @notifyHighlight.setter
   def notifyHighlight(self, value):
      self.fn_DropBox_notifyHighlight = value
      lib.Instance_setMethod(self.impl, "NotifyHighlight".encode('utf8'), cb_DropBox_notifyHighlight)

   def fn_unset_DropBox_notifySelect(self, _window, dropBox, row, mods):
      return lib.DropBox_notifySelect(self.impl, _window.impl, ffi.NULL if dropBox is None else dropBox.impl, ffi.NULL if row is None else row.impl, mods)

   @property
   def notifySelect(self):
      if hasattr(self, 'fn_DropBox_notifySelect'): return self.fn_DropBox_notifySelect
      else: return self.fn_unset_DropBox_notifySelect
   @notifySelect.setter
   def notifySelect(self, value):
      self.fn_DropBox_notifySelect = value
      lib.Instance_setMethod(self.impl, "NotifySelect".encode('utf8'), cb_DropBox_notifySelect)

   def fn_unset_DropBox_notifyTextEntry(self, _window, dropBox, string, confirmed):
      return lib.DropBox_notifyTextEntry(self.impl, _window.impl, ffi.NULL if dropBox is None else dropBox.impl, string, confirmed)

   @property
   def notifyTextEntry(self):
      if hasattr(self, 'fn_DropBox_notifyTextEntry'): return self.fn_DropBox_notifyTextEntry
      else: return self.fn_unset_DropBox_notifyTextEntry
   @notifyTextEntry.setter
   def notifyTextEntry(self, value):
      self.fn_DropBox_notifyTextEntry = value
      lib.Instance_setMethod(self.impl, "NotifyTextEntry".encode('utf8'), cb_DropBox_notifyTextEntry)

   def fn_unset_DropBox_onCloseDropDown(self, pullDown):
      return lib.DropBox_onCloseDropDown(self.impl, ffi.NULL if pullDown is None else pullDown.impl)

   @property
   def onCloseDropDown(self):
      if hasattr(self, 'fn_DropBox_onCloseDropDown'): return self.fn_DropBox_onCloseDropDown
      else: return self.fn_unset_DropBox_onCloseDropDown
   @onCloseDropDown.setter
   def onCloseDropDown(self, value):
      self.fn_DropBox_onCloseDropDown = value
      lib.Instance_setMethod(self.impl, "OnCloseDropDown".encode('utf8'), cb_DropBox_onCloseDropDown)

   def fn_unset_DropBox_onDropDown(self):
      return lib.DropBox_onDropDown(self.impl)

   @property
   def onDropDown(self):
      if hasattr(self, 'fn_DropBox_onDropDown'): return self.fn_DropBox_onDropDown
      else: return self.fn_unset_DropBox_onDropDown
   @onDropDown.setter
   def onDropDown(self, value):
      self.fn_DropBox_onDropDown = value
      lib.Instance_setMethod(self.impl, "OnDropDown".encode('utf8'), cb_DropBox_onDropDown)

   def save(self):
      return lib.DropBox_save(self.impl)

   def selectRow(self, row):
      if row is not None and not isinstance(row, DataRow): row = DataRow(row)
      if row is None: row = ffi.NULL
      lib.DropBox_selectRow(self.impl, row)

   def setData(self, field, data):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      return lib.DropBox_setData(self.impl, field, data)

   def sort(self, field, order):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      lib.DropBox_sort(self.impl, field, order)

@ffi.callback("void(Window, EditBox, int, int)")
def cb_EditBox_notifyCaretMove(__w, editBox, line, charPos):
   editBox = pyOrNewObject(EditBox, editBox)
   editBox.fn_EditBox_notifyCaretMove(pyOrNewObject(EditBox, __w), editBox, line, charPos)

@ffi.callback("void(Window, EditBox, BufferLocation *, BufferLocation *, bool)")
def cb_EditBox_notifyCharsAdded(__w, editBox, before, after, pasteOperation):
   editBox = pyOrNewObject(EditBox, editBox)
   editBox.fn_EditBox_notifyCharsAdded(pyOrNewObject(EditBox, __w), editBox, BufferLocation(impl = before), BufferLocation(impl = after), pasteOperation)

@ffi.callback("void(Window, EditBox, BufferLocation *, BufferLocation *, bool)")
def cb_EditBox_notifyCharsDeleted(__w, editBox, beforeLoc, after, pasteOperation):
   editBox = pyOrNewObject(EditBox, editBox)
   editBox.fn_EditBox_notifyCharsDeleted(pyOrNewObject(EditBox, __w), editBox, BufferLocation(impl = beforeLoc), BufferLocation(impl = after), pasteOperation)

@ffi.callback("void(Window, EditBox, EditLine *, Modifiers)")
def cb_EditBox_notifyDoubleClick(__w, editBox, line, mods):
   editBox = pyOrNewObject(EditBox, editBox)
   editBox.fn_EditBox_notifyDoubleClick(pyOrNewObject(EditBox, __w), editBox, EditLine(impl = line), Modifiers(impl = mods))

@ffi.callback("void(Window, EditBox, int, int)")
def cb_EditBox_notifyDropped(__w, editBox, x, y):
   editBox = pyOrNewObject(EditBox, editBox)
   editBox.fn_EditBox_notifyDropped(pyOrNewObject(EditBox, __w), editBox, x, y)

@ffi.callback("void(Window, EditBox, Key, unichar)")
def cb_EditBox_notifyKeyDown(__w, editBox, key, ch):
   editBox = pyOrNewObject(EditBox, editBox)
   editBox.fn_EditBox_notifyKeyDown(pyOrNewObject(EditBox, __w), editBox, Key(impl = key), ch)

@ffi.callback("void(Window, EditBox)")
def cb_EditBox_notifyModified(__w, editBox):
   editBox = pyOrNewObject(EditBox, editBox)
   editBox.fn_EditBox_notifyModified(pyOrNewObject(EditBox, __w), editBox)

@ffi.callback("void(Window, EditBox, bool)")
def cb_EditBox_notifyOvrToggle(__w, editBox, overwrite):
   editBox = pyOrNewObject(EditBox, editBox)
   editBox.fn_EditBox_notifyOvrToggle(pyOrNewObject(EditBox, __w), editBox, overwrite)

@ffi.callback("void(Window, EditBox)")
def cb_EditBox_notifyUnsetModified(__w, editBox):
   editBox = pyOrNewObject(EditBox, editBox)
   editBox.fn_EditBox_notifyUnsetModified(pyOrNewObject(EditBox, __w), editBox)

@ffi.callback("void(Window, EditBox)")
def cb_EditBox_notifyUpdate(__w, editBox):
   editBox = pyOrNewObject(EditBox, editBox)
   editBox.fn_EditBox_notifyUpdate(pyOrNewObject(EditBox, __w), editBox)

class EditBox(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                textHorzScroll = None,
                textVertScroll = None,
                readOnly = None,
                multiLine = None,
                freeCaret = None,
                tabKey = None,
                tabSize = None,
                tabSelection = None,
                smartHome = None,
                autoEmpty = None,
                noCaret = None,
                maxLineSize = None,
                maxNumLines = None,
                useTab = None,
                syntaxHighlighting = None,
                noSelect = None,
                allCaps = None,
                autoSize = None,
                wrap = None,
                contents = None,
                caretFollowsScrolling = None,
                selectionColor = None,
                selectionText = None,
                syntaxColorScheme = None,
                recordUndoEvent = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyCaretMove = None,
                notifyCharsAdded = None,
                notifyCharsDeleted = None,
                notifyDoubleClick = None,
                notifyDropped = None,
                notifyKeyDown = None,
                notifyModified = None,
                notifyOvrToggle = None,
                notifyUnsetModified = None,
                notifyUpdate = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if textHorzScroll is not None:           self.textHorzScroll = textHorzScroll
      if textVertScroll is not None:           self.textVertScroll = textVertScroll
      if readOnly is not None:                 self.readOnly = readOnly
      if multiLine is not None:                self.multiLine = multiLine
      if freeCaret is not None:                self.freeCaret = freeCaret
      if tabKey is not None:                   self.tabKey = tabKey
      if tabSize is not None:                  self.tabSize = tabSize
      if tabSelection is not None:             self.tabSelection = tabSelection
      if smartHome is not None:                self.smartHome = smartHome
      if autoEmpty is not None:                self.autoEmpty = autoEmpty
      if noCaret is not None:                  self.noCaret = noCaret
      if maxLineSize is not None:              self.maxLineSize = maxLineSize
      if maxNumLines is not None:              self.maxNumLines = maxNumLines
      if useTab is not None:                   self.useTab = useTab
      if syntaxHighlighting is not None:       self.syntaxHighlighting = syntaxHighlighting
      if noSelect is not None:                 self.noSelect = noSelect
      if allCaps is not None:                  self.allCaps = allCaps
      if autoSize is not None:                 self.autoSize = autoSize
      if wrap is not None:                     self.wrap = wrap
      if contents is not None:                 self.contents = contents
      if caretFollowsScrolling is not None:    self.caretFollowsScrolling = caretFollowsScrolling
      if selectionColor is not None:           self.selectionColor = selectionColor
      if selectionText is not None:            self.selectionText = selectionText
      if syntaxColorScheme is not None:        self.syntaxColorScheme = syntaxColorScheme
      if recordUndoEvent is not None:          self.recordUndoEvent = recordUndoEvent
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyCaretMove is not None:          self.notifyCaretMove = notifyCaretMove
      if notifyCharsAdded is not None:         self.notifyCharsAdded = notifyCharsAdded
      if notifyCharsDeleted is not None:       self.notifyCharsDeleted = notifyCharsDeleted
      if notifyDoubleClick is not None:        self.notifyDoubleClick = notifyDoubleClick
      if notifyDropped is not None:            self.notifyDropped = notifyDropped
      if notifyKeyDown is not None:            self.notifyKeyDown = notifyKeyDown
      if notifyModified is not None:           self.notifyModified = notifyModified
      if notifyOvrToggle is not None:          self.notifyOvrToggle = notifyOvrToggle
      if notifyUnsetModified is not None:      self.notifyUnsetModified = notifyUnsetModified
      if notifyUpdate is not None:             self.notifyUpdate = notifyUpdate

   @property
   def textHorzScroll(self): return lib.EditBox_get_textHorzScroll(self.impl)
   @textHorzScroll.setter
   def textHorzScroll(self, value):
      lib.EditBox_set_textHorzScroll(self.impl, value)

   @property
   def textVertScroll(self): return lib.EditBox_get_textVertScroll(self.impl)
   @textVertScroll.setter
   def textVertScroll(self, value):
      lib.EditBox_set_textVertScroll(self.impl, value)

   @property
   def readOnly(self): return lib.EditBox_get_readOnly(self.impl)
   @readOnly.setter
   def readOnly(self, value):
      lib.EditBox_set_readOnly(self.impl, value)

   @property
   def multiLine(self): return lib.EditBox_get_multiLine(self.impl)
   @multiLine.setter
   def multiLine(self, value):
      lib.EditBox_set_multiLine(self.impl, value)

   @property
   def freeCaret(self): return lib.EditBox_get_freeCaret(self.impl)
   @freeCaret.setter
   def freeCaret(self, value):
      lib.EditBox_set_freeCaret(self.impl, value)

   @property
   def tabKey(self): return lib.EditBox_get_tabKey(self.impl)
   @tabKey.setter
   def tabKey(self, value):
      lib.EditBox_set_tabKey(self.impl, value)

   @property
   def tabSize(self): return lib.EditBox_get_tabSize(self.impl)
   @tabSize.setter
   def tabSize(self, value):
      lib.EditBox_set_tabSize(self.impl, value)

   @property
   def tabSelection(self): return lib.EditBox_get_tabSelection(self.impl)
   @tabSelection.setter
   def tabSelection(self, value):
      lib.EditBox_set_tabSelection(self.impl, value)

   @property
   def smartHome(self): return lib.EditBox_get_smartHome(self.impl)
   @smartHome.setter
   def smartHome(self, value):
      lib.EditBox_set_smartHome(self.impl, value)

   @property
   def autoEmpty(self): return lib.EditBox_get_autoEmpty(self.impl)
   @autoEmpty.setter
   def autoEmpty(self, value):
      lib.EditBox_set_autoEmpty(self.impl, value)

   @property
   def noCaret(self): return lib.EditBox_get_noCaret(self.impl)
   @noCaret.setter
   def noCaret(self, value):
      lib.EditBox_set_noCaret(self.impl, value)

   @property
   def maxLineSize(self): return lib.EditBox_get_maxLineSize(self.impl)
   @maxLineSize.setter
   def maxLineSize(self, value):
      lib.EditBox_set_maxLineSize(self.impl, value)

   @property
   def maxNumLines(self): return lib.EditBox_get_maxNumLines(self.impl)
   @maxNumLines.setter
   def maxNumLines(self, value):
      lib.EditBox_set_maxNumLines(self.impl, value)

   @property
   def useTab(self): return lib.EditBox_get_useTab(self.impl)
   @useTab.setter
   def useTab(self, value):
      lib.EditBox_set_useTab(self.impl, value)

   @property
   def syntaxHighlighting(self): return lib.EditBox_get_syntaxHighlighting(self.impl)
   @syntaxHighlighting.setter
   def syntaxHighlighting(self, value):
      lib.EditBox_set_syntaxHighlighting(self.impl, value)

   @property
   def noSelect(self): return lib.EditBox_get_noSelect(self.impl)
   @noSelect.setter
   def noSelect(self, value):
      lib.EditBox_set_noSelect(self.impl, value)

   @property
   def allCaps(self): return lib.EditBox_get_allCaps(self.impl)
   @allCaps.setter
   def allCaps(self, value):
      lib.EditBox_set_allCaps(self.impl, value)

   @property
   def autoSize(self): return lib.EditBox_get_autoSize(self.impl)
   @autoSize.setter
   def autoSize(self, value):
      lib.EditBox_set_autoSize(self.impl, value)

   @property
   def wrap(self): return lib.EditBox_get_wrap(self.impl)
   @wrap.setter
   def wrap(self, value):
      lib.EditBox_set_wrap(self.impl, value)

   @property
   def numLines(self): return lib.EditBox_get_numLines(self.impl)

   @property
   def lineNumber(self): return lib.EditBox_get_lineNumber(self.impl)

   @property
   def column(self): return lib.EditBox_get_column(self.impl)

   @property
   def charPos(self): return lib.EditBox_get_charPos(self.impl)

   @property
   def firstLine(self): return lib.EditBox_get_firstLine(self.impl, value.impl)

   @property
   def lastLine(self): return lib.EditBox_get_lastLine(self.impl, value.impl)

   @property
   def line(self): return lib.EditBox_get_line(self.impl, value.impl)

   @property
   def contents(self): value = lib.EditBox_get_contents(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @contents.setter
   def contents(self, value):
      lib.EditBox_set_contents(self.impl, value.encode('utf8'))

   @property
   def overwrite(self): return lib.EditBox_get_overwrite(self.impl)

   @property
   def caretFollowsScrolling(self): return lib.EditBox_get_caretFollowsScrolling(self.impl)
   @caretFollowsScrolling.setter
   def caretFollowsScrolling(self, value):
      lib.EditBox_set_caretFollowsScrolling(self.impl, value)

   @property
   def multiLineContents(self): value = lib.EditBox_get_multiLineContents(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')

   @property
   def selectionColor(self): return Color(impl = lib.EditBox_get_selectionColor(self.impl))
   @selectionColor.setter
   def selectionColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.EditBox_set_selectionColor(self.impl, value.impl)
   # @selectionColor.isset # tofix: how do we get isset?
   # def selectionColor(self): lib.EditBox_isSet_selectionColor(self.impl)

   @property
   def selectionText(self): return Color(impl = lib.EditBox_get_selectionText(self.impl))
   @selectionText.setter
   def selectionText(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.EditBox_set_selectionText(self.impl, value.impl)
   # @selectionText.isset # tofix: how do we get isset?
   # def selectionText(self): lib.EditBox_isSet_selectionText(self.impl)

   @property
   def syntaxColorScheme(self): return None
   @syntaxColorScheme.setter
   def syntaxColorScheme(self, value):
      if not isinstance(value, SyntaxColorScheme): value = SyntaxColorScheme(value)
      lib.EditBox_set_syntaxColorScheme(self.impl, value.impl)

   @property
   def recordUndoEvent(self): return lib.EditBox_get_recordUndoEvent(self.impl)
   @recordUndoEvent.setter
   def recordUndoEvent(self, value):
      lib.EditBox_set_recordUndoEvent(self.impl, value)

   def addCh(self, ch):
      if ch is not None and not isinstance(ch, unichar): ch = unichar(ch)
      if ch is None: ch = ffi.NULL
      return lib.EditBox_addCh(self.impl, ch)

   def addS(self, string):
      return lib.EditBox_addS(self.impl, string.encode('utf8'))

   def backSpace(self):
      lib.EditBox_backSpace(self.impl)

   def centerOnCursor(self):
      lib.EditBox_centerOnCursor(self.impl)

   def clear(self):
      lib.EditBox_clear(self.impl)

   def clearLine(self):
      lib.EditBox_clearLine(self.impl)

   def copy(self):
      lib.EditBox_copy(self.impl)

   def cut(self):
      lib.EditBox_cut(self.impl)

   def delete(self, line1, y1, x1, line2, y2, x2):
      if line1 is not None and not isinstance(line1, EditLine): line1 = EditLine(line1)
      if line1 is None: line1 = ffi.NULL
      if line2 is not None and not isinstance(line2, EditLine): line2 = EditLine(line2)
      if line2 is None: line2 = ffi.NULL
      lib.EditBox_delete(self.impl, line1, y1, x1, line2, y2, x2)

   def deleteSelection(self):
      lib.EditBox_deleteSelection(self.impl)

   def deselect(self):
      lib.EditBox_deselect(self.impl)

   def end(self):
      lib.EditBox_end(self.impl)

   def find(self, text, matchWord, matchCase, isSearchDown):
      return lib.EditBox_find(self.impl, text.encode('utf8'), matchWord, matchCase, isSearchDown)

   def findInSelection(self, text, matchWord, matchCase, l2, y2, x2):
      if l2 is not None and not isinstance(l2, EditLine): l2 = EditLine(l2)
      if l2 is None: l2 = ffi.NULL
      return lib.EditBox_findInSelection(self.impl, text.encode('utf8'), matchWord, matchCase, l2, y2, x2)

   def getSel(self, text, addCr):
      lib.EditBox_getSel(self.impl, text.encode('utf8'), addCr)

   def getSelPos(self, l1, l2, reorder):
      y1 = ffi.new("int *")
      x1 = ffi.new("int *")
      y2 = ffi.new("int *")
      x2 = ffi.new("int *")
      lib.EditBox_getSelPos(self.impl, l1, y1, x1, l2, y2, x2, reorder)
      return y1[0], x1[0], y2[0], x2[0]

   def getText(self, text, _l1, _y1, _x1, _l2, _y2, _x2, addCr, addSpaces):
      if _l1 is not None and not isinstance(_l1, EditLine): _l1 = EditLine(_l1)
      if _l1 is None: _l1 = ffi.NULL
      if _l2 is not None and not isinstance(_l2, EditLine): _l2 = EditLine(_l2)
      if _l2 is None: _l2 = ffi.NULL
      return lib.EditBox_getText(self.impl, text.encode('utf8'), _l1, _y1, _x1, _l2, _y2, _x2, addCr, addSpaces)

   def goToLineNum(self, lineNum):
      return lib.EditBox_goToLineNum(self.impl, lineNum)

   def goToPosition(self, line, y, x):
      if line is not None and not isinstance(line, EditLine): line = EditLine(line)
      if line is None: line = ffi.NULL
      return lib.EditBox_goToPosition(self.impl, line, y, x)

   def home(self):
      lib.EditBox_home(self.impl)

   def lineDown(self):
      lib.EditBox_lineDown(self.impl)

   def lineUp(self):
      lib.EditBox_lineUp(self.impl)

   def load(self, f):
      if f is not None and not isinstance(f, File): f = File(f)
      if f is None: f = ffi.NULL
      lib.EditBox_load(self.impl, f)

   def modified(self):
      lib.EditBox_modified(self.impl)

   def fn_unset_EditBox_notifyCaretMove(self, _window, editBox, line, charPos):
      return lib.EditBox_notifyCaretMove(self.impl, _window.impl, ffi.NULL if editBox is None else editBox.impl, line, charPos)

   @property
   def notifyCaretMove(self):
      if hasattr(self, 'fn_EditBox_notifyCaretMove'): return self.fn_EditBox_notifyCaretMove
      else: return self.fn_unset_EditBox_notifyCaretMove
   @notifyCaretMove.setter
   def notifyCaretMove(self, value):
      self.fn_EditBox_notifyCaretMove = value
      lib.Instance_setMethod(self.impl, "NotifyCaretMove".encode('utf8'), cb_EditBox_notifyCaretMove)

   def fn_unset_EditBox_notifyCharsAdded(self, _window, editBox, before, after, pasteOperation):
      return lib.EditBox_notifyCharsAdded(self.impl, _window.impl, ffi.NULL if editBox is None else editBox.impl, ffi.NULL if before is None else before.impl, ffi.NULL if after is None else after.impl, pasteOperation)

   @property
   def notifyCharsAdded(self):
      if hasattr(self, 'fn_EditBox_notifyCharsAdded'): return self.fn_EditBox_notifyCharsAdded
      else: return self.fn_unset_EditBox_notifyCharsAdded
   @notifyCharsAdded.setter
   def notifyCharsAdded(self, value):
      self.fn_EditBox_notifyCharsAdded = value
      lib.Instance_setMethod(self.impl, "NotifyCharsAdded".encode('utf8'), cb_EditBox_notifyCharsAdded)

   def fn_unset_EditBox_notifyCharsDeleted(self, _window, editBox, beforeLoc, after, pasteOperation):
      return lib.EditBox_notifyCharsDeleted(self.impl, _window.impl, ffi.NULL if editBox is None else editBox.impl, ffi.NULL if beforeLoc is None else beforeLoc.impl, ffi.NULL if after is None else after.impl, pasteOperation)

   @property
   def notifyCharsDeleted(self):
      if hasattr(self, 'fn_EditBox_notifyCharsDeleted'): return self.fn_EditBox_notifyCharsDeleted
      else: return self.fn_unset_EditBox_notifyCharsDeleted
   @notifyCharsDeleted.setter
   def notifyCharsDeleted(self, value):
      self.fn_EditBox_notifyCharsDeleted = value
      lib.Instance_setMethod(self.impl, "NotifyCharsDeleted".encode('utf8'), cb_EditBox_notifyCharsDeleted)

   def fn_unset_EditBox_notifyDoubleClick(self, _window, editBox, line, mods):
      return lib.EditBox_notifyDoubleClick(self.impl, _window.impl, ffi.NULL if editBox is None else editBox.impl, ffi.NULL if line is None else line.impl, mods)

   @property
   def notifyDoubleClick(self):
      if hasattr(self, 'fn_EditBox_notifyDoubleClick'): return self.fn_EditBox_notifyDoubleClick
      else: return self.fn_unset_EditBox_notifyDoubleClick
   @notifyDoubleClick.setter
   def notifyDoubleClick(self, value):
      self.fn_EditBox_notifyDoubleClick = value
      lib.Instance_setMethod(self.impl, "NotifyDoubleClick".encode('utf8'), cb_EditBox_notifyDoubleClick)

   def fn_unset_EditBox_notifyDropped(self, _window, editBox, x, y):
      return lib.EditBox_notifyDropped(self.impl, _window.impl, ffi.NULL if editBox is None else editBox.impl, x, y)

   @property
   def notifyDropped(self):
      if hasattr(self, 'fn_EditBox_notifyDropped'): return self.fn_EditBox_notifyDropped
      else: return self.fn_unset_EditBox_notifyDropped
   @notifyDropped.setter
   def notifyDropped(self, value):
      self.fn_EditBox_notifyDropped = value
      lib.Instance_setMethod(self.impl, "NotifyDropped".encode('utf8'), cb_EditBox_notifyDropped)

   def fn_unset_EditBox_notifyKeyDown(self, _window, editBox, key, ch):
      return lib.EditBox_notifyKeyDown(self.impl, _window.impl, ffi.NULL if editBox is None else editBox.impl, key, ch)

   @property
   def notifyKeyDown(self):
      if hasattr(self, 'fn_EditBox_notifyKeyDown'): return self.fn_EditBox_notifyKeyDown
      else: return self.fn_unset_EditBox_notifyKeyDown
   @notifyKeyDown.setter
   def notifyKeyDown(self, value):
      self.fn_EditBox_notifyKeyDown = value
      lib.Instance_setMethod(self.impl, "NotifyKeyDown".encode('utf8'), cb_EditBox_notifyKeyDown)

   def fn_unset_EditBox_notifyModified(self, _window, editBox):
      return lib.EditBox_notifyModified(self.impl, _window.impl, ffi.NULL if editBox is None else editBox.impl)

   @property
   def notifyModified(self):
      if hasattr(self, 'fn_EditBox_notifyModified'): return self.fn_EditBox_notifyModified
      else: return self.fn_unset_EditBox_notifyModified
   @notifyModified.setter
   def notifyModified(self, value):
      self.fn_EditBox_notifyModified = value
      lib.Instance_setMethod(self.impl, "NotifyModified".encode('utf8'), cb_EditBox_notifyModified)

   def fn_unset_EditBox_notifyOvrToggle(self, _window, editBox, overwrite):
      return lib.EditBox_notifyOvrToggle(self.impl, _window.impl, ffi.NULL if editBox is None else editBox.impl, overwrite)

   @property
   def notifyOvrToggle(self):
      if hasattr(self, 'fn_EditBox_notifyOvrToggle'): return self.fn_EditBox_notifyOvrToggle
      else: return self.fn_unset_EditBox_notifyOvrToggle
   @notifyOvrToggle.setter
   def notifyOvrToggle(self, value):
      self.fn_EditBox_notifyOvrToggle = value
      lib.Instance_setMethod(self.impl, "NotifyOvrToggle".encode('utf8'), cb_EditBox_notifyOvrToggle)

   def fn_unset_EditBox_notifyUnsetModified(self, _window, editBox):
      return lib.EditBox_notifyUnsetModified(self.impl, _window.impl, ffi.NULL if editBox is None else editBox.impl)

   @property
   def notifyUnsetModified(self):
      if hasattr(self, 'fn_EditBox_notifyUnsetModified'): return self.fn_EditBox_notifyUnsetModified
      else: return self.fn_unset_EditBox_notifyUnsetModified
   @notifyUnsetModified.setter
   def notifyUnsetModified(self, value):
      self.fn_EditBox_notifyUnsetModified = value
      lib.Instance_setMethod(self.impl, "NotifyUnsetModified".encode('utf8'), cb_EditBox_notifyUnsetModified)

   def fn_unset_EditBox_notifyUpdate(self, _window, editBox):
      return lib.EditBox_notifyUpdate(self.impl, _window.impl, ffi.NULL if editBox is None else editBox.impl)

   @property
   def notifyUpdate(self):
      if hasattr(self, 'fn_EditBox_notifyUpdate'): return self.fn_EditBox_notifyUpdate
      else: return self.fn_unset_EditBox_notifyUpdate
   @notifyUpdate.setter
   def notifyUpdate(self, value):
      self.fn_EditBox_notifyUpdate = value
      lib.Instance_setMethod(self.impl, "NotifyUpdate".encode('utf8'), cb_EditBox_notifyUpdate)

   def pageDown(self):
      lib.EditBox_pageDown(self.impl)

   def pageUp(self):
      lib.EditBox_pageUp(self.impl)

   def paste(self):
      lib.EditBox_paste(self.impl)

   def printf(self, format):
      lib.EditBox_printf(self.impl, format.encode('utf8'))

   def putCh(self, ch):
      if ch is not None and not isinstance(ch, unichar): ch = unichar(ch)
      if ch is None: ch = ffi.NULL
      lib.EditBox_putCh(self.impl, ch)

   def putS(self, string):
      lib.EditBox_putS(self.impl, string.encode('utf8'))

   def record(self, action):
      if action is not None and not isinstance(action, UndoAction): action = UndoAction(action)
      if action is None: action = ffi.NULL
      lib.EditBox_record(self.impl, action)

   def redo(self):
      lib.EditBox_redo(self.impl)

   def save(self, f, cr):
      if f is not None and not isinstance(f, File): f = File(f)
      if f is None: f = ffi.NULL
      lib.EditBox_save(self.impl, f, cr)

   def selSize(self):
      return lib.EditBox_selSize(self.impl)

   def select(self, line1, y1, x1, line2, y2, x2):
      if line1 is not None and not isinstance(line1, EditLine): line1 = EditLine(line1)
      if line1 is None: line1 = ffi.NULL
      if line2 is not None and not isinstance(line2, EditLine): line2 = EditLine(line2)
      if line2 is None: line2 = ffi.NULL
      lib.EditBox_select(self.impl, line1, y1, x1, line2, y2, x2)

   def selectAll(self):
      lib.EditBox_selectAll(self.impl)

   def setContents(self, format):
      lib.EditBox_setContents(self.impl, format.encode('utf8'))

   def setCursorToView(self):
      lib.EditBox_setCursorToView(self.impl)

   def setModified(self, flag):
      lib.EditBox_setModified(self.impl, flag)

   def setSelPos(self, l1, y1, x1, l2, y2, x2):
      if l1 is not None and not isinstance(l1, EditLine): l1 = EditLine(l1)
      if l1 is None: l1 = ffi.NULL
      if l2 is not None and not isinstance(l2, EditLine): l2 = EditLine(l2)
      if l2 is None: l2 = ffi.NULL
      lib.EditBox_setSelPos(self.impl, l1, y1, x1, l2, y2, x2)

   def setViewToCursor(self, setCaret):
      lib.EditBox_setViewToCursor(self.impl, setCaret)

   def undo(self):
      lib.EditBox_undo(self.impl)

class EditBoxFindResult:
   notFound = lib.EditBoxFindResult_notFound
   found    = lib.EditBoxFindResult_found
   wrapped  = lib.EditBoxFindResult_wrapped

class EditBoxStream(File):
   def __init__(self,
                input = None,
                output = None,
                buffered = None,
                editBox = None,
                readData = None,
                writeData = None,
                close = None,
                closeInput = None,
                closeOutput = None,
                eof = None,
                getSize = None,
                getc = None,
                lock = None,
                putc = None,
                puts = None,
                read = None,
                seek = None,
                seek64 = None,
                tell = None,
                truncate = None,
                unlock = None,
                write = None,
                impl = None):
      File.__init__(self, impl = impl)
      if input is not None:       self.input = input
      if output is not None:      self.output = output
      if buffered is not None:    self.buffered = buffered
      if editBox is not None:     self.editBox = editBox
      if readData is not None:    self.readData = readData
      if writeData is not None:   self.writeData = writeData
      if close is not None:       self.close = close
      if closeInput is not None:  self.closeInput = closeInput
      if closeOutput is not None: self.closeOutput = closeOutput
      if eof is not None:         self.eof = eof
      if getSize is not None:     self.getSize = getSize
      if getc is not None:        self.getc = getc
      if lock is not None:        self.lock = lock
      if putc is not None:        self.putc = putc
      if puts is not None:        self.puts = puts
      if read is not None:        self.read = read
      if seek is not None:        self.seek = seek
      if seek64 is not None:      self.seek64 = seek64
      if tell is not None:        self.tell = tell
      if truncate is not None:    self.truncate = truncate
      if unlock is not None:      self.unlock = unlock
      if write is not None:       self.write = write

   @property
   def editBox(self): return pyOrNewObject(EditBox, lib.EditBoxStream_get_editBox(self.impl))
   @editBox.setter
   def editBox(self, value):
      if not isinstance(value, EditBox): value = EditBox(value)
      lib.EditBoxStream_set_editBox(self.impl, value.impl)

   def deleteBytes(self, count):
      lib.EditBoxStream_deleteBytes(self.impl, count)

class EditLine:
   def __init__(self, text = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("EditLine *", lib.Instance_new(lib.class_EditLine))
         if text is not None: self.text      = text
         if text is not None: self.text = text

   @property
   def text(self): value = lib.EditLine_get_text(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @text.setter
   def text(self, value):
      lib.EditLine_set_text(self.impl, value.encode('utf8'))

   @property
   def prev(self): return lib.EditLine_get_prev(self.impl, value.impl)

   @property
   def next(self): return lib.EditLine_get_next(self.impl, value.impl)

   @property
   def count(self): return lib.EditLine_get_count(self.impl)

@ffi.callback("void(Window, EditableSelectorButton, char **, char **)")
def cb_EditableSelectorButton_onRename(__w, button, oldName, newName):
   button = pyOrNewObject(EditableSelectorButton, button)
   button.fn_EditableSelectorButton_onRename(pyOrNewObject(EditableSelectorButton, __w), button, oldName, newName)

class EditableSelectorButton(SelectorButton):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                isRadio = None,
                isCheckbox = None,
                bevel = None,
                bevelOver = None,
                toggle = None,
                checked = None,
                alignment = None,
                bitmap = None,
                stayUp = None,
                scaleBitmap = None,
                keyRepeat = None,
                symbol = None,
                ellipsis = None,
                stayDown = None,
                offset = None,
                buttonState = None,
                bitmapAlignment = None,
                focusHolder = None,
                renameable = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyClicked = None,
                notifyDoubleClick = None,
                notifyMouseLeave = None,
                notifyMouseMove = None,
                notifyMouseOver = None,
                notifyPushed = None,
                notifyReleased = None,
                onRename = None,
                impl = None):
      SelectorButton.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if isRadio is not None:                  self.isRadio = isRadio
      if isCheckbox is not None:               self.isCheckbox = isCheckbox
      if bevel is not None:                    self.bevel = bevel
      if bevelOver is not None:                self.bevelOver = bevelOver
      if toggle is not None:                   self.toggle = toggle
      if checked is not None:                  self.checked = checked
      if alignment is not None:                self.alignment = alignment
      if bitmap is not None:                   self.bitmap = bitmap
      if stayUp is not None:                   self.stayUp = stayUp
      if scaleBitmap is not None:              self.scaleBitmap = scaleBitmap
      if keyRepeat is not None:                self.keyRepeat = keyRepeat
      if symbol is not None:                   self.symbol = symbol
      if ellipsis is not None:                 self.ellipsis = ellipsis
      if stayDown is not None:                 self.stayDown = stayDown
      if offset is not None:                   self.offset = offset
      if buttonState is not None:              self.buttonState = buttonState
      if bitmapAlignment is not None:          self.bitmapAlignment = bitmapAlignment
      if focusHolder is not None:              self.focusHolder = focusHolder
      if renameable is not None:               self.renameable = renameable
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyClicked is not None:            self.notifyClicked = notifyClicked
      if notifyDoubleClick is not None:        self.notifyDoubleClick = notifyDoubleClick
      if notifyMouseLeave is not None:         self.notifyMouseLeave = notifyMouseLeave
      if notifyMouseMove is not None:          self.notifyMouseMove = notifyMouseMove
      if notifyMouseOver is not None:          self.notifyMouseOver = notifyMouseOver
      if notifyPushed is not None:             self.notifyPushed = notifyPushed
      if notifyReleased is not None:           self.notifyReleased = notifyReleased
      if onRename is not None:                 self.onRename = onRename

   @property
   def focusHolder(self): return Window(impl = IPTR(lib, ffi, self, EditableSelectorButton).focusHolder)
   @focusHolder.setter
   def focusHolder(self, value):
      if not isinstance(value, Window): value = Window(value)
      IPTR(lib, ffi, self, EditableSelectorButton).focusHolder = value.impl

   @property
   def renameable(self): return lib.EditableSelectorButton_get_renameable(self.impl)
   @renameable.setter
   def renameable(self, value):
      lib.EditableSelectorButton_set_renameable(self.impl, value)

   @property
   def editBox(self): return pyOrNewObject(EditBox, lib.EditableSelectorButton_get_editBox(self.impl))

   def fn_unset_EditableSelectorButton_onRename(self, _window, button, oldName, newName):
      return lib.EditableSelectorButton_onRename(self.impl, _window.impl, ffi.NULL if button is None else button.impl, oldName, newName)

   @property
   def onRename(self):
      if hasattr(self, 'fn_EditableSelectorButton_onRename'): return self.fn_EditableSelectorButton_onRename
      else: return self.fn_unset_EditableSelectorButton_onRename
   @onRename.setter
   def onRename(self, value):
      self.fn_EditableSelectorButton_onRename = value
      lib.Instance_setMethod(self.impl, "OnRename".encode('utf8'), cb_EditableSelectorButton_onRename)

class Label(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                labeledWindow = None,
                isGroupBox = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if labeledWindow is not None:            self.labeledWindow = labeledWindow
      if isGroupBox is not None:               self.isGroupBox = isGroupBox
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def labeledWindow(self): return pyOrNewObject(Window, lib.Label_get_labeledWindow(self.impl))
   @labeledWindow.setter
   def labeledWindow(self, value):
      if not isinstance(value, Window): value = Window(value)
      lib.Label_set_labeledWindow(self.impl, value.impl)

   @property
   def isGroupBox(self): return lib.Label_get_isGroupBox(self.impl)
   @isGroupBox.setter
   def isGroupBox(self, value):
      lib.Label_set_isGroupBox(self.impl, value)

@ffi.callback("void(Window, ListBox, DataRow)")
def cb_ListBox_notifyChanged(__w, listBox, row):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyChanged(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row))

@ffi.callback("void(Window, ListBox, DataRow, bool)")
def cb_ListBox_notifyCollapse(__w, listBox, row, collapsed):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyCollapse(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row), collapsed)

@ffi.callback("void(Window, ListBox, int, int, Modifiers)")
def cb_ListBox_notifyDoubleClick(__w, listBox, x, y, mods):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyDoubleClick(pyOrNewObject(ListBox, __w), listBox, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, ListBox, DataRow)")
def cb_ListBox_notifyEditDone(__w, listBox, row):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyEditDone(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row))

@ffi.callback("void(Window, ListBox, DataRow)")
def cb_ListBox_notifyEdited(__w, listBox, row):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyEdited(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row))

@ffi.callback("void(Window, ListBox, DataRow)")
def cb_ListBox_notifyEditing(__w, listBox, row):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyEditing(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row))

@ffi.callback("void(Window, ListBox, DataRow, Modifiers)")
def cb_ListBox_notifyHighlight(__w, listBox, row, mods):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyHighlight(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row), Modifiers(impl = mods))

@ffi.callback("void(Window, ListBox, DataRow, Key, unichar)")
def cb_ListBox_notifyKeyDown(__w, listBox, row, key, ch):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyKeyDown(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row), Key(impl = key), ch)

@ffi.callback("void(Window, ListBox, DataRow, Key, unichar)")
def cb_ListBox_notifyKeyHit(__w, listBox, row, key, ch):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyKeyHit(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row), Key(impl = key), ch)

@ffi.callback("void(Window, ListBox, DataRow)")
def cb_ListBox_notifyModified(__w, listBox, row):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyModified(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row))

@ffi.callback("void(Window, ListBox, DataRow, Modifiers)")
def cb_ListBox_notifyMove(__w, listBox, row, mods):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyMove(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row), Modifiers(impl = mods))

@ffi.callback("void(Window, ListBox, DataRow, Modifiers)")
def cb_ListBox_notifyMoved(__w, listBox, row, mods):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyMoved(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row), Modifiers(impl = mods))

@ffi.callback("void(Window, ListBox, DataField, Modifiers)")
def cb_ListBox_notifyMovedField(__w, listBox, field, mods):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyMovedField(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataField, field), Modifiers(impl = mods))

@ffi.callback("void(Window, ListBox, DataRow, Modifiers)")
def cb_ListBox_notifyReclick(__w, listBox, row, mods):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyReclick(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row), Modifiers(impl = mods))

@ffi.callback("void(Window, ListBox, DataField, Modifiers)")
def cb_ListBox_notifyResized(__w, listBox, field, mods):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyResized(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataField, field), Modifiers(impl = mods))

@ffi.callback("void(Window, ListBox, int, int, Modifiers)")
def cb_ListBox_notifyRightClick(__w, listBox, x, y, mods):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifyRightClick(pyOrNewObject(ListBox, __w), listBox, x, y, Modifiers(impl = mods))

@ffi.callback("void(Window, ListBox, DataRow, Modifiers)")
def cb_ListBox_notifySelect(__w, listBox, row, mods):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifySelect(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataRow, row), Modifiers(impl = mods))

@ffi.callback("void(Window, ListBox, DataField, Modifiers)")
def cb_ListBox_notifySort(__w, listBox, field, mods):
   listBox = pyOrNewObject(ListBox, listBox)
   listBox.fn_ListBox_notifySort(pyOrNewObject(ListBox, __w), listBox, pyOrNewObject(DataField, field), Modifiers(impl = mods))

class ListBox(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                freeSelect = None,
                currentRow = None,
                currentField = None,
                rowHeight = None,
                typingTimeout = None,
                moveRows = None,
                moveFields = None,
                resizable = None,
                autoScroll = None,
                alwaysHighLight = None,
                hasClearHeader = None,
                hasHeader = None,
                multiSelect = None,
                alwaysEdit = None,
                fullRowSelect = None,
                collapseControl = None,
                treeBranches = None,
                rootCollapseButton = None,
                sortable = None,
                noDragging = None,
                fillLastField = None,
                selectionColor = None,
                selectionText = None,
                stippleColor = None,
                expandOnAdd = None,
                typingTimeOut = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyChanged = None,
                notifyCollapse = None,
                notifyDoubleClick = None,
                notifyEditDone = None,
                notifyEdited = None,
                notifyEditing = None,
                notifyHighlight = None,
                notifyKeyDown = None,
                notifyKeyHit = None,
                notifyModified = None,
                notifyMove = None,
                notifyMoved = None,
                notifyMovedField = None,
                notifyReclick = None,
                notifyResized = None,
                notifyRightClick = None,
                notifySelect = None,
                notifySort = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if freeSelect is not None:               self.freeSelect = freeSelect
      if currentRow is not None:               self.currentRow = currentRow
      if currentField is not None:             self.currentField = currentField
      if rowHeight is not None:                self.rowHeight = rowHeight
      if typingTimeout is not None:            self.typingTimeout = typingTimeout
      if moveRows is not None:                 self.moveRows = moveRows
      if moveFields is not None:               self.moveFields = moveFields
      if resizable is not None:                self.resizable = resizable
      if autoScroll is not None:               self.autoScroll = autoScroll
      if alwaysHighLight is not None:          self.alwaysHighLight = alwaysHighLight
      if hasClearHeader is not None:           self.hasClearHeader = hasClearHeader
      if hasHeader is not None:                self.hasHeader = hasHeader
      if multiSelect is not None:              self.multiSelect = multiSelect
      if alwaysEdit is not None:               self.alwaysEdit = alwaysEdit
      if fullRowSelect is not None:            self.fullRowSelect = fullRowSelect
      if collapseControl is not None:          self.collapseControl = collapseControl
      if treeBranches is not None:             self.treeBranches = treeBranches
      if rootCollapseButton is not None:       self.rootCollapseButton = rootCollapseButton
      if sortable is not None:                 self.sortable = sortable
      if noDragging is not None:               self.noDragging = noDragging
      if fillLastField is not None:            self.fillLastField = fillLastField
      if selectionColor is not None:           self.selectionColor = selectionColor
      if selectionText is not None:            self.selectionText = selectionText
      if stippleColor is not None:             self.stippleColor = stippleColor
      if expandOnAdd is not None:              self.expandOnAdd = expandOnAdd
      if typingTimeOut is not None:            self.typingTimeOut = typingTimeOut
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyChanged is not None:            self.notifyChanged = notifyChanged
      if notifyCollapse is not None:           self.notifyCollapse = notifyCollapse
      if notifyDoubleClick is not None:        self.notifyDoubleClick = notifyDoubleClick
      if notifyEditDone is not None:           self.notifyEditDone = notifyEditDone
      if notifyEdited is not None:             self.notifyEdited = notifyEdited
      if notifyEditing is not None:            self.notifyEditing = notifyEditing
      if notifyHighlight is not None:          self.notifyHighlight = notifyHighlight
      if notifyKeyDown is not None:            self.notifyKeyDown = notifyKeyDown
      if notifyKeyHit is not None:             self.notifyKeyHit = notifyKeyHit
      if notifyModified is not None:           self.notifyModified = notifyModified
      if notifyMove is not None:               self.notifyMove = notifyMove
      if notifyMoved is not None:              self.notifyMoved = notifyMoved
      if notifyMovedField is not None:         self.notifyMovedField = notifyMovedField
      if notifyReclick is not None:            self.notifyReclick = notifyReclick
      if notifyResized is not None:            self.notifyResized = notifyResized
      if notifyRightClick is not None:         self.notifyRightClick = notifyRightClick
      if notifySelect is not None:             self.notifySelect = notifySelect
      if notifySort is not None:               self.notifySort = notifySort

   @property
   def freeSelect(self): return lib.ListBox_get_freeSelect(self.impl)
   @freeSelect.setter
   def freeSelect(self, value):
      lib.ListBox_set_freeSelect(self.impl, value)

   @property
   def currentRow(self): return pyOrNewObject(DataRow, lib.ListBox_get_currentRow(self.impl))
   @currentRow.setter
   def currentRow(self, value):
      if not isinstance(value, DataRow): value = DataRow(value)
      lib.ListBox_set_currentRow(self.impl, value.impl)

   @property
   def currentField(self): return pyOrNewObject(DataField, lib.ListBox_get_currentField(self.impl))
   @currentField.setter
   def currentField(self, value):
      if not isinstance(value, DataField): value = DataField(value)
      lib.ListBox_set_currentField(self.impl, value.impl)

   @property
   def rowHeight(self): return lib.ListBox_get_rowHeight(self.impl)
   @rowHeight.setter
   def rowHeight(self, value):
      lib.ListBox_set_rowHeight(self.impl, value)
   # @rowHeight.isset # tofix: how do we get isset?
   # def rowHeight(self): lib.ListBox_isSet_rowHeight(self.impl)

   @property
   def typingTimeout(self): return Seconds(lib.ListBox_get_typingTimeout(self.impl))
   @typingTimeout.setter
   def typingTimeout(self, value):
      if not isinstance(value, Time): value = Seconds(value)
      lib.ListBox_set_typingTimeout(self.impl, value.impl)

   @property
   def moveRows(self): return lib.ListBox_get_moveRows(self.impl)
   @moveRows.setter
   def moveRows(self, value):
      lib.ListBox_set_moveRows(self.impl, value)

   @property
   def moveFields(self): return lib.ListBox_get_moveFields(self.impl)
   @moveFields.setter
   def moveFields(self, value):
      lib.ListBox_set_moveFields(self.impl, value)

   @property
   def resizable(self): return lib.ListBox_get_resizable(self.impl)
   @resizable.setter
   def resizable(self, value):
      lib.ListBox_set_resizable(self.impl, value)

   @property
   def autoScroll(self): return lib.ListBox_get_autoScroll(self.impl)
   @autoScroll.setter
   def autoScroll(self, value):
      lib.ListBox_set_autoScroll(self.impl, value)

   @property
   def alwaysHighLight(self): return lib.ListBox_get_alwaysHighLight(self.impl)
   @alwaysHighLight.setter
   def alwaysHighLight(self, value):
      lib.ListBox_set_alwaysHighLight(self.impl, value)

   @property
   def hasClearHeader(self): return lib.ListBox_get_hasClearHeader(self.impl)
   @hasClearHeader.setter
   def hasClearHeader(self, value):
      lib.ListBox_set_hasClearHeader(self.impl, value)

   @property
   def hasHeader(self): return lib.ListBox_get_hasHeader(self.impl)
   @hasHeader.setter
   def hasHeader(self, value):
      lib.ListBox_set_hasHeader(self.impl, value)

   @property
   def multiSelect(self): return lib.ListBox_get_multiSelect(self.impl)
   @multiSelect.setter
   def multiSelect(self, value):
      lib.ListBox_set_multiSelect(self.impl, value)

   @property
   def alwaysEdit(self): return lib.ListBox_get_alwaysEdit(self.impl)
   @alwaysEdit.setter
   def alwaysEdit(self, value):
      lib.ListBox_set_alwaysEdit(self.impl, value)

   @property
   def fullRowSelect(self): return lib.ListBox_get_fullRowSelect(self.impl)
   @fullRowSelect.setter
   def fullRowSelect(self, value):
      lib.ListBox_set_fullRowSelect(self.impl, value)

   @property
   def collapseControl(self): return lib.ListBox_get_collapseControl(self.impl)
   @collapseControl.setter
   def collapseControl(self, value):
      lib.ListBox_set_collapseControl(self.impl, value)

   @property
   def treeBranches(self): return lib.ListBox_get_treeBranches(self.impl)
   @treeBranches.setter
   def treeBranches(self, value):
      lib.ListBox_set_treeBranches(self.impl, value)

   @property
   def rootCollapseButton(self): return lib.ListBox_get_rootCollapseButton(self.impl)
   @rootCollapseButton.setter
   def rootCollapseButton(self, value):
      lib.ListBox_set_rootCollapseButton(self.impl, value)

   @property
   def sortable(self): return lib.ListBox_get_sortable(self.impl)
   @sortable.setter
   def sortable(self, value):
      lib.ListBox_set_sortable(self.impl, value)

   @property
   def noDragging(self): return lib.ListBox_get_noDragging(self.impl)
   @noDragging.setter
   def noDragging(self, value):
      lib.ListBox_set_noDragging(self.impl, value)

   @property
   def fillLastField(self): return lib.ListBox_get_fillLastField(self.impl)
   @fillLastField.setter
   def fillLastField(self, value):
      lib.ListBox_set_fillLastField(self.impl, value)

   @property
   def numSelections(self): return lib.ListBox_get_numSelections(self.impl)

   @property
   def currentIndex(self): return lib.ListBox_get_currentIndex(self.impl)

   @property
   def lastRow(self): return pyOrNewObject(DataRow, lib.ListBox_get_lastRow(self.impl))

   @property
   def firstRow(self): return pyOrNewObject(DataRow, lib.ListBox_get_firstRow(self.impl))

   @property
   def rowCount(self): return lib.ListBox_get_rowCount(self.impl)

   @property
   def firstField(self): return pyOrNewObject(DataField, lib.ListBox_get_firstField(self.impl))

   @property
   def selectionColor(self): return Color(impl = lib.ListBox_get_selectionColor(self.impl))
   @selectionColor.setter
   def selectionColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.ListBox_set_selectionColor(self.impl, value.impl)
   # @selectionColor.isset # tofix: how do we get isset?
   # def selectionColor(self): lib.ListBox_isSet_selectionColor(self.impl)

   @property
   def selectionText(self): return Color(impl = lib.ListBox_get_selectionText(self.impl))
   @selectionText.setter
   def selectionText(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.ListBox_set_selectionText(self.impl, value.impl)
   # @selectionText.isset # tofix: how do we get isset?
   # def selectionText(self): lib.ListBox_isSet_selectionText(self.impl)

   @property
   def stippleColor(self): return Color(impl = lib.ListBox_get_stippleColor(self.impl))
   @stippleColor.setter
   def stippleColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.ListBox_set_stippleColor(self.impl, value.impl)

   @property
   def expandOnAdd(self): return lib.ListBox_get_expandOnAdd(self.impl)
   @expandOnAdd.setter
   def expandOnAdd(self, value):
      lib.ListBox_set_expandOnAdd(self.impl, value)

   @property
   def typingTimeOut(self): return IPTR(lib, ffi, self, ListBox).typingTimeOut
   @typingTimeOut.setter
   def typingTimeOut(self, value): IPTR(lib, ffi, self, ListBox).typingTimeOut = value

   def addField(self, addedField):
      if addedField is not None and not isinstance(addedField, DataField): addedField = DataField(addedField)
      if addedField is None: addedField = ffi.NULL
      lib.ListBox_addField(self.impl, addedField)

   def addRow(self):
      return pyOrNewObject(DataRow, lib.ListBox_addRow(self.impl))

   def addRowAfter(self, after):
      if after is not None and not isinstance(after, DataRow): after = DataRow(after)
      if after is None: after = ffi.NULL
      return pyOrNewObject(DataRow, lib.ListBox_addRowAfter(self.impl, after))

   def addRowNone(self):
      return pyOrNewObject(DataRow, lib.ListBox_addRowNone(self.impl))

   def addString(self, string):
      return pyOrNewObject(DataRow, lib.ListBox_addString(self.impl, string.encode('utf8')))

   def addStringf(self, format):
      return pyOrNewObject(DataRow, lib.ListBox_addStringf(self.impl, format.encode('utf8')))

   def clear(self):
      lib.ListBox_clear(self.impl)

   def clearFields(self):
      lib.ListBox_clearFields(self.impl)

   def deleteRow(self, row):
      if row is not None and not isinstance(row, DataRow): row = DataRow(row)
      if row is None: row = ffi.NULL
      lib.ListBox_deleteRow(self.impl, row)

   def findRow(self, tag):
      return pyOrNewObject(DataRow, lib.ListBox_findRow(self.impl, tag))

   def findString(self, searchedString):
      return pyOrNewObject(DataRow, lib.ListBox_findString(self.impl, searchedString.encode('utf8')))

   def findSubRow(self, tag):
      return pyOrNewObject(DataRow, lib.ListBox_findSubRow(self.impl, tag))

   def findSubString(self, subString):
      return pyOrNewObject(DataRow, lib.ListBox_findSubString(self.impl, subString.encode('utf8')))

   def findSubStringAfter(self, after, subString):
      if after is not None and not isinstance(after, DataRow): after = DataRow(after)
      if after is None: after = ffi.NULL
      return pyOrNewObject(DataRow, lib.ListBox_findSubStringAfter(self.impl, after, subString.encode('utf8')))

   def findSubStringi(self, subString):
      return pyOrNewObject(DataRow, lib.ListBox_findSubStringi(self.impl, subString.encode('utf8')))

   def getData(self, field):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      return lib.ListBox_getData(self.impl, field)

   def getMultiSelection(self, list):
      if list is not None and not isinstance(list, OldList): list = OldList(list)
      list = ffi.NULL if list is None else list.impl
      lib.ListBox_getMultiSelection(self.impl, ffi.cast("OldList *", list))

   def getTag(self):
      return lib.ListBox_getTag(self.impl)

   def fn_unset_ListBox_notifyChanged(self, _window, listBox, row):
      return lib.ListBox_notifyChanged(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl)

   @property
   def notifyChanged(self):
      if hasattr(self, 'fn_ListBox_notifyChanged'): return self.fn_ListBox_notifyChanged
      else: return self.fn_unset_ListBox_notifyChanged
   @notifyChanged.setter
   def notifyChanged(self, value):
      self.fn_ListBox_notifyChanged = value
      lib.Instance_setMethod(self.impl, "NotifyChanged".encode('utf8'), cb_ListBox_notifyChanged)

   def fn_unset_ListBox_notifyCollapse(self, _window, listBox, row, collapsed):
      return lib.ListBox_notifyCollapse(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl, collapsed)

   @property
   def notifyCollapse(self):
      if hasattr(self, 'fn_ListBox_notifyCollapse'): return self.fn_ListBox_notifyCollapse
      else: return self.fn_unset_ListBox_notifyCollapse
   @notifyCollapse.setter
   def notifyCollapse(self, value):
      self.fn_ListBox_notifyCollapse = value
      lib.Instance_setMethod(self.impl, "NotifyCollapse".encode('utf8'), cb_ListBox_notifyCollapse)

   def fn_unset_ListBox_notifyDoubleClick(self, _window, listBox, x, y, mods):
      return lib.ListBox_notifyDoubleClick(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, x, y, mods)

   @property
   def notifyDoubleClick(self):
      if hasattr(self, 'fn_ListBox_notifyDoubleClick'): return self.fn_ListBox_notifyDoubleClick
      else: return self.fn_unset_ListBox_notifyDoubleClick
   @notifyDoubleClick.setter
   def notifyDoubleClick(self, value):
      self.fn_ListBox_notifyDoubleClick = value
      lib.Instance_setMethod(self.impl, "NotifyDoubleClick".encode('utf8'), cb_ListBox_notifyDoubleClick)

   def fn_unset_ListBox_notifyEditDone(self, _window, listBox, row):
      return lib.ListBox_notifyEditDone(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl)

   @property
   def notifyEditDone(self):
      if hasattr(self, 'fn_ListBox_notifyEditDone'): return self.fn_ListBox_notifyEditDone
      else: return self.fn_unset_ListBox_notifyEditDone
   @notifyEditDone.setter
   def notifyEditDone(self, value):
      self.fn_ListBox_notifyEditDone = value
      lib.Instance_setMethod(self.impl, "NotifyEditDone".encode('utf8'), cb_ListBox_notifyEditDone)

   def fn_unset_ListBox_notifyEdited(self, _window, listBox, row):
      return lib.ListBox_notifyEdited(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl)

   @property
   def notifyEdited(self):
      if hasattr(self, 'fn_ListBox_notifyEdited'): return self.fn_ListBox_notifyEdited
      else: return self.fn_unset_ListBox_notifyEdited
   @notifyEdited.setter
   def notifyEdited(self, value):
      self.fn_ListBox_notifyEdited = value
      lib.Instance_setMethod(self.impl, "NotifyEdited".encode('utf8'), cb_ListBox_notifyEdited)

   def fn_unset_ListBox_notifyEditing(self, _window, listBox, row):
      return lib.ListBox_notifyEditing(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl)

   @property
   def notifyEditing(self):
      if hasattr(self, 'fn_ListBox_notifyEditing'): return self.fn_ListBox_notifyEditing
      else: return self.fn_unset_ListBox_notifyEditing
   @notifyEditing.setter
   def notifyEditing(self, value):
      self.fn_ListBox_notifyEditing = value
      lib.Instance_setMethod(self.impl, "NotifyEditing".encode('utf8'), cb_ListBox_notifyEditing)

   def fn_unset_ListBox_notifyHighlight(self, _window, listBox, row, mods):
      return lib.ListBox_notifyHighlight(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl, mods)

   @property
   def notifyHighlight(self):
      if hasattr(self, 'fn_ListBox_notifyHighlight'): return self.fn_ListBox_notifyHighlight
      else: return self.fn_unset_ListBox_notifyHighlight
   @notifyHighlight.setter
   def notifyHighlight(self, value):
      self.fn_ListBox_notifyHighlight = value
      lib.Instance_setMethod(self.impl, "NotifyHighlight".encode('utf8'), cb_ListBox_notifyHighlight)

   def fn_unset_ListBox_notifyKeyDown(self, _window, listBox, row, key, ch):
      return lib.ListBox_notifyKeyDown(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl, key, ch)

   @property
   def notifyKeyDown(self):
      if hasattr(self, 'fn_ListBox_notifyKeyDown'): return self.fn_ListBox_notifyKeyDown
      else: return self.fn_unset_ListBox_notifyKeyDown
   @notifyKeyDown.setter
   def notifyKeyDown(self, value):
      self.fn_ListBox_notifyKeyDown = value
      lib.Instance_setMethod(self.impl, "NotifyKeyDown".encode('utf8'), cb_ListBox_notifyKeyDown)

   def fn_unset_ListBox_notifyKeyHit(self, _window, listBox, row, key, ch):
      return lib.ListBox_notifyKeyHit(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl, key, ch)

   @property
   def notifyKeyHit(self):
      if hasattr(self, 'fn_ListBox_notifyKeyHit'): return self.fn_ListBox_notifyKeyHit
      else: return self.fn_unset_ListBox_notifyKeyHit
   @notifyKeyHit.setter
   def notifyKeyHit(self, value):
      self.fn_ListBox_notifyKeyHit = value
      lib.Instance_setMethod(self.impl, "NotifyKeyHit".encode('utf8'), cb_ListBox_notifyKeyHit)

   def fn_unset_ListBox_notifyModified(self, _window, listBox, row):
      return lib.ListBox_notifyModified(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl)

   @property
   def notifyModified(self):
      if hasattr(self, 'fn_ListBox_notifyModified'): return self.fn_ListBox_notifyModified
      else: return self.fn_unset_ListBox_notifyModified
   @notifyModified.setter
   def notifyModified(self, value):
      self.fn_ListBox_notifyModified = value
      lib.Instance_setMethod(self.impl, "NotifyModified".encode('utf8'), cb_ListBox_notifyModified)

   def fn_unset_ListBox_notifyMove(self, _window, listBox, row, mods):
      return lib.ListBox_notifyMove(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl, mods)

   @property
   def notifyMove(self):
      if hasattr(self, 'fn_ListBox_notifyMove'): return self.fn_ListBox_notifyMove
      else: return self.fn_unset_ListBox_notifyMove
   @notifyMove.setter
   def notifyMove(self, value):
      self.fn_ListBox_notifyMove = value
      lib.Instance_setMethod(self.impl, "NotifyMove".encode('utf8'), cb_ListBox_notifyMove)

   def fn_unset_ListBox_notifyMoved(self, _window, listBox, row, mods):
      return lib.ListBox_notifyMoved(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl, mods)

   @property
   def notifyMoved(self):
      if hasattr(self, 'fn_ListBox_notifyMoved'): return self.fn_ListBox_notifyMoved
      else: return self.fn_unset_ListBox_notifyMoved
   @notifyMoved.setter
   def notifyMoved(self, value):
      self.fn_ListBox_notifyMoved = value
      lib.Instance_setMethod(self.impl, "NotifyMoved".encode('utf8'), cb_ListBox_notifyMoved)

   def fn_unset_ListBox_notifyMovedField(self, _window, listBox, field, mods):
      return lib.ListBox_notifyMovedField(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if field is None else field.impl, mods)

   @property
   def notifyMovedField(self):
      if hasattr(self, 'fn_ListBox_notifyMovedField'): return self.fn_ListBox_notifyMovedField
      else: return self.fn_unset_ListBox_notifyMovedField
   @notifyMovedField.setter
   def notifyMovedField(self, value):
      self.fn_ListBox_notifyMovedField = value
      lib.Instance_setMethod(self.impl, "NotifyMovedField".encode('utf8'), cb_ListBox_notifyMovedField)

   def fn_unset_ListBox_notifyReclick(self, _window, listBox, row, mods):
      return lib.ListBox_notifyReclick(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl, mods)

   @property
   def notifyReclick(self):
      if hasattr(self, 'fn_ListBox_notifyReclick'): return self.fn_ListBox_notifyReclick
      else: return self.fn_unset_ListBox_notifyReclick
   @notifyReclick.setter
   def notifyReclick(self, value):
      self.fn_ListBox_notifyReclick = value
      lib.Instance_setMethod(self.impl, "NotifyReclick".encode('utf8'), cb_ListBox_notifyReclick)

   def fn_unset_ListBox_notifyResized(self, _window, listBox, field, mods):
      return lib.ListBox_notifyResized(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if field is None else field.impl, mods)

   @property
   def notifyResized(self):
      if hasattr(self, 'fn_ListBox_notifyResized'): return self.fn_ListBox_notifyResized
      else: return self.fn_unset_ListBox_notifyResized
   @notifyResized.setter
   def notifyResized(self, value):
      self.fn_ListBox_notifyResized = value
      lib.Instance_setMethod(self.impl, "NotifyResized".encode('utf8'), cb_ListBox_notifyResized)

   def fn_unset_ListBox_notifyRightClick(self, _window, listBox, x, y, mods):
      return lib.ListBox_notifyRightClick(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, x, y, mods)

   @property
   def notifyRightClick(self):
      if hasattr(self, 'fn_ListBox_notifyRightClick'): return self.fn_ListBox_notifyRightClick
      else: return self.fn_unset_ListBox_notifyRightClick
   @notifyRightClick.setter
   def notifyRightClick(self, value):
      self.fn_ListBox_notifyRightClick = value
      lib.Instance_setMethod(self.impl, "NotifyRightClick".encode('utf8'), cb_ListBox_notifyRightClick)

   def fn_unset_ListBox_notifySelect(self, _window, listBox, row, mods):
      return lib.ListBox_notifySelect(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if row is None else row.impl, mods)

   @property
   def notifySelect(self):
      if hasattr(self, 'fn_ListBox_notifySelect'): return self.fn_ListBox_notifySelect
      else: return self.fn_unset_ListBox_notifySelect
   @notifySelect.setter
   def notifySelect(self, value):
      self.fn_ListBox_notifySelect = value
      lib.Instance_setMethod(self.impl, "NotifySelect".encode('utf8'), cb_ListBox_notifySelect)

   def fn_unset_ListBox_notifySort(self, _window, listBox, field, mods):
      return lib.ListBox_notifySort(self.impl, _window.impl, ffi.NULL if listBox is None else listBox.impl, ffi.NULL if field is None else field.impl, mods)

   @property
   def notifySort(self):
      if hasattr(self, 'fn_ListBox_notifySort'): return self.fn_ListBox_notifySort
      else: return self.fn_unset_ListBox_notifySort
   @notifySort.setter
   def notifySort(self, value):
      self.fn_ListBox_notifySort = value
      lib.Instance_setMethod(self.impl, "NotifySort".encode('utf8'), cb_ListBox_notifySort)

   def removeField(self, field):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      lib.ListBox_removeField(self.impl, field)

   def selectRow(self, row):
      if row is not None and not isinstance(row, DataRow): row = DataRow(row)
      if row is None: row = ffi.NULL
      lib.ListBox_selectRow(self.impl, row)

   def setData(self, field, data):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      return lib.ListBox_setData(self.impl, field, data)

   def sort(self, field, order):
      if field is not None and not isinstance(field, DataField): field = DataField(field)
      if field is None: field = ffi.NULL
      lib.ListBox_sort(self.impl, field, order)

   def stopEditing(self, save):
      lib.ListBox_stopEditing(self.impl, save)

class Menu(Instance):
   def __init__(self,
                parent = None,
                text = None,
                hotKey = None,
                hasMargin = None,
                copyText = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if parent is not None:    self.parent = parent
      if text is not None:      self.text = text
      if hotKey is not None:    self.hotKey = hotKey
      if hasMargin is not None: self.hasMargin = hasMargin
      if copyText is not None:  self.copyText = copyText

   @property
   def parent(self): return None
   @parent.setter
   def parent(self, value):
      if not isinstance(value, Menu): value = Menu(value)
      lib.Menu_set_parent(self.impl, value.impl)

   @property
   def text(self): return None
   @text.setter
   def text(self, value):
      lib.Menu_set_text(self.impl, value.encode('utf8'))

   @property
   def hotKey(self): return None
   @hotKey.setter
   def hotKey(self, value):
      if not isinstance(value, Key): value = Key(value)
      lib.Menu_set_hotKey(self.impl, value.impl)

   @property
   def hasMargin(self): return None
   @hasMargin.setter
   def hasMargin(self, value):
      lib.Menu_set_hasMargin(self.impl, value)

   @property
   def copyText(self): return None
   @copyText.setter
   def copyText(self, value):
      lib.Menu_set_copyText(self.impl, value)

   def addDynamic(self, addedItem, master, persistent):
      if addedItem is not None and not isinstance(addedItem, MenuItem): addedItem = MenuItem(addedItem)
      if addedItem is None: addedItem = ffi.NULL
      if master is not None and not isinstance(master, Window): master = Window(master)
      if master is None: master = ffi.NULL
      lib.Menu_addDynamic(self.impl, addedItem, master, persistent)

   def addItem(self, item):
      if item is not None and not isinstance(item, MenuItem): item = MenuItem(item)
      if item is None: item = ffi.NULL
      lib.Menu_addItem(self.impl, item)

   def addSubMenu(self, subMenu):
      if subMenu is not None and not isinstance(subMenu, Menu): subMenu = Menu(subMenu)
      if subMenu is None: subMenu = ffi.NULL
      lib.Menu_addSubMenu(self.impl, subMenu)

   def clean(self, window):
      if window is not None and not isinstance(window, Window): window = Window(window)
      if window is None: window = ffi.NULL
      lib.Menu_clean(self.impl, window)

   def clear(self):
      lib.Menu_clear(self.impl)

   def findItem(self, notifySelect, id):
      return pyOrNewObject(MenuItem, lib.Menu_findItem(self.impl, id))

   def findMenu(self, name):
      return pyOrNewObject(Menu, lib.Menu_findMenu(self.impl, name.encode('utf8')))

   def merge(self, menuBeingMerged, menuBar, window):
      if menuBeingMerged is not None and not isinstance(menuBeingMerged, Menu): menuBeingMerged = Menu(menuBeingMerged)
      if menuBeingMerged is None: menuBeingMerged = ffi.NULL
      if window is not None and not isinstance(window, Window): window = Window(window)
      if window is None: window = ffi.NULL
      lib.Menu_merge(self.impl, menuBeingMerged, menuBar, window)

   def removeItem(self, item):
      if item is not None and not isinstance(item, MenuItem): item = MenuItem(item)
      if item is None: item = ffi.NULL
      lib.Menu_removeItem(self.impl, item)

class MenuDivider(MenuItem):
   def __init__(self,
                parent = None,
                text = None,
                hotKey = None,
                accelerator = None,
                checked = None,
                disabled = None,
                checkable = None,
                isRadio = None,
                id = None,
                bitmap = None,
                copyText = None,
                bold = None,
                notifySelect = None,
                impl = None):
      MenuItem.__init__(self, impl = impl)
      if parent is not None:       self.parent = parent
      if text is not None:         self.text = text
      if hotKey is not None:       self.hotKey = hotKey
      if accelerator is not None:  self.accelerator = accelerator
      if checked is not None:      self.checked = checked
      if disabled is not None:     self.disabled = disabled
      if checkable is not None:    self.checkable = checkable
      if isRadio is not None:      self.isRadio = isRadio
      if id is not None:           self.id = id
      if bitmap is not None:       self.bitmap = bitmap
      if copyText is not None:     self.copyText = copyText
      if bold is not None:         self.bold = bold
      if notifySelect is not None: self.notifySelect = notifySelect

class MenuPlacement(MenuItem):
   def __init__(self,
                parent = None,
                text = None,
                hotKey = None,
                accelerator = None,
                checked = None,
                disabled = None,
                checkable = None,
                isRadio = None,
                id = None,
                bitmap = None,
                copyText = None,
                bold = None,
                notifySelect = None,
                impl = None):
      MenuItem.__init__(self, impl = impl)
      if parent is not None:       self.parent = parent
      if text is not None:         self.text = text
      if hotKey is not None:       self.hotKey = hotKey
      if accelerator is not None:  self.accelerator = accelerator
      if checked is not None:      self.checked = checked
      if disabled is not None:     self.disabled = disabled
      if checkable is not None:    self.checkable = checkable
      if isRadio is not None:      self.isRadio = isRadio
      if id is not None:           self.id = id
      if bitmap is not None:       self.bitmap = bitmap
      if copyText is not None:     self.copyText = copyText
      if bold is not None:         self.bold = bold
      if notifySelect is not None: self.notifySelect = notifySelect

class OldArray(Instance):
   def __init__(self,
                type = None,
                size = None,
                data = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if type is not None: self.type = type
      if size is not None: self.size = size
      if data is not None: self.data = data

   @property
   def type(self): return Class(impl = IPTR(lib, ffi, self, OldArray).type)
   @type.setter
   def type(self, value):
      if not isinstance(value, Class): value = Class(value)
      IPTR(lib, ffi, self, OldArray).type = value.impl

   @property
   def size(self): return lib.OldArray_get_size(self.impl)
   @size.setter
   def size(self, value):
      lib.OldArray_set_size(self.impl, value)

   @property
   def data(self): return None
   @data.setter
   def data(self, value):
      lib.OldArray_set_data(self.impl, value)

@ffi.callback("void(Window, PaneSplitter)")
def cb_PaneSplitter_notifyResized(__w, splitter):
   splitter = pyOrNewObject(PaneSplitter, splitter)
   splitter.fn_PaneSplitter_notifyResized(pyOrNewObject(PaneSplitter, __w), splitter)

class PaneSplitter(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolSize = None,
                toolGap = None,
                leftPane = None,
                rightPane = None,
                topPane = None,
                bottomPane = None,
                scaleSplit = None,
                orientation = None,
                split = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyResized = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolSize is not None:                 self.toolSize = toolSize
      if toolGap is not None:                  self.toolGap = toolGap
      if leftPane is not None:                 self.leftPane = leftPane
      if rightPane is not None:                self.rightPane = rightPane
      if topPane is not None:                  self.topPane = topPane
      if bottomPane is not None:               self.bottomPane = bottomPane
      if scaleSplit is not None:               self.scaleSplit = scaleSplit
      if orientation is not None:              self.orientation = orientation
      if split is not None:                    self.split = split
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyResized is not None:            self.notifyResized = notifyResized

   @property
   def toolSize(self): return lib.PaneSplitter_get_toolSize(self.impl)
   @toolSize.setter
   def toolSize(self, value):
      lib.PaneSplitter_set_toolSize(self.impl, value)

   @property
   def toolGap(self): return lib.PaneSplitter_get_toolGap(self.impl)
   @toolGap.setter
   def toolGap(self, value):
      lib.PaneSplitter_set_toolGap(self.impl, value)

   @property
   def leftPane(self): return pyOrNewObject(Window, lib.PaneSplitter_get_leftPane(self.impl))
   @leftPane.setter
   def leftPane(self, value):
      if not isinstance(value, Window): value = Window(value)
      lib.PaneSplitter_set_leftPane(self.impl, value.impl)

   @property
   def rightPane(self): return pyOrNewObject(Window, lib.PaneSplitter_get_rightPane(self.impl))
   @rightPane.setter
   def rightPane(self, value):
      if not isinstance(value, Window): value = Window(value)
      lib.PaneSplitter_set_rightPane(self.impl, value.impl)

   @property
   def topPane(self): return pyOrNewObject(Window, lib.PaneSplitter_get_topPane(self.impl))
   @topPane.setter
   def topPane(self, value):
      if not isinstance(value, Window): value = Window(value)
      lib.PaneSplitter_set_topPane(self.impl, value.impl)

   @property
   def bottomPane(self): return pyOrNewObject(Window, lib.PaneSplitter_get_bottomPane(self.impl))
   @bottomPane.setter
   def bottomPane(self, value):
      if not isinstance(value, Window): value = Window(value)
      lib.PaneSplitter_set_bottomPane(self.impl, value.impl)

   @property
   def scaleSplit(self): return lib.PaneSplitter_get_scaleSplit(self.impl)
   @scaleSplit.setter
   def scaleSplit(self, value):
      lib.PaneSplitter_set_scaleSplit(self.impl, value)

   @property
   def orientation(self): return lib.PaneSplitter_get_orientation(self.impl, value)
   @orientation.setter
   def orientation(self, value):
      lib.PaneSplitter_set_orientation(self.impl, value)

   @property
   def split(self): return lib.PaneSplitter_get_split(self.impl)
   @split.setter
   def split(self, value):
      lib.PaneSplitter_set_split(self.impl, value)

   def fn_unset_PaneSplitter_notifyResized(self, _window, splitter):
      return lib.PaneSplitter_notifyResized(self.impl, _window.impl, ffi.NULL if splitter is None else splitter.impl)

   @property
   def notifyResized(self):
      if hasattr(self, 'fn_PaneSplitter_notifyResized'): return self.fn_PaneSplitter_notifyResized
      else: return self.fn_unset_PaneSplitter_notifyResized
   @notifyResized.setter
   def notifyResized(self, value):
      self.fn_PaneSplitter_notifyResized = value
      lib.Instance_setMethod(self.impl, "NotifyResized".encode('utf8'), cb_PaneSplitter_notifyResized)

@ffi.callback("void(Window, PathBox)")
def cb_PathBox_notifyModified(__w, pathBox):
   pathBox = pyOrNewObject(PathBox, pathBox)
   pathBox.fn_PathBox_notifyModified(pyOrNewObject(PathBox, __w), pathBox)

class PathBox(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                typeExpected = None,
                browseDialog = None,
                path = None,
                selectionColor = None,
                selectionText = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyModified = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if typeExpected is not None:             self.typeExpected = typeExpected
      if browseDialog is not None:             self.browseDialog = browseDialog
      if path is not None:                     self.path = path
      if selectionColor is not None:           self.selectionColor = selectionColor
      if selectionText is not None:            self.selectionText = selectionText
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyModified is not None:           self.notifyModified = notifyModified

   @property
   def editBox(self): return pyOrNewObject(EditBox, lib.PathBox_get_editBox(self.impl))

   @property
   def typeExpected(self): return None
   @typeExpected.setter
   def typeExpected(self, value):
      lib.PathBox_set_typeExpected(self.impl, value)

   @property
   def browseDialog(self): return pyOrNewObject(FileDialog, lib.PathBox_get_browseDialog(self.impl))
   @browseDialog.setter
   def browseDialog(self, value):
      if not isinstance(value, FileDialog): value = FileDialog(value)
      lib.PathBox_set_browseDialog(self.impl, value.impl)

   @property
   def path(self): value = lib.PathBox_get_path(self.impl) if self is not None and self.impl != ffi.NULL else ffi.NULL; return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @path.setter
   def path(self, value):
      if not isinstance(value, String): value = String(value)
      lib.PathBox_set_path(self.impl, value.impl.encode('utf8'))

   @property
   def slashPath(self): value = lib.PathBox_get_slashPath(self.impl) if self is not None and self.impl != ffi.NULL else ffi.NULL; return None if value == ffi.NULL else ffi.string(value).decode('utf8')

   @property
   def systemPath(self): value = lib.PathBox_get_systemPath(self.impl) if self is not None and self.impl != ffi.NULL else ffi.NULL; return None if value == ffi.NULL else ffi.string(value).decode('utf8')

   @property
   def selectionColor(self): return Color(impl = lib.PathBox_get_selectionColor(self.impl))
   @selectionColor.setter
   def selectionColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.PathBox_set_selectionColor(self.impl, value.impl)

   @property
   def selectionText(self): return Color(impl = lib.PathBox_get_selectionText(self.impl))
   @selectionText.setter
   def selectionText(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.PathBox_set_selectionText(self.impl, value.impl)

   def deselect(self):
      lib.PathBox_deselect(self.impl)

   def end(self):
      lib.PathBox_end(self.impl)

   def home(self):
      lib.PathBox_home(self.impl)

   def fn_unset_PathBox_notifyModified(self, _window, pathBox):
      return lib.PathBox_notifyModified(self.impl, _window.impl, ffi.NULL if pathBox is None else pathBox.impl)

   @property
   def notifyModified(self):
      if hasattr(self, 'fn_PathBox_notifyModified'): return self.fn_PathBox_notifyModified
      else: return self.fn_unset_PathBox_notifyModified
   @notifyModified.setter
   def notifyModified(self, value):
      self.fn_PathBox_notifyModified = value
      lib.Instance_setMethod(self.impl, "NotifyModified".encode('utf8'), cb_PathBox_notifyModified)

   def selectAll(self):
      lib.PathBox_selectAll(self.impl)

class PathTypeExpected:
   none      = lib.PathTypeExpected_none
   any       = lib.PathTypeExpected_any
   directory = lib.PathTypeExpected_directory
   file      = lib.PathTypeExpected_file

class Picture(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                tint = None,
                image = None,
                filter = None,
                bitmapImage = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if tint is not None:                     self.tint = tint
      if image is not None:                    self.image = image
      if filter is not None:                   self.filter = filter
      if bitmapImage is not None:              self.bitmapImage = bitmapImage
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def tint(self): return None
   @tint.setter
   def tint(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.Picture_set_tint(self.impl, value.impl)

   @property
   def image(self): return pyOrNewObject(BitmapResource, lib.Picture_get_image(self.impl))
   @image.setter
   def image(self, value):
      if not isinstance(value, BitmapResource): value = BitmapResource(value)
      lib.Picture_set_image(self.impl, value.impl)

   @property
   def filter(self): return lib.Picture_get_filter(self.impl)
   @filter.setter
   def filter(self, value):
      lib.Picture_set_filter(self.impl, value)

   @property
   def bitmapImage(self): return None
   @bitmapImage.setter
   def bitmapImage(self, value):
      if not isinstance(value, Bitmap): value = Bitmap(value)
      lib.Picture_set_bitmapImage(self.impl, value.impl)

class PopupMenu(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                isMenuBar = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if isMenuBar is not None:                self.isMenuBar = isMenuBar
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def isMenuBar(self): return None
   @isMenuBar.setter
   def isMenuBar(self, value):
      lib.PopupMenu_set_isMenuBar(self.impl, value)

   @property
   def focus(self): return lib.PopupMenu_get_focus(self.impl)

class ProgressBar(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                progress = None,
                range = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if progress is not None:                 self.progress = progress
      if range is not None:                    self.range = range
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def progress(self): return lib.ProgressBar_get_progress(self.impl)
   @progress.setter
   def progress(self, value):
      lib.ProgressBar_set_progress(self.impl, value)

   @property
   def range(self): return lib.ProgressBar_get_range(self.impl)
   @range.setter
   def range(self, value):
      lib.ProgressBar_set_range(self.impl, value)

class SavingDataBox(DataBox):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                type = None,
                data = None,
                fieldData = None,
                editor = None,
                readOnly = None,
                keepEditor = None,
                autoSize = None,
                needUpdate = None,
                stringValue = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyChanged = None,
                notifyModified = None,
                onConfigure = None,
                setData = None,
                impl = None):
      DataBox.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if type is not None:                     self.type = type
      if data is not None:                     self.data = data
      if fieldData is not None:                self.fieldData = fieldData
      if editor is not None:                   self.editor = editor
      if readOnly is not None:                 self.readOnly = readOnly
      if keepEditor is not None:               self.keepEditor = keepEditor
      if autoSize is not None:                 self.autoSize = autoSize
      if needUpdate is not None:               self.needUpdate = needUpdate
      if stringValue is not None:              self.stringValue = stringValue
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyChanged is not None:            self.notifyChanged = notifyChanged
      if notifyModified is not None:           self.notifyModified = notifyModified
      if onConfigure is not None:              self.onConfigure = onConfigure
      if setData is not None:                  self.setData = setData

   @property
   def type(self): return Class(impl = IPTR(lib, ffi, self, SavingDataBox).type)
   @type.setter
   def type(self, value):
      if not isinstance(value, Class): value = Class(value)
      IPTR(lib, ffi, self, SavingDataBox).type = value.impl

   @property
   def data(self): return IPTR(lib, ffi, self, SavingDataBox).data
   @data.setter
   def data(self, value): IPTR(lib, ffi, self, SavingDataBox).data = value

   @property
   def fieldData(self): return IPTR(lib, ffi, self, SavingDataBox).fieldData
   @fieldData.setter
   def fieldData(self, value): IPTR(lib, ffi, self, SavingDataBox).fieldData = value

   @property
   def editor(self): return Window(impl = IPTR(lib, ffi, self, SavingDataBox).editor)
   @editor.setter
   def editor(self, value):
      if not isinstance(value, Window): value = Window(value)
      IPTR(lib, ffi, self, SavingDataBox).editor = value.impl

   @property
   def readOnly(self): return IPTR(lib, ffi, self, SavingDataBox).readOnly
   @readOnly.setter
   def readOnly(self, value): IPTR(lib, ffi, self, SavingDataBox).readOnly = value

   @property
   def keepEditor(self): return IPTR(lib, ffi, self, SavingDataBox).keepEditor
   @keepEditor.setter
   def keepEditor(self, value): IPTR(lib, ffi, self, SavingDataBox).keepEditor = value

   @property
   def autoSize(self): return IPTR(lib, ffi, self, SavingDataBox).autoSize
   @autoSize.setter
   def autoSize(self, value): IPTR(lib, ffi, self, SavingDataBox).autoSize = value

   @property
   def needUpdate(self): return IPTR(lib, ffi, self, SavingDataBox).needUpdate
   @needUpdate.setter
   def needUpdate(self, value): IPTR(lib, ffi, self, SavingDataBox).needUpdate = value

   @property
   def stringValue(self): return String(impl = IPTR(lib, ffi, self, SavingDataBox).stringValue)
   @stringValue.setter
   def stringValue(self, value):
      if not isinstance(value, String): value = String(value)
      IPTR(lib, ffi, self, SavingDataBox).stringValue = value.impl

@ffi.callback("void(Window, ScrollBar, ScrollBarAction, int, Key)")
def cb_ScrollBar_notifyScrolling(__w, scrollBar, action, position, key):
   scrollBar = pyOrNewObject(ScrollBar, scrollBar)
   scrollBar.fn_ScrollBar_notifyScrolling(pyOrNewObject(ScrollBar, __w), scrollBar, ScrollBarAction(impl = action), position, Key(impl = key))

class ScrollBar(CommonControl):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                direction = None,
                windowOwned = None,
                snap = None,
                range = None,
                seen = None,
                total = None,
                lineStep = None,
                pageStep = None,
                thumbPosition = None,
                downBtn = None,
                upBtn = None,
                thumb = None,
                thumbSize = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyScrolling = None,
                impl = None):
      CommonControl.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if direction is not None:                self.direction = direction
      if windowOwned is not None:              self.windowOwned = windowOwned
      if snap is not None:                     self.snap = snap
      if range is not None:                    self.range = range
      if seen is not None:                     self.seen = seen
      if total is not None:                    self.total = total
      if lineStep is not None:                 self.lineStep = lineStep
      if pageStep is not None:                 self.pageStep = pageStep
      if thumbPosition is not None:            self.thumbPosition = thumbPosition
      if downBtn is not None:                  self.downBtn = downBtn
      if upBtn is not None:                    self.upBtn = upBtn
      if thumb is not None:                    self.thumb = thumb
      if thumbSize is not None:                self.thumbSize = thumbSize
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyScrolling is not None:          self.notifyScrolling = notifyScrolling

   @property
   def direction(self): return lib.ScrollBar_get_direction(self.impl, value)
   @direction.setter
   def direction(self, value):
      lib.ScrollBar_set_direction(self.impl, value)

   @property
   def windowOwned(self): return None
   @windowOwned.setter
   def windowOwned(self, value):
      lib.ScrollBar_set_windowOwned(self.impl, value)

   @property
   def snap(self): return lib.ScrollBar_get_snap(self.impl)
   @snap.setter
   def snap(self, value):
      lib.ScrollBar_set_snap(self.impl, value)

   @property
   def range(self): return lib.ScrollBar_get_range(self.impl)
   @range.setter
   def range(self, value):
      lib.ScrollBar_set_range(self.impl, value)

   @property
   def seen(self): return lib.ScrollBar_get_seen(self.impl)
   @seen.setter
   def seen(self, value):
      lib.ScrollBar_set_seen(self.impl, value)

   @property
   def total(self): return lib.ScrollBar_get_total(self.impl)
   @total.setter
   def total(self, value):
      lib.ScrollBar_set_total(self.impl, value)

   @property
   def lineStep(self): return lib.ScrollBar_get_lineStep(self.impl)
   @lineStep.setter
   def lineStep(self, value):
      lib.ScrollBar_set_lineStep(self.impl, value)

   @property
   def pageStep(self): return lib.ScrollBar_get_pageStep(self.impl)
   @pageStep.setter
   def pageStep(self, value):
      lib.ScrollBar_set_pageStep(self.impl, value)

   @property
   def thumbPosition(self): return lib.ScrollBar_get_thumbPosition(self.impl)
   @thumbPosition.setter
   def thumbPosition(self, value):
      lib.ScrollBar_set_thumbPosition(self.impl, value)

   @property
   def downBtn(self): return Button(impl = IPTR(lib, ffi, self, ScrollBar).downBtn)
   @downBtn.setter
   def downBtn(self, value):
      if not isinstance(value, Button): value = Button(value)
      IPTR(lib, ffi, self, ScrollBar).downBtn = value.impl

   @property
   def upBtn(self): return Button(impl = IPTR(lib, ffi, self, ScrollBar).upBtn)
   @upBtn.setter
   def upBtn(self, value):
      if not isinstance(value, Button): value = Button(value)
      IPTR(lib, ffi, self, ScrollBar).upBtn = value.impl

   @property
   def thumb(self): return Button(impl = IPTR(lib, ffi, self, ScrollBar).thumb)
   @thumb.setter
   def thumb(self, value):
      if not isinstance(value, Button): value = Button(value)
      IPTR(lib, ffi, self, ScrollBar).thumb = value.impl

   @property
   def thumbSize(self): return IPTR(lib, ffi, self, ScrollBar).thumbSize
   @thumbSize.setter
   def thumbSize(self, value): IPTR(lib, ffi, self, ScrollBar).thumbSize = value

   def action(self, action, newPosition, key):
      if key is not None and not isinstance(key, Key): key = Key(key)
      if key is None: key = ffi.NULL
      return lib.ScrollBar_action(self.impl, action, newPosition, key)

   def fn_unset_ScrollBar_notifyScrolling(self, _window, scrollBar, action, position, key):
      return lib.ScrollBar_notifyScrolling(self.impl, _window.impl, ffi.NULL if scrollBar is None else scrollBar.impl, action, position, key)

   @property
   def notifyScrolling(self):
      if hasattr(self, 'fn_ScrollBar_notifyScrolling'): return self.fn_ScrollBar_notifyScrolling
      else: return self.fn_unset_ScrollBar_notifyScrolling
   @notifyScrolling.setter
   def notifyScrolling(self, value):
      self.fn_ScrollBar_notifyScrolling = value
      lib.Instance_setMethod(self.impl, "NotifyScrolling".encode('utf8'), cb_ScrollBar_notifyScrolling)

class ScrollBarAction:
   none        = lib.ScrollBarAction_none
   up          = lib.ScrollBarAction_up
   down        = lib.ScrollBarAction_down
   pageDown    = lib.ScrollBarAction_pageDown
   pageUp      = lib.ScrollBarAction_pageUp
   setPosition = lib.ScrollBarAction_setPosition
   home        = lib.ScrollBarAction_home
   end         = lib.ScrollBarAction_end
   setRange    = lib.ScrollBarAction_setRange
   wheelUp     = lib.ScrollBarAction_wheelUp
   wheelDown   = lib.ScrollBarAction_wheelDown

class ScrollDirection:
   horizontal = lib.ScrollDirection_horizontal
   vertical   = lib.ScrollDirection_vertical

class SelectorBar(Stacker):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                direction = None,
                gap = None,
                reverse = None,
                scrollable = None,
                flipper = None,
                flipSpring = None,
                autoSize = None,
                margin = None,
                endButtons = None,
                hoverScroll = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Stacker.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if direction is not None:                self.direction = direction
      if gap is not None:                      self.gap = gap
      if reverse is not None:                  self.reverse = reverse
      if scrollable is not None:               self.scrollable = scrollable
      if flipper is not None:                  self.flipper = flipper
      if flipSpring is not None:               self.flipSpring = flipSpring
      if autoSize is not None:                 self.autoSize = autoSize
      if margin is not None:                   self.margin = margin
      if endButtons is not None:               self.endButtons = endButtons
      if hoverScroll is not None:              self.hoverScroll = hoverScroll
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def selectedButton(self): return pyOrNewObject(SelectorButton, lib.SelectorBar_get_selectedButton(self.impl))

   def addButton(self, button):
      if button is not None and not isinstance(button, SelectorButton): button = SelectorButton(button)
      if button is None: button = ffi.NULL
      lib.SelectorBar_addButton(self.impl, button)

   def clear(self):
      lib.SelectorBar_clear(self.impl)

   def findButtonByID(self, id):
      return pyOrNewObject(SelectorButton, lib.SelectorBar_findButtonByID(self.impl, id))

   def removeButton(self, button):
      if button is not None and not isinstance(button, SelectorButton): button = SelectorButton(button)
      if button is None: button = ffi.NULL
      lib.SelectorBar_removeButton(self.impl, button)

   def select(self, button):
      if button is not None and not isinstance(button, SelectorButton): button = SelectorButton(button)
      if button is None: button = ffi.NULL
      lib.SelectorBar_select(self.impl, button)

class StatusBar(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                minInfoWidth = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if minInfoWidth is not None:             self.minInfoWidth = minInfoWidth
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def minInfoWidth(self): return lib.StatusBar_get_minInfoWidth(self.impl)
   @minInfoWidth.setter
   def minInfoWidth(self, value):
      lib.StatusBar_set_minInfoWidth(self.impl, value)

   def addField(self, field):
      if field is not None and not isinstance(field, StatusField): field = StatusField(field)
      if field is None: field = ffi.NULL
      lib.StatusBar_addField(self.impl, field)

   def clear(self):
      lib.StatusBar_clear(self.impl)

   def removeField(self, field):
      if field is not None and not isinstance(field, StatusField): field = StatusField(field)
      if field is None: field = ffi.NULL
      lib.StatusBar_removeField(self.impl, field)

class StatusField(Instance):
   def __init__(self,
                statusBar = None,
                color = None,
                backColor = None,
                bold = None,
                text = None,
                width = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if statusBar is not None: self.statusBar = statusBar
      if color is not None:     self.color = color
      if backColor is not None: self.backColor = backColor
      if bold is not None:      self.bold = bold
      if text is not None:      self.text = text
      if width is not None:     self.width = width

   @property
   def statusBar(self): return None
   @statusBar.setter
   def statusBar(self, value):
      if not isinstance(value, StatusBar): value = StatusBar(value)
      lib.StatusField_set_statusBar(self.impl, value.impl)

   @property
   def color(self): return None
   @color.setter
   def color(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.StatusField_set_color(self.impl, value.impl)

   @property
   def backColor(self): return None
   @backColor.setter
   def backColor(self, value):
      if not isinstance(value, ColorAlpha): value = ColorAlpha(value)
      lib.StatusField_set_backColor(self.impl, value.impl)

   @property
   def bold(self): return None
   @bold.setter
   def bold(self, value):
      lib.StatusField_set_bold(self.impl, value)

   @property
   def text(self): return None
   @text.setter
   def text(self, value):
      lib.StatusField_set_text(self.impl, value.encode('utf8'))

   @property
   def width(self): return None
   @width.setter
   def width(self, value):
      lib.StatusField_set_width(self.impl, value)

   def setTextf(self, format):
      lib.StatusField_setTextf(self.impl, format.encode('utf8'))

class SyntaxColorScheme(Instance):
   def __init__(self,
                commentColor = None,
                charLiteralColor = None,
                stringLiteralColor = None,
                preprocessorColor = None,
                numberColor = None,
                keywordColors = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if commentColor is not None:       self.commentColor = commentColor
      if charLiteralColor is not None:   self.charLiteralColor = charLiteralColor
      if stringLiteralColor is not None: self.stringLiteralColor = stringLiteralColor
      if preprocessorColor is not None:  self.preprocessorColor = preprocessorColor
      if numberColor is not None:        self.numberColor = numberColor
      if keywordColors is not None:      self.keywordColors = keywordColors

   @property
   def commentColor(self): return Color(impl = IPTR(lib, ffi, self, SyntaxColorScheme).commentColor)
   @commentColor.setter
   def commentColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      IPTR(lib, ffi, self, SyntaxColorScheme).commentColor = value.impl

   @property
   def charLiteralColor(self): return Color(impl = IPTR(lib, ffi, self, SyntaxColorScheme).charLiteralColor)
   @charLiteralColor.setter
   def charLiteralColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      IPTR(lib, ffi, self, SyntaxColorScheme).charLiteralColor = value.impl

   @property
   def stringLiteralColor(self): return Color(impl = IPTR(lib, ffi, self, SyntaxColorScheme).stringLiteralColor)
   @stringLiteralColor.setter
   def stringLiteralColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      IPTR(lib, ffi, self, SyntaxColorScheme).stringLiteralColor = value.impl

   @property
   def preprocessorColor(self): return Color(impl = IPTR(lib, ffi, self, SyntaxColorScheme).preprocessorColor)
   @preprocessorColor.setter
   def preprocessorColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      IPTR(lib, ffi, self, SyntaxColorScheme).preprocessorColor = value.impl

   @property
   def numberColor(self): return Color(impl = IPTR(lib, ffi, self, SyntaxColorScheme).numberColor)
   @numberColor.setter
   def numberColor(self, value):
      if not isinstance(value, Color): value = Color(value)
      IPTR(lib, ffi, self, SyntaxColorScheme).numberColor = value.impl

   @property
   def keywordColors(self): return pyOrNewObject(Container, lib.SyntaxColorScheme_get_keywordColors(self.impl))
   @keywordColors.setter
   def keywordColors(self, value):
      lib.SyntaxColorScheme_set_keywordColors(self.impl, value.impl)

class Tab(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                tabControl = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if tabControl is not None:               self.tabControl = tabControl
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def tabControl(self): return pyOrNewObject(TabControl, lib.Tab_get_tabControl(self.impl))
   @tabControl.setter
   def tabControl(self, value):
      if not isinstance(value, TabControl): value = TabControl(value)
      lib.Tab_set_tabControl(self.impl, value.impl)

   @property
   def isAdded(self): return lib.Tab_get_isAdded(self.impl)

   def selectTab(self):
      lib.Tab_selectTab(self.impl)

class TabControl(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                placement = None,
                buttonsOffset = None,
                curTab = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if placement is not None:                self.placement = placement
      if buttonsOffset is not None:            self.buttonsOffset = buttonsOffset
      if curTab is not None:                   self.curTab = curTab
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def placement(self): return lib.TabControl_get_placement(self.impl, value)
   @placement.setter
   def placement(self, value):
      lib.TabControl_set_placement(self.impl, value)

   @property
   def buttonsOffset(self): return lib.TabControl_get_buttonsOffset(self.impl)
   @buttonsOffset.setter
   def buttonsOffset(self, value):
      lib.TabControl_set_buttonsOffset(self.impl, value)

   @property
   def curTab(self): return pyOrNewObject(Tab, lib.TabControl_get_curTab(self.impl))
   @curTab.setter
   def curTab(self, value):
      if not isinstance(value, Tab): value = Tab(value)
      lib.TabControl_set_curTab(self.impl, value.impl)

   def addTab(self, tab):
      if tab is not None and not isinstance(tab, Tab): tab = Tab(tab)
      if tab is None: tab = ffi.NULL
      lib.TabControl_addTab(self.impl, tab)

   def removeTab(self, tab):
      if tab is not None and not isinstance(tab, Tab): tab = Tab(tab)
      if tab is None: tab = ffi.NULL
      lib.TabControl_removeTab(self.impl, tab)

class TabsPlacement:
   top    = lib.TabsPlacement_top
   bottom = lib.TabsPlacement_bottom
   left   = lib.TabsPlacement_left
   right  = lib.TabsPlacement_right

class ToolBar(Stacker):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                direction = None,
                gap = None,
                reverse = None,
                scrollable = None,
                flipper = None,
                flipSpring = None,
                autoSize = None,
                margin = None,
                endButtons = None,
                hoverScroll = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Stacker.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if direction is not None:                self.direction = direction
      if gap is not None:                      self.gap = gap
      if reverse is not None:                  self.reverse = reverse
      if scrollable is not None:               self.scrollable = scrollable
      if flipper is not None:                  self.flipper = flipper
      if flipSpring is not None:               self.flipSpring = flipSpring
      if autoSize is not None:                 self.autoSize = autoSize
      if margin is not None:                   self.margin = margin
      if endButtons is not None:               self.endButtons = endButtons
      if hoverScroll is not None:              self.hoverScroll = hoverScroll
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

class ToolButton(Button):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                isRadio = None,
                isCheckbox = None,
                bevel = None,
                bevelOver = None,
                toggle = None,
                checked = None,
                alignment = None,
                bitmap = None,
                stayUp = None,
                scaleBitmap = None,
                keyRepeat = None,
                symbol = None,
                ellipsis = None,
                stayDown = None,
                offset = None,
                buttonState = None,
                bitmapAlignment = None,
                menuItemPtr = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyClicked = None,
                notifyDoubleClick = None,
                notifyMouseLeave = None,
                notifyMouseMove = None,
                notifyMouseOver = None,
                notifyPushed = None,
                notifyReleased = None,
                impl = None):
      Button.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if isRadio is not None:                  self.isRadio = isRadio
      if isCheckbox is not None:               self.isCheckbox = isCheckbox
      if bevel is not None:                    self.bevel = bevel
      if bevelOver is not None:                self.bevelOver = bevelOver
      if toggle is not None:                   self.toggle = toggle
      if checked is not None:                  self.checked = checked
      if alignment is not None:                self.alignment = alignment
      if bitmap is not None:                   self.bitmap = bitmap
      if stayUp is not None:                   self.stayUp = stayUp
      if scaleBitmap is not None:              self.scaleBitmap = scaleBitmap
      if keyRepeat is not None:                self.keyRepeat = keyRepeat
      if symbol is not None:                   self.symbol = symbol
      if ellipsis is not None:                 self.ellipsis = ellipsis
      if stayDown is not None:                 self.stayDown = stayDown
      if offset is not None:                   self.offset = offset
      if buttonState is not None:              self.buttonState = buttonState
      if bitmapAlignment is not None:          self.bitmapAlignment = bitmapAlignment
      if menuItemPtr is not None:              self.menuItemPtr = menuItemPtr
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyClicked is not None:            self.notifyClicked = notifyClicked
      if notifyDoubleClick is not None:        self.notifyDoubleClick = notifyDoubleClick
      if notifyMouseLeave is not None:         self.notifyMouseLeave = notifyMouseLeave
      if notifyMouseMove is not None:          self.notifyMouseMove = notifyMouseMove
      if notifyMouseOver is not None:          self.notifyMouseOver = notifyMouseOver
      if notifyPushed is not None:             self.notifyPushed = notifyPushed
      if notifyReleased is not None:           self.notifyReleased = notifyReleased

   @property
   def menuItemPtr(self): return None
   @menuItemPtr.setter
   def menuItemPtr(self, value):
      lib.ToolButton_set_menuItemPtr(self.impl, value.impl)

   @property
   def menuItem(self): return pyOrNewObject(MenuItem, lib.ToolButton_get_menuItem(self.impl))

class ToolSeparator(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

class ToolTip(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                tip = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if tip is not None:                      self.tip = tip
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def tip(self): value = lib.ToolTip_get_tip(self.impl) if self is not None and self.impl != ffi.NULL else ffi.NULL; return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @tip.setter
   def tip(self, value):
      if not isinstance(value, String): value = String(value)
      lib.ToolTip_set_tip(self.impl, value.impl.encode('utf8'))

@ffi.callback("void(UndoAction, void *)")
def cb_UndoAction_print(__u, data):
   undoaction = pyOrNewObject(UndoAction, __u)
   undoaction.fn_UndoAction_print(undoaction, data)

@ffi.callback("void(UndoAction, void *)")
def cb_UndoAction_redo(__u, data):
   undoaction = pyOrNewObject(UndoAction, __u)
   undoaction.fn_UndoAction_redo(undoaction, data)

@ffi.callback("void(UndoAction, void *)")
def cb_UndoAction_undo(__u, data):
   undoaction = pyOrNewObject(UndoAction, __u)
   undoaction.fn_UndoAction_undo(undoaction, data)

class UndoAction:
   def __init__(self, type = None, continued = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("UndoAction *", lib.Instance_new(lib.class_UndoAction))
         if type is not None:      self.type      = type
         if continued is not None: self.continued = continued

   @property
   def type(self): return self.impl.type
   @type.setter
   def type(self, value): self.impl.type = value

   @property
   def continued(self): return self.impl.continued
   @continued.setter
   def continued(self, value): self.impl.continued = value

   def fn_unset_UndoAction_print(self, data):
      return lib.UndoAction_print(self.impl, data)

   @property
   def print(self):
      if hasattr(self, 'fn_UndoAction_print'): return self.fn_UndoAction_print
      else: return self.fn_unset_UndoAction_print
   @print.setter
   def print(self, value):
      self.fn_UndoAction_print = value
      lib.Instance_setMethod(self.impl, "Print".encode('utf8'), cb_UndoAction_print)

   def fn_unset_UndoAction_redo(self, data):
      return lib.UndoAction_redo(self.impl, data)

   @property
   def redo(self):
      if hasattr(self, 'fn_UndoAction_redo'): return self.fn_UndoAction_redo
      else: return self.fn_unset_UndoAction_redo
   @redo.setter
   def redo(self, value):
      self.fn_UndoAction_redo = value
      lib.Instance_setMethod(self.impl, "Redo".encode('utf8'), cb_UndoAction_redo)

   def fn_unset_UndoAction_undo(self, data):
      return lib.UndoAction_undo(self.impl, data)

   @property
   def undo(self):
      if hasattr(self, 'fn_UndoAction_undo'): return self.fn_UndoAction_undo
      else: return self.fn_unset_UndoAction_undo
   @undo.setter
   def undo(self, value):
      self.fn_UndoAction_undo = value
      lib.Instance_setMethod(self.impl, "Undo".encode('utf8'), cb_UndoAction_undo)

class UndoBuffer(Instance):
   def __init__(self,
                count = None,
                curAction = None,
                data = None,
                dontRecord = None,
                insideRedo = None,
                recordAsOne = None,
                firstEvent = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if count is not None:       self.count = count
      if curAction is not None:   self.curAction = curAction
      if data is not None:        self.data = data
      if dontRecord is not None:  self.dontRecord = dontRecord
      if insideRedo is not None:  self.insideRedo = insideRedo
      if recordAsOne is not None: self.recordAsOne = recordAsOne
      if firstEvent is not None:  self.firstEvent = firstEvent

   @property
   def count(self): return IPTR(lib, ffi, self, UndoBuffer).count
   @count.setter
   def count(self, value): IPTR(lib, ffi, self, UndoBuffer).count = value

   @property
   def curAction(self): return IPTR(lib, ffi, self, UndoBuffer).curAction
   @curAction.setter
   def curAction(self, value): IPTR(lib, ffi, self, UndoBuffer).curAction = value

   @property
   def data(self): return IPTR(lib, ffi, self, UndoBuffer).data
   @data.setter
   def data(self, value): IPTR(lib, ffi, self, UndoBuffer).data = value

   @property
   def dontRecord(self): return IPTR(lib, ffi, self, UndoBuffer).dontRecord
   @dontRecord.setter
   def dontRecord(self, value): IPTR(lib, ffi, self, UndoBuffer).dontRecord = value

   @property
   def insideRedo(self): return IPTR(lib, ffi, self, UndoBuffer).insideRedo
   @insideRedo.setter
   def insideRedo(self, value): IPTR(lib, ffi, self, UndoBuffer).insideRedo = value

   @property
   def recordAsOne(self): return IPTR(lib, ffi, self, UndoBuffer).recordAsOne
   @recordAsOne.setter
   def recordAsOne(self, value): IPTR(lib, ffi, self, UndoBuffer).recordAsOne = value

   @property
   def firstEvent(self): return IPTR(lib, ffi, self, UndoBuffer).firstEvent
   @firstEvent.setter
   def firstEvent(self, value): IPTR(lib, ffi, self, UndoBuffer).firstEvent = value

   def clear(self):
      lib.UndoBuffer_clear(self.impl)

   def record(self, action):
      if action is not None and not isinstance(action, UndoAction): action = UndoAction(action)
      if action is None: action = ffi.NULL
      lib.UndoBuffer_record(self.impl, action)

   def redo(self):
      lib.UndoBuffer_redo(self.impl)

   def undo(self):
      lib.UndoBuffer_undo(self.impl)

class ColorPicker(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                color = None,
                hasAlpha = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if color is not None:                    self.color = color
      if hasAlpha is not None:                 self.hasAlpha = hasAlpha
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def color(self): return Color(impl = lib.ColorPicker_get_color(self.impl))
   @color.setter
   def color(self, value):
      if not isinstance(value, Color): value = Color(value)
      lib.ColorPicker_set_color(self.impl, value.impl)

   @property
   def hasAlpha(self): return lib.ColorPicker_get_hasAlpha(self.impl)
   @hasAlpha.setter
   def hasAlpha(self, value):
      lib.ColorPicker_set_hasAlpha(self.impl, value)

class CreateDirectoryDialog(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                currentDirectory = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if currentDirectory is not None:         self.currentDirectory = currentDirectory
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def currentDirectory(self): value = lib.CreateDirectoryDialog_get_currentDirectory(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @currentDirectory.setter
   def currentDirectory(self, value):
      lib.CreateDirectoryDialog_set_currentDirectory(self.impl, value.encode('utf8'))

class FileDialog(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                type = None,
                filePath = None,
                currentDirectory = None,
                filters = None,
                types = None,
                sizeFilters = None,
                sizeTypes = None,
                filter = None,
                fileType = None,
                mayNotExist = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if type is not None:                     self.type = type
      if filePath is not None:                 self.filePath = filePath
      if currentDirectory is not None:         self.currentDirectory = currentDirectory
      if filters is not None:                  self.filters = filters
      if types is not None:                    self.types = types
      if sizeFilters is not None:              self.sizeFilters = sizeFilters
      if sizeTypes is not None:                self.sizeTypes = sizeTypes
      if filter is not None:                   self.filter = filter
      if fileType is not None:                 self.fileType = fileType
      if mayNotExist is not None:              self.mayNotExist = mayNotExist
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def type(self): return lib.FileDialog_get_type(self.impl, value)
   @type.setter
   def type(self, value):
      lib.FileDialog_set_type(self.impl, value)

   @property
   def filePath(self): value = lib.FileDialog_get_filePath(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @filePath.setter
   def filePath(self, value):
      lib.FileDialog_set_filePath(self.impl, value.encode('utf8'))

   @property
   def currentDirectory(self): value = lib.FileDialog_get_currentDirectory(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @currentDirectory.setter
   def currentDirectory(self, value):
      lib.FileDialog_set_currentDirectory(self.impl, value.encode('utf8'))

   @property
   def filters(self): return lib.FileDialog_get_filters(self.impl)
   @filters.setter
   def filters(self, value):
      lib.FileDialog_set_filters(self.impl, value.impl)

   @property
   def types(self): return lib.FileDialog_get_types(self.impl)
   @types.setter
   def types(self, value):
      lib.FileDialog_set_types(self.impl, value.impl)

   @property
   def sizeFilters(self): return lib.FileDialog_get_sizeFilters(self.impl)
   @sizeFilters.setter
   def sizeFilters(self, value):
      lib.FileDialog_set_sizeFilters(self.impl, value)

   @property
   def sizeTypes(self): return lib.FileDialog_get_sizeTypes(self.impl)
   @sizeTypes.setter
   def sizeTypes(self, value):
      lib.FileDialog_set_sizeTypes(self.impl, value)

   @property
   def filter(self): return lib.FileDialog_get_filter(self.impl)
   @filter.setter
   def filter(self, value):
      lib.FileDialog_set_filter(self.impl, value)

   @property
   def fileType(self): return lib.FileDialog_get_fileType(self.impl)
   @fileType.setter
   def fileType(self, value):
      lib.FileDialog_set_fileType(self.impl, value)

   @property
   def mayNotExist(self): return lib.FileDialog_get_mayNotExist(self.impl)
   @mayNotExist.setter
   def mayNotExist(self, value):
      lib.FileDialog_set_mayNotExist(self.impl, value)

   @property
   def numSelections(self): return lib.FileDialog_get_numSelections(self.impl)

   @property
   def multiFilePaths(self): return lib.FileDialog_get_multiFilePaths(self.impl)

class FileDialogType:
   open      = lib.FileDialogType_open
   save      = lib.FileDialogType_save
   selectDir = lib.FileDialogType_selectDir
   multiOpen = lib.FileDialogType_multiOpen

class FileFilter:
   def __init__(self, name = None, extensions = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("FileFilter *", impl)
      else:
         if isinstance(name, tuple):
            __tuple = name
            name = None
            if len(__tuple) > 0: name       = __tuple[0]
            if len(__tuple) > 1: extensions = __tuple[1]
         self.impl = ffi.new("FileFilter *", { 'name' : name, 'extensions' : extensions })

   @property
   def name(self): return self.impl.name
   @name.setter
   def name(self, value): self.impl.name = value

   @property
   def extensions(self): return self.impl.extensions
   @extensions.setter
   def extensions(self, value): self.impl.extensions = value

   def validateFileName(self, name):
      lib.FileFilter_validateFileName(ffi.cast("FileFilter *", self.impl), name.encode('utf8'))

class FileForceExtension:
   never         = lib.FileForceExtension_never
   always        = lib.FileForceExtension_always
   whenNoneGiven = lib.FileForceExtension_whenNoneGiven

class FileName:
   def __init__(self, name = None, type = None, indent = 0, impl = None):
      if impl is not None:
         self.impl = ffi.new("FileName *", impl)
      else:
         if isinstance(name, tuple):
            __tuple = name
            name = None
            if len(__tuple) > 0: name   = __tuple[0]
            if len(__tuple) > 1: type   = __tuple[1]
            if len(__tuple) > 2: indent = __tuple[2]
         self.impl = ffi.new("FileName *", { 'name' : name, 'type' : type, 'indent' : indent })

   @property
   def name(self): return self.impl.name
   @name.setter
   def name(self, value): self.impl.name = value

   @property
   def type(self): return self.impl.type
   @type.setter
   def type(self, value): self.impl.type = value

   @property
   def indent(self): return self.impl.indent
   @indent.setter
   def indent(self, value): self.impl.indent = value

class FileNameType:
   folder                = lib.FileNameType_folder
   folderOpen            = lib.FileNameType_folderOpen
   computer              = lib.FileNameType_computer
   drive                 = lib.FileNameType_drive
   netDrive              = lib.FileNameType_netDrive
   cdrom                 = lib.FileNameType_cdrom
   removable             = lib.FileNameType_removable
   floppy                = lib.FileNameType_floppy
   network               = lib.FileNameType_network
   server                = lib.FileNameType_server
   share                 = lib.FileNameType_share
   normalFile            = lib.FileNameType_normalFile
   ewsFile               = lib.FileNameType_ewsFile
   epjFile               = lib.FileNameType_epjFile
   ecFile                = lib.FileNameType_ecFile
   ehFile                = lib.FileNameType_ehFile
   cFile                 = lib.FileNameType_cFile
   hFile                 = lib.FileNameType_hFile
   cppFile               = lib.FileNameType_cppFile
   hppFile               = lib.FileNameType_hppFile
   textFile              = lib.FileNameType_textFile
   webFile               = lib.FileNameType_webFile
   pictureFile           = lib.FileNameType_pictureFile
   soundFile             = lib.FileNameType_soundFile
   archiveFile           = lib.FileNameType_archiveFile
   packageFile           = lib.FileNameType_packageFile
   opticalMediaImageFile = lib.FileNameType_opticalMediaImageFile

   @property
   def isFolderType(self): return lib.FileNameType_get_isFolderType(self.impl)

   @property
   def isFileType(self): return lib.FileNameType_get_isFileType(self.impl)

   def selectByExtension(self, extension):
      return lib.FileNameType_selectByExtension(self.impl, extension.encode('utf8'))

class FileType:
   def __init__(self, name = None, typeExtension = None, forceExtension = None, impl = None):
      if impl is not None:
         self.impl = ffi.new("FileType *", impl)
      else:
         if isinstance(name, tuple):
            __tuple = name
            name = None
            if len(__tuple) > 0: name           = __tuple[0]
            if len(__tuple) > 1: typeExtension  = __tuple[1]
            if len(__tuple) > 2: forceExtension = __tuple[2]
         self.impl = ffi.new("FileType *", { 'name' : name, 'typeExtension' : typeExtension, 'forceExtension' : forceExtension })

   @property
   def name(self): return self.impl.name
   @name.setter
   def name(self, value): self.impl.name = value

   @property
   def typeExtension(self): return self.impl.typeExtension
   @typeExtension.setter
   def typeExtension(self, value): self.impl.typeExtension = value

   @property
   def forceExtension(self): return self.impl.forceExtension
   @forceExtension.setter
   def forceExtension(self, value): self.impl.forceExtension = value

class FindDialog(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                editBox = None,
                searchString = None,
                wholeWord = None,
                matchCase = None,
                searchUp = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if editBox is not None:                  self.editBox = editBox
      if searchString is not None:             self.searchString = searchString
      if wholeWord is not None:                self.wholeWord = wholeWord
      if matchCase is not None:                self.matchCase = matchCase
      if searchUp is not None:                 self.searchUp = searchUp
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def editBox(self): return None
   @editBox.setter
   def editBox(self, value):
      if not isinstance(value, EditBox): value = EditBox(value)
      lib.FindDialog_set_editBox(self.impl, value.impl)

   @property
   def searchString(self): value = lib.FindDialog_get_searchString(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @searchString.setter
   def searchString(self, value):
      lib.FindDialog_set_searchString(self.impl, value.encode('utf8'))

   @property
   def wholeWord(self): return lib.FindDialog_get_wholeWord(self.impl)
   @wholeWord.setter
   def wholeWord(self, value):
      lib.FindDialog_set_wholeWord(self.impl, value)

   @property
   def matchCase(self): return lib.FindDialog_get_matchCase(self.impl)
   @matchCase.setter
   def matchCase(self, value):
      lib.FindDialog_set_matchCase(self.impl, value)

   @property
   def searchUp(self): return lib.FindDialog_get_searchUp(self.impl)
   @searchUp.setter
   def searchUp(self, value):
      lib.FindDialog_set_searchUp(self.impl, value)

class GoToDialog(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                line = None,
                editBox = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if line is not None:                     self.line = line
      if editBox is not None:                  self.editBox = editBox
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def line(self): return lib.GoToDialog_get_line(self.impl)
   @line.setter
   def line(self, value):
      lib.GoToDialog_set_line(self.impl, value)

   @property
   def editBox(self): return pyOrNewObject(EditBox, lib.GoToDialog_get_editBox(self.impl))
   @editBox.setter
   def editBox(self, value):
      if not isinstance(value, EditBox): value = EditBox(value)
      lib.GoToDialog_set_editBox(self.impl, value.impl)

class MessageBox(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                type = None,
                contents = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if type is not None:                     self.type = type
      if contents is not None:                 self.contents = contents
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def type(self): return None
   @type.setter
   def type(self, value):
      lib.MessageBox_set_type(self.impl, value)

   @property
   def contents(self): return None
   @contents.setter
   def contents(self, value):
      lib.MessageBox_set_contents(self.impl, value.encode('utf8'))

class MessageBoxType:
   ok          = lib.MessageBoxType_ok
   yesNo       = lib.MessageBoxType_yesNo
   okCancel    = lib.MessageBoxType_okCancel
   yesNoCancel = lib.MessageBoxType_yesNoCancel

class ReplaceDialog(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                editBox = None,
                searchString = None,
                replaceString = None,
                wholeWord = None,
                matchCase = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if editBox is not None:                  self.editBox = editBox
      if searchString is not None:             self.searchString = searchString
      if replaceString is not None:            self.replaceString = replaceString
      if wholeWord is not None:                self.wholeWord = wholeWord
      if matchCase is not None:                self.matchCase = matchCase
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

   @property
   def editBox(self): return None
   @editBox.setter
   def editBox(self, value):
      if not isinstance(value, EditBox): value = EditBox(value)
      lib.ReplaceDialog_set_editBox(self.impl, value.impl)

   @property
   def searchString(self): value = lib.ReplaceDialog_get_searchString(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @searchString.setter
   def searchString(self, value):
      lib.ReplaceDialog_set_searchString(self.impl, value.encode('utf8'))

   @property
   def replaceString(self): value = lib.ReplaceDialog_get_replaceString(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')
   @replaceString.setter
   def replaceString(self, value):
      lib.ReplaceDialog_set_replaceString(self.impl, value.encode('utf8'))

   @property
   def wholeWord(self): return lib.ReplaceDialog_get_wholeWord(self.impl)
   @wholeWord.setter
   def wholeWord(self, value):
      lib.ReplaceDialog_set_wholeWord(self.impl, value)

   @property
   def matchCase(self): return lib.ReplaceDialog_get_matchCase(self.impl)
   @matchCase.setter
   def matchCase(self, value):
      lib.ReplaceDialog_set_matchCase(self.impl, value)

class WindowList(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

class TVisionSkin_Window(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

class WindowsSkin_Button(Button):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                toolTip = None,
                isRadio = None,
                isCheckbox = None,
                bevel = None,
                bevelOver = None,
                toggle = None,
                checked = None,
                alignment = None,
                bitmap = None,
                stayUp = None,
                scaleBitmap = None,
                keyRepeat = None,
                symbol = None,
                ellipsis = None,
                stayDown = None,
                offset = None,
                buttonState = None,
                bitmapAlignment = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                notifyClicked = None,
                notifyDoubleClick = None,
                notifyMouseLeave = None,
                notifyMouseMove = None,
                notifyMouseOver = None,
                notifyPushed = None,
                notifyReleased = None,
                impl = None):
      Button.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if toolTip is not None:                  self.toolTip = toolTip
      if isRadio is not None:                  self.isRadio = isRadio
      if isCheckbox is not None:               self.isCheckbox = isCheckbox
      if bevel is not None:                    self.bevel = bevel
      if bevelOver is not None:                self.bevelOver = bevelOver
      if toggle is not None:                   self.toggle = toggle
      if checked is not None:                  self.checked = checked
      if alignment is not None:                self.alignment = alignment
      if bitmap is not None:                   self.bitmap = bitmap
      if stayUp is not None:                   self.stayUp = stayUp
      if scaleBitmap is not None:              self.scaleBitmap = scaleBitmap
      if keyRepeat is not None:                self.keyRepeat = keyRepeat
      if symbol is not None:                   self.symbol = symbol
      if ellipsis is not None:                 self.ellipsis = ellipsis
      if stayDown is not None:                 self.stayDown = stayDown
      if offset is not None:                   self.offset = offset
      if buttonState is not None:              self.buttonState = buttonState
      if bitmapAlignment is not None:          self.bitmapAlignment = bitmapAlignment
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient
      if notifyClicked is not None:            self.notifyClicked = notifyClicked
      if notifyDoubleClick is not None:        self.notifyDoubleClick = notifyDoubleClick
      if notifyMouseLeave is not None:         self.notifyMouseLeave = notifyMouseLeave
      if notifyMouseMove is not None:          self.notifyMouseMove = notifyMouseMove
      if notifyMouseOver is not None:          self.notifyMouseOver = notifyMouseOver
      if notifyPushed is not None:             self.notifyPushed = notifyPushed
      if notifyReleased is not None:           self.notifyReleased = notifyReleased

class WindowsSkin_Window(Window):
   def __init__(self,
                parent = None,
                master = None,
                caption = None,
                hotKey = None,
                background = None,
                opacity = None,
                foreground = None,
                borderStyle = None,
                minClientSize = None,
                maxClientSize = None,
                hasMaximize = None,
                hasMinimize = None,
                hasClose = None,
                nonClient = None,
                inactive = None,
                clickThrough = None,
                isRemote = None,
                noCycle = None,
                isModal = None,
                interim = None,
                tabCycle = None,
                isDefault = None,
                drawBehind = None,
                hasMenuBar = None,
                hasStatusBar = None,
                stayOnTop = None,
                menu = None,
                font = None,
                sizeAnchor = None,
                size = None,
                clientSize = None,
                anchor = None,
                position = None,
                disabled = None,
                state = None,
                visible = None,
                isDocument = None,
                mergeMenus = None,
                hasHorzScroll = None,
                hasVertScroll = None,
                dontHideScroll = None,
                dontScrollVert = None,
                dontScrollHorz = None,
                snapVertScroll = None,
                snapHorzScroll = None,
                scroll = None,
                modifyVirtualArea = None,
                dontAutoScrollArea = None,
                fileName = None,
                id = None,
                modifiedDocument = None,
                showInTaskBar = None,
                saveDialog = None,
                isActiveClient = None,
                cursor = None,
                name = None,
                displayDriver = None,
                autoCreate = None,
                scrollArea = None,
                is3D = None,
                closing = None,
                fullRender = None,
                icon = None,
                moveable = None,
                alphaBlend = None,
                useSharedMemory = None,
                glCapabilities = None,
                creationActivation = None,
                nativeDecorations = None,
                manageDisplay = None,
                text = None,
                controller = None,
                noConsequential = None,
                getDecorationsSize = None,
                isInside = None,
                isMouseMoving = None,
                isMouseResizing = None,
                isOpaque = None,
                notifyActivate = None,
                notifyDestroyed = None,
                notifySaved = None,
                onActivate = None,
                onActivateClient = None,
                onApplyGraphics = None,
                onChildAddedOrRemoved = None,
                onChildResized = None,
                onChildVisibilityToggled = None,
                onClose = None,
                onCreate = None,
                onDestroy = None,
                onDestroyed = None,
                onDrawOverChildren = None,
                onFileModified = None,
                onHScroll = None,
                onKeyDown = None,
                onKeyHit = None,
                onKeyUp = None,
                onLeftButtonDown = None,
                onLeftButtonUp = None,
                onLeftDoubleClick = None,
                onLoadGraphics = None,
                onMiddleButtonDown = None,
                onMiddleButtonUp = None,
                onMiddleDoubleClick = None,
                onMouseCaptureLost = None,
                onMouseLeave = None,
                onMouseMove = None,
                onMouseOver = None,
                onMoving = None,
                onMultiTouch = None,
                onPosition = None,
                onPostCreate = None,
                onRedraw = None,
                onResize = None,
                onResizing = None,
                onRightButtonDown = None,
                onRightButtonUp = None,
                onRightDoubleClick = None,
                onSaveFile = None,
                onStateChange = None,
                onSysKeyDown = None,
                onSysKeyHit = None,
                onSysKeyUp = None,
                onUnloadGraphics = None,
                onVScroll = None,
                preShowDecorations = None,
                setBox = None,
                setWindowArea = None,
                setWindowMinimum = None,
                showDecorations = None,
                updateNonClient = None,
                impl = None):
      Window.__init__(self, impl = impl)
      if parent is not None:                   self.parent = parent
      if master is not None:                   self.master = master
      if caption is not None:                  self.caption = caption
      if hotKey is not None:                   self.hotKey = hotKey
      if background is not None:               self.background = background
      if opacity is not None:                  self.opacity = opacity
      if foreground is not None:               self.foreground = foreground
      if borderStyle is not None:              self.borderStyle = borderStyle
      if minClientSize is not None:            self.minClientSize = minClientSize
      if maxClientSize is not None:            self.maxClientSize = maxClientSize
      if hasMaximize is not None:              self.hasMaximize = hasMaximize
      if hasMinimize is not None:              self.hasMinimize = hasMinimize
      if hasClose is not None:                 self.hasClose = hasClose
      if nonClient is not None:                self.nonClient = nonClient
      if inactive is not None:                 self.inactive = inactive
      if clickThrough is not None:             self.clickThrough = clickThrough
      if isRemote is not None:                 self.isRemote = isRemote
      if noCycle is not None:                  self.noCycle = noCycle
      if isModal is not None:                  self.isModal = isModal
      if interim is not None:                  self.interim = interim
      if tabCycle is not None:                 self.tabCycle = tabCycle
      if isDefault is not None:                self.isDefault = isDefault
      if drawBehind is not None:               self.drawBehind = drawBehind
      if hasMenuBar is not None:               self.hasMenuBar = hasMenuBar
      if hasStatusBar is not None:             self.hasStatusBar = hasStatusBar
      if stayOnTop is not None:                self.stayOnTop = stayOnTop
      if menu is not None:                     self.menu = menu
      if font is not None:                     self.font = font
      if sizeAnchor is not None:               self.sizeAnchor = sizeAnchor
      if size is not None:                     self.size = size
      if clientSize is not None:               self.clientSize = clientSize
      if anchor is not None:                   self.anchor = anchor
      if position is not None:                 self.position = position
      if disabled is not None:                 self.disabled = disabled
      if state is not None:                    self.state = state
      if visible is not None:                  self.visible = visible
      if isDocument is not None:               self.isDocument = isDocument
      if mergeMenus is not None:               self.mergeMenus = mergeMenus
      if hasHorzScroll is not None:            self.hasHorzScroll = hasHorzScroll
      if hasVertScroll is not None:            self.hasVertScroll = hasVertScroll
      if dontHideScroll is not None:           self.dontHideScroll = dontHideScroll
      if dontScrollVert is not None:           self.dontScrollVert = dontScrollVert
      if dontScrollHorz is not None:           self.dontScrollHorz = dontScrollHorz
      if snapVertScroll is not None:           self.snapVertScroll = snapVertScroll
      if snapHorzScroll is not None:           self.snapHorzScroll = snapHorzScroll
      if scroll is not None:                   self.scroll = scroll
      if modifyVirtualArea is not None:        self.modifyVirtualArea = modifyVirtualArea
      if dontAutoScrollArea is not None:       self.dontAutoScrollArea = dontAutoScrollArea
      if fileName is not None:                 self.fileName = fileName
      if id is not None:                       self.id = id
      if modifiedDocument is not None:         self.modifiedDocument = modifiedDocument
      if showInTaskBar is not None:            self.showInTaskBar = showInTaskBar
      if saveDialog is not None:               self.saveDialog = saveDialog
      if isActiveClient is not None:           self.isActiveClient = isActiveClient
      if cursor is not None:                   self.cursor = cursor
      if name is not None:                     self.name = name
      if displayDriver is not None:            self.displayDriver = displayDriver
      if autoCreate is not None:               self.autoCreate = autoCreate
      if scrollArea is not None:               self.scrollArea = scrollArea
      if is3D is not None:                     self.is3D = is3D
      if closing is not None:                  self.closing = closing
      if fullRender is not None:               self.fullRender = fullRender
      if icon is not None:                     self.icon = icon
      if moveable is not None:                 self.moveable = moveable
      if alphaBlend is not None:               self.alphaBlend = alphaBlend
      if useSharedMemory is not None:          self.useSharedMemory = useSharedMemory
      if glCapabilities is not None:           self.glCapabilities = glCapabilities
      if creationActivation is not None:       self.creationActivation = creationActivation
      if nativeDecorations is not None:        self.nativeDecorations = nativeDecorations
      if manageDisplay is not None:            self.manageDisplay = manageDisplay
      if text is not None:                     self.text = text
      if controller is not None:               self.controller = controller
      if noConsequential is not None:          self.noConsequential = noConsequential
      if getDecorationsSize is not None:       self.getDecorationsSize = getDecorationsSize
      if isInside is not None:                 self.isInside = isInside
      if isMouseMoving is not None:            self.isMouseMoving = isMouseMoving
      if isMouseResizing is not None:          self.isMouseResizing = isMouseResizing
      if isOpaque is not None:                 self.isOpaque = isOpaque
      if notifyActivate is not None:           self.notifyActivate = notifyActivate
      if notifyDestroyed is not None:          self.notifyDestroyed = notifyDestroyed
      if notifySaved is not None:              self.notifySaved = notifySaved
      if onActivate is not None:               self.onActivate = onActivate
      if onActivateClient is not None:         self.onActivateClient = onActivateClient
      if onApplyGraphics is not None:          self.onApplyGraphics = onApplyGraphics
      if onChildAddedOrRemoved is not None:    self.onChildAddedOrRemoved = onChildAddedOrRemoved
      if onChildResized is not None:           self.onChildResized = onChildResized
      if onChildVisibilityToggled is not None: self.onChildVisibilityToggled = onChildVisibilityToggled
      if onClose is not None:                  self.onClose = onClose
      if onCreate is not None:                 self.onCreate = onCreate
      if onDestroy is not None:                self.onDestroy = onDestroy
      if onDestroyed is not None:              self.onDestroyed = onDestroyed
      if onDrawOverChildren is not None:       self.onDrawOverChildren = onDrawOverChildren
      if onFileModified is not None:           self.onFileModified = onFileModified
      if onHScroll is not None:                self.onHScroll = onHScroll
      if onKeyDown is not None:                self.onKeyDown = onKeyDown
      if onKeyHit is not None:                 self.onKeyHit = onKeyHit
      if onKeyUp is not None:                  self.onKeyUp = onKeyUp
      if onLeftButtonDown is not None:         self.onLeftButtonDown = onLeftButtonDown
      if onLeftButtonUp is not None:           self.onLeftButtonUp = onLeftButtonUp
      if onLeftDoubleClick is not None:        self.onLeftDoubleClick = onLeftDoubleClick
      if onLoadGraphics is not None:           self.onLoadGraphics = onLoadGraphics
      if onMiddleButtonDown is not None:       self.onMiddleButtonDown = onMiddleButtonDown
      if onMiddleButtonUp is not None:         self.onMiddleButtonUp = onMiddleButtonUp
      if onMiddleDoubleClick is not None:      self.onMiddleDoubleClick = onMiddleDoubleClick
      if onMouseCaptureLost is not None:       self.onMouseCaptureLost = onMouseCaptureLost
      if onMouseLeave is not None:             self.onMouseLeave = onMouseLeave
      if onMouseMove is not None:              self.onMouseMove = onMouseMove
      if onMouseOver is not None:              self.onMouseOver = onMouseOver
      if onMoving is not None:                 self.onMoving = onMoving
      if onMultiTouch is not None:             self.onMultiTouch = onMultiTouch
      if onPosition is not None:               self.onPosition = onPosition
      if onPostCreate is not None:             self.onPostCreate = onPostCreate
      if onRedraw is not None:                 self.onRedraw = onRedraw
      if onResize is not None:                 self.onResize = onResize
      if onResizing is not None:               self.onResizing = onResizing
      if onRightButtonDown is not None:        self.onRightButtonDown = onRightButtonDown
      if onRightButtonUp is not None:          self.onRightButtonUp = onRightButtonUp
      if onRightDoubleClick is not None:       self.onRightDoubleClick = onRightDoubleClick
      if onSaveFile is not None:               self.onSaveFile = onSaveFile
      if onStateChange is not None:            self.onStateChange = onStateChange
      if onSysKeyDown is not None:             self.onSysKeyDown = onSysKeyDown
      if onSysKeyHit is not None:              self.onSysKeyHit = onSysKeyHit
      if onSysKeyUp is not None:               self.onSysKeyUp = onSysKeyUp
      if onUnloadGraphics is not None:         self.onUnloadGraphics = onUnloadGraphics
      if onVScroll is not None:                self.onVScroll = onVScroll
      if preShowDecorations is not None:       self.preShowDecorations = preShowDecorations
      if setBox is not None:                   self.setBox = setBox
      if setWindowArea is not None:            self.setWindowArea = setWindowArea
      if setWindowMinimum is not None:         self.setWindowMinimum = setWindowMinimum
      if showDecorations is not None:          self.showDecorations = showDecorations
      if updateNonClient is not None:          self.updateNonClient = updateNonClient

@ffi.callback("void(Socket)")
def cb_Socket_onConnect(__s):
   socket = pyOrNewObject(Socket, __s)
   socket.fn_Socket_onConnect(socket)

@ffi.callback("void(Socket, int)")
def cb_Socket_onDisconnect(__s, code):
   socket = pyOrNewObject(Socket, __s)
   socket.fn_Socket_onDisconnect(socket, code)

@ffi.callback("void(Socket, int)")
def cb_Socket_onEstablishConnection(__s, s):
   socket = pyOrNewObject(Socket, __s)
   socket.fn_Socket_onEstablishConnection(socket, s)

@ffi.callback("void(Socket, const byte *, uint)")
def cb_Socket_onReceive(__s, buffer, count):
   socket = pyOrNewObject(Socket, __s)
   socket.fn_Socket_onReceive(socket, buffer, count)

@ffi.callback("void(Socket, Packet *)")
def cb_Socket_onReceivePacket(__s, packet):
   socket = pyOrNewObject(Socket, __s)
   socket.fn_Socket_onReceivePacket(socket, Packet(impl = packet))

@ffi.callback("void(Socket, byte *, int, uint)")
def cb_Socket_receiveData(__s, buffer, count, flags):
   socket = pyOrNewObject(Socket, __s)
   socket.fn_Socket_receiveData(socket, buffer, count, flags)

@ffi.callback("void(Socket, const byte *, int, uint)")
def cb_Socket_sendData(__s, buffer, count, flags):
   socket = pyOrNewObject(Socket, __s)
   socket.fn_Socket_sendData(socket, buffer, count, flags)

class Socket(Instance):
   def __init__(self,
                service = None,
                processAlone = None,
                onConnect = None,
                onDisconnect = None,
                onEstablishConnection = None,
                onReceive = None,
                onReceivePacket = None,
                receiveData = None,
                sendData = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if service is not None:               self.service = service
      if processAlone is not None:          self.processAlone = processAlone
      if onConnect is not None:             self.onConnect = onConnect
      if onDisconnect is not None:          self.onDisconnect = onDisconnect
      if onEstablishConnection is not None: self.onEstablishConnection = onEstablishConnection
      if onReceive is not None:             self.onReceive = onReceive
      if onReceivePacket is not None:       self.onReceivePacket = onReceivePacket
      if receiveData is not None:           self.receiveData = receiveData
      if sendData is not None:              self.sendData = sendData

   @property
   def service(self): return pyOrNewObject(Service, lib.Socket_get_service(self.impl))
   @service.setter
   def service(self, value):
      if not isinstance(value, Service): value = Service(value)
      lib.Socket_set_service(self.impl, value.impl)

   @property
   def inetAddress(self): value = lib.Socket_get_inetAddress(self.impl); return None if value == ffi.NULL else ffi.string(value).decode('utf8')

   @property
   def inetPort(self): return lib.Socket_get_inetPort(self.impl)

   @property
   def next(self): return pyOrNewObject(Socket, lib.Socket_get_next(self.impl))

   @property
   def connected(self): return lib.Socket_get_connected(self.impl)

   @property
   def processAlone(self): return lib.Socket_get_processAlone(self.impl)
   @processAlone.setter
   def processAlone(self, value):
      lib.Socket_set_processAlone(self.impl, value)

   def connect(self, address, port):
      return lib.Socket_connect(self.impl, address.encode('utf8'), port)

   def datagramConnect(self, sendAddress, port):
      return lib.Socket_datagramConnect(self.impl, sendAddress.encode('utf8'), port)

   def datagramHost(self, port):
      return lib.Socket_datagramHost(self.impl, port)

   def disconnect(self, code):
      lib.Socket_disconnect(self.impl, code)

   def fn_unset_Socket_onConnect(self):
      return lib.Socket_onConnect(self.impl)

   @property
   def onConnect(self):
      if hasattr(self, 'fn_Socket_onConnect'): return self.fn_Socket_onConnect
      else: return self.fn_unset_Socket_onConnect
   @onConnect.setter
   def onConnect(self, value):
      self.fn_Socket_onConnect = value
      lib.Instance_setMethod(self.impl, "OnConnect".encode('utf8'), cb_Socket_onConnect)

   def fn_unset_Socket_onDisconnect(self, code):
      return lib.Socket_onDisconnect(self.impl, code)

   @property
   def onDisconnect(self):
      if hasattr(self, 'fn_Socket_onDisconnect'): return self.fn_Socket_onDisconnect
      else: return self.fn_unset_Socket_onDisconnect
   @onDisconnect.setter
   def onDisconnect(self, value):
      self.fn_Socket_onDisconnect = value
      lib.Instance_setMethod(self.impl, "OnDisconnect".encode('utf8'), cb_Socket_onDisconnect)

   def fn_unset_Socket_onEstablishConnection(self, s):
      return lib.Socket_onEstablishConnection(self.impl, s)

   @property
   def onEstablishConnection(self):
      if hasattr(self, 'fn_Socket_onEstablishConnection'): return self.fn_Socket_onEstablishConnection
      else: return self.fn_unset_Socket_onEstablishConnection
   @onEstablishConnection.setter
   def onEstablishConnection(self, value):
      self.fn_Socket_onEstablishConnection = value
      lib.Instance_setMethod(self.impl, "OnEstablishConnection".encode('utf8'), cb_Socket_onEstablishConnection)

   def fn_unset_Socket_onReceive(self, buffer, count):
      return lib.Socket_onReceive(self.impl, buffer, count)

   @property
   def onReceive(self):
      if hasattr(self, 'fn_Socket_onReceive'): return self.fn_Socket_onReceive
      else: return self.fn_unset_Socket_onReceive
   @onReceive.setter
   def onReceive(self, value):
      self.fn_Socket_onReceive = value
      lib.Instance_setMethod(self.impl, "OnReceive".encode('utf8'), cb_Socket_onReceive)

   def fn_unset_Socket_onReceivePacket(self, packet):
      return lib.Socket_onReceivePacket(self.impl, ffi.NULL if packet is None else packet.impl)

   @property
   def onReceivePacket(self):
      if hasattr(self, 'fn_Socket_onReceivePacket'): return self.fn_Socket_onReceivePacket
      else: return self.fn_unset_Socket_onReceivePacket
   @onReceivePacket.setter
   def onReceivePacket(self, value):
      self.fn_Socket_onReceivePacket = value
      lib.Instance_setMethod(self.impl, "OnReceivePacket".encode('utf8'), cb_Socket_onReceivePacket)

   def process(self):
      return lib.Socket_process(self.impl)

   def processTimeOut(self, timeOut):
      if timeOut is not None and not isinstance(timeOut, Time): timeOut = Seconds(timeOut)
      if timeOut is None: timeOut = ffi.NULL
      return lib.Socket_processTimeOut(self.impl, timeOut)

   def fn_unset_Socket_receiveData(self, buffer, count, flags):
      return lib.Socket_receiveData(self.impl, buffer, count, flags)

   @property
   def receiveData(self):
      if hasattr(self, 'fn_Socket_receiveData'): return self.fn_Socket_receiveData
      else: return self.fn_unset_Socket_receiveData
   @receiveData.setter
   def receiveData(self, value):
      self.fn_Socket_receiveData = value
      lib.Instance_setMethod(self.impl, "ReceiveData".encode('utf8'), cb_Socket_receiveData)

   def send(self, buffer, size):
      return lib.Socket_send(self.impl, buffer, size)

   def fn_unset_Socket_sendData(self, buffer, count, flags):
      return lib.Socket_sendData(self.impl, buffer, count, flags)

   @property
   def sendData(self):
      if hasattr(self, 'fn_Socket_sendData'): return self.fn_Socket_sendData
      else: return self.fn_unset_Socket_sendData
   @sendData.setter
   def sendData(self, value):
      self.fn_Socket_sendData = value
      lib.Instance_setMethod(self.impl, "SendData".encode('utf8'), cb_Socket_sendData)

   def sendPacket(self, packet):
      if packet is not None and not isinstance(packet, Packet): packet = Packet(packet)
      if packet is None: packet = ffi.NULL
      return lib.Socket_sendPacket(self.impl, packet)

   def sendString(self, string):
      return lib.Socket_sendString(self.impl, string.encode('utf8'))

   def sendf(self, format):
      return lib.Socket_sendf(self.impl, format.encode('utf8'))

   def safeDecRef(self):
      lib.Socket_safeDecRef(self.impl)

   def safeIncRef(self):
      lib.Socket_safeIncRef(self.impl)

@ffi.callback("void(Service)")
def cb_Service_onAccept(__s):
   service = pyOrNewObject(Service, __s)
   service.fn_Service_onAccept(service)

class Service(Instance):
   def __init__(self,
                port = None,
                processAlone = None,
                onAccept = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if port is not None:         self.port = port
      if processAlone is not None: self.processAlone = processAlone
      if onAccept is not None:     self.onAccept = onAccept

   @property
   def port(self): return lib.Service_get_port(self.impl)
   @port.setter
   def port(self, value):
      lib.Service_set_port(self.impl, value)

   @property
   def firstClient(self): return pyOrNewObject(Socket, lib.Service_get_firstClient(self.impl))

   @property
   def processAlone(self): return lib.Service_get_processAlone(self.impl)
   @processAlone.setter
   def processAlone(self, value):
      lib.Service_set_processAlone(self.impl, value)

   def fn_unset_Service_onAccept(self):
      return lib.Service_onAccept(self.impl)

   @property
   def onAccept(self):
      if hasattr(self, 'fn_Service_onAccept'): return self.fn_Service_onAccept
      else: return self.fn_unset_Service_onAccept
   @onAccept.setter
   def onAccept(self, value):
      self.fn_Service_onAccept = value
      lib.Instance_setMethod(self.impl, "OnAccept".encode('utf8'), cb_Service_onAccept)

   def process(self):
      return lib.Service_process(self.impl)

   def processTimeOut(self, timeOut):
      if timeOut is not None and not isinstance(timeOut, Time): timeOut = Seconds(timeOut)
      if timeOut is None: timeOut = ffi.NULL
      return lib.Service_processTimeOut(self.impl, timeOut)

   def start(self):
      return lib.Service_start(self.impl)

   def stop(self):
      return lib.Service_stop(self.impl)

@ffi.callback("void(DCOMClientObject, uint, SerialBuffer)")
def cb_DCOMClientObject_callVirtualMethod(__d, __ecereMethodID, __ecereBuffer):
   dcomclientobject = pyOrNewObject(DCOMClientObject, __d)
   dcomclientobject.fn_DCOMClientObject_callVirtualMethod(dcomclientobject, __ecereMethodID, pyOrNewObject(SerialBuffer, __ecereBuffer))

class DCOMClientObject(Socket):
   def __init__(self,
                service = None,
                processAlone = None,
                objectID = None,
                answered = None,
                __ecereBuffer = None,
                acks = None,
                nextCallID = None,
                onConnect = None,
                onDisconnect = None,
                onEstablishConnection = None,
                onReceive = None,
                onReceivePacket = None,
                receiveData = None,
                sendData = None,
                callVirtualMethod = None,
                impl = None):
      Socket.__init__(self, impl = impl)
      if service is not None:               self.service = service
      if processAlone is not None:          self.processAlone = processAlone
      if objectID is not None:              self.objectID = objectID
      if answered is not None:              self.answered = answered
      if __ecereBuffer is not None:         self.__ecereBuffer = __ecereBuffer
      if acks is not None:                  self.acks = acks
      if nextCallID is not None:            self.nextCallID = nextCallID
      if onConnect is not None:             self.onConnect = onConnect
      if onDisconnect is not None:          self.onDisconnect = onDisconnect
      if onEstablishConnection is not None: self.onEstablishConnection = onEstablishConnection
      if onReceive is not None:             self.onReceive = onReceive
      if onReceivePacket is not None:       self.onReceivePacket = onReceivePacket
      if receiveData is not None:           self.receiveData = receiveData
      if sendData is not None:              self.sendData = sendData
      if callVirtualMethod is not None:     self.callVirtualMethod = callVirtualMethod

   @property
   def objectID(self): return IPTR(lib, ffi, self, DCOMClientObject).objectID
   @objectID.setter
   def objectID(self, value): IPTR(lib, ffi, self, DCOMClientObject).objectID = value

   @property
   def answered(self): return IPTR(lib, ffi, self, DCOMClientObject).answered
   @answered.setter
   def answered(self, value): IPTR(lib, ffi, self, DCOMClientObject).answered = value

   @property
   def __ecereBuffer(self): return SerialBuffer(impl = IPTR(lib, ffi, self, DCOMClientObject).__ecereBuffer)
   @__ecereBuffer.setter
   def __ecereBuffer(self, value):
      if not isinstance(value, SerialBuffer): value = SerialBuffer(value)
      IPTR(lib, ffi, self, DCOMClientObject).__ecereBuffer = value.impl

   @property
   def acks(self): return List(impl = IPTR(lib, ffi, self, DCOMClientObject).acks)
   @acks.setter
   def acks(self, value): IPTR(lib, ffi, self, DCOMClientObject).acks = value.impl

   @property
   def nextCallID(self): return IPTR(lib, ffi, self, DCOMClientObject).nextCallID
   @nextCallID.setter
   def nextCallID(self, value): IPTR(lib, ffi, self, DCOMClientObject).nextCallID = value

   def callMethod(self, methodID):
      return lib.DCOMClientObject_callMethod(self.impl, methodID)

   def fn_unset_DCOMClientObject_callVirtualMethod(self, __ecereMethodID, __ecereBuffer):
      return lib.DCOMClientObject_callVirtualMethod(self.impl, __ecereMethodID, ffi.NULL if __ecereBuffer is None else __ecereBuffer.impl)

   @property
   def callVirtualMethod(self):
      if hasattr(self, 'fn_DCOMClientObject_callVirtualMethod'): return self.fn_DCOMClientObject_callVirtualMethod
      else: return self.fn_unset_DCOMClientObject_callVirtualMethod
   @callVirtualMethod.setter
   def callVirtualMethod(self, value):
      self.fn_DCOMClientObject_callVirtualMethod = value
      lib.Instance_setMethod(self.impl, "CallVirtualMethod".encode('utf8'), cb_DCOMClientObject_callVirtualMethod)

   def connect(self, server, port):
      return lib.DCOMClientObject_connect(self.impl, server.encode('utf8'), port)

class DCOMSendControl(Instance):
   def __init__(self,
                impl = None):
      Instance.__init__(self, impl = impl)

   def resume(self):
      lib.DCOMSendControl_resume(self.impl)

   def stop(self):
      lib.DCOMSendControl_stop(self.impl)

@ffi.callback("void(DCOMServerObject, uint, SerialBuffer)")
def cb_DCOMServerObject_callMethod(__d, __ecereMethodID, __ecereBuffer):
   dcomserverobject = pyOrNewObject(DCOMServerObject, __d)
   dcomserverobject.fn_DCOMServerObject_callMethod(dcomserverobject, __ecereMethodID, pyOrNewObject(SerialBuffer, __ecereBuffer))

class DCOMServerObject(Instance):
   def __init__(self,
                instance = None,
                serverSocket = None,
                id = None,
                argsBuffer = None,
                returnBuffer = None,
                acks = None,
                mutex = None,
                nextCallID = None,
                callMethod = None,
                impl = None):
      Instance.__init__(self, impl = impl)
      if instance is not None:     self.instance = instance
      if serverSocket is not None: self.serverSocket = serverSocket
      if id is not None:           self.id = id
      if argsBuffer is not None:   self.argsBuffer = argsBuffer
      if returnBuffer is not None: self.returnBuffer = returnBuffer
      if acks is not None:         self.acks = acks
      if mutex is not None:        self.mutex = mutex
      if nextCallID is not None:   self.nextCallID = nextCallID
      if callMethod is not None:   self.callMethod = callMethod

   @property
   def instance(self): return Instance(impl = IPTR(lib, ffi, self, DCOMServerObject).instance)
   @instance.setter
   def instance(self, value):
      if not isinstance(value, Instance): value = Instance(value)
      IPTR(lib, ffi, self, DCOMServerObject).instance = value.impl

   @property
   def serverSocket(self): return DCOMServerSocket(impl = IPTR(lib, ffi, self, DCOMServerObject).serverSocket)
   @serverSocket.setter
   def serverSocket(self, value):
      if not isinstance(value, DCOMServerSocket): value = DCOMServerSocket(value)
      IPTR(lib, ffi, self, DCOMServerObject).serverSocket = value.impl

   @property
   def id(self): return IPTR(lib, ffi, self, DCOMServerObject).id
   @id.setter
   def id(self, value): IPTR(lib, ffi, self, DCOMServerObject).id = value

   @property
   def argsBuffer(self): return SerialBuffer(impl = IPTR(lib, ffi, self, DCOMServerObject).argsBuffer)
   @argsBuffer.setter
   def argsBuffer(self, value):
      if not isinstance(value, SerialBuffer): value = SerialBuffer(value)
      IPTR(lib, ffi, self, DCOMServerObject).argsBuffer = value.impl

   @property
   def returnBuffer(self): return SerialBuffer(impl = IPTR(lib, ffi, self, DCOMServerObject).returnBuffer)
   @returnBuffer.setter
   def returnBuffer(self, value):
      if not isinstance(value, SerialBuffer): value = SerialBuffer(value)
      IPTR(lib, ffi, self, DCOMServerObject).returnBuffer = value.impl

   @property
   def acks(self): return List(impl = IPTR(lib, ffi, self, DCOMServerObject).acks)
   @acks.setter
   def acks(self, value): IPTR(lib, ffi, self, DCOMServerObject).acks = value.impl

   @property
   def mutex(self): return Mutex(impl = IPTR(lib, ffi, self, DCOMServerObject).mutex)
   @mutex.setter
   def mutex(self, value):
      if not isinstance(value, Mutex): value = Mutex(value)
      IPTR(lib, ffi, self, DCOMServerObject).mutex = value.impl

   @property
   def nextCallID(self): return IPTR(lib, ffi, self, DCOMServerObject).nextCallID
   @nextCallID.setter
   def nextCallID(self, value): IPTR(lib, ffi, self, DCOMServerObject).nextCallID = value

   def fn_unset_DCOMServerObject_callMethod(self, __ecereMethodID, __ecereBuffer):
      return lib.DCOMServerObject_callMethod(self.impl, __ecereMethodID, ffi.NULL if __ecereBuffer is None else __ecereBuffer.impl)

   @property
   def callMethod(self):
      if hasattr(self, 'fn_DCOMServerObject_callMethod'): return self.fn_DCOMServerObject_callMethod
      else: return self.fn_unset_DCOMServerObject_callMethod
   @callMethod.setter
   def callMethod(self, value):
      self.fn_DCOMServerObject_callMethod = value
      lib.Instance_setMethod(self.impl, "CallMethod".encode('utf8'), cb_DCOMServerObject_callMethod)

   def callVirtualMethod(self, methodID, hasReturnValue):
      return lib.DCOMServerObject_callVirtualMethod(self.impl, methodID, hasReturnValue)

class DCOMServerSocket(Socket):
   def __init__(self,
                service = None,
                processAlone = None,
                onConnect = None,
                onDisconnect = None,
                onEstablishConnection = None,
                onReceive = None,
                onReceivePacket = None,
                receiveData = None,
                sendData = None,
                impl = None):
      Socket.__init__(self, impl = impl)
      if service is not None:               self.service = service
      if processAlone is not None:          self.processAlone = processAlone
      if onConnect is not None:             self.onConnect = onConnect
      if onDisconnect is not None:          self.onDisconnect = onDisconnect
      if onEstablishConnection is not None: self.onEstablishConnection = onEstablishConnection
      if onReceive is not None:             self.onReceive = onReceive
      if onReceivePacket is not None:       self.onReceivePacket = onReceivePacket
      if receiveData is not None:           self.receiveData = receiveData
      if sendData is not None:              self.sendData = sendData

class DCOMService(Service):
   def __init__(self,
                port = None,
                processAlone = None,
                onAccept = None,
                impl = None):
      Service.__init__(self, impl = impl)
      if port is not None:         self.port = port
      if processAlone is not None: self.processAlone = processAlone
      if onAccept is not None:     self.onAccept = onAccept

   def start(self):
      return lib.DCOMService_start(self.impl)

   def stop(self):
      return lib.DCOMService_stop(self.impl)

class DisconnectCode:
   remoteLost    = lib.DisconnectCode_remoteLost
   remoteClosed  = lib.DisconnectCode_remoteClosed
   resolveFailed = lib.DisconnectCode_resolveFailed
   connectFailed = lib.DisconnectCode_connectFailed

class FileServerConnection(Socket):
   def __init__(self,
                service = None,
                processAlone = None,
                onConnect = None,
                onDisconnect = None,
                onEstablishConnection = None,
                onReceive = None,
                onReceivePacket = None,
                receiveData = None,
                sendData = None,
                impl = None):
      Socket.__init__(self, impl = impl)
      if service is not None:               self.service = service
      if processAlone is not None:          self.processAlone = processAlone
      if onConnect is not None:             self.onConnect = onConnect
      if onDisconnect is not None:          self.onDisconnect = onDisconnect
      if onEstablishConnection is not None: self.onEstablishConnection = onEstablishConnection
      if onReceive is not None:             self.onReceive = onReceive
      if onReceivePacket is not None:       self.onReceivePacket = onReceivePacket
      if receiveData is not None:           self.receiveData = receiveData
      if sendData is not None:              self.sendData = sendData

   def open(self, fileName, mode):
      return pyOrNewObject(NetworkClientFile, lib.FileServerConnection_open(self.impl, fileName.encode('utf8'), mode))

class HTTPFile(File):
   def __init__(self,
                input = None,
                output = None,
                buffered = None,
                reuseConnection = None,
                readData = None,
                writeData = None,
                close = None,
                closeInput = None,
                closeOutput = None,
                eof = None,
                getSize = None,
                getc = None,
                lock = None,
                putc = None,
                puts = None,
                read = None,
                seek = None,
                seek64 = None,
                tell = None,
                truncate = None,
                unlock = None,
                write = None,
                impl = None):
      File.__init__(self, impl = impl)
      if input is not None:           self.input = input
      if output is not None:          self.output = output
      if buffered is not None:        self.buffered = buffered
      if reuseConnection is not None: self.reuseConnection = reuseConnection
      if readData is not None:        self.readData = readData
      if writeData is not None:       self.writeData = writeData
      if close is not None:           self.close = close
      if closeInput is not None:      self.closeInput = closeInput
      if closeOutput is not None:     self.closeOutput = closeOutput
      if eof is not None:             self.eof = eof
      if getSize is not None:         self.getSize = getSize
      if getc is not None:            self.getc = getc
      if lock is not None:            self.lock = lock
      if putc is not None:            self.putc = putc
      if puts is not None:            self.puts = puts
      if read is not None:            self.read = read
      if seek is not None:            self.seek = seek
      if seek64 is not None:          self.seek64 = seek64
      if tell is not None:            self.tell = tell
      if truncate is not None:        self.truncate = truncate
      if unlock is not None:          self.unlock = unlock
      if write is not None:           self.write = write

   @property
   def reuseConnection(self): return lib.HTTPFile_get_reuseConnection(self.impl)
   @reuseConnection.setter
   def reuseConnection(self, value):
      lib.HTTPFile_set_reuseConnection(self.impl, value)

   @property
   def contentType(self): value = lib.HTTPFile_get_contentType(self.impl) if self is not None and self.impl != ffi.NULL else ffi.NULL; return None if value == ffi.NULL else ffi.string(value).decode('utf8')

   @property
   def contentDisposition(self): value = lib.HTTPFile_get_contentDisposition(self.impl) if self is not None and self.impl != ffi.NULL else ffi.NULL; return None if value == ffi.NULL else ffi.string(value).decode('utf8')

   def openURL(self, name, referer, relocation):
      return lib.HTTPFile_openURL(self.impl, name.encode('utf8'), referer.encode('utf8'), relocation.encode('utf8'))

class NetworkClientFile(File):
   def __init__(self,
                input = None,
                output = None,
                buffered = None,
                readData = None,
                writeData = None,
                close = None,
                closeInput = None,
                closeOutput = None,
                eof = None,
                getSize = None,
                getc = None,
                lock = None,
                putc = None,
                puts = None,
                read = None,
                seek = None,
                seek64 = None,
                tell = None,
                truncate = None,
                unlock = None,
                write = None,
                impl = None):
      File.__init__(self, impl = impl)
      if input is not None:       self.input = input
      if output is not None:      self.output = output
      if buffered is not None:    self.buffered = buffered
      if readData is not None:    self.readData = readData
      if writeData is not None:   self.writeData = writeData
      if close is not None:       self.close = close
      if closeInput is not None:  self.closeInput = closeInput
      if closeOutput is not None: self.closeOutput = closeOutput
      if eof is not None:         self.eof = eof
      if getSize is not None:     self.getSize = getSize
      if getc is not None:        self.getc = getc
      if lock is not None:        self.lock = lock
      if putc is not None:        self.putc = putc
      if puts is not None:        self.puts = puts
      if read is not None:        self.read = read
      if seek is not None:        self.seek = seek
      if seek64 is not None:      self.seek64 = seek64
      if tell is not None:        self.tell = tell
      if truncate is not None:    self.truncate = truncate
      if unlock is not None:      self.unlock = unlock
      if write is not None:       self.write = write

class Packet:
   def __init__(self, size = None, impl = None):
      if impl is not None:
         self.impl = impl
      else:
         self.impl = ffi.cast("Packet *", lib.Instance_new(lib.class_Packet))
         if size is not None: self.size = size

   @property
   def size(self): return self.impl.size
   @size.setter
   def size(self, value): self.impl.size = value

class SSLSocket(Socket):
   def __init__(self,
                service = None,
                processAlone = None,
                autoEstablish = None,
                onConnect = None,
                onDisconnect = None,
                onEstablishConnection = None,
                onReceive = None,
                onReceivePacket = None,
                receiveData = None,
                sendData = None,
                impl = None):
      Socket.__init__(self, impl = impl)
      if service is not None:               self.service = service
      if processAlone is not None:          self.processAlone = processAlone
      if autoEstablish is not None:         self.autoEstablish = autoEstablish
      if onConnect is not None:             self.onConnect = onConnect
      if onDisconnect is not None:          self.onDisconnect = onDisconnect
      if onEstablishConnection is not None: self.onEstablishConnection = onEstablishConnection
      if onReceive is not None:             self.onReceive = onReceive
      if onReceivePacket is not None:       self.onReceivePacket = onReceivePacket
      if receiveData is not None:           self.receiveData = receiveData
      if sendData is not None:              self.sendData = sendData

   @property
   def autoEstablish(self): return lib.SSLSocket_get_autoEstablish(self.impl)
   @autoEstablish.setter
   def autoEstablish(self, value):
      lib.SSLSocket_set_autoEstablish(self.impl, value)

   def establishConnection(self):
      return lib.SSLSocket_establishConnection(self.impl)

class SocketType:
   tcp = lib.SocketType_tcp
   udp = lib.SocketType_udp
def connectToFileServer(hostName, port): lib.connectToFileServer(hostName, port)
def fileOpenURL(name): lib.fileOpenURL(name)
def getAddressFromName(hostName, inetAddress): lib.getAddressFromName(hostName, inetAddress)
def getHostName(hostName, size): lib.getHostName(hostName, size)
def getNameFromAddress(inetAddress, hostName): lib.getNameFromAddress(inetAddress, hostName)
